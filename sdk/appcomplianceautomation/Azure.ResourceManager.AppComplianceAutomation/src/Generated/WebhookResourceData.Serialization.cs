// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.AppComplianceAutomation.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppComplianceAutomation
{
    public partial class WebhookResourceData : IUtf8JsonSerializable, IJsonModel<WebhookResourceData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<WebhookResourceData>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<WebhookResourceData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WebhookResourceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WebhookResourceData)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(WebhookId))
            {
                writer.WritePropertyName("webhookId"u8);
                writer.WriteStringValue(WebhookId);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(TenantId))
            {
                writer.WritePropertyName("tenantId"u8);
                writer.WriteStringValue(TenantId.Value);
            }
            if (Optional.IsDefined(SendAllEvents))
            {
                writer.WritePropertyName("sendAllEvents"u8);
                writer.WriteStringValue(SendAllEvents.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Events))
            {
                writer.WritePropertyName("events"u8);
                writer.WriteStartArray();
                foreach (var item in Events)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PayloadUri))
            {
                writer.WritePropertyName("payloadUrl"u8);
                writer.WriteStringValue(PayloadUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ContentType))
            {
                writer.WritePropertyName("contentType"u8);
                writer.WriteStringValue(ContentType.Value.ToString());
            }
            if (Optional.IsDefined(WebhookKey))
            {
                writer.WritePropertyName("webhookKey"u8);
                writer.WriteStringValue(WebhookKey);
            }
            if (Optional.IsDefined(UpdateWebhookKey))
            {
                writer.WritePropertyName("updateWebhookKey"u8);
                writer.WriteStringValue(UpdateWebhookKey.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(WebhookKeyEnabled))
            {
                writer.WritePropertyName("webhookKeyEnabled"u8);
                writer.WriteStringValue(WebhookKeyEnabled.Value.ToString());
            }
            if (Optional.IsDefined(EnableSslVerification))
            {
                writer.WritePropertyName("enableSslVerification"u8);
                writer.WriteStringValue(EnableSslVerification.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DeliveryStatus))
            {
                writer.WritePropertyName("deliveryStatus"u8);
                writer.WriteStringValue(DeliveryStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        WebhookResourceData IJsonModel<WebhookResourceData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WebhookResourceData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(WebhookResourceData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeWebhookResourceData(document.RootElement, options);
        }

        internal static WebhookResourceData DeserializeWebhookResourceData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            string webhookId = default;
            WebhookStatus? status = default;
            Guid? tenantId = default;
            SendAllEvent? sendAllEvents = default;
            IList<NotificationEvent> events = default;
            Uri payloadUrl = default;
            Models.ContentType? contentType = default;
            string webhookKey = default;
            UpdateWebhookKey? updateWebhookKey = default;
            WebhookKeyEnabled? webhookKeyEnabled = default;
            EnableSslVerification? enableSslVerification = default;
            DeliveryStatus? deliveryStatus = default;
            ProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("webhookId"u8))
                        {
                            webhookId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new WebhookStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("tenantId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            tenantId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("sendAllEvents"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sendAllEvents = new SendAllEvent(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("events"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NotificationEvent> array = new List<NotificationEvent>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new NotificationEvent(item.GetString()));
                            }
                            events = array;
                            continue;
                        }
                        if (property0.NameEquals("payloadUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            payloadUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("contentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contentType = new Models.ContentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("webhookKey"u8))
                        {
                            webhookKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("updateWebhookKey"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updateWebhookKey = new UpdateWebhookKey(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("webhookKeyEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            webhookKeyEnabled = new WebhookKeyEnabled(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enableSslVerification"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableSslVerification = new EnableSslVerification(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("deliveryStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            deliveryStatus = new DeliveryStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new WebhookResourceData(
                id,
                name,
                type,
                systemData,
                webhookId,
                status,
                tenantId,
                sendAllEvents,
                events ?? new ChangeTrackingList<NotificationEvent>(),
                payloadUrl,
                contentType,
                webhookKey,
                updateWebhookKey,
                webhookKeyEnabled,
                enableSslVerification,
                deliveryStatus,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<WebhookResourceData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WebhookResourceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(WebhookResourceData)} does not support writing '{options.Format}' format.");
            }
        }

        WebhookResourceData IPersistableModel<WebhookResourceData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<WebhookResourceData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeWebhookResourceData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(WebhookResourceData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<WebhookResourceData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
