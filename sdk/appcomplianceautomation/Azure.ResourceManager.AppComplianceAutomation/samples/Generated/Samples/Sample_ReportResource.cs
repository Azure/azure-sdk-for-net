// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppComplianceAutomation;
using Azure.ResourceManager.AppComplianceAutomation.Models;

namespace Azure.ResourceManager.AppComplianceAutomation.Samples
{
    public partial class Sample_ReportResource
    {
        // Report_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_ReportGet()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Report_Get.json
            // this example is just showing the usage of "Report_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "testReport";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // invoke the operation
            ReportResource result = await reportResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ReportResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Report_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ReportUpdate()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Report_Update.json
            // this example is just showing the usage of "Report_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "testReportName";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // invoke the operation
            ReportResourcePatch patch = new ReportResourcePatch()
            {
                Properties = new ReportProperties("GMT Standard Time", DateTimeOffset.Parse("2022-03-04T05:11:56.197Z"), new ResourceMetadata[]
            {
new ResourceMetadata("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint")
{
Tags =
{
["key1"] = "value1",
},
}
            })
                {
                    OfferGuid = "0000",
                },
            };
            ArmOperation<ReportResource> lro = await reportResource.UpdateAsync(WaitUntil.Completed, patch);
            ReportResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ReportResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Report_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_ReportDelete()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Report_Delete.json
            // this example is just showing the usage of "Report_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "testReportName";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // invoke the operation
            await reportResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
