// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedServiceIdentity.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes a federated identity credential.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class FederatedIdentityCredential : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the FederatedIdentityCredential
        /// class.
        /// </summary>
        public FederatedIdentityCredential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FederatedIdentityCredential
        /// class.
        /// </summary>
        /// <param name="issuer">The URL of the issuer to be trusted.</param>
        /// <param name="subject">The identifier of the external
        /// identity.</param>
        /// <param name="audiences">The list of audiences that can appear in
        /// the issued token.</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        public FederatedIdentityCredential(string issuer, string subject, IList<string> audiences, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            Issuer = issuer;
            Subject = subject;
            Audiences = audiences;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the URL of the issuer to be trusted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.issuer")]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the external identity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the list of audiences that can appear in the issued
        /// token.
        /// </summary>
        [JsonProperty(PropertyName = "properties.audiences")]
        public IList<string> Audiences { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Issuer == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Issuer");
            }
            if (Subject == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subject");
            }
            if (Audiences == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Audiences");
            }
        }
    }
}
