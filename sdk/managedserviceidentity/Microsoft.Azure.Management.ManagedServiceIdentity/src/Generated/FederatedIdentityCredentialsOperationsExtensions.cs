// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ManagedServiceIdentity
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FederatedIdentityCredentialsOperations.
    /// </summary>
    public static partial class FederatedIdentityCredentialsOperationsExtensions
    {
            /// <summary>
            /// Lists all the federated identity credentials under the specified user
            /// assigned identity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skiptoken'>
            /// A skip token is used to continue retrieving items after an operation
            /// returns a partial result. If a previous response contains a nextLink
            /// element, the value of the nextLink element will include a skipToken
            /// parameter that specifies a starting point to use for subsequent calls.
            /// </param>
            public static IPage<FederatedIdentityCredential> List(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, int? top = default(int?), string skiptoken = default(string))
            {
                return operations.ListAsync(resourceGroupName, resourceName, top, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the federated identity credentials under the specified user
            /// assigned identity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skiptoken'>
            /// A skip token is used to continue retrieving items after an operation
            /// returns a partial result. If a previous response contains a nextLink
            /// element, the value of the nextLink element will include a skipToken
            /// parameter that specifies a starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FederatedIdentityCredential>> ListAsync(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, int? top = default(int?), string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, resourceName, top, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a federated identity credential under the specified user
            /// assigned identity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='federatedIdentityCredentialResourceName'>
            /// The name of the federated identity credential resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to create or update the federated identity credential.
            /// </param>
            public static FederatedIdentityCredential CreateOrUpdate(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, string federatedIdentityCredentialResourceName, FederatedIdentityCredential parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a federated identity credential under the specified user
            /// assigned identity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='federatedIdentityCredentialResourceName'>
            /// The name of the federated identity credential resource.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to create or update the federated identity credential.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FederatedIdentityCredential> CreateOrUpdateAsync(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, string federatedIdentityCredentialResourceName, FederatedIdentityCredential parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the federated identity credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='federatedIdentityCredentialResourceName'>
            /// The name of the federated identity credential resource.
            /// </param>
            public static FederatedIdentityCredential Get(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, string federatedIdentityCredentialResourceName)
            {
                return operations.GetAsync(resourceGroupName, resourceName, federatedIdentityCredentialResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the federated identity credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='federatedIdentityCredentialResourceName'>
            /// The name of the federated identity credential resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FederatedIdentityCredential> GetAsync(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, string federatedIdentityCredentialResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the federated identity credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='federatedIdentityCredentialResourceName'>
            /// The name of the federated identity credential resource.
            /// </param>
            public static void Delete(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, string federatedIdentityCredentialResourceName)
            {
                operations.DeleteAsync(resourceGroupName, resourceName, federatedIdentityCredentialResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the federated identity credential.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the identity belongs.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the identity resource.
            /// </param>
            /// <param name='federatedIdentityCredentialResourceName'>
            /// The name of the federated identity credential resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFederatedIdentityCredentialsOperations operations, string resourceGroupName, string resourceName, string federatedIdentityCredentialResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceName, federatedIdentityCredentialResourceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the federated identity credentials under the specified user
            /// assigned identity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<FederatedIdentityCredential> ListNext(this IFederatedIdentityCredentialsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the federated identity credentials under the specified user
            /// assigned identity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FederatedIdentityCredential>> ListNextAsync(this IFederatedIdentityCredentialsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
