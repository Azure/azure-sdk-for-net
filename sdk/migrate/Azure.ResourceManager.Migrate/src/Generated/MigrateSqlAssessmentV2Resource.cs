// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A Class representing a MigrateSqlAssessmentV2 along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="MigrateSqlAssessmentV2Resource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetMigrateSqlAssessmentV2Resource method.
    /// Otherwise you can get one from its parent resource <see cref="MigrateGroupResource"/> using the GetMigrateSqlAssessmentV2 method.
    /// </summary>
    public partial class MigrateSqlAssessmentV2Resource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="MigrateSqlAssessmentV2Resource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="projectName"> The projectName. </param>
        /// <param name="groupName"> The groupName. </param>
        /// <param name="assessmentName"> The assessmentName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics;
        private readonly SqlAssessmentV2RestOperations _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient;
        private readonly MigrateSqlAssessmentV2Data _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Migrate/assessmentProjects/groups/sqlAssessments";

        /// <summary> Initializes a new instance of the <see cref="MigrateSqlAssessmentV2Resource"/> class for mocking. </summary>
        protected MigrateSqlAssessmentV2Resource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MigrateSqlAssessmentV2Resource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal MigrateSqlAssessmentV2Resource(ArmClient client, MigrateSqlAssessmentV2Data data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="MigrateSqlAssessmentV2Resource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MigrateSqlAssessmentV2Resource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string migrateSqlAssessmentV2SqlAssessmentV2OperationsApiVersion);
            _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient = new SqlAssessmentV2RestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, migrateSqlAssessmentV2SqlAssessmentV2OperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual MigrateSqlAssessmentV2Data Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of AssessedSqlDatabaseV2Resources in the MigrateSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of AssessedSqlDatabaseV2Resources and their operations over a AssessedSqlDatabaseV2Resource. </returns>
        public virtual AssessedSqlDatabaseV2Collection GetAssessedSqlDatabaseV2s()
        {
            return GetCachedClient(client => new AssessedSqlDatabaseV2Collection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlDatabaseV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssessedSqlDatabaseV2Resource>> GetAssessedSqlDatabaseV2Async(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            return await GetAssessedSqlDatabaseV2s().GetAsync(assessedSqlDatabaseName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlDatabaseV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlDatabases/{assessedSqlDatabaseName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlDatabaseV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlDatabaseV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlDatabaseName"> Sql assessment Assessed Databases ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlDatabaseName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssessedSqlDatabaseV2Resource> GetAssessedSqlDatabaseV2(string assessedSqlDatabaseName, CancellationToken cancellationToken = default)
        {
            return GetAssessedSqlDatabaseV2s().Get(assessedSqlDatabaseName, cancellationToken);
        }

        /// <summary> Gets a collection of AssessedSqlInstanceV2Resources in the MigrateSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of AssessedSqlInstanceV2Resources and their operations over a AssessedSqlInstanceV2Resource. </returns>
        public virtual AssessedSqlInstanceV2Collection GetAssessedSqlInstanceV2s()
        {
            return GetCachedClient(client => new AssessedSqlInstanceV2Collection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlInstanceV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlInstances/{assessedSqlInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlInstanceV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlInstanceV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlInstanceName"> Sql assessment Assessed Instance ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssessedSqlInstanceV2Resource>> GetAssessedSqlInstanceV2Async(string assessedSqlInstanceName, CancellationToken cancellationToken = default)
        {
            return await GetAssessedSqlInstanceV2s().GetAsync(assessedSqlInstanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlInstanceV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlInstances/{assessedSqlInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlInstanceV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlInstanceV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlInstanceName"> Sql assessment Assessed Instance ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlInstanceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssessedSqlInstanceV2Resource> GetAssessedSqlInstanceV2(string assessedSqlInstanceName, CancellationToken cancellationToken = default)
        {
            return GetAssessedSqlInstanceV2s().Get(assessedSqlInstanceName, cancellationToken);
        }

        /// <summary> Gets a collection of AssessedSqlMachineResources in the MigrateSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of AssessedSqlMachineResources and their operations over a AssessedSqlMachineResource. </returns>
        public virtual AssessedSqlMachineCollection GetAssessedSqlMachines()
        {
            return GetCachedClient(client => new AssessedSqlMachineCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlMachine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlMachines/{assessedSqlMachineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlMachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlMachineName"> Sql assessment Assessed Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlMachineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssessedSqlMachineResource>> GetAssessedSqlMachineAsync(string assessedSqlMachineName, CancellationToken cancellationToken = default)
        {
            return await GetAssessedSqlMachines().GetAsync(assessedSqlMachineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlMachine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/assessedSqlMachines/{assessedSqlMachineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlMachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessedSqlMachineName"> Sql assessment Assessed Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedSqlMachineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessedSqlMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssessedSqlMachineResource> GetAssessedSqlMachine(string assessedSqlMachineName, CancellationToken cancellationToken = default)
        {
            return GetAssessedSqlMachines().Get(assessedSqlMachineName, cancellationToken);
        }

        /// <summary> Gets a collection of AssessedSqlRecommendedEntityResources in the MigrateSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of AssessedSqlRecommendedEntityResources and their operations over a AssessedSqlRecommendedEntityResource. </returns>
        public virtual AssessedSqlRecommendedEntityCollection GetAssessedSqlRecommendedEntities()
        {
            return GetCachedClient(client => new AssessedSqlRecommendedEntityCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessedSqlRecommendedEntity
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/recommendedAssessedEntities/{recommendedAssessedEntityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlRecommendedEntityOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlRecommendedEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendedAssessedEntityName"> Sql assessment Assessed Recommended Entity ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendedAssessedEntityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recommendedAssessedEntityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssessedSqlRecommendedEntityResource>> GetAssessedSqlRecommendedEntityAsync(string recommendedAssessedEntityName, CancellationToken cancellationToken = default)
        {
            return await GetAssessedSqlRecommendedEntities().GetAsync(recommendedAssessedEntityName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessedSqlRecommendedEntity
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/recommendedAssessedEntities/{recommendedAssessedEntityName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessedSqlRecommendedEntityOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="AssessedSqlRecommendedEntityResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="recommendedAssessedEntityName"> Sql assessment Assessed Recommended Entity ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="recommendedAssessedEntityName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="recommendedAssessedEntityName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssessedSqlRecommendedEntityResource> GetAssessedSqlRecommendedEntity(string recommendedAssessedEntityName, CancellationToken cancellationToken = default)
        {
            return GetAssessedSqlRecommendedEntities().Get(recommendedAssessedEntityName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateSqlAssessmentV2SummaryResources in the MigrateSqlAssessmentV2. </summary>
        /// <returns> An object representing collection of MigrateSqlAssessmentV2SummaryResources and their operations over a MigrateSqlAssessmentV2SummaryResource. </returns>
        public virtual MigrateSqlAssessmentV2SummaryCollection GetMigrateSqlAssessmentV2Summaries()
        {
            return GetCachedClient(client => new MigrateSqlAssessmentV2SummaryCollection(client, Id));
        }

        /// <summary>
        /// Get a SqlAssessmentV2Summary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2SummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the SQL Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateSqlAssessmentV2SummaryResource>> GetMigrateSqlAssessmentV2SummaryAsync(string summaryName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateSqlAssessmentV2Summaries().GetAsync(summaryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SqlAssessmentV2Summary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/summaries/{summaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2SummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2SummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="summaryName"> Gets the Name of the SQL Summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="summaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="summaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateSqlAssessmentV2SummaryResource> GetMigrateSqlAssessmentV2Summary(string summaryName, CancellationToken cancellationToken = default)
        {
            return GetMigrateSqlAssessmentV2Summaries().Get(summaryName, cancellationToken);
        }

        /// <summary>
        /// Get a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MigrateSqlAssessmentV2Resource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.Get");
            scope.Start();
            try
            {
                var response = await _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrateSqlAssessmentV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MigrateSqlAssessmentV2Resource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.Get");
            scope.Start();
            try
            {
                var response = _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrateSqlAssessmentV2Resource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.Delete");
            scope.Start();
            try
            {
                var response = await _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.Delete");
            scope.Start();
            try
            {
                var response = _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<MigrateSqlAssessmentV2Resource>> UpdateAsync(WaitUntil waitUntil, MigrateSqlAssessmentV2Data data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.Update");
            scope.Start();
            try
            {
                var response = await _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation<MigrateSqlAssessmentV2Resource>(new MigrateSqlAssessmentV2OperationSource(Client), _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a SqlAssessmentV2
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<MigrateSqlAssessmentV2Resource> Update(WaitUntil waitUntil, MigrateSqlAssessmentV2Data data, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.Update");
            scope.Start();
            try
            {
                var response = _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new MigrateArmOperation<MigrateSqlAssessmentV2Resource>(new MigrateSqlAssessmentV2OperationSource(Client), _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the URL for downloading the assessment in a report format.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/downloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_DownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual async Task<ArmOperation<AssessmentReportDownloadUri>> DownloadUrlAsync(WaitUntil waitUntil, BinaryData body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.DownloadUrl");
            scope.Start();
            try
            {
                var response = await _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.DownloadUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation<AssessmentReportDownloadUri>(new AssessmentReportDownloadUriOperationSource(), _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateDownloadUrlRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the URL for downloading the assessment in a report format.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/sqlAssessments/{assessmentName}/downloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentV2Operations_DownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentV2Resource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="body"> The content of the action request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual ArmOperation<AssessmentReportDownloadUri> DownloadUrl(WaitUntil waitUntil, BinaryData body, CancellationToken cancellationToken = default)
        {
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var scope = _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics.CreateScope("MigrateSqlAssessmentV2Resource.DownloadUrl");
            scope.Start();
            try
            {
                var response = _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.DownloadUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body, cancellationToken);
                var operation = new MigrateArmOperation<AssessmentReportDownloadUri>(new AssessmentReportDownloadUriOperationSource(), _migrateSqlAssessmentV2SqlAssessmentV2OperationsClientDiagnostics, Pipeline, _migrateSqlAssessmentV2SqlAssessmentV2OperationsRestClient.CreateDownloadUrlRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, body).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
