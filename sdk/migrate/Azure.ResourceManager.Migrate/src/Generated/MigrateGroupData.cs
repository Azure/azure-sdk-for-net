// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing the MigrateGroup data model.
    /// Group resource.
    /// </summary>
    public partial class MigrateGroupData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrateGroupData"/>. </summary>
        public MigrateGroupData()
        {
            Assessments = new ChangeTrackingList<string>();
            SupportedAssessmentTypes = new ChangeTrackingList<AssessmentType>();
        }

        /// <summary> Initializes a new instance of <see cref="MigrateGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="groupStatus"> Whether the group has been created and is valid. </param>
        /// <param name="machineCount"> Number of machines part of this group. </param>
        /// <param name="assessments"> List of References to Assessments created on this group. </param>
        /// <param name="supportedAssessmentTypes"> List of assessment types supported on this group. </param>
        /// <param name="areAssessmentsRunning"> If the assessments are in running state. </param>
        /// <param name="createdOn"> Time when this group was created. Date-Time represented in ISO-8601 format. </param>
        /// <param name="updatedOn"> Time when this group was last updated. Date-Time represented in ISO-8601 format. </param>
        /// <param name="groupType"> The type of group. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrateGroupData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, MigrateProvisioningState? provisioningState, MigrateGroupStatus? groupStatus, int? machineCount, IReadOnlyList<string> assessments, IList<AssessmentType> supportedAssessmentTypes, bool? areAssessmentsRunning, DateTimeOffset? createdOn, DateTimeOffset? updatedOn, MigrateGroupType? groupType, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            GroupStatus = groupStatus;
            MachineCount = machineCount;
            Assessments = assessments;
            SupportedAssessmentTypes = supportedAssessmentTypes;
            AreAssessmentsRunning = areAssessmentsRunning;
            CreatedOn = createdOn;
            UpdatedOn = updatedOn;
            GroupType = groupType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of the last operation. </summary>
        public MigrateProvisioningState? ProvisioningState { get; set; }
        /// <summary> Whether the group has been created and is valid. </summary>
        public MigrateGroupStatus? GroupStatus { get; }
        /// <summary> Number of machines part of this group. </summary>
        public int? MachineCount { get; }
        /// <summary> List of References to Assessments created on this group. </summary>
        public IReadOnlyList<string> Assessments { get; }
        /// <summary> List of assessment types supported on this group. </summary>
        public IList<AssessmentType> SupportedAssessmentTypes { get; }
        /// <summary> If the assessments are in running state. </summary>
        public bool? AreAssessmentsRunning { get; }
        /// <summary> Time when this group was created. Date-Time represented in ISO-8601 format. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Time when this group was last updated. Date-Time represented in ISO-8601 format. </summary>
        public DateTimeOffset? UpdatedOn { get; }
        /// <summary> The type of group. </summary>
        public MigrateGroupType? GroupType { get; set; }
    }
}
