// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    public partial class MigrateAssessmentData : IUtf8JsonSerializable, IJsonModel<MigrateAssessmentData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrateAssessmentData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MigrateAssessmentData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateAssessmentData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrateAssessmentData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (ProvisioningState.HasValue)
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && !(AssessmentErrorSummary is ChangeTrackingDictionary<string, int> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("assessmentErrorSummary"u8);
                writer.WriteStartObject();
                foreach (var item in AssessmentErrorSummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && MonthlyUltraStorageCost.HasValue)
            {
                writer.WritePropertyName("monthlyUltraStorageCost"u8);
                writer.WriteNumberValue(MonthlyUltraStorageCost.Value);
            }
            if (options.Format != "W" && !(CostComponents is ChangeTrackingList<CostComponent> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("costComponents"u8);
                writer.WriteStartArray();
                foreach (var item in CostComponents)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (EASubscriptionId != null)
            {
                writer.WritePropertyName("eaSubscriptionId"u8);
                writer.WriteStringValue(EASubscriptionId);
            }
            if (AzurePricingTier.HasValue)
            {
                writer.WritePropertyName("azurePricingTier"u8);
                writer.WriteStringValue(AzurePricingTier.Value.ToString());
            }
            if (AzureStorageRedundancy.HasValue)
            {
                writer.WritePropertyName("azureStorageRedundancy"u8);
                writer.WriteStringValue(AzureStorageRedundancy.Value.ToString());
            }
            if (ReservedInstance.HasValue)
            {
                writer.WritePropertyName("reservedInstance"u8);
                writer.WriteStringValue(ReservedInstance.Value.ToString());
            }
            if (AzureHybridUseBenefit.HasValue)
            {
                writer.WritePropertyName("azureHybridUseBenefit"u8);
                writer.WriteStringValue(AzureHybridUseBenefit.Value.ToString());
            }
            if (!(AzureDiskTypes is ChangeTrackingList<AzureDiskType> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("azureDiskTypes"u8);
                writer.WriteStartArray();
                foreach (var item in AzureDiskTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (!(AzureVmFamilies is ChangeTrackingList<AzureVmFamily> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("azureVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in AzureVmFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && !(DistributionBySupportStatus is ChangeTrackingDictionary<string, int> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("distributionBySupportStatus"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionBySupportStatus)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && !(DistributionByServicePackInsight is ChangeTrackingDictionary<string, int> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("distributionByServicePackInsight"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionByServicePackInsight)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && !(DistributionByOSName is ChangeTrackingDictionary<string, int> collection5 && collection5.IsUndefined))
            {
                writer.WritePropertyName("distributionByOsName"u8);
                writer.WriteStartObject();
                foreach (var item in DistributionByOSName)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && MonthlyComputeCost.HasValue)
            {
                writer.WritePropertyName("monthlyComputeCost"u8);
                writer.WriteNumberValue(MonthlyComputeCost.Value);
            }
            if (options.Format != "W" && MonthlyBandwidthCost.HasValue)
            {
                writer.WritePropertyName("monthlyBandwidthCost"u8);
                writer.WriteNumberValue(MonthlyBandwidthCost.Value);
            }
            if (options.Format != "W" && MonthlyStorageCost.HasValue)
            {
                writer.WritePropertyName("monthlyStorageCost"u8);
                writer.WriteNumberValue(MonthlyStorageCost.Value);
            }
            if (options.Format != "W" && MonthlyPremiumStorageCost.HasValue)
            {
                writer.WritePropertyName("monthlyPremiumStorageCost"u8);
                writer.WriteNumberValue(MonthlyPremiumStorageCost.Value);
            }
            if (options.Format != "W" && MonthlyStandardSsdStorageCost.HasValue)
            {
                writer.WritePropertyName("monthlyStandardSsdStorageCost"u8);
                writer.WriteNumberValue(MonthlyStandardSsdStorageCost.Value);
            }
            if (options.Format != "W" && !(SuitabilitySummary is ChangeTrackingDictionary<string, int> collection6 && collection6.IsUndefined))
            {
                writer.WritePropertyName("suitabilitySummary"u8);
                writer.WriteStartObject();
                foreach (var item in SuitabilitySummary)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && NumberOfMachines.HasValue)
            {
                writer.WritePropertyName("numberOfMachines"u8);
                writer.WriteNumberValue(NumberOfMachines.Value);
            }
            if (VmUptime != null)
            {
                writer.WritePropertyName("vmUptime"u8);
                writer.WriteObjectValue(VmUptime);
            }
            if (options.Format != "W" && GroupType.HasValue)
            {
                writer.WritePropertyName("groupType"u8);
                writer.WriteStringValue(GroupType.Value.ToString());
            }
            if (options.Format != "W" && AssessmentType.HasValue)
            {
                writer.WritePropertyName("assessmentType"u8);
                writer.WriteStringValue(AssessmentType.Value.ToString());
            }
            if (AzureLocation.HasValue)
            {
                writer.WritePropertyName("azureLocation"u8);
                writer.WriteStringValue(AzureLocation.Value);
            }
            if (AzureOfferCode.HasValue)
            {
                writer.WritePropertyName("azureOfferCode"u8);
                writer.WriteStringValue(AzureOfferCode.Value.ToString());
            }
            if (Currency.HasValue)
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency.Value.ToString());
            }
            if (ScalingFactor.HasValue)
            {
                writer.WritePropertyName("scalingFactor"u8);
                writer.WriteNumberValue(ScalingFactor.Value);
            }
            if (Percentile.HasValue)
            {
                writer.WritePropertyName("percentile"u8);
                writer.WriteStringValue(Percentile.Value.ToString());
            }
            if (TimeRange.HasValue)
            {
                writer.WritePropertyName("timeRange"u8);
                writer.WriteStringValue(TimeRange.Value.ToString());
            }
            if (PerfDataStartOn.HasValue)
            {
                writer.WritePropertyName("perfDataStartTime"u8);
                writer.WriteStringValue(PerfDataStartOn.Value, "O");
            }
            if (PerfDataEndOn.HasValue)
            {
                writer.WritePropertyName("perfDataEndTime"u8);
                writer.WriteStringValue(PerfDataEndOn.Value, "O");
            }
            if (options.Format != "W" && Stage.HasValue)
            {
                writer.WritePropertyName("stage"u8);
                writer.WriteStringValue(Stage.Value.ToString());
            }
            if (DiscountPercentage.HasValue)
            {
                writer.WritePropertyName("discountPercentage"u8);
                writer.WriteNumberValue(DiscountPercentage.Value);
            }
            if (SizingCriterion.HasValue)
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (options.Format != "W" && ConfidenceRatingInPercentage.HasValue)
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && PricesQueriedOn.HasValue)
            {
                writer.WritePropertyName("pricesTimestamp"u8);
                writer.WriteStringValue(PricesQueriedOn.Value, "O");
            }
            if (options.Format != "W" && CreatedOn.HasValue)
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && UpdatedOn.HasValue)
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Status.HasValue)
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && SchemaVersion != null)
            {
                writer.WritePropertyName("schemaVersion"u8);
                writer.WriteStringValue(SchemaVersion);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MigrateAssessmentData IJsonModel<MigrateAssessmentData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateAssessmentData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrateAssessmentData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrateAssessmentData(document.RootElement, options);
        }

        internal static MigrateAssessmentData DeserializeMigrateAssessmentData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<MigrateProvisioningState> provisioningState = default;
            IReadOnlyDictionary<string, int> assessmentErrorSummary = default;
            Optional<double> monthlyUltraStorageCost = default;
            IReadOnlyList<CostComponent> costComponents = default;
            Optional<string> eaSubscriptionId = default;
            Optional<AzurePricingTier> azurePricingTier = default;
            Optional<AzureStorageRedundancy> azureStorageRedundancy = default;
            Optional<AzureReservedInstance> reservedInstance = default;
            Optional<AzureHybridUseBenefit> azureHybridUseBenefit = default;
            IList<AzureDiskType> azureDiskTypes = default;
            IList<AzureVmFamily> azureVmFamilies = default;
            IReadOnlyDictionary<string, int> distributionBySupportStatus = default;
            IReadOnlyDictionary<string, int> distributionByServicePackInsight = default;
            IReadOnlyDictionary<string, int> distributionByOSName = default;
            Optional<double> monthlyComputeCost = default;
            Optional<double> monthlyBandwidthCost = default;
            Optional<double> monthlyStorageCost = default;
            Optional<double> monthlyPremiumStorageCost = default;
            Optional<double> monthlyStandardSsdStorageCost = default;
            IReadOnlyDictionary<string, int> suitabilitySummary = default;
            Optional<int> numberOfMachines = default;
            Optional<VmUptime> vmUptime = default;
            Optional<MigrateGroupType> groupType = default;
            Optional<AssessmentType> assessmentType = default;
            Optional<AzureLocation> azureLocation = default;
            Optional<AzureOfferCode> azureOfferCode = default;
            Optional<AzureCurrency> currency = default;
            Optional<double> scalingFactor = default;
            Optional<PercentileOfUtilization> percentile = default;
            Optional<AssessmentTimeRange> timeRange = default;
            Optional<DateTimeOffset> perfDataStartTime = default;
            Optional<DateTimeOffset> perfDataEndTime = default;
            Optional<AssessmentStage> stage = default;
            Optional<double> discountPercentage = default;
            Optional<AssessmentSizingCriterion> sizingCriterion = default;
            Optional<double> confidenceRatingInPercentage = default;
            Optional<DateTimeOffset> pricesTimestamp = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            Optional<AssessmentStatus> status = default;
            Optional<string> schemaVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new MigrateProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentErrorSummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            assessmentErrorSummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("monthlyUltraStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyUltraStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("costComponents"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CostComponent> array = new List<CostComponent>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CostComponent.DeserializeCostComponent(item, options));
                            }
                            costComponents = array;
                            continue;
                        }
                        if (property0.NameEquals("eaSubscriptionId"u8))
                        {
                            eaSubscriptionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azurePricingTier"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azurePricingTier = new AzurePricingTier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureStorageRedundancy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureStorageRedundancy = new AzureStorageRedundancy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("reservedInstance"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            reservedInstance = new AzureReservedInstance(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureHybridUseBenefit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureHybridUseBenefit = new AzureHybridUseBenefit(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureDiskTypes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureDiskType> array = new List<AzureDiskType>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureDiskType(item.GetString()));
                            }
                            azureDiskTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("azureVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureVmFamily> array = new List<AzureVmFamily>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureVmFamily(item.GetString()));
                            }
                            azureVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("distributionBySupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionBySupportStatus = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionByServicePackInsight"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionByServicePackInsight = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("distributionByOsName"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            distributionByOSName = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("monthlyComputeCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyComputeCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyBandwidthCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyBandwidthCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyPremiumStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyPremiumStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyStandardSsdStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyStandardSsdStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("suitabilitySummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, int> dictionary = new Dictionary<string, int>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetInt32());
                            }
                            suitabilitySummary = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("numberOfMachines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfMachines = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("vmUptime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            vmUptime = VmUptime.DeserializeVmUptime(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("groupType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            groupType = new MigrateGroupType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessmentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessmentType = new AssessmentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureLocation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureLocation = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureOfferCode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureOfferCode = new AzureOfferCode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("currency"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currency = new AzureCurrency(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scalingFactor"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scalingFactor = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("percentile"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentile = new PercentileOfUtilization(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("timeRange"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            timeRange = new AssessmentTimeRange(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("perfDataStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("perfDataEndTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            perfDataEndTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("stage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            stage = new AssessmentStage(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("discountPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discountPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("pricesTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pricesTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new AssessmentStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("schemaVersion"u8))
                        {
                            schemaVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MigrateAssessmentData(
                id,
                name,
                type,
                systemData.Value,
                Optional.ToNullable(provisioningState),
                assessmentErrorSummary ?? new ChangeTrackingDictionary<string, int>(),
                Optional.ToNullable(monthlyUltraStorageCost),
                costComponents ?? new ChangeTrackingList<CostComponent>(),
                eaSubscriptionId.Value,
                Optional.ToNullable(azurePricingTier),
                Optional.ToNullable(azureStorageRedundancy),
                Optional.ToNullable(reservedInstance),
                Optional.ToNullable(azureHybridUseBenefit),
                azureDiskTypes ?? new ChangeTrackingList<AzureDiskType>(),
                azureVmFamilies ?? new ChangeTrackingList<AzureVmFamily>(),
                distributionBySupportStatus ?? new ChangeTrackingDictionary<string, int>(),
                distributionByServicePackInsight ?? new ChangeTrackingDictionary<string, int>(),
                distributionByOSName ?? new ChangeTrackingDictionary<string, int>(),
                Optional.ToNullable(monthlyComputeCost),
                Optional.ToNullable(monthlyBandwidthCost),
                Optional.ToNullable(monthlyStorageCost),
                Optional.ToNullable(monthlyPremiumStorageCost),
                Optional.ToNullable(monthlyStandardSsdStorageCost),
                suitabilitySummary ?? new ChangeTrackingDictionary<string, int>(),
                Optional.ToNullable(numberOfMachines),
                vmUptime.Value,
                Optional.ToNullable(groupType),
                Optional.ToNullable(assessmentType),
                Optional.ToNullable(azureLocation),
                Optional.ToNullable(azureOfferCode),
                Optional.ToNullable(currency),
                Optional.ToNullable(scalingFactor),
                Optional.ToNullable(percentile),
                Optional.ToNullable(timeRange),
                Optional.ToNullable(perfDataStartTime),
                Optional.ToNullable(perfDataEndTime),
                Optional.ToNullable(stage),
                Optional.ToNullable(discountPercentage),
                Optional.ToNullable(sizingCriterion),
                Optional.ToNullable(confidenceRatingInPercentage),
                Optional.ToNullable(pricesTimestamp),
                Optional.ToNullable(createdTimestamp),
                Optional.ToNullable(updatedTimestamp),
                Optional.ToNullable(status),
                schemaVersion.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrateAssessmentData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateAssessmentData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrateAssessmentData)} does not support '{options.Format}' format.");
            }
        }

        MigrateAssessmentData IPersistableModel<MigrateAssessmentData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateAssessmentData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMigrateAssessmentData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrateAssessmentData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrateAssessmentData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
