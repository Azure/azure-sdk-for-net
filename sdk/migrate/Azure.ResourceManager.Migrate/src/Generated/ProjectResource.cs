// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A Class representing a Project along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="ProjectResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetProjectResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetProject method.
    /// </summary>
    public partial class ProjectResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ProjectResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _projectClientDiagnostics;
        private readonly ProjectsRestOperations _projectRestClient;
        private readonly ClientDiagnostics _assessmentClientDiagnostics;
        private readonly AssessmentsRestOperations _assessmentRestClient;
        private readonly ProjectData _data;

        /// <summary> Initializes a new instance of the <see cref="ProjectResource"/> class for mocking. </summary>
        protected ProjectResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ProjectResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ProjectResource(ArmClient client, ProjectData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ProjectResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ProjectResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _projectClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string projectApiVersion);
            _projectRestClient = new ProjectsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, projectApiVersion);
            _assessmentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", AssessmentResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AssessmentResource.ResourceType, out string assessmentApiVersion);
            _assessmentRestClient = new AssessmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, assessmentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Migrate/assessmentProjects";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ProjectData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of MachineResources in the Project. </summary>
        /// <returns> An object representing collection of MachineResources and their operations over a MachineResource. </returns>
        public virtual MachineCollection GetMachines()
        {
            return GetCachedClient(Client => new MachineCollection(Client, Id));
        }

        /// <summary>
        /// Get the machine with the specified name. Returns a json object of type &apos;machine&apos; defined in Models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}
        /// Operation Id: Machines_Get
        /// </summary>
        /// <param name="machineName"> Unique name of a machine in private datacenter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MachineResource>> GetMachineAsync(string machineName, CancellationToken cancellationToken = default)
        {
            return await GetMachines().GetAsync(machineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the machine with the specified name. Returns a json object of type &apos;machine&apos; defined in Models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}
        /// Operation Id: Machines_Get
        /// </summary>
        /// <param name="machineName"> Unique name of a machine in private datacenter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<MachineResource> GetMachine(string machineName, CancellationToken cancellationToken = default)
        {
            return GetMachines().Get(machineName, cancellationToken);
        }

        /// <summary> Gets a collection of GroupResources in the Project. </summary>
        /// <returns> An object representing collection of GroupResources and their operations over a GroupResource. </returns>
        public virtual GroupCollection GetGroups()
        {
            return GetCachedClient(Client => new GroupCollection(Client, Id));
        }

        /// <summary>
        /// Get information related to a specific group in the project. Returns a json object of type &apos;group&apos; as specified in the models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
        /// Operation Id: Groups_Get
        /// </summary>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<GroupResource>> GetGroupAsync(string groupName, CancellationToken cancellationToken = default)
        {
            return await GetGroups().GetAsync(groupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get information related to a specific group in the project. Returns a json object of type &apos;group&apos; as specified in the models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}
        /// Operation Id: Groups_Get
        /// </summary>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<GroupResource> GetGroup(string groupName, CancellationToken cancellationToken = default)
        {
            return GetGroups().Get(groupName, cancellationToken);
        }

        /// <summary> Gets a collection of HyperVCollectorResources in the Project. </summary>
        /// <returns> An object representing collection of HyperVCollectorResources and their operations over a HyperVCollectorResource. </returns>
        public virtual HyperVCollectorCollection GetHyperVCollectors()
        {
            return GetCachedClient(Client => new HyperVCollectorCollection(Client, Id));
        }

        /// <summary>
        /// Get a Hyper-V collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}
        /// Operation Id: HyperVCollectors_Get
        /// </summary>
        /// <param name="hyperVCollectorName"> Unique name of a Hyper-V collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="hyperVCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="hyperVCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HyperVCollectorResource>> GetHyperVCollectorAsync(string hyperVCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetHyperVCollectors().GetAsync(hyperVCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Hyper-V collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}
        /// Operation Id: HyperVCollectors_Get
        /// </summary>
        /// <param name="hyperVCollectorName"> Unique name of a Hyper-V collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="hyperVCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="hyperVCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<HyperVCollectorResource> GetHyperVCollector(string hyperVCollectorName, CancellationToken cancellationToken = default)
        {
            return GetHyperVCollectors().Get(hyperVCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of ServerCollectorResources in the Project. </summary>
        /// <returns> An object representing collection of ServerCollectorResources and their operations over a ServerCollectorResource. </returns>
        public virtual ServerCollectorCollection GetServerCollectors()
        {
            return GetCachedClient(Client => new ServerCollectorCollection(Client, Id));
        }

        /// <summary>
        /// Get a Server collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}
        /// Operation Id: ServerCollectors_Get
        /// </summary>
        /// <param name="serverCollectorName"> Unique name of a Server collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serverCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServerCollectorResource>> GetServerCollectorAsync(string serverCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetServerCollectors().GetAsync(serverCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Server collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}
        /// Operation Id: ServerCollectors_Get
        /// </summary>
        /// <param name="serverCollectorName"> Unique name of a Server collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serverCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ServerCollectorResource> GetServerCollector(string serverCollectorName, CancellationToken cancellationToken = default)
        {
            return GetServerCollectors().Get(serverCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of VMwareCollectorResources in the Project. </summary>
        /// <returns> An object representing collection of VMwareCollectorResources and their operations over a VMwareCollectorResource. </returns>
        public virtual VMwareCollectorCollection GetVMwareCollectors()
        {
            return GetCachedClient(Client => new VMwareCollectorCollection(Client, Id));
        }

        /// <summary>
        /// Get a VMware collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}
        /// Operation Id: VMwareCollectors_Get
        /// </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmWareCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<VMwareCollectorResource>> GetVMwareCollectorAsync(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetVMwareCollectors().GetAsync(vmWareCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a VMware collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}
        /// Operation Id: VMwareCollectors_Get
        /// </summary>
        /// <param name="vmWareCollectorName"> Unique name of a VMware collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vmWareCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<VMwareCollectorResource> GetVMwareCollector(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            return GetVMwareCollectors().Get(vmWareCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of ImportCollectorResources in the Project. </summary>
        /// <returns> An object representing collection of ImportCollectorResources and their operations over a ImportCollectorResource. </returns>
        public virtual ImportCollectorCollection GetImportCollectors()
        {
            return GetCachedClient(Client => new ImportCollectorCollection(Client, Id));
        }

        /// <summary>
        /// Get a Import collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}
        /// Operation Id: ImportCollectors_Get
        /// </summary>
        /// <param name="importCollectorName"> Unique name of a Import collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="importCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="importCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ImportCollectorResource>> GetImportCollectorAsync(string importCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetImportCollectors().GetAsync(importCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Import collector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}
        /// Operation Id: ImportCollectors_Get
        /// </summary>
        /// <param name="importCollectorName"> Unique name of a Import collector within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="importCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="importCollectorName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ImportCollectorResource> GetImportCollector(string importCollectorName, CancellationToken cancellationToken = default)
        {
            return GetImportCollectors().Get(importCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigratePrivateEndpointConnectionResources in the Project. </summary>
        /// <returns> An object representing collection of MigratePrivateEndpointConnectionResources and their operations over a MigratePrivateEndpointConnectionResource. </returns>
        public virtual MigratePrivateEndpointConnectionCollection GetMigratePrivateEndpointConnections()
        {
            return GetCachedClient(Client => new MigratePrivateEndpointConnectionCollection(Client, Id));
        }

        /// <summary>
        /// Get information related to a specific private endpoint connection in the project. Returns a json object of type &apos;privateEndpointConnections&apos; as specified in the models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}
        /// Operation Id: PrivateEndpointConnection_Get
        /// </summary>
        /// <param name="privateEndpointConnectionName"> Unique name of a private endpoint connection within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigratePrivateEndpointConnectionResource>> GetMigratePrivateEndpointConnectionAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return await GetMigratePrivateEndpointConnections().GetAsync(privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get information related to a specific private endpoint connection in the project. Returns a json object of type &apos;privateEndpointConnections&apos; as specified in the models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}
        /// Operation Id: PrivateEndpointConnection_Get
        /// </summary>
        /// <param name="privateEndpointConnectionName"> Unique name of a private endpoint connection within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigratePrivateEndpointConnectionResource> GetMigratePrivateEndpointConnection(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return GetMigratePrivateEndpointConnections().Get(privateEndpointConnectionName, cancellationToken);
        }

        /// <summary> Gets a collection of MigratePrivateLinkResources in the Project. </summary>
        /// <returns> An object representing collection of MigratePrivateLinkResources and their operations over a MigratePrivateLinkResource. </returns>
        public virtual MigratePrivateLinkResourceCollection GetMigratePrivateLinkResources()
        {
            return GetCachedClient(Client => new MigratePrivateLinkResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get information related to a specific private Link Resource in the project. Returns a json object of type &apos;privateLinkResources&apos; as specified in the models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateLinkResources/{privateLinkResourceName}
        /// Operation Id: PrivateLinkResource_Get
        /// </summary>
        /// <param name="privateLinkResourceName"> Unique name of a private link resource within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigratePrivateLinkResource>> GetMigratePrivateLinkResourceAsync(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return await GetMigratePrivateLinkResources().GetAsync(privateLinkResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get information related to a specific private Link Resource in the project. Returns a json object of type &apos;privateLinkResources&apos; as specified in the models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateLinkResources/{privateLinkResourceName}
        /// Operation Id: PrivateLinkResource_Get
        /// </summary>
        /// <param name="privateLinkResourceName"> Unique name of a private link resource within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigratePrivateLinkResource> GetMigratePrivateLinkResource(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return GetMigratePrivateLinkResources().Get(privateLinkResourceName, cancellationToken);
        }

        /// <summary>
        /// Get the project with the specified name.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
        /// Operation Id: Projects_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ProjectResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.Get");
            scope.Start();
            try
            {
                var response = await _projectRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the project with the specified name.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
        /// Operation Id: Projects_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ProjectResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.Get");
            scope.Start();
            try
            {
                var response = _projectRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the project. Deleting non-existent project is a no-operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
        /// Operation Id: Projects_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.Delete");
            scope.Start();
            try
            {
                var response = await _projectRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete the project. Deleting non-existent project is a no-operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
        /// Operation Id: Projects_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.Delete");
            scope.Start();
            try
            {
                var response = _projectRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a project with specified name. Supports partial updates, for example only tags can be provided.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
        /// Operation Id: Projects_Update
        /// </summary>
        /// <param name="data"> Updated project object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<Response<ProjectResource>> UpdateAsync(ProjectData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.Update");
            scope.Start();
            try
            {
                var response = await _projectRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, data, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a project with specified name. Supports partial updates, for example only tags can be provided.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}
        /// Operation Id: Projects_Update
        /// </summary>
        /// <param name="data"> Updated project object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual Response<ProjectResource> Update(ProjectData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.Update");
            scope.Start();
            try
            {
                var response = _projectRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, data, cancellationToken);
                return Response.FromValue(new ProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get all available options for the properties of an assessment on a project.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}
        /// Operation Id: Projects_AssessmentOptions
        /// </summary>
        /// <param name="assessmentOptionsName"> Name of the assessment options. The only name accepted in default. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual async Task<Response<AssessmentOptions>> AssessmentOptionsAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.AssessmentOptions");
            scope.Start();
            try
            {
                var response = await _projectRestClient.AssessmentOptionsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get all available options for the properties of an assessment on a project.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}
        /// Operation Id: Projects_AssessmentOptions
        /// </summary>
        /// <param name="assessmentOptionsName"> Name of the assessment options. The only name accepted in default. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        public virtual Response<AssessmentOptions> AssessmentOptions(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentOptionsName, nameof(assessmentOptionsName));

            using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.AssessmentOptions");
            scope.Start();
            try
            {
                var response = _projectRestClient.AssessmentOptions(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, assessmentOptionsName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets list of all available options for the properties of an assessment on a project.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions
        /// Operation Id: Projects_AssessmentOptionsList
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.AssessmentOptions" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AssessmentOptions> AssessmentOptionsListAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AssessmentOptions>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.AssessmentOptionsList");
                scope.Start();
                try
                {
                    var response = await _projectRestClient.AssessmentOptionsListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets list of all available options for the properties of an assessment on a project.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions
        /// Operation Id: Projects_AssessmentOptionsList
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.AssessmentOptions" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AssessmentOptions> AssessmentOptionsList(CancellationToken cancellationToken = default)
        {
            Page<AssessmentOptions> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _projectClientDiagnostics.CreateScope("ProjectResource.AssessmentOptionsList");
                scope.Start();
                try
                {
                    var response = _projectRestClient.AssessmentOptionsList(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get all assessments created in the project.
        /// 
        /// Returns a json array of objects of type &apos;assessment&apos; as specified in Models section.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments
        /// Operation Id: Assessments_ListByProject
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AssessmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AssessmentResource> GetAssessmentsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AssessmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _assessmentClientDiagnostics.CreateScope("ProjectResource.GetAssessments");
                scope.Start();
                try
                {
                    var response = await _assessmentRestClient.ListByProjectAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessmentResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get all assessments created in the project.
        /// 
        /// Returns a json array of objects of type &apos;assessment&apos; as specified in Models section.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments
        /// Operation Id: Assessments_ListByProject
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AssessmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AssessmentResource> GetAssessments(CancellationToken cancellationToken = default)
        {
            Page<AssessmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _assessmentClientDiagnostics.CreateScope("ProjectResource.GetAssessments");
                scope.Start();
                try
                {
                    var response = _assessmentRestClient.ListByProject(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessmentResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
