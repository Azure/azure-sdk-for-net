// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    public partial class AssessedSqlDatabaseV2Data : IUtf8JsonSerializable, IJsonModel<AssessedSqlDatabaseV2Data>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssessedSqlDatabaseV2Data>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AssessedSqlDatabaseV2Data>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlDatabaseV2Data)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && RecommendedAzureSqlTargetType.HasValue)
            {
                writer.WritePropertyName("recommendedAzureSqlTargetType"u8);
                writer.WriteStringValue(RecommendedAzureSqlTargetType.Value.ToString());
            }
            if (options.Format != "W" && RecommendedSuitability.HasValue)
            {
                writer.WritePropertyName("recommendedSuitability"u8);
                writer.WriteStringValue(RecommendedSuitability.Value.ToString());
            }
            if (options.Format != "W" && BufferCacheSizeInMB.HasValue)
            {
                writer.WritePropertyName("bufferCacheSizeInMB"u8);
                writer.WriteNumberValue(BufferCacheSizeInMB.Value);
            }
            if (options.Format != "W" && ProductSupportStatus != null)
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus);
            }
            if (options.Format != "W" && AzureSqlMISuitabilityDetails != null)
            {
                writer.WritePropertyName("azureSqlMISuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlMISuitabilityDetails);
            }
            if (options.Format != "W" && AzureSqlDBSuitabilityDetails != null)
            {
                writer.WritePropertyName("azureSqlDBSuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlDBSuitabilityDetails);
            }
            if (options.Format != "W" && IsDatabaseHighlyAvailable.HasValue)
            {
                writer.WritePropertyName("isDatabaseHighlyAvailable"u8);
                writer.WriteBooleanValue(IsDatabaseHighlyAvailable.Value);
            }
            if (options.Format != "W" && LinkedAvailabilityGroupOverview != null)
            {
                writer.WritePropertyName("linkedAvailabilityGroupOverview"u8);
                writer.WriteObjectValue(LinkedAvailabilityGroupOverview);
            }
            if (options.Format != "W" && MachineArmId != null)
            {
                writer.WritePropertyName("machineArmId"u8);
                writer.WriteStringValue(MachineArmId);
            }
            if (options.Format != "W" && AssessedSqlInstanceArmId != null)
            {
                writer.WritePropertyName("assessedSqlInstanceArmId"u8);
                writer.WriteStringValue(AssessedSqlInstanceArmId);
            }
            if (options.Format != "W" && MachineName != null)
            {
                writer.WritePropertyName("machineName"u8);
                writer.WriteStringValue(MachineName);
            }
            if (options.Format != "W" && InstanceName != null)
            {
                writer.WritePropertyName("instanceName"u8);
                writer.WriteStringValue(InstanceName);
            }
            if (options.Format != "W" && DatabaseName != null)
            {
                writer.WritePropertyName("databaseName"u8);
                writer.WriteStringValue(DatabaseName);
            }
            if (options.Format != "W" && DatabaseSizeInMB.HasValue)
            {
                writer.WritePropertyName("databaseSizeInMB"u8);
                writer.WriteNumberValue(DatabaseSizeInMB.Value);
            }
            if (options.Format != "W" && CompatibilityLevel.HasValue)
            {
                writer.WritePropertyName("compatibilityLevel"u8);
                writer.WriteStringValue(CompatibilityLevel.Value.ToString());
            }
            if (options.Format != "W" && SqlDatabaseSdsArmId != null)
            {
                writer.WritePropertyName("sqlDatabaseSdsArmId"u8);
                writer.WriteStringValue(SqlDatabaseSdsArmId);
            }
            if (options.Format != "W" && PercentageCoresUtilization.HasValue)
            {
                writer.WritePropertyName("percentageCoresUtilization"u8);
                writer.WriteNumberValue(PercentageCoresUtilization.Value);
            }
            if (options.Format != "W" && MegabytesPerSecondOfRead.HasValue)
            {
                writer.WritePropertyName("megabytesPerSecondOfRead"u8);
                writer.WriteNumberValue(MegabytesPerSecondOfRead.Value);
            }
            if (options.Format != "W" && MegabytesPerSecondOfWrite.HasValue)
            {
                writer.WritePropertyName("megabytesPerSecondOfWrite"u8);
                writer.WriteNumberValue(MegabytesPerSecondOfWrite.Value);
            }
            if (options.Format != "W" && NumberOfReadOperationsPerSecond.HasValue)
            {
                writer.WritePropertyName("numberOfReadOperationsPerSecond"u8);
                writer.WriteNumberValue(NumberOfReadOperationsPerSecond.Value);
            }
            if (options.Format != "W" && NumberOfWriteOperationsPerSecond.HasValue)
            {
                writer.WritePropertyName("numberOfWriteOperationsPerSecond"u8);
                writer.WriteNumberValue(NumberOfWriteOperationsPerSecond.Value);
            }
            if (options.Format != "W" && ConfidenceRatingInPercentage.HasValue)
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && SizingCriterion.HasValue)
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            if (options.Format != "W" && CreatedOn.HasValue)
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && UpdatedOn.HasValue)
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AssessedSqlDatabaseV2Data IJsonModel<AssessedSqlDatabaseV2Data>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlDatabaseV2Data)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssessedSqlDatabaseV2Data(document.RootElement, options);
        }

        internal static AssessedSqlDatabaseV2Data DeserializeAssessedSqlDatabaseV2Data(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<MigrateTargetType> recommendedAzureSqlTargetType = default;
            Optional<RecommendedSuitability> recommendedSuitability = default;
            Optional<double> bufferCacheSizeInMB = default;
            Optional<ProductSupportStatus> productSupportStatus = default;
            Optional<SqlAssessmentV2PaasSuitabilityDetails> azureSqlMISuitabilityDetails = default;
            Optional<SqlAssessmentV2PaasSuitabilityDetails> azureSqlDBSuitabilityDetails = default;
            Optional<bool> isDatabaseHighlyAvailable = default;
            Optional<SqlAvailabilityGroupDataOverview> linkedAvailabilityGroupOverview = default;
            Optional<ResourceIdentifier> machineArmId = default;
            Optional<ResourceIdentifier> assessedSqlInstanceArmId = default;
            Optional<string> machineName = default;
            Optional<string> instanceName = default;
            Optional<string> databaseName = default;
            Optional<double> databaseSizeInMB = default;
            Optional<CompatibilityLevel> compatibilityLevel = default;
            Optional<ResourceIdentifier> sqlDatabaseSdsArmId = default;
            Optional<double> percentageCoresUtilization = default;
            Optional<double> megabytesPerSecondOfRead = default;
            Optional<double> megabytesPerSecondOfWrite = default;
            Optional<double> numberOfReadOperationsPerSecond = default;
            Optional<double> numberOfWriteOperationsPerSecond = default;
            Optional<double> confidenceRatingInPercentage = default;
            Optional<AssessmentSizingCriterion> sizingCriterion = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("recommendedAzureSqlTargetType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedAzureSqlTargetType = new MigrateTargetType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendedSuitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedSuitability = new RecommendedSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("bufferCacheSizeInMB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bufferCacheSizeInMB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("productSupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            productSupportStatus = ProductSupportStatus.DeserializeProductSupportStatus(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlMISuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlMISuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlDBSuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlDBSuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("isDatabaseHighlyAvailable"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isDatabaseHighlyAvailable = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("linkedAvailabilityGroupOverview"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            linkedAvailabilityGroupOverview = SqlAvailabilityGroupDataOverview.DeserializeSqlAvailabilityGroupDataOverview(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("machineArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            machineArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("assessedSqlInstanceArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessedSqlInstanceArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("machineName"u8))
                        {
                            machineName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceName"u8))
                        {
                            instanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("databaseName"u8))
                        {
                            databaseName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("databaseSizeInMB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            databaseSizeInMB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("compatibilityLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            compatibilityLevel = new CompatibilityLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sqlDatabaseSdsArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sqlDatabaseSdsArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("percentageCoresUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentageCoresUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("megabytesPerSecondOfRead"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            megabytesPerSecondOfRead = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("megabytesPerSecondOfWrite"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            megabytesPerSecondOfWrite = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfReadOperationsPerSecond"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfReadOperationsPerSecond = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfWriteOperationsPerSecond"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfWriteOperationsPerSecond = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AssessedSqlDatabaseV2Data(
                id,
                name,
                type,
                systemData.Value,
                Optional.ToNullable(recommendedAzureSqlTargetType),
                Optional.ToNullable(recommendedSuitability),
                Optional.ToNullable(bufferCacheSizeInMB),
                productSupportStatus.Value,
                azureSqlMISuitabilityDetails.Value,
                azureSqlDBSuitabilityDetails.Value,
                Optional.ToNullable(isDatabaseHighlyAvailable),
                linkedAvailabilityGroupOverview.Value,
                machineArmId.Value,
                assessedSqlInstanceArmId.Value,
                machineName.Value,
                instanceName.Value,
                databaseName.Value,
                Optional.ToNullable(databaseSizeInMB),
                Optional.ToNullable(compatibilityLevel),
                sqlDatabaseSdsArmId.Value,
                Optional.ToNullable(percentageCoresUtilization),
                Optional.ToNullable(megabytesPerSecondOfRead),
                Optional.ToNullable(megabytesPerSecondOfWrite),
                Optional.ToNullable(numberOfReadOperationsPerSecond),
                Optional.ToNullable(numberOfWriteOperationsPerSecond),
                Optional.ToNullable(confidenceRatingInPercentage),
                Optional.ToNullable(sizingCriterion),
                Optional.ToNullable(createdTimestamp),
                Optional.ToNullable(updatedTimestamp),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssessedSqlDatabaseV2Data>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlDatabaseV2Data)} does not support '{options.Format}' format.");
            }
        }

        AssessedSqlDatabaseV2Data IPersistableModel<AssessedSqlDatabaseV2Data>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlDatabaseV2Data>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAssessedSqlDatabaseV2Data(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlDatabaseV2Data)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssessedSqlDatabaseV2Data>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
