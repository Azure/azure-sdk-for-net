// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate
{
    internal partial class AssessedMachinesRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of AssessedMachinesRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public AssessedMachinesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2019-10-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal HttpMessage CreateListByAssessmentRequest(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentName, true);
            uri.AppendPath("/assessedMachines", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AssessedMachineResultList>> ListByAssessmentAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var message = CreateListByAssessmentRequest(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AssessedMachineResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AssessedMachineResultList.DeserializeAssessedMachineResultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AssessedMachineResultList> ListByAssessment(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var message = CreateListByAssessmentRequest(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AssessedMachineResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AssessedMachineResultList.DeserializeAssessedMachineResultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, string assessedMachineName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Migrate/assessmentProjects/", false);
            uri.AppendPath(projectName, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(groupName, true);
            uri.AppendPath("/assessments/", false);
            uri.AppendPath(assessmentName, true);
            uri.AppendPath("/assessedMachines/", false);
            uri.AppendPath(assessedMachineName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/>, <paramref name="assessmentName"/> or <paramref name="assessedMachineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/>, <paramref name="assessmentName"/> or <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AssessedMachineData>> GetAsync(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, string assessedMachineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assessedMachineName, nameof(assessedMachineName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AssessedMachineData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AssessedMachineData.DeserializeAssessedMachineData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AssessedMachineData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment. </summary>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/>, <paramref name="assessmentName"/> or <paramref name="assessedMachineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/>, <paramref name="assessmentName"/> or <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AssessedMachineData> Get(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, string assessedMachineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNullOrEmpty(assessedMachineName, nameof(assessedMachineName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AssessedMachineData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AssessedMachineData.DeserializeAssessedMachineData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((AssessedMachineData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByAssessmentNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<AssessedMachineResultList>> ListByAssessmentNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var message = CreateListByAssessmentNextPageRequest(nextLink, subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AssessedMachineResultList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AssessedMachineResultList.DeserializeAssessedMachineResultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> Azure Subscription Id in which project was created. </param>
        /// <param name="resourceGroupName"> Name of the Azure Resource Group that project is part of. </param>
        /// <param name="projectName"> Name of the Azure Migrate project. </param>
        /// <param name="groupName"> Unique name of a group within a project. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="projectName"/>, <paramref name="groupName"/> or <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<AssessedMachineResultList> ListByAssessmentNextPage(string nextLink, string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(projectName, nameof(projectName));
            Argument.AssertNotNullOrEmpty(groupName, nameof(groupName));
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var message = CreateListByAssessmentNextPageRequest(nextLink, subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AssessedMachineResultList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AssessedMachineResultList.DeserializeAssessedMachineResultList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
