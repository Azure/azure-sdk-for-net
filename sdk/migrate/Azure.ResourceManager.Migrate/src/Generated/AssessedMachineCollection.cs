// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing a collection of <see cref="AssessedMachineResource" /> and their operations.
    /// Each <see cref="AssessedMachineResource" /> in the collection will belong to the same instance of <see cref="AssessmentResource" />.
    /// To get an <see cref="AssessedMachineCollection" /> instance call the GetAssessedMachines method from an instance of <see cref="AssessmentResource" />.
    /// </summary>
    public partial class AssessedMachineCollection : ArmCollection, IEnumerable<AssessedMachineResource>, IAsyncEnumerable<AssessedMachineResource>
    {
        private readonly ClientDiagnostics _assessedMachineClientDiagnostics;
        private readonly AssessedMachinesRestOperations _assessedMachineRestClient;

        /// <summary> Initializes a new instance of the <see cref="AssessedMachineCollection"/> class for mocking. </summary>
        protected AssessedMachineCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AssessedMachineCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AssessedMachineCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _assessedMachineClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", AssessedMachineResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AssessedMachineResource.ResourceType, out string assessedMachineApiVersion);
            _assessedMachineRestClient = new AssessedMachinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, assessedMachineApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != AssessmentResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, AssessmentResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
        /// Operation Id: AssessedMachines_Get
        /// </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual async Task<Response<AssessedMachineResource>> GetAsync(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedMachineName, nameof(assessedMachineName));

            using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.Get");
            scope.Start();
            try
            {
                var response = await _assessedMachineRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessedMachineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
        /// Operation Id: AssessedMachines_Get
        /// </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual Response<AssessedMachineResource> Get(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedMachineName, nameof(assessedMachineName));

            using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.Get");
            scope.Start();
            try
            {
                var response = _assessedMachineRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessedMachineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines
        /// Operation Id: AssessedMachines_ListByAssessment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AssessedMachineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AssessedMachineResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AssessedMachineResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _assessedMachineRestClient.ListByAssessmentAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AssessedMachineResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _assessedMachineRestClient.ListByAssessmentNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &apos;assessedMachine&apos; as specified in the Models section.
        /// 
        /// Whenever an assessment is created or updated, it goes under computation. During this phase, the &apos;status&apos; field of Assessment object reports &apos;Computing&apos;.
        /// During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines
        /// Operation Id: AssessedMachines_ListByAssessment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AssessedMachineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AssessedMachineResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AssessedMachineResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _assessedMachineRestClient.ListByAssessment(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AssessedMachineResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _assessedMachineRestClient.ListByAssessmentNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessedMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
        /// Operation Id: AssessedMachines_Get
        /// </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedMachineName, nameof(assessedMachineName));

            using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.Exists");
            scope.Start();
            try
            {
                var response = await _assessedMachineRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
        /// Operation Id: AssessedMachines_Get
        /// </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessedMachineName, nameof(assessedMachineName));

            using var scope = _assessedMachineClientDiagnostics.CreateScope("AssessedMachineCollection.Exists");
            scope.Start();
            try
            {
                var response = _assessedMachineRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, assessedMachineName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AssessedMachineResource> IEnumerable<AssessedMachineResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AssessedMachineResource> IAsyncEnumerable<AssessedMachineResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
