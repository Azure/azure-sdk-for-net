// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A Class representing an Assessment along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="AssessmentResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetAssessmentResource method.
    /// Otherwise you can get one from its parent resource <see cref="GroupResource" /> using the GetAssessment method.
    /// </summary>
    public partial class AssessmentResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="AssessmentResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName, string groupName, string assessmentName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _assessmentClientDiagnostics;
        private readonly AssessmentsRestOperations _assessmentRestClient;
        private readonly AssessmentData _data;

        /// <summary> Initializes a new instance of the <see cref="AssessmentResource"/> class for mocking. </summary>
        protected AssessmentResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "AssessmentResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal AssessmentResource(ArmClient client, AssessmentData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="AssessmentResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal AssessmentResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _assessmentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string assessmentApiVersion);
            _assessmentRestClient = new AssessmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, assessmentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Migrate/assessmentProjects/groups/assessments";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual AssessmentData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of AssessedMachineResources in the Assessment. </summary>
        /// <returns> An object representing collection of AssessedMachineResources and their operations over a AssessedMachineResource. </returns>
        public virtual AssessedMachineCollection GetAssessedMachines()
        {
            return GetCachedClient(Client => new AssessedMachineCollection(Client, Id));
        }

        /// <summary>
        /// Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
        /// Operation Id: AssessedMachines_Get
        /// </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<AssessedMachineResource>> GetAssessedMachineAsync(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            return await GetAssessedMachines().GetAsync(assessedMachineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}
        /// Operation Id: AssessedMachines_Get
        /// </summary>
        /// <param name="assessedMachineName"> Unique name of an assessed machine evaluated as part of an assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessedMachineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessedMachineName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<AssessedMachineResource> GetAssessedMachine(string assessedMachineName, CancellationToken cancellationToken = default)
        {
            return GetAssessedMachines().Get(assessedMachineName, cancellationToken);
        }

        /// <summary>
        /// Get an existing assessment with the specified name. Returns a json object of type &apos;assessment&apos; as specified in Models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AssessmentResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.Get");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an existing assessment with the specified name. Returns a json object of type &apos;assessment&apos; as specified in Models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AssessmentResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.Get");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.
        /// 
        /// When an assessment is under computation, as indicated by the &apos;computationState&apos; field, it cannot be deleted. Any such attempt will return a 400 - Bad Request.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.Delete");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.
        /// 
        /// When an assessment is under computation, as indicated by the &apos;computationState&apos; field, it cannot be deleted. Any such attempt will return a 400 - Bad Request.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.Delete");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
        /// 
        /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
        /// 
        /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> New or Updated Assessment object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<AssessmentResource>> UpdateAsync(WaitUntil waitUntil, AssessmentData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.Update");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation<AssessmentResource>(Response.FromValue(new AssessmentResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
        /// 
        /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
        /// 
        /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> New or Updated Assessment object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<AssessmentResource> Update(WaitUntil waitUntil, AssessmentData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.Update");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, data, cancellationToken);
                var operation = new MigrateArmOperation<AssessmentResource>(Response.FromValue(new AssessmentResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the URL for downloading the assessment in a report format.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl
        /// Operation Id: Assessments_GetReportDownloadUrl
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DownloadUri>> GetReportDownloadUrlAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.GetReportDownloadUrl");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.GetReportDownloadUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the URL for downloading the assessment in a report format.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl
        /// Operation Id: Assessments_GetReportDownloadUrl
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DownloadUri> GetReportDownloadUrl(CancellationToken cancellationToken = default)
        {
            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentResource.GetReportDownloadUrl");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.GetReportDownloadUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
