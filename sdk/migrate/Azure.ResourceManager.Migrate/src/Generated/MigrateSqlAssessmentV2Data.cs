// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing the MigrateSqlAssessmentV2 data model.
    /// SQL Assessment REST resource.
    /// </summary>
    public partial class MigrateSqlAssessmentV2Data : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MigrateSqlAssessmentV2Data"/>. </summary>
        public MigrateSqlAssessmentV2Data()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MigrateSqlAssessmentV2Data"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="osLicense"> Gets or sets user configurable setting to display the azure hybrid use benefit. </param>
        /// <param name="environmentType"> Gets or sets user configurable setting to display the environment type. </param>
        /// <param name="entityUptime">
        /// Gets or sets the duration for which the entity (SQL, VMs) are up in the
        /// on-premises environment.
        /// </param>
        /// <param name="optimizationLogic"> Gets or sets SQL optimization logic. </param>
        /// <param name="reservedInstanceForVm"> Gets or sets azure reserved instance for VM. </param>
        /// <param name="azureOfferCodeForVm"> Gets or sets Azure Offer Code for VM. </param>
        /// <param name="eaSubscriptionId"> Gets or sets the Enterprise agreement subscription id. </param>
        /// <param name="azureSqlManagedInstanceSettings"> Gets or sets user configurable SQL managed instance settings. </param>
        /// <param name="azureSqlDatabaseSettings"> Gets or sets user configurable SQL database settings. </param>
        /// <param name="azureSqlVmSettings"> Gets or sets user configurable SQL VM settings. </param>
        /// <param name="multiSubnetIntent"> Gets or sets user preference indicating intent of multi-subnet configuration. </param>
        /// <param name="asyncCommitModeIntent"> Gets or sets user preference indicating intent of async commit mode. </param>
        /// <param name="isInternetAccessAvailable"> Gets or sets a value indicating whether internet access is available. </param>
        /// <param name="disasterRecoveryLocation">
        /// Gets or sets the Azure Location or Azure region where to which the machines
        /// will be migrated.
        /// </param>
        /// <param name="enableHadrAssessment"> Gets or sets a value indicating whether HADR assessments needs to be created. </param>
        /// <param name="azureSecurityOfferingType"> Gets or sets a value indicating azure security offering type. </param>
        /// <param name="reservedInstance"> Reserved instance. </param>
        /// <param name="sqlServerLicense"> SQL server license. </param>
        /// <param name="groupType"> Gets the group type for the assessment. </param>
        /// <param name="assessmentType"> Assessment type of the assessment. </param>
        /// <param name="azureLocation"> Azure Location or Azure region where to which the machines will be migrated. </param>
        /// <param name="azureOfferCode"> Azure Offer Code. </param>
        /// <param name="currency"> Currency in which prices should be reported. </param>
        /// <param name="scalingFactor">
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </param>
        /// <param name="percentile">
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </param>
        /// <param name="timeRange">
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </param>
        /// <param name="perfDataStartOn"> Gets or sets the start time to consider performance data for assessment. </param>
        /// <param name="perfDataEndOn"> Gets or sets the end time to consider performance data for assessment. </param>
        /// <param name="stage"> User configurable setting to display the Stage of Assessment. </param>
        /// <param name="discountPercentage"> Custom discount percentage. </param>
        /// <param name="sizingCriterion"> Assessment sizing criterion. </param>
        /// <param name="confidenceRatingInPercentage"> Confidence Rating in Percentage. </param>
        /// <param name="pricesQueriedOn"> Last time when rates were queried. </param>
        /// <param name="createdOn"> Date and Time when assessment was created. </param>
        /// <param name="updatedOn"> Date and Time when assessment was last updated. </param>
        /// <param name="status"> Whether assessment is in valid state and all machines have been assessed. </param>
        /// <param name="schemaVersion"> Schema version. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MigrateSqlAssessmentV2Data(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, MigrateProvisioningState? provisioningState, MigrateOSLicense? osLicense, AssessmentEnvironmentType? environmentType, EntityUptime entityUptime, SqlOptimizationLogic? optimizationLogic, AzureReservedInstance? reservedInstanceForVm, AzureOfferCode? azureOfferCodeForVm, string eaSubscriptionId, SqlMISettings azureSqlManagedInstanceSettings, SqlDBSettings azureSqlDatabaseSettings, SqlVmSettings azureSqlVmSettings, MultiSubnetIntent? multiSubnetIntent, AsyncCommitModeIntent? asyncCommitModeIntent, bool? isInternetAccessAvailable, AzureLocation? disasterRecoveryLocation, bool? enableHadrAssessment, AzureSecurityOfferingType? azureSecurityOfferingType, AzureReservedInstance? reservedInstance, SqlServerLicense? sqlServerLicense, MigrateGroupType? groupType, AssessmentType? assessmentType, AzureLocation? azureLocation, AzureOfferCode? azureOfferCode, AzureCurrency? currency, double? scalingFactor, PercentileOfUtilization? percentile, AssessmentTimeRange? timeRange, DateTimeOffset? perfDataStartOn, DateTimeOffset? perfDataEndOn, AssessmentStage? stage, double? discountPercentage, AssessmentSizingCriterion? sizingCriterion, double? confidenceRatingInPercentage, DateTimeOffset? pricesQueriedOn, DateTimeOffset? createdOn, DateTimeOffset? updatedOn, AssessmentStatus? status, string schemaVersion, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            ProvisioningState = provisioningState;
            OSLicense = osLicense;
            EnvironmentType = environmentType;
            EntityUptime = entityUptime;
            OptimizationLogic = optimizationLogic;
            ReservedInstanceForVm = reservedInstanceForVm;
            AzureOfferCodeForVm = azureOfferCodeForVm;
            EASubscriptionId = eaSubscriptionId;
            AzureSqlManagedInstanceSettings = azureSqlManagedInstanceSettings;
            AzureSqlDatabaseSettings = azureSqlDatabaseSettings;
            AzureSqlVmSettings = azureSqlVmSettings;
            MultiSubnetIntent = multiSubnetIntent;
            AsyncCommitModeIntent = asyncCommitModeIntent;
            IsInternetAccessAvailable = isInternetAccessAvailable;
            DisasterRecoveryLocation = disasterRecoveryLocation;
            EnableHadrAssessment = enableHadrAssessment;
            AzureSecurityOfferingType = azureSecurityOfferingType;
            ReservedInstance = reservedInstance;
            SqlServerLicense = sqlServerLicense;
            GroupType = groupType;
            AssessmentType = assessmentType;
            AzureLocation = azureLocation;
            AzureOfferCode = azureOfferCode;
            Currency = currency;
            ScalingFactor = scalingFactor;
            Percentile = percentile;
            TimeRange = timeRange;
            PerfDataStartOn = perfDataStartOn;
            PerfDataEndOn = perfDataEndOn;
            Stage = stage;
            DiscountPercentage = discountPercentage;
            SizingCriterion = sizingCriterion;
            ConfidenceRatingInPercentage = confidenceRatingInPercentage;
            PricesQueriedOn = pricesQueriedOn;
            CreatedOn = createdOn;
            UpdatedOn = updatedOn;
            Status = status;
            SchemaVersion = schemaVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of the last operation. </summary>
        public MigrateProvisioningState? ProvisioningState { get; set; }
        /// <summary> Gets or sets user configurable setting to display the azure hybrid use benefit. </summary>
        public MigrateOSLicense? OSLicense { get; set; }
        /// <summary> Gets or sets user configurable setting to display the environment type. </summary>
        public AssessmentEnvironmentType? EnvironmentType { get; set; }
        /// <summary>
        /// Gets or sets the duration for which the entity (SQL, VMs) are up in the
        /// on-premises environment.
        /// </summary>
        public EntityUptime EntityUptime { get; set; }
        /// <summary> Gets or sets SQL optimization logic. </summary>
        public SqlOptimizationLogic? OptimizationLogic { get; set; }
        /// <summary> Gets or sets azure reserved instance for VM. </summary>
        public AzureReservedInstance? ReservedInstanceForVm { get; set; }
        /// <summary> Gets or sets Azure Offer Code for VM. </summary>
        public AzureOfferCode? AzureOfferCodeForVm { get; set; }
        /// <summary> Gets or sets the Enterprise agreement subscription id. </summary>
        public string EASubscriptionId { get; set; }
        /// <summary> Gets or sets user configurable SQL managed instance settings. </summary>
        public SqlMISettings AzureSqlManagedInstanceSettings { get; set; }
        /// <summary> Gets or sets user configurable SQL database settings. </summary>
        public SqlDBSettings AzureSqlDatabaseSettings { get; set; }
        /// <summary> Gets or sets user configurable SQL VM settings. </summary>
        internal SqlVmSettings AzureSqlVmSettings { get; set; }
        /// <summary>
        /// Gets or sets the Azure VM families (calling instance series to keep it
        /// consistent with other targets).
        /// </summary>
        public IList<AzureVmFamily> AzureSqlVmInstanceSeries
        {
            get
            {
                if (AzureSqlVmSettings is null)
                    AzureSqlVmSettings = new SqlVmSettings();
                return AzureSqlVmSettings.InstanceSeries;
            }
        }

        /// <summary> Gets or sets user preference indicating intent of multi-subnet configuration. </summary>
        public MultiSubnetIntent? MultiSubnetIntent { get; set; }
        /// <summary> Gets or sets user preference indicating intent of async commit mode. </summary>
        public AsyncCommitModeIntent? AsyncCommitModeIntent { get; set; }
        /// <summary> Gets or sets a value indicating whether internet access is available. </summary>
        public bool? IsInternetAccessAvailable { get; set; }
        /// <summary>
        /// Gets or sets the Azure Location or Azure region where to which the machines
        /// will be migrated.
        /// </summary>
        public AzureLocation? DisasterRecoveryLocation { get; set; }
        /// <summary> Gets or sets a value indicating whether HADR assessments needs to be created. </summary>
        public bool? EnableHadrAssessment { get; set; }
        /// <summary> Gets or sets a value indicating azure security offering type. </summary>
        public AzureSecurityOfferingType? AzureSecurityOfferingType { get; set; }
        /// <summary> Reserved instance. </summary>
        public AzureReservedInstance? ReservedInstance { get; set; }
        /// <summary> SQL server license. </summary>
        public SqlServerLicense? SqlServerLicense { get; set; }
        /// <summary> Gets the group type for the assessment. </summary>
        public MigrateGroupType? GroupType { get; set; }
        /// <summary> Assessment type of the assessment. </summary>
        public AssessmentType? AssessmentType { get; set; }
        /// <summary> Azure Location or Azure region where to which the machines will be migrated. </summary>
        public AzureLocation? AzureLocation { get; set; }
        /// <summary> Azure Offer Code. </summary>
        public AzureOfferCode? AzureOfferCode { get; set; }
        /// <summary> Currency in which prices should be reported. </summary>
        public AzureCurrency? Currency { get; set; }
        /// <summary>
        /// Percentage of buffer that user wants on performance metrics when recommending
        /// Azure sizes.
        /// </summary>
        public double? ScalingFactor { get; set; }
        /// <summary>
        /// Percentile of the utilization data values to be considered while assessing
        /// machines.
        /// </summary>
        public PercentileOfUtilization? Percentile { get; set; }
        /// <summary>
        /// Time Range for which the historic utilization data should be considered for
        /// assessment.
        /// </summary>
        public AssessmentTimeRange? TimeRange { get; set; }
        /// <summary> Gets or sets the start time to consider performance data for assessment. </summary>
        public DateTimeOffset? PerfDataStartOn { get; set; }
        /// <summary> Gets or sets the end time to consider performance data for assessment. </summary>
        public DateTimeOffset? PerfDataEndOn { get; set; }
        /// <summary> User configurable setting to display the Stage of Assessment. </summary>
        public AssessmentStage? Stage { get; }
        /// <summary> Custom discount percentage. </summary>
        public double? DiscountPercentage { get; set; }
        /// <summary> Assessment sizing criterion. </summary>
        public AssessmentSizingCriterion? SizingCriterion { get; set; }
        /// <summary> Confidence Rating in Percentage. </summary>
        public double? ConfidenceRatingInPercentage { get; set; }
        /// <summary> Last time when rates were queried. </summary>
        public DateTimeOffset? PricesQueriedOn { get; }
        /// <summary> Date and Time when assessment was created. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Date and Time when assessment was last updated. </summary>
        public DateTimeOffset? UpdatedOn { get; }
        /// <summary> Whether assessment is in valid state and all machines have been assessed. </summary>
        public AssessmentStatus? Status { get; }
        /// <summary> Schema version. </summary>
        public string SchemaVersion { get; }
    }
}
