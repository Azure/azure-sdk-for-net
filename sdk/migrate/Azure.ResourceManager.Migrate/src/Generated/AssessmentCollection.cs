// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A class representing a collection of <see cref="AssessmentResource" /> and their operations.
    /// Each <see cref="AssessmentResource" /> in the collection will belong to the same instance of <see cref="GroupResource" />.
    /// To get an <see cref="AssessmentCollection" /> instance call the GetAssessments method from an instance of <see cref="GroupResource" />.
    /// </summary>
    public partial class AssessmentCollection : ArmCollection, IEnumerable<AssessmentResource>, IAsyncEnumerable<AssessmentResource>
    {
        private readonly ClientDiagnostics _assessmentClientDiagnostics;
        private readonly AssessmentsRestOperations _assessmentRestClient;

        /// <summary> Initializes a new instance of the <see cref="AssessmentCollection"/> class for mocking. </summary>
        protected AssessmentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AssessmentCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AssessmentCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _assessmentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", AssessmentResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AssessmentResource.ResourceType, out string assessmentApiVersion);
            _assessmentRestClient = new AssessmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, assessmentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != GroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, GroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
        /// 
        /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
        /// 
        /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="data"> New or Updated Assessment object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<AssessmentResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string assessmentName, AssessmentData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, data, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation<AssessmentResource>(Response.FromValue(new AssessmentResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.
        /// 
        /// Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a &quot;InProgress&quot; state. This will be indicated by the field &apos;computationState&apos; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &apos;computationState&apos; will be updated to &apos;Ready&apos;, and then other PUT or DELETE operations can happen on the assessment.
        /// 
        /// When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="data"> New or Updated Assessment object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<AssessmentResource> CreateOrUpdate(WaitUntil waitUntil, string assessmentName, AssessmentData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, data, cancellationToken);
                var operation = new MigrateArmOperation<AssessmentResource>(Response.FromValue(new AssessmentResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an existing assessment with the specified name. Returns a json object of type &apos;assessment&apos; as specified in Models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual async Task<Response<AssessmentResource>> GetAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an existing assessment with the specified name. Returns a json object of type &apos;assessment&apos; as specified in Models section.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<AssessmentResource> Get(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.Get");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AssessmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get all assessments created for the specified group.
        /// 
        /// Returns a json array of objects of type &apos;assessment&apos; as specified in Models section.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments
        /// Operation Id: Assessments_ListByGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AssessmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AssessmentResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AssessmentResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _assessmentRestClient.ListByGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessmentResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get all assessments created for the specified group.
        /// 
        /// Returns a json array of objects of type &apos;assessment&apos; as specified in Models section.
        /// 
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments
        /// Operation Id: Assessments_ListByGroup
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AssessmentResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AssessmentResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<AssessmentResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _assessmentRestClient.ListByGroup(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AssessmentResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.Exists");
            scope.Start();
            try
            {
                var response = await _assessmentRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}
        /// Operation Id: Assessments_Get
        /// </summary>
        /// <param name="assessmentName"> Unique name of an assessment within a project. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="assessmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentName"/> is null. </exception>
        public virtual Response<bool> Exists(string assessmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(assessmentName, nameof(assessmentName));

            using var scope = _assessmentClientDiagnostics.CreateScope("AssessmentCollection.Exists");
            scope.Start();
            try
            {
                var response = _assessmentRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, assessmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AssessmentResource> IEnumerable<AssessmentResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AssessmentResource> IAsyncEnumerable<AssessmentResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
