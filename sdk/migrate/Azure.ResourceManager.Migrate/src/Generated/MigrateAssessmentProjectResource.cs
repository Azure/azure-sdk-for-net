// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Migrate
{
    /// <summary>
    /// A Class representing a MigrateAssessmentProject along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="MigrateAssessmentProjectResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetMigrateAssessmentProjectResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource"/> using the GetMigrateAssessmentProject method.
    /// </summary>
    public partial class MigrateAssessmentProjectResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="MigrateAssessmentProjectResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="resourceGroupName"> The resourceGroupName. </param>
        /// <param name="projectName"> The projectName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string projectName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics;
        private readonly AssessmentProjectsRestOperations _migrateAssessmentProjectAssessmentProjectsOperationsRestClient;
        private readonly MigrateAssessmentProjectData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Migrate/assessmentProjects";

        /// <summary> Initializes a new instance of the <see cref="MigrateAssessmentProjectResource"/> class for mocking. </summary>
        protected MigrateAssessmentProjectResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MigrateAssessmentProjectResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal MigrateAssessmentProjectResource(ArmClient client, MigrateAssessmentProjectData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="MigrateAssessmentProjectResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MigrateAssessmentProjectResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Migrate", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string migrateAssessmentProjectAssessmentProjectsOperationsApiVersion);
            _migrateAssessmentProjectAssessmentProjectsOperationsRestClient = new AssessmentProjectsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, migrateAssessmentProjectAssessmentProjectsOperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual MigrateAssessmentProjectData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of MigrateAssessmentOptionResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateAssessmentOptionResources and their operations over a MigrateAssessmentOptionResource. </returns>
        public virtual MigrateAssessmentOptionCollection GetMigrateAssessmentOptions()
        {
            return GetCachedClient(client => new MigrateAssessmentOptionCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateAssessmentOptionResource>> GetMigrateAssessmentOptionAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateAssessmentOptions().GetAsync(assessmentOptionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateAssessmentOptionResource> GetMigrateAssessmentOption(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return GetMigrateAssessmentOptions().Get(assessmentOptionsName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateAvsAssessmentOptionResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateAvsAssessmentOptionResources and their operations over a MigrateAvsAssessmentOptionResource. </returns>
        public virtual MigrateAvsAssessmentOptionCollection GetMigrateAvsAssessmentOptions()
        {
            return GetCachedClient(client => new MigrateAvsAssessmentOptionCollection(client, Id));
        }

        /// <summary>
        /// Get a AvsAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/avsAssessmentOptions/{avsAssessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAvsAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsAssessmentOptionsName"> AVS Assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="avsAssessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="avsAssessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateAvsAssessmentOptionResource>> GetMigrateAvsAssessmentOptionAsync(string avsAssessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateAvsAssessmentOptions().GetAsync(avsAssessmentOptionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AvsAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/avsAssessmentOptions/{avsAssessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AvsAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAvsAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="avsAssessmentOptionsName"> AVS Assessment options ARM name. Accepted value is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="avsAssessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="avsAssessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateAvsAssessmentOptionResource> GetMigrateAvsAssessmentOption(string avsAssessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return GetMigrateAvsAssessmentOptions().Get(avsAssessmentOptionsName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateGroupResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateGroupResources and their operations over a MigrateGroupResource. </returns>
        public virtual MigrateGroupCollection GetMigrateGroups()
        {
            return GetCachedClient(client => new MigrateGroupCollection(client, Id));
        }

        /// <summary>
        /// Get a Group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateGroupResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateGroupResource>> GetMigrateGroupAsync(string groupName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateGroups().GetAsync(groupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GroupsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateGroupResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="groupName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateGroupResource> GetMigrateGroup(string groupName, CancellationToken cancellationToken = default)
        {
            return GetMigrateGroups().Get(groupName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateHyperVCollectorResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateHyperVCollectorResources and their operations over a MigrateHyperVCollectorResource. </returns>
        public virtual MigrateHyperVCollectorCollection GetMigrateHyperVCollectors()
        {
            return GetCachedClient(client => new MigrateHyperVCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a HypervCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HypervCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateHyperVCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="hyperVCollectorName"> Hyper-V collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hyperVCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="hyperVCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateHyperVCollectorResource>> GetMigrateHyperVCollectorAsync(string hyperVCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateHyperVCollectors().GetAsync(hyperVCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a HypervCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hypervCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HypervCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateHyperVCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="hyperVCollectorName"> Hyper-V collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hyperVCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="hyperVCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateHyperVCollectorResource> GetMigrateHyperVCollector(string hyperVCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrateHyperVCollectors().Get(hyperVCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateImportCollectorResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateImportCollectorResources and their operations over a MigrateImportCollectorResource. </returns>
        public virtual MigrateImportCollectorCollection GetMigrateImportCollectors()
        {
            return GetCachedClient(client => new MigrateImportCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a ImportCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImportCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateImportCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="importCollectorName"> Import collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="importCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="importCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateImportCollectorResource>> GetMigrateImportCollectorAsync(string importCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateImportCollectors().GetAsync(importCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ImportCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ImportCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateImportCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="importCollectorName"> Import collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="importCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="importCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateImportCollectorResource> GetMigrateImportCollector(string importCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrateImportCollectors().Get(importCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateMachineResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateMachineResources and their operations over a MigrateMachineResource. </returns>
        public virtual MigrateMachineCollection GetMigrateMachines()
        {
            return GetCachedClient(client => new MigrateMachineCollection(client, Id));
        }

        /// <summary>
        /// Get a Machine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Assessible Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateMachineResource>> GetMigrateMachineAsync(string machineName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateMachines().GetAsync(machineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Machine
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MachinesOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateMachineResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="machineName"> Assessible Machine ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateMachineResource> GetMigrateMachine(string machineName, CancellationToken cancellationToken = default)
        {
            return GetMigrateMachines().Get(machineName, cancellationToken);
        }

        /// <summary> Gets a collection of MigratePrivateEndpointConnectionResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigratePrivateEndpointConnectionResources and their operations over a MigratePrivateEndpointConnectionResource. </returns>
        public virtual MigratePrivateEndpointConnectionCollection GetMigratePrivateEndpointConnections()
        {
            return GetCachedClient(client => new MigratePrivateEndpointConnectionCollection(client, Id));
        }

        /// <summary>
        /// Get a PrivateEndpointConnection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnectionOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigratePrivateEndpointConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateEndpointConnectionName"> Private endpoint connection ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigratePrivateEndpointConnectionResource>> GetMigratePrivateEndpointConnectionAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return await GetMigratePrivateEndpointConnections().GetAsync(privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PrivateEndpointConnection
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateEndpointConnectionOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigratePrivateEndpointConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateEndpointConnectionName"> Private endpoint connection ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigratePrivateEndpointConnectionResource> GetMigratePrivateEndpointConnection(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return GetMigratePrivateEndpointConnections().Get(privateEndpointConnectionName, cancellationToken);
        }

        /// <summary> Gets a collection of MigratePrivateLinkResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigratePrivateLinkResources and their operations over a MigratePrivateLinkResource. </returns>
        public virtual MigratePrivateLinkResourceCollection GetMigratePrivateLinkResources()
        {
            return GetCachedClient(client => new MigratePrivateLinkResourceCollection(client, Id));
        }

        /// <summary>
        /// Get a PrivateLinkResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateLinkResources/{privateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateLinkResourceOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigratePrivateLinkResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateLinkResourceName"> Private link resource ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigratePrivateLinkResource>> GetMigratePrivateLinkResourceAsync(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return await GetMigratePrivateLinkResources().GetAsync(privateLinkResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PrivateLinkResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/privateLinkResources/{privateLinkResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PrivateLinkResourceOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigratePrivateLinkResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="privateLinkResourceName"> Private link resource ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigratePrivateLinkResource> GetMigratePrivateLinkResource(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return GetMigratePrivateLinkResources().Get(privateLinkResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateAssessmentProjectSummaryResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateAssessmentProjectSummaryResources and their operations over a MigrateAssessmentProjectSummaryResource. </returns>
        public virtual MigrateAssessmentProjectSummaryCollection GetMigrateAssessmentProjectSummaries()
        {
            return GetCachedClient(client => new MigrateAssessmentProjectSummaryCollection(client, Id));
        }

        /// <summary>
        /// Get a AssessmentProjectSummary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/projectSummary/{projectSummaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectSummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectSummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectSummaryName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectSummaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectSummaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateAssessmentProjectSummaryResource>> GetMigrateAssessmentProjectSummaryAsync(string projectSummaryName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateAssessmentProjectSummaries().GetAsync(projectSummaryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a AssessmentProjectSummary
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/projectSummary/{projectSummaryName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectSummaryOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectSummaryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="projectSummaryName"> Group ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectSummaryName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="projectSummaryName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateAssessmentProjectSummaryResource> GetMigrateAssessmentProjectSummary(string projectSummaryName, CancellationToken cancellationToken = default)
        {
            return GetMigrateAssessmentProjectSummaries().Get(projectSummaryName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateServerCollectorResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateServerCollectorResources and their operations over a MigrateServerCollectorResource. </returns>
        public virtual MigrateServerCollectorCollection GetMigrateServerCollectors()
        {
            return GetCachedClient(client => new MigrateServerCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a ServerCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServerCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateServerCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serverCollectorName"> Physical server collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateServerCollectorResource>> GetMigrateServerCollectorAsync(string serverCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateServerCollectors().GetAsync(serverCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a ServerCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ServerCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateServerCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="serverCollectorName"> Physical server collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateServerCollectorResource> GetMigrateServerCollector(string serverCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrateServerCollectors().Get(serverCollectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateSqlAssessmentOptionResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateSqlAssessmentOptionResources and their operations over a MigrateSqlAssessmentOptionResource. </returns>
        public virtual MigrateSqlAssessmentOptionCollection GetMigrateSqlAssessmentOptions()
        {
            return GetCachedClient(client => new MigrateSqlAssessmentOptionCollection(client, Id));
        }

        /// <summary>
        /// Get a SqlAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateSqlAssessmentOptionResource>> GetMigrateSqlAssessmentOptionAsync(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateSqlAssessmentOptions().GetAsync(assessmentOptionsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SqlAssessmentOptions
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlAssessmentOptions/{assessmentOptionsName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlAssessmentOptionsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlAssessmentOptionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="assessmentOptionsName"> Sql assessment options ARM name. Accepted values is 'default'. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assessmentOptionsName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="assessmentOptionsName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateSqlAssessmentOptionResource> GetMigrateSqlAssessmentOption(string assessmentOptionsName, CancellationToken cancellationToken = default)
        {
            return GetMigrateSqlAssessmentOptions().Get(assessmentOptionsName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateSqlCollectorResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateSqlCollectorResources and their operations over a MigrateSqlCollectorResource. </returns>
        public virtual MigrateSqlCollectorCollection GetMigrateSqlCollectors()
        {
            return GetCachedClient(client => new MigrateSqlCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a SqlCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlcollectors/{collectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlCollectorOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectorName"> Sql collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateSqlCollectorResource>> GetMigrateSqlCollectorAsync(string collectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateSqlCollectors().GetAsync(collectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SqlCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/sqlcollectors/{collectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SqlCollectorOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateSqlCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="collectorName"> Sql collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="collectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateSqlCollectorResource> GetMigrateSqlCollector(string collectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrateSqlCollectors().Get(collectorName, cancellationToken);
        }

        /// <summary> Gets a collection of MigrateVMwareCollectorResources in the MigrateAssessmentProject. </summary>
        /// <returns> An object representing collection of MigrateVMwareCollectorResources and their operations over a MigrateVMwareCollectorResource. </returns>
        public virtual MigrateVMwareCollectorCollection GetMigrateVMwareCollectors()
        {
            return GetCachedClient(client => new MigrateVMwareCollectorCollection(client, Id));
        }

        /// <summary>
        /// Get a VmwareCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VmwareCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateVMwareCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmWareCollectorName"> VMware collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="vmWareCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<MigrateVMwareCollectorResource>> GetMigrateVMwareCollectorAsync(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            return await GetMigrateVMwareCollectors().GetAsync(vmWareCollectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a VmwareCollector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>VmwareCollectorsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateVMwareCollectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="vmWareCollectorName"> VMware collector ARM name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmWareCollectorName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="vmWareCollectorName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<MigrateVMwareCollectorResource> GetMigrateVMwareCollector(string vmWareCollectorName, CancellationToken cancellationToken = default)
        {
            return GetMigrateVMwareCollectors().Get(vmWareCollectorName, cancellationToken);
        }

        /// <summary>
        /// Get a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MigrateAssessmentProjectResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.Get");
            scope.Start();
            try
            {
                var response = await _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrateAssessmentProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MigrateAssessmentProjectResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.Get");
            scope.Start();
            try
            {
                var response = _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MigrateAssessmentProjectResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.Delete");
            scope.Start();
            try
            {
                var response = await _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Delete</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.Delete");
            scope.Start();
            try
            {
                var response = _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new MigrateArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<MigrateAssessmentProjectResource>> UpdateAsync(WaitUntil waitUntil, MigrateAssessmentProjectPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.Update");
            scope.Start();
            try
            {
                var response = await _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new MigrateArmOperation<MigrateAssessmentProjectResource>(new MigrateAssessmentProjectOperationSource(Client), _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics, Pipeline, _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update a AssessmentProject
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Update</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<MigrateAssessmentProjectResource> Update(WaitUntil waitUntil, MigrateAssessmentProjectPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.Update");
            scope.Start();
            try
            {
                var response = _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                var operation = new MigrateArmOperation<MigrateAssessmentProjectResource>(new MigrateAssessmentProjectOperationSource(Client), _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics, Pipeline, _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<MigrateAssessmentProjectResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new MigrateAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new MigrateAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<MigrateAssessmentProjectResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new MigrateAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new MigrateAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<MigrateAssessmentProjectResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new MigrateAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new MigrateAssessmentProjectPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<MigrateAssessmentProjectResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new MigrateAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new MigrateAssessmentProjectPatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<MigrateAssessmentProjectResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new MigrateAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new MigrateAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AssessmentProjectsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-03-15</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="MigrateAssessmentProjectResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<MigrateAssessmentProjectResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _migrateAssessmentProjectAssessmentProjectsOperationsClientDiagnostics.CreateScope("MigrateAssessmentProjectResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _migrateAssessmentProjectAssessmentProjectsOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new MigrateAssessmentProjectResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new MigrateAssessmentProjectPatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
