// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class SqlAssessmentV2IaasSuitabilityDetails : IUtf8JsonSerializable, IJsonModel<SqlAssessmentV2IaasSuitabilityDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SqlAssessmentV2IaasSuitabilityDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SqlAssessmentV2IaasSuitabilityDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SqlAssessmentV2IaasSuitabilityDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(AzureSqlSku))
            {
                writer.WritePropertyName("azureSqlSku"u8);
                writer.WriteObjectValue(AzureSqlSku);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ReplicaAzureSqlSku))
            {
                writer.WritePropertyName("replicaAzureSqlSku"u8);
                writer.WriteStartArray();
                foreach (var item in ReplicaAzureSqlSku)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(SharedResources))
            {
                writer.WritePropertyName("sharedResources"u8);
                writer.WriteObjectValue(SharedResources);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyComputeCost))
            {
                writer.WritePropertyName("monthlyComputeCost"u8);
                writer.WriteNumberValue(MonthlyComputeCost.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MonthlyStorageCost))
            {
                writer.WritePropertyName("monthlyStorageCost"u8);
                writer.WriteNumberValue(MonthlyStorageCost.Value);
            }
            if (Optional.IsCollectionDefined(CostComponents))
            {
                writer.WritePropertyName("costComponents"u8);
                writer.WriteStartArray();
                foreach (var item in CostComponents)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(SecuritySuitability))
            {
                writer.WritePropertyName("securitySuitability"u8);
                writer.WriteStringValue(SecuritySuitability.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ShouldProvisionReplicas))
            {
                writer.WritePropertyName("shouldProvisionReplicas"u8);
                writer.WriteBooleanValue(ShouldProvisionReplicas.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SkuReplicationMode))
            {
                writer.WritePropertyName("skuReplicationMode"u8);
                writer.WriteStringValue(SkuReplicationMode.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(MigrationGuidelines))
            {
                writer.WritePropertyName("migrationGuidelines"u8);
                writer.WriteStartArray();
                foreach (var item in MigrationGuidelines)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(RecommendationReasonings))
            {
                writer.WritePropertyName("recommendationReasonings"u8);
                writer.WriteStartArray();
                foreach (var item in RecommendationReasonings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationTargetPlatform))
            {
                writer.WritePropertyName("migrationTargetPlatform"u8);
                writer.WriteStringValue(MigrationTargetPlatform.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Suitability))
            {
                writer.WritePropertyName("suitability"u8);
                writer.WriteStringValue(Suitability.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(MigrationIssues))
            {
                writer.WritePropertyName("migrationIssues"u8);
                writer.WriteStartArray();
                foreach (var item in MigrationIssues)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SqlAssessmentV2IaasSuitabilityDetails IJsonModel<SqlAssessmentV2IaasSuitabilityDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SqlAssessmentV2IaasSuitabilityDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlAssessmentV2IaasSuitabilityDetails(document.RootElement, options);
        }

        internal static SqlAssessmentV2IaasSuitabilityDetails DeserializeSqlAssessmentV2IaasSuitabilityDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AzureSqlIaasSkuDto> azureSqlSku = default;
            Optional<IReadOnlyList<AzureSqlIaasSkuDto>> replicaAzureSqlSku = default;
            Optional<SharedResourcesDto> sharedResources = default;
            Optional<double> monthlyComputeCost = default;
            Optional<double> monthlyStorageCost = default;
            Optional<IReadOnlyList<CostComponent>> costComponents = default;
            Optional<MigrateCloudSuitability> securitySuitability = default;
            Optional<bool> shouldProvisionReplicas = default;
            Optional<SkuReplicationMode> skuReplicationMode = default;
            Optional<IReadOnlyList<SqlMigrationGuideline>> migrationGuidelines = default;
            Optional<IReadOnlyList<SqlRecommendationReasoning>> recommendationReasonings = default;
            Optional<MigrateTargetType> migrationTargetPlatform = default;
            Optional<MigrateCloudSuitability> suitability = default;
            Optional<IReadOnlyList<SqlAssessmentMigrationIssue>> migrationIssues = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azureSqlSku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureSqlSku = AzureSqlIaasSkuDto.DeserializeAzureSqlIaasSkuDto(property.Value);
                    continue;
                }
                if (property.NameEquals("replicaAzureSqlSku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureSqlIaasSkuDto> array = new List<AzureSqlIaasSkuDto>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AzureSqlIaasSkuDto.DeserializeAzureSqlIaasSkuDto(item));
                    }
                    replicaAzureSqlSku = array;
                    continue;
                }
                if (property.NameEquals("sharedResources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sharedResources = SharedResourcesDto.DeserializeSharedResourcesDto(property.Value);
                    continue;
                }
                if (property.NameEquals("monthlyComputeCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthlyComputeCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStorageCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthlyStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("costComponents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CostComponent> array = new List<CostComponent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CostComponent.DeserializeCostComponent(item));
                    }
                    costComponents = array;
                    continue;
                }
                if (property.NameEquals("securitySuitability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    securitySuitability = new MigrateCloudSuitability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("shouldProvisionReplicas"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shouldProvisionReplicas = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("skuReplicationMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    skuReplicationMode = new SkuReplicationMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("migrationGuidelines"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SqlMigrationGuideline> array = new List<SqlMigrationGuideline>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlMigrationGuideline.DeserializeSqlMigrationGuideline(item));
                    }
                    migrationGuidelines = array;
                    continue;
                }
                if (property.NameEquals("recommendationReasonings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SqlRecommendationReasoning> array = new List<SqlRecommendationReasoning>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlRecommendationReasoning.DeserializeSqlRecommendationReasoning(item));
                    }
                    recommendationReasonings = array;
                    continue;
                }
                if (property.NameEquals("migrationTargetPlatform"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationTargetPlatform = new MigrateTargetType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    suitability = new MigrateCloudSuitability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("migrationIssues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SqlAssessmentMigrationIssue> array = new List<SqlAssessmentMigrationIssue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlAssessmentMigrationIssue.DeserializeSqlAssessmentMigrationIssue(item));
                    }
                    migrationIssues = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SqlAssessmentV2IaasSuitabilityDetails(azureSqlSku.Value, Optional.ToList(replicaAzureSqlSku), sharedResources.Value, Optional.ToNullable(monthlyComputeCost), Optional.ToNullable(monthlyStorageCost), Optional.ToList(costComponents), Optional.ToNullable(securitySuitability), Optional.ToNullable(shouldProvisionReplicas), Optional.ToNullable(skuReplicationMode), Optional.ToList(migrationGuidelines), Optional.ToList(recommendationReasonings), Optional.ToNullable(migrationTargetPlatform), Optional.ToNullable(suitability), Optional.ToList(migrationIssues), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SqlAssessmentV2IaasSuitabilityDetails)} does not support '{options.Format}' format.");
            }
        }

        SqlAssessmentV2IaasSuitabilityDetails IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSqlAssessmentV2IaasSuitabilityDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SqlAssessmentV2IaasSuitabilityDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SqlAssessmentV2IaasSuitabilityDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
