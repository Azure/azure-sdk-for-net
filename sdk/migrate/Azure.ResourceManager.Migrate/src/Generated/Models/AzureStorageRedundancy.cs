// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Storage Redundancy type offered by Azure. </summary>
    public readonly partial struct AzureStorageRedundancy : IEquatable<AzureStorageRedundancy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureStorageRedundancy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureStorageRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string LocallyRedundantValue = "LocallyRedundant";
        private const string ZoneRedundantValue = "ZoneRedundant";
        private const string GeoRedundantValue = "GeoRedundant";
        private const string ReadAccessGeoRedundantValue = "ReadAccessGeoRedundant";

        /// <summary> Unknown. </summary>
        public static AzureStorageRedundancy Unknown { get; } = new AzureStorageRedundancy(UnknownValue);
        /// <summary> LocallyRedundant. </summary>
        public static AzureStorageRedundancy LocallyRedundant { get; } = new AzureStorageRedundancy(LocallyRedundantValue);
        /// <summary> ZoneRedundant. </summary>
        public static AzureStorageRedundancy ZoneRedundant { get; } = new AzureStorageRedundancy(ZoneRedundantValue);
        /// <summary> GeoRedundant. </summary>
        public static AzureStorageRedundancy GeoRedundant { get; } = new AzureStorageRedundancy(GeoRedundantValue);
        /// <summary> ReadAccessGeoRedundant. </summary>
        public static AzureStorageRedundancy ReadAccessGeoRedundant { get; } = new AzureStorageRedundancy(ReadAccessGeoRedundantValue);
        /// <summary> Determines if two <see cref="AzureStorageRedundancy"/> values are the same. </summary>
        public static bool operator ==(AzureStorageRedundancy left, AzureStorageRedundancy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureStorageRedundancy"/> values are not the same. </summary>
        public static bool operator !=(AzureStorageRedundancy left, AzureStorageRedundancy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AzureStorageRedundancy"/>. </summary>
        public static implicit operator AzureStorageRedundancy(string value) => new AzureStorageRedundancy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureStorageRedundancy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureStorageRedundancy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
