// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Percentile of performance data used to recommend Azure size. </summary>
    public readonly partial struct Percentile : IEquatable<Percentile>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Percentile"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Percentile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Percentile50Value = "Percentile50";
        private const string Percentile90Value = "Percentile90";
        private const string Percentile95Value = "Percentile95";
        private const string Percentile99Value = "Percentile99";

        /// <summary> Percentile50. </summary>
        public static Percentile Percentile50 { get; } = new Percentile(Percentile50Value);
        /// <summary> Percentile90. </summary>
        public static Percentile Percentile90 { get; } = new Percentile(Percentile90Value);
        /// <summary> Percentile95. </summary>
        public static Percentile Percentile95 { get; } = new Percentile(Percentile95Value);
        /// <summary> Percentile99. </summary>
        public static Percentile Percentile99 { get; } = new Percentile(Percentile99Value);
        /// <summary> Determines if two <see cref="Percentile"/> values are the same. </summary>
        public static bool operator ==(Percentile left, Percentile right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Percentile"/> values are not the same. </summary>
        public static bool operator !=(Percentile left, Percentile right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Percentile"/>. </summary>
        public static implicit operator Percentile(string value) => new Percentile(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Percentile other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Percentile other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
