// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The RecommendedSuitability. </summary>
    public readonly partial struct RecommendedSuitability : IEquatable<RecommendedSuitability>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecommendedSuitability"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecommendedSuitability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string SuitableForSqlDBValue = "SuitableForSqlDB";
        private const string SuitableForSqlMIValue = "SuitableForSqlMI";
        private const string SuitableForVmValue = "SuitableForVM";
        private const string PotentiallySuitableForVmValue = "PotentiallySuitableForVM";
        private const string ReadinessUnknownValue = "ReadinessUnknown";
        private const string NotSuitableValue = "NotSuitable";
        private const string SuitableForSqlVmValue = "SuitableForSqlVM";
        private const string ConditionallySuitableForSqlDBValue = "ConditionallySuitableForSqlDB";
        private const string ConditionallySuitableForSqlMIValue = "ConditionallySuitableForSqlMI";
        private const string ConditionallySuitableForVmValue = "ConditionallySuitableForVM";
        private const string ConditionallySuitableForSqlVmValue = "ConditionallySuitableForSqlVM";

        /// <summary> Unknown. </summary>
        public static RecommendedSuitability Unknown { get; } = new RecommendedSuitability(UnknownValue);
        /// <summary> SuitableForSqlDB. </summary>
        public static RecommendedSuitability SuitableForSqlDB { get; } = new RecommendedSuitability(SuitableForSqlDBValue);
        /// <summary> SuitableForSqlMI. </summary>
        public static RecommendedSuitability SuitableForSqlMI { get; } = new RecommendedSuitability(SuitableForSqlMIValue);
        /// <summary> SuitableForVM. </summary>
        public static RecommendedSuitability SuitableForVm { get; } = new RecommendedSuitability(SuitableForVmValue);
        /// <summary> PotentiallySuitableForVM. </summary>
        public static RecommendedSuitability PotentiallySuitableForVm { get; } = new RecommendedSuitability(PotentiallySuitableForVmValue);
        /// <summary> ReadinessUnknown. </summary>
        public static RecommendedSuitability ReadinessUnknown { get; } = new RecommendedSuitability(ReadinessUnknownValue);
        /// <summary> NotSuitable. </summary>
        public static RecommendedSuitability NotSuitable { get; } = new RecommendedSuitability(NotSuitableValue);
        /// <summary> SuitableForSqlVM. </summary>
        public static RecommendedSuitability SuitableForSqlVm { get; } = new RecommendedSuitability(SuitableForSqlVmValue);
        /// <summary> ConditionallySuitableForSqlDB. </summary>
        public static RecommendedSuitability ConditionallySuitableForSqlDB { get; } = new RecommendedSuitability(ConditionallySuitableForSqlDBValue);
        /// <summary> ConditionallySuitableForSqlMI. </summary>
        public static RecommendedSuitability ConditionallySuitableForSqlMI { get; } = new RecommendedSuitability(ConditionallySuitableForSqlMIValue);
        /// <summary> ConditionallySuitableForVM. </summary>
        public static RecommendedSuitability ConditionallySuitableForVm { get; } = new RecommendedSuitability(ConditionallySuitableForVmValue);
        /// <summary> ConditionallySuitableForSqlVM. </summary>
        public static RecommendedSuitability ConditionallySuitableForSqlVm { get; } = new RecommendedSuitability(ConditionallySuitableForSqlVmValue);
        /// <summary> Determines if two <see cref="RecommendedSuitability"/> values are the same. </summary>
        public static bool operator ==(RecommendedSuitability left, RecommendedSuitability right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecommendedSuitability"/> values are not the same. </summary>
        public static bool operator !=(RecommendedSuitability left, RecommendedSuitability right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RecommendedSuitability"/>. </summary>
        public static implicit operator RecommendedSuitability(string value) => new RecommendedSuitability(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecommendedSuitability other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecommendedSuitability other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
