// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The MigrateHardwareGeneration. </summary>
    public readonly partial struct MigrateHardwareGeneration : IEquatable<MigrateHardwareGeneration>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrateHardwareGeneration"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrateHardwareGeneration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string AutomaticValue = "Automatic";
        private const string Gen5Value = "Gen5";
        private const string Fsv2SeriesValue = "Fsv2_series";
        private const string MSeriesValue = "M_series";
        private const string DCSeriesValue = "DC_series";

        /// <summary> Unknown. </summary>
        public static MigrateHardwareGeneration Unknown { get; } = new MigrateHardwareGeneration(UnknownValue);
        /// <summary> Automatic. </summary>
        public static MigrateHardwareGeneration Automatic { get; } = new MigrateHardwareGeneration(AutomaticValue);
        /// <summary> Gen5. </summary>
        public static MigrateHardwareGeneration Gen5 { get; } = new MigrateHardwareGeneration(Gen5Value);
        /// <summary> Fsv2_series. </summary>
        public static MigrateHardwareGeneration Fsv2Series { get; } = new MigrateHardwareGeneration(Fsv2SeriesValue);
        /// <summary> M_series. </summary>
        public static MigrateHardwareGeneration MSeries { get; } = new MigrateHardwareGeneration(MSeriesValue);
        /// <summary> DC_series. </summary>
        public static MigrateHardwareGeneration DCSeries { get; } = new MigrateHardwareGeneration(DCSeriesValue);
        /// <summary> Determines if two <see cref="MigrateHardwareGeneration"/> values are the same. </summary>
        public static bool operator ==(MigrateHardwareGeneration left, MigrateHardwareGeneration right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrateHardwareGeneration"/> values are not the same. </summary>
        public static bool operator !=(MigrateHardwareGeneration left, MigrateHardwareGeneration right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MigrateHardwareGeneration"/>. </summary>
        public static implicit operator MigrateHardwareGeneration(string value) => new MigrateHardwareGeneration(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrateHardwareGeneration other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrateHardwareGeneration other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
