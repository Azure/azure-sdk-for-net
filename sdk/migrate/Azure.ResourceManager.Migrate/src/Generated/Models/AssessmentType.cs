// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The AssessmentType. </summary>
    public readonly partial struct AssessmentType : IEquatable<AssessmentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string MachineAssessmentValue = "MachineAssessment";
        private const string AvsAssessmentValue = "AvsAssessment";
        private const string SqlAssessmentValue = "SqlAssessment";
        private const string WebAppAssessmentValue = "WebAppAssessment";

        /// <summary> Unknown. </summary>
        public static AssessmentType Unknown { get; } = new AssessmentType(UnknownValue);
        /// <summary> MachineAssessment. </summary>
        public static AssessmentType MachineAssessment { get; } = new AssessmentType(MachineAssessmentValue);
        /// <summary> AvsAssessment. </summary>
        public static AssessmentType AvsAssessment { get; } = new AssessmentType(AvsAssessmentValue);
        /// <summary> SqlAssessment. </summary>
        public static AssessmentType SqlAssessment { get; } = new AssessmentType(SqlAssessmentValue);
        /// <summary> WebAppAssessment. </summary>
        public static AssessmentType WebAppAssessment { get; } = new AssessmentType(WebAppAssessmentValue);
        /// <summary> Determines if two <see cref="AssessmentType"/> values are the same. </summary>
        public static bool operator ==(AssessmentType left, AssessmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentType"/> values are not the same. </summary>
        public static bool operator !=(AssessmentType left, AssessmentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssessmentType"/>. </summary>
        public static implicit operator AssessmentType(string value) => new AssessmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
