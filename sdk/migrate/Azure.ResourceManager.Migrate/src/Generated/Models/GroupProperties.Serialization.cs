// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class GroupProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(GroupType))
            {
                writer.WritePropertyName("groupType");
                writer.WriteStringValue(GroupType);
            }
            writer.WriteEndObject();
        }

        internal static GroupProperties DeserializeGroupProperties(JsonElement element)
        {
            Optional<GroupStatus> groupStatus = default;
            Optional<int> machineCount = default;
            Optional<IReadOnlyList<string>> assessments = default;
            Optional<bool> areAssessmentsRunning = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            Optional<string> groupType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("groupStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    groupStatus = new GroupStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("machineCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    machineCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("assessments"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    assessments = array;
                    continue;
                }
                if (property.NameEquals("areAssessmentsRunning"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    areAssessmentsRunning = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createdTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updatedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("groupType"))
                {
                    groupType = property.Value.GetString();
                    continue;
                }
            }
            return new GroupProperties(Optional.ToNullable(groupStatus), Optional.ToNullable(machineCount), Optional.ToList(assessments), Optional.ToNullable(areAssessmentsRunning), Optional.ToNullable(createdTimestamp), Optional.ToNullable(updatedTimestamp), groupType.Value);
        }
    }
}
