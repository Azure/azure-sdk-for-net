// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> If network adapter is suitable, this explains the reasons and mitigation steps. </summary>
    public readonly partial struct AzureNetworkAdapterSuitabilityExplanation : IEquatable<AzureNetworkAdapterSuitabilityExplanation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureNetworkAdapterSuitabilityExplanation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureNetworkAdapterSuitabilityExplanation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotApplicableValue = "NotApplicable";
        private const string InternalErrorOccurredValue = "InternalErrorOccurred";

        /// <summary> Unknown. </summary>
        public static AzureNetworkAdapterSuitabilityExplanation Unknown { get; } = new AzureNetworkAdapterSuitabilityExplanation(UnknownValue);
        /// <summary> NotApplicable. </summary>
        public static AzureNetworkAdapterSuitabilityExplanation NotApplicable { get; } = new AzureNetworkAdapterSuitabilityExplanation(NotApplicableValue);
        /// <summary> InternalErrorOccurred. </summary>
        public static AzureNetworkAdapterSuitabilityExplanation InternalErrorOccurred { get; } = new AzureNetworkAdapterSuitabilityExplanation(InternalErrorOccurredValue);
        /// <summary> Determines if two <see cref="AzureNetworkAdapterSuitabilityExplanation"/> values are the same. </summary>
        public static bool operator ==(AzureNetworkAdapterSuitabilityExplanation left, AzureNetworkAdapterSuitabilityExplanation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureNetworkAdapterSuitabilityExplanation"/> values are not the same. </summary>
        public static bool operator !=(AzureNetworkAdapterSuitabilityExplanation left, AzureNetworkAdapterSuitabilityExplanation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AzureNetworkAdapterSuitabilityExplanation"/>. </summary>
        public static implicit operator AzureNetworkAdapterSuitabilityExplanation(string value) => new AzureNetworkAdapterSuitabilityExplanation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureNetworkAdapterSuitabilityExplanation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureNetworkAdapterSuitabilityExplanation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
