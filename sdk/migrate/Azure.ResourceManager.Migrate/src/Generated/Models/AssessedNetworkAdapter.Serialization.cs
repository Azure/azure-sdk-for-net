// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class AssessedNetworkAdapter
    {
        internal static AssessedNetworkAdapter DeserializeAssessedNetworkAdapter(JsonElement element)
        {
            Optional<string> macAddress = default;
            Optional<IReadOnlyList<string>> ipAddresses = default;
            Optional<string> displayName = default;
            Optional<double> monthlyBandwidthCosts = default;
            Optional<double> megabytesPerSecondReceived = default;
            Optional<double> megabytesPerSecondTransmitted = default;
            Optional<double> netGigabytesTransmittedPerMonth = default;
            Optional<CloudSuitability> suitability = default;
            Optional<AzureNetworkAdapterSuitabilityExplanation> suitabilityExplanation = default;
            Optional<AzureNetworkAdapterSuitabilityDetail> suitabilityDetail = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("macAddress"))
                {
                    macAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddresses"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipAddresses = array;
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("monthlyBandwidthCosts"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyBandwidthCosts = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("megabytesPerSecondReceived"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    megabytesPerSecondReceived = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("megabytesPerSecondTransmitted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    megabytesPerSecondTransmitted = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("netGigabytesTransmittedPerMonth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    netGigabytesTransmittedPerMonth = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("suitability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitability = new CloudSuitability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityExplanation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitabilityExplanation = new AzureNetworkAdapterSuitabilityExplanation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityDetail"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitabilityDetail = new AzureNetworkAdapterSuitabilityDetail(property.Value.GetString());
                    continue;
                }
            }
            return new AssessedNetworkAdapter(macAddress.Value, Optional.ToList(ipAddresses), displayName.Value, Optional.ToNullable(monthlyBandwidthCosts), Optional.ToNullable(megabytesPerSecondReceived), Optional.ToNullable(megabytesPerSecondTransmitted), Optional.ToNullable(netGigabytesTransmittedPerMonth), Optional.ToNullable(suitability), Optional.ToNullable(suitabilityExplanation), Optional.ToNullable(suitabilityDetail));
        }
    }
}
