// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Currency for Azure. </summary>
    public readonly partial struct AzureCurrency : IEquatable<AzureCurrency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureCurrency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureCurrency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string USDValue = "USD";
        private const string DKKValue = "DKK";
        private const string CADValue = "CAD";
        private const string IDRValue = "IDR";
        private const string JPYValue = "JPY";
        private const string KRWValue = "KRW";
        private const string NZDValue = "NZD";
        private const string NOKValue = "NOK";
        private const string RUBValue = "RUB";
        private const string SARValue = "SAR";
        private const string ZARValue = "ZAR";
        private const string SEKValue = "SEK";
        private const string TRYValue = "TRY";
        private const string GBPValue = "GBP";
        private const string MXNValue = "MXN";
        private const string MYRValue = "MYR";
        private const string INRValue = "INR";
        private const string HKDValue = "HKD";
        private const string BRLValue = "BRL";
        private const string TWDValue = "TWD";
        private const string EURValue = "EUR";
        private const string CHFValue = "CHF";
        private const string ARSValue = "ARS";
        private const string AUDValue = "AUD";
        private const string CNYValue = "CNY";

        /// <summary> Unknown. </summary>
        public static AzureCurrency Unknown { get; } = new AzureCurrency(UnknownValue);
        /// <summary> USD. </summary>
        public static AzureCurrency USD { get; } = new AzureCurrency(USDValue);
        /// <summary> DKK. </summary>
        public static AzureCurrency DKK { get; } = new AzureCurrency(DKKValue);
        /// <summary> CAD. </summary>
        public static AzureCurrency CAD { get; } = new AzureCurrency(CADValue);
        /// <summary> IDR. </summary>
        public static AzureCurrency IDR { get; } = new AzureCurrency(IDRValue);
        /// <summary> JPY. </summary>
        public static AzureCurrency JPY { get; } = new AzureCurrency(JPYValue);
        /// <summary> KRW. </summary>
        public static AzureCurrency KRW { get; } = new AzureCurrency(KRWValue);
        /// <summary> NZD. </summary>
        public static AzureCurrency NZD { get; } = new AzureCurrency(NZDValue);
        /// <summary> NOK. </summary>
        public static AzureCurrency NOK { get; } = new AzureCurrency(NOKValue);
        /// <summary> RUB. </summary>
        public static AzureCurrency RUB { get; } = new AzureCurrency(RUBValue);
        /// <summary> SAR. </summary>
        public static AzureCurrency SAR { get; } = new AzureCurrency(SARValue);
        /// <summary> ZAR. </summary>
        public static AzureCurrency ZAR { get; } = new AzureCurrency(ZARValue);
        /// <summary> SEK. </summary>
        public static AzureCurrency SEK { get; } = new AzureCurrency(SEKValue);
        /// <summary> TRY. </summary>
        public static AzureCurrency TRY { get; } = new AzureCurrency(TRYValue);
        /// <summary> GBP. </summary>
        public static AzureCurrency GBP { get; } = new AzureCurrency(GBPValue);
        /// <summary> MXN. </summary>
        public static AzureCurrency MXN { get; } = new AzureCurrency(MXNValue);
        /// <summary> MYR. </summary>
        public static AzureCurrency MYR { get; } = new AzureCurrency(MYRValue);
        /// <summary> INR. </summary>
        public static AzureCurrency INR { get; } = new AzureCurrency(INRValue);
        /// <summary> HKD. </summary>
        public static AzureCurrency HKD { get; } = new AzureCurrency(HKDValue);
        /// <summary> BRL. </summary>
        public static AzureCurrency BRL { get; } = new AzureCurrency(BRLValue);
        /// <summary> TWD. </summary>
        public static AzureCurrency TWD { get; } = new AzureCurrency(TWDValue);
        /// <summary> EUR. </summary>
        public static AzureCurrency EUR { get; } = new AzureCurrency(EURValue);
        /// <summary> CHF. </summary>
        public static AzureCurrency CHF { get; } = new AzureCurrency(CHFValue);
        /// <summary> ARS. </summary>
        public static AzureCurrency ARS { get; } = new AzureCurrency(ARSValue);
        /// <summary> AUD. </summary>
        public static AzureCurrency AUD { get; } = new AzureCurrency(AUDValue);
        /// <summary> CNY. </summary>
        public static AzureCurrency CNY { get; } = new AzureCurrency(CNYValue);
        /// <summary> Determines if two <see cref="AzureCurrency"/> values are the same. </summary>
        public static bool operator ==(AzureCurrency left, AzureCurrency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureCurrency"/> values are not the same. </summary>
        public static bool operator !=(AzureCurrency left, AzureCurrency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AzureCurrency"/>. </summary>
        public static implicit operator AzureCurrency(string value) => new AzureCurrency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureCurrency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureCurrency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
