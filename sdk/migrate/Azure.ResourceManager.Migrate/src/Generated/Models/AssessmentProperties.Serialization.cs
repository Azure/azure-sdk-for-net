// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class AssessmentProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("azureLocation");
            writer.WriteStringValue(AzureLocation.ToString());
            writer.WritePropertyName("azureOfferCode");
            writer.WriteStringValue(AzureOfferCode.ToString());
            writer.WritePropertyName("azurePricingTier");
            writer.WriteStringValue(AzurePricingTier.ToString());
            writer.WritePropertyName("azureStorageRedundancy");
            writer.WriteStringValue(AzureStorageRedundancy.ToString());
            writer.WritePropertyName("scalingFactor");
            writer.WriteNumberValue(ScalingFactor);
            writer.WritePropertyName("percentile");
            writer.WriteStringValue(Percentile.ToString());
            writer.WritePropertyName("timeRange");
            writer.WriteStringValue(TimeRange.ToString());
            writer.WritePropertyName("stage");
            writer.WriteStringValue(Stage.ToString());
            writer.WritePropertyName("currency");
            writer.WriteStringValue(Currency.ToString());
            writer.WritePropertyName("azureHybridUseBenefit");
            writer.WriteStringValue(AzureHybridUseBenefit.ToString());
            writer.WritePropertyName("discountPercentage");
            writer.WriteNumberValue(DiscountPercentage);
            writer.WritePropertyName("sizingCriterion");
            writer.WriteStringValue(SizingCriterion.ToString());
            writer.WritePropertyName("reservedInstance");
            writer.WriteStringValue(ReservedInstance.ToString());
            writer.WritePropertyName("azureVmFamilies");
            writer.WriteStartArray();
            foreach (var item in AzureVmFamilies)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            writer.WritePropertyName("azureDiskType");
            writer.WriteStringValue(AzureDiskType.ToString());
            writer.WritePropertyName("vmUptime");
            writer.WriteObjectValue(VmUptime);
            writer.WriteEndObject();
        }

        internal static AssessmentProperties DeserializeAssessmentProperties(JsonElement element)
        {
            AzureLocation azureLocation = default;
            AzureOfferCode azureOfferCode = default;
            Optional<string> eaSubscriptionId = default;
            AzurePricingTier azurePricingTier = default;
            AzureStorageRedundancy azureStorageRedundancy = default;
            double scalingFactor = default;
            Percentile percentile = default;
            TimeRange timeRange = default;
            Optional<DateTimeOffset> perfDataStartTime = default;
            Optional<DateTimeOffset> perfDataEndTime = default;
            AssessmentStage stage = default;
            Currency currency = default;
            AzureHybridUseBenefit azureHybridUseBenefit = default;
            double discountPercentage = default;
            Optional<double?> confidenceRatingInPercentage = default;
            AssessmentSizingCriterion sizingCriterion = default;
            ReservedInstance reservedInstance = default;
            IList<AzureVmFamily> azureVmFamilies = default;
            AzureDiskType azureDiskType = default;
            VmUptime vmUptime = default;
            Optional<DateTimeOffset> pricesTimestamp = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            Optional<double> monthlyComputeCost = default;
            Optional<double> monthlyBandwidthCost = default;
            Optional<double> monthlyStorageCost = default;
            Optional<double> monthlyPremiumStorageCost = default;
            Optional<double> monthlyStandardSSDStorageCost = default;
            Optional<AssessmentStatus> status = default;
            Optional<int> numberOfMachines = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azureLocation"))
                {
                    azureLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureOfferCode"))
                {
                    azureOfferCode = new AzureOfferCode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("eaSubscriptionId"))
                {
                    eaSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("azurePricingTier"))
                {
                    azurePricingTier = new AzurePricingTier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureStorageRedundancy"))
                {
                    azureStorageRedundancy = new AzureStorageRedundancy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scalingFactor"))
                {
                    scalingFactor = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("percentile"))
                {
                    percentile = new Percentile(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timeRange"))
                {
                    timeRange = new TimeRange(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("perfDataStartTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    perfDataStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("perfDataEndTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    perfDataEndTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("stage"))
                {
                    stage = new AssessmentStage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("currency"))
                {
                    currency = new Currency(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureHybridUseBenefit"))
                {
                    azureHybridUseBenefit = new AzureHybridUseBenefit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("discountPercentage"))
                {
                    discountPercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("confidenceRatingInPercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        confidenceRatingInPercentage = null;
                        continue;
                    }
                    confidenceRatingInPercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("sizingCriterion"))
                {
                    sizingCriterion = new AssessmentSizingCriterion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reservedInstance"))
                {
                    reservedInstance = new ReservedInstance(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("azureVmFamilies"))
                {
                    List<AzureVmFamily> array = new List<AzureVmFamily>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureVmFamily(item.GetString()));
                    }
                    azureVmFamilies = array;
                    continue;
                }
                if (property.NameEquals("azureDiskType"))
                {
                    azureDiskType = new AzureDiskType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vmUptime"))
                {
                    vmUptime = VmUptime.DeserializeVmUptime(property.Value);
                    continue;
                }
                if (property.NameEquals("pricesTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pricesTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("createdTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updatedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("monthlyComputeCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyComputeCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyBandwidthCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyBandwidthCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyPremiumStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyPremiumStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStandardSSDStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyStandardSSDStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new AssessmentStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("numberOfMachines"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfMachines = property.Value.GetInt32();
                    continue;
                }
            }
            return new AssessmentProperties(azureLocation, azureOfferCode, eaSubscriptionId.Value, azurePricingTier, azureStorageRedundancy, scalingFactor, percentile, timeRange, Optional.ToNullable(perfDataStartTime), Optional.ToNullable(perfDataEndTime), stage, currency, azureHybridUseBenefit, discountPercentage, Optional.ToNullable(confidenceRatingInPercentage), sizingCriterion, reservedInstance, azureVmFamilies, azureDiskType, vmUptime, Optional.ToNullable(pricesTimestamp), Optional.ToNullable(createdTimestamp), Optional.ToNullable(updatedTimestamp), Optional.ToNullable(monthlyComputeCost), Optional.ToNullable(monthlyBandwidthCost), Optional.ToNullable(monthlyStorageCost), Optional.ToNullable(monthlyPremiumStorageCost), Optional.ToNullable(monthlyStandardSSDStorageCost), Optional.ToNullable(status), Optional.ToNullable(numberOfMachines));
        }
    }
}
