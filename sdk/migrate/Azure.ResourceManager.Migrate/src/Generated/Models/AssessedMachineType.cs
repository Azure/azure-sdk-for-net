// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The AssessedMachineType. </summary>
    public readonly partial struct AssessedMachineType : IEquatable<AssessedMachineType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessedMachineType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessedMachineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string AssessedMachineValue = "AssessedMachine";
        private const string AvsAssessedMachineValue = "AvsAssessedMachine";
        private const string SqlAssessedMachineValue = "SqlAssessedMachine";

        /// <summary> Unknown. </summary>
        public static AssessedMachineType Unknown { get; } = new AssessedMachineType(UnknownValue);
        /// <summary> AssessedMachine. </summary>
        public static AssessedMachineType AssessedMachine { get; } = new AssessedMachineType(AssessedMachineValue);
        /// <summary> AvsAssessedMachine. </summary>
        public static AssessedMachineType AvsAssessedMachine { get; } = new AssessedMachineType(AvsAssessedMachineValue);
        /// <summary> SqlAssessedMachine. </summary>
        public static AssessedMachineType SqlAssessedMachine { get; } = new AssessedMachineType(SqlAssessedMachineValue);
        /// <summary> Determines if two <see cref="AssessedMachineType"/> values are the same. </summary>
        public static bool operator ==(AssessedMachineType left, AssessedMachineType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessedMachineType"/> values are not the same. </summary>
        public static bool operator !=(AssessedMachineType left, AssessedMachineType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssessedMachineType"/>. </summary>
        public static implicit operator AssessedMachineType(string value) => new AssessedMachineType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessedMachineType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessedMachineType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
