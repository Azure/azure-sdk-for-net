// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The MigrateOSLicense. </summary>
    public readonly partial struct MigrateOSLicense : IEquatable<MigrateOSLicense>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrateOSLicense"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrateOSLicense(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string YesValue = "Yes";
        private const string NoValue = "No";

        /// <summary> Unknown. </summary>
        public static MigrateOSLicense Unknown { get; } = new MigrateOSLicense(UnknownValue);
        /// <summary> Yes. </summary>
        public static MigrateOSLicense Yes { get; } = new MigrateOSLicense(YesValue);
        /// <summary> No. </summary>
        public static MigrateOSLicense No { get; } = new MigrateOSLicense(NoValue);
        /// <summary> Determines if two <see cref="MigrateOSLicense"/> values are the same. </summary>
        public static bool operator ==(MigrateOSLicense left, MigrateOSLicense right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrateOSLicense"/> values are not the same. </summary>
        public static bool operator !=(MigrateOSLicense left, MigrateOSLicense right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MigrateOSLicense"/>. </summary>
        public static implicit operator MigrateOSLicense(string value) => new MigrateOSLicense(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrateOSLicense other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrateOSLicense other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
