// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Currency to report prices in. </summary>
    public readonly partial struct Currency : IEquatable<Currency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Currency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Currency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string USDValue = "USD";
        private const string DKKValue = "DKK";
        private const string CADValue = "CAD";
        private const string IdRValue = "IDR";
        private const string JPYValue = "JPY";
        private const string KRWValue = "KRW";
        private const string NZDValue = "NZD";
        private const string NOKValue = "NOK";
        private const string RUBValue = "RUB";
        private const string SARValue = "SAR";
        private const string ZARValue = "ZAR";
        private const string SEKValue = "SEK";
        private const string TRYValue = "TRY";
        private const string GBPValue = "GBP";
        private const string MXNValue = "MXN";
        private const string MYRValue = "MYR";
        private const string INRValue = "INR";
        private const string HKDValue = "HKD";
        private const string BRLValue = "BRL";
        private const string TWDValue = "TWD";
        private const string EURValue = "EUR";
        private const string CHFValue = "CHF";
        private const string ARSValue = "ARS";
        private const string AUDValue = "AUD";
        private const string CNYValue = "CNY";

        /// <summary> Unknown. </summary>
        public static Currency Unknown { get; } = new Currency(UnknownValue);
        /// <summary> USD. </summary>
        public static Currency USD { get; } = new Currency(USDValue);
        /// <summary> DKK. </summary>
        public static Currency DKK { get; } = new Currency(DKKValue);
        /// <summary> CAD. </summary>
        public static Currency CAD { get; } = new Currency(CADValue);
        /// <summary> IDR. </summary>
        public static Currency IdR { get; } = new Currency(IdRValue);
        /// <summary> JPY. </summary>
        public static Currency JPY { get; } = new Currency(JPYValue);
        /// <summary> KRW. </summary>
        public static Currency KRW { get; } = new Currency(KRWValue);
        /// <summary> NZD. </summary>
        public static Currency NZD { get; } = new Currency(NZDValue);
        /// <summary> NOK. </summary>
        public static Currency NOK { get; } = new Currency(NOKValue);
        /// <summary> RUB. </summary>
        public static Currency RUB { get; } = new Currency(RUBValue);
        /// <summary> SAR. </summary>
        public static Currency SAR { get; } = new Currency(SARValue);
        /// <summary> ZAR. </summary>
        public static Currency ZAR { get; } = new Currency(ZARValue);
        /// <summary> SEK. </summary>
        public static Currency SEK { get; } = new Currency(SEKValue);
        /// <summary> TRY. </summary>
        public static Currency TRY { get; } = new Currency(TRYValue);
        /// <summary> GBP. </summary>
        public static Currency GBP { get; } = new Currency(GBPValue);
        /// <summary> MXN. </summary>
        public static Currency MXN { get; } = new Currency(MXNValue);
        /// <summary> MYR. </summary>
        public static Currency MYR { get; } = new Currency(MYRValue);
        /// <summary> INR. </summary>
        public static Currency INR { get; } = new Currency(INRValue);
        /// <summary> HKD. </summary>
        public static Currency HKD { get; } = new Currency(HKDValue);
        /// <summary> BRL. </summary>
        public static Currency BRL { get; } = new Currency(BRLValue);
        /// <summary> TWD. </summary>
        public static Currency TWD { get; } = new Currency(TWDValue);
        /// <summary> EUR. </summary>
        public static Currency EUR { get; } = new Currency(EURValue);
        /// <summary> CHF. </summary>
        public static Currency CHF { get; } = new Currency(CHFValue);
        /// <summary> ARS. </summary>
        public static Currency ARS { get; } = new Currency(ARSValue);
        /// <summary> AUD. </summary>
        public static Currency AUD { get; } = new Currency(AUDValue);
        /// <summary> CNY. </summary>
        public static Currency CNY { get; } = new Currency(CNYValue);
        /// <summary> Determines if two <see cref="Currency"/> values are the same. </summary>
        public static bool operator ==(Currency left, Currency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Currency"/> values are not the same. </summary>
        public static bool operator !=(Currency left, Currency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Currency"/>. </summary>
        public static implicit operator Currency(string value) => new Currency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Currency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Currency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
