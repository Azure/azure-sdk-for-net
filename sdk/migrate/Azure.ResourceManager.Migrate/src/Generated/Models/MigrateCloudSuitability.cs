// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Cloud Suitability for Azure. </summary>
    public readonly partial struct MigrateCloudSuitability : IEquatable<MigrateCloudSuitability>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MigrateCloudSuitability"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MigrateCloudSuitability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotSuitableValue = "NotSuitable";
        private const string SuitableValue = "Suitable";
        private const string ConditionallySuitableValue = "ConditionallySuitable";
        private const string ReadinessUnknownValue = "ReadinessUnknown";

        /// <summary> Unknown. Indicates missing data. </summary>
        public static MigrateCloudSuitability Unknown { get; } = new MigrateCloudSuitability(UnknownValue);
        /// <summary> Not Suitable for Azure. </summary>
        public static MigrateCloudSuitability NotSuitable { get; } = new MigrateCloudSuitability(NotSuitableValue);
        /// <summary> Suitable for Azure. </summary>
        public static MigrateCloudSuitability Suitable { get; } = new MigrateCloudSuitability(SuitableValue);
        /// <summary> Conditionally Suitable for Azure. </summary>
        public static MigrateCloudSuitability ConditionallySuitable { get; } = new MigrateCloudSuitability(ConditionallySuitableValue);
        /// <summary> Unknown Readiness for Azure. </summary>
        public static MigrateCloudSuitability ReadinessUnknown { get; } = new MigrateCloudSuitability(ReadinessUnknownValue);
        /// <summary> Determines if two <see cref="MigrateCloudSuitability"/> values are the same. </summary>
        public static bool operator ==(MigrateCloudSuitability left, MigrateCloudSuitability right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MigrateCloudSuitability"/> values are not the same. </summary>
        public static bool operator !=(MigrateCloudSuitability left, MigrateCloudSuitability right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MigrateCloudSuitability"/>. </summary>
        public static implicit operator MigrateCloudSuitability(string value) => new MigrateCloudSuitability(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MigrateCloudSuitability other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MigrateCloudSuitability other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
