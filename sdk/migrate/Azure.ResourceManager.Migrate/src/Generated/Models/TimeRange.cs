// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> Time range of performance data used to recommend a size. </summary>
    public readonly partial struct TimeRange : IEquatable<TimeRange>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TimeRange"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TimeRange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DayValue = "Day";
        private const string WeekValue = "Week";
        private const string MonthValue = "Month";
        private const string CustomValue = "Custom";

        /// <summary> Day. </summary>
        public static TimeRange Day { get; } = new TimeRange(DayValue);
        /// <summary> Week. </summary>
        public static TimeRange Week { get; } = new TimeRange(WeekValue);
        /// <summary> Month. </summary>
        public static TimeRange Month { get; } = new TimeRange(MonthValue);
        /// <summary> Custom. </summary>
        public static TimeRange Custom { get; } = new TimeRange(CustomValue);
        /// <summary> Determines if two <see cref="TimeRange"/> values are the same. </summary>
        public static bool operator ==(TimeRange left, TimeRange right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TimeRange"/> values are not the same. </summary>
        public static bool operator !=(TimeRange left, TimeRange right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TimeRange"/>. </summary>
        public static implicit operator TimeRange(string value) => new TimeRange(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TimeRange other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TimeRange other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
