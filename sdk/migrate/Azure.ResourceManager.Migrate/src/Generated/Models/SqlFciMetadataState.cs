// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> The SqlFciMetadataState. </summary>
    public readonly partial struct SqlFciMetadataState : IEquatable<SqlFciMetadataState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SqlFciMetadataState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SqlFciMetadataState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string InheritedValue = "Inherited";
        private const string InitializingValue = "Initializing";
        private const string OnlineValue = "Online";
        private const string OfflineValue = "Offline";
        private const string FailedValue = "Failed";
        private const string PendingValue = "Pending";
        private const string OnlinePendingValue = "OnlinePending";
        private const string OfflinePendingValue = "OfflinePending";

        /// <summary> Unknown. </summary>
        public static SqlFciMetadataState Unknown { get; } = new SqlFciMetadataState(UnknownValue);
        /// <summary> Inherited. </summary>
        public static SqlFciMetadataState Inherited { get; } = new SqlFciMetadataState(InheritedValue);
        /// <summary> Initializing. </summary>
        public static SqlFciMetadataState Initializing { get; } = new SqlFciMetadataState(InitializingValue);
        /// <summary> Online. </summary>
        public static SqlFciMetadataState Online { get; } = new SqlFciMetadataState(OnlineValue);
        /// <summary> Offline. </summary>
        public static SqlFciMetadataState Offline { get; } = new SqlFciMetadataState(OfflineValue);
        /// <summary> Failed. </summary>
        public static SqlFciMetadataState Failed { get; } = new SqlFciMetadataState(FailedValue);
        /// <summary> Pending. </summary>
        public static SqlFciMetadataState Pending { get; } = new SqlFciMetadataState(PendingValue);
        /// <summary> OnlinePending. </summary>
        public static SqlFciMetadataState OnlinePending { get; } = new SqlFciMetadataState(OnlinePendingValue);
        /// <summary> OfflinePending. </summary>
        public static SqlFciMetadataState OfflinePending { get; } = new SqlFciMetadataState(OfflinePendingValue);
        /// <summary> Determines if two <see cref="SqlFciMetadataState"/> values are the same. </summary>
        public static bool operator ==(SqlFciMetadataState left, SqlFciMetadataState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SqlFciMetadataState"/> values are not the same. </summary>
        public static bool operator !=(SqlFciMetadataState left, SqlFciMetadataState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SqlFciMetadataState"/>. </summary>
        public static implicit operator SqlFciMetadataState(string value) => new SqlFciMetadataState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SqlFciMetadataState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SqlFciMetadataState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
