// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    public partial class MigrateMachineData : IUtf8JsonSerializable, IJsonModel<MigrateMachineData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrateMachineData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MigrateMachineData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateMachineData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrateMachineData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(WorkloadSummary))
            {
                writer.WritePropertyName("workloadSummary"u8);
                writer.WriteObjectValue(WorkloadSummary);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(HostProcessor))
            {
                writer.WritePropertyName("hostProcessor"u8);
                writer.WriteObjectValue(HostProcessor);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductSupportStatus))
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus);
            }
            if (options.Format != "W" && Optional.IsDefined(DiscoveryMachineArmId))
            {
                writer.WritePropertyName("discoveryMachineArmId"u8);
                writer.WriteStringValue(DiscoveryMachineArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(DatacenterManagementServerArmId))
            {
                writer.WritePropertyName("datacenterManagementServerArmId"u8);
                writer.WriteStringValue(DatacenterManagementServerArmId);
            }
            if (options.Format != "W" && Optional.IsDefined(DatacenterManagementServerName))
            {
                writer.WritePropertyName("datacenterManagementServerName"u8);
                writer.WriteStringValue(DatacenterManagementServerName);
            }
            if (options.Format != "W" && Optional.IsDefined(BootType))
            {
                writer.WritePropertyName("bootType"u8);
                writer.WriteStringValue(BootType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(MegabytesOfMemory))
            {
                writer.WritePropertyName("megabytesOfMemory"u8);
                writer.WriteNumberValue(MegabytesOfMemory.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfCores))
            {
                writer.WritePropertyName("numberOfCores"u8);
                writer.WriteNumberValue(NumberOfCores.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemType))
            {
                writer.WritePropertyName("operatingSystemType"u8);
                writer.WriteStringValue(OperatingSystemType);
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemName))
            {
                writer.WritePropertyName("operatingSystemName"u8);
                writer.WriteStringValue(OperatingSystemName);
            }
            if (options.Format != "W" && Optional.IsDefined(OperatingSystemVersion))
            {
                writer.WritePropertyName("operatingSystemVersion"u8);
                writer.WriteStringValue(OperatingSystemVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Disks))
            {
                writer.WritePropertyName("disks"u8);
                writer.WriteStartObject();
                foreach (var item in Disks)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Groups))
            {
                writer.WritePropertyName("groups"u8);
                writer.WriteStartArray();
                foreach (var item in Groups)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(NetworkAdapters))
            {
                writer.WritePropertyName("networkAdapters"u8);
                writer.WriteStartObject();
                foreach (var item in NetworkAdapters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SqlInstances))
            {
                writer.WritePropertyName("sqlInstances"u8);
                writer.WriteStartArray();
                foreach (var item in SqlInstances)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(WebApplications))
            {
                writer.WritePropertyName("webApplications"u8);
                writer.WriteStartArray();
                foreach (var item in WebApplications)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(UpdatedOn))
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MigrateMachineData IJsonModel<MigrateMachineData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateMachineData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrateMachineData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrateMachineData(document.RootElement, options);
        }

        internal static MigrateMachineData DeserializeMigrateMachineData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<WorkloadSummary> workloadSummary = default;
            Optional<IReadOnlyList<MigrateError>> errors = default;
            Optional<ProcessorInfo> hostProcessor = default;
            Optional<ProductSupportStatus> productSupportStatus = default;
            Optional<ResourceIdentifier> discoveryMachineArmId = default;
            Optional<ResourceIdentifier> datacenterManagementServerArmId = default;
            Optional<string> datacenterManagementServerName = default;
            Optional<MachineBootType> bootType = default;
            Optional<string> displayName = default;
            Optional<double> megabytesOfMemory = default;
            Optional<int> numberOfCores = default;
            Optional<string> operatingSystemType = default;
            Optional<string> operatingSystemName = default;
            Optional<string> operatingSystemVersion = default;
            Optional<string> description = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<IReadOnlyDictionary<string, MigrateDisk>> disks = default;
            Optional<IReadOnlyList<string>> groups = default;
            Optional<IReadOnlyDictionary<string, MigrateNetworkAdapter>> networkAdapters = default;
            Optional<IReadOnlyList<string>> sqlInstances = default;
            Optional<IReadOnlyList<string>> webApplications = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("workloadSummary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            workloadSummary = WorkloadSummary.DeserializeWorkloadSummary(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("errors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<MigrateError> array = new List<MigrateError>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(MigrateError.DeserializeMigrateError(item));
                            }
                            errors = array;
                            continue;
                        }
                        if (property0.NameEquals("hostProcessor"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hostProcessor = ProcessorInfo.DeserializeProcessorInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("productSupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            productSupportStatus = ProductSupportStatus.DeserializeProductSupportStatus(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("discoveryMachineArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discoveryMachineArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("datacenterManagementServerArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            datacenterManagementServerArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("datacenterManagementServerName"u8))
                        {
                            datacenterManagementServerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("bootType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bootType = new MachineBootType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("megabytesOfMemory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            megabytesOfMemory = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfCores"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfCores = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemType"u8))
                        {
                            operatingSystemType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemName"u8))
                        {
                            operatingSystemName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemVersion"u8))
                        {
                            operatingSystemVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("disks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, MigrateDisk> dictionary = new Dictionary<string, MigrateDisk>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, MigrateDisk.DeserializeMigrateDisk(property1.Value));
                            }
                            disks = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("groups"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            groups = array;
                            continue;
                        }
                        if (property0.NameEquals("networkAdapters"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, MigrateNetworkAdapter> dictionary = new Dictionary<string, MigrateNetworkAdapter>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, MigrateNetworkAdapter.DeserializeMigrateNetworkAdapter(property1.Value));
                            }
                            networkAdapters = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("sqlInstances"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            sqlInstances = array;
                            continue;
                        }
                        if (property0.NameEquals("webApplications"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            webApplications = array;
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MigrateMachineData(id, name, type, systemData.Value, workloadSummary.Value, Optional.ToList(errors), hostProcessor.Value, productSupportStatus.Value, discoveryMachineArmId.Value, datacenterManagementServerArmId.Value, datacenterManagementServerName.Value, Optional.ToNullable(bootType), displayName.Value, Optional.ToNullable(megabytesOfMemory), Optional.ToNullable(numberOfCores), operatingSystemType.Value, operatingSystemName.Value, operatingSystemVersion.Value, description.Value, Optional.ToNullable(createdTimestamp), Optional.ToDictionary(disks), Optional.ToList(groups), Optional.ToDictionary(networkAdapters), Optional.ToList(sqlInstances), Optional.ToList(webApplications), Optional.ToNullable(updatedTimestamp), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrateMachineData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateMachineData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrateMachineData)} does not support '{options.Format}' format.");
            }
        }

        MigrateMachineData IPersistableModel<MigrateMachineData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateMachineData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMigrateMachineData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrateMachineData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrateMachineData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
