// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class AssessedDisk
    {
        internal static AssessedDisk DeserializeAssessedDisk(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> displayName = default;
            Optional<double> gigabytesProvisioned = default;
            Optional<double> megabytesPerSecondOfRead = default;
            Optional<double> megabytesPerSecondOfWrite = default;
            Optional<double> numberOfReadOperationsPerSecond = default;
            Optional<double> numberOfWriteOperationsPerSecond = default;
            Optional<double> monthlyStorageCost = default;
            Optional<AzureDiskType> recommendedDiskType = default;
            Optional<AzureDiskSize> recommendedDiskSize = default;
            Optional<int> gigabytesForRecommendedDiskSize = default;
            Optional<CloudSuitability> suitability = default;
            Optional<AzureDiskSuitabilityExplanation> suitabilityExplanation = default;
            Optional<AzureDiskSuitabilityDetail> suitabilityDetail = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gigabytesProvisioned"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gigabytesProvisioned = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("megabytesPerSecondOfRead"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    megabytesPerSecondOfRead = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("megabytesPerSecondOfWrite"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    megabytesPerSecondOfWrite = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("numberOfReadOperationsPerSecond"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfReadOperationsPerSecond = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("numberOfWriteOperationsPerSecond"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfWriteOperationsPerSecond = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("recommendedDiskType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recommendedDiskType = new AzureDiskType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recommendedDiskSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recommendedDiskSize = new AzureDiskSize(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("gigabytesForRecommendedDiskSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    gigabytesForRecommendedDiskSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("suitability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitability = new CloudSuitability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityExplanation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitabilityExplanation = new AzureDiskSuitabilityExplanation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityDetail"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitabilityDetail = new AzureDiskSuitabilityDetail(property.Value.GetString());
                    continue;
                }
            }
            return new AssessedDisk(name.Value, displayName.Value, Optional.ToNullable(gigabytesProvisioned), Optional.ToNullable(megabytesPerSecondOfRead), Optional.ToNullable(megabytesPerSecondOfWrite), Optional.ToNullable(numberOfReadOperationsPerSecond), Optional.ToNullable(numberOfWriteOperationsPerSecond), Optional.ToNullable(monthlyStorageCost), Optional.ToNullable(recommendedDiskType), Optional.ToNullable(recommendedDiskSize), Optional.ToNullable(gigabytesForRecommendedDiskSize), Optional.ToNullable(suitability), Optional.ToNullable(suitabilityExplanation), Optional.ToNullable(suitabilityDetail));
        }
    }
}
