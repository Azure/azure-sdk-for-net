// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class AssessedDisk : IUtf8JsonSerializable, IJsonModel<AssessedDisk>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssessedDisk>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AssessedDisk>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedDisk>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedDisk)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Suitability))
            {
                writer.WritePropertyName("suitability"u8);
                writer.WriteStringValue(Suitability.Value.ToString());
            }
            if (Optional.IsDefined(SuitabilityExplanation))
            {
                writer.WritePropertyName("suitabilityExplanation"u8);
                writer.WriteStringValue(SuitabilityExplanation.Value.ToString());
            }
            if (Optional.IsDefined(SuitabilityDetail))
            {
                writer.WritePropertyName("suitabilityDetail"u8);
                writer.WriteStringValue(SuitabilityDetail.Value.ToString());
            }
            if (Optional.IsDefined(RecommendedDiskSize))
            {
                writer.WritePropertyName("recommendedDiskSize"u8);
                writer.WriteStringValue(RecommendedDiskSize.Value.ToString());
            }
            if (Optional.IsDefined(RecommendedDiskType))
            {
                writer.WritePropertyName("recommendedDiskType"u8);
                writer.WriteStringValue(RecommendedDiskType.Value.ToString());
            }
            if (Optional.IsDefined(GigabytesForRecommendedDiskSize))
            {
                writer.WritePropertyName("gigabytesForRecommendedDiskSize"u8);
                writer.WriteNumberValue(GigabytesForRecommendedDiskSize.Value);
            }
            if (Optional.IsDefined(RecommendDiskThroughputInMbps))
            {
                writer.WritePropertyName("recommendDiskThroughputInMbps"u8);
                writer.WriteNumberValue(RecommendDiskThroughputInMbps.Value);
            }
            if (Optional.IsDefined(RecommendedDiskIops))
            {
                writer.WritePropertyName("recommendedDiskIops"u8);
                writer.WriteNumberValue(RecommendedDiskIops.Value);
            }
            if (Optional.IsDefined(MonthlyStorageCost))
            {
                writer.WritePropertyName("monthlyStorageCost"u8);
                writer.WriteNumberValue(MonthlyStorageCost.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(GigabytesProvisioned))
            {
                writer.WritePropertyName("gigabytesProvisioned"u8);
                writer.WriteNumberValue(GigabytesProvisioned.Value);
            }
            if (Optional.IsDefined(MegabytesPerSecondOfRead))
            {
                writer.WritePropertyName("megabytesPerSecondOfRead"u8);
                writer.WriteNumberValue(MegabytesPerSecondOfRead.Value);
            }
            if (Optional.IsDefined(MegabytesPerSecondOfWrite))
            {
                writer.WritePropertyName("megabytesPerSecondOfWrite"u8);
                writer.WriteNumberValue(MegabytesPerSecondOfWrite.Value);
            }
            if (Optional.IsDefined(NumberOfReadOperationsPerSecond))
            {
                writer.WritePropertyName("numberOfReadOperationsPerSecond"u8);
                writer.WriteNumberValue(NumberOfReadOperationsPerSecond.Value);
            }
            if (Optional.IsDefined(NumberOfWriteOperationsPerSecond))
            {
                writer.WritePropertyName("numberOfWriteOperationsPerSecond"u8);
                writer.WriteNumberValue(NumberOfWriteOperationsPerSecond.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AssessedDisk IJsonModel<AssessedDisk>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedDisk>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedDisk)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssessedDisk(document.RootElement, options);
        }

        internal static AssessedDisk DeserializeAssessedDisk(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<MigrateCloudSuitability> suitability = default;
            Optional<AzureDiskSuitabilityExplanation> suitabilityExplanation = default;
            Optional<AzureDiskSuitabilityDetail> suitabilityDetail = default;
            Optional<AzureDiskSize> recommendedDiskSize = default;
            Optional<AzureDiskType> recommendedDiskType = default;
            Optional<int> gigabytesForRecommendedDiskSize = default;
            Optional<double> recommendDiskThroughputInMbps = default;
            Optional<double> recommendedDiskIops = default;
            Optional<double> monthlyStorageCost = default;
            Optional<string> name = default;
            Optional<string> displayName = default;
            Optional<double> gigabytesProvisioned = default;
            Optional<double> megabytesPerSecondOfRead = default;
            Optional<double> megabytesPerSecondOfWrite = default;
            Optional<double> numberOfReadOperationsPerSecond = default;
            Optional<double> numberOfWriteOperationsPerSecond = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("suitability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    suitability = new MigrateCloudSuitability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityExplanation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    suitabilityExplanation = new AzureDiskSuitabilityExplanation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityDetail"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    suitabilityDetail = new AzureDiskSuitabilityDetail(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recommendedDiskSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendedDiskSize = new AzureDiskSize(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recommendedDiskType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendedDiskType = new AzureDiskType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("gigabytesForRecommendedDiskSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gigabytesForRecommendedDiskSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("recommendDiskThroughputInMbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendDiskThroughputInMbps = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("recommendedDiskIops"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recommendedDiskIops = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStorageCost"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthlyStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gigabytesProvisioned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gigabytesProvisioned = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("megabytesPerSecondOfRead"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    megabytesPerSecondOfRead = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("megabytesPerSecondOfWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    megabytesPerSecondOfWrite = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("numberOfReadOperationsPerSecond"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfReadOperationsPerSecond = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("numberOfWriteOperationsPerSecond"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfWriteOperationsPerSecond = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AssessedDisk(Optional.ToNullable(suitability), Optional.ToNullable(suitabilityExplanation), Optional.ToNullable(suitabilityDetail), Optional.ToNullable(recommendedDiskSize), Optional.ToNullable(recommendedDiskType), Optional.ToNullable(gigabytesForRecommendedDiskSize), Optional.ToNullable(recommendDiskThroughputInMbps), Optional.ToNullable(recommendedDiskIops), Optional.ToNullable(monthlyStorageCost), name.Value, displayName.Value, Optional.ToNullable(gigabytesProvisioned), Optional.ToNullable(megabytesPerSecondOfRead), Optional.ToNullable(megabytesPerSecondOfWrite), Optional.ToNullable(numberOfReadOperationsPerSecond), Optional.ToNullable(numberOfWriteOperationsPerSecond), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssessedDisk>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedDisk>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AssessedDisk)} does not support '{options.Format}' format.");
            }
        }

        AssessedDisk IPersistableModel<AssessedDisk>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedDisk>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAssessedDisk(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssessedDisk)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssessedDisk>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
