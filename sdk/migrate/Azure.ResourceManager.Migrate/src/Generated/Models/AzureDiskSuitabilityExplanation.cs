// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Migrate.Models
{
    /// <summary> If disk is not suitable to be migrated, this explains the reasons and mitigation steps. </summary>
    public readonly partial struct AzureDiskSuitabilityExplanation : IEquatable<AzureDiskSuitabilityExplanation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureDiskSuitabilityExplanation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureDiskSuitabilityExplanation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotApplicableValue = "NotApplicable";
        private const string DiskSizeGreaterThanSupportedValue = "DiskSizeGreaterThanSupported";
        private const string NoSuitableDiskSizeForIopsValue = "NoSuitableDiskSizeForIops";
        private const string NoSuitableDiskSizeForThroughputValue = "NoSuitableDiskSizeForThroughput";
        private const string NoDiskSizeFoundInSelectedLocationValue = "NoDiskSizeFoundInSelectedLocation";
        private const string NoDiskSizeFoundForSelectedRedundancyValue = "NoDiskSizeFoundForSelectedRedundancy";
        private const string InternalErrorOccurredForDiskEvaluationValue = "InternalErrorOccurredForDiskEvaluation";
        private const string NoEaPriceFoundForDiskSizeValue = "NoEaPriceFoundForDiskSize";

        /// <summary> Unknown. </summary>
        public static AzureDiskSuitabilityExplanation Unknown { get; } = new AzureDiskSuitabilityExplanation(UnknownValue);
        /// <summary> NotApplicable. </summary>
        public static AzureDiskSuitabilityExplanation NotApplicable { get; } = new AzureDiskSuitabilityExplanation(NotApplicableValue);
        /// <summary> DiskSizeGreaterThanSupported. </summary>
        public static AzureDiskSuitabilityExplanation DiskSizeGreaterThanSupported { get; } = new AzureDiskSuitabilityExplanation(DiskSizeGreaterThanSupportedValue);
        /// <summary> NoSuitableDiskSizeForIops. </summary>
        public static AzureDiskSuitabilityExplanation NoSuitableDiskSizeForIops { get; } = new AzureDiskSuitabilityExplanation(NoSuitableDiskSizeForIopsValue);
        /// <summary> NoSuitableDiskSizeForThroughput. </summary>
        public static AzureDiskSuitabilityExplanation NoSuitableDiskSizeForThroughput { get; } = new AzureDiskSuitabilityExplanation(NoSuitableDiskSizeForThroughputValue);
        /// <summary> NoDiskSizeFoundInSelectedLocation. </summary>
        public static AzureDiskSuitabilityExplanation NoDiskSizeFoundInSelectedLocation { get; } = new AzureDiskSuitabilityExplanation(NoDiskSizeFoundInSelectedLocationValue);
        /// <summary> NoDiskSizeFoundForSelectedRedundancy. </summary>
        public static AzureDiskSuitabilityExplanation NoDiskSizeFoundForSelectedRedundancy { get; } = new AzureDiskSuitabilityExplanation(NoDiskSizeFoundForSelectedRedundancyValue);
        /// <summary> InternalErrorOccurredForDiskEvaluation. </summary>
        public static AzureDiskSuitabilityExplanation InternalErrorOccurredForDiskEvaluation { get; } = new AzureDiskSuitabilityExplanation(InternalErrorOccurredForDiskEvaluationValue);
        /// <summary> NoEaPriceFoundForDiskSize. </summary>
        public static AzureDiskSuitabilityExplanation NoEaPriceFoundForDiskSize { get; } = new AzureDiskSuitabilityExplanation(NoEaPriceFoundForDiskSizeValue);
        /// <summary> Determines if two <see cref="AzureDiskSuitabilityExplanation"/> values are the same. </summary>
        public static bool operator ==(AzureDiskSuitabilityExplanation left, AzureDiskSuitabilityExplanation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureDiskSuitabilityExplanation"/> values are not the same. </summary>
        public static bool operator !=(AzureDiskSuitabilityExplanation left, AzureDiskSuitabilityExplanation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AzureDiskSuitabilityExplanation"/>. </summary>
        public static implicit operator AzureDiskSuitabilityExplanation(string value) => new AzureDiskSuitabilityExplanation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureDiskSuitabilityExplanation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureDiskSuitabilityExplanation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
