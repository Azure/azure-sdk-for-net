// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class ProductSupportStatus : IUtf8JsonSerializable, IJsonModel<ProductSupportStatus>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProductSupportStatus>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ProductSupportStatus>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProductSupportStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProductSupportStatus)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(CurrentVersion))
            {
                writer.WritePropertyName("currentVersion"u8);
                writer.WriteStringValue(CurrentVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(ServicePackStatus))
            {
                writer.WritePropertyName("servicePackStatus"u8);
                writer.WriteStringValue(ServicePackStatus);
            }
            if (options.Format != "W" && Optional.IsDefined(EsuStatus))
            {
                writer.WritePropertyName("esuStatus"u8);
                writer.WriteStringValue(EsuStatus);
            }
            if (options.Format != "W" && Optional.IsDefined(SupportStatus))
            {
                writer.WritePropertyName("supportStatus"u8);
                writer.WriteStringValue(SupportStatus);
            }
            if (options.Format != "W" && Optional.IsDefined(Eta))
            {
                writer.WritePropertyName("eta"u8);
                writer.WriteNumberValue(Eta.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentEsuYear))
            {
                writer.WritePropertyName("currentEsuYear"u8);
                writer.WriteStringValue(CurrentEsuYear);
            }
            if (options.Format != "W" && Optional.IsDefined(MainstreamEndOn))
            {
                writer.WritePropertyName("mainstreamEndDate"u8);
                writer.WriteStringValue(MainstreamEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ExtendedSupportEndOn))
            {
                writer.WritePropertyName("extendedSupportEndDate"u8);
                writer.WriteStringValue(ExtendedSupportEndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ExtendedSecurityUpdateYear1EndOn))
            {
                writer.WritePropertyName("extendedSecurityUpdateYear1EndDate"u8);
                writer.WriteStringValue(ExtendedSecurityUpdateYear1EndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ExtendedSecurityUpdateYear2EndOn))
            {
                writer.WritePropertyName("extendedSecurityUpdateYear2EndDate"u8);
                writer.WriteStringValue(ExtendedSecurityUpdateYear2EndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ExtendedSecurityUpdateYear3EndOn))
            {
                writer.WritePropertyName("extendedSecurityUpdateYear3EndDate"u8);
                writer.WriteStringValue(ExtendedSecurityUpdateYear3EndOn.Value, "O");
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProductSupportStatus IJsonModel<ProductSupportStatus>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProductSupportStatus>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProductSupportStatus)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProductSupportStatus(document.RootElement, options);
        }

        internal static ProductSupportStatus DeserializeProductSupportStatus(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> currentVersion = default;
            Optional<string> servicePackStatus = default;
            Optional<string> esuStatus = default;
            Optional<string> supportStatus = default;
            Optional<int> eta = default;
            Optional<string> currentEsuYear = default;
            Optional<DateTimeOffset> mainstreamEndDate = default;
            Optional<DateTimeOffset> extendedSupportEndDate = default;
            Optional<DateTimeOffset> extendedSecurityUpdateYear1EndDate = default;
            Optional<DateTimeOffset> extendedSecurityUpdateYear2EndDate = default;
            Optional<DateTimeOffset> extendedSecurityUpdateYear3EndDate = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("currentVersion"u8))
                {
                    currentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("servicePackStatus"u8))
                {
                    servicePackStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("esuStatus"u8))
                {
                    esuStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportStatus"u8))
                {
                    supportStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eta"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eta = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("currentEsuYear"u8))
                {
                    currentEsuYear = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mainstreamEndDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mainstreamEndDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("extendedSupportEndDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedSupportEndDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("extendedSecurityUpdateYear1EndDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedSecurityUpdateYear1EndDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("extendedSecurityUpdateYear2EndDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedSecurityUpdateYear2EndDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("extendedSecurityUpdateYear3EndDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedSecurityUpdateYear3EndDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ProductSupportStatus(currentVersion.Value, servicePackStatus.Value, esuStatus.Value, supportStatus.Value, Optional.ToNullable(eta), currentEsuYear.Value, Optional.ToNullable(mainstreamEndDate), Optional.ToNullable(extendedSupportEndDate), Optional.ToNullable(extendedSecurityUpdateYear1EndDate), Optional.ToNullable(extendedSecurityUpdateYear2EndDate), Optional.ToNullable(extendedSecurityUpdateYear3EndDate), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ProductSupportStatus>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProductSupportStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ProductSupportStatus)} does not support '{options.Format}' format.");
            }
        }

        ProductSupportStatus IPersistableModel<ProductSupportStatus>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProductSupportStatus>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeProductSupportStatus(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ProductSupportStatus)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ProductSupportStatus>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
