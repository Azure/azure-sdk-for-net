// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Migrate.Models
{
    public partial class AssessedMachineProperties
    {
        internal static AssessedMachineProperties DeserializeAssessedMachineProperties(JsonElement element)
        {
            Optional<MachineBootType> bootType = default;
            Optional<string> datacenterMachineArmId = default;
            Optional<string> datacenterManagementServerArmId = default;
            Optional<string> datacenterManagementServerName = default;
            Optional<string> description = default;
            Optional<string> displayName = default;
            Optional<double> megabytesOfMemory = default;
            Optional<int> numberOfCores = default;
            Optional<string> operatingSystemType = default;
            Optional<string> operatingSystemName = default;
            Optional<string> operatingSystemVersion = default;
            Optional<double> monthlyBandwidthCost = default;
            Optional<double> monthlyStorageCost = default;
            Optional<double> monthlyPremiumStorageCost = default;
            Optional<double> monthlyStandardSSDStorageCost = default;
            Optional<double?> confidenceRatingInPercentage = default;
            Optional<IReadOnlyDictionary<string, AssessedDisk>> disks = default;
            Optional<IReadOnlyDictionary<string, AssessedNetworkAdapter>> networkAdapters = default;
            Optional<AzureVmSize> recommendedSize = default;
            Optional<int> numberOfCoresForRecommendedSize = default;
            Optional<double> megabytesOfMemoryForRecommendedSize = default;
            Optional<double> monthlyComputeCostForRecommendedSize = default;
            Optional<double> percentageCoresUtilization = default;
            Optional<double> percentageMemoryUtilization = default;
            Optional<CloudSuitability> suitability = default;
            Optional<AzureVmSuitabilityExplanation> suitabilityExplanation = default;
            Optional<AzureVmSuitabilityDetail> suitabilityDetail = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("bootType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    bootType = new MachineBootType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("datacenterMachineArmId"))
                {
                    datacenterMachineArmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datacenterManagementServerArmId"))
                {
                    datacenterManagementServerArmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datacenterManagementServerName"))
                {
                    datacenterManagementServerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("megabytesOfMemory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    megabytesOfMemory = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("numberOfCores"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfCores = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("operatingSystemType"))
                {
                    operatingSystemType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemName"))
                {
                    operatingSystemName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operatingSystemVersion"))
                {
                    operatingSystemVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("monthlyBandwidthCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyBandwidthCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyPremiumStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyPremiumStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyStandardSSDStorageCost"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyStandardSSDStorageCost = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("confidenceRatingInPercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        confidenceRatingInPercentage = null;
                        continue;
                    }
                    confidenceRatingInPercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("disks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AssessedDisk> dictionary = new Dictionary<string, AssessedDisk>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AssessedDisk.DeserializeAssessedDisk(property0.Value));
                    }
                    disks = dictionary;
                    continue;
                }
                if (property.NameEquals("networkAdapters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, AssessedNetworkAdapter> dictionary = new Dictionary<string, AssessedNetworkAdapter>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, AssessedNetworkAdapter.DeserializeAssessedNetworkAdapter(property0.Value));
                    }
                    networkAdapters = dictionary;
                    continue;
                }
                if (property.NameEquals("recommendedSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recommendedSize = new AzureVmSize(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("numberOfCoresForRecommendedSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberOfCoresForRecommendedSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("megabytesOfMemoryForRecommendedSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    megabytesOfMemoryForRecommendedSize = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("monthlyComputeCostForRecommendedSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlyComputeCostForRecommendedSize = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("percentageCoresUtilization"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    percentageCoresUtilization = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("percentageMemoryUtilization"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    percentageMemoryUtilization = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("suitability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitability = new CloudSuitability(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityExplanation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitabilityExplanation = new AzureVmSuitabilityExplanation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("suitabilityDetail"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    suitabilityDetail = new AzureVmSuitabilityDetail(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createdTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedTimestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    updatedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new AssessedMachineProperties(Optional.ToNullable(bootType), datacenterMachineArmId.Value, datacenterManagementServerArmId.Value, datacenterManagementServerName.Value, description.Value, displayName.Value, Optional.ToNullable(megabytesOfMemory), Optional.ToNullable(numberOfCores), operatingSystemType.Value, operatingSystemName.Value, operatingSystemVersion.Value, Optional.ToNullable(monthlyBandwidthCost), Optional.ToNullable(monthlyStorageCost), Optional.ToNullable(monthlyPremiumStorageCost), Optional.ToNullable(monthlyStandardSSDStorageCost), Optional.ToNullable(confidenceRatingInPercentage), Optional.ToDictionary(disks), Optional.ToDictionary(networkAdapters), Optional.ToNullable(recommendedSize), Optional.ToNullable(numberOfCoresForRecommendedSize), Optional.ToNullable(megabytesOfMemoryForRecommendedSize), Optional.ToNullable(monthlyComputeCostForRecommendedSize), Optional.ToNullable(percentageCoresUtilization), Optional.ToNullable(percentageMemoryUtilization), Optional.ToNullable(suitability), Optional.ToNullable(suitabilityExplanation), Optional.ToNullable(suitabilityDetail), Optional.ToNullable(createdTimestamp), Optional.ToNullable(updatedTimestamp));
        }
    }
}
