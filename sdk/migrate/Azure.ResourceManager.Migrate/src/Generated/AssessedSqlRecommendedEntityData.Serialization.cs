// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    public partial class AssessedSqlRecommendedEntityData : IUtf8JsonSerializable, IJsonModel<AssessedSqlRecommendedEntityData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssessedSqlRecommendedEntityData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AssessedSqlRecommendedEntityData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlRecommendedEntityData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && MachineName != null)
            {
                writer.WritePropertyName("machineName"u8);
                writer.WriteStringValue(MachineName);
            }
            if (options.Format != "W" && InstanceName != null)
            {
                writer.WritePropertyName("instanceName"u8);
                writer.WriteStringValue(InstanceName);
            }
            if (options.Format != "W" && ProductSupportStatus != null)
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus);
            }
            if (options.Format != "W" && DBCount.HasValue)
            {
                writer.WritePropertyName("dbCount"u8);
                writer.WriteNumberValue(DBCount.Value);
            }
            if (options.Format != "W" && DiscoveredDBCount.HasValue)
            {
                writer.WritePropertyName("discoveredDBCount"u8);
                writer.WriteNumberValue(DiscoveredDBCount.Value);
            }
            if (options.Format != "W" && HasScanOccurred.HasValue)
            {
                writer.WritePropertyName("hasScanOccurred"u8);
                writer.WriteBooleanValue(HasScanOccurred.Value);
            }
            if (options.Format != "W" && RecommendedAzureSqlTargetType.HasValue)
            {
                writer.WritePropertyName("recommendedAzureSqlTargetType"u8);
                writer.WriteStringValue(RecommendedAzureSqlTargetType.Value.ToString());
            }
            if (options.Format != "W" && RecommendedSuitability.HasValue)
            {
                writer.WritePropertyName("recommendedSuitability"u8);
                writer.WriteStringValue(RecommendedSuitability.Value.ToString());
            }
            if (options.Format != "W" && AzureSqlMISuitabilityDetails != null)
            {
                writer.WritePropertyName("azureSqlMISuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlMISuitabilityDetails);
            }
            if (options.Format != "W" && AzureSqlDBSuitabilityDetails != null)
            {
                writer.WritePropertyName("azureSqlDBSuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlDBSuitabilityDetails);
            }
            if (options.Format != "W" && AzureSqlVmSuitabilityDetails != null)
            {
                writer.WritePropertyName("azureSqlVMSuitabilityDetails"u8);
                writer.WriteObjectValue(AzureSqlVmSuitabilityDetails);
            }
            if (AssessedSqlEntityArmId != null)
            {
                writer.WritePropertyName("assessedSqlEntityArmId"u8);
                writer.WriteStringValue(AssessedSqlEntityArmId);
            }
            if (options.Format != "W" && IsClustered.HasValue)
            {
                writer.WritePropertyName("isClustered"u8);
                writer.WriteBooleanValue(IsClustered.Value);
            }
            if (options.Format != "W" && IsHighAvailabilityEnabled.HasValue)
            {
                writer.WritePropertyName("isHighAvailabilityEnabled"u8);
                writer.WriteBooleanValue(IsHighAvailabilityEnabled.Value);
            }
            if (options.Format != "W" && SqlEdition != null)
            {
                writer.WritePropertyName("sqlEdition"u8);
                writer.WriteStringValue(SqlEdition);
            }
            if (options.Format != "W" && SqlVersion != null)
            {
                writer.WritePropertyName("sqlVersion"u8);
                writer.WriteStringValue(SqlVersion);
            }
            if (options.Format != "W" && SizingCriterion.HasValue)
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AssessedSqlRecommendedEntityData IJsonModel<AssessedSqlRecommendedEntityData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlRecommendedEntityData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssessedSqlRecommendedEntityData(document.RootElement, options);
        }

        internal static AssessedSqlRecommendedEntityData DeserializeAssessedSqlRecommendedEntityData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> machineName = default;
            Optional<string> instanceName = default;
            Optional<ProductSupportStatus> productSupportStatus = default;
            Optional<int> dbCount = default;
            Optional<int> discoveredDBCount = default;
            Optional<bool> hasScanOccurred = default;
            Optional<MigrateTargetType> recommendedAzureSqlTargetType = default;
            Optional<RecommendedSuitability> recommendedSuitability = default;
            Optional<SqlAssessmentV2PaasSuitabilityDetails> azureSqlMISuitabilityDetails = default;
            Optional<SqlAssessmentV2PaasSuitabilityDetails> azureSqlDBSuitabilityDetails = default;
            Optional<SqlAssessmentV2IaasSuitabilityDetails> azureSqlVmSuitabilityDetails = default;
            Optional<ResourceIdentifier> assessedSqlEntityArmId = default;
            Optional<bool> isClustered = default;
            Optional<bool> isHighAvailabilityEnabled = default;
            Optional<string> sqlEdition = default;
            Optional<string> sqlVersion = default;
            Optional<AssessmentSizingCriterion> sizingCriterion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("machineName"u8))
                        {
                            machineName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("instanceName"u8))
                        {
                            instanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("productSupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            productSupportStatus = ProductSupportStatus.DeserializeProductSupportStatus(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("dbCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dbCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("discoveredDBCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            discoveredDBCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("hasScanOccurred"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            hasScanOccurred = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("recommendedAzureSqlTargetType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedAzureSqlTargetType = new MigrateTargetType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendedSuitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedSuitability = new RecommendedSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("azureSqlMISuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlMISuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlDBSuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlDBSuitabilityDetails = SqlAssessmentV2PaasSuitabilityDetails.DeserializeSqlAssessmentV2PaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("azureSqlVMSuitabilityDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureSqlVmSuitabilityDetails = SqlAssessmentV2IaasSuitabilityDetails.DeserializeSqlAssessmentV2IaasSuitabilityDetails(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("assessedSqlEntityArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            assessedSqlEntityArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isClustered"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isClustered = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isHighAvailabilityEnabled"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isHighAvailabilityEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("sqlEdition"u8))
                        {
                            sqlEdition = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlVersion"u8))
                        {
                            sqlVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AssessedSqlRecommendedEntityData(
                id,
                name,
                type,
                systemData.Value,
                machineName.Value,
                instanceName.Value,
                productSupportStatus.Value,
                Optional.ToNullable(dbCount),
                Optional.ToNullable(discoveredDBCount),
                Optional.ToNullable(hasScanOccurred),
                Optional.ToNullable(recommendedAzureSqlTargetType),
                Optional.ToNullable(recommendedSuitability),
                azureSqlMISuitabilityDetails.Value,
                azureSqlDBSuitabilityDetails.Value,
                azureSqlVmSuitabilityDetails.Value,
                assessedSqlEntityArmId.Value,
                Optional.ToNullable(isClustered),
                Optional.ToNullable(isHighAvailabilityEnabled),
                sqlEdition.Value,
                sqlVersion.Value,
                Optional.ToNullable(sizingCriterion),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssessedSqlRecommendedEntityData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlRecommendedEntityData)} does not support '{options.Format}' format.");
            }
        }

        AssessedSqlRecommendedEntityData IPersistableModel<AssessedSqlRecommendedEntityData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlRecommendedEntityData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAssessedSqlRecommendedEntityData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlRecommendedEntityData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssessedSqlRecommendedEntityData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
