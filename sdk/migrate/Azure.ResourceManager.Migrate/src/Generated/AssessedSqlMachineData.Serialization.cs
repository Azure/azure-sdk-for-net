// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    public partial class AssessedSqlMachineData : IUtf8JsonSerializable, IJsonModel<AssessedSqlMachineData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AssessedSqlMachineData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AssessedSqlMachineData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlMachineData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlMachineData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && SystemData != null)
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && BiosGuid != null)
            {
                writer.WritePropertyName("biosGuid"u8);
                writer.WriteStringValue(BiosGuid);
            }
            if (options.Format != "W" && Fqdn != null)
            {
                writer.WritePropertyName("fqdn"u8);
                writer.WriteStringValue(Fqdn);
            }
            if (options.Format != "W" && !(SqlInstances is ChangeTrackingList<AssessedSqlInstanceSummary> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("sqlInstances"u8);
                writer.WriteStartArray();
                foreach (var item in SqlInstances)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && SuitabilityDetail.HasValue)
            {
                writer.WritePropertyName("suitabilityDetail"u8);
                writer.WriteStringValue(SuitabilityDetail.Value.ToString());
            }
            if (options.Format != "W" && SuitabilityExplanation.HasValue)
            {
                writer.WritePropertyName("suitabilityExplanation"u8);
                writer.WriteStringValue(SuitabilityExplanation.Value.ToString());
            }
            if (options.Format != "W" && RecommendedVmSize.HasValue)
            {
                writer.WritePropertyName("recommendedVmSize"u8);
                writer.WriteStringValue(RecommendedVmSize.Value.ToString());
            }
            if (options.Format != "W" && RecommendedVmFamily.HasValue)
            {
                writer.WritePropertyName("recommendedVmFamily"u8);
                writer.WriteStringValue(RecommendedVmFamily.Value.ToString());
            }
            if (options.Format != "W" && ProductSupportStatus != null)
            {
                writer.WritePropertyName("productSupportStatus"u8);
                writer.WriteObjectValue(ProductSupportStatus);
            }
            if (options.Format != "W" && RecommendedVmSizeNumberOfCores.HasValue)
            {
                writer.WritePropertyName("recommendedVmSizeNumberOfCores"u8);
                writer.WriteNumberValue(RecommendedVmSizeNumberOfCores.Value);
            }
            if (options.Format != "W" && RecommendedVmSizeMegabytesOfMemory.HasValue)
            {
                writer.WritePropertyName("recommendedVmSizeMegabytesOfMemory"u8);
                writer.WriteNumberValue(RecommendedVmSizeMegabytesOfMemory.Value);
            }
            if (options.Format != "W" && MonthlyComputeCost.HasValue)
            {
                writer.WritePropertyName("monthlyComputeCost"u8);
                writer.WriteNumberValue(MonthlyComputeCost.Value);
            }
            if (options.Format != "W" && !(Disks is ChangeTrackingDictionary<string, AssessedDataDisk> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("disks"u8);
                writer.WriteStartObject();
                foreach (var item in Disks)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && !(NetworkAdapters is ChangeTrackingDictionary<string, SqlAssessedNetworkAdapter> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("networkAdapters"u8);
                writer.WriteStartObject();
                foreach (var item in NetworkAdapters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && MonthlyBandwidthCost.HasValue)
            {
                writer.WritePropertyName("monthlyBandwidthCost"u8);
                writer.WriteNumberValue(MonthlyBandwidthCost.Value);
            }
            if (options.Format != "W" && MonthlyStorageCost.HasValue)
            {
                writer.WritePropertyName("monthlyStorageCost"u8);
                writer.WriteNumberValue(MonthlyStorageCost.Value);
            }
            if (!(CostComponents is ChangeTrackingList<CostComponent> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("costComponents"u8);
                writer.WriteStartArray();
                foreach (var item in CostComponents)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && SecuritySuitability.HasValue)
            {
                writer.WritePropertyName("securitySuitability"u8);
                writer.WriteStringValue(SecuritySuitability.Value.ToString());
            }
            if (options.Format != "W" && !(MigrationGuidelines is ChangeTrackingList<SqlMigrationGuideline> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("migrationGuidelines"u8);
                writer.WriteStartArray();
                foreach (var item in MigrationGuidelines)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && BootType.HasValue)
            {
                writer.WritePropertyName("bootType"u8);
                writer.WriteStringValue(BootType.Value.ToString());
            }
            if (options.Format != "W" && OperatingSystemType != null)
            {
                writer.WritePropertyName("operatingSystemType"u8);
                writer.WriteStringValue(OperatingSystemType);
            }
            if (options.Format != "W" && OperatingSystemName != null)
            {
                writer.WritePropertyName("operatingSystemName"u8);
                writer.WriteStringValue(OperatingSystemName);
            }
            if (options.Format != "W" && OperatingSystemVersion != null)
            {
                writer.WritePropertyName("operatingSystemVersion"u8);
                writer.WriteStringValue(OperatingSystemVersion);
            }
            if (options.Format != "W" && OperatingSystemArchitecture.HasValue)
            {
                writer.WritePropertyName("operatingSystemArchitecture"u8);
                writer.WriteStringValue(OperatingSystemArchitecture.Value.ToString());
            }
            if (options.Format != "W" && CreatedOn.HasValue)
            {
                writer.WritePropertyName("createdTimestamp"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && UpdatedOn.HasValue)
            {
                writer.WritePropertyName("updatedTimestamp"u8);
                writer.WriteStringValue(UpdatedOn.Value, "O");
            }
            if (options.Format != "W" && DisplayName != null)
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && TypePropertiesType.HasValue)
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(TypePropertiesType.Value.ToString());
            }
            if (options.Format != "W" && Description != null)
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (options.Format != "W" && DatacenterMachineArmId != null)
            {
                writer.WritePropertyName("datacenterMachineArmId"u8);
                writer.WriteStringValue(DatacenterMachineArmId);
            }
            if (options.Format != "W" && DatacenterManagementServerArmId != null)
            {
                writer.WritePropertyName("datacenterManagementServerArmId"u8);
                writer.WriteStringValue(DatacenterManagementServerArmId);
            }
            if (options.Format != "W" && DatacenterManagementServerName != null)
            {
                writer.WritePropertyName("datacenterManagementServerName"u8);
                writer.WriteStringValue(DatacenterManagementServerName);
            }
            if (options.Format != "W" && MegabytesOfMemory.HasValue)
            {
                writer.WritePropertyName("megabytesOfMemory"u8);
                writer.WriteNumberValue(MegabytesOfMemory.Value);
            }
            if (options.Format != "W" && NumberOfCores.HasValue)
            {
                writer.WritePropertyName("numberOfCores"u8);
                writer.WriteNumberValue(NumberOfCores.Value);
            }
            if (options.Format != "W" && ConfidenceRatingInPercentage.HasValue)
            {
                writer.WritePropertyName("confidenceRatingInPercentage"u8);
                writer.WriteNumberValue(ConfidenceRatingInPercentage.Value);
            }
            if (options.Format != "W" && PercentageCoresUtilization.HasValue)
            {
                writer.WritePropertyName("percentageCoresUtilization"u8);
                writer.WriteNumberValue(PercentageCoresUtilization.Value);
            }
            if (options.Format != "W" && PercentageMemoryUtilization.HasValue)
            {
                writer.WritePropertyName("percentageMemoryUtilization"u8);
                writer.WriteNumberValue(PercentageMemoryUtilization.Value);
            }
            if (options.Format != "W" && Suitability.HasValue)
            {
                writer.WritePropertyName("suitability"u8);
                writer.WriteStringValue(Suitability.Value.ToString());
            }
            if (options.Format != "W" && SizingCriterion.HasValue)
            {
                writer.WritePropertyName("sizingCriterion"u8);
                writer.WriteStringValue(SizingCriterion.Value.ToString());
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        AssessedSqlMachineData IJsonModel<AssessedSqlMachineData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlMachineData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AssessedSqlMachineData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAssessedSqlMachineData(document.RootElement, options);
        }

        internal static AssessedSqlMachineData DeserializeAssessedSqlMachineData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> biosGuid = default;
            Optional<string> fqdn = default;
            IReadOnlyList<AssessedSqlInstanceSummary> sqlInstances = default;
            Optional<AzureVmSuitabilityDetail> suitabilityDetail = default;
            Optional<AzureVmSuitabilityExplanation> suitabilityExplanation = default;
            Optional<AzureVmSize> recommendedVmSize = default;
            Optional<AzureVmFamily> recommendedVmFamily = default;
            Optional<ProductSupportStatus> productSupportStatus = default;
            Optional<int> recommendedVmSizeNumberOfCores = default;
            Optional<double> recommendedVmSizeMegabytesOfMemory = default;
            Optional<double> monthlyComputeCost = default;
            IReadOnlyDictionary<string, AssessedDataDisk> disks = default;
            IReadOnlyDictionary<string, SqlAssessedNetworkAdapter> networkAdapters = default;
            Optional<double> monthlyBandwidthCost = default;
            Optional<double> monthlyStorageCost = default;
            IList<CostComponent> costComponents = default;
            Optional<MigrateCloudSuitability> securitySuitability = default;
            IReadOnlyList<SqlMigrationGuideline> migrationGuidelines = default;
            Optional<MachineBootType> bootType = default;
            Optional<string> operatingSystemType = default;
            Optional<string> operatingSystemName = default;
            Optional<string> operatingSystemVersion = default;
            Optional<GuestOperatingSystemArchitecture> operatingSystemArchitecture = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> updatedTimestamp = default;
            Optional<string> displayName = default;
            Optional<AssessedMachineType> type0 = default;
            Optional<string> description = default;
            Optional<ResourceIdentifier> datacenterMachineArmId = default;
            Optional<ResourceIdentifier> datacenterManagementServerArmId = default;
            Optional<string> datacenterManagementServerName = default;
            Optional<double> megabytesOfMemory = default;
            Optional<int> numberOfCores = default;
            Optional<double> confidenceRatingInPercentage = default;
            Optional<double> percentageCoresUtilization = default;
            Optional<double> percentageMemoryUtilization = default;
            Optional<MigrateCloudSuitability> suitability = default;
            Optional<AssessmentSizingCriterion> sizingCriterion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("biosGuid"u8))
                        {
                            biosGuid = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("fqdn"u8))
                        {
                            fqdn = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlInstances"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AssessedSqlInstanceSummary> array = new List<AssessedSqlInstanceSummary>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AssessedSqlInstanceSummary.DeserializeAssessedSqlInstanceSummary(item, options));
                            }
                            sqlInstances = array;
                            continue;
                        }
                        if (property0.NameEquals("suitabilityDetail"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            suitabilityDetail = new AzureVmSuitabilityDetail(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("suitabilityExplanation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            suitabilityExplanation = new AzureVmSuitabilityExplanation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendedVmSize"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedVmSize = new AzureVmSize(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("recommendedVmFamily"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedVmFamily = new AzureVmFamily(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("productSupportStatus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            productSupportStatus = ProductSupportStatus.DeserializeProductSupportStatus(property0.Value, options);
                            continue;
                        }
                        if (property0.NameEquals("recommendedVmSizeNumberOfCores"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedVmSizeNumberOfCores = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("recommendedVmSizeMegabytesOfMemory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            recommendedVmSizeMegabytesOfMemory = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyComputeCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyComputeCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("disks"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, AssessedDataDisk> dictionary = new Dictionary<string, AssessedDataDisk>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, AssessedDataDisk.DeserializeAssessedDataDisk(property1.Value, options));
                            }
                            disks = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("networkAdapters"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, SqlAssessedNetworkAdapter> dictionary = new Dictionary<string, SqlAssessedNetworkAdapter>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, SqlAssessedNetworkAdapter.DeserializeSqlAssessedNetworkAdapter(property1.Value, options));
                            }
                            networkAdapters = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("monthlyBandwidthCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyBandwidthCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("monthlyStorageCost"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            monthlyStorageCost = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("costComponents"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CostComponent> array = new List<CostComponent>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CostComponent.DeserializeCostComponent(item, options));
                            }
                            costComponents = array;
                            continue;
                        }
                        if (property0.NameEquals("securitySuitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            securitySuitability = new MigrateCloudSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("migrationGuidelines"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<SqlMigrationGuideline> array = new List<SqlMigrationGuideline>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SqlMigrationGuideline.DeserializeSqlMigrationGuideline(item, options));
                            }
                            migrationGuidelines = array;
                            continue;
                        }
                        if (property0.NameEquals("bootType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bootType = new MachineBootType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemType"u8))
                        {
                            operatingSystemType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemName"u8))
                        {
                            operatingSystemName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemVersion"u8))
                        {
                            operatingSystemVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatingSystemArchitecture"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            operatingSystemArchitecture = new GuestOperatingSystemArchitecture(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedTimestamp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            updatedTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("type"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            type0 = new AssessedMachineType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("datacenterMachineArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            datacenterMachineArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("datacenterManagementServerArmId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            datacenterManagementServerArmId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("datacenterManagementServerName"u8))
                        {
                            datacenterManagementServerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("megabytesOfMemory"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            megabytesOfMemory = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("numberOfCores"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfCores = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("confidenceRatingInPercentage"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            confidenceRatingInPercentage = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("percentageCoresUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentageCoresUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("percentageMemoryUtilization"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentageMemoryUtilization = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("suitability"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            suitability = new MigrateCloudSuitability(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("sizingCriterion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sizingCriterion = new AssessmentSizingCriterion(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new AssessedSqlMachineData(
                id,
                name,
                type,
                systemData.Value,
                biosGuid.Value,
                fqdn.Value,
                sqlInstances ?? new ChangeTrackingList<AssessedSqlInstanceSummary>(),
                Optional.ToNullable(suitabilityDetail),
                Optional.ToNullable(suitabilityExplanation),
                Optional.ToNullable(recommendedVmSize),
                Optional.ToNullable(recommendedVmFamily),
                productSupportStatus.Value,
                Optional.ToNullable(recommendedVmSizeNumberOfCores),
                Optional.ToNullable(recommendedVmSizeMegabytesOfMemory),
                Optional.ToNullable(monthlyComputeCost),
                disks ?? new ChangeTrackingDictionary<string, AssessedDataDisk>(),
                networkAdapters ?? new ChangeTrackingDictionary<string, SqlAssessedNetworkAdapter>(),
                Optional.ToNullable(monthlyBandwidthCost),
                Optional.ToNullable(monthlyStorageCost),
                costComponents ?? new ChangeTrackingList<CostComponent>(),
                Optional.ToNullable(securitySuitability),
                migrationGuidelines ?? new ChangeTrackingList<SqlMigrationGuideline>(),
                Optional.ToNullable(bootType),
                operatingSystemType.Value,
                operatingSystemName.Value,
                operatingSystemVersion.Value,
                Optional.ToNullable(operatingSystemArchitecture),
                Optional.ToNullable(createdTimestamp),
                Optional.ToNullable(updatedTimestamp),
                displayName.Value,
                Optional.ToNullable(type0),
                description.Value,
                datacenterMachineArmId.Value,
                datacenterManagementServerArmId.Value,
                datacenterManagementServerName.Value,
                Optional.ToNullable(megabytesOfMemory),
                Optional.ToNullable(numberOfCores),
                Optional.ToNullable(confidenceRatingInPercentage),
                Optional.ToNullable(percentageCoresUtilization),
                Optional.ToNullable(percentageMemoryUtilization),
                Optional.ToNullable(suitability),
                Optional.ToNullable(sizingCriterion),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AssessedSqlMachineData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlMachineData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlMachineData)} does not support '{options.Format}' format.");
            }
        }

        AssessedSqlMachineData IPersistableModel<AssessedSqlMachineData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AssessedSqlMachineData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAssessedSqlMachineData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AssessedSqlMachineData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<AssessedSqlMachineData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
