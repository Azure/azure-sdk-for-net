// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Migrate.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Migrate
{
    public partial class MigrateSqlAssessmentOptionData : IUtf8JsonSerializable, IJsonModel<MigrateSqlAssessmentOptionData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MigrateSqlAssessmentOptionData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MigrateSqlAssessmentOptionData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateSqlAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrateSqlAssessmentOptionData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(VmFamilies))
            {
                writer.WritePropertyName("vmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in VmFamilies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ReservedInstanceVmFamilies))
            {
                writer.WritePropertyName("reservedInstanceVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceVmFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(PremiumDiskVmFamilies))
            {
                writer.WritePropertyName("premiumDiskVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in PremiumDiskVmFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SavingsPlanVmFamilies))
            {
                writer.WritePropertyName("savingsPlanVmFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsPlanVmFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SavingsPlanSupportedLocations))
            {
                writer.WritePropertyName("savingsPlanSupportedLocations"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsPlanSupportedLocations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SavingsPlanSupportedLocationsForPaas))
            {
                writer.WritePropertyName("savingsPlanSupportedLocationsForPaas"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsPlanSupportedLocationsForPaas)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReservedInstanceSupportedLocationsForIaas))
            {
                writer.WritePropertyName("reservedInstanceSupportedLocationsForIaas"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedLocationsForIaas)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SavingsPlanSupportedOffers))
            {
                writer.WritePropertyName("savingsPlanSupportedOffers"u8);
                writer.WriteStartArray();
                foreach (var item in SavingsPlanSupportedOffers)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SqlSkus))
            {
                writer.WritePropertyName("sqlSkus"u8);
                writer.WriteStartArray();
                foreach (var item in SqlSkus)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReservedInstanceSqlTargets))
            {
                writer.WritePropertyName("reservedInstanceSqlTargets"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSqlTargets)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReservedInstanceSupportedLocations))
            {
                writer.WritePropertyName("reservedInstanceSupportedLocations"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedLocations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReservedInstanceSupportedCurrencies))
            {
                writer.WritePropertyName("reservedInstanceSupportedCurrencies"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedCurrencies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ReservedInstanceSupportedOffers))
            {
                writer.WritePropertyName("reservedInstanceSupportedOffers"u8);
                writer.WriteStartArray();
                foreach (var item in ReservedInstanceSupportedOffers)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SupportedOffers))
            {
                writer.WritePropertyName("supportedOffers"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedOffers)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MigrateSqlAssessmentOptionData IJsonModel<MigrateSqlAssessmentOptionData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateSqlAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MigrateSqlAssessmentOptionData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMigrateSqlAssessmentOptionData(document.RootElement, options);
        }

        internal static MigrateSqlAssessmentOptionData DeserializeMigrateSqlAssessmentOptionData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            IReadOnlyList<VmFamilyConfig> vmFamilies = default;
            IReadOnlyList<AzureVmFamily> reservedInstanceVmFamilies = default;
            IReadOnlyList<AzureVmFamily> premiumDiskVmFamilies = default;
            IList<AzureVmFamily> savingsPlanVmFamilies = default;
            IList<AzureLocation> savingsPlanSupportedLocations = default;
            IList<AzureLocation> savingsPlanSupportedLocationsForPaas = default;
            IList<AzureLocation> reservedInstanceSupportedLocationsForIaas = default;
            IList<AzureOfferCode> savingsPlanSupportedOffers = default;
            IList<SqlPaaSTargetConfig> sqlSkus = default;
            IList<MigrateTargetType> reservedInstanceSqlTargets = default;
            IList<AzureLocation> reservedInstanceSupportedLocations = default;
            IList<AzureCurrency> reservedInstanceSupportedCurrencies = default;
            IList<AzureOfferCode> reservedInstanceSupportedOffers = default;
            IList<AzureOfferCode> supportedOffers = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("vmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<VmFamilyConfig> array = new List<VmFamilyConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VmFamilyConfig.DeserializeVmFamilyConfig(item, options));
                            }
                            vmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureVmFamily> array = new List<AzureVmFamily>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureVmFamily(item.GetString()));
                            }
                            reservedInstanceVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("premiumDiskVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureVmFamily> array = new List<AzureVmFamily>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureVmFamily(item.GetString()));
                            }
                            premiumDiskVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("savingsPlanVmFamilies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureVmFamily> array = new List<AzureVmFamily>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureVmFamily(item.GetString()));
                            }
                            savingsPlanVmFamilies = array;
                            continue;
                        }
                        if (property0.NameEquals("savingsPlanSupportedLocations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureLocation> array = new List<AzureLocation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureLocation(item.GetString()));
                            }
                            savingsPlanSupportedLocations = array;
                            continue;
                        }
                        if (property0.NameEquals("savingsPlanSupportedLocationsForPaas"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureLocation> array = new List<AzureLocation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureLocation(item.GetString()));
                            }
                            savingsPlanSupportedLocationsForPaas = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedLocationsForIaas"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureLocation> array = new List<AzureLocation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureLocation(item.GetString()));
                            }
                            reservedInstanceSupportedLocationsForIaas = array;
                            continue;
                        }
                        if (property0.NameEquals("savingsPlanSupportedOffers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureOfferCode> array = new List<AzureOfferCode>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureOfferCode(item.GetString()));
                            }
                            savingsPlanSupportedOffers = array;
                            continue;
                        }
                        if (property0.NameEquals("sqlSkus"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<SqlPaaSTargetConfig> array = new List<SqlPaaSTargetConfig>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SqlPaaSTargetConfig.DeserializeSqlPaaSTargetConfig(item, options));
                            }
                            sqlSkus = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSqlTargets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<MigrateTargetType> array = new List<MigrateTargetType>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new MigrateTargetType(item.GetString()));
                            }
                            reservedInstanceSqlTargets = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedLocations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureLocation> array = new List<AzureLocation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureLocation(item.GetString()));
                            }
                            reservedInstanceSupportedLocations = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedCurrencies"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureCurrency> array = new List<AzureCurrency>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureCurrency(item.GetString()));
                            }
                            reservedInstanceSupportedCurrencies = array;
                            continue;
                        }
                        if (property0.NameEquals("reservedInstanceSupportedOffers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureOfferCode> array = new List<AzureOfferCode>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureOfferCode(item.GetString()));
                            }
                            reservedInstanceSupportedOffers = array;
                            continue;
                        }
                        if (property0.NameEquals("supportedOffers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AzureOfferCode> array = new List<AzureOfferCode>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new AzureOfferCode(item.GetString()));
                            }
                            supportedOffers = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MigrateSqlAssessmentOptionData(
                id,
                name,
                type,
                systemData,
                vmFamilies ?? new ChangeTrackingList<VmFamilyConfig>(),
                reservedInstanceVmFamilies ?? new ChangeTrackingList<AzureVmFamily>(),
                premiumDiskVmFamilies ?? new ChangeTrackingList<AzureVmFamily>(),
                savingsPlanVmFamilies ?? new ChangeTrackingList<AzureVmFamily>(),
                savingsPlanSupportedLocations ?? new ChangeTrackingList<AzureLocation>(),
                savingsPlanSupportedLocationsForPaas ?? new ChangeTrackingList<AzureLocation>(),
                reservedInstanceSupportedLocationsForIaas ?? new ChangeTrackingList<AzureLocation>(),
                savingsPlanSupportedOffers ?? new ChangeTrackingList<AzureOfferCode>(),
                sqlSkus ?? new ChangeTrackingList<SqlPaaSTargetConfig>(),
                reservedInstanceSqlTargets ?? new ChangeTrackingList<MigrateTargetType>(),
                reservedInstanceSupportedLocations ?? new ChangeTrackingList<AzureLocation>(),
                reservedInstanceSupportedCurrencies ?? new ChangeTrackingList<AzureCurrency>(),
                reservedInstanceSupportedOffers ?? new ChangeTrackingList<AzureOfferCode>(),
                supportedOffers ?? new ChangeTrackingList<AzureOfferCode>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MigrateSqlAssessmentOptionData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateSqlAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MigrateSqlAssessmentOptionData)} does not support '{options.Format}' format.");
            }
        }

        MigrateSqlAssessmentOptionData IPersistableModel<MigrateSqlAssessmentOptionData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MigrateSqlAssessmentOptionData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMigrateSqlAssessmentOptionData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MigrateSqlAssessmentOptionData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MigrateSqlAssessmentOptionData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
