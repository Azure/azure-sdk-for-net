// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_MigrateGroupResource
    {
        // GroupsOperations_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GroupsOperationsGetMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/GroupsOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "GroupsOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateGroupResource created on azure
            // for more information of creating MigrateGroupResource, please refer to the document of MigrateGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            ResourceIdentifier migrateGroupResourceId = MigrateGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            MigrateGroupResource migrateGroup = client.GetMigrateGroupResource(migrateGroupResourceId);

            // invoke the operation
            MigrateGroupResource result = await migrateGroup.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigrateGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GroupsOperations_Create_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_GroupsOperationsCreateMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/GroupsOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "GroupsOperations_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateGroupResource created on azure
            // for more information of creating MigrateGroupResource, please refer to the document of MigrateGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            ResourceIdentifier migrateGroupResourceId = MigrateGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            MigrateGroupResource migrateGroup = client.GetMigrateGroupResource(migrateGroupResourceId);

            // invoke the operation
            MigrateGroupData data = new MigrateGroupData()
            {
                ProvisioningState = MigrateProvisioningState.Succeeded,
                GroupType = MigrateGroupType.Default,
            };
            ArmOperation<MigrateGroupResource> lro = await migrateGroup.UpdateAsync(WaitUntil.Completed, data);
            MigrateGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigrateGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GroupsOperations_Delete_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_GroupsOperationsDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/GroupsOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "GroupsOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateGroupResource created on azure
            // for more information of creating MigrateGroupResource, please refer to the document of MigrateGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            ResourceIdentifier migrateGroupResourceId = MigrateGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            MigrateGroupResource migrateGroup = client.GetMigrateGroupResource(migrateGroupResourceId);

            // invoke the operation
            await migrateGroup.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // GroupsOperations_UpdateMachines_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateMachines_GroupsOperationsUpdateMachinesMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/GroupsOperations_UpdateMachines_MaximumSet_Gen.json
            // this example is just showing the usage of "GroupsOperations_UpdateMachines" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateGroupResource created on azure
            // for more information of creating MigrateGroupResource, please refer to the document of MigrateGroupResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            ResourceIdentifier migrateGroupResourceId = MigrateGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName);
            MigrateGroupResource migrateGroup = client.GetMigrateGroupResource(migrateGroupResourceId);

            // invoke the operation
            MigrateGroupUpdateContent content = new MigrateGroupUpdateContent()
            {
                ETag = new ETag("*"),
                Properties = new MigrateGroupUpdateProperties()
                {
                    OperationType = MigrateGroupUpdateOperationType.Add,
                    Machines =
{
"/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/ayagrawrg/providers/Microsoft.Migrate/assessmentprojects/app18700project/machines/18895660-c5e5-4247-8cfc-cd24e1fe57f3"
},
                },
            };
            ArmOperation<MigrateGroupResource> lro = await migrateGroup.UpdateMachinesAsync(WaitUntil.Completed, content);
            MigrateGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigrateGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
