// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_AssessedSqlRecommendedEntityCollection
    {
        // AssessedSqlRecommendedEntityOperations_ListBySqlAssessmentV2_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_AssessedSqlRecommendedEntityOperationsListBySqlAssessmentV2MaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessedSqlRecommendedEntityOperations_ListBySqlAssessmentV2_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessedSqlRecommendedEntityOperations_ListBySqlAssessmentV2" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateSqlAssessmentV2Resource created on azure
            // for more information of creating MigrateSqlAssessmentV2Resource, please refer to the document of MigrateSqlAssessmentV2Resource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string groupName = "test_fci_hadr";
            string assessmentName = "test_swagger_1";
            ResourceIdentifier migrateSqlAssessmentV2ResourceId = MigrateSqlAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateSqlAssessmentV2Resource migrateSqlAssessmentV2 = client.GetMigrateSqlAssessmentV2Resource(migrateSqlAssessmentV2ResourceId);

            // get the collection of this AssessedSqlRecommendedEntityResource
            AssessedSqlRecommendedEntityCollection collection = migrateSqlAssessmentV2.GetAssessedSqlRecommendedEntities();

            // invoke the operation and iterate over the result
            string filter = "(contains(Properties/InstanceName,'MSSQLSERVER'))";
            int? pageSize = 23;
            string continuationToken = null;
            int? totalRecordCount = 1;
            await foreach (AssessedSqlRecommendedEntityResource item in collection.GetAllAsync(filter: filter, pageSize: pageSize, continuationToken: continuationToken, totalRecordCount: totalRecordCount))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AssessedSqlRecommendedEntityData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // AssessedSqlRecommendedEntityOperations_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_AssessedSqlRecommendedEntityOperationsGetMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessedSqlRecommendedEntityOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessedSqlRecommendedEntityOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateSqlAssessmentV2Resource created on azure
            // for more information of creating MigrateSqlAssessmentV2Resource, please refer to the document of MigrateSqlAssessmentV2Resource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string groupName = "test_fci_hadr";
            string assessmentName = "test_swagger_1";
            ResourceIdentifier migrateSqlAssessmentV2ResourceId = MigrateSqlAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateSqlAssessmentV2Resource migrateSqlAssessmentV2 = client.GetMigrateSqlAssessmentV2Resource(migrateSqlAssessmentV2ResourceId);

            // get the collection of this AssessedSqlRecommendedEntityResource
            AssessedSqlRecommendedEntityCollection collection = migrateSqlAssessmentV2.GetAssessedSqlRecommendedEntities();

            // invoke the operation
            string recommendedAssessedEntityName = "cc64c9dc-b38e-435d-85ad-d509df5d92c6";
            AssessedSqlRecommendedEntityResource result = await collection.GetAsync(recommendedAssessedEntityName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AssessedSqlRecommendedEntityData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // AssessedSqlRecommendedEntityOperations_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_AssessedSqlRecommendedEntityOperationsGetMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessedSqlRecommendedEntityOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessedSqlRecommendedEntityOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateSqlAssessmentV2Resource created on azure
            // for more information of creating MigrateSqlAssessmentV2Resource, please refer to the document of MigrateSqlAssessmentV2Resource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string groupName = "test_fci_hadr";
            string assessmentName = "test_swagger_1";
            ResourceIdentifier migrateSqlAssessmentV2ResourceId = MigrateSqlAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateSqlAssessmentV2Resource migrateSqlAssessmentV2 = client.GetMigrateSqlAssessmentV2Resource(migrateSqlAssessmentV2ResourceId);

            // get the collection of this AssessedSqlRecommendedEntityResource
            AssessedSqlRecommendedEntityCollection collection = migrateSqlAssessmentV2.GetAssessedSqlRecommendedEntities();

            // invoke the operation
            string recommendedAssessedEntityName = "cc64c9dc-b38e-435d-85ad-d509df5d92c6";
            bool result = await collection.ExistsAsync(recommendedAssessedEntityName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // AssessedSqlRecommendedEntityOperations_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_AssessedSqlRecommendedEntityOperationsGetMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessedSqlRecommendedEntityOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessedSqlRecommendedEntityOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateSqlAssessmentV2Resource created on azure
            // for more information of creating MigrateSqlAssessmentV2Resource, please refer to the document of MigrateSqlAssessmentV2Resource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "rgmigrate";
            string projectName = "fci-test6904project";
            string groupName = "test_fci_hadr";
            string assessmentName = "test_swagger_1";
            ResourceIdentifier migrateSqlAssessmentV2ResourceId = MigrateSqlAssessmentV2Resource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateSqlAssessmentV2Resource migrateSqlAssessmentV2 = client.GetMigrateSqlAssessmentV2Resource(migrateSqlAssessmentV2ResourceId);

            // get the collection of this AssessedSqlRecommendedEntityResource
            AssessedSqlRecommendedEntityCollection collection = migrateSqlAssessmentV2.GetAssessedSqlRecommendedEntities();

            // invoke the operation
            string recommendedAssessedEntityName = "cc64c9dc-b38e-435d-85ad-d509df5d92c6";
            NullableResponse<AssessedSqlRecommendedEntityResource> response = await collection.GetIfExistsAsync(recommendedAssessedEntityName);
            AssessedSqlRecommendedEntityResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AssessedSqlRecommendedEntityData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
