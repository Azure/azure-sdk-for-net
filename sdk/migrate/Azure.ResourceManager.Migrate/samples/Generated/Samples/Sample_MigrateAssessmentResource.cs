// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Migrate;
using Azure.ResourceManager.Migrate.Models;

namespace Azure.ResourceManager.Migrate.Samples
{
    public partial class Sample_MigrateAssessmentResource
    {
        // AssessmentsOperations_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_AssessmentsOperationsGetMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessmentsOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessmentsOperations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateAssessmentResource created on azure
            // for more information of creating MigrateAssessmentResource, please refer to the document of MigrateAssessmentResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            string assessmentName = "asm1";
            ResourceIdentifier migrateAssessmentResourceId = MigrateAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateAssessmentResource migrateAssessment = client.GetMigrateAssessmentResource(migrateAssessmentResourceId);

            // invoke the operation
            MigrateAssessmentResource result = await migrateAssessment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigrateAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // AssessmentsOperations_Create_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_AssessmentsOperationsCreateMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessmentsOperations_Create_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessmentsOperations_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateAssessmentResource created on azure
            // for more information of creating MigrateAssessmentResource, please refer to the document of MigrateAssessmentResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            string assessmentName = "asm1";
            ResourceIdentifier migrateAssessmentResourceId = MigrateAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateAssessmentResource migrateAssessment = client.GetMigrateAssessmentResource(migrateAssessmentResourceId);

            // invoke the operation
            MigrateAssessmentData data = new MigrateAssessmentData()
            {
                ProvisioningState = MigrateProvisioningState.Succeeded,
                EASubscriptionId = "kwsu",
                AzurePricingTier = AzurePricingTier.Standard,
                AzureStorageRedundancy = AzureStorageRedundancy.Unknown,
                ReservedInstance = AzureReservedInstance.None,
                AzureHybridUseBenefit = AzureHybridUseBenefit.Unknown,
                AzureDiskTypes =
{
AzureDiskType.Premium,AzureDiskType.StandardSsd
},
                AzureVmFamilies =
{
AzureVmFamily.DSeries,AzureVmFamily.Lsv2Series,AzureVmFamily.MSeries,AzureVmFamily.Mdsv2Series,AzureVmFamily.Msv2Series,AzureVmFamily.Mv2Series
},
                VmUptime = new VmUptime()
                {
                    DaysPerMonth = 13,
                    HoursPerDay = 26,
                },
                AzureLocation = new AzureLocation("njxbwdtsxzhichsnk"),
                AzureOfferCode = AzureOfferCode.Unknown,
                Currency = AzureCurrency.Unknown,
                ScalingFactor = 24,
                Percentile = PercentileOfUtilization.Percentile50,
                TimeRange = AssessmentTimeRange.Day,
                PerfDataStartOn = DateTimeOffset.Parse("2023-09-26T09:36:48.491Z"),
                PerfDataEndOn = DateTimeOffset.Parse("2023-09-26T09:36:48.491Z"),
                DiscountPercentage = 6,
                SizingCriterion = AssessmentSizingCriterion.PerformanceBased,
            };
            ArmOperation<MigrateAssessmentResource> lro = await migrateAssessment.UpdateAsync(WaitUntil.Completed, data);
            MigrateAssessmentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MigrateAssessmentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // AssessmentsOperations_Delete_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_AssessmentsOperationsDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessmentsOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessmentsOperations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateAssessmentResource created on azure
            // for more information of creating MigrateAssessmentResource, please refer to the document of MigrateAssessmentResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            string assessmentName = "asm1";
            ResourceIdentifier migrateAssessmentResourceId = MigrateAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateAssessmentResource migrateAssessment = client.GetMigrateAssessmentResource(migrateAssessmentResourceId);

            // invoke the operation
            await migrateAssessment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // AssessmentsOperations_DownloadUrl_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DownloadUrl_AssessmentsOperationsDownloadUrlMaximumSetGen()
        {
            // Generated from example definition: specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/AssessmentsOperations_DownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "AssessmentsOperations_DownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this MigrateAssessmentResource created on azure
            // for more information of creating MigrateAssessmentResource, please refer to the document of MigrateAssessmentResource
            string subscriptionId = "4bd2aa0f-2bd2-4d67-91a8-5a4533d58600";
            string resourceGroupName = "ayagrawrg";
            string projectName = "app18700project";
            string groupName = "kuchatur-test";
            string assessmentName = "asm1";
            ResourceIdentifier migrateAssessmentResourceId = MigrateAssessmentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, projectName, groupName, assessmentName);
            MigrateAssessmentResource migrateAssessment = client.GetMigrateAssessmentResource(migrateAssessmentResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
            {
            });
            ArmOperation<AssessmentReportDownloadUri> lro = await migrateAssessment.DownloadUrlAsync(WaitUntil.Completed, body);
            AssessmentReportDownloadUri result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
