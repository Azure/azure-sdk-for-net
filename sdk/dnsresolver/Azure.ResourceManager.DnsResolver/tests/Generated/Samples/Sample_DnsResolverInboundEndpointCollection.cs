// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DnsResolver.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.DnsResolver
{
    public partial class Sample_DnsResolverInboundEndpointCollection
    {
        // Upsert inbound endpoint for DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_UpsertInboundEndpointForDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/InboundEndpoint_Put.json
            // this example is just showing the usage of "InboundEndpoints_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // get the collection of this DnsResolverInboundEndpointResource
            DnsResolverInboundEndpointCollection collection = dnsResolver.GetDnsResolverInboundEndpoints();

            // invoke the operation
            string inboundEndpointName = "sampleInboundEndpoint";
            DnsResolverInboundEndpointData data = new DnsResolverInboundEndpointData(new AzureLocation("westus2"), new InboundEndpointIPConfiguration[]
            {
new InboundEndpointIPConfiguration(new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/0403cfa9-9659-4f33-9f30-1f191c51d111/resourceGroups/sampleVnetResourceGroupName/providers/Microsoft.Network/virtualNetworks/sampleVirtualNetwork/subnets/sampleSubnet"),
})
{
PrivateIPAddress = "255.255.255.255",
PrivateIPAllocationMethod = InboundEndpointIPAllocationMethod.Static,
}
            })
            {
                Tags =
{
["key1"] = "value1",
},
            };
            ArmOperation<DnsResolverInboundEndpointResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, inboundEndpointName, data);
            DnsResolverInboundEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsResolverInboundEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Retrieve inbound endpoint for DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_RetrieveInboundEndpointForDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/InboundEndpoint_Get.json
            // this example is just showing the usage of "InboundEndpoints_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // get the collection of this DnsResolverInboundEndpointResource
            DnsResolverInboundEndpointCollection collection = dnsResolver.GetDnsResolverInboundEndpoints();

            // invoke the operation
            string inboundEndpointName = "sampleInboundEndpoint";
            DnsResolverInboundEndpointResource result = await collection.GetAsync(inboundEndpointName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsResolverInboundEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Retrieve inbound endpoint for DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_RetrieveInboundEndpointForDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/InboundEndpoint_Get.json
            // this example is just showing the usage of "InboundEndpoints_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // get the collection of this DnsResolverInboundEndpointResource
            DnsResolverInboundEndpointCollection collection = dnsResolver.GetDnsResolverInboundEndpoints();

            // invoke the operation
            string inboundEndpointName = "sampleInboundEndpoint";
            bool result = await collection.ExistsAsync(inboundEndpointName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // List inbound endpoints by DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListInboundEndpointsByDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/InboundEndpoint_List.json
            // this example is just showing the usage of "InboundEndpoints_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // get the collection of this DnsResolverInboundEndpointResource
            DnsResolverInboundEndpointCollection collection = dnsResolver.GetDnsResolverInboundEndpoints();

            // invoke the operation and iterate over the result
            await foreach (DnsResolverInboundEndpointResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsResolverInboundEndpointData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
