// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DnsResolver.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.DnsResolver
{
    public partial class Sample_DnsResolverResource
    {
        // Update DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/DnsResolver_Patch.json
            // this example is just showing the usage of "DnsResolvers_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // invoke the operation
            DnsResolverPatch patch = new DnsResolverPatch()
            {
                Tags =
{
["key1"] = "value1",
},
            };
            ArmOperation<DnsResolverResource> lro = await dnsResolver.UpdateAsync(WaitUntil.Completed, patch);
            DnsResolverResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsResolverData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/DnsResolver_Delete.json
            // this example is just showing the usage of "DnsResolvers_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // invoke the operation
            await dnsResolver.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Retrieve DNS resolver
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_RetrieveDNSResolver()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/DnsResolver_Get.json
            // this example is just showing the usage of "DnsResolvers_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DnsResolverResource created on azure
            // for more information of creating DnsResolverResource, please refer to the document of DnsResolverResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            string dnsResolverName = "sampleDnsResolver";
            ResourceIdentifier dnsResolverResourceId = DnsResolverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, dnsResolverName);
            DnsResolverResource dnsResolver = client.GetDnsResolverResource(dnsResolverResourceId);

            // invoke the operation
            DnsResolverResource result = await dnsResolver.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DnsResolverData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List DNS resolvers by subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetDnsResolvers_ListDNSResolversBySubscription()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/DnsResolver_ListBySubscription.json
            // this example is just showing the usage of "DnsResolvers_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (DnsResolverResource item in subscriptionResource.GetDnsResolversAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DnsResolverData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List DNS resolvers by virtual network
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetDnsResolvers_ListDNSResolversByVirtualNetwork()
        {
            // Generated from example definition: specification/dnsresolver/resource-manager/Microsoft.Network/stable/2022-07-01/examples/DnsResolver_ListByVirtualNetwork.json
            // this example is just showing the usage of "DnsResolvers_ListByVirtualNetwork" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "abdd4249-9f34-4cc6-8e42-c2e32110603e";
            string resourceGroupName = "sampleResourceGroup";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // invoke the operation and iterate over the result
            string virtualNetworkName = "sampleVirtualNetwork";
            await foreach (WritableSubResource item in resourceGroupResource.GetDnsResolversAsync(virtualNetworkName))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
