// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.DnsResolver.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DnsResolver
{
    /// <summary> A class representing collection of DnsResolver and their operations over its parent. </summary>
    public partial class DnsResolverCollection : ArmCollection, IEnumerable<DnsResolver>, IAsyncEnumerable<DnsResolver>
    {
        private readonly ClientDiagnostics _dnsResolverClientDiagnostics;
        private readonly DnsResolversRestOperations _dnsResolverRestClient;

        /// <summary> Initializes a new instance of the <see cref="DnsResolverCollection"/> class for mocking. </summary>
        protected DnsResolverCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DnsResolverCollection"/> class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DnsResolverCollection(ArmResource parent) : base(parent)
        {
            _dnsResolverClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DnsResolver", DnsResolver.ResourceType.Namespace, DiagnosticOptions);
            ArmClient.TryGetApiVersion(DnsResolver.ResourceType, out string dnsResolverApiVersion);
            _dnsResolverRestClient = new DnsResolversRestOperations(_dnsResolverClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, dnsResolverApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroup.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroup.ResourceType), nameof(id));
        }

        // Collection level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DnsResolvers_CreateOrUpdate
        /// <summary> Creates or updates a DNS resolver. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="parameters"> Parameters supplied to the CreateOrUpdate operation. </param>
        /// <param name="ifMatch"> ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. </param>
        /// <param name="ifNoneMatch"> Set to &apos;*&apos; to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual DnsResolverCreateOrUpdateOperation CreateOrUpdate(bool waitForCompletion, string dnsResolverName, DnsResolverData parameters, string ifMatch = null, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dnsResolverRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, parameters, ifMatch, ifNoneMatch, cancellationToken);
                var operation = new DnsResolverCreateOrUpdateOperation(ArmClient, _dnsResolverClientDiagnostics, Pipeline, _dnsResolverRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, parameters, ifMatch, ifNoneMatch).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DnsResolvers_CreateOrUpdate
        /// <summary> Creates or updates a DNS resolver. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="parameters"> Parameters supplied to the CreateOrUpdate operation. </param>
        /// <param name="ifMatch"> ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. </param>
        /// <param name="ifNoneMatch"> Set to &apos;*&apos; to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<DnsResolverCreateOrUpdateOperation> CreateOrUpdateAsync(bool waitForCompletion, string dnsResolverName, DnsResolverData parameters, string ifMatch = null, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dnsResolverRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, parameters, ifMatch, ifNoneMatch, cancellationToken).ConfigureAwait(false);
                var operation = new DnsResolverCreateOrUpdateOperation(ArmClient, _dnsResolverClientDiagnostics, Pipeline, _dnsResolverRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, parameters, ifMatch, ifNoneMatch).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DnsResolvers_Get
        /// <summary> Gets properties of a DNS resolver. </summary>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> is null. </exception>
        public virtual Response<DnsResolver> Get(string dnsResolverName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.Get");
            scope.Start();
            try
            {
                var response = _dnsResolverRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, cancellationToken);
                if (response.Value == null)
                    throw _dnsResolverClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DnsResolver(ArmClient, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DnsResolvers_Get
        /// <summary> Gets properties of a DNS resolver. </summary>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> is null. </exception>
        public async virtual Task<Response<DnsResolver>> GetAsync(string dnsResolverName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.Get");
            scope.Start();
            try
            {
                var response = await _dnsResolverRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _dnsResolverClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new DnsResolver(ArmClient, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> is null. </exception>
        public virtual Response<DnsResolver> GetIfExists(string dnsResolverName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dnsResolverRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<DnsResolver>(null, response.GetRawResponse());
                return Response.FromValue(new DnsResolver(ArmClient, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> is null. </exception>
        public async virtual Task<Response<DnsResolver>> GetIfExistsAsync(string dnsResolverName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dnsResolverRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, dnsResolverName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<DnsResolver>(null, response.GetRawResponse());
                return Response.FromValue(new DnsResolver(ArmClient, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> is null. </exception>
        public virtual Response<bool> Exists(string dnsResolverName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(dnsResolverName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="dnsResolverName"> The name of the DNS resolver. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dnsResolverName"/> is empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dnsResolverName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string dnsResolverName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dnsResolverName, nameof(dnsResolverName));

            using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(dnsResolverName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DnsResolvers_ListByResourceGroup
        /// <summary> Lists DNS resolvers within a resource group. </summary>
        /// <param name="top"> The maximum number of results to return. If not specified, returns up to 100 results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DnsResolver" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DnsResolver> GetAll(int? top = null, CancellationToken cancellationToken = default)
        {
            Page<DnsResolver> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dnsResolverRestClient.ListByResourceGroup(Id.SubscriptionId, Id.ResourceGroupName, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DnsResolver(ArmClient, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DnsResolver> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _dnsResolverRestClient.ListByResourceGroupNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DnsResolver(ArmClient, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        /// OperationId: DnsResolvers_ListByResourceGroup
        /// <summary> Lists DNS resolvers within a resource group. </summary>
        /// <param name="top"> The maximum number of results to return. If not specified, returns up to 100 results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DnsResolver" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DnsResolver> GetAllAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<DnsResolver>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dnsResolverRestClient.ListByResourceGroupAsync(Id.SubscriptionId, Id.ResourceGroupName, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DnsResolver(ArmClient, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DnsResolver>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _dnsResolverClientDiagnostics.CreateScope("DnsResolverCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _dnsResolverRestClient.ListByResourceGroupNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DnsResolver(ArmClient, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<DnsResolver> IEnumerable<DnsResolver>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DnsResolver> IAsyncEnumerable<DnsResolver>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
