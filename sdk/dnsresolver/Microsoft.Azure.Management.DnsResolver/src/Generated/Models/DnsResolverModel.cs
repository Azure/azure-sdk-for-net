// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DnsResolver.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes a DNS resolver.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DnsResolverModel : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the DnsResolverModel class.
        /// </summary>
        public DnsResolverModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DnsResolverModel class.
        /// </summary>
        /// <param name="id">Fully qualified ID for the resource. Example -
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolvers/{dnsResolverName}'.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource. Example -
        /// 'Microsoft.Network/dnsResolvers'.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="location">The Azure Region where the resource
        /// lives.</param>
        /// <param name="etag">ETag of the DNS resolver.</param>
        /// <param name="virtualNetwork">The reference to the virtual network.
        /// This cannot be changed after creation.</param>
        /// <param name="maxNumberOfInboundEndpoints">The maximum number of
        /// inbound endpoints that can be created for the DNS resolver. This is
        /// a read-only property and any attempt to set this value will be
        /// ignored.</param>
        /// <param name="numberOfInboundEndpoints">The current number of
        /// inbound endpoints for the DNS resolver. This is a read-only
        /// property and any attempt to set this value will be ignored.</param>
        /// <param name="maxNumberOfOutboundEndpoints">The maximum number of
        /// outbound endpoints that can be created for the DNS resolver. This
        /// is a read-only property and any attempt to set this value will be
        /// ignored.</param>
        /// <param name="numberOfOutboundEndpoints">The current number of
        /// outbound endpoints for the DNS resolver. This is a read-only
        /// property and any attempt to set this value will be ignored.</param>
        /// <param name="dnsResolverState">The current status of the DNS
        /// resolver. This is a read-only property and any attempt to set this
        /// value will be ignored. Possible values include: 'Connected',
        /// 'Disconnected'</param>
        /// <param name="provisioningState">The current provisioning state of
        /// the DNS resolver. This is a read-only property and any attempt to
        /// set this value will be ignored. Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'</param>
        /// <param name="resourceGuid">The resourceGuid property of the DNS
        /// resolver resource.</param>
        public DnsResolverModel(string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string location = default(string), string etag = default(string), SubResource virtualNetwork = default(SubResource), long? maxNumberOfInboundEndpoints = default(long?), long? numberOfInboundEndpoints = default(long?), long? maxNumberOfOutboundEndpoints = default(long?), long? numberOfOutboundEndpoints = default(long?), string dnsResolverState = default(string), string provisioningState = default(string), string resourceGuid = default(string))
            : base(id, name, type, tags, location)
        {
            Etag = etag;
            VirtualNetwork = virtualNetwork;
            MaxNumberOfInboundEndpoints = maxNumberOfInboundEndpoints;
            NumberOfInboundEndpoints = numberOfInboundEndpoints;
            MaxNumberOfOutboundEndpoints = maxNumberOfOutboundEndpoints;
            NumberOfOutboundEndpoints = numberOfOutboundEndpoints;
            DnsResolverState = dnsResolverState;
            ProvisioningState = provisioningState;
            ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets eTag of the DNS resolver.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets or sets the reference to the virtual network. This cannot be
        /// changed after creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNetwork")]
        public SubResource VirtualNetwork { get; set; }

        /// <summary>
        /// Gets the maximum number of inbound endpoints that can be created
        /// for the DNS resolver. This is a read-only property and any attempt
        /// to set this value will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxNumberOfInboundEndpoints")]
        public long? MaxNumberOfInboundEndpoints { get; private set; }

        /// <summary>
        /// Gets the current number of inbound endpoints for the DNS resolver.
        /// This is a read-only property and any attempt to set this value will
        /// be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfInboundEndpoints")]
        public long? NumberOfInboundEndpoints { get; private set; }

        /// <summary>
        /// Gets the maximum number of outbound endpoints that can be created
        /// for the DNS resolver. This is a read-only property and any attempt
        /// to set this value will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxNumberOfOutboundEndpoints")]
        public long? MaxNumberOfOutboundEndpoints { get; private set; }

        /// <summary>
        /// Gets the current number of outbound endpoints for the DNS resolver.
        /// This is a read-only property and any attempt to set this value will
        /// be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfOutboundEndpoints")]
        public long? NumberOfOutboundEndpoints { get; private set; }

        /// <summary>
        /// Gets the current status of the DNS resolver. This is a read-only
        /// property and any attempt to set this value will be ignored.
        /// Possible values include: 'Connected', 'Disconnected'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsResolverState")]
        public string DnsResolverState { get; private set; }

        /// <summary>
        /// Gets the current provisioning state of the DNS resolver. This is a
        /// read-only property and any attempt to set this value will be
        /// ignored. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the resourceGuid property of the DNS resolver resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid { get; private set; }

    }
}
