// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DnsResolver
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ForwardingRulesOperations.
    /// </summary>
    public static partial class ForwardingRulesOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a forwarding rule in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            public static ForwardingRule CreateOrUpdate(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, ForwardingRule parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a forwarding rule in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ForwardingRule> CreateOrUpdateAsync(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, ForwardingRule parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a forwarding rule in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            public static ForwardingRule Update(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, ForwardingRulePatch parameters, string ifMatch = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a forwarding rule in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ForwardingRule> UpdateAsync(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, ForwardingRulePatch parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a forwarding rule in a DNS forwarding ruleset. WARNING: This
            /// operation cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            public static void Delete(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, string ifMatch = default(string))
            {
                operations.DeleteAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a forwarding rule in a DNS forwarding ruleset. WARNING: This
            /// operation cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets properties of a forwarding rule in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            public static ForwardingRule Get(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName)
            {
                return operations.GetAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of a forwarding rule in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='forwardingRuleName'>
            /// The name of the forwarding rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ForwardingRule> GetAsync(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, string forwardingRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, forwardingRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists forwarding rules in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            public static IPage<ForwardingRule> List(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, int? top = default(int?))
            {
                return operations.ListAsync(resourceGroupName, dnsForwardingRulesetName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists forwarding rules in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ForwardingRule>> ListAsync(this IForwardingRulesOperations operations, string resourceGroupName, string dnsForwardingRulesetName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists forwarding rules in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ForwardingRule> ListNext(this IForwardingRulesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists forwarding rules in a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ForwardingRule>> ListNextAsync(this IForwardingRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
