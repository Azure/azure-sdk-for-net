// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DnsResolver
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OutboundEndpointsOperations.
    /// </summary>
    public static partial class OutboundEndpointsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            public static OutboundEndpoint CreateOrUpdate(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, OutboundEndpoint parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OutboundEndpoint> CreateOrUpdateAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, OutboundEndpoint parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='tags'>
            /// Tags for outbound endpoint.
            /// </param>
            public static OutboundEndpoint Update(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='tags'>
            /// Tags for outbound endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OutboundEndpoint> UpdateAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an outbound endpoint for a DNS resolver. WARNING: This operation
            /// cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            public static void Delete(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string))
            {
                operations.DeleteAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an outbound endpoint for a DNS resolver. WARNING: This operation
            /// cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets properties of an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            public static OutboundEndpoint Get(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName)
            {
                return operations.GetAsync(resourceGroupName, dnsResolverName, outboundEndpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OutboundEndpoint> GetAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists outbound endpoints for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            public static IPage<OutboundEndpoint> List(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, int? top = default(int?))
            {
                return operations.ListAsync(resourceGroupName, dnsResolverName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists outbound endpoints for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OutboundEndpoint>> ListAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, dnsResolverName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            public static OutboundEndpoint BeginCreateOrUpdate(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, OutboundEndpoint parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OutboundEndpoint> BeginCreateOrUpdateAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, OutboundEndpoint parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='tags'>
            /// Tags for outbound endpoint.
            /// </param>
            public static OutboundEndpoint BeginUpdate(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an outbound endpoint for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='tags'>
            /// Tags for outbound endpoint.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OutboundEndpoint> BeginUpdateAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an outbound endpoint for a DNS resolver. WARNING: This operation
            /// cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            public static void BeginDelete(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string))
            {
                operations.BeginDeleteAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an outbound endpoint for a DNS resolver. WARNING: This operation
            /// cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsResolverName'>
            /// The name of the DNS resolver.
            /// </param>
            /// <param name='outboundEndpointName'>
            /// The name of the outbound endpoint for the DNS resolver.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IOutboundEndpointsOperations operations, string resourceGroupName, string dnsResolverName, string outboundEndpointName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, dnsResolverName, outboundEndpointName, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists outbound endpoints for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<OutboundEndpoint> ListNext(this IOutboundEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists outbound endpoints for a DNS resolver.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<OutboundEndpoint>> ListNextAsync(this IOutboundEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
