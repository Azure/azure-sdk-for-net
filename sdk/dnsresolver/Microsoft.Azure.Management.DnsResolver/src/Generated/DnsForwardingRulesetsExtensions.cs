// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DnsResolver
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DnsForwardingRulesets.
    /// </summary>
    public static partial class DnsForwardingRulesetsExtensions
    {
            /// <summary>
            /// Creates or updates a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            public static DnsForwardingRuleset CreateOrUpdate(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, DnsForwardingRuleset parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new resource to be created, but to prevent updating
            /// an existing resource. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnsForwardingRuleset> CreateOrUpdateAsync(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, DnsForwardingRuleset parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            public static DnsForwardingRuleset Update(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters, string ifMatch = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a DNS forwarding ruleset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnsForwardingRuleset> UpdateAsync(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, DnsForwardingRulesetPatch parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone.
            /// All forwarding rules within the ruleset will be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            public static void Delete(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, string ifMatch = default(string))
            {
                operations.DeleteAsync(resourceGroupName, dnsForwardingRulesetName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a DNS forwarding ruleset. WARNING: This operation cannot be undone.
            /// All forwarding rules within the ruleset will be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the resource. Omit this value to always overwrite the current
            /// resource. Specify the last-seen ETag value to prevent accidentally
            /// overwriting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a DNS forwarding ruleset properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            public static DnsForwardingRuleset Get(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName)
            {
                return operations.GetAsync(resourceGroupName, dnsForwardingRulesetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a DNS forwarding ruleset properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dnsForwardingRulesetName'>
            /// The name of the DNS forwarding ruleset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnsForwardingRuleset> GetAsync(this IDnsForwardingRulesets operations, string resourceGroupName, string dnsForwardingRulesetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dnsForwardingRulesetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists DNS forwarding rulesets within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            public static DnsForwardingRulesetListResult ListByResourceGroup(this IDnsForwardingRulesets operations, string resourceGroupName, int? top = default(int?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists DNS forwarding rulesets within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnsForwardingRulesetListResult> ListByResourceGroupAsync(this IDnsForwardingRulesets operations, string resourceGroupName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists DNS forwarding rulesets in all resource groups of a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            public static DnsForwardingRulesetListResult List(this IDnsForwardingRulesets operations, int? top = default(int?))
            {
                return operations.ListAsync(top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists DNS forwarding rulesets in all resource groups of a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DnsForwardingRulesetListResult> ListAsync(this IDnsForwardingRulesets operations, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists DNS forwarding ruleset resource IDs attached to a virtual network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            public static VirtualNetworkDnsForwardingRulesetListResult ListByVirtualNetwork(this IDnsForwardingRulesets operations, string resourceGroupName, string virtualNetworkName, int? top = default(int?))
            {
                return operations.ListByVirtualNetworkAsync(resourceGroupName, virtualNetworkName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists DNS forwarding ruleset resource IDs attached to a virtual network.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='virtualNetworkName'>
            /// The name of the virtual network.
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. If not specified, returns up to
            /// 100 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualNetworkDnsForwardingRulesetListResult> ListByVirtualNetworkAsync(this IDnsForwardingRulesets operations, string resourceGroupName, string virtualNetworkName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByVirtualNetworkWithHttpMessagesAsync(resourceGroupName, virtualNetworkName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
