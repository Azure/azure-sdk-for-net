// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    /// <summary> Detection results for the given resultId. </summary>
    public partial class MultivariateDetectionResult
    {
        /// <summary> Initializes a new instance of MultivariateDetectionResult. </summary>
        /// <param name="resultId"></param>
        /// <param name="summary"></param>
        /// <param name="results"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="resultId"/>, <paramref name="summary"/> or <paramref name="results"/> is null. </exception>
        internal MultivariateDetectionResult(string resultId, MultivariateBatchDetectionResultSummary summary, IEnumerable<AnomalyState> results)
        {
            Argument.AssertNotNull(resultId, nameof(resultId));
            Argument.AssertNotNull(summary, nameof(summary));
            Argument.AssertNotNull(results, nameof(results));

            ResultId = resultId;
            Summary = summary;
            Results = results.ToList();
        }

        /// <summary> Initializes a new instance of MultivariateDetectionResult. </summary>
        /// <param name="resultId"></param>
        /// <param name="summary"></param>
        /// <param name="results"></param>
        internal MultivariateDetectionResult(string resultId, MultivariateBatchDetectionResultSummary summary, IReadOnlyList<AnomalyState> results)
        {
            ResultId = resultId;
            Summary = summary;
            Results = results.ToList();
        }

        /// <summary> Gets the result id. </summary>
        public string ResultId { get; }
        /// <summary> Gets the summary. </summary>
        public MultivariateBatchDetectionResultSummary Summary { get; }
        /// <summary> Gets the results. </summary>
        public IReadOnlyList<AnomalyState> Results { get; }
    }
}
