<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DetectUnivariateEntireSeriesAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateEntireSeriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = await client.DetectUnivariateEntireSeriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
]]></code>
This sample shows how to call DetectUnivariateEntireSeriesAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = await client.DetectUnivariateEntireSeriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("severity")[0].ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateEntireSeries(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateEntireSeries and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = client.DetectUnivariateEntireSeries(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
]]></code>
This sample shows how to call DetectUnivariateEntireSeries with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = client.DetectUnivariateEntireSeries(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("severity")[0].ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPointAsync(UnivariateDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateLastPointAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
});
Response<UnivariateLastDetectionResult> response = await client.DetectUnivariateLastPointAsync(options);
]]></code>
This sample shows how to call DetectUnivariateLastPointAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
})
{
    Granularity = TimeGranularity.Yearly,
    CustomInterval = 1234,
    Period = 1234,
    MaxAnomalyRatio = 123.45F,
    Sensitivity = 1234,
    ImputeMode = ImputeMode.Auto,
    ImputeFixedValue = 123.45F,
};
Response<UnivariateLastDetectionResult> response = await client.DetectUnivariateLastPointAsync(options);
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPoint(UnivariateDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateLastPoint.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
});
Response<UnivariateLastDetectionResult> response = client.DetectUnivariateLastPoint(options);
]]></code>
This sample shows how to call DetectUnivariateLastPoint with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
})
{
    Granularity = TimeGranularity.Yearly,
    CustomInterval = 1234,
    Period = 1234,
    MaxAnomalyRatio = 123.45F,
    Sensitivity = 1234,
    ImputeMode = ImputeMode.Auto,
    ImputeFixedValue = 123.45F,
};
Response<UnivariateLastDetectionResult> response = client.DetectUnivariateLastPoint(options);
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPointAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateLastPointAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = await client.DetectUnivariateLastPointAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
]]></code>
This sample shows how to call DetectUnivariateLastPointAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = await client.DetectUnivariateLastPointAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
Console.WriteLine(result.GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPoint(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateLastPoint and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = client.DetectUnivariateLastPoint(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
]]></code>
This sample shows how to call DetectUnivariateLastPoint with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = client.DetectUnivariateLastPoint(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
Console.WriteLine(result.GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePointAsync(UnivariateChangePointDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateChangePointAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
}, TimeGranularity.Yearly);
Response<UnivariateChangePointDetectionResult> response = await client.DetectUnivariateChangePointAsync(options);
]]></code>
This sample shows how to call DetectUnivariateChangePointAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
}, TimeGranularity.Yearly)
{
    CustomInterval = 1234,
    Period = 1234,
    StableTrendWindow = 1234,
    Threshold = 123.45F,
};
Response<UnivariateChangePointDetectionResult> response = await client.DetectUnivariateChangePointAsync(options);
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePoint(UnivariateChangePointDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateChangePoint.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
}, TimeGranularity.Yearly);
Response<UnivariateChangePointDetectionResult> response = client.DetectUnivariateChangePoint(options);
]]></code>
This sample shows how to call DetectUnivariateChangePoint with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
}, TimeGranularity.Yearly)
{
    CustomInterval = 1234,
    Period = 1234,
    StableTrendWindow = 1234,
    Threshold = 123.45F,
};
Response<UnivariateChangePointDetectionResult> response = client.DetectUnivariateChangePoint(options);
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePointAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateChangePointAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
    granularity = "yearly",
});
Response response = await client.DetectUnivariateChangePointAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectUnivariateChangePointAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    stableTrendWindow = 1234,
    threshold = 123.45F,
});
Response response = await client.DetectUnivariateChangePointAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("isChangePoint")[0].ToString());
Console.WriteLine(result.GetProperty("confidenceScores")[0].ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePoint(RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateChangePoint and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
    granularity = "yearly",
});
Response response = client.DetectUnivariateChangePoint(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectUnivariateChangePoint with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
Univariate client = new AnomalyDetectorClient(endpoint, credential).GetUnivariateClient(apiVersion: "v1.1");

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    stableTrendWindow = 1234,
    threshold = 123.45F,
});
Response response = client.DetectUnivariateChangePoint(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("isChangePoint")[0].ToString());
Console.WriteLine(result.GetProperty("confidenceScores")[0].ToString());
]]></code></example>
    </member>
  </members>
</doc>