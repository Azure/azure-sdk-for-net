// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    /// <summary> Response of change point detection. </summary>
    public partial class UnivariateChangePointDetectionResult
    {
        /// <summary> Initializes a new instance of <see cref="UnivariateChangePointDetectionResult"/>. </summary>
        internal UnivariateChangePointDetectionResult()
        {
            IsChangePoint = new ChangeTrackingList<bool>();
            ConfidenceScores = new ChangeTrackingList<float>();
        }

        /// <summary> Initializes a new instance of <see cref="UnivariateChangePointDetectionResult"/>. </summary>
        /// <param name="period">
        /// Frequency extracted from the series. Zero means no recurrent pattern has been
        /// found.
        /// </param>
        /// <param name="isChangePoint">
        /// Change point properties for each input point. True means
        /// an anomaly (either negative or positive) has been detected. The index of the
        /// array is consistent with the input series.
        /// </param>
        /// <param name="confidenceScores"> Change point confidence of each point. </param>
        internal UnivariateChangePointDetectionResult(int? period, IReadOnlyList<bool> isChangePoint, IReadOnlyList<float> confidenceScores)
        {
            Period = period;
            IsChangePoint = isChangePoint;
            ConfidenceScores = confidenceScores;
        }

        /// <summary>
        /// Frequency extracted from the series. Zero means no recurrent pattern has been
        /// found.
        /// </summary>
        public int? Period { get; }
        /// <summary>
        /// Change point properties for each input point. True means
        /// an anomaly (either negative or positive) has been detected. The index of the
        /// array is consistent with the input series.
        /// </summary>
        public IReadOnlyList<bool> IsChangePoint { get; }
        /// <summary> Change point confidence of each point. </summary>
        public IReadOnlyList<float> ConfidenceScores { get; }
    }
}
