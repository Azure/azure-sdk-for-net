// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    /// <summary>
    /// Training result of a model including its status, errors and diagnostics
    /// information.
    /// </summary>
    public partial class ModelInfo
    {
        /// <summary> Initializes a new instance of ModelInfo. </summary>
        /// <param name="dataSource"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
        public ModelInfo(string dataSource, DateTimeOffset startTime, DateTimeOffset endTime)
        {
            Argument.AssertNotNull(dataSource, nameof(dataSource));

            DataSource = dataSource;
            StartTime = startTime;
            EndTime = endTime;
            Errors = new ChangeTrackingList<ErrorResponse>();
        }

        /// <summary> Initializes a new instance of ModelInfo. </summary>
        /// <param name="dataSource"></param>
        /// <param name="dataSchema"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="displayName"></param>
        /// <param name="slidingWindow"></param>
        /// <param name="alignPolicy"></param>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="diagnosticsInfo"></param>
        internal ModelInfo(string dataSource, DataSchema? dataSchema, DateTimeOffset startTime, DateTimeOffset endTime, string displayName, int? slidingWindow, AlignPolicy alignPolicy, ModelStatus? status, IReadOnlyList<ErrorResponse> errors, DiagnosticsInfo diagnosticsInfo)
        {
            DataSource = dataSource;
            DataSchema = dataSchema;
            StartTime = startTime;
            EndTime = endTime;
            DisplayName = displayName;
            SlidingWindow = slidingWindow;
            AlignPolicy = alignPolicy;
            Status = status;
            Errors = errors.ToList();
            DiagnosticsInfo = diagnosticsInfo;
        }

        /// <summary> Gets or sets the data source. </summary>
        public string DataSource { get; set; }
        /// <summary> Gets or sets the data schema. </summary>
        public DataSchema? DataSchema { get; set; }
        /// <summary> Gets or sets the start time. </summary>
        public DateTimeOffset StartTime { get; set; }
        /// <summary> Gets or sets the end time. </summary>
        public DateTimeOffset EndTime { get; set; }
        /// <summary> Gets or sets the display name. </summary>
        public string DisplayName { get; set; }
        /// <summary> Gets or sets the sliding window. </summary>
        public int? SlidingWindow { get; set; }
        /// <summary> Gets or sets the align policy. </summary>
        public AlignPolicy AlignPolicy { get; set; }
        /// <summary> Gets or sets the status. </summary>
        public ModelStatus? Status { get; set; }
        /// <summary> Gets the errors. </summary>
        public IReadOnlyList<ErrorResponse> Errors { get; }
        /// <summary> Gets or sets the diagnostics info. </summary>
        public DiagnosticsInfo DiagnosticsInfo { get; set; }
    }
}
