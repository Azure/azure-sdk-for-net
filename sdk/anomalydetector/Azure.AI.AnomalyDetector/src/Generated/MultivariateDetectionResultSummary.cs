// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    /// <summary> Multivariate anomaly detection status. </summary>
    public partial class MultivariateDetectionResultSummary
    {
        /// <summary> Initializes a new instance of MultivariateDetectionResultSummary. </summary>
        /// <param name="status"></param>
        /// <param name="setupInfo"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="setupInfo"/> is null. </exception>
        internal MultivariateDetectionResultSummary(MultivariateDetectionStatus status, MultivariateDetectionOptions setupInfo)
        {
            Argument.AssertNotNull(setupInfo, nameof(setupInfo));

            Status = status;
            Errors = new ChangeTrackingList<ErrorResponse>();
            VariableStates = new ChangeTrackingList<VariableState>();
            SetupInfo = setupInfo;
        }

        /// <summary> Initializes a new instance of MultivariateDetectionResultSummary. </summary>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="variableStates"></param>
        /// <param name="setupInfo"></param>
        internal MultivariateDetectionResultSummary(MultivariateDetectionStatus status, IReadOnlyList<ErrorResponse> errors, IReadOnlyList<VariableState> variableStates, MultivariateDetectionOptions setupInfo)
        {
            Status = status;
            Errors = errors.ToList();
            VariableStates = variableStates.ToList();
            SetupInfo = setupInfo;
        }

        /// <summary> Gets the status. </summary>
        public MultivariateDetectionStatus Status { get; }
        /// <summary> Gets the errors. </summary>
        public IReadOnlyList<ErrorResponse> Errors { get; }
        /// <summary> Gets the variable states. </summary>
        public IReadOnlyList<VariableState> VariableStates { get; }
        /// <summary> Gets the setup info. </summary>
        public MultivariateDetectionOptions SetupInfo { get; }
    }
}
