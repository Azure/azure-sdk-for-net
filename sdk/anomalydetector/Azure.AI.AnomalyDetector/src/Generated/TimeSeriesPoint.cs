// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    /// <summary> Definition of input time series points. </summary>
    public partial class TimeSeriesPoint
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TimeSeriesPoint"/>. </summary>
        /// <param name="value"> Measurement of that point. </param>
        public TimeSeriesPoint(float value)
        {
            Value = value;
            _serializedAdditionalRawData = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="TimeSeriesPoint"/>. </summary>
        /// <param name="timestamp"> Argument that indicates the time stamp of a data point (ISO8601 format). </param>
        /// <param name="value"> Measurement of that point. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TimeSeriesPoint(DateTimeOffset? timestamp, float value, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Timestamp = timestamp;
            Value = value;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="TimeSeriesPoint"/> for deserialization. </summary>
        internal TimeSeriesPoint()
        {
        }

        /// <summary> Argument that indicates the time stamp of a data point (ISO8601 format). </summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary> Measurement of that point. </summary>
        public float Value { get; }
    }
}
