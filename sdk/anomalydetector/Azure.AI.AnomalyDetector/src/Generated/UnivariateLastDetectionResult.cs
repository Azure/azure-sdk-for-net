// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.AI.AnomalyDetector
{
    /// <summary> The response of last anomaly detection. </summary>
    public partial class UnivariateLastDetectionResult
    {
        /// <summary> Initializes a new instance of UnivariateLastDetectionResult. </summary>
        /// <param name="period"></param>
        /// <param name="suggestedWindow"></param>
        /// <param name="expectedValue"></param>
        /// <param name="upperMargin"></param>
        /// <param name="lowerMargin"></param>
        /// <param name="isAnomaly"></param>
        /// <param name="isNegativeAnomaly"></param>
        /// <param name="isPositiveAnomaly"></param>
        internal UnivariateLastDetectionResult(int period, int suggestedWindow, float expectedValue, float upperMargin, float lowerMargin, bool isAnomaly, bool isNegativeAnomaly, bool isPositiveAnomaly)
        {
            Period = period;
            SuggestedWindow = suggestedWindow;
            ExpectedValue = expectedValue;
            UpperMargin = upperMargin;
            LowerMargin = lowerMargin;
            IsAnomaly = isAnomaly;
            IsNegativeAnomaly = isNegativeAnomaly;
            IsPositiveAnomaly = isPositiveAnomaly;
        }

        /// <summary> Initializes a new instance of UnivariateLastDetectionResult. </summary>
        /// <param name="period"></param>
        /// <param name="suggestedWindow"></param>
        /// <param name="expectedValue"></param>
        /// <param name="upperMargin"></param>
        /// <param name="lowerMargin"></param>
        /// <param name="isAnomaly"></param>
        /// <param name="isNegativeAnomaly"></param>
        /// <param name="isPositiveAnomaly"></param>
        /// <param name="severity"></param>
        internal UnivariateLastDetectionResult(int period, int suggestedWindow, float expectedValue, float upperMargin, float lowerMargin, bool isAnomaly, bool isNegativeAnomaly, bool isPositiveAnomaly, float? severity)
        {
            Period = period;
            SuggestedWindow = suggestedWindow;
            ExpectedValue = expectedValue;
            UpperMargin = upperMargin;
            LowerMargin = lowerMargin;
            IsAnomaly = isAnomaly;
            IsNegativeAnomaly = isNegativeAnomaly;
            IsPositiveAnomaly = isPositiveAnomaly;
            Severity = severity;
        }

        /// <summary> Gets the period. </summary>
        public int Period { get; }
        /// <summary> Gets the suggested window. </summary>
        public int SuggestedWindow { get; }
        /// <summary> Gets the expected value. </summary>
        public float ExpectedValue { get; }
        /// <summary> Gets the upper margin. </summary>
        public float UpperMargin { get; }
        /// <summary> Gets the lower margin. </summary>
        public float LowerMargin { get; }
        /// <summary> Gets the is anomaly. </summary>
        public bool IsAnomaly { get; }
        /// <summary> Gets the is negative anomaly. </summary>
        public bool IsNegativeAnomaly { get; }
        /// <summary> Gets the is positive anomaly. </summary>
        public bool IsPositiveAnomaly { get; }
        /// <summary> Gets the severity. </summary>
        public float? Severity { get; }
    }
}
