// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.AI.AnomalyDetector.Models
{
    internal static partial class TimeGranularityExtensions
    {
        public static string ToSerialString(this TimeGranularity value) => value switch
        {
            TimeGranularity.Yearly => "yearly",
            TimeGranularity.Monthly => "monthly",
            TimeGranularity.Weekly => "weekly",
            TimeGranularity.Daily => "daily",
            TimeGranularity.Hourly => "hourly",
            TimeGranularity.PerMinute => "minutely",
            TimeGranularity.PerSecond => "secondly",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown TimeGranularity value.")
        };

        public static TimeGranularity ToTimeGranularity(this string value)
        {
            if (string.Equals(value, "yearly", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.Yearly;
            if (string.Equals(value, "monthly", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.Monthly;
            if (string.Equals(value, "weekly", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.Weekly;
            if (string.Equals(value, "daily", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.Daily;
            if (string.Equals(value, "hourly", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.Hourly;
            if (string.Equals(value, "minutely", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.PerMinute;
            if (string.Equals(value, "secondly", StringComparison.InvariantCultureIgnoreCase)) return TimeGranularity.PerSecond;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown TimeGranularity value.");
        }
    }
}
