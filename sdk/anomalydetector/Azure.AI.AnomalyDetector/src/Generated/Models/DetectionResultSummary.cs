// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.AnomalyDetector.Models
{
    /// <summary> The DetectionResultSummary. </summary>
    public partial class DetectionResultSummary
    {
        /// <summary> Initializes a new instance of DetectionResultSummary. </summary>
        /// <param name="status"> Status of detection results. One of CREATED, RUNNING, READY, and FAILED. </param>
        /// <param name="setupInfo"> Detection request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="setupInfo"/> is null. </exception>
        internal DetectionResultSummary(DetectionStatus status, DetectionRequest setupInfo)
        {
            if (setupInfo == null)
            {
                throw new ArgumentNullException(nameof(setupInfo));
            }

            Status = status;
            Errors = new ChangeTrackingList<ErrorResponse>();
            VariableStates = new ChangeTrackingList<VariableState>();
            SetupInfo = setupInfo;
        }

        /// <summary> Initializes a new instance of DetectionResultSummary. </summary>
        /// <param name="status"> Status of detection results. One of CREATED, RUNNING, READY, and FAILED. </param>
        /// <param name="errors"> Error message when detection is failed. </param>
        /// <param name="variableStates"></param>
        /// <param name="setupInfo"> Detection request. </param>
        internal DetectionResultSummary(DetectionStatus status, IReadOnlyList<ErrorResponse> errors, IReadOnlyList<VariableState> variableStates, DetectionRequest setupInfo)
        {
            Status = status;
            Errors = errors;
            VariableStates = variableStates;
            SetupInfo = setupInfo;
        }

        /// <summary> Status of detection results. One of CREATED, RUNNING, READY, and FAILED. </summary>
        public DetectionStatus Status { get; }
        /// <summary> Error message when detection is failed. </summary>
        public IReadOnlyList<ErrorResponse> Errors { get; }
        /// <summary> Gets the variable states. </summary>
        public IReadOnlyList<VariableState> VariableStates { get; }
        /// <summary> Detection request. </summary>
        public DetectionRequest SetupInfo { get; }
    }
}
