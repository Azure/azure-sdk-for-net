// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    public partial class AlignPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AlignMode))
            {
                if (AlignMode != null)
                {
                    writer.WritePropertyName("alignMode");
                    writer.WriteStringValue(AlignMode.Value.ToSerialString());
                }
                else
                {
                    writer.WriteNull("alignMode");
                }
            }
            if (Optional.IsDefined(FillNAMethod))
            {
                if (FillNAMethod != null)
                {
                    writer.WritePropertyName("fillNAMethod");
                    writer.WriteStringValue(FillNAMethod.Value.ToString());
                }
                else
                {
                    writer.WriteNull("fillNAMethod");
                }
            }
            if (Optional.IsDefined(PaddingValue))
            {
                if (PaddingValue != null)
                {
                    writer.WritePropertyName("paddingValue");
                    writer.WriteNumberValue(PaddingValue.Value);
                }
                else
                {
                    writer.WriteNull("paddingValue");
                }
            }
            writer.WriteEndObject();
        }

        internal static AlignPolicy DeserializeAlignPolicy(JsonElement element)
        {
            Optional<AlignMode?> alignMode = default;
            Optional<FillNAMethod?> fillNAMethod = default;
            Optional<float?> paddingValue = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alignMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        alignMode = null;
                        continue;
                    }
                    alignMode = property.Value.GetString().ToAlignMode();
                    continue;
                }
                if (property.NameEquals("fillNAMethod"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fillNAMethod = null;
                        continue;
                    }
                    fillNAMethod = new FillNAMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("paddingValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        paddingValue = null;
                        continue;
                    }
                    paddingValue = property.Value.GetSingle();
                    continue;
                }
            }
            return new AlignPolicy(Optional.ToNullable(alignMode), Optional.ToNullable(fillNAMethod), Optional.ToNullable(paddingValue));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AlignPolicy FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAlignPolicy(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
