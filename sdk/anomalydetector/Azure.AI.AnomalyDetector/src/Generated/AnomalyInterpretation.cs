// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.AnomalyDetector
{
    /// <summary> Interpretation of the anomalous time stamp. </summary>
    public partial class AnomalyInterpretation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AnomalyInterpretation"/>. </summary>
        internal AnomalyInterpretation()
        {
            _serializedAdditionalRawData = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="AnomalyInterpretation"/>. </summary>
        /// <param name="variable"> Variable. </param>
        /// <param name="contributionScore">
        /// This score shows the percentage that contributes to the anomalous time stamp. It's a
        /// number between 0 and 1.
        /// </param>
        /// <param name="correlationChanges"> Correlation changes among the anomalous variables. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AnomalyInterpretation(string variable, float? contributionScore, CorrelationChanges correlationChanges, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Variable = variable;
            ContributionScore = contributionScore;
            CorrelationChanges = correlationChanges;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Variable. </summary>
        public string Variable { get; }
        /// <summary>
        /// This score shows the percentage that contributes to the anomalous time stamp. It's a
        /// number between 0 and 1.
        /// </summary>
        public float? ContributionScore { get; }
        /// <summary> Correlation changes among the anomalous variables. </summary>
        public CorrelationChanges CorrelationChanges { get; }
    }
}
