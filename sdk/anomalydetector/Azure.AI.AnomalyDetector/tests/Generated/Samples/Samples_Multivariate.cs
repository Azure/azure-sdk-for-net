// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.AnomalyDetector.Samples
{
    public partial class Samples_Multivariate
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_GetMultivariateBatchDetectionResult_GetMultivariateBatchDetectionResult()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response response = client.GetMultivariateBatchDetectionResult(Guid.Parse("663884e6-b117-11ea-b3de-0242ac130004"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("resultId").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_GetMultivariateBatchDetectionResult_GetMultivariateBatchDetectionResult_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response response = await client.GetMultivariateBatchDetectionResultAsync(Guid.Parse("663884e6-b117-11ea-b3de-0242ac130004"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("resultId").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_GetMultivariateBatchDetectionResult_GetMultivariateBatchDetectionResult_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response<MultivariateDetectionResult> response = client.GetMultivariateBatchDetectionResult(Guid.Parse("663884e6-b117-11ea-b3de-0242ac130004"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_GetMultivariateBatchDetectionResult_GetMultivariateBatchDetectionResult_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response<MultivariateDetectionResult> response = await client.GetMultivariateBatchDetectionResultAsync(Guid.Parse("663884e6-b117-11ea-b3de-0242ac130004"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_TrainMultivariateModel_CreateAndTrainMultivariateModel()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            using RequestContent content = RequestContent.Create(new
            {
                slidingWindow = 20,
                alignPolicy = new
                {
                    alignMode = "Outer",
                    fillNAMethod = "Linear",
                    paddingValue = 0,
                },
                dataSource = "https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
                dataSchema = "OneTable",
                startTime = "2019-04-01T00:00:00Z",
                endTime = "2019-04-02T00:00:00Z",
                displayName = "Devops-MultiAD",
            });
            Response response = client.TrainMultivariateModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_TrainMultivariateModel_CreateAndTrainMultivariateModel_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            using RequestContent content = RequestContent.Create(new
            {
                slidingWindow = 20,
                alignPolicy = new
                {
                    alignMode = "Outer",
                    fillNAMethod = "Linear",
                    paddingValue = 0,
                },
                dataSource = "https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
                dataSchema = "OneTable",
                startTime = "2019-04-01T00:00:00Z",
                endTime = "2019-04-02T00:00:00Z",
                displayName = "Devops-MultiAD",
            });
            Response response = await client.TrainMultivariateModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_TrainMultivariateModel_CreateAndTrainMultivariateModel_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            ModelInfo modelInfo = new ModelInfo(new Uri("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv"), DateTimeOffset.Parse("2019-04-01T00:00:00Z"), DateTimeOffset.Parse("2019-04-02T00:00:00Z"))
            {
                DataSchema = DataSchema.OneTable,
                DisplayName = "Devops-MultiAD",
                SlidingWindow = 20,
                AlignPolicy = new AlignPolicy
                {
                    AlignMode = AlignMode.Outer,
                    FillNAMethod = FillNAMethod.Linear,
                    PaddingValue = 0,
                },
            };
            Response<AnomalyDetectionModel> response = client.TrainMultivariateModel(modelInfo);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_TrainMultivariateModel_CreateAndTrainMultivariateModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            ModelInfo modelInfo = new ModelInfo(new Uri("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv"), DateTimeOffset.Parse("2019-04-01T00:00:00Z"), DateTimeOffset.Parse("2019-04-02T00:00:00Z"))
            {
                DataSchema = DataSchema.OneTable,
                DisplayName = "Devops-MultiAD",
                SlidingWindow = 20,
                AlignPolicy = new AlignPolicy
                {
                    AlignMode = AlignMode.Outer,
                    FillNAMethod = FillNAMethod.Linear,
                    PaddingValue = 0,
                },
            };
            Response<AnomalyDetectionModel> response = await client.TrainMultivariateModelAsync(modelInfo);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_DeleteMultivariateModel_DeleteMultivariateModel()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response response = client.DeleteMultivariateModel("45aad126-aafd-11ea-b8fb-d89ef3400c5f");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_DeleteMultivariateModel_DeleteMultivariateModel_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response response = await client.DeleteMultivariateModelAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_GetMultivariateModel_GetAMultivariateModel()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response response = client.GetMultivariateModel("45aad126-aafd-11ea-b8fb-d89ef3400c5f", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_GetMultivariateModel_GetAMultivariateModel_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response response = await client.GetMultivariateModelAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_GetMultivariateModel_GetAMultivariateModel_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response<AnomalyDetectionModel> response = client.GetMultivariateModel("45aad126-aafd-11ea-b8fb-d89ef3400c5f");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_GetMultivariateModel_GetAMultivariateModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            Response<AnomalyDetectionModel> response = await client.GetMultivariateModelAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_DetectMultivariateBatchAnomaly_DetectMultivariateBatchAnomaly()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            using RequestContent content = RequestContent.Create(new
            {
                dataSource = "https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
                topContributorCount = 10,
                startTime = "2019-04-01T00:15:00Z",
                endTime = "2019-04-01T00:40:00Z",
            });
            Response response = client.DetectMultivariateBatchAnomaly("45aad126-aafd-11ea-b8fb-d89ef3400c5f", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("resultId").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_DetectMultivariateBatchAnomaly_DetectMultivariateBatchAnomaly_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            using RequestContent content = RequestContent.Create(new
            {
                dataSource = "https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv",
                topContributorCount = 10,
                startTime = "2019-04-01T00:15:00Z",
                endTime = "2019-04-01T00:40:00Z",
            });
            Response response = await client.DetectMultivariateBatchAnomalyAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("resultId").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_DetectMultivariateBatchAnomaly_DetectMultivariateBatchAnomaly_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            MultivariateBatchDetectionOptions options = new MultivariateBatchDetectionOptions(new Uri("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv"), DateTimeOffset.Parse("2019-04-01T00:15:00Z"), DateTimeOffset.Parse("2019-04-01T00:40:00Z"))
            {
                TopContributorCount = 10,
            };
            Response<MultivariateDetectionResult> response = client.DetectMultivariateBatchAnomaly("45aad126-aafd-11ea-b8fb-d89ef3400c5f", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_DetectMultivariateBatchAnomaly_DetectMultivariateBatchAnomaly_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            MultivariateBatchDetectionOptions options = new MultivariateBatchDetectionOptions(new Uri("https://multiadsample.blob.core.windows.net/data/sample_data_2_1000.csv"), DateTimeOffset.Parse("2019-04-01T00:15:00Z"), DateTimeOffset.Parse("2019-04-01T00:40:00Z"))
            {
                TopContributorCount = 10,
            };
            Response<MultivariateDetectionResult> response = await client.DetectMultivariateBatchAnomalyAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_DetectMultivariateLastAnomaly_DetectMultivariateLastAnomaly()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            using RequestContent content = RequestContent.Create(new
            {
                variables = new object[]
            {
new
{
variable = "Variable_1",
timestamps = new object[]
{
"2021-01-01T00:00:00Z",
"2021-01-01T00:01:00Z",
"2021-01-01T00:02:00Z",
"2021-01-01T00:03:00Z",
"2021-01-01T00:04:00Z",
"2021-01-01T00:05:00Z",
"2021-01-01T00:06:00Z",
"2021-01-01T00:07:00Z",
"2021-01-01T00:08:00Z",
"2021-01-01T00:09:00Z",
"2021-01-01T00:10:00Z",
"2021-01-01T00:11:00Z",
"2021-01-01T00:12:00Z",
"2021-01-01T00:13:00Z",
"2021-01-01T00:14:00Z",
"2021-01-01T00:15:00Z",
"2021-01-01T00:16:00Z",
"2021-01-01T00:17:00Z",
"2021-01-01T00:18:00Z",
"2021-01-01T00:19:00Z",
"2021-01-01T00:20:00Z",
"2021-01-01T00:21:00Z",
"2021-01-01T00:22:00Z",
"2021-01-01T00:23:00Z",
"2021-01-01T00:24:00Z",
"2021-01-01T00:25:00Z",
"2021-01-01T00:26:00Z",
"2021-01-01T00:27:00Z",
"2021-01-01T00:28:00Z",
"2021-01-01T00:29:00Z"
},
values = new object[]
{
0.45513784885406494,
0.7388603687286377,
0.20108824968338013,
0.7462812066078186,
0.07308129221200943,
0.3309047520160675,
0.7544925212860107,
0.9875063300132751,
0.6665933132171631,
0.6308351755142212,
0.08083309978246689,
0.8414415717124939,
0.5145835280418396,
0.09544898569583893,
0.7786793112754822,
0.41646134853363037,
0.030176186934113503,
0.3474214971065521,
0.5085301995277405,
0.42451199889183044,
0.21159441769123077,
0.24733519554138184,
0.8791022300720215,
0.9479621648788452,
0.26702702045440674,
0.6954503655433655,
0.12357284128665924,
0.821491539478302,
0.11813002079725266,
0.8579046130180359
},
},
new
{
variable = "Variable_2",
timestamps = new object[]
{
"2021-01-01T00:00:00Z",
"2021-01-01T00:01:00Z",
"2021-01-01T00:02:00Z",
"2021-01-01T00:03:00Z",
"2021-01-01T00:04:00Z",
"2021-01-01T00:05:00Z",
"2021-01-01T00:06:00Z",
"2021-01-01T00:07:00Z",
"2021-01-01T00:08:00Z",
"2021-01-01T00:09:00Z",
"2021-01-01T00:10:00Z",
"2021-01-01T00:11:00Z",
"2021-01-01T00:12:00Z",
"2021-01-01T00:13:00Z",
"2021-01-01T00:14:00Z",
"2021-01-01T00:15:00Z",
"2021-01-01T00:16:00Z",
"2021-01-01T00:17:00Z",
"2021-01-01T00:18:00Z",
"2021-01-01T00:19:00Z",
"2021-01-01T00:20:00Z",
"2021-01-01T00:21:00Z",
"2021-01-01T00:22:00Z",
"2021-01-01T00:23:00Z",
"2021-01-01T00:24:00Z",
"2021-01-01T00:25:00Z",
"2021-01-01T00:26:00Z",
"2021-01-01T00:27:00Z",
"2021-01-01T00:28:00Z",
"2021-01-01T00:29:00Z"
},
values = new object[]
{
0.9617871642112732,
0.2490331083536148,
0.49205613136291504,
0.9895601272583008,
0.9171759486198425,
0.5754204988479614,
0.18110333383083344,
0.8852311968803406,
0.9543231725692749,
0.70880126953125,
0.7843572497367859,
0.7664787173271179,
0.36995524168014526,
0.5045198798179626,
0.5848931074142456,
0.7628913521766663,
0.8148406147956848,
0.08540458977222443,
0.034819766879081726,
0.21275098621845245,
0.9836175441741943,
0.9321441650390625,
0.03846660628914833,
0.1723138391971588,
0.8626383543014526,
0.35053229331970215,
0.6311416625976562,
0.07303526252508163,
0.08886179327964783,
0.7488605976104736
},
},
new
{
variable = "Variable_3",
timestamps = new object[]
{
"2021-01-01T00:00:00Z",
"2021-01-01T00:01:00Z",
"2021-01-01T00:02:00Z",
"2021-01-01T00:03:00Z",
"2021-01-01T00:04:00Z",
"2021-01-01T00:05:00Z",
"2021-01-01T00:06:00Z",
"2021-01-01T00:07:00Z",
"2021-01-01T00:08:00Z",
"2021-01-01T00:09:00Z",
"2021-01-01T00:10:00Z",
"2021-01-01T00:11:00Z",
"2021-01-01T00:12:00Z",
"2021-01-01T00:13:00Z",
"2021-01-01T00:14:00Z",
"2021-01-01T00:15:00Z",
"2021-01-01T00:16:00Z",
"2021-01-01T00:17:00Z",
"2021-01-01T00:18:00Z",
"2021-01-01T00:19:00Z",
"2021-01-01T00:20:00Z",
"2021-01-01T00:21:00Z",
"2021-01-01T00:22:00Z",
"2021-01-01T00:23:00Z",
"2021-01-01T00:24:00Z",
"2021-01-01T00:25:00Z",
"2021-01-01T00:26:00Z",
"2021-01-01T00:27:00Z",
"2021-01-01T00:28:00Z",
"2021-01-01T00:29:00Z"
},
values = new object[]
{
0.4030756950378418,
0.15526889264583588,
0.3635222613811493,
0.605120062828064,
0.8516795039176941,
0.2645605802536011,
0.6810875535011292,
0.9165894389152527,
0.7007832527160645,
0.5624155402183533,
0.6277289390563965,
0.1599205583333969,
0.602096438407898,
0.35937967896461487,
0.8731685876846313,
0.2030154913663864,
0.029261872172355652,
0.6261499524116516,
0.45850780606269836,
0.8275007009506226,
0.032760269939899445,
0.4485202729701996,
0.8915690779685974,
0.8916690349578857,
0.9469979405403137,
0.11529308557510376,
0.08818772435188293,
0.7426286339759827,
0.3237224817276001,
0.936268150806427
},
}
            },
                topContributorCount = 10,
            });
            Response response = client.DetectMultivariateLastAnomaly("45aad126-aafd-11ea-b8fb-d89ef3400c5f", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_DetectMultivariateLastAnomaly_DetectMultivariateLastAnomaly_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            using RequestContent content = RequestContent.Create(new
            {
                variables = new object[]
            {
new
{
variable = "Variable_1",
timestamps = new object[]
{
"2021-01-01T00:00:00Z",
"2021-01-01T00:01:00Z",
"2021-01-01T00:02:00Z",
"2021-01-01T00:03:00Z",
"2021-01-01T00:04:00Z",
"2021-01-01T00:05:00Z",
"2021-01-01T00:06:00Z",
"2021-01-01T00:07:00Z",
"2021-01-01T00:08:00Z",
"2021-01-01T00:09:00Z",
"2021-01-01T00:10:00Z",
"2021-01-01T00:11:00Z",
"2021-01-01T00:12:00Z",
"2021-01-01T00:13:00Z",
"2021-01-01T00:14:00Z",
"2021-01-01T00:15:00Z",
"2021-01-01T00:16:00Z",
"2021-01-01T00:17:00Z",
"2021-01-01T00:18:00Z",
"2021-01-01T00:19:00Z",
"2021-01-01T00:20:00Z",
"2021-01-01T00:21:00Z",
"2021-01-01T00:22:00Z",
"2021-01-01T00:23:00Z",
"2021-01-01T00:24:00Z",
"2021-01-01T00:25:00Z",
"2021-01-01T00:26:00Z",
"2021-01-01T00:27:00Z",
"2021-01-01T00:28:00Z",
"2021-01-01T00:29:00Z"
},
values = new object[]
{
0.45513784885406494,
0.7388603687286377,
0.20108824968338013,
0.7462812066078186,
0.07308129221200943,
0.3309047520160675,
0.7544925212860107,
0.9875063300132751,
0.6665933132171631,
0.6308351755142212,
0.08083309978246689,
0.8414415717124939,
0.5145835280418396,
0.09544898569583893,
0.7786793112754822,
0.41646134853363037,
0.030176186934113503,
0.3474214971065521,
0.5085301995277405,
0.42451199889183044,
0.21159441769123077,
0.24733519554138184,
0.8791022300720215,
0.9479621648788452,
0.26702702045440674,
0.6954503655433655,
0.12357284128665924,
0.821491539478302,
0.11813002079725266,
0.8579046130180359
},
},
new
{
variable = "Variable_2",
timestamps = new object[]
{
"2021-01-01T00:00:00Z",
"2021-01-01T00:01:00Z",
"2021-01-01T00:02:00Z",
"2021-01-01T00:03:00Z",
"2021-01-01T00:04:00Z",
"2021-01-01T00:05:00Z",
"2021-01-01T00:06:00Z",
"2021-01-01T00:07:00Z",
"2021-01-01T00:08:00Z",
"2021-01-01T00:09:00Z",
"2021-01-01T00:10:00Z",
"2021-01-01T00:11:00Z",
"2021-01-01T00:12:00Z",
"2021-01-01T00:13:00Z",
"2021-01-01T00:14:00Z",
"2021-01-01T00:15:00Z",
"2021-01-01T00:16:00Z",
"2021-01-01T00:17:00Z",
"2021-01-01T00:18:00Z",
"2021-01-01T00:19:00Z",
"2021-01-01T00:20:00Z",
"2021-01-01T00:21:00Z",
"2021-01-01T00:22:00Z",
"2021-01-01T00:23:00Z",
"2021-01-01T00:24:00Z",
"2021-01-01T00:25:00Z",
"2021-01-01T00:26:00Z",
"2021-01-01T00:27:00Z",
"2021-01-01T00:28:00Z",
"2021-01-01T00:29:00Z"
},
values = new object[]
{
0.9617871642112732,
0.2490331083536148,
0.49205613136291504,
0.9895601272583008,
0.9171759486198425,
0.5754204988479614,
0.18110333383083344,
0.8852311968803406,
0.9543231725692749,
0.70880126953125,
0.7843572497367859,
0.7664787173271179,
0.36995524168014526,
0.5045198798179626,
0.5848931074142456,
0.7628913521766663,
0.8148406147956848,
0.08540458977222443,
0.034819766879081726,
0.21275098621845245,
0.9836175441741943,
0.9321441650390625,
0.03846660628914833,
0.1723138391971588,
0.8626383543014526,
0.35053229331970215,
0.6311416625976562,
0.07303526252508163,
0.08886179327964783,
0.7488605976104736
},
},
new
{
variable = "Variable_3",
timestamps = new object[]
{
"2021-01-01T00:00:00Z",
"2021-01-01T00:01:00Z",
"2021-01-01T00:02:00Z",
"2021-01-01T00:03:00Z",
"2021-01-01T00:04:00Z",
"2021-01-01T00:05:00Z",
"2021-01-01T00:06:00Z",
"2021-01-01T00:07:00Z",
"2021-01-01T00:08:00Z",
"2021-01-01T00:09:00Z",
"2021-01-01T00:10:00Z",
"2021-01-01T00:11:00Z",
"2021-01-01T00:12:00Z",
"2021-01-01T00:13:00Z",
"2021-01-01T00:14:00Z",
"2021-01-01T00:15:00Z",
"2021-01-01T00:16:00Z",
"2021-01-01T00:17:00Z",
"2021-01-01T00:18:00Z",
"2021-01-01T00:19:00Z",
"2021-01-01T00:20:00Z",
"2021-01-01T00:21:00Z",
"2021-01-01T00:22:00Z",
"2021-01-01T00:23:00Z",
"2021-01-01T00:24:00Z",
"2021-01-01T00:25:00Z",
"2021-01-01T00:26:00Z",
"2021-01-01T00:27:00Z",
"2021-01-01T00:28:00Z",
"2021-01-01T00:29:00Z"
},
values = new object[]
{
0.4030756950378418,
0.15526889264583588,
0.3635222613811493,
0.605120062828064,
0.8516795039176941,
0.2645605802536011,
0.6810875535011292,
0.9165894389152527,
0.7007832527160645,
0.5624155402183533,
0.6277289390563965,
0.1599205583333969,
0.602096438407898,
0.35937967896461487,
0.8731685876846313,
0.2030154913663864,
0.029261872172355652,
0.6261499524116516,
0.45850780606269836,
0.8275007009506226,
0.032760269939899445,
0.4485202729701996,
0.8915690779685974,
0.8916690349578857,
0.9469979405403137,
0.11529308557510376,
0.08818772435188293,
0.7426286339759827,
0.3237224817276001,
0.936268150806427
},
}
            },
                topContributorCount = 10,
            });
            Response response = await client.DetectMultivariateLastAnomalyAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_DetectMultivariateLastAnomaly_DetectMultivariateLastAnomaly_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            MultivariateLastDetectionOptions options = new MultivariateLastDetectionOptions(new VariableValues[]
            {
new VariableValues("Variable_1", new string[]{"2021-01-01T00:00:00Z", "2021-01-01T00:01:00Z", "2021-01-01T00:02:00Z", "2021-01-01T00:03:00Z", "2021-01-01T00:04:00Z", "2021-01-01T00:05:00Z", "2021-01-01T00:06:00Z", "2021-01-01T00:07:00Z", "2021-01-01T00:08:00Z", "2021-01-01T00:09:00Z", "2021-01-01T00:10:00Z", "2021-01-01T00:11:00Z", "2021-01-01T00:12:00Z", "2021-01-01T00:13:00Z", "2021-01-01T00:14:00Z", "2021-01-01T00:15:00Z", "2021-01-01T00:16:00Z", "2021-01-01T00:17:00Z", "2021-01-01T00:18:00Z", "2021-01-01T00:19:00Z", "2021-01-01T00:20:00Z", "2021-01-01T00:21:00Z", "2021-01-01T00:22:00Z", "2021-01-01T00:23:00Z", "2021-01-01T00:24:00Z", "2021-01-01T00:25:00Z", "2021-01-01T00:26:00Z", "2021-01-01T00:27:00Z", "2021-01-01T00:28:00Z", "2021-01-01T00:29:00Z"}, new float[]{(float)0.45513784885406494, (float)0.7388603687286377, (float)0.20108824968338013, (float)0.7462812066078186, (float)0.07308129221200943, (float)0.3309047520160675, (float)0.7544925212860107, (float)0.9875063300132751, (float)0.6665933132171631, (float)0.6308351755142212, (float)0.08083309978246689, (float)0.8414415717124939, (float)0.5145835280418396, (float)0.09544898569583893, (float)0.7786793112754822, (float)0.41646134853363037, (float)0.030176186934113503, (float)0.3474214971065521, (float)0.5085301995277405, (float)0.42451199889183044, (float)0.21159441769123077, (float)0.24733519554138184, (float)0.8791022300720215, (float)0.9479621648788452, (float)0.26702702045440674, (float)0.6954503655433655, (float)0.12357284128665924, (float)0.821491539478302, (float)0.11813002079725266, (float)0.8579046130180359}),
new VariableValues("Variable_2", new string[]{"2021-01-01T00:00:00Z", "2021-01-01T00:01:00Z", "2021-01-01T00:02:00Z", "2021-01-01T00:03:00Z", "2021-01-01T00:04:00Z", "2021-01-01T00:05:00Z", "2021-01-01T00:06:00Z", "2021-01-01T00:07:00Z", "2021-01-01T00:08:00Z", "2021-01-01T00:09:00Z", "2021-01-01T00:10:00Z", "2021-01-01T00:11:00Z", "2021-01-01T00:12:00Z", "2021-01-01T00:13:00Z", "2021-01-01T00:14:00Z", "2021-01-01T00:15:00Z", "2021-01-01T00:16:00Z", "2021-01-01T00:17:00Z", "2021-01-01T00:18:00Z", "2021-01-01T00:19:00Z", "2021-01-01T00:20:00Z", "2021-01-01T00:21:00Z", "2021-01-01T00:22:00Z", "2021-01-01T00:23:00Z", "2021-01-01T00:24:00Z", "2021-01-01T00:25:00Z", "2021-01-01T00:26:00Z", "2021-01-01T00:27:00Z", "2021-01-01T00:28:00Z", "2021-01-01T00:29:00Z"}, new float[]{(float)0.9617871642112732, (float)0.2490331083536148, (float)0.49205613136291504, (float)0.9895601272583008, (float)0.9171759486198425, (float)0.5754204988479614, (float)0.18110333383083344, (float)0.8852311968803406, (float)0.9543231725692749, (float)0.70880126953125, (float)0.7843572497367859, (float)0.7664787173271179, (float)0.36995524168014526, (float)0.5045198798179626, (float)0.5848931074142456, (float)0.7628913521766663, (float)0.8148406147956848, (float)0.08540458977222443, (float)0.034819766879081726, (float)0.21275098621845245, (float)0.9836175441741943, (float)0.9321441650390625, (float)0.03846660628914833, (float)0.1723138391971588, (float)0.8626383543014526, (float)0.35053229331970215, (float)0.6311416625976562, (float)0.07303526252508163, (float)0.08886179327964783, (float)0.7488605976104736}),
new VariableValues("Variable_3", new string[]{"2021-01-01T00:00:00Z", "2021-01-01T00:01:00Z", "2021-01-01T00:02:00Z", "2021-01-01T00:03:00Z", "2021-01-01T00:04:00Z", "2021-01-01T00:05:00Z", "2021-01-01T00:06:00Z", "2021-01-01T00:07:00Z", "2021-01-01T00:08:00Z", "2021-01-01T00:09:00Z", "2021-01-01T00:10:00Z", "2021-01-01T00:11:00Z", "2021-01-01T00:12:00Z", "2021-01-01T00:13:00Z", "2021-01-01T00:14:00Z", "2021-01-01T00:15:00Z", "2021-01-01T00:16:00Z", "2021-01-01T00:17:00Z", "2021-01-01T00:18:00Z", "2021-01-01T00:19:00Z", "2021-01-01T00:20:00Z", "2021-01-01T00:21:00Z", "2021-01-01T00:22:00Z", "2021-01-01T00:23:00Z", "2021-01-01T00:24:00Z", "2021-01-01T00:25:00Z", "2021-01-01T00:26:00Z", "2021-01-01T00:27:00Z", "2021-01-01T00:28:00Z", "2021-01-01T00:29:00Z"}, new float[]{(float)0.4030756950378418, (float)0.15526889264583588, (float)0.3635222613811493, (float)0.605120062828064, (float)0.8516795039176941, (float)0.2645605802536011, (float)0.6810875535011292, (float)0.9165894389152527, (float)0.7007832527160645, (float)0.5624155402183533, (float)0.6277289390563965, (float)0.1599205583333969, (float)0.602096438407898, (float)0.35937967896461487, (float)0.8731685876846313, (float)0.2030154913663864, (float)0.029261872172355652, (float)0.6261499524116516, (float)0.45850780606269836, (float)0.8275007009506226, (float)0.032760269939899445, (float)0.4485202729701996, (float)0.8915690779685974, (float)0.8916690349578857, (float)0.9469979405403137, (float)0.11529308557510376, (float)0.08818772435188293, (float)0.7426286339759827, (float)0.3237224817276001, (float)0.936268150806427})
            })
            {
                TopContributorCount = 10,
            };
            Response<MultivariateLastDetectionResult> response = client.DetectMultivariateLastAnomaly("45aad126-aafd-11ea-b8fb-d89ef3400c5f", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_DetectMultivariateLastAnomaly_DetectMultivariateLastAnomaly_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            MultivariateLastDetectionOptions options = new MultivariateLastDetectionOptions(new VariableValues[]
            {
new VariableValues("Variable_1", new string[]{"2021-01-01T00:00:00Z", "2021-01-01T00:01:00Z", "2021-01-01T00:02:00Z", "2021-01-01T00:03:00Z", "2021-01-01T00:04:00Z", "2021-01-01T00:05:00Z", "2021-01-01T00:06:00Z", "2021-01-01T00:07:00Z", "2021-01-01T00:08:00Z", "2021-01-01T00:09:00Z", "2021-01-01T00:10:00Z", "2021-01-01T00:11:00Z", "2021-01-01T00:12:00Z", "2021-01-01T00:13:00Z", "2021-01-01T00:14:00Z", "2021-01-01T00:15:00Z", "2021-01-01T00:16:00Z", "2021-01-01T00:17:00Z", "2021-01-01T00:18:00Z", "2021-01-01T00:19:00Z", "2021-01-01T00:20:00Z", "2021-01-01T00:21:00Z", "2021-01-01T00:22:00Z", "2021-01-01T00:23:00Z", "2021-01-01T00:24:00Z", "2021-01-01T00:25:00Z", "2021-01-01T00:26:00Z", "2021-01-01T00:27:00Z", "2021-01-01T00:28:00Z", "2021-01-01T00:29:00Z"}, new float[]{(float)0.45513784885406494, (float)0.7388603687286377, (float)0.20108824968338013, (float)0.7462812066078186, (float)0.07308129221200943, (float)0.3309047520160675, (float)0.7544925212860107, (float)0.9875063300132751, (float)0.6665933132171631, (float)0.6308351755142212, (float)0.08083309978246689, (float)0.8414415717124939, (float)0.5145835280418396, (float)0.09544898569583893, (float)0.7786793112754822, (float)0.41646134853363037, (float)0.030176186934113503, (float)0.3474214971065521, (float)0.5085301995277405, (float)0.42451199889183044, (float)0.21159441769123077, (float)0.24733519554138184, (float)0.8791022300720215, (float)0.9479621648788452, (float)0.26702702045440674, (float)0.6954503655433655, (float)0.12357284128665924, (float)0.821491539478302, (float)0.11813002079725266, (float)0.8579046130180359}),
new VariableValues("Variable_2", new string[]{"2021-01-01T00:00:00Z", "2021-01-01T00:01:00Z", "2021-01-01T00:02:00Z", "2021-01-01T00:03:00Z", "2021-01-01T00:04:00Z", "2021-01-01T00:05:00Z", "2021-01-01T00:06:00Z", "2021-01-01T00:07:00Z", "2021-01-01T00:08:00Z", "2021-01-01T00:09:00Z", "2021-01-01T00:10:00Z", "2021-01-01T00:11:00Z", "2021-01-01T00:12:00Z", "2021-01-01T00:13:00Z", "2021-01-01T00:14:00Z", "2021-01-01T00:15:00Z", "2021-01-01T00:16:00Z", "2021-01-01T00:17:00Z", "2021-01-01T00:18:00Z", "2021-01-01T00:19:00Z", "2021-01-01T00:20:00Z", "2021-01-01T00:21:00Z", "2021-01-01T00:22:00Z", "2021-01-01T00:23:00Z", "2021-01-01T00:24:00Z", "2021-01-01T00:25:00Z", "2021-01-01T00:26:00Z", "2021-01-01T00:27:00Z", "2021-01-01T00:28:00Z", "2021-01-01T00:29:00Z"}, new float[]{(float)0.9617871642112732, (float)0.2490331083536148, (float)0.49205613136291504, (float)0.9895601272583008, (float)0.9171759486198425, (float)0.5754204988479614, (float)0.18110333383083344, (float)0.8852311968803406, (float)0.9543231725692749, (float)0.70880126953125, (float)0.7843572497367859, (float)0.7664787173271179, (float)0.36995524168014526, (float)0.5045198798179626, (float)0.5848931074142456, (float)0.7628913521766663, (float)0.8148406147956848, (float)0.08540458977222443, (float)0.034819766879081726, (float)0.21275098621845245, (float)0.9836175441741943, (float)0.9321441650390625, (float)0.03846660628914833, (float)0.1723138391971588, (float)0.8626383543014526, (float)0.35053229331970215, (float)0.6311416625976562, (float)0.07303526252508163, (float)0.08886179327964783, (float)0.7488605976104736}),
new VariableValues("Variable_3", new string[]{"2021-01-01T00:00:00Z", "2021-01-01T00:01:00Z", "2021-01-01T00:02:00Z", "2021-01-01T00:03:00Z", "2021-01-01T00:04:00Z", "2021-01-01T00:05:00Z", "2021-01-01T00:06:00Z", "2021-01-01T00:07:00Z", "2021-01-01T00:08:00Z", "2021-01-01T00:09:00Z", "2021-01-01T00:10:00Z", "2021-01-01T00:11:00Z", "2021-01-01T00:12:00Z", "2021-01-01T00:13:00Z", "2021-01-01T00:14:00Z", "2021-01-01T00:15:00Z", "2021-01-01T00:16:00Z", "2021-01-01T00:17:00Z", "2021-01-01T00:18:00Z", "2021-01-01T00:19:00Z", "2021-01-01T00:20:00Z", "2021-01-01T00:21:00Z", "2021-01-01T00:22:00Z", "2021-01-01T00:23:00Z", "2021-01-01T00:24:00Z", "2021-01-01T00:25:00Z", "2021-01-01T00:26:00Z", "2021-01-01T00:27:00Z", "2021-01-01T00:28:00Z", "2021-01-01T00:29:00Z"}, new float[]{(float)0.4030756950378418, (float)0.15526889264583588, (float)0.3635222613811493, (float)0.605120062828064, (float)0.8516795039176941, (float)0.2645605802536011, (float)0.6810875535011292, (float)0.9165894389152527, (float)0.7007832527160645, (float)0.5624155402183533, (float)0.6277289390563965, (float)0.1599205583333969, (float)0.602096438407898, (float)0.35937967896461487, (float)0.8731685876846313, (float)0.2030154913663864, (float)0.029261872172355652, (float)0.6261499524116516, (float)0.45850780606269836, (float)0.8275007009506226, (float)0.032760269939899445, (float)0.4485202729701996, (float)0.8915690779685974, (float)0.8916690349578857, (float)0.9469979405403137, (float)0.11529308557510376, (float)0.08818772435188293, (float)0.7426286339759827, (float)0.3237224817276001, (float)0.936268150806427})
            })
            {
                TopContributorCount = 10,
            };
            Response<MultivariateLastDetectionResult> response = await client.DetectMultivariateLastAnomalyAsync("45aad126-aafd-11ea-b8fb-d89ef3400c5f", options);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_GetMultivariateModels_ListMultivariateModels()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            foreach (BinaryData item in client.GetMultivariateModels(0, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_GetMultivariateModels_ListMultivariateModels_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            await foreach (BinaryData item in client.GetMultivariateModelsAsync(0, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Multivariate_GetMultivariateModels_ListMultivariateModels_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            foreach (AnomalyDetectionModel item in client.GetMultivariateModels())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Multivariate_GetMultivariateModels_ListMultivariateModels_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Multivariate client = new AnomalyDetectorClient(endpoint, credential).GetMultivariateClient();

            await foreach (AnomalyDetectionModel item in client.GetMultivariateModelsAsync())
            {
            }
        }
    }
}
