// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Playwright.Models
{
    /// <summary> Playwright workspace resource properties. </summary>
    public partial class PlaywrightWorkspaceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PlaywrightWorkspaceProperties"/>. </summary>
        public PlaywrightWorkspaceProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PlaywrightWorkspaceProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last resource operation. </param>
        /// <param name="dataplaneUri"> The workspace data plane service API URI. </param>
        /// <param name="regionalAffinity"> Controls the connection region for client workers to cloud-hosted browsers. When enabled, workers connect to browsers in the closest Azure region for lower latency. When disabled, workers connect to browsers in the Azure region where the workspace was created. </param>
        /// <param name="localAuth"> Enables the workspace to use local authentication through service access tokens for operations. </param>
        /// <param name="workspaceId"> The workspace ID in GUID format. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PlaywrightWorkspaceProperties(PlaywrightProvisioningState? provisioningState, Uri dataplaneUri, PlaywrightEnablementStatus? regionalAffinity, PlaywrightEnablementStatus? localAuth, string workspaceId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            DataplaneUri = dataplaneUri;
            RegionalAffinity = regionalAffinity;
            LocalAuth = localAuth;
            WorkspaceId = workspaceId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of the last resource operation. </summary>
        public PlaywrightProvisioningState? ProvisioningState { get; }
        /// <summary> The workspace data plane service API URI. </summary>
        public Uri DataplaneUri { get; }
        /// <summary> Controls the connection region for client workers to cloud-hosted browsers. When enabled, workers connect to browsers in the closest Azure region for lower latency. When disabled, workers connect to browsers in the Azure region where the workspace was created. </summary>
        public PlaywrightEnablementStatus? RegionalAffinity { get; set; }
        /// <summary> Enables the workspace to use local authentication through service access tokens for operations. </summary>
        public PlaywrightEnablementStatus? LocalAuth { get; set; }
        /// <summary> The workspace ID in GUID format. </summary>
        public string WorkspaceId { get; }
    }
}
