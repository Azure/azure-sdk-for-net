// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Playwright.Models
{
    /// <summary> The status of the last resource operation. </summary>
    public readonly partial struct PlaywrightProvisioningState : IEquatable<PlaywrightProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PlaywrightProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PlaywrightProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string CreatingValue = "Creating";
        private const string DeletingValue = "Deleting";
        private const string AcceptedValue = "Accepted";

        /// <summary> Resource has been created. </summary>
        public static PlaywrightProvisioningState Succeeded { get; } = new PlaywrightProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static PlaywrightProvisioningState Failed { get; } = new PlaywrightProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static PlaywrightProvisioningState Canceled { get; } = new PlaywrightProvisioningState(CanceledValue);
        /// <summary> Creation in progress.. </summary>
        public static PlaywrightProvisioningState Creating { get; } = new PlaywrightProvisioningState(CreatingValue);
        /// <summary> Deletion in progress.. </summary>
        public static PlaywrightProvisioningState Deleting { get; } = new PlaywrightProvisioningState(DeletingValue);
        /// <summary> Request accepted for processing.. </summary>
        public static PlaywrightProvisioningState Accepted { get; } = new PlaywrightProvisioningState(AcceptedValue);
        /// <summary> Determines if two <see cref="PlaywrightProvisioningState"/> values are the same. </summary>
        public static bool operator ==(PlaywrightProvisioningState left, PlaywrightProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PlaywrightProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(PlaywrightProvisioningState left, PlaywrightProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PlaywrightProvisioningState"/>. </summary>
        public static implicit operator PlaywrightProvisioningState(string value) => new PlaywrightProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PlaywrightProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PlaywrightProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
