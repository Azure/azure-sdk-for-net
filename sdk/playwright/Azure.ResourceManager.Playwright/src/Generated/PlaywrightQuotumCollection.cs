// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Playwright.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Playwright
{
    /// <summary>
    /// A class representing a collection of <see cref="PlaywrightQuotumResource"/> and their operations.
    /// Each <see cref="PlaywrightQuotumResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="PlaywrightQuotumCollection"/> instance call the GetPlaywrightQuota method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class PlaywrightQuotumCollection : ArmCollection, IEnumerable<PlaywrightQuotumResource>, IAsyncEnumerable<PlaywrightQuotumResource>
    {
        private readonly ClientDiagnostics _playwrightQuotumPlaywrightQuotasClientDiagnostics;
        private readonly PlaywrightQuotasRestOperations _playwrightQuotumPlaywrightQuotasRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="PlaywrightQuotumCollection"/> class for mocking. </summary>
        protected PlaywrightQuotumCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PlaywrightQuotumCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal PlaywrightQuotumCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _playwrightQuotumPlaywrightQuotasClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Playwright", PlaywrightQuotumResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PlaywrightQuotumResource.ResourceType, out string playwrightQuotumPlaywrightQuotasApiVersion);
            _playwrightQuotumPlaywrightQuotasRestClient = new PlaywrightQuotasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, playwrightQuotumPlaywrightQuotasApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get subscription-level location-based Playwright quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PlaywrightQuotumResource>> GetAsync(QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotumPlaywrightQuotasClientDiagnostics.CreateScope("PlaywrightQuotumCollection.Get");
            scope.Start();
            try
            {
                var response = await _playwrightQuotumPlaywrightQuotasRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get subscription-level location-based Playwright quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PlaywrightQuotumResource> Get(QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotumPlaywrightQuotasClientDiagnostics.CreateScope("PlaywrightQuotumCollection.Get");
            scope.Start();
            try
            {
                var response = _playwrightQuotumPlaywrightQuotasRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Playwright quota resources for a given subscription Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PlaywrightQuotumResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PlaywrightQuotumResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _playwrightQuotumPlaywrightQuotasRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _playwrightQuotumPlaywrightQuotasRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PlaywrightQuotumResource(Client, PlaywrightQuotumData.DeserializePlaywrightQuotumData(e)), _playwrightQuotumPlaywrightQuotasClientDiagnostics, Pipeline, "PlaywrightQuotumCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Playwright quota resources for a given subscription Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightQuotumResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PlaywrightQuotumResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _playwrightQuotumPlaywrightQuotasRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _playwrightQuotumPlaywrightQuotasRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PlaywrightQuotumResource(Client, PlaywrightQuotumData.DeserializePlaywrightQuotumData(e)), _playwrightQuotumPlaywrightQuotasClientDiagnostics, Pipeline, "PlaywrightQuotumCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotumPlaywrightQuotasClientDiagnostics.CreateScope("PlaywrightQuotumCollection.Exists");
            scope.Start();
            try
            {
                var response = await _playwrightQuotumPlaywrightQuotasRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotumPlaywrightQuotasClientDiagnostics.CreateScope("PlaywrightQuotumCollection.Exists");
            scope.Start();
            try
            {
                var response = _playwrightQuotumPlaywrightQuotasRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<PlaywrightQuotumResource>> GetIfExistsAsync(QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotumPlaywrightQuotasClientDiagnostics.CreateScope("PlaywrightQuotumCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _playwrightQuotumPlaywrightQuotasRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PlaywrightQuotumResource>(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<PlaywrightQuotumResource> GetIfExists(QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotumPlaywrightQuotasClientDiagnostics.CreateScope("PlaywrightQuotumCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _playwrightQuotumPlaywrightQuotasRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PlaywrightQuotumResource>(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PlaywrightQuotumResource> IEnumerable<PlaywrightQuotumResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PlaywrightQuotumResource> IAsyncEnumerable<PlaywrightQuotumResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
