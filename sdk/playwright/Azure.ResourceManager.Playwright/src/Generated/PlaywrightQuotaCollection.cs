// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Playwright.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Playwright
{
    /// <summary>
    /// A class representing a collection of <see cref="PlaywrightQuotaResource"/> and their operations.
    /// Each <see cref="PlaywrightQuotaResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="PlaywrightQuotaCollection"/> instance call the GetPlaywrightQuotas method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class PlaywrightQuotaCollection : ArmCollection, IEnumerable<PlaywrightQuotaResource>, IAsyncEnumerable<PlaywrightQuotaResource>
    {
        private readonly ClientDiagnostics _playwrightQuotaClientDiagnostics;
        private readonly PlaywrightQuotasRestOperations _playwrightQuotaRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="PlaywrightQuotaCollection"/> class for mocking. </summary>
        protected PlaywrightQuotaCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PlaywrightQuotaCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal PlaywrightQuotaCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _playwrightQuotaClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Playwright", PlaywrightQuotaResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PlaywrightQuotaResource.ResourceType, out string playwrightQuotaApiVersion);
            _playwrightQuotaRestClient = new PlaywrightQuotasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, playwrightQuotaApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get subscription-level location-based Playwright quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PlaywrightQuotaResource>> GetAsync(PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotaClientDiagnostics.CreateScope("PlaywrightQuotaCollection.Get");
            scope.Start();
            try
            {
                var response = await _playwrightQuotaRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get subscription-level location-based Playwright quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PlaywrightQuotaResource> Get(PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotaClientDiagnostics.CreateScope("PlaywrightQuotaCollection.Get");
            scope.Start();
            try
            {
                var response = _playwrightQuotaRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Playwright quota resources for a given subscription Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PlaywrightQuotaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PlaywrightQuotaResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _playwrightQuotaRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _playwrightQuotaRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PlaywrightQuotaResource(Client, PlaywrightQuotaData.DeserializePlaywrightQuotaData(e)), _playwrightQuotaClientDiagnostics, Pipeline, "PlaywrightQuotaCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Playwright quota resources for a given subscription Id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightQuotaResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PlaywrightQuotaResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _playwrightQuotaRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _playwrightQuotaRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PlaywrightQuotaResource(Client, PlaywrightQuotaData.DeserializePlaywrightQuotaData(e)), _playwrightQuotaClientDiagnostics, Pipeline, "PlaywrightQuotaCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotaClientDiagnostics.CreateScope("PlaywrightQuotaCollection.Exists");
            scope.Start();
            try
            {
                var response = await _playwrightQuotaRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotaClientDiagnostics.CreateScope("PlaywrightQuotaCollection.Exists");
            scope.Start();
            try
            {
                var response = _playwrightQuotaRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<PlaywrightQuotaResource>> GetIfExistsAsync(PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotaClientDiagnostics.CreateScope("PlaywrightQuotaCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _playwrightQuotaRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PlaywrightQuotaResource>(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotaResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<PlaywrightQuotaResource> GetIfExists(PlaywrightQuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightQuotaClientDiagnostics.CreateScope("PlaywrightQuotaCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _playwrightQuotaRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), playwrightQuotaName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PlaywrightQuotaResource>(response.GetRawResponse());
                return Response.FromValue(new PlaywrightQuotaResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PlaywrightQuotaResource> IEnumerable<PlaywrightQuotaResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PlaywrightQuotaResource> IAsyncEnumerable<PlaywrightQuotaResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
