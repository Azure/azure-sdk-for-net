// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Playwright.Models;

namespace Azure.ResourceManager.Playwright
{
    /// <summary>
    /// A class representing a collection of <see cref="PlaywrightWorkspaceQuotumResource"/> and their operations.
    /// Each <see cref="PlaywrightWorkspaceQuotumResource"/> in the collection will belong to the same instance of <see cref="PlaywrightWorkspaceResource"/>.
    /// To get a <see cref="PlaywrightWorkspaceQuotumCollection"/> instance call the GetPlaywrightWorkspaceQuota method from an instance of <see cref="PlaywrightWorkspaceResource"/>.
    /// </summary>
    public partial class PlaywrightWorkspaceQuotumCollection : ArmCollection, IEnumerable<PlaywrightWorkspaceQuotumResource>, IAsyncEnumerable<PlaywrightWorkspaceQuotumResource>
    {
        private readonly ClientDiagnostics _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics;
        private readonly PlaywrightWorkspaceQuotasRestOperations _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient;

        /// <summary> Initializes a new instance of the <see cref="PlaywrightWorkspaceQuotumCollection"/> class for mocking. </summary>
        protected PlaywrightWorkspaceQuotumCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PlaywrightWorkspaceQuotumCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal PlaywrightWorkspaceQuotumCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Playwright", PlaywrightWorkspaceQuotumResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PlaywrightWorkspaceQuotumResource.ResourceType, out string playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasApiVersion);
            _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient = new PlaywrightWorkspaceQuotasRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PlaywrightWorkspaceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PlaywrightWorkspaceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Playwright workspace quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="quotaName"> The name of the PlaywrightWorkspaceQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PlaywrightWorkspaceQuotumResource>> GetAsync(QuotaName quotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics.CreateScope("PlaywrightWorkspaceQuotumCollection.Get");
            scope.Start();
            try
            {
                var response = await _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, quotaName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PlaywrightWorkspaceQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Playwright workspace quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="quotaName"> The name of the PlaywrightWorkspaceQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PlaywrightWorkspaceQuotumResource> Get(QuotaName quotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics.CreateScope("PlaywrightWorkspaceQuotumCollection.Get");
            scope.Start();
            try
            {
                var response = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, quotaName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PlaywrightWorkspaceQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List quota resources for a given Playwright workspace resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_ListByPlaywrightWorkspace</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PlaywrightWorkspaceQuotumResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PlaywrightWorkspaceQuotumResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.CreateListByPlaywrightWorkspaceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.CreateListByPlaywrightWorkspaceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PlaywrightWorkspaceQuotumResource(Client, PlaywrightWorkspaceQuotumData.DeserializePlaywrightWorkspaceQuotumData(e)), _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics, Pipeline, "PlaywrightWorkspaceQuotumCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List quota resources for a given Playwright workspace resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_ListByPlaywrightWorkspace</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceQuotumResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PlaywrightWorkspaceQuotumResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.CreateListByPlaywrightWorkspaceRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.CreateListByPlaywrightWorkspaceNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PlaywrightWorkspaceQuotumResource(Client, PlaywrightWorkspaceQuotumData.DeserializePlaywrightWorkspaceQuotumData(e)), _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics, Pipeline, "PlaywrightWorkspaceQuotumCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="quotaName"> The name of the PlaywrightWorkspaceQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(QuotaName quotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics.CreateScope("PlaywrightWorkspaceQuotumCollection.Exists");
            scope.Start();
            try
            {
                var response = await _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, quotaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="quotaName"> The name of the PlaywrightWorkspaceQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(QuotaName quotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics.CreateScope("PlaywrightWorkspaceQuotumCollection.Exists");
            scope.Start();
            try
            {
                var response = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, quotaName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="quotaName"> The name of the PlaywrightWorkspaceQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<PlaywrightWorkspaceQuotumResource>> GetIfExistsAsync(QuotaName quotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics.CreateScope("PlaywrightWorkspaceQuotumCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, quotaName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PlaywrightWorkspaceQuotumResource>(response.GetRawResponse());
                return Response.FromValue(new PlaywrightWorkspaceQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaceQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceQuotumResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="quotaName"> The name of the PlaywrightWorkspaceQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<PlaywrightWorkspaceQuotumResource> GetIfExists(QuotaName quotaName, CancellationToken cancellationToken = default)
        {
            using var scope = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasClientDiagnostics.CreateScope("PlaywrightWorkspaceQuotumCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _playwrightWorkspaceQuotumPlaywrightWorkspaceQuotasRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, quotaName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PlaywrightWorkspaceQuotumResource>(response.GetRawResponse());
                return Response.FromValue(new PlaywrightWorkspaceQuotumResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PlaywrightWorkspaceQuotumResource> IEnumerable<PlaywrightWorkspaceQuotumResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PlaywrightWorkspaceQuotumResource> IAsyncEnumerable<PlaywrightWorkspaceQuotumResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
