// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.Playwright.Mocking;
using Azure.ResourceManager.Playwright.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Playwright
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Playwright. </summary>
    public static partial class PlaywrightExtensions
    {
        private static MockablePlaywrightArmClient GetMockablePlaywrightArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockablePlaywrightArmClient(client0));
        }

        private static MockablePlaywrightResourceGroupResource GetMockablePlaywrightResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockablePlaywrightResourceGroupResource(client, resource.Id));
        }

        private static MockablePlaywrightSubscriptionResource GetMockablePlaywrightSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockablePlaywrightSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="PlaywrightWorkspaceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PlaywrightWorkspaceResource.CreateResourceIdentifier" /> to create a <see cref="PlaywrightWorkspaceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightArmClient.GetPlaywrightWorkspaceResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlaywrightWorkspaceResource"/> object. </returns>
        public static PlaywrightWorkspaceResource GetPlaywrightWorkspaceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlaywrightArmClient(client).GetPlaywrightWorkspaceResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PlaywrightQuotumResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PlaywrightQuotumResource.CreateResourceIdentifier" /> to create a <see cref="PlaywrightQuotumResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightArmClient.GetPlaywrightQuotumResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlaywrightQuotumResource"/> object. </returns>
        public static PlaywrightQuotumResource GetPlaywrightQuotumResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlaywrightArmClient(client).GetPlaywrightQuotumResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PlaywrightWorkspaceQuotumResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PlaywrightWorkspaceQuotumResource.CreateResourceIdentifier" /> to create a <see cref="PlaywrightWorkspaceQuotumResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightArmClient.GetPlaywrightWorkspaceQuotumResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="PlaywrightWorkspaceQuotumResource"/> object. </returns>
        public static PlaywrightWorkspaceQuotumResource GetPlaywrightWorkspaceQuotumResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockablePlaywrightArmClient(client).GetPlaywrightWorkspaceQuotumResource(id);
        }

        /// <summary>
        /// Gets a collection of PlaywrightWorkspaceResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightResourceGroupResource.GetPlaywrightWorkspaces()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of PlaywrightWorkspaceResources and their operations over a PlaywrightWorkspaceResource. </returns>
        public static PlaywrightWorkspaceCollection GetPlaywrightWorkspaces(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockablePlaywrightResourceGroupResource(resourceGroupResource).GetPlaywrightWorkspaces();
        }

        /// <summary>
        /// Get a PlaywrightWorkspace
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspace_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightResourceGroupResource.GetPlaywrightWorkspaceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PlaywrightWorkspaceResource>> GetPlaywrightWorkspaceAsync(this ResourceGroupResource resourceGroupResource, string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockablePlaywrightResourceGroupResource(resourceGroupResource).GetPlaywrightWorkspaceAsync(playwrightWorkspaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PlaywrightWorkspace
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspace_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightResourceGroupResource.GetPlaywrightWorkspace(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="playwrightWorkspaceName"> The name of the PlaywrightWorkspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="playwrightWorkspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="playwrightWorkspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<PlaywrightWorkspaceResource> GetPlaywrightWorkspace(this ResourceGroupResource resourceGroupResource, string playwrightWorkspaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockablePlaywrightResourceGroupResource(resourceGroupResource).GetPlaywrightWorkspace(playwrightWorkspaceName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of PlaywrightQuotumResources in the SubscriptionResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.GetPlaywrightQuota(AzureLocation)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An object representing collection of PlaywrightQuotumResources and their operations over a PlaywrightQuotumResource. </returns>
        public static PlaywrightQuotumCollection GetPlaywrightQuota(this SubscriptionResource subscriptionResource, AzureLocation location)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightQuota(location);
        }

        /// <summary>
        /// Get subscription-level location-based Playwright quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.GetPlaywrightQuotumAsync(AzureLocation,QuotaName,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PlaywrightQuotumResource>> GetPlaywrightQuotumAsync(this SubscriptionResource subscriptionResource, AzureLocation location, QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightQuotumAsync(location, playwrightQuotaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get subscription-level location-based Playwright quota resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/playwrightQuotas/{playwrightQuotaName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightQuota_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightQuotumResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.GetPlaywrightQuotum(AzureLocation,QuotaName,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="playwrightQuotaName"> The name of the PlaywrightQuota. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PlaywrightQuotumResource> GetPlaywrightQuotum(this SubscriptionResource subscriptionResource, AzureLocation location, QuotaName playwrightQuotaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightQuotum(location, playwrightQuotaName, cancellationToken);
        }

        /// <summary>
        /// List PlaywrightWorkspace resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/playwrightWorkspaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspace_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.GetPlaywrightWorkspaces(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PlaywrightWorkspaceResource> GetPlaywrightWorkspacesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightWorkspacesAsync(cancellationToken);
        }

        /// <summary>
        /// List PlaywrightWorkspace resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/playwrightWorkspaces</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspace_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.GetPlaywrightWorkspaces(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="PlaywrightWorkspaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PlaywrightWorkspaceResource> GetPlaywrightWorkspaces(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).GetPlaywrightWorkspaces(cancellationToken);
        }

        /// <summary>
        /// Implements global CheckNameAvailability operations
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaces_CheckNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.CheckNameAvailabilityPlaywrightWorkspace(CheckNameAvailabilityContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="content"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityResponse>> CheckNameAvailabilityPlaywrightWorkspaceAsync(this SubscriptionResource subscriptionResource, CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockablePlaywrightSubscriptionResource(subscriptionResource).CheckNameAvailabilityPlaywrightWorkspaceAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Implements global CheckNameAvailability operations
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PlaywrightWorkspaces_CheckNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PlaywrightWorkspaceResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockablePlaywrightSubscriptionResource.CheckNameAvailabilityPlaywrightWorkspace(CheckNameAvailabilityContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> The CheckAvailability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="content"/> is null. </exception>
        public static Response<CheckNameAvailabilityResponse> CheckNameAvailabilityPlaywrightWorkspace(this SubscriptionResource subscriptionResource, CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockablePlaywrightSubscriptionResource(subscriptionResource).CheckNameAvailabilityPlaywrightWorkspace(content, cancellationToken);
        }
    }
}
