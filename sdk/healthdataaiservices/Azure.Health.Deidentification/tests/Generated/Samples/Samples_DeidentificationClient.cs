// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Deidentification.Samples
{
    public partial class Samples_DeidentificationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.GetJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.GetJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = client.GetJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.GetJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.GetJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.GetJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = client.GetJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.GetJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_CancelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.CancelJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_CancelJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.CancelJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_CancelJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = client.CancelJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_CancelJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.CancelJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_CancelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.CancelJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_CancelJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.CancelJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_CancelJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = client.CancelJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_CancelJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.CancelJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_DeleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.DeleteJob("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_DeleteJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_DeleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.DeleteJob("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_DeleteJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_Deidentify_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
            });
            Response response = client.Deidentify(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_Deidentify_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
            });
            Response response = await client.DeidentifyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_Deidentify_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationContent body = new DeidentificationContent("<inputText>");
            Response<DeidentificationResult> response = client.Deidentify(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_Deidentify_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationContent body = new DeidentificationContent("<inputText>");
            Response<DeidentificationResult> response = await client.DeidentifyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_Deidentify_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                operation = "Redact",
                dataType = "Plaintext",
                redactionFormat = "<redactionFormat>",
            });
            Response response = client.Deidentify(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputText").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").GetProperty("utf8").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").GetProperty("utf16").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").GetProperty("codePoint").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").GetProperty("utf8").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").GetProperty("utf16").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").GetProperty("codePoint").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_Deidentify_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                operation = "Redact",
                dataType = "Plaintext",
                redactionFormat = "<redactionFormat>",
            });
            Response response = await client.DeidentifyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputText").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").GetProperty("utf8").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").GetProperty("utf16").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").GetProperty("codePoint").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").GetProperty("utf8").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").GetProperty("utf16").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").GetProperty("codePoint").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_Deidentify_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationContent body = new DeidentificationContent("<inputText>")
            {
                Operation = OperationType.Redact,
                DataType = DocumentDataType.Plaintext,
                RedactionFormat = "<redactionFormat>",
            };
            Response<DeidentificationResult> response = client.Deidentify(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_Deidentify_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationContent body = new DeidentificationContent("<inputText>")
            {
                Operation = OperationType.Redact,
                DataType = DocumentDataType.Plaintext,
                RedactionFormat = "<redactionFormat>",
            };
            Response<DeidentificationResult> response = await client.DeidentifyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJobs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobs(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJobs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJobs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (DeidentificationJob item in client.GetJobs())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJobs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (DeidentificationJob item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJobs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobs(1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("redactionFormat").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJobs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsAsync(1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("redactionFormat").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJobs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (DeidentificationJob item in client.GetJobs(maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJobs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (DeidentificationJob item in client.GetJobsAsync(maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentDetails_GetJobDocuments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobDocuments("<name>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentDetails_GetJobDocuments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobDocumentsAsync("<name>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentDetails_GetJobDocuments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (DocumentDetails item in client.GetJobDocuments("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentDetails_GetJobDocuments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (DocumentDetails item in client.GetJobDocumentsAsync("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentDetails_GetJobDocuments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobDocuments("<name>", 1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentDetails_GetJobDocuments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobDocumentsAsync("<name>", 1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DocumentDetails_GetJobDocuments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            foreach (DocumentDetails item in client.GetJobDocuments("<name>", maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DocumentDetails_GetJobDocuments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            await foreach (DocumentDetails item in client.GetJobDocumentsAsync("<name>", maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_CreateJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
            });
            Operation<BinaryData> operation = client.CreateJob(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_CreateJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
            });
            Operation<BinaryData> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_CreateJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"));
            Operation<DeidentificationJob> operation = client.CreateJob(WaitUntil.Completed, "<name>", resource);
            DeidentificationJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_CreateJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"));
            Operation<DeidentificationJob> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", resource);
            DeidentificationJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_CreateJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                operation = "Redact",
                dataType = "Plaintext",
                redactionFormat = "<redactionFormat>",
            });
            Operation<BinaryData> operation = client.CreateJob(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_CreateJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                operation = "Redact",
                dataType = "Plaintext",
                redactionFormat = "<redactionFormat>",
            });
            Operation<BinaryData> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_CreateJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>")
            {
                Extensions = { "<extensions>" },
            }, new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"))
            {
                Operation = OperationType.Redact,
                DataType = DocumentDataType.Plaintext,
                RedactionFormat = "<redactionFormat>",
            };
            Operation<DeidentificationJob> operation = client.CreateJob(WaitUntil.Completed, "<name>", resource);
            DeidentificationJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_CreateJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>")
            {
                Extensions = { "<extensions>" },
            }, new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"))
            {
                Operation = OperationType.Redact,
                DataType = DocumentDataType.Plaintext,
                RedactionFormat = "<redactionFormat>",
            };
            Operation<DeidentificationJob> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", resource);
            DeidentificationJob responseData = operation.Value;
        }
    }
}
