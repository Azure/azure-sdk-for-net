// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Deidentification.Samples
{
    public partial class Samples_DeidentificationClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJob_GetADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.GetJob("job_smith_documents_1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJob_GetADeIdentificationJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.GetJobAsync("job_smith_documents_1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_GetJob_GetADeIdentificationJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = client.GetJob("job_smith_documents_1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_GetJob_GetADeIdentificationJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.GetJobAsync("job_smith_documents_1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_CancelJob_CancelADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.CancelJob("job_smith_documents_1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_CancelJob_CancelADeIdentificationJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.CancelJobAsync("job_smith_documents_1", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_CancelJob_CancelADeIdentificationJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = client.CancelJob("job_smith_documents_1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_CancelJob_CancelADeIdentificationJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.CancelJobAsync("job_smith_documents_1");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_DeleteJob_DeleteADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = client.DeleteJob("job_smith_documents_1");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_DeleteJob_DeleteADeIdentificationJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("job_smith_documents_1");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_DeidentifyText_DeIdentifyText()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "Hello my name is John Smith.",
                operation = "Redact",
                customizations = new
                {
                    redactionFormat = "[{type}]",
                },
            });
            Response response = client.DeidentifyText(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_DeidentifyText_DeIdentifyText_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "Hello my name is John Smith.",
                operation = "Redact",
                customizations = new
                {
                    redactionFormat = "[{type}]",
                },
            });
            Response response = await client.DeidentifyTextAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidServices_DeidentifyText_DeIdentifyText_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationContent content = new DeidentificationContent("Hello my name is John Smith.")
            {
                Operation = DeidentificationOperationType.Redact,
                Customizations = new DeidentificationCustomizationOptions
                {
                    RedactionFormat = "[{type}]",
                },
            };
            Response<DeidentificationResult> response = client.DeidentifyText(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidServices_DeidentifyText_DeIdentifyText_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationContent content = new DeidentificationContent("Hello my name is John Smith.")
            {
                Operation = DeidentificationOperationType.Redact,
                Customizations = new DeidentificationCustomizationOptions
                {
                    RedactionFormat = "[{type}]",
                },
            };
            Response<DeidentificationResult> response = await client.DeidentifyTextAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_DeidentifyDocuments_CreateADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                operation = "Redact",
                sourceLocation = new
                {
                    location = "https://blobtest.blob.core.windows.net/container",
                    prefix = "documents/",
                },
                targetLocation = new
                {
                    location = "https://blobtest.blob.core.windows.net/container",
                    prefix = "_output/",
                    overwrite = true,
                },
                customizations = new
                {
                    redactionFormat = "[{type}]",
                },
            });
            Operation<BinaryData> operation = client.DeidentifyDocuments(WaitUntil.Completed, "job_smith_documents_1", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_DeidentifyDocuments_CreateADeIdentificationJob_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                operation = "Redact",
                sourceLocation = new
                {
                    location = "https://blobtest.blob.core.windows.net/container",
                    prefix = "documents/",
                },
                targetLocation = new
                {
                    location = "https://blobtest.blob.core.windows.net/container",
                    prefix = "_output/",
                    overwrite = true,
                },
                customizations = new
                {
                    redactionFormat = "[{type}]",
                },
            });
            Operation<BinaryData> operation = await client.DeidentifyDocumentsAsync(WaitUntil.Completed, "job_smith_documents_1", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentificationJob_DeidentifyDocuments_CreateADeIdentificationJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("https://blobtest.blob.core.windows.net/container"), "documents/"), new TargetStorageLocation(new Uri("https://blobtest.blob.core.windows.net/container"), "_output/")
            {
                Overwrite = true,
            })
            {
                Operation = DeidentificationOperationType.Redact,
                Customizations = new DeidentificationJobCustomizationOptions
                {
                    RedactionFormat = "[{type}]",
                },
            };
            Operation<DeidentificationJob> operation = client.DeidentifyDocuments(WaitUntil.Completed, "job_smith_documents_1", resource);
            DeidentificationJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentificationJob_DeidentifyDocuments_CreateADeIdentificationJob_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = new DeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("https://blobtest.blob.core.windows.net/container"), "documents/"), new TargetStorageLocation(new Uri("https://blobtest.blob.core.windows.net/container"), "_output/")
            {
                Overwrite = true,
            })
            {
                Operation = DeidentificationOperationType.Redact,
                Customizations = new DeidentificationJobCustomizationOptions
                {
                    RedactionFormat = "[{type}]",
                },
            };
            Operation<DeidentificationJob> operation = await client.DeidentifyDocumentsAsync(WaitUntil.Completed, "job_smith_documents_1", resource);
            DeidentificationJob responseData = operation.Value;
        }
    }
}
