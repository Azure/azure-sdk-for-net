// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Deidentification.Samples
{
    public partial class Samples_Deidentification
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = client.GetJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = await client.GetJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = client.GetJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = await client.GetJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = client.GetJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = await client.GetJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = client.GetJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = await client.GetJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_CancelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = client.CancelJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_CancelJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = await client.CancelJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_CancelJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = client.CancelJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_CancelJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = await client.CancelJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_CancelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = client.CancelJob("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_CancelJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = await client.CancelJobAsync("<name>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_CancelJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = client.CancelJob("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_CancelJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response<DeidentifyJob> response = await client.CancelJobAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_DeleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = client.DeleteJob("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_DeleteJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = await client.DeleteJobAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_DeleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = client.DeleteJob("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_DeleteJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            Response response = await client.DeleteJobAsync("<name>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_Deidentify_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "PlainText",
                operation = "Redact",
                stringIndexType = "TextElement_v8",
            });
            Response response = client.Deidentify(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_Deidentify_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "PlainText",
                operation = "Redact",
                stringIndexType = "TextElement_v8",
            });
            Response response = await client.DeidentifyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_Deidentify_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyConfig body = new DeidentifyConfig("<inputText>", DocumentDataType.PlainText, OperationType.Redact, StringIndexType.TextElementV8);
            Response<DeidentifyResult> response = client.Deidentify(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_Deidentify_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyConfig body = new DeidentifyConfig("<inputText>", DocumentDataType.PlainText, OperationType.Redact, StringIndexType.TextElementV8);
            Response<DeidentifyResult> response = await client.DeidentifyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_Deidentify_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "PlainText",
                operation = "Redact",
                stringIndexType = "TextElement_v8",
                redactionFormat = "<redactionFormat>",
            });
            Response response = client.Deidentify(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputText").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_Deidentify_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "<inputText>",
                dataType = "PlainText",
                operation = "Redact",
                stringIndexType = "TextElement_v8",
                redactionFormat = "<redactionFormat>",
            });
            Response response = await client.DeidentifyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("outputText").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("offset").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("entities")[0].GetProperty("confidenceScore").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("stringIndexType").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("taggerResult").GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Deidentification_Deidentify_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyConfig body = new DeidentifyConfig("<inputText>", DocumentDataType.PlainText, OperationType.Redact, StringIndexType.TextElementV8)
            {
                RedactionFormat = "<redactionFormat>",
            };
            Response<DeidentifyResult> response = client.Deidentify(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Deidentification_Deidentify_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyConfig body = new DeidentifyConfig("<inputText>", DocumentDataType.PlainText, OperationType.Redact, StringIndexType.TextElementV8)
            {
                RedactionFormat = "<redactionFormat>",
            };
            Response<DeidentifyResult> response = await client.DeidentifyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJobs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (BinaryData item in client.GetJobs(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJobs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (BinaryData item in client.GetJobsAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJobs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (DeidentifyJob item in client.GetJobs())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJobs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (DeidentifyJob item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJobs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (BinaryData item in client.GetJobs(1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("redactionFormat").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJobs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (BinaryData item in client.GetJobsAsync(1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
                Console.WriteLine(result.GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("operation").ToString());
                Console.WriteLine(result.GetProperty("redactionFormat").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("createdAt").ToString());
                Console.WriteLine(result.GetProperty("startedAt").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_GetJobs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (DeidentifyJob item in client.GetJobs(maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_GetJobs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (DeidentifyJob item in client.GetJobsAsync(maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HealthFileDetails_GetJobFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (BinaryData item in client.GetJobFiles("<name>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HealthFileDetails_GetJobFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (BinaryData item in client.GetJobFilesAsync("<name>", null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HealthFileDetails_GetJobFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (HealthFileDetails item in client.GetJobFiles("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HealthFileDetails_GetJobFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (HealthFileDetails item in client.GetJobFilesAsync("<name>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HealthFileDetails_GetJobFiles_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (BinaryData item in client.GetJobFiles("<name>", 1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HealthFileDetails_GetJobFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (BinaryData item in client.GetJobFilesAsync("<name>", 1234, "<continuationToken>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("input").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("output").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HealthFileDetails_GetJobFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            foreach (HealthFileDetails item in client.GetJobFiles("<name>", maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HealthFileDetails_GetJobFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            await foreach (HealthFileDetails item in client.GetJobFilesAsync("<name>", maxpagesize: 1234, continuationToken: "<continuationToken>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_CreateJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
            });
            Operation<BinaryData> operation = client.CreateJob(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_CreateJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
            });
            Operation<BinaryData> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_CreateJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyJob resource = new DeidentifyJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact);
            Operation<DeidentifyJob> operation = client.CreateJob(WaitUntil.Completed, "<name>", resource);
            DeidentifyJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_CreateJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyJob resource = new DeidentifyJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact);
            Operation<DeidentifyJob> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", resource);
            DeidentifyJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_CreateJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
                redactionFormat = "<redactionFormat>",
            });
            Operation<BinaryData> operation = client.CreateJob(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_CreateJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                    extensions = new object[]
            {
"<extensions>"
            },
                },
                targetLocation = new
                {
                    location = "http://localhost:3000",
                    prefix = "<prefix>",
                },
                dataType = "PlainText",
                operation = "Redact",
                redactionFormat = "<redactionFormat>",
            });
            Operation<BinaryData> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("sourceLocation").GetProperty("extensions")[0].ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("targetLocation").GetProperty("prefix").ToString());
            Console.WriteLine(result.GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("operation").ToString());
            Console.WriteLine(result.GetProperty("redactionFormat").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("createdAt").ToString());
            Console.WriteLine(result.GetProperty("startedAt").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedAt").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("successful").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("canceled").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("total").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("bytesProcessed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeidentifyJob_CreateJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyJob resource = new DeidentifyJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact)
            {
                RedactionFormat = "<redactionFormat>",
            };
            Operation<DeidentifyJob> operation = client.CreateJob(WaitUntil.Completed, "<name>", resource);
            DeidentifyJob responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeidentifyJob_CreateJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Deidentification client = new DeidentificationClient(endpoint, credential).GetDeidentificationClient(apiVersion: "2024-01-16-preview");

            DeidentifyJob resource = new DeidentifyJob(new SourceStorageLocation(new Uri("http://localhost:3000"), "<prefix>", new string[] { "<extensions>" }), new TargetStorageLocation(new Uri("http://localhost:3000"), "<prefix>"), DocumentDataType.PlainText, OperationType.Redact)
            {
                RedactionFormat = "<redactionFormat>",
            };
            Operation<DeidentifyJob> operation = await client.CreateJobAsync(WaitUntil.Completed, "<name>", resource);
            DeidentifyJob responseData = operation.Value;
        }
    }
}
