// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Health.Deidentification.Tests
{
    public partial class DeidentificationClientTests : HealthDeidentificationTestBase
    {
        public DeidentificationClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_GetJob_GetADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            Response response = await client.GetJobAsync("documents_smith_1", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_GetJob_GetADeIdentificationJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.GetJobAsync("documents_smith_1");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidServices_CancelJob_CancelADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            Response response = await client.CancelJobAsync("documents_smith_1", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidServices_CancelJob_CancelADeIdentificationJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            Response<DeidentificationJob> response = await client.CancelJobAsync("documents_smith_1");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_DeleteJob_DeleteADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("documents_smith_1");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidServices_Deidentify_DeIdentifyText()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                inputText = "Hello my name is John Smith.",
                operation = "Redact",
                dataType = "Plaintext",
                redactionFormat = "[{type}]",
            });
            Response response = await client.DeidentifyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidServices_Deidentify_DeIdentifyText_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            DeidentificationContent body = new DeidentificationContent("Hello my name is John Smith.")
            {
                Operation = OperationType.Redact,
                DataType = DocumentDataType.Plaintext,
                RedactionFormat = "[{type}]",
            };
            Response<DeidentificationResult> response = await client.DeidentifyAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_GetJobs_ListDeIdentificationJobs()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsAsync(10, "K1JJRDpzOEtaQWZabUQrQUNBQUFBQUFBQUFBQT09I1JUOjEjVFJDOjEwI0ZQQzpBZ0VBQUFBTUFDUUFBQUFBQUE9PQ==", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_GetJobs_ListDeIdentificationJobs_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            await foreach (DeidentificationJob item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentDetails_GetJobDocuments_ListProcessedDocumentsWithinAJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobDocumentsAsync("documents_smith_1", 10, "K1JJRDpzOEtaQWZabUQrQUNBQUFBQUFBQUFBQT09I1JUOjEjVFJDOjEwI0ZQQzpBZ0VBQUFBTUFDUUFBQUFBQUE9PQ==", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DocumentDetails_GetJobDocuments_ListProcessedDocumentsWithinAJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            await foreach (DocumentDetails item in client.GetJobDocumentsAsync("documents_smith_1"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_CreateJob_CreateADeIdentificationJob()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                sourceLocation = new
                {
                    location = "https://blobtest.blob.core.windows.net/container?sp=r&st=2024-01-24T18:11:10Z&se=2024-01-25T02:11:10Z&spr=https&sv=2022-11-02&sr=c&sig=signature%3D",
                    prefix = "/documents",
                    extensions = new object[]
            {
"*"
            },
                },
                targetLocation = new
                {
                    location = "https://blobtest.blob.core.windows.net/container?sp=r&st=2024-01-24T18:11:10Z&se=2024-01-25T02:11:10Z&spr=https&sv=2022-11-02&sr=c&sig=signature%3D",
                    prefix = "/documents",
                },
                operation = "Redact",
                dataType = "Plaintext",
                redactionFormat = "[{type}]",
                status = "NotStarted",
            });
            Operation<BinaryData> operation = await client.CreateJobAsync(WaitUntil.Completed, "documents_smith_1", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeidentificationJob_CreateJob_CreateADeIdentificationJob_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeidentificationClient client = CreateDeidentificationClient(endpoint, credential);

            DeidentificationJob resource = new DeidentificationJob(new SourceStorageLocation(new Uri("https://blobtest.blob.core.windows.net/container?sp=r&st=2024-01-24T18:11:10Z&se=2024-01-25T02:11:10Z&spr=https&sv=2022-11-02&sr=c&sig=signature%3D"), "/documents")
            {
                Extensions = { "*" },
            }, new TargetStorageLocation(new Uri("https://blobtest.blob.core.windows.net/container?sp=r&st=2024-01-24T18:11:10Z&se=2024-01-25T02:11:10Z&spr=https&sv=2022-11-02&sr=c&sig=signature%3D"), "/documents"))
            {
                Operation = OperationType.Redact,
                DataType = DocumentDataType.Plaintext,
                RedactionFormat = "[{type}]",
            };
            Operation<DeidentificationJob> operation = await client.CreateJobAsync(WaitUntil.Completed, "documents_smith_1", resource);
            DeidentificationJob responseData = operation.Value;
        }
    }
}
