// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Health.Deidentification
{
    /// <summary> Grouped PHI entities with shared encoding specification. </summary>
    public partial class TaggedPhiEntities
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="TaggedPhiEntities"/>. </summary>
        /// <param name="encoding"> The encoding type used for all entities in this group. </param>
        /// <param name="entities"> List of PHI entities using the specified encoding. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="entities"/> is null. </exception>
        public TaggedPhiEntities(TextEncodingType encoding, IEnumerable<SimplePhiEntity> entities)
        {
            Argument.AssertNotNull(entities, nameof(entities));

            Encoding = encoding;
            Entities = entities.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="TaggedPhiEntities"/>. </summary>
        /// <param name="encoding"> The encoding type used for all entities in this group. </param>
        /// <param name="entities"> List of PHI entities using the specified encoding. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal TaggedPhiEntities(TextEncodingType encoding, IList<SimplePhiEntity> entities, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Encoding = encoding;
            Entities = entities;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The encoding type used for all entities in this group. </summary>
        public TextEncodingType Encoding { get; }

        /// <summary> List of PHI entities using the specified encoding. </summary>
        public IList<SimplePhiEntity> Entities { get; }
    }
}
