// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Health.Deidentification
{
    internal static partial class PhiCategoryExtensions
    {
        public static string ToSerialString(this PhiCategory value) => value switch
        {
            PhiCategory.Unknown => "Unknown",
            PhiCategory.Account => "Account",
            PhiCategory.Age => "Age",
            PhiCategory.BioID => "BioID",
            PhiCategory.City => "City",
            PhiCategory.CountryOrRegion => "CountryOrRegion",
            PhiCategory.Date => "Date",
            PhiCategory.Device => "Device",
            PhiCategory.Doctor => "Doctor",
            PhiCategory.Email => "Email",
            PhiCategory.Fax => "Fax",
            PhiCategory.HealthPlan => "HealthPlan",
            PhiCategory.Hospital => "Hospital",
            PhiCategory.IDNum => "IDNum",
            PhiCategory.IPAddress => "IPAddress",
            PhiCategory.License => "License",
            PhiCategory.LocationOther => "LocationOther",
            PhiCategory.MedicalRecord => "MedicalRecord",
            PhiCategory.Organization => "Organization",
            PhiCategory.Patient => "Patient",
            PhiCategory.Phone => "Phone",
            PhiCategory.Profession => "Profession",
            PhiCategory.SocialSecurity => "SocialSecurity",
            PhiCategory.State => "State",
            PhiCategory.Street => "Street",
            PhiCategory.Url => "Url",
            PhiCategory.Username => "Username",
            PhiCategory.Vehicle => "Vehicle",
            PhiCategory.Zip => "Zip",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown PhiCategory value.")
        };

        public static PhiCategory ToPhiCategory(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unknown")) return PhiCategory.Unknown;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Account")) return PhiCategory.Account;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Age")) return PhiCategory.Age;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BioID")) return PhiCategory.BioID;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "City")) return PhiCategory.City;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CountryOrRegion")) return PhiCategory.CountryOrRegion;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Date")) return PhiCategory.Date;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Device")) return PhiCategory.Device;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Doctor")) return PhiCategory.Doctor;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Email")) return PhiCategory.Email;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Fax")) return PhiCategory.Fax;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "HealthPlan")) return PhiCategory.HealthPlan;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Hospital")) return PhiCategory.Hospital;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "IDNum")) return PhiCategory.IDNum;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "IPAddress")) return PhiCategory.IPAddress;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "License")) return PhiCategory.License;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "LocationOther")) return PhiCategory.LocationOther;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MedicalRecord")) return PhiCategory.MedicalRecord;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Organization")) return PhiCategory.Organization;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Patient")) return PhiCategory.Patient;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Phone")) return PhiCategory.Phone;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Profession")) return PhiCategory.Profession;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "SocialSecurity")) return PhiCategory.SocialSecurity;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "State")) return PhiCategory.State;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Street")) return PhiCategory.Street;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Url")) return PhiCategory.Url;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Username")) return PhiCategory.Username;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Vehicle")) return PhiCategory.Vehicle;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Zip")) return PhiCategory.Zip;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown PhiCategory value.");
        }
    }
}
