// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Deidentification
{
    /// <summary> Simple PHI entity with encoding-specific offset and length values. </summary>
    public partial class SimplePhiEntity
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="SimplePhiEntity"/>. </summary>
        /// <param name="category"> PHI Category of the entity. </param>
        /// <param name="offset"> Starting index of the location from within the input text using the group's encoding. </param>
        /// <param name="length"> Length of the input text using the group's encoding. </param>
        public SimplePhiEntity(PhiCategory category, int offset, int length)
        {
            Category = category;
            Offset = offset;
            Length = length;
        }

        /// <summary> Initializes a new instance of <see cref="SimplePhiEntity"/>. </summary>
        /// <param name="category"> PHI Category of the entity. </param>
        /// <param name="offset"> Starting index of the location from within the input text using the group's encoding. </param>
        /// <param name="length"> Length of the input text using the group's encoding. </param>
        /// <param name="text"> Text of the entity (optional). </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal SimplePhiEntity(PhiCategory category, int offset, int length, string text, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Category = category;
            Offset = offset;
            Length = length;
            Text = text;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> PHI Category of the entity. </summary>
        public PhiCategory Category { get; }

        /// <summary> Starting index of the location from within the input text using the group's encoding. </summary>
        public int Offset { get; }

        /// <summary> Length of the input text using the group's encoding. </summary>
        public int Length { get; }

        /// <summary> Text of the entity (optional). </summary>
        public string Text { get; set; }
    }
}
