// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Health.Deidentification
{
    /// <summary> Encoding type for text offset and length calculations. </summary>
    public readonly partial struct TextEncodingType : IEquatable<TextEncodingType>
    {
        private readonly string _value;
        /// <summary> UTF-8 encoding. </summary>
        private const string Utf8Value = "Utf8";
        /// <summary> UTF-16 encoding. Primary encoding used by .NET, Java, and JavaScript. </summary>
        private const string Utf16Value = "Utf16";
        /// <summary> CodePoint encoding. Primary encoding used by Python. </summary>
        private const string CodePointValue = "CodePoint";

        /// <summary> Initializes a new instance of <see cref="TextEncodingType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TextEncodingType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> UTF-8 encoding. </summary>
        public static TextEncodingType Utf8 { get; } = new TextEncodingType(Utf8Value);

        /// <summary> UTF-16 encoding. Primary encoding used by .NET, Java, and JavaScript. </summary>
        public static TextEncodingType Utf16 { get; } = new TextEncodingType(Utf16Value);

        /// <summary> CodePoint encoding. Primary encoding used by Python. </summary>
        public static TextEncodingType CodePoint { get; } = new TextEncodingType(CodePointValue);

        /// <summary> Determines if two <see cref="TextEncodingType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(TextEncodingType left, TextEncodingType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="TextEncodingType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(TextEncodingType left, TextEncodingType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="TextEncodingType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TextEncodingType(string value) => new TextEncodingType(value);

        /// <summary> Converts a string to a <see cref="TextEncodingType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator TextEncodingType?(string value) => value == null ? null : new TextEncodingType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TextEncodingType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(TextEncodingType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
