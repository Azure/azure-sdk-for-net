// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Deidentification
{
    /// <summary> File report once job has completed. </summary>
    public partial class HealthFileDetails
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HealthFileDetails"/>. </summary>
        /// <param name="input"> File Location for the input. </param>
        /// <param name="status"> Status of the file. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        internal HealthFileDetails(FileLocation input, OperationState status)
        {
            Argument.AssertNotNull(input, nameof(input));

            Input = input;
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="HealthFileDetails"/>. </summary>
        /// <param name="id"> Id of the file report. </param>
        /// <param name="input"> File Location for the input. </param>
        /// <param name="output"> File Location for the output. </param>
        /// <param name="status"> Status of the file. </param>
        /// <param name="error"> Error when file fails. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HealthFileDetails(string id, FileLocation input, FileLocation output, OperationState status, ResponseError error, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Input = input;
            Output = output;
            Status = status;
            Error = error;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="HealthFileDetails"/> for deserialization. </summary>
        internal HealthFileDetails()
        {
        }

        /// <summary> Id of the file report. </summary>
        public string Id { get; }
        /// <summary> File Location for the input. </summary>
        public FileLocation Input { get; }
        /// <summary> File Location for the output. </summary>
        public FileLocation Output { get; }
        /// <summary> Status of the file. </summary>
        public OperationState Status { get; }
        /// <summary> Error when file fails. </summary>
        public ResponseError Error { get; }
    }
}
