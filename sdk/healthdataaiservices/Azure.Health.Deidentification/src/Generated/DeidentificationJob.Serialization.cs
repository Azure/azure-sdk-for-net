// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Deidentification
{
    /// <summary> A job containing a batch of documents to de-identify. </summary>
    public partial class DeidentificationJob : IJsonModel<DeidentificationJob>
    {
        /// <summary> Initializes a new instance of <see cref="DeidentificationJob"/> for deserialization. </summary>
        internal DeidentificationJob()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DeidentificationJob>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeidentificationJob>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeidentificationJob)} does not support writing '{format}' format.");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(JobName);
            }
            if (Optional.IsDefined(OperationType))
            {
                writer.WritePropertyName("operation"u8);
                writer.WriteStringValue(OperationType.Value.ToString());
            }
            writer.WritePropertyName("sourceLocation"u8);
            writer.WriteObjectValue(SourceLocation, options);
            writer.WritePropertyName("targetLocation"u8);
            writer.WriteObjectValue(TargetLocation, options);
            if (Optional.IsDefined(Customizations))
            {
                writer.WritePropertyName("customizations"u8);
                writer.WriteObjectValue(Customizations, options);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error"u8);
                JsonSerializer.Serialize(writer, Error);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("lastUpdatedAt"u8);
                writer.WriteStringValue(LastUpdatedAt, "O");
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("createdAt"u8);
                writer.WriteStringValue(CreatedAt, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(StartedAt))
            {
                writer.WritePropertyName("startedAt"u8);
                writer.WriteStringValue(StartedAt.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Summary))
            {
                writer.WritePropertyName("summary"u8);
                writer.WriteObjectValue(Summary, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DeidentificationJob IJsonModel<DeidentificationJob>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DeidentificationJob JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeidentificationJob>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeidentificationJob)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeidentificationJob(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DeidentificationJob DeserializeDeidentificationJob(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string jobName = default;
            DeidentificationOperationType? operationType = default;
            SourceStorageLocation sourceLocation = default;
            TargetStorageLocation targetLocation = default;
            DeidentificationJobCustomizationOptions customizations = default;
            OperationStatus status = default;
            ResponseError error = default;
            DateTimeOffset lastUpdatedAt = default;
            DateTimeOffset createdAt = default;
            DateTimeOffset? startedAt = default;
            DeidentificationJobSummary summary = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("name"u8))
                {
                    jobName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("operation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    operationType = new DeidentificationOperationType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sourceLocation"u8))
                {
                    sourceLocation = SourceStorageLocation.DeserializeSourceStorageLocation(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("targetLocation"u8))
                {
                    targetLocation = TargetStorageLocation.DeserializeTargetStorageLocation(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("customizations"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customizations = DeidentificationJobCustomizationOptions.DeserializeDeidentificationJobCustomizationOptions(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    status = new OperationStatus(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("error"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = JsonSerializer.Deserialize<ResponseError>(prop.Value.GetRawText());
                    continue;
                }
                if (prop.NameEquals("lastUpdatedAt"u8))
                {
                    lastUpdatedAt = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("createdAt"u8))
                {
                    createdAt = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("startedAt"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startedAt = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("summary"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    summary = DeidentificationJobSummary.DeserializeDeidentificationJobSummary(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DeidentificationJob(
                jobName,
                operationType,
                sourceLocation,
                targetLocation,
                customizations,
                status,
                error,
                lastUpdatedAt,
                createdAt,
                startedAt,
                summary,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DeidentificationJob>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeidentificationJob>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureHealthDeidentificationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DeidentificationJob)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DeidentificationJob IPersistableModel<DeidentificationJob>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DeidentificationJob PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeidentificationJob>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDeidentificationJob(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeidentificationJob)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DeidentificationJob>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="deidentificationJob"> The <see cref="DeidentificationJob"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(DeidentificationJob deidentificationJob)
        {
            if (deidentificationJob == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(deidentificationJob, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="DeidentificationJob"/> from. </param>
        public static explicit operator DeidentificationJob(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeDeidentificationJob(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
