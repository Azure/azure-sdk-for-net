// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Deidentification
{
    /// <summary> Storage location. </summary>
    public partial class SourceStorageLocation
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="SourceStorageLocation"/>. </summary>
        /// <param name="location"> URL to storage location. </param>
        /// <param name="prefix"> Prefix to filter path by. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> or <paramref name="prefix"/> is null. </exception>
        public SourceStorageLocation(Uri location, string prefix)
        {
            Argument.AssertNotNull(location, nameof(location));
            Argument.AssertNotNull(prefix, nameof(prefix));

            Location = location;
            Prefix = prefix;
            Extensions = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="SourceStorageLocation"/>. </summary>
        /// <param name="location"> URL to storage location. </param>
        /// <param name="prefix"> Prefix to filter path by. </param>
        /// <param name="extensions"> List of extensions to filter path by. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal SourceStorageLocation(Uri location, string prefix, IList<string> extensions, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Location = location;
            Prefix = prefix;
            Extensions = extensions;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> URL to storage location. </summary>
        public Uri Location { get; set; }

        /// <summary> Prefix to filter path by. </summary>
        public string Prefix { get; set; }

        /// <summary> List of extensions to filter path by. </summary>
        public IList<string> Extensions { get; }
    }
}
