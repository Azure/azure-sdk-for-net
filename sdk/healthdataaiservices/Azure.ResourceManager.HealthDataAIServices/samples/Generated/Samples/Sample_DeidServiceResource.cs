// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.HealthDataAIServices.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.HealthDataAIServices.Samples
{
    public partial class Sample_DeidServiceResource
    {
        // DeidServices_Get - generated by [MaximumSet] rule. [stable]
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DeidServicesGetGeneratedByMaximumSetRuleStable()
        {
            // Generated from example definition: 2024-09-20/DeidServices_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "DeidService_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeidServiceResource created on azure
            // for more information of creating DeidServiceResource, please refer to the document of DeidServiceResource
            string subscriptionId = "F21BB31B-C214-42C0-ACF0-DACCA05D3011";
            string resourceGroupName = "rgopenapi";
            string deidServiceName = "deidTest";
            ResourceIdentifier deidServiceResourceId = DeidServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, deidServiceName);
            DeidServiceResource deidService = client.GetDeidServiceResource(deidServiceResourceId);

            // invoke the operation
            DeidServiceResource result = await deidService.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeidServiceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeidServices_ListBySubscription - generated by [MaximumSet] rule. [stable]
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetDeidServices_DeidServicesListBySubscriptionGeneratedByMaximumSetRuleStable()
        {
            // Generated from example definition: 2024-09-20/DeidServices_ListBySubscription_MaximumSet_Gen.json
            // this example is just showing the usage of "DeidService_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "F21BB31B-C214-42C0-ACF0-DACCA05D3011";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (DeidServiceResource item in subscriptionResource.GetDeidServicesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DeidServiceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // DeidServices_Update - generated by [MaximumSet] rule. [stable]
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DeidServicesUpdateGeneratedByMaximumSetRuleStable()
        {
            // Generated from example definition: 2024-09-20/DeidServices_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "DeidService_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeidServiceResource created on azure
            // for more information of creating DeidServiceResource, please refer to the document of DeidServiceResource
            string subscriptionId = "F21BB31B-C214-42C0-ACF0-DACCA05D3011";
            string resourceGroupName = "rgopenapi";
            string deidServiceName = "deidTest";
            ResourceIdentifier deidServiceResourceId = DeidServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, deidServiceName);
            DeidServiceResource deidService = client.GetDeidServiceResource(deidServiceResourceId);

            // invoke the operation
            DeidServicePatch patch = new DeidServicePatch()
            {
                Tags =
{
},
                Identity = new ManagedServiceIdentity(default),
                DeidPropertiesUpdatePublicNetworkAccess = HealthDataAIServicesPublicNetworkAccess.Enabled,
            };
            ArmOperation<DeidServiceResource> lro = await deidService.UpdateAsync(WaitUntil.Completed, patch);
            DeidServiceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DeidServiceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeidServices_Delete - generated by [MaximumSet] rule. [stable]
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeidServicesDeleteGeneratedByMaximumSetRuleStable()
        {
            // Generated from example definition: 2024-09-20/DeidServices_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "DeidService_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeidServiceResource created on azure
            // for more information of creating DeidServiceResource, please refer to the document of DeidServiceResource
            string subscriptionId = "F21BB31B-C214-42C0-ACF0-DACCA05D3011";
            string resourceGroupName = "rgopenapi";
            string deidServiceName = "deidTest";
            ResourceIdentifier deidServiceResourceId = DeidServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, deidServiceName);
            DeidServiceResource deidService = client.GetDeidServiceResource(deidServiceResourceId);

            // invoke the operation
            await deidService.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // PrivateLinks_ListByDeidService - generated by [MaximumSet] rule. [stable]
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetPrivateLinks_PrivateLinksListByDeidServiceGeneratedByMaximumSetRuleStable()
        {
            // Generated from example definition: 2024-09-20/PrivateLinks_ListByDeidService_MaximumSet_Gen.json
            // this example is just showing the usage of "PrivateLinkResource_ListByDeidService" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DeidServiceResource created on azure
            // for more information of creating DeidServiceResource, please refer to the document of DeidServiceResource
            string subscriptionId = "F21BB31B-C214-42C0-ACF0-DACCA05D3011";
            string resourceGroupName = "rgopenapi";
            string deidServiceName = "deidTest";
            ResourceIdentifier deidServiceResourceId = DeidServiceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, deidServiceName);
            DeidServiceResource deidService = client.GetDeidServiceResource(deidServiceResourceId);

            // invoke the operation and iterate over the result
            await foreach (HealthDataAIServicesPrivateLinkResourceData item in deidService.GetPrivateLinksAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
