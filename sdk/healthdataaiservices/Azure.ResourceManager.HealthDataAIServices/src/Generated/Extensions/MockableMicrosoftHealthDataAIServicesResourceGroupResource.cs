// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Microsoft.HealthDataAIServices
{
    /// <summary></summary>
    public partial class MockableMicrosoftHealthDataAIServicesResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableMicrosoftHealthDataAIServicesResourceGroupResource for mocking. </summary>
        protected MockableMicrosoftHealthDataAIServicesResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableMicrosoftHealthDataAIServicesResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableMicrosoftHealthDataAIServicesResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of DeidServices in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of DeidServices and their operations over a DeidServiceResource. </returns>
        public virtual DeidServiceCollection GetDeidServices()
        {
            return GetCachedClient(client => new DeidServiceCollection(client, Id));
        }

        /// <summary> Get a DeidService. </summary>
        /// <param name="deidServiceName"> The name of the deid service. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deidServiceName"/> is null. </exception>
        public virtual Response<DeidServiceResource> GetDeidService(string deidServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(deidServiceName, nameof(deidServiceName));

            return GetDeidServices().Get(deidServiceName, cancellationToken);
        }

        /// <summary> Get a DeidService. </summary>
        /// <param name="deidServiceName"> The name of the deid service. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deidServiceName"/> is null. </exception>
        public virtual async Task<Response<DeidServiceResource>> GetDeidServiceAsync(string deidServiceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(deidServiceName, nameof(deidServiceName));

            return await GetDeidServices().GetAsync(deidServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a collection of HealthDataAIServicesPrivateEndpointConnectionResources in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HealthDataAIServicesPrivateEndpointConnectionResources and their operations over a HealthDataAIServicesPrivateEndpointConnectionResourceResource. </returns>
        public virtual HealthDataAIServicesPrivateEndpointConnectionResourceCollection GetHealthDataAIServicesPrivateEndpointConnectionResources()
        {
            return GetCachedClient(client => new HealthDataAIServicesPrivateEndpointConnectionResourceCollection(client, Id));
        }

        /// <summary> Get a specific private connection. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual Response<HealthDataAIServicesPrivateEndpointConnectionResourceResource> GetHealthDataAIServicesPrivateEndpointConnectionResource(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            return GetHealthDataAIServicesPrivateEndpointConnectionResources().Get(privateEndpointConnectionName, cancellationToken);
        }

        /// <summary> Get a specific private connection. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual async Task<Response<HealthDataAIServicesPrivateEndpointConnectionResourceResource>> GetHealthDataAIServicesPrivateEndpointConnectionResourceAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            return await GetHealthDataAIServicesPrivateEndpointConnectionResources().GetAsync(privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
        }
    }
}
