// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Microsoft.HealthDataAIServices;

namespace Microsoft.HealthDataAIServices.Models
{
    /// <summary> The private endpoint connection status. </summary>
    public readonly partial struct PrivateEndpointServiceConnectionStatus : IEquatable<PrivateEndpointServiceConnectionStatus>
    {
        private readonly string _value;
        /// <summary> Connection waiting for approval or rejection. </summary>
        private const string PendingValue = "Pending";
        /// <summary> Connection approved. </summary>
        private const string ApprovedValue = "Approved";
        /// <summary> Connection Rejected. </summary>
        private const string RejectedValue = "Rejected";

        /// <summary> Initializes a new instance of <see cref="PrivateEndpointServiceConnectionStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PrivateEndpointServiceConnectionStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Connection waiting for approval or rejection. </summary>
        public static PrivateEndpointServiceConnectionStatus Pending { get; } = new PrivateEndpointServiceConnectionStatus(PendingValue);

        /// <summary> Connection approved. </summary>
        public static PrivateEndpointServiceConnectionStatus Approved { get; } = new PrivateEndpointServiceConnectionStatus(ApprovedValue);

        /// <summary> Connection Rejected. </summary>
        public static PrivateEndpointServiceConnectionStatus Rejected { get; } = new PrivateEndpointServiceConnectionStatus(RejectedValue);

        /// <summary> Determines if two <see cref="PrivateEndpointServiceConnectionStatus"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => left.Equals(right);

        /// <summary> Determines if two <see cref="PrivateEndpointServiceConnectionStatus"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(PrivateEndpointServiceConnectionStatus left, PrivateEndpointServiceConnectionStatus right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="PrivateEndpointServiceConnectionStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator PrivateEndpointServiceConnectionStatus(string value) => new PrivateEndpointServiceConnectionStatus(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PrivateEndpointServiceConnectionStatus other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(PrivateEndpointServiceConnectionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
