// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Microsoft.HealthDataAIServices.Models;

namespace Microsoft.HealthDataAIServices
{
    /// <summary></summary>
    public partial class HealthDataAIServicesPrivateEndpointConnectionResourceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics;
        private readonly PrivateEndpointConnections _healthdataaiservicesprivateendpointconnectionresourceRestClient;

        /// <summary> Initializes a new instance of HealthDataAIServicesPrivateEndpointConnectionResourceCollection for mocking. </summary>
        protected HealthDataAIServicesPrivateEndpointConnectionResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HealthDataAIServicesPrivateEndpointConnectionResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal HealthDataAIServicesPrivateEndpointConnectionResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics = new ClientDiagnostics("Microsoft.HealthDataAIServices", ResourceGroupResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceGroupResource.ResourceType, out string healthdataaiservicesprivateendpointconnectionresourceApiVersion);
            _healthdataaiservicesprivateendpointconnectionresourceRestClient = new PrivateEndpointConnections(_healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics, Pipeline, Endpoint, healthdataaiservicesprivateendpointconnectionresourceApiVersion);
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), id);
            }
        }

        /// <summary> Get a specific private connection. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual async Task<Response<HealthDataAIServicesPrivateEndpointConnectionResourceResource>> GetAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            using DiagnosticScope scope = _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics.CreateScope("HealthDataAIServicesPrivateEndpointConnectionResourceCollection.GetAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                HttpMessage message = _healthdataaiservicesprivateendpointconnectionresourceRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, deidServiceName, Id.Name, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<HealthDataAIServicesPrivateEndpointConnectionResourceData> response = Response.FromValue((HealthDataAIServicesPrivateEndpointConnectionResourceData)result, result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new HealthDataAIServicesPrivateEndpointConnectionResourceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific private connection. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual Response<HealthDataAIServicesPrivateEndpointConnectionResourceResource> Get(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            using DiagnosticScope scope = _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics.CreateScope("HealthDataAIServicesPrivateEndpointConnectionResourceCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                HttpMessage message = _healthdataaiservicesprivateendpointconnectionresourceRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, deidServiceName, Id.Name, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<HealthDataAIServicesPrivateEndpointConnectionResourceData> response = Response.FromValue((HealthDataAIServicesPrivateEndpointConnectionResourceData)result, result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new HealthDataAIServicesPrivateEndpointConnectionResourceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            using DiagnosticScope scope = _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics.CreateScope("HealthDataAIServicesPrivateEndpointConnectionResourceCollection.ExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                HttpMessage message = _healthdataaiservicesprivateendpointconnectionresourceRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, deidServiceName, Id.Name, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<HealthDataAIServicesPrivateEndpointConnectionResourceData> response = Response.FromValue((HealthDataAIServicesPrivateEndpointConnectionResourceData)result, result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual Response<bool> Exists(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            using DiagnosticScope scope = _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics.CreateScope("HealthDataAIServicesPrivateEndpointConnectionResourceCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                HttpMessage message = _healthdataaiservicesprivateendpointconnectionresourceRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, deidServiceName, Id.Name, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<HealthDataAIServicesPrivateEndpointConnectionResourceData> response = Response.FromValue((HealthDataAIServicesPrivateEndpointConnectionResourceData)result, result);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual async Task<NullableResponse<HealthDataAIServicesPrivateEndpointConnectionResourceResource>> GetIfExistsAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            using DiagnosticScope scope = _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics.CreateScope("HealthDataAIServicesPrivateEndpointConnectionResourceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                HttpMessage message = _healthdataaiservicesprivateendpointconnectionresourceRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, deidServiceName, Id.Name, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<HealthDataAIServicesPrivateEndpointConnectionResourceData> response = Response.FromValue((HealthDataAIServicesPrivateEndpointConnectionResourceData)result, result);
                if (response.Value == null)
                {
                    return new NoValueResponse<HealthDataAIServicesPrivateEndpointConnectionResourceResource>(response.GetRawResponse());
                }
                return Response.FromValue(new HealthDataAIServicesPrivateEndpointConnectionResourceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection associated with the Azure resource. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        public virtual NullableResponse<HealthDataAIServicesPrivateEndpointConnectionResourceResource> GetIfExists(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(privateEndpointConnectionName, nameof(privateEndpointConnectionName));

            using DiagnosticScope scope = _healthdataaiservicesprivateendpointconnectionresourceClientDiagnostics.CreateScope("HealthDataAIServicesPrivateEndpointConnectionResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                }
                ;
                HttpMessage message = _healthdataaiservicesprivateendpointconnectionresourceRestClient.CreateGetRequest(Guid.Parse(Id.SubscriptionId), Id.ResourceGroupName, deidServiceName, Id.Name, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<HealthDataAIServicesPrivateEndpointConnectionResourceData> response = Response.FromValue((HealthDataAIServicesPrivateEndpointConnectionResourceData)result, result);
                if (response.Value == null)
                {
                    return new NoValueResponse<HealthDataAIServicesPrivateEndpointConnectionResourceResource>(response.GetRawResponse());
                }
                return Response.FromValue(new HealthDataAIServicesPrivateEndpointConnectionResourceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
