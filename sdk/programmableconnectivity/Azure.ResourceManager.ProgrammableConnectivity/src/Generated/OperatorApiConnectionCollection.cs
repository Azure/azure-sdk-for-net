// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ProgrammableConnectivity
{
    /// <summary>
    /// A class representing a collection of <see cref="OperatorApiConnectionResource"/> and their operations.
    /// Each <see cref="OperatorApiConnectionResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get an <see cref="OperatorApiConnectionCollection"/> instance call the GetOperatorApiConnections method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class OperatorApiConnectionCollection : ArmCollection, IEnumerable<OperatorApiConnectionResource>, IAsyncEnumerable<OperatorApiConnectionResource>
    {
        private readonly ClientDiagnostics _operatorApiConnectionClientDiagnostics;
        private readonly OperatorApiConnectionsRestOperations _operatorApiConnectionRestClient;

        /// <summary> Initializes a new instance of the <see cref="OperatorApiConnectionCollection"/> class for mocking. </summary>
        protected OperatorApiConnectionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OperatorApiConnectionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OperatorApiConnectionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _operatorApiConnectionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ProgrammableConnectivity", OperatorApiConnectionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OperatorApiConnectionResource.ResourceType, out string operatorApiConnectionApiVersion);
            _operatorApiConnectionRestClient = new OperatorApiConnectionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, operatorApiConnectionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create an Operator API Connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<OperatorApiConnectionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string operatorApiConnectionName, OperatorApiConnectionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _operatorApiConnectionRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, data, cancellationToken).ConfigureAwait(false);
                var operation = new ProgrammableConnectivityArmOperation<OperatorApiConnectionResource>(new OperatorApiConnectionOperationSource(Client), _operatorApiConnectionClientDiagnostics, Pipeline, _operatorApiConnectionRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create an Operator API Connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<OperatorApiConnectionResource> CreateOrUpdate(WaitUntil waitUntil, string operatorApiConnectionName, OperatorApiConnectionData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _operatorApiConnectionRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, data, cancellationToken);
                var operation = new ProgrammableConnectivityArmOperation<OperatorApiConnectionResource>(new OperatorApiConnectionOperationSource(Client), _operatorApiConnectionClientDiagnostics, Pipeline, _operatorApiConnectionRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an Operator API Connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> is null. </exception>
        public virtual async Task<Response<OperatorApiConnectionResource>> GetAsync(string operatorApiConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.Get");
            scope.Start();
            try
            {
                var response = await _operatorApiConnectionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OperatorApiConnectionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an Operator API Connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> is null. </exception>
        public virtual Response<OperatorApiConnectionResource> Get(string operatorApiConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.Get");
            scope.Start();
            try
            {
                var response = _operatorApiConnectionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OperatorApiConnectionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List OperatorApiConnection resources by resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperatorApiConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OperatorApiConnectionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _operatorApiConnectionRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _operatorApiConnectionRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OperatorApiConnectionResource(Client, OperatorApiConnectionData.DeserializeOperatorApiConnectionData(e)), _operatorApiConnectionClientDiagnostics, Pipeline, "OperatorApiConnectionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List OperatorApiConnection resources by resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperatorApiConnectionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OperatorApiConnectionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _operatorApiConnectionRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _operatorApiConnectionRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OperatorApiConnectionResource(Client, OperatorApiConnectionData.DeserializeOperatorApiConnectionData(e)), _operatorApiConnectionClientDiagnostics, Pipeline, "OperatorApiConnectionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string operatorApiConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _operatorApiConnectionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> is null. </exception>
        public virtual Response<bool> Exists(string operatorApiConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.Exists");
            scope.Start();
            try
            {
                var response = _operatorApiConnectionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> is null. </exception>
        public virtual async Task<NullableResponse<OperatorApiConnectionResource>> GetIfExistsAsync(string operatorApiConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _operatorApiConnectionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<OperatorApiConnectionResource>(response.GetRawResponse());
                return Response.FromValue(new OperatorApiConnectionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ProgrammableConnectivity/operatorApiConnections/{operatorApiConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiConnection_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiConnectionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiConnectionName"> Azure Programmable Connectivity (APC) Operator API Connection Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiConnectionName"/> is null. </exception>
        public virtual NullableResponse<OperatorApiConnectionResource> GetIfExists(string operatorApiConnectionName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiConnectionName, nameof(operatorApiConnectionName));

            using var scope = _operatorApiConnectionClientDiagnostics.CreateScope("OperatorApiConnectionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _operatorApiConnectionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, operatorApiConnectionName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<OperatorApiConnectionResource>(response.GetRawResponse());
                return Response.FromValue(new OperatorApiConnectionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OperatorApiConnectionResource> IEnumerable<OperatorApiConnectionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<OperatorApiConnectionResource> IAsyncEnumerable<OperatorApiConnectionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
