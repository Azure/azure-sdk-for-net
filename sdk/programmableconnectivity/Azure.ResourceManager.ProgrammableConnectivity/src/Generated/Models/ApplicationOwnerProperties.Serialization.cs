// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    public partial class ApplicationOwnerProperties : IUtf8JsonSerializable, IJsonModel<ApplicationOwnerProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApplicationOwnerProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ApplicationOwnerProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationOwnerProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApplicationOwnerProperties)} does not support writing '{format}' format.");
            }

            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("legalName"u8);
            writer.WriteStringValue(LegalName);
            writer.WritePropertyName("tradingName"u8);
            writer.WriteStringValue(TradingName);
            writer.WritePropertyName("organizationDescription"u8);
            writer.WriteStringValue(OrganizationDescription);
            writer.WritePropertyName("taxNumber"u8);
            writer.WriteStringValue(TaxNumber);
            writer.WritePropertyName("organizationType"u8);
            writer.WriteStringValue(OrganizationType.ToString());
            writer.WritePropertyName("organizationIdentificationId"u8);
            writer.WriteStringValue(OrganizationIdentificationId);
            writer.WritePropertyName("organizationIdentificationIssuer"u8);
            writer.WriteStringValue(OrganizationIdentificationIssuer);
            writer.WritePropertyName("organizationIdentificationType"u8);
            writer.WriteStringValue(OrganizationIdentificationType);
            writer.WritePropertyName("contactEmailAddress"u8);
            writer.WriteStringValue(ContactEmailAddress);
            writer.WritePropertyName("legalRepresentative"u8);
            writer.WriteObjectValue(LegalRepresentative, options);
            writer.WritePropertyName("privacyManager"u8);
            writer.WriteObjectValue(PrivacyManager, options);
            writer.WritePropertyName("dataProtectionOfficer"u8);
            writer.WriteObjectValue(DataProtectionOfficer, options);
            writer.WritePropertyName("registeredGeographicAddress"u8);
            writer.WriteObjectValue(RegisteredGeographicAddress, options);
            writer.WritePropertyName("privacyPolicyUrl"u8);
            writer.WriteStringValue(PrivacyPolicyUri.AbsoluteUri);
            writer.WritePropertyName("localRepresentatives"u8);
            writer.WriteStartArray();
            foreach (var item in LocalRepresentatives)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        ApplicationOwnerProperties IJsonModel<ApplicationOwnerProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationOwnerProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ApplicationOwnerProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApplicationOwnerProperties(document.RootElement, options);
        }

        internal static ApplicationOwnerProperties DeserializeApplicationOwnerProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string legalName = default;
            string tradingName = default;
            string organizationDescription = default;
            string taxNumber = default;
            OrganizationType organizationType = default;
            string organizationIdentificationId = default;
            string organizationIdentificationIssuer = default;
            string organizationIdentificationType = default;
            string contactEmailAddress = default;
            Person legalRepresentative = default;
            Person privacyManager = default;
            Person dataProtectionOfficer = default;
            GeographicAddress registeredGeographicAddress = default;
            Uri privacyPolicyUrl = default;
            IList<LocalRepresentative> localRepresentatives = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("legalName"u8))
                {
                    legalName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tradingName"u8))
                {
                    tradingName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationDescription"u8))
                {
                    organizationDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taxNumber"u8))
                {
                    taxNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationType"u8))
                {
                    organizationType = new OrganizationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("organizationIdentificationId"u8))
                {
                    organizationIdentificationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationIdentificationIssuer"u8))
                {
                    organizationIdentificationIssuer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationIdentificationType"u8))
                {
                    organizationIdentificationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contactEmailAddress"u8))
                {
                    contactEmailAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("legalRepresentative"u8))
                {
                    legalRepresentative = Person.DeserializePerson(property.Value, options);
                    continue;
                }
                if (property.NameEquals("privacyManager"u8))
                {
                    privacyManager = Person.DeserializePerson(property.Value, options);
                    continue;
                }
                if (property.NameEquals("dataProtectionOfficer"u8))
                {
                    dataProtectionOfficer = Person.DeserializePerson(property.Value, options);
                    continue;
                }
                if (property.NameEquals("registeredGeographicAddress"u8))
                {
                    registeredGeographicAddress = GeographicAddress.DeserializeGeographicAddress(property.Value, options);
                    continue;
                }
                if (property.NameEquals("privacyPolicyUrl"u8))
                {
                    privacyPolicyUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("localRepresentatives"u8))
                {
                    List<LocalRepresentative> array = new List<LocalRepresentative>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LocalRepresentative.DeserializeLocalRepresentative(item, options));
                    }
                    localRepresentatives = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ApplicationOwnerProperties(
                name,
                legalName,
                tradingName,
                organizationDescription,
                taxNumber,
                organizationType,
                organizationIdentificationId,
                organizationIdentificationIssuer,
                organizationIdentificationType,
                contactEmailAddress,
                legalRepresentative,
                privacyManager,
                dataProtectionOfficer,
                registeredGeographicAddress,
                privacyPolicyUrl,
                localRepresentatives,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ApplicationOwnerProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationOwnerProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerProgrammableConnectivityContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ApplicationOwnerProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ApplicationOwnerProperties IPersistableModel<ApplicationOwnerProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ApplicationOwnerProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeApplicationOwnerProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ApplicationOwnerProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ApplicationOwnerProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
