// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Valid values for the processing operation based on W3C Data Privacy Vocabulary v2 https://w3c.github.io/dpv/2.0/dpv/. </summary>
    public readonly partial struct ProcessingOperation : IEquatable<ProcessingOperation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProcessingOperation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProcessingOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccessValue = "Access";
        private const string AcquireValue = "Acquire";
        private const string AdaptValue = "Adapt";
        private const string AggregateValue = "Aggregate";
        private const string AlignValue = "Align";
        private const string AlterValue = "Alter";
        private const string AnalyzeValue = "Analyze";
        private const string AnonymizeValue = "Anonymize";
        private const string AssessValue = "Assess";
        private const string CollectValue = "Collect";
        private const string CombineValue = "Combine";
        private const string ConsultValue = "Consult";
        private const string CopyValue = "Copy";
        private const string CrossBorderTransferValue = "Cross border transfer";
        private const string DeleteValue = "Delete";
        private const string DeriveValue = "Derive";
        private const string DestructValue = "Destruct";
        private const string DiscloseValue = "Disclose";
        private const string DiscloseByTransmissionValue = "Disclose by transmission";
        private const string DisplayValue = "Display";
        private const string DisseminateValue = "Disseminate";
        private const string DownloadValue = "Download";
        private const string EraseValue = "Erase";
        private const string ExportValue = "Export";
        private const string FilterValue = "Filter";
        private const string FormatValue = "Format";
        private const string GenerateValue = "Generate";
        private const string InferValue = "Infer";
        private const string MakeAvailableValue = "Make available";
        private const string MatchValue = "Match";
        private const string ModifyValue = "Modify";
        private const string MonitorValue = "Monitor";
        private const string MoveValue = "Move";
        private const string ObserveValue = "Observe";
        private const string ObtainValue = "Obtain";
        private const string OrganizeValue = "Organize";
        private const string ProfilingValue = "Profiling";
        private const string PseudonymizeValue = "Pseudonymize";
        private const string QueryValue = "Query";
        private const string RecordValue = "Record";
        private const string ReformatValue = "Reformat";
        private const string RemoveValue = "Remove";
        private const string RestrictValue = "Restrict";
        private const string RetrieveValue = "Retrieve";
        private const string ScreenValue = "Screen";
        private const string ShareValue = "Share";
        private const string StoreValue = "Store";
        private const string StructureValue = "Structure";
        private const string TransferValue = "Transfer";
        private const string TransformValue = "Transform";
        private const string TransmitValue = "Transmit";
        private const string UseValue = "Use";

        /// <summary> Access. </summary>
        public static ProcessingOperation Access { get; } = new ProcessingOperation(AccessValue);
        /// <summary> Acquire. </summary>
        public static ProcessingOperation Acquire { get; } = new ProcessingOperation(AcquireValue);
        /// <summary> Adapt. </summary>
        public static ProcessingOperation Adapt { get; } = new ProcessingOperation(AdaptValue);
        /// <summary> Aggregate. </summary>
        public static ProcessingOperation Aggregate { get; } = new ProcessingOperation(AggregateValue);
        /// <summary> Align. </summary>
        public static ProcessingOperation Align { get; } = new ProcessingOperation(AlignValue);
        /// <summary> Alter. </summary>
        public static ProcessingOperation Alter { get; } = new ProcessingOperation(AlterValue);
        /// <summary> Analyze. </summary>
        public static ProcessingOperation Analyze { get; } = new ProcessingOperation(AnalyzeValue);
        /// <summary> Anonymize. </summary>
        public static ProcessingOperation Anonymize { get; } = new ProcessingOperation(AnonymizeValue);
        /// <summary> Assess. </summary>
        public static ProcessingOperation Assess { get; } = new ProcessingOperation(AssessValue);
        /// <summary> Collect. </summary>
        public static ProcessingOperation Collect { get; } = new ProcessingOperation(CollectValue);
        /// <summary> Combine. </summary>
        public static ProcessingOperation Combine { get; } = new ProcessingOperation(CombineValue);
        /// <summary> Consult. </summary>
        public static ProcessingOperation Consult { get; } = new ProcessingOperation(ConsultValue);
        /// <summary> Copy. </summary>
        public static ProcessingOperation Copy { get; } = new ProcessingOperation(CopyValue);
        /// <summary> Cross border transfer. </summary>
        public static ProcessingOperation CrossBorderTransfer { get; } = new ProcessingOperation(CrossBorderTransferValue);
        /// <summary> Delete. </summary>
        public static ProcessingOperation Delete { get; } = new ProcessingOperation(DeleteValue);
        /// <summary> Derive. </summary>
        public static ProcessingOperation Derive { get; } = new ProcessingOperation(DeriveValue);
        /// <summary> Destruct. </summary>
        public static ProcessingOperation Destruct { get; } = new ProcessingOperation(DestructValue);
        /// <summary> Disclose. </summary>
        public static ProcessingOperation Disclose { get; } = new ProcessingOperation(DiscloseValue);
        /// <summary> Disclose by transmission. </summary>
        public static ProcessingOperation DiscloseByTransmission { get; } = new ProcessingOperation(DiscloseByTransmissionValue);
        /// <summary> Display. </summary>
        public static ProcessingOperation Display { get; } = new ProcessingOperation(DisplayValue);
        /// <summary> Disseminate. </summary>
        public static ProcessingOperation Disseminate { get; } = new ProcessingOperation(DisseminateValue);
        /// <summary> Download. </summary>
        public static ProcessingOperation Download { get; } = new ProcessingOperation(DownloadValue);
        /// <summary> Erase. </summary>
        public static ProcessingOperation Erase { get; } = new ProcessingOperation(EraseValue);
        /// <summary> Export. </summary>
        public static ProcessingOperation Export { get; } = new ProcessingOperation(ExportValue);
        /// <summary> Filter. </summary>
        public static ProcessingOperation Filter { get; } = new ProcessingOperation(FilterValue);
        /// <summary> Format. </summary>
        public static ProcessingOperation Format { get; } = new ProcessingOperation(FormatValue);
        /// <summary> Generate. </summary>
        public static ProcessingOperation Generate { get; } = new ProcessingOperation(GenerateValue);
        /// <summary> Infer. </summary>
        public static ProcessingOperation Infer { get; } = new ProcessingOperation(InferValue);
        /// <summary> Make available. </summary>
        public static ProcessingOperation MakeAvailable { get; } = new ProcessingOperation(MakeAvailableValue);
        /// <summary> Match. </summary>
        public static ProcessingOperation Match { get; } = new ProcessingOperation(MatchValue);
        /// <summary> Modify. </summary>
        public static ProcessingOperation Modify { get; } = new ProcessingOperation(ModifyValue);
        /// <summary> Monitor. </summary>
        public static ProcessingOperation Monitor { get; } = new ProcessingOperation(MonitorValue);
        /// <summary> Move. </summary>
        public static ProcessingOperation Move { get; } = new ProcessingOperation(MoveValue);
        /// <summary> Observe. </summary>
        public static ProcessingOperation Observe { get; } = new ProcessingOperation(ObserveValue);
        /// <summary> Obtain. </summary>
        public static ProcessingOperation Obtain { get; } = new ProcessingOperation(ObtainValue);
        /// <summary> Organize. </summary>
        public static ProcessingOperation Organize { get; } = new ProcessingOperation(OrganizeValue);
        /// <summary> Profiling. </summary>
        public static ProcessingOperation Profiling { get; } = new ProcessingOperation(ProfilingValue);
        /// <summary> Pseudonymize. </summary>
        public static ProcessingOperation Pseudonymize { get; } = new ProcessingOperation(PseudonymizeValue);
        /// <summary> Query. </summary>
        public static ProcessingOperation Query { get; } = new ProcessingOperation(QueryValue);
        /// <summary> Record. </summary>
        public static ProcessingOperation Record { get; } = new ProcessingOperation(RecordValue);
        /// <summary> Reformat. </summary>
        public static ProcessingOperation Reformat { get; } = new ProcessingOperation(ReformatValue);
        /// <summary> Remove. </summary>
        public static ProcessingOperation Remove { get; } = new ProcessingOperation(RemoveValue);
        /// <summary> Restrict. </summary>
        public static ProcessingOperation Restrict { get; } = new ProcessingOperation(RestrictValue);
        /// <summary> Retrieve. </summary>
        public static ProcessingOperation Retrieve { get; } = new ProcessingOperation(RetrieveValue);
        /// <summary> Screen. </summary>
        public static ProcessingOperation Screen { get; } = new ProcessingOperation(ScreenValue);
        /// <summary> Share. </summary>
        public static ProcessingOperation Share { get; } = new ProcessingOperation(ShareValue);
        /// <summary> Store. </summary>
        public static ProcessingOperation Store { get; } = new ProcessingOperation(StoreValue);
        /// <summary> Structure. </summary>
        public static ProcessingOperation Structure { get; } = new ProcessingOperation(StructureValue);
        /// <summary> Transfer. </summary>
        public static ProcessingOperation Transfer { get; } = new ProcessingOperation(TransferValue);
        /// <summary> Transform. </summary>
        public static ProcessingOperation Transform { get; } = new ProcessingOperation(TransformValue);
        /// <summary> Transmit. </summary>
        public static ProcessingOperation Transmit { get; } = new ProcessingOperation(TransmitValue);
        /// <summary> Use. </summary>
        public static ProcessingOperation Use { get; } = new ProcessingOperation(UseValue);
        /// <summary> Determines if two <see cref="ProcessingOperation"/> values are the same. </summary>
        public static bool operator ==(ProcessingOperation left, ProcessingOperation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProcessingOperation"/> values are not the same. </summary>
        public static bool operator !=(ProcessingOperation left, ProcessingOperation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProcessingOperation"/>. </summary>
        public static implicit operator ProcessingOperation(string value) => new ProcessingOperation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProcessingOperation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProcessingOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
