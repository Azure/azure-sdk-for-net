// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Details about the Application that would use the Operator's Network APIs. </summary>
    public partial class ApplicationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ApplicationProperties"/>. </summary>
        /// <param name="name"> Name of the application. </param>
        /// <param name="applicationDescription"> Description of the application. </param>
        /// <param name="category"> The category of the application. </param>
        /// <param name="commercialName"> Commercial name of the application. </param>
        /// <param name="privacyRightsRequestEmailAddress"> Privacy rights request email address. </param>
        /// <param name="privacyPolicyUri"> URL for the organization's privacy policy. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="applicationDescription"/>, <paramref name="commercialName"/>, <paramref name="privacyRightsRequestEmailAddress"/> or <paramref name="privacyPolicyUri"/> is null. </exception>
        public ApplicationProperties(string name, string applicationDescription, Category category, string commercialName, string privacyRightsRequestEmailAddress, Uri privacyPolicyUri)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(applicationDescription, nameof(applicationDescription));
            Argument.AssertNotNull(commercialName, nameof(commercialName));
            Argument.AssertNotNull(privacyRightsRequestEmailAddress, nameof(privacyRightsRequestEmailAddress));
            Argument.AssertNotNull(privacyPolicyUri, nameof(privacyPolicyUri));

            Name = name;
            ApplicationDescription = applicationDescription;
            Category = category;
            CommercialName = commercialName;
            PrivacyRightsRequestEmailAddress = privacyRightsRequestEmailAddress;
            PrivacyPolicyUri = privacyPolicyUri;
        }

        /// <summary> Initializes a new instance of <see cref="ApplicationProperties"/>. </summary>
        /// <param name="name"> Name of the application. </param>
        /// <param name="applicationDescription"> Description of the application. </param>
        /// <param name="category"> The category of the application. </param>
        /// <param name="commercialName"> Commercial name of the application. </param>
        /// <param name="privacyRightsRequestEmailAddress"> Privacy rights request email address. </param>
        /// <param name="privacyPolicyUri"> URL for the organization's privacy policy. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ApplicationProperties(string name, string applicationDescription, Category category, string commercialName, string privacyRightsRequestEmailAddress, Uri privacyPolicyUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            ApplicationDescription = applicationDescription;
            Category = category;
            CommercialName = commercialName;
            PrivacyRightsRequestEmailAddress = privacyRightsRequestEmailAddress;
            PrivacyPolicyUri = privacyPolicyUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ApplicationProperties"/> for deserialization. </summary>
        internal ApplicationProperties()
        {
        }

        /// <summary> Name of the application. </summary>
        public string Name { get; set; }
        /// <summary> Description of the application. </summary>
        public string ApplicationDescription { get; set; }
        /// <summary> The category of the application. </summary>
        public Category Category { get; set; }
        /// <summary> Commercial name of the application. </summary>
        public string CommercialName { get; set; }
        /// <summary> Privacy rights request email address. </summary>
        public string PrivacyRightsRequestEmailAddress { get; set; }
        /// <summary> URL for the organization's privacy policy. </summary>
        public Uri PrivacyPolicyUri { get; set; }
    }
}
