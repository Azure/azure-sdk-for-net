// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Valid values for category based on https://www.tmforum.org/oda/open-apis/directory/open-gateway-onboarding-and-ordering-component-suite-TMF931. </summary>
    public readonly partial struct Category : IEquatable<Category>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Category"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Category(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AgricultureValue = "Agriculture";
        private const string ArtAndDesignValue = "Art and design";
        private const string AutoAndVehicleValue = "Auto and vehicle";
        private const string BeautyValue = "Beauty";
        private const string BooksAndReferenceValue = "Books and reference";
        private const string BusinessValue = "Business";
        private const string ConstructionValue = "Construction";
        private const string DefenseValue = "Defense";
        private const string DeveloperToolsValue = "Developer tools";
        private const string EducationValue = "Education";
        private const string EngineeringValue = "Engineering";
        private const string EventsAndEntertainmentValue = "Events and entertainment";
        private const string FinanceValue = "Finance";
        private const string FoodAndDrinkValue = "Food and drink";
        private const string GamesValue = "Games";
        private const string HealthAndFitnessValue = "Health and fitness";
        private const string HealthcareValue = "Healthcare";
        private const string InformationValue = "Information";
        private const string KidsValue = "Kids";
        private const string LibrariesAndDemoValue = "Libraries and demo";
        private const string LifestyleValue = "Lifestyle";
        private const string ManufacturingValue = "Manufacturing";
        private const string MapsAndNavigationValue = "Maps and navigation";
        private const string MediaValue = "Media";
        private const string MedicalValue = "Medical";
        private const string MiningValue = "Mining";
        private const string MusicAndAudioValue = "Music and audio";
        private const string NewsAndMagazinesValue = "News and magazines";
        private const string OrganizationsValue = "Organizations";
        private const string OtherValue = "Other";
        private const string PhotoAndVideoValue = "Photo and video";
        private const string ProductivityValue = "Productivity";
        private const string PublicServiceValue = "Public service";
        private const string RealEstateValue = "Real estate";
        private const string ShoppingValue = "Shopping";
        private const string SocialNetworkingAndCommunicationsValue = "Social networking and communications";
        private const string SportsValue = "Sports";
        private const string TourismValue = "Tourism";
        private const string UtilitiesValue = "Utilities";
        private const string TradingValue = "Trading";
        private const string TransportationValue = "Transportation";
        private const string TravelAndLocalValue = "Travel and local";
        private const string WaterValue = "Water";
        private const string WeatherValue = "Weather";

        /// <summary> Agriculture. </summary>
        public static Category Agriculture { get; } = new Category(AgricultureValue);
        /// <summary> Art and design. </summary>
        public static Category ArtAndDesign { get; } = new Category(ArtAndDesignValue);
        /// <summary> Auto and vehicle. </summary>
        public static Category AutoAndVehicle { get; } = new Category(AutoAndVehicleValue);
        /// <summary> Beauty. </summary>
        public static Category Beauty { get; } = new Category(BeautyValue);
        /// <summary> Books and reference. </summary>
        public static Category BooksAndReference { get; } = new Category(BooksAndReferenceValue);
        /// <summary> Business. </summary>
        public static Category Business { get; } = new Category(BusinessValue);
        /// <summary> Construction. </summary>
        public static Category Construction { get; } = new Category(ConstructionValue);
        /// <summary> Defense. </summary>
        public static Category Defense { get; } = new Category(DefenseValue);
        /// <summary> Developer tools. </summary>
        public static Category DeveloperTools { get; } = new Category(DeveloperToolsValue);
        /// <summary> Education. </summary>
        public static Category Education { get; } = new Category(EducationValue);
        /// <summary> Engineering. </summary>
        public static Category Engineering { get; } = new Category(EngineeringValue);
        /// <summary> Events and entertainment. </summary>
        public static Category EventsAndEntertainment { get; } = new Category(EventsAndEntertainmentValue);
        /// <summary> Finance. </summary>
        public static Category Finance { get; } = new Category(FinanceValue);
        /// <summary> Food and drink. </summary>
        public static Category FoodAndDrink { get; } = new Category(FoodAndDrinkValue);
        /// <summary> Games. </summary>
        public static Category Games { get; } = new Category(GamesValue);
        /// <summary> Health and fitness. </summary>
        public static Category HealthAndFitness { get; } = new Category(HealthAndFitnessValue);
        /// <summary> Healthcare. </summary>
        public static Category Healthcare { get; } = new Category(HealthcareValue);
        /// <summary> Information. </summary>
        public static Category Information { get; } = new Category(InformationValue);
        /// <summary> Kids. </summary>
        public static Category Kids { get; } = new Category(KidsValue);
        /// <summary> Libraries and demo. </summary>
        public static Category LibrariesAndDemo { get; } = new Category(LibrariesAndDemoValue);
        /// <summary> Lifestyle. </summary>
        public static Category Lifestyle { get; } = new Category(LifestyleValue);
        /// <summary> Manufacturing. </summary>
        public static Category Manufacturing { get; } = new Category(ManufacturingValue);
        /// <summary> Maps and navigation. </summary>
        public static Category MapsAndNavigation { get; } = new Category(MapsAndNavigationValue);
        /// <summary> Media. </summary>
        public static Category Media { get; } = new Category(MediaValue);
        /// <summary> Medical. </summary>
        public static Category Medical { get; } = new Category(MedicalValue);
        /// <summary> Mining. </summary>
        public static Category Mining { get; } = new Category(MiningValue);
        /// <summary> Music and audio. </summary>
        public static Category MusicAndAudio { get; } = new Category(MusicAndAudioValue);
        /// <summary> News and magazines. </summary>
        public static Category NewsAndMagazines { get; } = new Category(NewsAndMagazinesValue);
        /// <summary> Organizations. </summary>
        public static Category Organizations { get; } = new Category(OrganizationsValue);
        /// <summary> Other. </summary>
        public static Category Other { get; } = new Category(OtherValue);
        /// <summary> Photo and video. </summary>
        public static Category PhotoAndVideo { get; } = new Category(PhotoAndVideoValue);
        /// <summary> Productivity. </summary>
        public static Category Productivity { get; } = new Category(ProductivityValue);
        /// <summary> Public service. </summary>
        public static Category PublicService { get; } = new Category(PublicServiceValue);
        /// <summary> Real estate. </summary>
        public static Category RealEstate { get; } = new Category(RealEstateValue);
        /// <summary> Shopping. </summary>
        public static Category Shopping { get; } = new Category(ShoppingValue);
        /// <summary> Social networking and communications. </summary>
        public static Category SocialNetworkingAndCommunications { get; } = new Category(SocialNetworkingAndCommunicationsValue);
        /// <summary> Sports. </summary>
        public static Category Sports { get; } = new Category(SportsValue);
        /// <summary> Tourism. </summary>
        public static Category Tourism { get; } = new Category(TourismValue);
        /// <summary> Utilities. </summary>
        public static Category Utilities { get; } = new Category(UtilitiesValue);
        /// <summary> Trading. </summary>
        public static Category Trading { get; } = new Category(TradingValue);
        /// <summary> Transportation. </summary>
        public static Category Transportation { get; } = new Category(TransportationValue);
        /// <summary> Travel and local. </summary>
        public static Category TravelAndLocal { get; } = new Category(TravelAndLocalValue);
        /// <summary> Water. </summary>
        public static Category Water { get; } = new Category(WaterValue);
        /// <summary> Weather. </summary>
        public static Category Weather { get; } = new Category(WeatherValue);
        /// <summary> Determines if two <see cref="Category"/> values are the same. </summary>
        public static bool operator ==(Category left, Category right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Category"/> values are not the same. </summary>
        public static bool operator !=(Category left, Category right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Category"/>. </summary>
        public static implicit operator Category(string value) => new Category(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Category other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Category other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
