// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Model defining the information required about the countries/regions the data transits through or is stored in. </summary>
    public partial class DataRegions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DataRegions"/>. </summary>
        /// <param name="countryCode"> The country code of the country/region the data transits through or is stored in. </param>
        /// <param name="commercialActivity"> Flag to indicate if commercial activity applies to this data management. </param>
        /// <param name="dataPrivacyFrameworkUri"> URL of the organization or governmental data privacy framework. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> or <paramref name="dataPrivacyFrameworkUri"/> is null. </exception>
        public DataRegions(string countryCode, bool commercialActivity, Uri dataPrivacyFrameworkUri)
        {
            Argument.AssertNotNull(countryCode, nameof(countryCode));
            Argument.AssertNotNull(dataPrivacyFrameworkUri, nameof(dataPrivacyFrameworkUri));

            CountryCode = countryCode;
            CommercialActivity = commercialActivity;
            DataPrivacyFrameworkUri = dataPrivacyFrameworkUri;
        }

        /// <summary> Initializes a new instance of <see cref="DataRegions"/>. </summary>
        /// <param name="countryCode"> The country code of the country/region the data transits through or is stored in. </param>
        /// <param name="commercialOrganization"> The commercial organization who is managing the data. </param>
        /// <param name="commercialActivity"> Flag to indicate if commercial activity applies to this data management. </param>
        /// <param name="dataPrivacyFrameworkUri"> URL of the organization or governmental data privacy framework. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DataRegions(string countryCode, string commercialOrganization, bool commercialActivity, Uri dataPrivacyFrameworkUri, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CountryCode = countryCode;
            CommercialOrganization = commercialOrganization;
            CommercialActivity = commercialActivity;
            DataPrivacyFrameworkUri = dataPrivacyFrameworkUri;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DataRegions"/> for deserialization. </summary>
        internal DataRegions()
        {
        }

        /// <summary> The country code of the country/region the data transits through or is stored in. </summary>
        public string CountryCode { get; set; }
        /// <summary> The commercial organization who is managing the data. </summary>
        public string CommercialOrganization { get; set; }
        /// <summary> Flag to indicate if commercial activity applies to this data management. </summary>
        public bool CommercialActivity { get; set; }
        /// <summary> URL of the organization or governmental data privacy framework. </summary>
        public Uri DataPrivacyFrameworkUri { get; set; }
    }
}
