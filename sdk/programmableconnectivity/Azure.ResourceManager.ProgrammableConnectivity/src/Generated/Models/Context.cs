// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Valid values for the context based on W3C Data Privacy Vocabulary v2 https://w3c.github.io/dpv/2.0/dpv/. </summary>
    public readonly partial struct Context : IEquatable<Context>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Context"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Context(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AlgorithmicLogicValue = "Algorithmic logic";
        private const string AssistiveAutomationValue = "Assistive automation";
        private const string AutomatedDecisionMakingValue = "Automated decision making";
        private const string AutomatedScoringOfIndividualsValue = "Automated scoring of individuals";
        private const string AutomationLevelValue = "Automation level";
        private const string AutonomousValue = "Autonomous";
        private const string CannotChallengeProcessValue = "Cannot challenge process";
        private const string CannotChallengeProcessInputValue = "Cannot challenge process input";
        private const string CannotChallengeProcessOutputValue = "Cannot challenge process output";
        private const string CannotCorrectProcessValue = "Cannot correct process";
        private const string CannotCorrectProcessInputValue = "Cannot correct process input";
        private const string CannotCorrectProcessOutputValue = "Cannot correct process output";
        private const string CannotObjectToProcessValue = "Cannot object to process";
        private const string CannotOptInToProcessValue = "Cannot opt in to process";
        private const string CannotOptOutFromProcessValue = "Cannot opt out from process";
        private const string CannotReverseProcessEffectsValue = "Cannot reverse process effects";
        private const string CannotReverseProcessInputValue = "Cannot reverse process input";
        private const string CannotReverseProcessOutputValue = "Cannot reverse process output";
        private const string CannotWithdrawFromProcessValue = "Cannot withdraw from process";
        private const string ChallengingProcessValue = "Challenging process";
        private const string ChallengingProcessInputValue = "Challenging process input";
        private const string ChallengingProcessOutputValue = "Challenging process output";
        private const string ConditionalAutomationValue = "Conditional automation";
        private const string ConsentControlValue = "Consent control";
        private const string CorrectingProcessValue = "Correcting process";
        private const string CorrectingProcessInputValue = "Correcting process input";
        private const string CorrectingProcessOutputValue = "Correcting process output";
        private const string CompletelyManualProcessingValue = "Completely manual processing";
        private const string DataControllerDataSourceValue = "Data controller data source";
        private const string DataPublishedByDataSubjectValue = "Data published by data subject";
        private const string DataSourceValue = "Data source";
        private const string DataSubjectValue = "Data subject";
        private const string DataSubjectDataSourceValue = "Data subject data source";
        private const string DataSubjectScaleValue = "Data subject scale";
        private const string DataVolumeValue = "Data volume";
        private const string DecisionMakingValue = "Decision making";
        private const string EntityActiveInvolvementValue = "Entity active involvement";
        private const string EntityInvolvementValue = "Entity involvement";
        private const string EntityNonInvolvementValue = "Entity non involvement";
        private const string EntityNonPermissiveInvolvementValue = "Entity non permissive involvement";
        private const string EntityPassiveInvolvementValue = "Entity passive involvement";
        private const string EntityPermissiveInvolvementValue = "Entity permissive involvement";
        private const string EvaluationOfIndividualsValue = "Evaluation of individuals";
        private const string EvaluationScoringValue = "Evaluation scoring";
        private const string FullAutomationValue = "Full automation";
        private const string GeographicCoverageValue = "Geographic coverage";
        private const string GlobalScaleValue = "Global scale";
        private const string HighAutomationValue = "High automation";
        private const string HugeDataVolumeValue = "Huge data volume";
        private const string HugeScaleOfDataSubjectsValue = "Huge scale of data subjects";
        private const string HumanInvolvedValue = "Human involved";
        private const string HumanInvolvementValue = "Human involvement";
        private const string HumanInvolvementForControlValue = "Human involvement for control";
        private const string HumanInvolvementForDecisionValue = "Human involvement for decision";
        private const string HumanInvolvementForInputValue = "Human involvement for input";
        private const string HumanInvolvementForInterventionValue = "Human involvement for intervention";
        private const string HumanInvolvementForOversightValue = "Human involvement for oversight";
        private const string HumanInvolvementForVerificationValue = "Human involvement for verification";
        private const string HumanNotInvolvedValue = "Human not involved";
        private const string InnovativeUseOfExistingTechnologyValue = "Innovative use of existing technology";
        private const string InnovativeUseOfNewTechnologiesValue = "Innovative use of new technologies";
        private const string InnovativeUseOfTechnologyValue = "Innovative use of technology";
        private const string LargeDataVolumeValue = "Large data volume";
        private const string LargeScaleOfDataSubjectsValue = "Large scale of data subjects";
        private const string LargeScaleProcessingValue = "Large scale processing";
        private const string LocalEnvironmentScaleValue = "Local environment scale";
        private const string LocalityScaleValue = "Locality scale";
        private const string MediumDataVolumeValue = "Medium data volume";
        private const string MediumScaleOfDataSubjectsValue = "Medium scale of data subjects";
        private const string MediumScaleProcessingValue = "Medium scale processing";
        private const string MultiNationalScaleValue = "Multi national scale";
        private const string NationalScaleValue = "National scale";
        private const string NearlyGlobalScaleValue = "Nearly global scale";
        private const string NonPublicDataSourceValue = "Non public data source";
        private const string NotAutomatedValue = "Not automated";
        private const string ObjectingToProcessValue = "Objecting to process";
        private const string ObtainConsentValue = "Obtain consent";
        private const string OptingInToProcessValue = "Opting in to process";
        private const string OptingOutFromProcessValue = "Opting out from process";
        private const string PartialAutomationValue = "Partial automation";
        private const string ProcessingConditionValue = "Processing condition";
        private const string ProcessingDurationValue = "Processing duration";
        private const string ProcessingLocationValue = "Processing location";
        private const string ProcessingScaleValue = "Processing scale";
        private const string ProvideConsentValue = "Provide consent";
        private const string PublicDataSourceValue = "Public data source";
        private const string ReaffirmConsentValue = "Reaffirm consent";
        private const string RegionalScaleValue = "Regional scale";
        private const string ReversingProcessEffectsValue = "Reversing process effects";
        private const string ReversingProcessInputValue = "Reversing process input";
        private const string ReversingProcessOutputValue = "Reversing process output";
        private const string ScaleValue = "Scale";
        private const string ScoringOfIndividualsValue = "Scoring of individuals";
        private const string SingularDataVolumeValue = "Singular data volume";
        private const string SingularScaleOfDataSubjectsValue = "Singular scale of data subjects";
        private const string SmallDataVolumeValue = "Small data volume";
        private const string SmallScaleOfDataSubjectsValue = "Small scale of data subjects";
        private const string SmallScaleProcessingValue = "Small scale processing";
        private const string SporadicDataVolumeValue = "Sporadic data volume";
        private const string SporadicScaleOfDataSubjectsValue = "Sporadic scale of data subjects";
        private const string StorageConditionValue = "Storage condition";
        private const string StorageDeletionValue = "Storage deletion";
        private const string StorageDurationValue = "Storage duration";
        private const string StorageLocationValue = "Storage location";
        private const string StorageRestorationValue = "Storage restoration";
        private const string SystematicMonitoringValue = "Systematic monitoring";
        private const string ThirdPartyDataSourceValue = "Third party data source";
        private const string WithdrawConsentValue = "Withdraw consent";
        private const string WithdrawingFromProcessValue = "Withdrawing from process";

        /// <summary> Algorithmic logic. </summary>
        public static Context AlgorithmicLogic { get; } = new Context(AlgorithmicLogicValue);
        /// <summary> Assistive automation. </summary>
        public static Context AssistiveAutomation { get; } = new Context(AssistiveAutomationValue);
        /// <summary> Automated decision making. </summary>
        public static Context AutomatedDecisionMaking { get; } = new Context(AutomatedDecisionMakingValue);
        /// <summary> Automated scoring of individuals. </summary>
        public static Context AutomatedScoringOfIndividuals { get; } = new Context(AutomatedScoringOfIndividualsValue);
        /// <summary> Automation level. </summary>
        public static Context AutomationLevel { get; } = new Context(AutomationLevelValue);
        /// <summary> Autonomous. </summary>
        public static Context Autonomous { get; } = new Context(AutonomousValue);
        /// <summary> Cannot challenge process. </summary>
        public static Context CannotChallengeProcess { get; } = new Context(CannotChallengeProcessValue);
        /// <summary> Cannot challenge process input. </summary>
        public static Context CannotChallengeProcessInput { get; } = new Context(CannotChallengeProcessInputValue);
        /// <summary> Cannot challenge process output. </summary>
        public static Context CannotChallengeProcessOutput { get; } = new Context(CannotChallengeProcessOutputValue);
        /// <summary> Cannot correct process. </summary>
        public static Context CannotCorrectProcess { get; } = new Context(CannotCorrectProcessValue);
        /// <summary> Cannot correct process input. </summary>
        public static Context CannotCorrectProcessInput { get; } = new Context(CannotCorrectProcessInputValue);
        /// <summary> Cannot correct process output. </summary>
        public static Context CannotCorrectProcessOutput { get; } = new Context(CannotCorrectProcessOutputValue);
        /// <summary> Cannot object to process. </summary>
        public static Context CannotObjectToProcess { get; } = new Context(CannotObjectToProcessValue);
        /// <summary> Cannot opt in to process. </summary>
        public static Context CannotOptInToProcess { get; } = new Context(CannotOptInToProcessValue);
        /// <summary> Cannot opt out from process. </summary>
        public static Context CannotOptOutFromProcess { get; } = new Context(CannotOptOutFromProcessValue);
        /// <summary> Cannot reverse process effects. </summary>
        public static Context CannotReverseProcessEffects { get; } = new Context(CannotReverseProcessEffectsValue);
        /// <summary> Cannot reverse process input. </summary>
        public static Context CannotReverseProcessInput { get; } = new Context(CannotReverseProcessInputValue);
        /// <summary> Cannot reverse process output. </summary>
        public static Context CannotReverseProcessOutput { get; } = new Context(CannotReverseProcessOutputValue);
        /// <summary> Cannot withdraw from process. </summary>
        public static Context CannotWithdrawFromProcess { get; } = new Context(CannotWithdrawFromProcessValue);
        /// <summary> Challenging process. </summary>
        public static Context ChallengingProcess { get; } = new Context(ChallengingProcessValue);
        /// <summary> Challenging process input. </summary>
        public static Context ChallengingProcessInput { get; } = new Context(ChallengingProcessInputValue);
        /// <summary> Challenging process output. </summary>
        public static Context ChallengingProcessOutput { get; } = new Context(ChallengingProcessOutputValue);
        /// <summary> Conditional automation. </summary>
        public static Context ConditionalAutomation { get; } = new Context(ConditionalAutomationValue);
        /// <summary> Consent control. </summary>
        public static Context ConsentControl { get; } = new Context(ConsentControlValue);
        /// <summary> Correcting process. </summary>
        public static Context CorrectingProcess { get; } = new Context(CorrectingProcessValue);
        /// <summary> Correcting process input. </summary>
        public static Context CorrectingProcessInput { get; } = new Context(CorrectingProcessInputValue);
        /// <summary> Correcting process output. </summary>
        public static Context CorrectingProcessOutput { get; } = new Context(CorrectingProcessOutputValue);
        /// <summary> Completely manual processing. </summary>
        public static Context CompletelyManualProcessing { get; } = new Context(CompletelyManualProcessingValue);
        /// <summary> Data controller data source. </summary>
        public static Context DataControllerDataSource { get; } = new Context(DataControllerDataSourceValue);
        /// <summary> Data published by data subject. </summary>
        public static Context DataPublishedByDataSubject { get; } = new Context(DataPublishedByDataSubjectValue);
        /// <summary> Data source. </summary>
        public static Context DataSource { get; } = new Context(DataSourceValue);
        /// <summary> Data subject. </summary>
        public static Context DataSubject { get; } = new Context(DataSubjectValue);
        /// <summary> Data subject data source. </summary>
        public static Context DataSubjectDataSource { get; } = new Context(DataSubjectDataSourceValue);
        /// <summary> Data subject scale. </summary>
        public static Context DataSubjectScale { get; } = new Context(DataSubjectScaleValue);
        /// <summary> Data volume. </summary>
        public static Context DataVolume { get; } = new Context(DataVolumeValue);
        /// <summary> Decision making. </summary>
        public static Context DecisionMaking { get; } = new Context(DecisionMakingValue);
        /// <summary> Entity active involvement. </summary>
        public static Context EntityActiveInvolvement { get; } = new Context(EntityActiveInvolvementValue);
        /// <summary> Entity involvement. </summary>
        public static Context EntityInvolvement { get; } = new Context(EntityInvolvementValue);
        /// <summary> Entity non involvement. </summary>
        public static Context EntityNonInvolvement { get; } = new Context(EntityNonInvolvementValue);
        /// <summary> Entity non permissive involvement. </summary>
        public static Context EntityNonPermissiveInvolvement { get; } = new Context(EntityNonPermissiveInvolvementValue);
        /// <summary> Entity passive involvement. </summary>
        public static Context EntityPassiveInvolvement { get; } = new Context(EntityPassiveInvolvementValue);
        /// <summary> Entity permissive involvement. </summary>
        public static Context EntityPermissiveInvolvement { get; } = new Context(EntityPermissiveInvolvementValue);
        /// <summary> Evaluation of individuals. </summary>
        public static Context EvaluationOfIndividuals { get; } = new Context(EvaluationOfIndividualsValue);
        /// <summary> Evaluation scoring. </summary>
        public static Context EvaluationScoring { get; } = new Context(EvaluationScoringValue);
        /// <summary> Full automation. </summary>
        public static Context FullAutomation { get; } = new Context(FullAutomationValue);
        /// <summary> Geographic coverage. </summary>
        public static Context GeographicCoverage { get; } = new Context(GeographicCoverageValue);
        /// <summary> Global scale. </summary>
        public static Context GlobalScale { get; } = new Context(GlobalScaleValue);
        /// <summary> High automation. </summary>
        public static Context HighAutomation { get; } = new Context(HighAutomationValue);
        /// <summary> Huge data volume. </summary>
        public static Context HugeDataVolume { get; } = new Context(HugeDataVolumeValue);
        /// <summary> Huge scale of data subjects. </summary>
        public static Context HugeScaleOfDataSubjects { get; } = new Context(HugeScaleOfDataSubjectsValue);
        /// <summary> Human involved. </summary>
        public static Context HumanInvolved { get; } = new Context(HumanInvolvedValue);
        /// <summary> Human involvement. </summary>
        public static Context HumanInvolvement { get; } = new Context(HumanInvolvementValue);
        /// <summary> Human involvement for control. </summary>
        public static Context HumanInvolvementForControl { get; } = new Context(HumanInvolvementForControlValue);
        /// <summary> Human involvement for decision. </summary>
        public static Context HumanInvolvementForDecision { get; } = new Context(HumanInvolvementForDecisionValue);
        /// <summary> Human involvement for input. </summary>
        public static Context HumanInvolvementForInput { get; } = new Context(HumanInvolvementForInputValue);
        /// <summary> Human involvement for intervention. </summary>
        public static Context HumanInvolvementForIntervention { get; } = new Context(HumanInvolvementForInterventionValue);
        /// <summary> Human involvement for oversight. </summary>
        public static Context HumanInvolvementForOversight { get; } = new Context(HumanInvolvementForOversightValue);
        /// <summary> Human involvement for verification. </summary>
        public static Context HumanInvolvementForVerification { get; } = new Context(HumanInvolvementForVerificationValue);
        /// <summary> Human not involved. </summary>
        public static Context HumanNotInvolved { get; } = new Context(HumanNotInvolvedValue);
        /// <summary> Innovative use of existing technology. </summary>
        public static Context InnovativeUseOfExistingTechnology { get; } = new Context(InnovativeUseOfExistingTechnologyValue);
        /// <summary> Innovative use of new technologies. </summary>
        public static Context InnovativeUseOfNewTechnologies { get; } = new Context(InnovativeUseOfNewTechnologiesValue);
        /// <summary> Innovative use of technology. </summary>
        public static Context InnovativeUseOfTechnology { get; } = new Context(InnovativeUseOfTechnologyValue);
        /// <summary> Large data volume. </summary>
        public static Context LargeDataVolume { get; } = new Context(LargeDataVolumeValue);
        /// <summary> Large scale of data subjects. </summary>
        public static Context LargeScaleOfDataSubjects { get; } = new Context(LargeScaleOfDataSubjectsValue);
        /// <summary> Large scale processing. </summary>
        public static Context LargeScaleProcessing { get; } = new Context(LargeScaleProcessingValue);
        /// <summary> Local environment scale. </summary>
        public static Context LocalEnvironmentScale { get; } = new Context(LocalEnvironmentScaleValue);
        /// <summary> Locality scale. </summary>
        public static Context LocalityScale { get; } = new Context(LocalityScaleValue);
        /// <summary> Medium data volume. </summary>
        public static Context MediumDataVolume { get; } = new Context(MediumDataVolumeValue);
        /// <summary> Medium scale of data subjects. </summary>
        public static Context MediumScaleOfDataSubjects { get; } = new Context(MediumScaleOfDataSubjectsValue);
        /// <summary> Medium scale processing. </summary>
        public static Context MediumScaleProcessing { get; } = new Context(MediumScaleProcessingValue);
        /// <summary> Multi national scale. </summary>
        public static Context MultiNationalScale { get; } = new Context(MultiNationalScaleValue);
        /// <summary> National scale. </summary>
        public static Context NationalScale { get; } = new Context(NationalScaleValue);
        /// <summary> Nearly global scale. </summary>
        public static Context NearlyGlobalScale { get; } = new Context(NearlyGlobalScaleValue);
        /// <summary> Non public data source. </summary>
        public static Context NonPublicDataSource { get; } = new Context(NonPublicDataSourceValue);
        /// <summary> Not automated. </summary>
        public static Context NotAutomated { get; } = new Context(NotAutomatedValue);
        /// <summary> Objecting to process. </summary>
        public static Context ObjectingToProcess { get; } = new Context(ObjectingToProcessValue);
        /// <summary> Obtain consent. </summary>
        public static Context ObtainConsent { get; } = new Context(ObtainConsentValue);
        /// <summary> Opting in to process. </summary>
        public static Context OptingInToProcess { get; } = new Context(OptingInToProcessValue);
        /// <summary> Opting out from process. </summary>
        public static Context OptingOutFromProcess { get; } = new Context(OptingOutFromProcessValue);
        /// <summary> Partial automation. </summary>
        public static Context PartialAutomation { get; } = new Context(PartialAutomationValue);
        /// <summary> Processing condition. </summary>
        public static Context ProcessingCondition { get; } = new Context(ProcessingConditionValue);
        /// <summary> Processing duration. </summary>
        public static Context ProcessingDuration { get; } = new Context(ProcessingDurationValue);
        /// <summary> Processing location. </summary>
        public static Context ProcessingLocation { get; } = new Context(ProcessingLocationValue);
        /// <summary> Processing scale. </summary>
        public static Context ProcessingScale { get; } = new Context(ProcessingScaleValue);
        /// <summary> Provide consent. </summary>
        public static Context ProvideConsent { get; } = new Context(ProvideConsentValue);
        /// <summary> Public data source. </summary>
        public static Context PublicDataSource { get; } = new Context(PublicDataSourceValue);
        /// <summary> Reaffirm consent. </summary>
        public static Context ReaffirmConsent { get; } = new Context(ReaffirmConsentValue);
        /// <summary> Regional scale. </summary>
        public static Context RegionalScale { get; } = new Context(RegionalScaleValue);
        /// <summary> Reversing process effects. </summary>
        public static Context ReversingProcessEffects { get; } = new Context(ReversingProcessEffectsValue);
        /// <summary> Reversing process input. </summary>
        public static Context ReversingProcessInput { get; } = new Context(ReversingProcessInputValue);
        /// <summary> Reversing process output. </summary>
        public static Context ReversingProcessOutput { get; } = new Context(ReversingProcessOutputValue);
        /// <summary> Scale. </summary>
        public static Context Scale { get; } = new Context(ScaleValue);
        /// <summary> Scoring of individuals. </summary>
        public static Context ScoringOfIndividuals { get; } = new Context(ScoringOfIndividualsValue);
        /// <summary> Singular data volume. </summary>
        public static Context SingularDataVolume { get; } = new Context(SingularDataVolumeValue);
        /// <summary> Singular scale of data subjects. </summary>
        public static Context SingularScaleOfDataSubjects { get; } = new Context(SingularScaleOfDataSubjectsValue);
        /// <summary> Small data volume. </summary>
        public static Context SmallDataVolume { get; } = new Context(SmallDataVolumeValue);
        /// <summary> Small scale of data subjects. </summary>
        public static Context SmallScaleOfDataSubjects { get; } = new Context(SmallScaleOfDataSubjectsValue);
        /// <summary> Small scale processing. </summary>
        public static Context SmallScaleProcessing { get; } = new Context(SmallScaleProcessingValue);
        /// <summary> Sporadic data volume. </summary>
        public static Context SporadicDataVolume { get; } = new Context(SporadicDataVolumeValue);
        /// <summary> Sporadic scale of data subjects. </summary>
        public static Context SporadicScaleOfDataSubjects { get; } = new Context(SporadicScaleOfDataSubjectsValue);
        /// <summary> Storage condition. </summary>
        public static Context StorageCondition { get; } = new Context(StorageConditionValue);
        /// <summary> Storage deletion. </summary>
        public static Context StorageDeletion { get; } = new Context(StorageDeletionValue);
        /// <summary> Storage duration. </summary>
        public static Context StorageDuration { get; } = new Context(StorageDurationValue);
        /// <summary> Storage location. </summary>
        public static Context StorageLocation { get; } = new Context(StorageLocationValue);
        /// <summary> Storage restoration. </summary>
        public static Context StorageRestoration { get; } = new Context(StorageRestorationValue);
        /// <summary> Systematic monitoring. </summary>
        public static Context SystematicMonitoring { get; } = new Context(SystematicMonitoringValue);
        /// <summary> Third party data source. </summary>
        public static Context ThirdPartyDataSource { get; } = new Context(ThirdPartyDataSourceValue);
        /// <summary> Withdraw consent. </summary>
        public static Context WithdrawConsent { get; } = new Context(WithdrawConsentValue);
        /// <summary> Withdrawing from process. </summary>
        public static Context WithdrawingFromProcess { get; } = new Context(WithdrawingFromProcessValue);
        /// <summary> Determines if two <see cref="Context"/> values are the same. </summary>
        public static bool operator ==(Context left, Context right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Context"/> values are not the same. </summary>
        public static bool operator !=(Context left, Context right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Context"/>. </summary>
        public static implicit operator Context(string value) => new Context(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Context other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Context other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
