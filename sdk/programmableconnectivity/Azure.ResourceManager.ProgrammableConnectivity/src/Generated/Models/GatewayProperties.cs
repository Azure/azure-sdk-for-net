// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Gateway resource properties. </summary>
    public partial class GatewayProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GatewayProperties"/>. </summary>
        /// <param name="configuredApplication"> Details about the Application that would use the Operator's Network APIs. </param>
        /// <param name="configuredApplicationOwner"> Details about the Organization owning the Application that would use the Operator's Network APIs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="configuredApplication"/> or <paramref name="configuredApplicationOwner"/> is null. </exception>
        public GatewayProperties(ApplicationProperties configuredApplication, ApplicationOwnerProperties configuredApplicationOwner)
        {
            Argument.AssertNotNull(configuredApplication, nameof(configuredApplication));
            Argument.AssertNotNull(configuredApplicationOwner, nameof(configuredApplicationOwner));

            OperatorApiConnections = new ChangeTrackingList<ResourceIdentifier>();
            ConfiguredApplication = configuredApplication;
            ConfiguredApplicationOwner = configuredApplicationOwner;
        }

        /// <summary> Initializes a new instance of <see cref="GatewayProperties"/>. </summary>
        /// <param name="operatorApiConnections"> List of Operator API Connections selected by the user. </param>
        /// <param name="gatewayBaseUri"> Base URL of the Gateway resource. This is the URL that the users would use to make Network API requests to the Operators via Azure. </param>
        /// <param name="provisioningState"> The status of the last operation on the Gateway resource. </param>
        /// <param name="configuredApplication"> Details about the Application that would use the Operator's Network APIs. </param>
        /// <param name="configuredApplicationOwner"> Details about the Organization owning the Application that would use the Operator's Network APIs. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GatewayProperties(IReadOnlyList<ResourceIdentifier> operatorApiConnections, string gatewayBaseUri, ProvisioningState? provisioningState, ApplicationProperties configuredApplication, ApplicationOwnerProperties configuredApplicationOwner, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OperatorApiConnections = operatorApiConnections;
            GatewayBaseUri = gatewayBaseUri;
            ProvisioningState = provisioningState;
            ConfiguredApplication = configuredApplication;
            ConfiguredApplicationOwner = configuredApplicationOwner;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GatewayProperties"/> for deserialization. </summary>
        internal GatewayProperties()
        {
        }

        /// <summary> List of Operator API Connections selected by the user. </summary>
        public IReadOnlyList<ResourceIdentifier> OperatorApiConnections { get; }
        /// <summary> Base URL of the Gateway resource. This is the URL that the users would use to make Network API requests to the Operators via Azure. </summary>
        public string GatewayBaseUri { get; }
        /// <summary> The status of the last operation on the Gateway resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Details about the Application that would use the Operator's Network APIs. </summary>
        public ApplicationProperties ConfiguredApplication { get; set; }
        /// <summary> Details about the Organization owning the Application that would use the Operator's Network APIs. </summary>
        public ApplicationOwnerProperties ConfiguredApplicationOwner { get; set; }
    }
}
