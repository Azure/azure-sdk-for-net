// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Valid values for the Organization Type based on W3C Data Privacy Vocabulary v2 https://w3c.github.io/dpv/2.0/dpv/. </summary>
    public readonly partial struct OrganizationType : IEquatable<OrganizationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OrganizationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OrganizationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcademicScientificOrganizationValue = "Academic scientific organization";
        private const string ForProfitOrganizationValue = "For profit organization";
        private const string GovernmentalOrganizationValue = "Governmental organization";
        private const string IndustryConsortiumValue = "Industry consortium";
        private const string InternationalOrganizationValue = "International organization";
        private const string NonGovernmentalOrganizationValue = "Non-governmental organization";
        private const string NonProfitOrganizationValue = "Non-profit organization";
        private const string OrganizationalUnitValue = "Organizational unit";

        /// <summary> Academic scientific organization. </summary>
        public static OrganizationType AcademicScientificOrganization { get; } = new OrganizationType(AcademicScientificOrganizationValue);
        /// <summary> For profit organization. </summary>
        public static OrganizationType ForProfitOrganization { get; } = new OrganizationType(ForProfitOrganizationValue);
        /// <summary> Governmental organization. </summary>
        public static OrganizationType GovernmentalOrganization { get; } = new OrganizationType(GovernmentalOrganizationValue);
        /// <summary> Industry consortium. </summary>
        public static OrganizationType IndustryConsortium { get; } = new OrganizationType(IndustryConsortiumValue);
        /// <summary> International organization. </summary>
        public static OrganizationType InternationalOrganization { get; } = new OrganizationType(InternationalOrganizationValue);
        /// <summary> Non-governmental organization. </summary>
        public static OrganizationType NonGovernmentalOrganization { get; } = new OrganizationType(NonGovernmentalOrganizationValue);
        /// <summary> Non-profit organization. </summary>
        public static OrganizationType NonProfitOrganization { get; } = new OrganizationType(NonProfitOrganizationValue);
        /// <summary> Organizational unit. </summary>
        public static OrganizationType OrganizationalUnit { get; } = new OrganizationType(OrganizationalUnitValue);
        /// <summary> Determines if two <see cref="OrganizationType"/> values are the same. </summary>
        public static bool operator ==(OrganizationType left, OrganizationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OrganizationType"/> values are not the same. </summary>
        public static bool operator !=(OrganizationType left, OrganizationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OrganizationType"/>. </summary>
        public static implicit operator OrganizationType(string value) => new OrganizationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OrganizationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OrganizationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
