// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Model defining how received data is processed. </summary>
    public partial class DataProcessing
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DataProcessing"/>. </summary>
        /// <param name="processingOperation"> The operation that is performed on the data received. </param>
        /// <param name="contexts"> The contexts in which the data is processed. </param>
        /// <param name="duration"> The duration or temporal limitation of the data processing. </param>
        /// <param name="frequency"> The frequency of the data processing. </param>
        /// <param name="transitRegions"> The countries/regions the data transits through. </param>
        /// <param name="storageRegions"> The countries/regions the data is stored in. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contexts"/>, <paramref name="transitRegions"/> or <paramref name="storageRegions"/> is null. </exception>
        public DataProcessing(ProcessingOperation processingOperation, IEnumerable<Context> contexts, Duration duration, Frequency frequency, IEnumerable<DataRegions> transitRegions, IEnumerable<DataRegions> storageRegions)
        {
            Argument.AssertNotNull(contexts, nameof(contexts));
            Argument.AssertNotNull(transitRegions, nameof(transitRegions));
            Argument.AssertNotNull(storageRegions, nameof(storageRegions));

            ProcessingOperation = processingOperation;
            Contexts = contexts.ToList();
            Duration = duration;
            Frequency = frequency;
            TransitRegions = transitRegions.ToList();
            StorageRegions = storageRegions.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="DataProcessing"/>. </summary>
        /// <param name="processingOperation"> The operation that is performed on the data received. </param>
        /// <param name="contexts"> The contexts in which the data is processed. </param>
        /// <param name="duration"> The duration or temporal limitation of the data processing. </param>
        /// <param name="frequency"> The frequency of the data processing. </param>
        /// <param name="transitRegions"> The countries/regions the data transits through. </param>
        /// <param name="storageRegions"> The countries/regions the data is stored in. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DataProcessing(ProcessingOperation processingOperation, IList<Context> contexts, Duration duration, Frequency frequency, IList<DataRegions> transitRegions, IList<DataRegions> storageRegions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProcessingOperation = processingOperation;
            Contexts = contexts;
            Duration = duration;
            Frequency = frequency;
            TransitRegions = transitRegions;
            StorageRegions = storageRegions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DataProcessing"/> for deserialization. </summary>
        internal DataProcessing()
        {
        }

        /// <summary> The operation that is performed on the data received. </summary>
        public ProcessingOperation ProcessingOperation { get; set; }
        /// <summary> The contexts in which the data is processed. </summary>
        public IList<Context> Contexts { get; }
        /// <summary> The duration or temporal limitation of the data processing. </summary>
        public Duration Duration { get; set; }
        /// <summary> The frequency of the data processing. </summary>
        public Frequency Frequency { get; set; }
        /// <summary> The countries/regions the data transits through. </summary>
        public IList<DataRegions> TransitRegions { get; }
        /// <summary> The countries/regions the data is stored in. </summary>
        public IList<DataRegions> StorageRegions { get; }
    }
}
