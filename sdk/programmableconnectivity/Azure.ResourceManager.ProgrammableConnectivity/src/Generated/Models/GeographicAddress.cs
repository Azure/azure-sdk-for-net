// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Model defining a geographic address. </summary>
    public partial class GeographicAddress
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GeographicAddress"/>. </summary>
        /// <param name="countryCode"> Country code of the address. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="countryCode"/> is null. </exception>
        public GeographicAddress(string countryCode)
        {
            Argument.AssertNotNull(countryCode, nameof(countryCode));

            CountryCode = countryCode;
        }

        /// <summary> Initializes a new instance of <see cref="GeographicAddress"/>. </summary>
        /// <param name="streetNumber"> Street Number of the address. </param>
        /// <param name="streetName"> Street Name of the address. </param>
        /// <param name="locality"> Locality of the address. </param>
        /// <param name="city"> City of the address. </param>
        /// <param name="stateOrProvince"> State or province of the address. </param>
        /// <param name="postalCode"> Postal code of the address. </param>
        /// <param name="countryCode"> Country code of the address. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GeographicAddress(string streetNumber, string streetName, string locality, string city, string stateOrProvince, string postalCode, string countryCode, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            StreetNumber = streetNumber;
            StreetName = streetName;
            Locality = locality;
            City = city;
            StateOrProvince = stateOrProvince;
            PostalCode = postalCode;
            CountryCode = countryCode;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GeographicAddress"/> for deserialization. </summary>
        internal GeographicAddress()
        {
        }

        /// <summary> Street Number of the address. </summary>
        public string StreetNumber { get; set; }
        /// <summary> Street Name of the address. </summary>
        public string StreetName { get; set; }
        /// <summary> Locality of the address. </summary>
        public string Locality { get; set; }
        /// <summary> City of the address. </summary>
        public string City { get; set; }
        /// <summary> State or province of the address. </summary>
        public string StateOrProvince { get; set; }
        /// <summary> Postal code of the address. </summary>
        public string PostalCode { get; set; }
        /// <summary> Country code of the address. </summary>
        public string CountryCode { get; set; }
    }
}
