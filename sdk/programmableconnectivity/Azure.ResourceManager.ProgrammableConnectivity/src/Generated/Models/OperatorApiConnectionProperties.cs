// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Operator API Connection resource properties that cannot be updated once a resource has been created. </summary>
    public partial class OperatorApiConnectionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OperatorApiConnectionProperties"/>. </summary>
        /// <param name="operatorApiPlanId"> Reference to the Operator API Plan Resource ID. </param>
        /// <param name="gatewayId"> Reference to the APC Gateway resource ID. </param>
        /// <param name="planTermsAndConditionsAccepted">
        /// Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
        /// After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
        /// have been accepted.
        ///
        /// Must be set to True, as the Terms and Conditions must be accepted.
        /// </param>
        /// <param name="purposes"> The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support multiple. </param>
        /// <param name="purposeReason"> Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use case. </param>
        /// <param name="dataProcessingList"> List of ways the data returned on this API is processed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanId"/>, <paramref name="gatewayId"/>, <paramref name="purposes"/>, <paramref name="purposeReason"/> or <paramref name="dataProcessingList"/> is null. </exception>
        public OperatorApiConnectionProperties(ResourceIdentifier operatorApiPlanId, ResourceIdentifier gatewayId, bool planTermsAndConditionsAccepted, IEnumerable<Purpose> purposes, string purposeReason, IEnumerable<DataProcessing> dataProcessingList)
        {
            Argument.AssertNotNull(operatorApiPlanId, nameof(operatorApiPlanId));
            Argument.AssertNotNull(gatewayId, nameof(gatewayId));
            Argument.AssertNotNull(purposes, nameof(purposes));
            Argument.AssertNotNull(purposeReason, nameof(purposeReason));
            Argument.AssertNotNull(dataProcessingList, nameof(dataProcessingList));

            OperatorApiPlanId = operatorApiPlanId;
            GatewayId = gatewayId;
            PlanTermsAndConditionsAccepted = planTermsAndConditionsAccepted;
            PlanTermsAndConditionsLinks = new ChangeTrackingList<string>();
            Purposes = purposes.ToList();
            PurposeReason = purposeReason;
            DataProcessingList = dataProcessingList.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="OperatorApiConnectionProperties"/>. </summary>
        /// <param name="operatorApiPlanId"> Reference to the Operator API Plan Resource ID. </param>
        /// <param name="gatewayId"> Reference to the APC Gateway resource ID. </param>
        /// <param name="operatorName"> Name of the Operator in the linked Operator API Plan belongs to. </param>
        /// <param name="camaraApiName"> The Network API for the current operator in the country/region provided in the linked Operator API Plan. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="status"> The status of the OperatorApiConnection resource. </param>
        /// <param name="planTermsAndConditionsAccepted">
        /// Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
        /// After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
        /// have been accepted.
        ///
        /// Must be set to True, as the Terms and Conditions must be accepted.
        /// </param>
        /// <param name="planTermsAndConditionsLinks"> Links to the Terms and Conditions of the Operator API Plan that were accepted on creation. </param>
        /// <param name="purposes"> The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support multiple. </param>
        /// <param name="purposeReason"> Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use case. </param>
        /// <param name="dataProcessingList"> List of ways the data returned on this API is processed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OperatorApiConnectionProperties(ResourceIdentifier operatorApiPlanId, ResourceIdentifier gatewayId, string operatorName, string camaraApiName, ProvisioningState? provisioningState, Status status, bool planTermsAndConditionsAccepted, IReadOnlyList<string> planTermsAndConditionsLinks, IList<Purpose> purposes, string purposeReason, IList<DataProcessing> dataProcessingList, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OperatorApiPlanId = operatorApiPlanId;
            GatewayId = gatewayId;
            OperatorName = operatorName;
            CamaraApiName = camaraApiName;
            ProvisioningState = provisioningState;
            Status = status;
            PlanTermsAndConditionsAccepted = planTermsAndConditionsAccepted;
            PlanTermsAndConditionsLinks = planTermsAndConditionsLinks;
            Purposes = purposes;
            PurposeReason = purposeReason;
            DataProcessingList = dataProcessingList;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OperatorApiConnectionProperties"/> for deserialization. </summary>
        internal OperatorApiConnectionProperties()
        {
        }

        /// <summary> Reference to the Operator API Plan Resource ID. </summary>
        public ResourceIdentifier OperatorApiPlanId { get; set; }
        /// <summary> Reference to the APC Gateway resource ID. </summary>
        public ResourceIdentifier GatewayId { get; set; }
        /// <summary> Name of the Operator in the linked Operator API Plan belongs to. </summary>
        public string OperatorName { get; }
        /// <summary> The Network API for the current operator in the country/region provided in the linked Operator API Plan. </summary>
        public string CamaraApiName { get; }
        /// <summary> The status of the last operation. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The status of the OperatorApiConnection resource. </summary>
        public Status Status { get; }
        /// <summary>
        /// Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
        /// After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
        /// have been accepted.
        ///
        /// Must be set to True, as the Terms and Conditions must be accepted.
        /// </summary>
        public bool PlanTermsAndConditionsAccepted { get; set; }
        /// <summary> Links to the Terms and Conditions of the Operator API Plan that were accepted on creation. </summary>
        public IReadOnlyList<string> PlanTermsAndConditionsLinks { get; }
        /// <summary> The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support multiple. </summary>
        public IList<Purpose> Purposes { get; }
        /// <summary> Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use case. </summary>
        public string PurposeReason { get; set; }
        /// <summary> List of ways the data returned on this API is processed. </summary>
        public IList<DataProcessing> DataProcessingList { get; }
    }
}
