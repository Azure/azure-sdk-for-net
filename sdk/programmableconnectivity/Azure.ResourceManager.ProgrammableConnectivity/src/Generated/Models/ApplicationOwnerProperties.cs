// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Details about the Application Owner (i.e. organization) that would use the Operator's Network APIs. </summary>
    public partial class ApplicationOwnerProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ApplicationOwnerProperties"/>. </summary>
        /// <param name="name"> Common name of the organization owning the application. </param>
        /// <param name="legalName"> Legal name of the organization owning the application. </param>
        /// <param name="tradingName"> Trading name of the organization owning the application. </param>
        /// <param name="organizationDescription"> A description of the organization owning the application. </param>
        /// <param name="taxNumber"> Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased. </param>
        /// <param name="organizationType"> The type of organization that the Application Owner is. </param>
        /// <param name="organizationIdentificationId"> ID number for official identification of the organization. </param>
        /// <param name="organizationIdentificationIssuer"> Issuing organization of the ID for official identification of the organization. </param>
        /// <param name="organizationIdentificationType"> Type of official identification of the organization. </param>
        /// <param name="contactEmailAddress"> Email address for the person responsible for the use of Network APIs in this application. </param>
        /// <param name="legalRepresentative"> Legal representative of the organization. </param>
        /// <param name="privacyManager"> Privacy manager of the organization. </param>
        /// <param name="dataProtectionOfficer"> Data Protection Officer of the organization. </param>
        /// <param name="registeredGeographicAddress"> Registered Geographic address. </param>
        /// <param name="privacyPolicyUri"> URL for the organization's privacy policy. </param>
        /// <param name="localRepresentatives"> List of local representatives. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="legalName"/>, <paramref name="tradingName"/>, <paramref name="organizationDescription"/>, <paramref name="taxNumber"/>, <paramref name="organizationIdentificationId"/>, <paramref name="organizationIdentificationIssuer"/>, <paramref name="organizationIdentificationType"/>, <paramref name="contactEmailAddress"/>, <paramref name="legalRepresentative"/>, <paramref name="privacyManager"/>, <paramref name="dataProtectionOfficer"/>, <paramref name="registeredGeographicAddress"/>, <paramref name="privacyPolicyUri"/> or <paramref name="localRepresentatives"/> is null. </exception>
        public ApplicationOwnerProperties(string name, string legalName, string tradingName, string organizationDescription, string taxNumber, OrganizationType organizationType, string organizationIdentificationId, string organizationIdentificationIssuer, string organizationIdentificationType, string contactEmailAddress, Person legalRepresentative, Person privacyManager, Person dataProtectionOfficer, GeographicAddress registeredGeographicAddress, Uri privacyPolicyUri, IEnumerable<LocalRepresentative> localRepresentatives)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(legalName, nameof(legalName));
            Argument.AssertNotNull(tradingName, nameof(tradingName));
            Argument.AssertNotNull(organizationDescription, nameof(organizationDescription));
            Argument.AssertNotNull(taxNumber, nameof(taxNumber));
            Argument.AssertNotNull(organizationIdentificationId, nameof(organizationIdentificationId));
            Argument.AssertNotNull(organizationIdentificationIssuer, nameof(organizationIdentificationIssuer));
            Argument.AssertNotNull(organizationIdentificationType, nameof(organizationIdentificationType));
            Argument.AssertNotNull(contactEmailAddress, nameof(contactEmailAddress));
            Argument.AssertNotNull(legalRepresentative, nameof(legalRepresentative));
            Argument.AssertNotNull(privacyManager, nameof(privacyManager));
            Argument.AssertNotNull(dataProtectionOfficer, nameof(dataProtectionOfficer));
            Argument.AssertNotNull(registeredGeographicAddress, nameof(registeredGeographicAddress));
            Argument.AssertNotNull(privacyPolicyUri, nameof(privacyPolicyUri));
            Argument.AssertNotNull(localRepresentatives, nameof(localRepresentatives));

            Name = name;
            LegalName = legalName;
            TradingName = tradingName;
            OrganizationDescription = organizationDescription;
            TaxNumber = taxNumber;
            OrganizationType = organizationType;
            OrganizationIdentificationId = organizationIdentificationId;
            OrganizationIdentificationIssuer = organizationIdentificationIssuer;
            OrganizationIdentificationType = organizationIdentificationType;
            ContactEmailAddress = contactEmailAddress;
            LegalRepresentative = legalRepresentative;
            PrivacyManager = privacyManager;
            DataProtectionOfficer = dataProtectionOfficer;
            RegisteredGeographicAddress = registeredGeographicAddress;
            PrivacyPolicyUri = privacyPolicyUri;
            LocalRepresentatives = localRepresentatives.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ApplicationOwnerProperties"/>. </summary>
        /// <param name="name"> Common name of the organization owning the application. </param>
        /// <param name="legalName"> Legal name of the organization owning the application. </param>
        /// <param name="tradingName"> Trading name of the organization owning the application. </param>
        /// <param name="organizationDescription"> A description of the organization owning the application. </param>
        /// <param name="taxNumber"> Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased. </param>
        /// <param name="organizationType"> The type of organization that the Application Owner is. </param>
        /// <param name="organizationIdentificationId"> ID number for official identification of the organization. </param>
        /// <param name="organizationIdentificationIssuer"> Issuing organization of the ID for official identification of the organization. </param>
        /// <param name="organizationIdentificationType"> Type of official identification of the organization. </param>
        /// <param name="contactEmailAddress"> Email address for the person responsible for the use of Network APIs in this application. </param>
        /// <param name="legalRepresentative"> Legal representative of the organization. </param>
        /// <param name="privacyManager"> Privacy manager of the organization. </param>
        /// <param name="dataProtectionOfficer"> Data Protection Officer of the organization. </param>
        /// <param name="registeredGeographicAddress"> Registered Geographic address. </param>
        /// <param name="privacyPolicyUri"> URL for the organization's privacy policy. </param>
        /// <param name="localRepresentatives"> List of local representatives. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ApplicationOwnerProperties(string name, string legalName, string tradingName, string organizationDescription, string taxNumber, OrganizationType organizationType, string organizationIdentificationId, string organizationIdentificationIssuer, string organizationIdentificationType, string contactEmailAddress, Person legalRepresentative, Person privacyManager, Person dataProtectionOfficer, GeographicAddress registeredGeographicAddress, Uri privacyPolicyUri, IList<LocalRepresentative> localRepresentatives, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            LegalName = legalName;
            TradingName = tradingName;
            OrganizationDescription = organizationDescription;
            TaxNumber = taxNumber;
            OrganizationType = organizationType;
            OrganizationIdentificationId = organizationIdentificationId;
            OrganizationIdentificationIssuer = organizationIdentificationIssuer;
            OrganizationIdentificationType = organizationIdentificationType;
            ContactEmailAddress = contactEmailAddress;
            LegalRepresentative = legalRepresentative;
            PrivacyManager = privacyManager;
            DataProtectionOfficer = dataProtectionOfficer;
            RegisteredGeographicAddress = registeredGeographicAddress;
            PrivacyPolicyUri = privacyPolicyUri;
            LocalRepresentatives = localRepresentatives;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ApplicationOwnerProperties"/> for deserialization. </summary>
        internal ApplicationOwnerProperties()
        {
        }

        /// <summary> Common name of the organization owning the application. </summary>
        public string Name { get; set; }
        /// <summary> Legal name of the organization owning the application. </summary>
        public string LegalName { get; set; }
        /// <summary> Trading name of the organization owning the application. </summary>
        public string TradingName { get; set; }
        /// <summary> A description of the organization owning the application. </summary>
        public string OrganizationDescription { get; set; }
        /// <summary> Unique Tax Number for the user's organization in the country/region the APC Gateway is being purchased. </summary>
        public string TaxNumber { get; set; }
        /// <summary> The type of organization that the Application Owner is. </summary>
        public OrganizationType OrganizationType { get; set; }
        /// <summary> ID number for official identification of the organization. </summary>
        public string OrganizationIdentificationId { get; set; }
        /// <summary> Issuing organization of the ID for official identification of the organization. </summary>
        public string OrganizationIdentificationIssuer { get; set; }
        /// <summary> Type of official identification of the organization. </summary>
        public string OrganizationIdentificationType { get; set; }
        /// <summary> Email address for the person responsible for the use of Network APIs in this application. </summary>
        public string ContactEmailAddress { get; set; }
        /// <summary> Legal representative of the organization. </summary>
        public Person LegalRepresentative { get; set; }
        /// <summary> Privacy manager of the organization. </summary>
        public Person PrivacyManager { get; set; }
        /// <summary> Data Protection Officer of the organization. </summary>
        public Person DataProtectionOfficer { get; set; }
        /// <summary> Registered Geographic address. </summary>
        public GeographicAddress RegisteredGeographicAddress { get; set; }
        /// <summary> URL for the organization's privacy policy. </summary>
        public Uri PrivacyPolicyUri { get; set; }
        /// <summary> List of local representatives. </summary>
        public IList<LocalRepresentative> LocalRepresentatives { get; }
    }
}
