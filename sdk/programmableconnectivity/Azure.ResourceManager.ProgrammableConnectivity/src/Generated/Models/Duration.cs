// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Valid values for the duration based on W3C Data Privacy Vocabulary v2 https://w3c.github.io/dpv/2.0/dpv/. </summary>
    public readonly partial struct Duration : IEquatable<Duration>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Duration"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Duration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EndlessDurationValue = "Endless";
        private const string FixedOccurrencesDurationValue = "Fixed occurrences";
        private const string IndeterminateDurationValue = "Indeterminate";
        private const string TemporalDurationValue = "Temporal";
        private const string UntilEventDurationValue = "Until event";
        private const string UntilTimeDurationValue = "Until time";

        /// <summary> Endless. </summary>
        public static Duration EndlessDuration { get; } = new Duration(EndlessDurationValue);
        /// <summary> Fixed occurrences. </summary>
        public static Duration FixedOccurrencesDuration { get; } = new Duration(FixedOccurrencesDurationValue);
        /// <summary> Indeterminate. </summary>
        public static Duration IndeterminateDuration { get; } = new Duration(IndeterminateDurationValue);
        /// <summary> Temporal. </summary>
        public static Duration TemporalDuration { get; } = new Duration(TemporalDurationValue);
        /// <summary> Until event. </summary>
        public static Duration UntilEventDuration { get; } = new Duration(UntilEventDurationValue);
        /// <summary> Until time. </summary>
        public static Duration UntilTimeDuration { get; } = new Duration(UntilTimeDurationValue);
        /// <summary> Determines if two <see cref="Duration"/> values are the same. </summary>
        public static bool operator ==(Duration left, Duration right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Duration"/> values are not the same. </summary>
        public static bool operator !=(Duration left, Duration right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Duration"/>. </summary>
        public static implicit operator Duration(string value) => new Duration(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Duration other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Duration other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
