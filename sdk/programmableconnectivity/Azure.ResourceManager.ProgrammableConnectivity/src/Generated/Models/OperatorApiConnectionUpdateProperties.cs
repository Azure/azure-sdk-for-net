// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> The updatable properties of the OperatorApiConnection. </summary>
    public partial class OperatorApiConnectionUpdateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OperatorApiConnectionUpdateProperties"/>. </summary>
        public OperatorApiConnectionUpdateProperties()
        {
            Purposes = new ChangeTrackingList<Purpose>();
            DataProcessingList = new ChangeTrackingList<DataProcessing>();
        }

        /// <summary> Initializes a new instance of <see cref="OperatorApiConnectionUpdateProperties"/>. </summary>
        /// <param name="operatorApiPlanId"> Reference to the Operator API Plan Resource ID. </param>
        /// <param name="planTermsAndConditionsAccepted">
        /// Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
        /// After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
        /// have been accepted.
        ///
        /// Must be set to True, as the Terms and Conditions must be accepted.
        /// </param>
        /// <param name="purposes"> The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support multiple. </param>
        /// <param name="purposeReason"> Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use case. </param>
        /// <param name="dataProcessingList"> List of ways the data returned on this API is processed. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OperatorApiConnectionUpdateProperties(ResourceIdentifier operatorApiPlanId, bool? planTermsAndConditionsAccepted, IList<Purpose> purposes, string purposeReason, IList<DataProcessing> dataProcessingList, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            OperatorApiPlanId = operatorApiPlanId;
            PlanTermsAndConditionsAccepted = planTermsAndConditionsAccepted;
            Purposes = purposes;
            PurposeReason = purposeReason;
            DataProcessingList = dataProcessingList;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Reference to the Operator API Plan Resource ID. </summary>
        public ResourceIdentifier OperatorApiPlanId { get; set; }
        /// <summary>
        /// Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
        /// After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
        /// have been accepted.
        ///
        /// Must be set to True, as the Terms and Conditions must be accepted.
        /// </summary>
        public bool? PlanTermsAndConditionsAccepted { get; set; }
        /// <summary> The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support multiple. </summary>
        public IList<Purpose> Purposes { get; }
        /// <summary> Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use case. </summary>
        public string PurposeReason { get; set; }
        /// <summary> List of ways the data returned on this API is processed. </summary>
        public IList<DataProcessing> DataProcessingList { get; }
    }
}
