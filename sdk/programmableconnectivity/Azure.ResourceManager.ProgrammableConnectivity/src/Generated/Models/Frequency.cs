// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Valid values for the frequency based on W3C Data Privacy Vocabulary v2 https://w3c.github.io/dpv/2.0/dpv/. </summary>
    public readonly partial struct Frequency : IEquatable<Frequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Frequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Frequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContinuousFrequencyValue = "Continuous";
        private const string OftenFrequencyValue = "Often";
        private const string SingularFrequencyValue = "Singular";
        private const string SporadicFrequencyValue = "Sporadic";

        /// <summary> Continuous. </summary>
        public static Frequency ContinuousFrequency { get; } = new Frequency(ContinuousFrequencyValue);
        /// <summary> Often. </summary>
        public static Frequency OftenFrequency { get; } = new Frequency(OftenFrequencyValue);
        /// <summary> Singular. </summary>
        public static Frequency SingularFrequency { get; } = new Frequency(SingularFrequencyValue);
        /// <summary> Sporadic. </summary>
        public static Frequency SporadicFrequency { get; } = new Frequency(SporadicFrequencyValue);
        /// <summary> Determines if two <see cref="Frequency"/> values are the same. </summary>
        public static bool operator ==(Frequency left, Frequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Frequency"/> values are not the same. </summary>
        public static bool operator !=(Frequency left, Frequency right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Frequency"/>. </summary>
        public static implicit operator Frequency(string value) => new Frequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Frequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Frequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
