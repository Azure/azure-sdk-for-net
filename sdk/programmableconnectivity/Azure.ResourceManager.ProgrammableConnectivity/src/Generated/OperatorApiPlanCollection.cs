// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ProgrammableConnectivity
{
    /// <summary>
    /// A class representing a collection of <see cref="OperatorApiPlanResource"/> and their operations.
    /// Each <see cref="OperatorApiPlanResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get an <see cref="OperatorApiPlanCollection"/> instance call the GetOperatorApiPlans method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class OperatorApiPlanCollection : ArmCollection, IEnumerable<OperatorApiPlanResource>, IAsyncEnumerable<OperatorApiPlanResource>
    {
        private readonly ClientDiagnostics _operatorApiPlanClientDiagnostics;
        private readonly OperatorApiPlansRestOperations _operatorApiPlanRestClient;

        /// <summary> Initializes a new instance of the <see cref="OperatorApiPlanCollection"/> class for mocking. </summary>
        protected OperatorApiPlanCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OperatorApiPlanCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OperatorApiPlanCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _operatorApiPlanClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ProgrammableConnectivity", OperatorApiPlanResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OperatorApiPlanResource.ResourceType, out string operatorApiPlanApiVersion);
            _operatorApiPlanRestClient = new OperatorApiPlansRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, operatorApiPlanApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get an OperatorApiPlan resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/{operatorApiPlanName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiPlanName"> APC Gateway Plan Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanName"/> is null. </exception>
        public virtual async Task<Response<OperatorApiPlanResource>> GetAsync(string operatorApiPlanName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiPlanName, nameof(operatorApiPlanName));

            using var scope = _operatorApiPlanClientDiagnostics.CreateScope("OperatorApiPlanCollection.Get");
            scope.Start();
            try
            {
                var response = await _operatorApiPlanRestClient.GetAsync(Id.SubscriptionId, operatorApiPlanName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OperatorApiPlanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get an OperatorApiPlan resource by name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/{operatorApiPlanName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiPlanName"> APC Gateway Plan Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanName"/> is null. </exception>
        public virtual Response<OperatorApiPlanResource> Get(string operatorApiPlanName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiPlanName, nameof(operatorApiPlanName));

            using var scope = _operatorApiPlanClientDiagnostics.CreateScope("OperatorApiPlanCollection.Get");
            scope.Start();
            try
            {
                var response = _operatorApiPlanRestClient.Get(Id.SubscriptionId, operatorApiPlanName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OperatorApiPlanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List OperatorApiPlan resources by subscription ID.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> An optional OData based filter expression to apply on the operation. </param>
        /// <param name="top"> An optional query parameter which specifies the maximum number of records to be returned. </param>
        /// <param name="skip"> An optional query parameter which specifies the number of records to be skipped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperatorApiPlanResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OperatorApiPlanResource> GetAllAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _operatorApiPlanRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, filter, top, skip);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _operatorApiPlanRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, filter, top, skip);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new OperatorApiPlanResource(Client, OperatorApiPlanData.DeserializeOperatorApiPlanData(e)), _operatorApiPlanClientDiagnostics, Pipeline, "OperatorApiPlanCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List OperatorApiPlan resources by subscription ID.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> An optional OData based filter expression to apply on the operation. </param>
        /// <param name="top"> An optional query parameter which specifies the maximum number of records to be returned. </param>
        /// <param name="skip"> An optional query parameter which specifies the number of records to be skipped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperatorApiPlanResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OperatorApiPlanResource> GetAll(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _operatorApiPlanRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId, filter, top, skip);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _operatorApiPlanRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId, filter, top, skip);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new OperatorApiPlanResource(Client, OperatorApiPlanData.DeserializeOperatorApiPlanData(e)), _operatorApiPlanClientDiagnostics, Pipeline, "OperatorApiPlanCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/{operatorApiPlanName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiPlanName"> APC Gateway Plan Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string operatorApiPlanName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiPlanName, nameof(operatorApiPlanName));

            using var scope = _operatorApiPlanClientDiagnostics.CreateScope("OperatorApiPlanCollection.Exists");
            scope.Start();
            try
            {
                var response = await _operatorApiPlanRestClient.GetAsync(Id.SubscriptionId, operatorApiPlanName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/{operatorApiPlanName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiPlanName"> APC Gateway Plan Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanName"/> is null. </exception>
        public virtual Response<bool> Exists(string operatorApiPlanName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiPlanName, nameof(operatorApiPlanName));

            using var scope = _operatorApiPlanClientDiagnostics.CreateScope("OperatorApiPlanCollection.Exists");
            scope.Start();
            try
            {
                var response = _operatorApiPlanRestClient.Get(Id.SubscriptionId, operatorApiPlanName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/{operatorApiPlanName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiPlanName"> APC Gateway Plan Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanName"/> is null. </exception>
        public virtual async Task<NullableResponse<OperatorApiPlanResource>> GetIfExistsAsync(string operatorApiPlanName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiPlanName, nameof(operatorApiPlanName));

            using var scope = _operatorApiPlanClientDiagnostics.CreateScope("OperatorApiPlanCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _operatorApiPlanRestClient.GetAsync(Id.SubscriptionId, operatorApiPlanName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<OperatorApiPlanResource>(response.GetRawResponse());
                return Response.FromValue(new OperatorApiPlanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ProgrammableConnectivity/operatorApiPlans/{operatorApiPlanName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperatorApiPlan_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-03-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="OperatorApiPlanResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operatorApiPlanName"> APC Gateway Plan Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operatorApiPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operatorApiPlanName"/> is null. </exception>
        public virtual NullableResponse<OperatorApiPlanResource> GetIfExists(string operatorApiPlanName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operatorApiPlanName, nameof(operatorApiPlanName));

            using var scope = _operatorApiPlanClientDiagnostics.CreateScope("OperatorApiPlanCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _operatorApiPlanRestClient.Get(Id.SubscriptionId, operatorApiPlanName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<OperatorApiPlanResource>(response.GetRawResponse());
                return Response.FromValue(new OperatorApiPlanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OperatorApiPlanResource> IEnumerable<OperatorApiPlanResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<OperatorApiPlanResource> IAsyncEnumerable<OperatorApiPlanResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
