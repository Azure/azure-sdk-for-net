// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ProgrammableConnectivity.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmProgrammableConnectivityModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.GatewayData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.GatewayData"/> instance for mocking. </returns>
        public static GatewayData GatewayData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GatewayProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GatewayData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GatewayProperties"/>. </summary>
        /// <param name="operatorApiConnections"> List of Operator API Connections selected by the user. </param>
        /// <param name="gatewayBaseUri"> Base URL of the Gateway resource. This is the URL that the users would use to make Network API requests to the Operators via Azure. </param>
        /// <param name="provisioningState"> The status of the last operation on the Gateway resource. </param>
        /// <param name="configuredApplication"> Details about the Application that would use the Operator's Network APIs. </param>
        /// <param name="configuredApplicationOwner"> Details about the Organization owning the Application that would use the Operator's Network APIs. </param>
        /// <returns> A new <see cref="Models.GatewayProperties"/> instance for mocking. </returns>
        public static GatewayProperties GatewayProperties(IEnumerable<ResourceIdentifier> operatorApiConnections = null, string gatewayBaseUri = null, ProvisioningState? provisioningState = null, ApplicationProperties configuredApplication = null, ApplicationOwnerProperties configuredApplicationOwner = null)
        {
            operatorApiConnections ??= new List<ResourceIdentifier>();

            return new GatewayProperties(
                operatorApiConnections?.ToList(),
                gatewayBaseUri,
                provisioningState,
                configuredApplication,
                configuredApplicationOwner,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.OperatorApiConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.OperatorApiConnectionData"/> instance for mocking. </returns>
        public static OperatorApiConnectionData OperatorApiConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, OperatorApiConnectionProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new OperatorApiConnectionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperatorApiConnectionProperties"/>. </summary>
        /// <param name="operatorApiPlanId"> Reference to the Operator API Plan Resource ID. </param>
        /// <param name="gatewayId"> Reference to the APC Gateway resource ID. </param>
        /// <param name="operatorName"> Name of the Operator in the linked Operator API Plan belongs to. </param>
        /// <param name="camaraApiName"> The Network API for the current operator in the country/region provided in the linked Operator API Plan. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="status"> The status of the OperatorApiConnection resource. </param>
        /// <param name="planTermsAndConditionsAccepted">
        /// Whether the caller has accepted the Terms and Conditions of the associated Operator API Plan.
        /// After creation, the planTermsAndConditionsLink property is set to the Terms and Conditions that
        /// have been accepted.
        ///
        /// Must be set to True, as the Terms and Conditions must be accepted.
        /// </param>
        /// <param name="planTermsAndConditionsLinks"> Links to the Terms and Conditions of the Operator API Plan that were accepted on creation. </param>
        /// <param name="purposes"> The purpose for which the Application will use the API. Max Items 1 currently as Operators do not support multiple. </param>
        /// <param name="purposeReason"> Explanation of the reason that justifies the purpose: specifically why is the API used for the application's use case. </param>
        /// <param name="dataProcessingList"> List of ways the data returned on this API is processed. </param>
        /// <returns> A new <see cref="Models.OperatorApiConnectionProperties"/> instance for mocking. </returns>
        public static OperatorApiConnectionProperties OperatorApiConnectionProperties(ResourceIdentifier operatorApiPlanId = null, ResourceIdentifier gatewayId = null, string operatorName = null, string camaraApiName = null, ProvisioningState? provisioningState = null, Status status = null, bool planTermsAndConditionsAccepted = default, IEnumerable<string> planTermsAndConditionsLinks = null, IEnumerable<Purpose> purposes = null, string purposeReason = null, IEnumerable<DataProcessing> dataProcessingList = null)
        {
            planTermsAndConditionsLinks ??= new List<string>();
            purposes ??= new List<Purpose>();
            dataProcessingList ??= new List<DataProcessing>();

            return new OperatorApiConnectionProperties(
                operatorApiPlanId,
                gatewayId,
                operatorName,
                camaraApiName,
                provisioningState,
                status,
                planTermsAndConditionsAccepted,
                planTermsAndConditionsLinks?.ToList(),
                purposes?.ToList(),
                purposeReason,
                dataProcessingList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Status"/>. </summary>
        /// <param name="state"> Current state of the OperatorApiConnection resource. </param>
        /// <param name="reason"> Explanation of the current state of the OperatorApiConnection resource. </param>
        /// <returns> A new <see cref="Models.Status"/> instance for mocking. </returns>
        public static Status Status(string state = null, string reason = null)
        {
            return new Status(state, reason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ProgrammableConnectivity.OperatorApiPlanData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="ProgrammableConnectivity.OperatorApiPlanData"/> instance for mocking. </returns>
        public static OperatorApiPlanData OperatorApiPlanData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, OperatorApiPlanProperties properties = null)
        {
            return new OperatorApiPlanData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperatorApiPlanProperties"/>. </summary>
        /// <param name="operatorName"> Name of the Operator this plan belongs to. </param>
        /// <param name="camaraApiName"> Standardized Network API name defined by CAMARA specifications. </param>
        /// <param name="supportedLocations"> List of Azure regions where this offer is supported. </param>
        /// <param name="operatorRegions"> List of country/region names where this plan is being supported by the Operator. </param>
        /// <param name="markets"> List of country/region names where this plan is being supported by Azure Marketplace. </param>
        /// <param name="limits"> The limits, if any, will be imposed by the operator. </param>
        /// <param name="marketplaceProperties"> Azure marketplace properties for this plan. </param>
        /// <param name="provisioningState"> The status of the last operation on the Gateway resource. </param>
        /// <returns> A new <see cref="Models.OperatorApiPlanProperties"/> instance for mocking. </returns>
        public static OperatorApiPlanProperties OperatorApiPlanProperties(string operatorName = null, string camaraApiName = null, IEnumerable<string> supportedLocations = null, IEnumerable<string> operatorRegions = null, IEnumerable<string> markets = null, string limits = null, MarketplaceProperties marketplaceProperties = null, ProvisioningState? provisioningState = null)
        {
            supportedLocations ??= new List<string>();
            operatorRegions ??= new List<string>();
            markets ??= new List<string>();

            return new OperatorApiPlanProperties(
                operatorName,
                camaraApiName,
                supportedLocations?.ToList(),
                operatorRegions?.ToList(),
                markets?.ToList(),
                limits,
                marketplaceProperties,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceProperties"/>. </summary>
        /// <param name="offerId"> Azure marketplace Offer ID for this plan. </param>
        /// <param name="publisherId"> Azure marketplace Publisher ID for this plan. </param>
        /// <param name="planId"> Azure marketplace Plan ID for this plan. </param>
        /// <param name="planTermsAndConditionsLinks">
        /// Links to the Terms and Conditions of the Plan that must be accepted to create an
        /// associated Operator Api Connection
        /// </param>
        /// <returns> A new <see cref="Models.MarketplaceProperties"/> instance for mocking. </returns>
        public static MarketplaceProperties MarketplaceProperties(string offerId = null, string publisherId = null, string planId = null, IEnumerable<string> planTermsAndConditionsLinks = null)
        {
            planTermsAndConditionsLinks ??= new List<string>();

            return new MarketplaceProperties(offerId, publisherId, planId, planTermsAndConditionsLinks?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
