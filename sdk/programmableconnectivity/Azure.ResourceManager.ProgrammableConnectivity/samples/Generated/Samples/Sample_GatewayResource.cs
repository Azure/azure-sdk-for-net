// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ProgrammableConnectivity.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ProgrammableConnectivity.Samples
{
    public partial class Sample_GatewayResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GatewaysGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GatewayResource created on azure
            // for more information of creating GatewayResource, please refer to the document of GatewayResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            string gatewayName = "GatewayName";
            ResourceIdentifier gatewayResourceId = GatewayResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, gatewayName);
            GatewayResource gateway = client.GetGatewayResource(gatewayResourceId);

            // invoke the operation
            GatewayResource result = await gateway.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GatewayData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_GatewaysDeleteMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GatewayResource created on azure
            // for more information of creating GatewayResource, please refer to the document of GatewayResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            string gatewayName = "GatewayName";
            ResourceIdentifier gatewayResourceId = GatewayResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, gatewayName);
            GatewayResource gateway = client.GetGatewayResource(gatewayResourceId);

            // invoke the operation
            await gateway.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_GatewaysUpdateMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this GatewayResource created on azure
            // for more information of creating GatewayResource, please refer to the document of GatewayResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            string gatewayName = "GatewayName";
            ResourceIdentifier gatewayResourceId = GatewayResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, gatewayName);
            GatewayResource gateway = client.GetGatewayResource(gatewayResourceId);

            // invoke the operation
            GatewayPatch patch = new GatewayPatch
            {
                Tags = { },
            };
            GatewayResource result = await gateway.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GatewayData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
