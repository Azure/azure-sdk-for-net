// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ProgrammableConnectivity.Models;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.ProgrammableConnectivity.Samples
{
    public partial class Sample_GatewayCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_GatewaysCreateOrUpdateMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this GatewayResource
            GatewayCollection collection = resourceGroupResource.GetGateways();

            // invoke the operation
            string gatewayName = "GatewayName";
            GatewayData data = new GatewayData(new AzureLocation("eastus"))
            {
                Properties = new GatewayProperties(new ApplicationProperties(
                "Application Name",
                "Application description",
                Category.ArtAndDesign,
                "Contoso",
                "contact@contoso.com",
                new Uri("http://contoso.com/privacy")), new ApplicationOwnerProperties(
                "Contoso",
                "Contoso",
                "Contoso",
                "Description of Organisation",
                "12345",
                OrganizationType.AcademicScientificOrganization,
                "12345",
                "ID issuer",
                "Tax number",
                "contact@contoso.com",
                new Person("Name", "Name", "contact@contoso.com"),
                new Person("Name", "Name", "contact@contoso.com"),
                new Person("Name", "Name", "contact@contoso.com"),
                new GeographicAddress("US")
                {
                    StreetNumber = "1234",
                    StreetName = "Street",
                    Locality = "Locality",
                    City = "City",
                    StateOrProvince = "State",
                    PostalCode = "12345",
                },
                new Uri("http://contoso.com/privacy"),
                new LocalRepresentative[]
            {
new LocalRepresentative("AA", new Person("Name", "Name", "contact@contoso.com"))
            })),
                Tags = { },
            };
            ArmOperation<GatewayResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, gatewayName, data);
            GatewayResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GatewayData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GatewaysGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this GatewayResource
            GatewayCollection collection = resourceGroupResource.GetGateways();

            // invoke the operation
            string gatewayName = "GatewayName";
            GatewayResource result = await collection.GetAsync(gatewayName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GatewayData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_GatewaysListByResourceGroupMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_ListByResourceGroup_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this GatewayResource
            GatewayCollection collection = resourceGroupResource.GetGateways();

            // invoke the operation and iterate over the result
            await foreach (GatewayResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                GatewayData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GatewaysGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this GatewayResource
            GatewayCollection collection = resourceGroupResource.GetGateways();

            // invoke the operation
            string gatewayName = "GatewayName";
            bool result = await collection.ExistsAsync(gatewayName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GatewaysGetMaximumSetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-03-30-preview/Gateways_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Gateway_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "93519EA0-206F-42A3-8126-A234F19328E0";
            string resourceGroupName = "rgopenapi";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this GatewayResource
            GatewayCollection collection = resourceGroupResource.GetGateways();

            // invoke the operation
            string gatewayName = "GatewayName";
            NullableResponse<GatewayResource> response = await collection.GetIfExistsAsync(gatewayName);
            GatewayResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                GatewayData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
