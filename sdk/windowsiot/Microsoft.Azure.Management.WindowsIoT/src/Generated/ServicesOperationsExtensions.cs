// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WindowsIoT
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServicesOperations.
    /// </summary>
    public static partial class ServicesOperationsExtensions
    {
            /// <summary>
            /// Get the non-security related metadata of a Windows IoT Device Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            public static DeviceService Get(this IServicesOperations operations, string resourceGroupName, string deviceName)
            {
                return operations.GetAsync(resourceGroupName, deviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the non-security related metadata of a Windows IoT Device Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceService> GetAsync(this IServicesOperations operations, string resourceGroupName, string deviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, deviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the metadata of a Windows IoT Device Service.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of a Windows IoT Device Service. The usual
            /// pattern to modify a property is to retrieve the Windows IoT Device Service
            /// metadata and security metadata, and then combine them with the modified
            /// values in a new body to update the Windows IoT Device Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            /// <param name='deviceService'>
            /// The Windows IoT Device Service metadata and security metadata.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Windows IoT Device Service. Do not specify for creating a new
            /// Windows IoT Device Service. Required to update an existing Windows IoT
            /// Device Service.
            /// </param>
            public static DeviceService CreateOrUpdate(this IServicesOperations operations, string resourceGroupName, string deviceName, DeviceService deviceService, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, deviceName, deviceService, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the metadata of a Windows IoT Device Service.
            /// </summary>
            /// <remarks>
            /// Create or update the metadata of a Windows IoT Device Service. The usual
            /// pattern to modify a property is to retrieve the Windows IoT Device Service
            /// metadata and security metadata, and then combine them with the modified
            /// values in a new body to update the Windows IoT Device Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            /// <param name='deviceService'>
            /// The Windows IoT Device Service metadata and security metadata.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Windows IoT Device Service. Do not specify for creating a new
            /// Windows IoT Device Service. Required to update an existing Windows IoT
            /// Device Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceService> CreateOrUpdateAsync(this IServicesOperations operations, string resourceGroupName, string deviceName, DeviceService deviceService, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deviceName, deviceService, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata of a Windows IoT Device Service.
            /// </summary>
            /// <remarks>
            /// Updates the metadata of a Windows IoT Device Service. The usual pattern to
            /// modify a property is to retrieve the Windows IoT Device Service metadata
            /// and security metadata, and then combine them with the modified values in a
            /// new body to update the Windows IoT Device Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            /// <param name='deviceService'>
            /// The Windows IoT Device Service metadata and security metadata.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Windows IoT Device Service. Do not specify for creating a brand
            /// new Windows IoT Device Service. Required to update an existing Windows IoT
            /// Device Service.
            /// </param>
            public static DeviceService Update(this IServicesOperations operations, string resourceGroupName, string deviceName, DeviceService deviceService, string ifMatch = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, deviceName, deviceService, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata of a Windows IoT Device Service.
            /// </summary>
            /// <remarks>
            /// Updates the metadata of a Windows IoT Device Service. The usual pattern to
            /// modify a property is to retrieve the Windows IoT Device Service metadata
            /// and security metadata, and then combine them with the modified values in a
            /// new body to update the Windows IoT Device Service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            /// <param name='deviceService'>
            /// The Windows IoT Device Service metadata and security metadata.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Windows IoT Device Service. Do not specify for creating a brand
            /// new Windows IoT Device Service. Required to update an existing Windows IoT
            /// Device Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceService> UpdateAsync(this IServicesOperations operations, string resourceGroupName, string deviceName, DeviceService deviceService, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, deviceName, deviceService, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Windows IoT Device Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            public static DeviceService Delete(this IServicesOperations operations, string resourceGroupName, string deviceName)
            {
                return operations.DeleteAsync(resourceGroupName, deviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Windows IoT Device Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='deviceName'>
            /// The name of the Windows IoT Device Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceService> DeleteAsync(this IServicesOperations operations, string resourceGroupName, string deviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, deviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            public static IPage<DeviceService> ListByResourceGroup(this IServicesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Windows IoT Device
            /// Service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeviceService>> ListByResourceGroupAsync(this IServicesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<DeviceService> List(this IServicesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeviceService>> ListAsync(this IServicesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a Windows IoT Device Service name is available.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the Windows IoT Device Service to check.
            /// </param>
            public static DeviceServiceNameAvailabilityInfo CheckDeviceServiceNameAvailability(this IServicesOperations operations, string name)
            {
                return operations.CheckDeviceServiceNameAvailabilityAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a Windows IoT Device Service name is available.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the Windows IoT Device Service to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceServiceNameAvailabilityInfo> CheckDeviceServiceNameAvailabilityAsync(this IServicesOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckDeviceServiceNameAvailabilityWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DeviceService> ListByResourceGroupNext(this IServicesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoT hubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeviceService>> ListByResourceGroupNextAsync(this IServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DeviceService> ListNext(this IServicesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the IoT hubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeviceService>> ListNextAsync(this IServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
