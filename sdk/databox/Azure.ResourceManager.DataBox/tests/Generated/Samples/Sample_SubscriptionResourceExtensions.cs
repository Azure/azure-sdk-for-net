// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataBox.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataBox
{
    public partial class Sample_SubscriptionResourceExtensions
    {
        // ValidateAddressPost
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ValidateAddress_ValidateAddressPost()
        {
            // Generated from example definition: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-02-01/examples/ValidateAddressPost.json
            // this example is just showing the usage of "Service_ValidateAddress" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "fa68082f-8ff7-4a25-95c7-ce9da541242f";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("westus");
            DataBoxValidateAddressContent content = new DataBoxValidateAddressContent(new DataBoxShippingAddress("16 TOWNSEND ST", "US", "94107")
            {
                StreetAddress2 = "Unit 1",
                City = "San Francisco",
                StateOrProvince = "CA",
                CompanyName = "Microsoft",
                AddressType = DataBoxShippingAddressType.Commercial,
            }, DataBoxSkuName.DataBox)
            {
                ValidationType = DataBoxValidationInputDiscriminator.ValidateAddress,
            };
            AddressValidationOutput result = await subscriptionResource.ValidateAddressAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // ValidateInputs
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task ValidateInputs_ValidateInputs()
        {
            // Generated from example definition: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-02-01/examples/ValidateInputs.json
            // this example is just showing the usage of "Service_ValidateInputs" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "fa68082f-8ff7-4a25-95c7-ce9da541242f";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("westus");
            DataBoxValidationContent content = new DataBoxValidationContent(new DataBoxValidationInputContent[]
            {
new DataBoxValidationInputContent()
{
ValidationType = DataBoxValidationInputDiscriminator.ValidateDataTransferDetails,
},new DataBoxValidationInputContent()
{
ValidationType = DataBoxValidationInputDiscriminator.ValidateAddress,
},new DataBoxValidationInputContent()
{
ValidationType = DataBoxValidationInputDiscriminator.ValidateSubscriptionIsAllowedToCreateJob,
},new DataBoxValidationInputContent()
{
ValidationType = DataBoxValidationInputDiscriminator.ValidateSkuAvailability,
},new DataBoxValidationInputContent()
{
ValidationType = DataBoxValidationInputDiscriminator.ValidateCreateOrderLimit,
},new DataBoxValidationInputContent()
{
ValidationType = DataBoxValidationInputDiscriminator.ValidatePreferences,
}
            })
            {
                ValidationCategory = DataBoxValidationCategory.JobCreationValidation,
            };
            DataBoxValidationResult result = await subscriptionResource.ValidateInputsAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // RegionConfiguration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetRegionConfiguration_RegionConfiguration()
        {
            // Generated from example definition: specification/databox/resource-manager/Microsoft.DataBox/stable/2022-02-01/examples/RegionConfiguration.json
            // this example is just showing the usage of "Service_RegionConfiguration" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "fa68082f-8ff7-4a25-95c7-ce9da541242f";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("westus");
            RegionConfigurationContent content = new RegionConfigurationContent()
            {
                ScheduleAvailabilityRequest = new ScheduleAvailabilityContent(new AzureLocation("westus"))
                {
                    SkuName = DataBoxSkuName.DataBox,
                },
            };
            RegionConfigurationResult result = await subscriptionResource.GetRegionConfigurationAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
