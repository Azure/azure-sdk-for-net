// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DataBox.Models
{
    /// <summary> Details of the filter files to be used for data transfer. </summary>
    public partial class FilterFileDetails
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="FilterFileDetails"/>. </summary>
        /// <param name="filterFileType"> Type of the filter file. </param>
        /// <param name="filterFilePath"> Path of the file that contains the details of all items to transfer. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filterFilePath"/> is null. </exception>
        public FilterFileDetails(FilterFileType filterFileType, string filterFilePath)
        {
            Argument.AssertNotNull(filterFilePath, nameof(filterFilePath));

            FilterFileType = filterFileType;
            FilterFilePath = filterFilePath;
        }

        /// <summary> Initializes a new instance of <see cref="FilterFileDetails"/>. </summary>
        /// <param name="filterFileType"> Type of the filter file. </param>
        /// <param name="filterFilePath"> Path of the file that contains the details of all items to transfer. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FilterFileDetails(FilterFileType filterFileType, string filterFilePath, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FilterFileType = filterFileType;
            FilterFilePath = filterFilePath;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FilterFileDetails"/> for deserialization. </summary>
        internal FilterFileDetails()
        {
        }

        /// <summary> Type of the filter file. </summary>
        public FilterFileType FilterFileType { get; set; }
        /// <summary> Path of the file that contains the details of all items to transfer. </summary>
        public string FilterFilePath { get; set; }
    }
}
