// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataBox.Models
{
    /// <summary> Delay Error code. </summary>
    public readonly partial struct PortalDelayErrorCode : IEquatable<PortalDelayErrorCode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PortalDelayErrorCode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PortalDelayErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InternalIssueDelayValue = "InternalIssueDelay";
        private const string ActiveOrderLimitBreachedDelayValue = "ActiveOrderLimitBreachedDelay";
        private const string HighDemandDelayValue = "HighDemandDelay";
        private const string LargeNumberOfFilesDelayValue = "LargeNumberOfFilesDelay";

        /// <summary> Delay due to any internal reasons. </summary>
        public static PortalDelayErrorCode InternalIssueDelay { get; } = new PortalDelayErrorCode(InternalIssueDelayValue);
        /// <summary> Active Order limit breached. </summary>
        public static PortalDelayErrorCode ActiveOrderLimitBreachedDelay { get; } = new PortalDelayErrorCode(ActiveOrderLimitBreachedDelayValue);
        /// <summary> High demand. </summary>
        public static PortalDelayErrorCode HighDemandDelay { get; } = new PortalDelayErrorCode(HighDemandDelayValue);
        /// <summary> Slow copy due to large number of files. </summary>
        public static PortalDelayErrorCode LargeNumberOfFilesDelay { get; } = new PortalDelayErrorCode(LargeNumberOfFilesDelayValue);
        /// <summary> Determines if two <see cref="PortalDelayErrorCode"/> values are the same. </summary>
        public static bool operator ==(PortalDelayErrorCode left, PortalDelayErrorCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PortalDelayErrorCode"/> values are not the same. </summary>
        public static bool operator !=(PortalDelayErrorCode left, PortalDelayErrorCode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PortalDelayErrorCode"/>. </summary>
        public static implicit operator PortalDelayErrorCode(string value) => new PortalDelayErrorCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PortalDelayErrorCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PortalDelayErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
