// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.DataBox.Models
{
    internal static partial class DataBoxStageStatusExtensions
    {
        public static string ToSerialString(this DataBoxStageStatus value) => value switch
        {
            DataBoxStageStatus.None => "None",
            DataBoxStageStatus.InProgress => "InProgress",
            DataBoxStageStatus.Succeeded => "Succeeded",
            DataBoxStageStatus.Failed => "Failed",
            DataBoxStageStatus.Cancelled => "Cancelled",
            DataBoxStageStatus.Cancelling => "Cancelling",
            DataBoxStageStatus.SucceededWithErrors => "SucceededWithErrors",
            DataBoxStageStatus.WaitingForCustomerAction => "WaitingForCustomerAction",
            DataBoxStageStatus.SucceededWithWarnings => "SucceededWithWarnings",
            DataBoxStageStatus.WaitingForCustomerActionForKek => "WaitingForCustomerActionForKek",
            DataBoxStageStatus.WaitingForCustomerActionForCleanUp => "WaitingForCustomerActionForCleanUp",
            DataBoxStageStatus.CustomerActionPerformedForCleanUp => "CustomerActionPerformedForCleanUp",
            DataBoxStageStatus.CustomerActionPerformed => "CustomerActionPerformed",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DataBoxStageStatus value.")
        };

        public static DataBoxStageStatus ToDataBoxStageStatus(this string value)
        {
            if (string.Equals(value, "None", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.None;
            if (string.Equals(value, "InProgress", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.InProgress;
            if (string.Equals(value, "Succeeded", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.Succeeded;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.Failed;
            if (string.Equals(value, "Cancelled", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.Cancelled;
            if (string.Equals(value, "Cancelling", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.Cancelling;
            if (string.Equals(value, "SucceededWithErrors", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.SucceededWithErrors;
            if (string.Equals(value, "WaitingForCustomerAction", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.WaitingForCustomerAction;
            if (string.Equals(value, "SucceededWithWarnings", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.SucceededWithWarnings;
            if (string.Equals(value, "WaitingForCustomerActionForKek", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.WaitingForCustomerActionForKek;
            if (string.Equals(value, "WaitingForCustomerActionForCleanUp", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.WaitingForCustomerActionForCleanUp;
            if (string.Equals(value, "CustomerActionPerformedForCleanUp", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.CustomerActionPerformedForCleanUp;
            if (string.Equals(value, "CustomerActionPerformed", StringComparison.InvariantCultureIgnoreCase)) return DataBoxStageStatus.CustomerActionPerformed;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DataBoxStageStatus value.");
        }
    }
}
