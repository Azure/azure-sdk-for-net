// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBox.Models
{
    public partial class DataBoxKeyEncryptionKey : IUtf8JsonSerializable, IJsonModel<DataBoxKeyEncryptionKey>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DataBoxKeyEncryptionKey>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<DataBoxKeyEncryptionKey>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<DataBoxKeyEncryptionKey>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<DataBoxKeyEncryptionKey>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("kekType"u8);
            writer.WriteStringValue(KekType.ToSerialString());
            if (Optional.IsDefined(ManagedIdentity))
            {
                writer.WritePropertyName("identityProperties"u8);
                writer.WriteObjectValue(ManagedIdentity);
            }
            if (Optional.IsDefined(KekUri))
            {
                writer.WritePropertyName("kekUrl"u8);
                writer.WriteStringValue(KekUri.AbsoluteUri);
            }
            if (Optional.IsDefined(KekVaultResourceId))
            {
                writer.WritePropertyName("kekVaultResourceID"u8);
                writer.WriteStringValue(KekVaultResourceId);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DataBoxKeyEncryptionKey IJsonModel<DataBoxKeyEncryptionKey>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DataBoxKeyEncryptionKey)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataBoxKeyEncryptionKey(document.RootElement, options);
        }

        internal static DataBoxKeyEncryptionKey DeserializeDataBoxKeyEncryptionKey(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DataBoxKeyEncryptionKeyType kekType = default;
            Optional<DataBoxManagedIdentity> identityProperties = default;
            Optional<Uri> kekUrl = default;
            Optional<ResourceIdentifier> kekVaultResourceId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kekType"u8))
                {
                    kekType = property.Value.GetString().ToDataBoxKeyEncryptionKeyType();
                    continue;
                }
                if (property.NameEquals("identityProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identityProperties = DataBoxManagedIdentity.DeserializeDataBoxManagedIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("kekUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kekUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kekVaultResourceID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kekVaultResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DataBoxKeyEncryptionKey(kekType, identityProperties.Value, kekUrl.Value, kekVaultResourceId.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DataBoxKeyEncryptionKey>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DataBoxKeyEncryptionKey)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        DataBoxKeyEncryptionKey IPersistableModel<DataBoxKeyEncryptionKey>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DataBoxKeyEncryptionKey)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeDataBoxKeyEncryptionKey(document.RootElement, options);
        }

        string IPersistableModel<DataBoxKeyEncryptionKey>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
