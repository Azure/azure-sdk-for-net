// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataBox.Models
{
    [PersistableModelProxy(typeof(UnknownJobDetails))]
    public partial class DataBoxBasicJobDetails : IUtf8JsonSerializable, IJsonModel<DataBoxBasicJobDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DataBoxBasicJobDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<DataBoxBasicJobDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataBoxBasicJobDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataBoxBasicJobDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(JobStages))
            {
                writer.WritePropertyName("jobStages"u8);
                writer.WriteStartArray();
                foreach (var item in JobStages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("contactDetails"u8);
            writer.WriteObjectValue(ContactDetails);
            if (Optional.IsDefined(ShippingAddress))
            {
                writer.WritePropertyName("shippingAddress"u8);
                writer.WriteObjectValue(ShippingAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(DeliveryPackage))
            {
                writer.WritePropertyName("deliveryPackage"u8);
                writer.WriteObjectValue(DeliveryPackage);
            }
            if (options.Format != "W" && Optional.IsDefined(ReturnPackage))
            {
                writer.WritePropertyName("returnPackage"u8);
                writer.WriteObjectValue(ReturnPackage);
            }
            if (Optional.IsCollectionDefined(DataImportDetails))
            {
                writer.WritePropertyName("dataImportDetails"u8);
                writer.WriteStartArray();
                foreach (var item in DataImportDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DataExportDetails))
            {
                writer.WritePropertyName("dataExportDetails"u8);
                writer.WriteStartArray();
                foreach (var item in DataExportDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("jobDetailsType"u8);
            writer.WriteStringValue(JobDetailsType.ToSerialString());
            if (Optional.IsDefined(Preferences))
            {
                writer.WritePropertyName("preferences"u8);
                writer.WriteObjectValue(Preferences);
            }
            if (Optional.IsDefined(ReverseShippingDetails))
            {
                writer.WritePropertyName("reverseShippingDetails"u8);
                writer.WriteObjectValue(ReverseShippingDetails);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(CopyLogDetails))
            {
                writer.WritePropertyName("copyLogDetails"u8);
                writer.WriteStartArray();
                foreach (var item in CopyLogDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ReverseShipmentLabelSasKey))
            {
                writer.WritePropertyName("reverseShipmentLabelSasKey"u8);
                writer.WriteStringValue(ReverseShipmentLabelSasKey);
            }
            if (options.Format != "W" && Optional.IsDefined(ChainOfCustodySasKey))
            {
                writer.WritePropertyName("chainOfCustodySasKey"u8);
                writer.WriteStringValue(ChainOfCustodySasKey);
            }
            if (options.Format != "W" && Optional.IsDefined(DeviceErasureDetails))
            {
                writer.WritePropertyName("deviceErasureDetails"u8);
                writer.WriteObjectValue(DeviceErasureDetails);
            }
            if (Optional.IsDefined(KeyEncryptionKey))
            {
                writer.WritePropertyName("keyEncryptionKey"u8);
                writer.WriteObjectValue(KeyEncryptionKey);
            }
            if (Optional.IsDefined(ExpectedDataSizeInTerabytes))
            {
                writer.WritePropertyName("expectedDataSizeInTeraBytes"u8);
                writer.WriteNumberValue(ExpectedDataSizeInTerabytes.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Actions))
            {
                writer.WritePropertyName("actions"u8);
                writer.WriteStartArray();
                foreach (var item in Actions)
                {
                    writer.WriteStringValue(item.ToSerialString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(LastMitigationActionOnJob))
            {
                writer.WritePropertyName("lastMitigationActionOnJob"u8);
                writer.WriteObjectValue(LastMitigationActionOnJob);
            }
            if (options.Format != "W" && Optional.IsDefined(DataCenterAddress))
            {
                writer.WritePropertyName("datacenterAddress"u8);
                writer.WriteObjectValue(DataCenterAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(DataCenterCode))
            {
                writer.WritePropertyName("dataCenterCode"u8);
                writer.WriteStringValue(DataCenterCode.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DataBoxBasicJobDetails IJsonModel<DataBoxBasicJobDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataBoxBasicJobDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataBoxBasicJobDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataBoxBasicJobDetails(document.RootElement, options);
        }

        internal static DataBoxBasicJobDetails DeserializeDataBoxBasicJobDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("jobDetailsType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "DataBox": return DataBoxJobDetails.DeserializeDataBoxJobDetails(element);
                    case "DataBoxCustomerDisk": return DataBoxCustomerDiskJobDetails.DeserializeDataBoxCustomerDiskJobDetails(element);
                    case "DataBoxDisk": return DataBoxDiskJobDetails.DeserializeDataBoxDiskJobDetails(element);
                    case "DataBoxHeavy": return DataBoxHeavyJobDetails.DeserializeDataBoxHeavyJobDetails(element);
                }
            }
            return UnknownJobDetails.DeserializeUnknownJobDetails(element);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsCollectionDefined(JobStages))
            {
                if (JobStages.Any())
                {
                    builder.Append("  jobStages:");
                    builder.AppendLine(" [");
                    foreach (var item in JobStages)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(ContactDetails))
            {
                builder.Append("  contactDetails:");
                AppendChildObject(builder, ContactDetails, options, 2, false);
            }

            if (Optional.IsDefined(ShippingAddress))
            {
                builder.Append("  shippingAddress:");
                AppendChildObject(builder, ShippingAddress, options, 2, false);
            }

            if (Optional.IsDefined(DeliveryPackage))
            {
                builder.Append("  deliveryPackage:");
                AppendChildObject(builder, DeliveryPackage, options, 2, false);
            }

            if (Optional.IsDefined(ReturnPackage))
            {
                builder.Append("  returnPackage:");
                AppendChildObject(builder, ReturnPackage, options, 2, false);
            }

            if (Optional.IsCollectionDefined(DataImportDetails))
            {
                if (DataImportDetails.Any())
                {
                    builder.Append("  dataImportDetails:");
                    builder.AppendLine(" [");
                    foreach (var item in DataImportDetails)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(DataExportDetails))
            {
                if (DataExportDetails.Any())
                {
                    builder.Append("  dataExportDetails:");
                    builder.AppendLine(" [");
                    foreach (var item in DataExportDetails)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(JobDetailsType))
            {
                builder.Append("  jobDetailsType:");
                builder.AppendLine($" '{JobDetailsType.ToSerialString()}'");
            }

            if (Optional.IsDefined(Preferences))
            {
                builder.Append("  preferences:");
                AppendChildObject(builder, Preferences, options, 2, false);
            }

            if (Optional.IsDefined(ReverseShippingDetails))
            {
                builder.Append("  reverseShippingDetails:");
                AppendChildObject(builder, ReverseShippingDetails, options, 2, false);
            }

            if (Optional.IsCollectionDefined(CopyLogDetails))
            {
                if (CopyLogDetails.Any())
                {
                    builder.Append("  copyLogDetails:");
                    builder.AppendLine(" [");
                    foreach (var item in CopyLogDetails)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(ReverseShipmentLabelSasKey))
            {
                builder.Append("  reverseShipmentLabelSasKey:");
                if (ReverseShipmentLabelSasKey.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReverseShipmentLabelSasKey}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReverseShipmentLabelSasKey}'");
                }
            }

            if (Optional.IsDefined(ChainOfCustodySasKey))
            {
                builder.Append("  chainOfCustodySasKey:");
                if (ChainOfCustodySasKey.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ChainOfCustodySasKey}'''");
                }
                else
                {
                    builder.AppendLine($" '{ChainOfCustodySasKey}'");
                }
            }

            if (Optional.IsDefined(DeviceErasureDetails))
            {
                builder.Append("  deviceErasureDetails:");
                AppendChildObject(builder, DeviceErasureDetails, options, 2, false);
            }

            if (Optional.IsDefined(KeyEncryptionKey))
            {
                builder.Append("  keyEncryptionKey:");
                AppendChildObject(builder, KeyEncryptionKey, options, 2, false);
            }

            if (Optional.IsDefined(ExpectedDataSizeInTerabytes))
            {
                builder.Append("  expectedDataSizeInTeraBytes:");
                builder.AppendLine($" {ExpectedDataSizeInTerabytes.Value}");
            }

            if (Optional.IsCollectionDefined(Actions))
            {
                if (Actions.Any())
                {
                    builder.Append("  actions:");
                    builder.AppendLine(" [");
                    foreach (var item in Actions)
                    {
                        builder.AppendLine($"    '{item.ToSerialString()}'");
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(LastMitigationActionOnJob))
            {
                builder.Append("  lastMitigationActionOnJob:");
                AppendChildObject(builder, LastMitigationActionOnJob, options, 2, false);
            }

            if (Optional.IsDefined(DataCenterAddress))
            {
                builder.Append("  datacenterAddress:");
                AppendChildObject(builder, DataCenterAddress, options, 2, false);
            }

            if (Optional.IsDefined(DataCenterCode))
            {
                builder.Append("  dataCenterCode:");
                builder.AppendLine($" '{DataCenterCode.Value.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<DataBoxBasicJobDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataBoxBasicJobDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(DataBoxBasicJobDetails)} does not support '{options.Format}' format.");
            }
        }

        DataBoxBasicJobDetails IPersistableModel<DataBoxBasicJobDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataBoxBasicJobDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDataBoxBasicJobDetails(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(DataBoxBasicJobDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<DataBoxBasicJobDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
