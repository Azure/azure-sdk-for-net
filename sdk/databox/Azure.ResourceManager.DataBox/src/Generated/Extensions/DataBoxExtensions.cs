// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DataBox.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataBox
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DataBox. </summary>
    public static partial class DataBoxExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Lists all the jobs available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JobResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<JobResource> GetJobResourcesAsync(this SubscriptionResource subscriptionResource, string skipToken = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetJobResourcesAsync(skipToken, cancellationToken);
        }

        /// <summary>
        /// Lists all the jobs available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="skipToken"> $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JobResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<JobResource> GetJobResources(this SubscriptionResource subscriptionResource, string skipToken = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetJobResources(skipToken, cancellationToken);
        }

        /// <summary>
        /// [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress
        /// Operation Id: Service_ValidateAddress
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validateAddress"> Shipping address of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validateAddress"/> is null. </exception>
        public static async Task<Response<AddressValidationOutput>> ValidateAddressServiceAsync(this SubscriptionResource subscriptionResource, AzureLocation location, ValidateAddress validateAddress, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validateAddress, nameof(validateAddress));

            return await GetExtensionClient(subscriptionResource).ValidateAddressServiceAsync(location, validateAddress, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress
        /// Operation Id: Service_ValidateAddress
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validateAddress"> Shipping address of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validateAddress"/> is null. </exception>
        public static Response<AddressValidationOutput> ValidateAddressService(this SubscriptionResource subscriptionResource, AzureLocation location, ValidateAddress validateAddress, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validateAddress, nameof(validateAddress));

            return GetExtensionClient(subscriptionResource).ValidateAddressService(location, validateAddress, cancellationToken);
        }

        /// <summary>
        /// This method does all necessary pre-job creation validation under subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs
        /// Operation Id: Service_ValidateInputs
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationRequest"/> is null. </exception>
        public static async Task<Response<ValidationResponse>> ValidateInputsServiceAsync(this SubscriptionResource subscriptionResource, AzureLocation location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validationRequest, nameof(validationRequest));

            return await GetExtensionClient(subscriptionResource).ValidateInputsServiceAsync(location, validationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method does all necessary pre-job creation validation under subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs
        /// Operation Id: Service_ValidateInputs
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationRequest"/> is null. </exception>
        public static Response<ValidationResponse> ValidateInputsService(this SubscriptionResource subscriptionResource, AzureLocation location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validationRequest, nameof(validationRequest));

            return GetExtensionClient(subscriptionResource).ValidateInputsService(location, validationRequest, cancellationToken);
        }

        /// <summary>
        /// This API provides configuration details specific to given region/location at Subscription level.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration
        /// Operation Id: Service_RegionConfiguration
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regionConfigurationRequest"/> is null. </exception>
        public static async Task<Response<RegionConfigurationResponse>> RegionConfigurationServiceAsync(this SubscriptionResource subscriptionResource, AzureLocation location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(regionConfigurationRequest, nameof(regionConfigurationRequest));

            return await GetExtensionClient(subscriptionResource).RegionConfigurationServiceAsync(location, regionConfigurationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This API provides configuration details specific to given region/location at Subscription level.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration
        /// Operation Id: Service_RegionConfiguration
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regionConfigurationRequest"/> is null. </exception>
        public static Response<RegionConfigurationResponse> RegionConfigurationService(this SubscriptionResource subscriptionResource, AzureLocation location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(regionConfigurationRequest, nameof(regionConfigurationRequest));

            return GetExtensionClient(subscriptionResource).RegionConfigurationService(location, regionConfigurationRequest, cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of JobResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of JobResources and their operations over a JobResource. </returns>
        public static JobResourceCollection GetJobResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetJobResources();
        }

        /// <summary>
        /// Gets information about the specified job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}
        /// Operation Id: Jobs_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobName"> The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="expand"> $expand is supported on details parameter for job, which provides details on the job stages. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<JobResource>> GetJobResourceAsync(this ResourceGroupResource resourceGroupResource, string jobName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetJobResources().GetAsync(jobName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets information about the specified job.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}
        /// Operation Id: Jobs_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="jobName"> The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only. </param>
        /// <param name="expand"> $expand is supported on details parameter for job, which provides details on the job stages. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="jobName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="jobName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<JobResource> GetJobResource(this ResourceGroupResource resourceGroupResource, string jobName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetJobResources().Get(jobName, expand, cancellationToken);
        }

        /// <summary>
        /// This method provides the list of available skus for the given subscription, resource group and location.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus
        /// Operation Id: Service_ListAvailableSkusByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="content"> Filters for showing the available skus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> An async collection of <see cref="DataBoxSkuInformation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DataBoxSkuInformation> GetAvailableSkusByResourceGroupServicesAsync(this ResourceGroupResource resourceGroupResource, AzureLocation location, AvailableSkuContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(resourceGroupResource).GetAvailableSkusByResourceGroupServicesAsync(location, content, cancellationToken);
        }

        /// <summary>
        /// This method provides the list of available skus for the given subscription, resource group and location.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus
        /// Operation Id: Service_ListAvailableSkusByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="content"> Filters for showing the available skus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> A collection of <see cref="DataBoxSkuInformation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DataBoxSkuInformation> GetAvailableSkusByResourceGroupServices(this ResourceGroupResource resourceGroupResource, AzureLocation location, AvailableSkuContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(resourceGroupResource).GetAvailableSkusByResourceGroupServices(location, content, cancellationToken);
        }

        /// <summary>
        /// This method does all necessary pre-job creation validation under resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs
        /// Operation Id: Service_ValidateInputsByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationRequest"/> is null. </exception>
        public static async Task<Response<ValidationResponse>> ValidateInputsByResourceGroupServiceAsync(this ResourceGroupResource resourceGroupResource, AzureLocation location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validationRequest, nameof(validationRequest));

            return await GetExtensionClient(resourceGroupResource).ValidateInputsByResourceGroupServiceAsync(location, validationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This method does all necessary pre-job creation validation under resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs
        /// Operation Id: Service_ValidateInputsByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationRequest"/> is null. </exception>
        public static Response<ValidationResponse> ValidateInputsByResourceGroupService(this ResourceGroupResource resourceGroupResource, AzureLocation location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(validationRequest, nameof(validationRequest));

            return GetExtensionClient(resourceGroupResource).ValidateInputsByResourceGroupService(location, validationRequest, cancellationToken);
        }

        /// <summary>
        /// This API provides configuration details specific to given region/location at Resource group level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration
        /// Operation Id: Service_RegionConfigurationByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region at resource group level. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regionConfigurationRequest"/> is null. </exception>
        public static async Task<Response<RegionConfigurationResponse>> RegionConfigurationByResourceGroupServiceAsync(this ResourceGroupResource resourceGroupResource, AzureLocation location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(regionConfigurationRequest, nameof(regionConfigurationRequest));

            return await GetExtensionClient(resourceGroupResource).RegionConfigurationByResourceGroupServiceAsync(location, regionConfigurationRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// This API provides configuration details specific to given region/location at Resource group level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration
        /// Operation Id: Service_RegionConfigurationByResourceGroup
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region at resource group level. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="regionConfigurationRequest"/> is null. </exception>
        public static Response<RegionConfigurationResponse> RegionConfigurationByResourceGroupService(this ResourceGroupResource resourceGroupResource, AzureLocation location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(regionConfigurationRequest, nameof(regionConfigurationRequest));

            return GetExtensionClient(resourceGroupResource).RegionConfigurationByResourceGroupService(location, regionConfigurationRequest, cancellationToken);
        }

        #region JobResource
        /// <summary>
        /// Gets an object representing a <see cref="JobResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JobResource.CreateResourceIdentifier" /> to create a <see cref="JobResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JobResource" /> object. </returns>
        public static JobResource GetJobResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JobResource.ValidateResourceId(id);
                return new JobResource(client, id);
            }
            );
        }
        #endregion
    }
}
