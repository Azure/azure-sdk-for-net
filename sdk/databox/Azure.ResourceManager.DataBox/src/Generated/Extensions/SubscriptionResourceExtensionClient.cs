// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.DataBox.Models;

namespace Azure.ResourceManager.DataBox
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _jobResourceJobsClientDiagnostics;
        private JobsRestOperations _jobResourceJobsRestClient;
        private ClientDiagnostics _serviceClientDiagnostics;
        private ServiceRestOperations _serviceRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics JobResourceJobsClientDiagnostics => _jobResourceJobsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataBox", JobResource.ResourceType.Namespace, Diagnostics);
        private JobsRestOperations JobResourceJobsRestClient => _jobResourceJobsRestClient ??= new JobsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(JobResource.ResourceType));
        private ClientDiagnostics ServiceClientDiagnostics => _serviceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataBox", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ServiceRestOperations ServiceRestClient => _serviceRestClient ??= new ServiceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists all the jobs available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="skipToken"> $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="JobResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<JobResource> GetJobResourcesAsync(string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<JobResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JobResourceJobsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJobResources");
                scope.Start();
                try
                {
                    var response = await JobResourceJobsRestClient.ListAsync(Id.SubscriptionId, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<JobResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JobResourceJobsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJobResources");
                scope.Start();
                try
                {
                    var response = await JobResourceJobsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the jobs available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs
        /// Operation Id: Jobs_List
        /// </summary>
        /// <param name="skipToken"> $skipToken is supported on Get list of jobs, which provides the next page in the list of jobs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="JobResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<JobResource> GetJobResources(string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<JobResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = JobResourceJobsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJobResources");
                scope.Start();
                try
                {
                    var response = JobResourceJobsRestClient.List(Id.SubscriptionId, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<JobResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = JobResourceJobsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetJobResources");
                scope.Start();
                try
                {
                    var response = JobResourceJobsRestClient.ListNextPage(nextLink, Id.SubscriptionId, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new JobResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress
        /// Operation Id: Service_ValidateAddress
        /// </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validateAddress"> Shipping address of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AddressValidationOutput>> ValidateAddressServiceAsync(AzureLocation location, ValidateAddress validateAddress, CancellationToken cancellationToken = default)
        {
            using var scope = ServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ValidateAddressService");
            scope.Start();
            try
            {
                var response = await ServiceRestClient.ValidateAddressAsync(Id.SubscriptionId, location, validateAddress, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress
        /// Operation Id: Service_ValidateAddress
        /// </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validateAddress"> Shipping address of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AddressValidationOutput> ValidateAddressService(AzureLocation location, ValidateAddress validateAddress, CancellationToken cancellationToken = default)
        {
            using var scope = ServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ValidateAddressService");
            scope.Start();
            try
            {
                var response = ServiceRestClient.ValidateAddress(Id.SubscriptionId, location, validateAddress, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method does all necessary pre-job creation validation under subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs
        /// Operation Id: Service_ValidateInputs
        /// </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ValidationResponse>> ValidateInputsServiceAsync(AzureLocation location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = ServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ValidateInputsService");
            scope.Start();
            try
            {
                var response = await ServiceRestClient.ValidateInputsAsync(Id.SubscriptionId, location, validationRequest, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This method does all necessary pre-job creation validation under subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs
        /// Operation Id: Service_ValidateInputs
        /// </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ValidationResponse> ValidateInputsService(AzureLocation location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = ServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.ValidateInputsService");
            scope.Start();
            try
            {
                var response = ServiceRestClient.ValidateInputs(Id.SubscriptionId, location, validationRequest, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API provides configuration details specific to given region/location at Subscription level.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration
        /// Operation Id: Service_RegionConfiguration
        /// </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RegionConfigurationResponse>> RegionConfigurationServiceAsync(AzureLocation location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = ServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.RegionConfigurationService");
            scope.Start();
            try
            {
                var response = await ServiceRestClient.RegionConfigurationAsync(Id.SubscriptionId, location, regionConfigurationRequest, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API provides configuration details specific to given region/location at Subscription level.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration
        /// Operation Id: Service_RegionConfiguration
        /// </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RegionConfigurationResponse> RegionConfigurationService(AzureLocation location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = ServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.RegionConfigurationService");
            scope.Start();
            try
            {
                var response = ServiceRestClient.RegionConfiguration(Id.SubscriptionId, location, regionConfigurationRequest, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
