// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceOperations.
    /// </summary>
    public static partial class ServiceOperationsExtensions
    {
            /// <summary>
            /// This method provides the list of available skus for the given subscription,
            /// resource group and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='availableSkuRequest'>
            /// Filters for showing the available skus.
            /// </param>
            public static IPage<SkuInformation> ListAvailableSkusByResourceGroup(this IServiceOperations operations, string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest)
            {
                return operations.ListAvailableSkusByResourceGroupAsync(resourceGroupName, location, availableSkuRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of available skus for the given subscription,
            /// resource group and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='availableSkuRequest'>
            /// Filters for showing the available skus.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInformation>> ListAvailableSkusByResourceGroupAsync(this IServiceOperations operations, string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAvailableSkusByResourceGroupWithHttpMessagesAsync(resourceGroupName, location, availableSkuRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// [DEPRECATED NOTICE: This operation will soon be removed]. This method
            /// validates the customer shipping address and provide alternate addresses if
            /// any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='validateAddress'>
            /// Shipping address of the customer.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static AddressValidationOutput ValidateAddressMethod(this IServiceOperations operations, string location, ValidateAddress validateAddress)
            {
                return operations.ValidateAddressMethodAsync(location, validateAddress).GetAwaiter().GetResult();
            }

            /// <summary>
            /// [DEPRECATED NOTICE: This operation will soon be removed]. This method
            /// validates the customer shipping address and provide alternate addresses if
            /// any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='validateAddress'>
            /// Shipping address of the customer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<AddressValidationOutput> ValidateAddressMethodAsync(this IServiceOperations operations, string location, ValidateAddress validateAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateAddressMethodWithHttpMessagesAsync(location, validateAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method does all necessary pre-job creation validation under resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='validationRequest'>
            /// Inputs of the customer.
            /// </param>
            public static ValidationResponse ValidateInputsByResourceGroup(this IServiceOperations operations, string resourceGroupName, string location, ValidationRequest validationRequest)
            {
                return operations.ValidateInputsByResourceGroupAsync(resourceGroupName, location, validationRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method does all necessary pre-job creation validation under resource
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='validationRequest'>
            /// Inputs of the customer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationResponse> ValidateInputsByResourceGroupAsync(this IServiceOperations operations, string resourceGroupName, string location, ValidationRequest validationRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateInputsByResourceGroupWithHttpMessagesAsync(resourceGroupName, location, validationRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method does all necessary pre-job creation validation under
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='validationRequest'>
            /// Inputs of the customer.
            /// </param>
            public static ValidationResponse ValidateInputs(this IServiceOperations operations, string location, ValidationRequest validationRequest)
            {
                return operations.ValidateInputsAsync(location, validationRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method does all necessary pre-job creation validation under
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='validationRequest'>
            /// Inputs of the customer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationResponse> ValidateInputsAsync(this IServiceOperations operations, string location, ValidationRequest validationRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateInputsWithHttpMessagesAsync(location, validationRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This API provides configuration details specific to given region/location
            /// at Subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='scheduleAvailabilityRequest'>
            /// Request body to get the availability for scheduling orders.
            /// </param>
            /// <param name='transportAvailabilityRequest'>
            /// Request body to get the transport availability for given sku.
            /// </param>
            public static RegionConfigurationResponse RegionConfiguration(this IServiceOperations operations, string location, ScheduleAvailabilityRequest scheduleAvailabilityRequest = default(ScheduleAvailabilityRequest), TransportAvailabilityRequest transportAvailabilityRequest = default(TransportAvailabilityRequest))
            {
                return operations.RegionConfigurationAsync(location, scheduleAvailabilityRequest, transportAvailabilityRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This API provides configuration details specific to given region/location
            /// at Subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='scheduleAvailabilityRequest'>
            /// Request body to get the availability for scheduling orders.
            /// </param>
            /// <param name='transportAvailabilityRequest'>
            /// Request body to get the transport availability for given sku.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegionConfigurationResponse> RegionConfigurationAsync(this IServiceOperations operations, string location, ScheduleAvailabilityRequest scheduleAvailabilityRequest = default(ScheduleAvailabilityRequest), TransportAvailabilityRequest transportAvailabilityRequest = default(TransportAvailabilityRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegionConfigurationWithHttpMessagesAsync(location, scheduleAvailabilityRequest, transportAvailabilityRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This API provides configuration details specific to given region/location
            /// at Resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='scheduleAvailabilityRequest'>
            /// Request body to get the availability for scheduling orders.
            /// </param>
            /// <param name='transportAvailabilityRequest'>
            /// Request body to get the transport availability for given sku.
            /// </param>
            public static RegionConfigurationResponse RegionConfigurationByResourceGroup(this IServiceOperations operations, string resourceGroupName, string location, ScheduleAvailabilityRequest scheduleAvailabilityRequest = default(ScheduleAvailabilityRequest), TransportAvailabilityRequest transportAvailabilityRequest = default(TransportAvailabilityRequest))
            {
                return operations.RegionConfigurationByResourceGroupAsync(resourceGroupName, location, scheduleAvailabilityRequest, transportAvailabilityRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This API provides configuration details specific to given region/location
            /// at Resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name
            /// </param>
            /// <param name='location'>
            /// The location of the resource
            /// </param>
            /// <param name='scheduleAvailabilityRequest'>
            /// Request body to get the availability for scheduling orders.
            /// </param>
            /// <param name='transportAvailabilityRequest'>
            /// Request body to get the transport availability for given sku.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegionConfigurationResponse> RegionConfigurationByResourceGroupAsync(this IServiceOperations operations, string resourceGroupName, string location, ScheduleAvailabilityRequest scheduleAvailabilityRequest = default(ScheduleAvailabilityRequest), TransportAvailabilityRequest transportAvailabilityRequest = default(TransportAvailabilityRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegionConfigurationByResourceGroupWithHttpMessagesAsync(resourceGroupName, location, scheduleAvailabilityRequest, transportAvailabilityRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This method provides the list of available skus for the given subscription,
            /// resource group and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuInformation> ListAvailableSkusByResourceGroupNext(this IServiceOperations operations, string nextPageLink)
            {
                return operations.ListAvailableSkusByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This method provides the list of available skus for the given subscription,
            /// resource group and location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInformation>> ListAvailableSkusByResourceGroupNextAsync(this IServiceOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAvailableSkusByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
