// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Request body to get the availability for scheduling orders.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ScheduleAvailabilityRequest")]
    public partial class ScheduleAvailabilityRequest
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleAvailabilityRequest
        /// class.
        /// </summary>
        public ScheduleAvailabilityRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduleAvailabilityRequest
        /// class.
        /// </summary>
        /// <param name="storageLocation">Location for data transfer. For
        /// locations check:
        /// https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01</param>
        /// <param name="country">Country in which storage location should be
        /// supported.</param>
        public ScheduleAvailabilityRequest(string storageLocation, string country = default(string))
        {
            StorageLocation = storageLocation;
            Country = country;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets location for data transfer. For locations check:
        /// https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01
        /// </summary>
        [JsonProperty(PropertyName = "storageLocation")]
        public string StorageLocation { get; set; }

        /// <summary>
        /// Gets or sets country in which storage location should be supported.
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageLocation");
            }
        }
    }
}
