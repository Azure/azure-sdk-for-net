// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Copy progress.
    /// </summary>
    public partial class CopyProgress
    {
        /// <summary>
        /// Initializes a new instance of the CopyProgress class.
        /// </summary>
        public CopyProgress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CopyProgress class.
        /// </summary>
        /// <param name="storageAccountName">Name of the storage account. This
        /// will be empty for data account types other than storage
        /// account.</param>
        /// <param name="transferType">Transfer type of data. Possible values
        /// include: 'ImportToAzure', 'ExportFromAzure'</param>
        /// <param name="dataAccountType">Data Account Type. Possible values
        /// include: 'StorageAccount', 'ManagedDisk'</param>
        /// <param name="accountId">Id of the account where the data needs to
        /// be uploaded.</param>
        /// <param name="bytesProcessed">To indicate bytes transferred.</param>
        /// <param name="totalBytesToProcess">Total amount of data to be
        /// processed by the job.</param>
        /// <param name="filesProcessed">Number of files processed</param>
        /// <param name="totalFilesToProcess">Total files to process</param>
        /// <param name="invalidFilesProcessed">Number of files not adhering to
        /// azure naming conventions which were processed by automatic
        /// renaming</param>
        /// <param name="invalidFileBytesUploaded">Total amount of data not
        /// adhering to azure naming conventions which were processed by
        /// automatic renaming</param>
        /// <param name="renamedContainerCount">Number of folders not adhering
        /// to azure naming conventions which were processed by automatic
        /// renaming</param>
        /// <param name="filesErroredOut">Number of files which could not be
        /// copied</param>
        /// <param name="directoriesErroredOut">To indicate directories errored
        /// out in the job.</param>
        /// <param name="invalidDirectoriesProcessed">To indicate directories
        /// renamed</param>
        /// <param name="isEnumerationInProgress">To indicate if enumeration of
        /// data is in progress.
        /// Until this is true, the TotalBytesToProcess may not be
        /// valid.</param>
        public CopyProgress(string storageAccountName = default(string), TransferType? transferType = default(TransferType?), DataAccountType? dataAccountType = default(DataAccountType?), string accountId = default(string), long? bytesProcessed = default(long?), long? totalBytesToProcess = default(long?), long? filesProcessed = default(long?), long? totalFilesToProcess = default(long?), long? invalidFilesProcessed = default(long?), long? invalidFileBytesUploaded = default(long?), long? renamedContainerCount = default(long?), long? filesErroredOut = default(long?), long? directoriesErroredOut = default(long?), long? invalidDirectoriesProcessed = default(long?), bool? isEnumerationInProgress = default(bool?))
        {
            StorageAccountName = storageAccountName;
            TransferType = transferType;
            DataAccountType = dataAccountType;
            AccountId = accountId;
            BytesProcessed = bytesProcessed;
            TotalBytesToProcess = totalBytesToProcess;
            FilesProcessed = filesProcessed;
            TotalFilesToProcess = totalFilesToProcess;
            InvalidFilesProcessed = invalidFilesProcessed;
            InvalidFileBytesUploaded = invalidFileBytesUploaded;
            RenamedContainerCount = renamedContainerCount;
            FilesErroredOut = filesErroredOut;
            DirectoriesErroredOut = directoriesErroredOut;
            InvalidDirectoriesProcessed = invalidDirectoriesProcessed;
            IsEnumerationInProgress = isEnumerationInProgress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the storage account. This will be empty for data
        /// account types other than storage account.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountName")]
        public string StorageAccountName { get; private set; }

        /// <summary>
        /// Gets transfer type of data. Possible values include:
        /// 'ImportToAzure', 'ExportFromAzure'
        /// </summary>
        [JsonProperty(PropertyName = "transferType")]
        public TransferType? TransferType { get; private set; }

        /// <summary>
        /// Gets data Account Type. Possible values include: 'StorageAccount',
        /// 'ManagedDisk'
        /// </summary>
        [JsonProperty(PropertyName = "dataAccountType")]
        public DataAccountType? DataAccountType { get; private set; }

        /// <summary>
        /// Gets id of the account where the data needs to be uploaded.
        /// </summary>
        [JsonProperty(PropertyName = "accountId")]
        public string AccountId { get; private set; }

        /// <summary>
        /// Gets to indicate bytes transferred.
        /// </summary>
        [JsonProperty(PropertyName = "bytesProcessed")]
        public long? BytesProcessed { get; private set; }

        /// <summary>
        /// Gets total amount of data to be processed by the job.
        /// </summary>
        [JsonProperty(PropertyName = "totalBytesToProcess")]
        public long? TotalBytesToProcess { get; private set; }

        /// <summary>
        /// Gets number of files processed
        /// </summary>
        [JsonProperty(PropertyName = "filesProcessed")]
        public long? FilesProcessed { get; private set; }

        /// <summary>
        /// Gets total files to process
        /// </summary>
        [JsonProperty(PropertyName = "totalFilesToProcess")]
        public long? TotalFilesToProcess { get; private set; }

        /// <summary>
        /// Gets number of files not adhering to azure naming conventions which
        /// were processed by automatic renaming
        /// </summary>
        [JsonProperty(PropertyName = "invalidFilesProcessed")]
        public long? InvalidFilesProcessed { get; private set; }

        /// <summary>
        /// Gets total amount of data not adhering to azure naming conventions
        /// which were processed by automatic renaming
        /// </summary>
        [JsonProperty(PropertyName = "invalidFileBytesUploaded")]
        public long? InvalidFileBytesUploaded { get; private set; }

        /// <summary>
        /// Gets number of folders not adhering to azure naming conventions
        /// which were processed by automatic renaming
        /// </summary>
        [JsonProperty(PropertyName = "renamedContainerCount")]
        public long? RenamedContainerCount { get; private set; }

        /// <summary>
        /// Gets number of files which could not be copied
        /// </summary>
        [JsonProperty(PropertyName = "filesErroredOut")]
        public long? FilesErroredOut { get; private set; }

        /// <summary>
        /// Gets to indicate directories errored out in the job.
        /// </summary>
        [JsonProperty(PropertyName = "directoriesErroredOut")]
        public long? DirectoriesErroredOut { get; private set; }

        /// <summary>
        /// Gets to indicate directories renamed
        /// </summary>
        [JsonProperty(PropertyName = "invalidDirectoriesProcessed")]
        public long? InvalidDirectoriesProcessed { get; private set; }

        /// <summary>
        /// Gets to indicate if enumeration of data is in progress.
        /// Until this is true, the TotalBytesToProcess may not be valid.
        /// </summary>
        [JsonProperty(PropertyName = "isEnumerationInProgress")]
        public bool? IsEnumerationInProgress { get; private set; }

    }
}
