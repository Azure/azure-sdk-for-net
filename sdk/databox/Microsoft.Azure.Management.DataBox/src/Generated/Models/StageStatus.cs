// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for StageStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StageStatus
    {
        /// <summary>
        /// No status available yet.
        /// </summary>
        [EnumMember(Value = "None")]
        None,
        /// <summary>
        /// Stage is in progress.
        /// </summary>
        [EnumMember(Value = "InProgress")]
        InProgress,
        /// <summary>
        /// Stage has succeeded.
        /// </summary>
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        /// <summary>
        /// Stage has failed.
        /// </summary>
        [EnumMember(Value = "Failed")]
        Failed,
        /// <summary>
        /// Stage has been cancelled.
        /// </summary>
        [EnumMember(Value = "Cancelled")]
        Cancelled,
        /// <summary>
        /// Stage is cancelling.
        /// </summary>
        [EnumMember(Value = "Cancelling")]
        Cancelling,
        /// <summary>
        /// Stage has succeeded with errors.
        /// </summary>
        [EnumMember(Value = "SucceededWithErrors")]
        SucceededWithErrors,
        /// <summary>
        /// Stage is stuck until customer takes some action.
        /// </summary>
        [EnumMember(Value = "WaitingForCustomerAction")]
        WaitingForCustomerAction,
        /// <summary>
        /// Stage has succeeded with warnings.
        /// </summary>
        [EnumMember(Value = "SucceededWithWarnings")]
        SucceededWithWarnings,
        /// <summary>
        /// Stage is waiting for customer action for kek action items.
        /// </summary>
        [EnumMember(Value = "WaitingForCustomerActionForKek")]
        WaitingForCustomerActionForKek,
        /// <summary>
        /// Stage is waiting for customer action for clean up.
        /// </summary>
        [EnumMember(Value = "WaitingForCustomerActionForCleanUp")]
        WaitingForCustomerActionForCleanUp,
        /// <summary>
        /// Stage has performed customer action for clean up.
        /// </summary>
        [EnumMember(Value = "CustomerActionPerformedForCleanUp")]
        CustomerActionPerformedForCleanUp
    }
    internal static class StageStatusEnumExtension
    {
        internal static string ToSerializedValue(this StageStatus? value)
        {
            return value == null ? null : ((StageStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this StageStatus value)
        {
            switch( value )
            {
                case StageStatus.None:
                    return "None";
                case StageStatus.InProgress:
                    return "InProgress";
                case StageStatus.Succeeded:
                    return "Succeeded";
                case StageStatus.Failed:
                    return "Failed";
                case StageStatus.Cancelled:
                    return "Cancelled";
                case StageStatus.Cancelling:
                    return "Cancelling";
                case StageStatus.SucceededWithErrors:
                    return "SucceededWithErrors";
                case StageStatus.WaitingForCustomerAction:
                    return "WaitingForCustomerAction";
                case StageStatus.SucceededWithWarnings:
                    return "SucceededWithWarnings";
                case StageStatus.WaitingForCustomerActionForKek:
                    return "WaitingForCustomerActionForKek";
                case StageStatus.WaitingForCustomerActionForCleanUp:
                    return "WaitingForCustomerActionForCleanUp";
                case StageStatus.CustomerActionPerformedForCleanUp:
                    return "CustomerActionPerformedForCleanUp";
            }
            return null;
        }

        internal static StageStatus? ParseStageStatus(this string value)
        {
            switch( value )
            {
                case "None":
                    return StageStatus.None;
                case "InProgress":
                    return StageStatus.InProgress;
                case "Succeeded":
                    return StageStatus.Succeeded;
                case "Failed":
                    return StageStatus.Failed;
                case "Cancelled":
                    return StageStatus.Cancelled;
                case "Cancelling":
                    return StageStatus.Cancelling;
                case "SucceededWithErrors":
                    return StageStatus.SucceededWithErrors;
                case "WaitingForCustomerAction":
                    return StageStatus.WaitingForCustomerAction;
                case "SucceededWithWarnings":
                    return StageStatus.SucceededWithWarnings;
                case "WaitingForCustomerActionForKek":
                    return StageStatus.WaitingForCustomerActionForKek;
                case "WaitingForCustomerActionForCleanUp":
                    return StageStatus.WaitingForCustomerActionForCleanUp;
                case "CustomerActionPerformedForCleanUp":
                    return StageStatus.CustomerActionPerformedForCleanUp;
            }
            return null;
        }
    }
}
