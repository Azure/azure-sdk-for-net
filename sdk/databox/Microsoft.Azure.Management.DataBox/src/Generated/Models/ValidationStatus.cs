// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ValidationStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ValidationStatus
    {
        /// <summary>
        /// Validation is successful
        /// </summary>
        [EnumMember(Value = "Valid")]
        Valid,
        /// <summary>
        /// Validation is not successful
        /// </summary>
        [EnumMember(Value = "Invalid")]
        Invalid,
        /// <summary>
        /// Validation is skipped
        /// </summary>
        [EnumMember(Value = "Skipped")]
        Skipped
    }
    internal static class ValidationStatusEnumExtension
    {
        internal static string ToSerializedValue(this ValidationStatus? value)
        {
            return value == null ? null : ((ValidationStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ValidationStatus value)
        {
            switch( value )
            {
                case ValidationStatus.Valid:
                    return "Valid";
                case ValidationStatus.Invalid:
                    return "Invalid";
                case ValidationStatus.Skipped:
                    return "Skipped";
            }
            return null;
        }

        internal static ValidationStatus? ParseValidationStatus(this string value)
        {
            switch( value )
            {
                case "Valid":
                    return ValidationStatus.Valid;
                case "Invalid":
                    return ValidationStatus.Invalid;
                case "Skipped":
                    return ValidationStatus.Skipped;
            }
            return null;
        }
    }
}
