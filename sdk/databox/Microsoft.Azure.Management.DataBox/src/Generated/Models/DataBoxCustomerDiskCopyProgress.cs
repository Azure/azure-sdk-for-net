// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// DataBox CustomerDisk Copy Progress
    /// </summary>
    public partial class DataBoxCustomerDiskCopyProgress : CopyProgress
    {
        /// <summary>
        /// Initializes a new instance of the DataBoxCustomerDiskCopyProgress
        /// class.
        /// </summary>
        public DataBoxCustomerDiskCopyProgress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataBoxCustomerDiskCopyProgress
        /// class.
        /// </summary>
        /// <param name="storageAccountName">Name of the storage account. This
        /// will be empty for data account types other than storage
        /// account.</param>
        /// <param name="transferType">Transfer type of data. Possible values
        /// include: 'ImportToAzure', 'ExportFromAzure'</param>
        /// <param name="dataAccountType">Data Account Type. Possible values
        /// include: 'StorageAccount', 'ManagedDisk'</param>
        /// <param name="accountId">Id of the account where the data needs to
        /// be uploaded.</param>
        /// <param name="bytesProcessed">To indicate bytes transferred.</param>
        /// <param name="totalBytesToProcess">Total amount of data to be
        /// processed by the job.</param>
        /// <param name="filesProcessed">Number of files processed</param>
        /// <param name="totalFilesToProcess">Total files to process</param>
        /// <param name="invalidFilesProcessed">Number of files not adhering to
        /// azure naming conventions which were processed by automatic
        /// renaming</param>
        /// <param name="invalidFileBytesUploaded">Total amount of data not
        /// adhering to azure naming conventions which were processed by
        /// automatic renaming</param>
        /// <param name="renamedContainerCount">Number of folders not adhering
        /// to azure naming conventions which were processed by automatic
        /// renaming</param>
        /// <param name="filesErroredOut">Number of files which could not be
        /// copied</param>
        /// <param name="directoriesErroredOut">To indicate directories errored
        /// out in the job.</param>
        /// <param name="invalidDirectoriesProcessed">To indicate directories
        /// renamed</param>
        /// <param name="isEnumerationInProgress">To indicate if enumeration of
        /// data is in progress.
        /// Until this is true, the TotalBytesToProcess may not be
        /// valid.</param>
        /// <param name="serialNumber">Disk Serial Number.</param>
        /// <param name="copyStatus">The Status of the copy. Possible values
        /// include: 'NotStarted', 'InProgress', 'Completed',
        /// 'CompletedWithErrors', 'Failed', 'NotReturned', 'HardwareError',
        /// 'DeviceFormatted', 'DeviceMetadataModified',
        /// 'StorageAccountNotAccessible', 'UnsupportedData',
        /// 'DriveNotReceived', 'UnsupportedDrive', 'OtherServiceError',
        /// 'OtherUserError', 'DriveNotDetected', 'DriveCorrupted',
        /// 'MetadataFilesModifiedOrRemoved'</param>
        public DataBoxCustomerDiskCopyProgress(string storageAccountName = default(string), TransferType? transferType = default(TransferType?), DataAccountType? dataAccountType = default(DataAccountType?), string accountId = default(string), long? bytesProcessed = default(long?), long? totalBytesToProcess = default(long?), long? filesProcessed = default(long?), long? totalFilesToProcess = default(long?), long? invalidFilesProcessed = default(long?), long? invalidFileBytesUploaded = default(long?), long? renamedContainerCount = default(long?), long? filesErroredOut = default(long?), long? directoriesErroredOut = default(long?), long? invalidDirectoriesProcessed = default(long?), bool? isEnumerationInProgress = default(bool?), string serialNumber = default(string), string copyStatus = default(string))
            : base(storageAccountName, transferType, dataAccountType, accountId, bytesProcessed, totalBytesToProcess, filesProcessed, totalFilesToProcess, invalidFilesProcessed, invalidFileBytesUploaded, renamedContainerCount, filesErroredOut, directoriesErroredOut, invalidDirectoriesProcessed, isEnumerationInProgress)
        {
            SerialNumber = serialNumber;
            CopyStatus = copyStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets disk Serial Number.
        /// </summary>
        [JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Gets the Status of the copy. Possible values include: 'NotStarted',
        /// 'InProgress', 'Completed', 'CompletedWithErrors', 'Failed',
        /// 'NotReturned', 'HardwareError', 'DeviceFormatted',
        /// 'DeviceMetadataModified', 'StorageAccountNotAccessible',
        /// 'UnsupportedData', 'DriveNotReceived', 'UnsupportedDrive',
        /// 'OtherServiceError', 'OtherUserError', 'DriveNotDetected',
        /// 'DriveCorrupted', 'MetadataFilesModifiedOrRemoved'
        /// </summary>
        [JsonProperty(PropertyName = "copyStatus")]
        public string CopyStatus { get; private set; }

    }
}
