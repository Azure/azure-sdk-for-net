// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CopyStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CopyStatus
    {
        /// <summary>
        /// Data copy hasnt started yet.
        /// </summary>
        [EnumMember(Value = "NotStarted")]
        NotStarted,
        /// <summary>
        /// Data copy is in progress.
        /// </summary>
        [EnumMember(Value = "InProgress")]
        InProgress,
        /// <summary>
        /// Data copy completed.
        /// </summary>
        [EnumMember(Value = "Completed")]
        Completed,
        /// <summary>
        /// Data copy completed with errors.
        /// </summary>
        [EnumMember(Value = "CompletedWithErrors")]
        CompletedWithErrors,
        /// <summary>
        /// Data copy failed. No data was copied.
        /// </summary>
        [EnumMember(Value = "Failed")]
        Failed,
        /// <summary>
        /// No copy triggered as device was not returned.
        /// </summary>
        [EnumMember(Value = "NotReturned")]
        NotReturned
    }
    internal static class CopyStatusEnumExtension
    {
        internal static string ToSerializedValue(this CopyStatus? value)
        {
            return value == null ? null : ((CopyStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CopyStatus value)
        {
            switch( value )
            {
                case CopyStatus.NotStarted:
                    return "NotStarted";
                case CopyStatus.InProgress:
                    return "InProgress";
                case CopyStatus.Completed:
                    return "Completed";
                case CopyStatus.CompletedWithErrors:
                    return "CompletedWithErrors";
                case CopyStatus.Failed:
                    return "Failed";
                case CopyStatus.NotReturned:
                    return "NotReturned";
            }
            return null;
        }

        internal static CopyStatus? ParseCopyStatus(this string value)
        {
            switch( value )
            {
                case "NotStarted":
                    return CopyStatus.NotStarted;
                case "InProgress":
                    return CopyStatus.InProgress;
                case "Completed":
                    return CopyStatus.Completed;
                case "CompletedWithErrors":
                    return CopyStatus.CompletedWithErrors;
                case "Failed":
                    return CopyStatus.Failed;
                case "NotReturned":
                    return CopyStatus.NotReturned;
            }
            return null;
        }
    }
}
