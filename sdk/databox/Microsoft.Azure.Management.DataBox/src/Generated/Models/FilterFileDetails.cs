// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Details of the filter files to be used for data transfer.
    /// </summary>
    public partial class FilterFileDetails
    {
        /// <summary>
        /// Initializes a new instance of the FilterFileDetails class.
        /// </summary>
        public FilterFileDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FilterFileDetails class.
        /// </summary>
        /// <param name="filterFileType">Type of the filter file. Possible
        /// values include: 'AzureBlob', 'AzureFile'</param>
        /// <param name="filterFilePath">Path of the file that contains the
        /// details of all items to transfer.</param>
        public FilterFileDetails(FilterFileType filterFileType, string filterFilePath)
        {
            FilterFileType = filterFileType;
            FilterFilePath = filterFilePath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of the filter file. Possible values include:
        /// 'AzureBlob', 'AzureFile'
        /// </summary>
        [JsonProperty(PropertyName = "filterFileType")]
        public FilterFileType FilterFileType { get; set; }

        /// <summary>
        /// Gets or sets path of the file that contains the details of all
        /// items to transfer.
        /// </summary>
        [JsonProperty(PropertyName = "filterFilePath")]
        public string FilterFilePath { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FilterFilePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FilterFilePath");
            }
        }
    }
}
