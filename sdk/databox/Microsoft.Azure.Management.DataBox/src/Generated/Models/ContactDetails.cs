// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataBox.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Contact Details.
    /// </summary>
    public partial class ContactDetails
    {
        /// <summary>
        /// Initializes a new instance of the ContactDetails class.
        /// </summary>
        public ContactDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContactDetails class.
        /// </summary>
        /// <param name="contactName">Contact name of the person.</param>
        /// <param name="phone">Phone number of the contact person.</param>
        /// <param name="emailList">List of Email-ids to be notified about job
        /// progress.</param>
        /// <param name="phoneExtension">Phone extension number of the contact
        /// person.</param>
        /// <param name="mobile">Mobile number of the contact person.</param>
        /// <param name="notificationPreference">Notification preference for a
        /// job stage.</param>
        public ContactDetails(string contactName, string phone, IList<string> emailList, string phoneExtension = default(string), string mobile = default(string), IList<NotificationPreference> notificationPreference = default(IList<NotificationPreference>))
        {
            ContactName = contactName;
            Phone = phone;
            PhoneExtension = phoneExtension;
            Mobile = mobile;
            EmailList = emailList;
            NotificationPreference = notificationPreference;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets contact name of the person.
        /// </summary>
        [JsonProperty(PropertyName = "contactName")]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or sets phone number of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets phone extension number of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "phoneExtension")]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Gets or sets mobile number of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "mobile")]
        public string Mobile { get; set; }

        /// <summary>
        /// Gets or sets list of Email-ids to be notified about job progress.
        /// </summary>
        [JsonProperty(PropertyName = "emailList")]
        public IList<string> EmailList { get; set; }

        /// <summary>
        /// Gets or sets notification preference for a job stage.
        /// </summary>
        [JsonProperty(PropertyName = "notificationPreference")]
        public IList<NotificationPreference> NotificationPreference { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ContactName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContactName");
            }
            if (Phone == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Phone");
            }
            if (EmailList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EmailList");
            }
            if (NotificationPreference != null)
            {
                foreach (var element in NotificationPreference)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
