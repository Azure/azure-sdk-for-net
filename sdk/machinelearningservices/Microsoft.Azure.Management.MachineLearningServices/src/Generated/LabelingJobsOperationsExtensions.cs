// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LabelingJobsOperations.
    /// </summary>
    public static partial class LabelingJobsOperationsExtensions
    {
            /// <summary>
            /// Lists labeling jobs in the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='skip'>
            /// Continuation token for pagination.
            /// </param>
            /// <param name='count'>
            /// Number of labeling jobs to return.
            /// </param>
            public static IPage<LabelingJobResource> List(this ILabelingJobsOperations operations, string resourceGroupName, string workspaceName, string skip = default(string), int? count = default(int?))
            {
                return operations.ListAsync(resourceGroupName, workspaceName, skip, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists labeling jobs in the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='skip'>
            /// Continuation token for pagination.
            /// </param>
            /// <param name='count'>
            /// Number of labeling jobs to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LabelingJobResource>> ListAsync(this ILabelingJobsOperations operations, string resourceGroupName, string workspaceName, string skip = default(string), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, skip, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a labeling job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            public static void Delete(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName)
            {
                operations.DeleteAsync(id, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a labeling job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a labeling job by name/id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='includeJobInstructions'>
            /// Boolean value to indicate whether to include JobInstructions in response.
            /// </param>
            /// <param name='includeLabelCategories'>
            /// Boolean value to indicate Whether to include LabelCategories in response.
            /// </param>
            public static LabelingJobResource Get(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, bool? includeJobInstructions = default(bool?), bool? includeLabelCategories = default(bool?))
            {
                return operations.GetAsync(id, resourceGroupName, workspaceName, includeJobInstructions, includeLabelCategories).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a labeling job by name/id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='includeJobInstructions'>
            /// Boolean value to indicate whether to include JobInstructions in response.
            /// </param>
            /// <param name='includeLabelCategories'>
            /// Boolean value to indicate Whether to include LabelCategories in response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabelingJobResource> GetAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, bool? includeJobInstructions = default(bool?), bool? includeLabelCategories = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, resourceGroupName, workspaceName, includeJobInstructions, includeLabelCategories, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// LabelingJob definition object.
            /// </param>
            public static LabelingJobResource CreateOrUpdate(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, LabelingJobResource body)
            {
                return operations.CreateOrUpdateAsync(id, resourceGroupName, workspaceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// LabelingJob definition object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabelingJobResource> CreateOrUpdateAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, LabelingJobResource body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(id, resourceGroupName, workspaceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export labels from a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// The export summary.
            /// </param>
            public static ExportSummary ExportLabels(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, ExportSummary body)
            {
                return operations.ExportLabelsAsync(id, resourceGroupName, workspaceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export labels from a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// The export summary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportSummary> ExportLabelsAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, ExportSummary body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportLabelsWithHttpMessagesAsync(id, resourceGroupName, workspaceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Pause a labeling job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            public static void Pause(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName)
            {
                operations.PauseAsync(id, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pause a labeling job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PauseAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PauseWithHttpMessagesAsync(id, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Resume a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            public static LabelingJobsResumeHeaders Resume(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName)
            {
                return operations.ResumeAsync(id, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabelingJobsResumeHeaders> ResumeAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(id, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates or updates a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// LabelingJob definition object.
            /// </param>
            public static LabelingJobResource BeginCreateOrUpdate(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, LabelingJobResource body)
            {
                return operations.BeginCreateOrUpdateAsync(id, resourceGroupName, workspaceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// LabelingJob definition object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabelingJobResource> BeginCreateOrUpdateAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, LabelingJobResource body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(id, resourceGroupName, workspaceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export labels from a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// The export summary.
            /// </param>
            public static ExportSummary BeginExportLabels(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, ExportSummary body)
            {
                return operations.BeginExportLabelsAsync(id, resourceGroupName, workspaceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export labels from a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='body'>
            /// The export summary.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportSummary> BeginExportLabelsAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, ExportSummary body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginExportLabelsWithHttpMessagesAsync(id, resourceGroupName, workspaceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resume a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            public static LabelingJobsResumeHeaders BeginResume(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName)
            {
                return operations.BeginResumeAsync(id, resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume a labeling job (asynchronous).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The name and identifier for the LabelingJob.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LabelingJobsResumeHeaders> BeginResumeAsync(this ILabelingJobsOperations operations, string id, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeWithHttpMessagesAsync(id, resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists labeling jobs in the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LabelingJobResource> ListNext(this ILabelingJobsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists labeling jobs in the workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LabelingJobResource>> ListNextAsync(this ILabelingJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
