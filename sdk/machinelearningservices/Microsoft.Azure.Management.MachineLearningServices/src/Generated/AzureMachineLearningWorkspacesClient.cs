// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// These APIs allow end users to operate on Azure Machine Learning
    /// Workspace resources.
    /// </summary>
    public partial class AzureMachineLearningWorkspacesClient : ServiceClient<AzureMachineLearningWorkspacesClient>, IAzureMachineLearningWorkspacesClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IWorkspacesOperations.
        /// </summary>
        public virtual IWorkspacesOperations Workspaces { get; private set; }

        /// <summary>
        /// Gets the IUsagesOperations.
        /// </summary>
        public virtual IUsagesOperations Usages { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineSizesOperations.
        /// </summary>
        public virtual IVirtualMachineSizesOperations VirtualMachineSizes { get; private set; }

        /// <summary>
        /// Gets the IQuotasOperations.
        /// </summary>
        public virtual IQuotasOperations Quotas { get; private set; }

        /// <summary>
        /// Gets the IComputeOperations.
        /// </summary>
        public virtual IComputeOperations Compute { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsOperations PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesOperations PrivateLinkResources { get; private set; }

        /// <summary>
        /// Gets the INotebooksOperations.
        /// </summary>
        public virtual INotebooksOperations Notebooks { get; private set; }

        /// <summary>
        /// Gets the IWorkspaceConnectionsOperations.
        /// </summary>
        public virtual IWorkspaceConnectionsOperations WorkspaceConnections { get; private set; }

        /// <summary>
        /// Gets the IBatchEndpointsOperations.
        /// </summary>
        public virtual IBatchEndpointsOperations BatchEndpoints { get; private set; }

        /// <summary>
        /// Gets the IBatchDeploymentsOperations.
        /// </summary>
        public virtual IBatchDeploymentsOperations BatchDeployments { get; private set; }

        /// <summary>
        /// Gets the ICodeContainersOperations.
        /// </summary>
        public virtual ICodeContainersOperations CodeContainers { get; private set; }

        /// <summary>
        /// Gets the ICodeVersionsOperations.
        /// </summary>
        public virtual ICodeVersionsOperations CodeVersions { get; private set; }

        /// <summary>
        /// Gets the IDataContainersOperations.
        /// </summary>
        public virtual IDataContainersOperations DataContainers { get; private set; }

        /// <summary>
        /// Gets the IDataVersionsOperations.
        /// </summary>
        public virtual IDataVersionsOperations DataVersions { get; private set; }

        /// <summary>
        /// Gets the IDatastoresOperations.
        /// </summary>
        public virtual IDatastoresOperations Datastores { get; private set; }

        /// <summary>
        /// Gets the IEnvironmentContainersOperations.
        /// </summary>
        public virtual IEnvironmentContainersOperations EnvironmentContainers { get; private set; }

        /// <summary>
        /// Gets the IEnvironmentSpecificationVersionsOperations.
        /// </summary>
        public virtual IEnvironmentSpecificationVersionsOperations EnvironmentSpecificationVersions { get; private set; }

        /// <summary>
        /// Gets the IJobsOperations.
        /// </summary>
        public virtual IJobsOperations Jobs { get; private set; }

        /// <summary>
        /// Gets the ILabelingJobsOperations.
        /// </summary>
        public virtual ILabelingJobsOperations LabelingJobs { get; private set; }

        /// <summary>
        /// Gets the IModelContainersOperations.
        /// </summary>
        public virtual IModelContainersOperations ModelContainers { get; private set; }

        /// <summary>
        /// Gets the IModelVersionsOperations.
        /// </summary>
        public virtual IModelVersionsOperations ModelVersions { get; private set; }

        /// <summary>
        /// Gets the IOnlineEndpointsOperations.
        /// </summary>
        public virtual IOnlineEndpointsOperations OnlineEndpoints { get; private set; }

        /// <summary>
        /// Gets the IOnlineDeploymentsOperations.
        /// </summary>
        public virtual IOnlineDeploymentsOperations OnlineDeployments { get; private set; }

        /// <summary>
        /// Gets the IMachineLearningServicesOperations.
        /// </summary>
        public virtual IMachineLearningServicesOperations MachineLearningServices { get; private set; }

        /// <summary>
        /// Gets the IWorkspaceFeaturesOperations.
        /// </summary>
        public virtual IWorkspaceFeaturesOperations WorkspaceFeatures { get; private set; }

        /// <summary>
        /// Gets the IWorkspaceSkusOperations.
        /// </summary>
        public virtual IWorkspaceSkusOperations WorkspaceSkus { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AzureMachineLearningWorkspacesClient.Dispose(). False: will not dispose provided httpClient</param>
        protected AzureMachineLearningWorkspacesClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AzureMachineLearningWorkspacesClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AzureMachineLearningWorkspacesClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AzureMachineLearningWorkspacesClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AzureMachineLearningWorkspacesClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureMachineLearningWorkspacesClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AzureMachineLearningWorkspacesClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureMachineLearningWorkspacesClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureMachineLearningWorkspacesClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureMachineLearningWorkspacesClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AzureMachineLearningWorkspacesClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AzureMachineLearningWorkspacesClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Operations = new Operations(this);
            Workspaces = new WorkspacesOperations(this);
            Usages = new UsagesOperations(this);
            VirtualMachineSizes = new VirtualMachineSizesOperations(this);
            Quotas = new QuotasOperations(this);
            Compute = new ComputeOperations(this);
            PrivateEndpointConnections = new PrivateEndpointConnectionsOperations(this);
            PrivateLinkResources = new PrivateLinkResourcesOperations(this);
            Notebooks = new NotebooksOperations(this);
            WorkspaceConnections = new WorkspaceConnectionsOperations(this);
            BatchEndpoints = new BatchEndpointsOperations(this);
            BatchDeployments = new BatchDeploymentsOperations(this);
            CodeContainers = new CodeContainersOperations(this);
            CodeVersions = new CodeVersionsOperations(this);
            DataContainers = new DataContainersOperations(this);
            DataVersions = new DataVersionsOperations(this);
            Datastores = new DatastoresOperations(this);
            EnvironmentContainers = new EnvironmentContainersOperations(this);
            EnvironmentSpecificationVersions = new EnvironmentSpecificationVersionsOperations(this);
            Jobs = new JobsOperations(this);
            LabelingJobs = new LabelingJobsOperations(this);
            ModelContainers = new ModelContainersOperations(this);
            ModelVersions = new ModelVersionsOperations(this);
            OnlineEndpoints = new OnlineEndpointsOperations(this);
            OnlineDeployments = new OnlineDeploymentsOperations(this);
            MachineLearningServices = new MachineLearningServicesOperations(this);
            WorkspaceFeatures = new WorkspaceFeaturesOperations(this);
            WorkspaceSkus = new WorkspaceSkusOperations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            ApiVersion = "2021-03-01-preview";
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Compute>("computeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Compute>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ComputeNodesInformation>("computeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ComputeNodesInformation>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ComputeSecrets>("computeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ComputeSecrets>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AssetReferenceBase>("referenceType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<AssetReferenceBase>("referenceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DatastoreCredentials>("credentialsType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DatastoreCredentials>("credentialsType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DistributionConfiguration>("distributionType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DistributionConfiguration>("distributionType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<IdentityConfiguration>("identityType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<IdentityConfiguration>("identityType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DatastoreContents>("contentsType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DatastoreContents>("contentsType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DatastoreSecrets>("secretsType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DatastoreSecrets>("secretsType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<DockerSpecification>("dockerSpecificationType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<DockerSpecification>("dockerSpecificationType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<EarlyTerminationPolicy>("policyType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<EarlyTerminationPolicy>("policyType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ExportSummary>("format"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ExportSummary>("format"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<JobBase>("jobType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<JobBase>("jobType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<LabelingJobMediaProperties>("mediaType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<LabelingJobMediaProperties>("mediaType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<OnlineScaleSettings>("scaleType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<OnlineScaleSettings>("scaleType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<OnlineDeployment>("endpointComputeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<OnlineDeployment>("endpointComputeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<PartialOnlineDeployment>("endpointComputeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<PartialOnlineDeployment>("endpointComputeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ServiceResponseBase>("computeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ServiceResponseBase>("computeType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CreateServiceRequest>("computeType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<CreateServiceRequest>("computeType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
