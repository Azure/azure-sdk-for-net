// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class KeyVaultProperties
    {
        /// <summary>
        /// Initializes a new instance of the KeyVaultProperties class.
        /// </summary>
        public KeyVaultProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyVaultProperties class.
        /// </summary>
        /// <param name="keyVaultArmId">The ArmId of the keyVault where the
        /// customer owned encryption key is present.</param>
        /// <param name="keyIdentifier">Key vault uri to access the encryption
        /// key.</param>
        /// <param name="identityClientId">For future use - The client id of
        /// the identity which will be used to access key vault.</param>
        public KeyVaultProperties(string keyVaultArmId, string keyIdentifier, string identityClientId = default(string))
        {
            KeyVaultArmId = keyVaultArmId;
            KeyIdentifier = keyIdentifier;
            IdentityClientId = identityClientId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ArmId of the keyVault where the customer owned
        /// encryption key is present.
        /// </summary>
        [JsonProperty(PropertyName = "keyVaultArmId")]
        public string KeyVaultArmId { get; set; }

        /// <summary>
        /// Gets or sets key vault uri to access the encryption key.
        /// </summary>
        [JsonProperty(PropertyName = "keyIdentifier")]
        public string KeyIdentifier { get; set; }

        /// <summary>
        /// Gets or sets for future use - The client id of the identity which
        /// will be used to access key vault.
        /// </summary>
        [JsonProperty(PropertyName = "identityClientId")]
        public string IdentityClientId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyVaultArmId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyVaultArmId");
            }
            if (KeyIdentifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyIdentifier");
            }
        }
    }
}
