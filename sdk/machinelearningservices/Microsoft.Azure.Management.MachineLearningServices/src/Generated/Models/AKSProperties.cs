// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AKS properties
    /// </summary>
    public partial class AKSProperties
    {
        /// <summary>
        /// Initializes a new instance of the AKSProperties class.
        /// </summary>
        public AKSProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AKSProperties class.
        /// </summary>
        /// <param name="clusterFqdn">Cluster full qualified domain
        /// name</param>
        /// <param name="systemServices">System services</param>
        /// <param name="agentCount">Number of agents</param>
        /// <param name="agentVmSize">Agent virtual machine size</param>
        /// <param name="clusterPurpose">Intended usage of the cluster.
        /// Possible values include: 'FastProd', 'DenseProd', 'DevTest'</param>
        /// <param name="sslConfiguration">SSL configuration</param>
        /// <param name="aksNetworkingConfiguration">AKS networking
        /// configuration for vnet</param>
        /// <param name="loadBalancerType">Load Balancer Type. Possible values
        /// include: 'PublicIp', 'InternalLoadBalancer'</param>
        /// <param name="loadBalancerSubnet">Load Balancer Subnet</param>
        public AKSProperties(string clusterFqdn = default(string), IList<SystemService> systemServices = default(IList<SystemService>), int? agentCount = default(int?), string agentVmSize = default(string), string clusterPurpose = default(string), SslConfiguration sslConfiguration = default(SslConfiguration), AksNetworkingConfiguration aksNetworkingConfiguration = default(AksNetworkingConfiguration), string loadBalancerType = default(string), string loadBalancerSubnet = default(string))
        {
            ClusterFqdn = clusterFqdn;
            SystemServices = systemServices;
            AgentCount = agentCount;
            AgentVmSize = agentVmSize;
            ClusterPurpose = clusterPurpose;
            SslConfiguration = sslConfiguration;
            AksNetworkingConfiguration = aksNetworkingConfiguration;
            LoadBalancerType = loadBalancerType;
            LoadBalancerSubnet = loadBalancerSubnet;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets cluster full qualified domain name
        /// </summary>
        [JsonProperty(PropertyName = "clusterFqdn")]
        public string ClusterFqdn { get; set; }

        /// <summary>
        /// Gets system services
        /// </summary>
        [JsonProperty(PropertyName = "systemServices")]
        public IList<SystemService> SystemServices { get; private set; }

        /// <summary>
        /// Gets or sets number of agents
        /// </summary>
        [JsonProperty(PropertyName = "agentCount")]
        public int? AgentCount { get; set; }

        /// <summary>
        /// Gets or sets agent virtual machine size
        /// </summary>
        [JsonProperty(PropertyName = "agentVmSize")]
        public string AgentVmSize { get; set; }

        /// <summary>
        /// Gets or sets intended usage of the cluster. Possible values
        /// include: 'FastProd', 'DenseProd', 'DevTest'
        /// </summary>
        [JsonProperty(PropertyName = "clusterPurpose")]
        public string ClusterPurpose { get; set; }

        /// <summary>
        /// Gets or sets SSL configuration
        /// </summary>
        [JsonProperty(PropertyName = "sslConfiguration")]
        public SslConfiguration SslConfiguration { get; set; }

        /// <summary>
        /// Gets or sets AKS networking configuration for vnet
        /// </summary>
        [JsonProperty(PropertyName = "aksNetworkingConfiguration")]
        public AksNetworkingConfiguration AksNetworkingConfiguration { get; set; }

        /// <summary>
        /// Gets or sets load Balancer Type. Possible values include:
        /// 'PublicIp', 'InternalLoadBalancer'
        /// </summary>
        [JsonProperty(PropertyName = "loadBalancerType")]
        public string LoadBalancerType { get; set; }

        /// <summary>
        /// Gets or sets load Balancer Subnet
        /// </summary>
        [JsonProperty(PropertyName = "loadBalancerSubnet")]
        public string LoadBalancerSubnet { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AgentCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AgentCount", 0);
            }
            if (AksNetworkingConfiguration != null)
            {
                AksNetworkingConfiguration.Validate();
            }
        }
    }
}
