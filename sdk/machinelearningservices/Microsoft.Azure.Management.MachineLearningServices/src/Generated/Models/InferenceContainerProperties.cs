// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class InferenceContainerProperties
    {
        /// <summary>
        /// Initializes a new instance of the InferenceContainerProperties
        /// class.
        /// </summary>
        public InferenceContainerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InferenceContainerProperties
        /// class.
        /// </summary>
        /// <param name="livenessRoute">The route to check the liveness of the
        /// inference server container.</param>
        /// <param name="readinessRoute">The route to check the readiness of
        /// the inference server container.</param>
        /// <param name="scoringRoute">The port to send the scoring requests
        /// to, within the inference server container.</param>
        public InferenceContainerProperties(Route livenessRoute = default(Route), Route readinessRoute = default(Route), Route scoringRoute = default(Route))
        {
            LivenessRoute = livenessRoute;
            ReadinessRoute = readinessRoute;
            ScoringRoute = scoringRoute;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the route to check the liveness of the inference
        /// server container.
        /// </summary>
        [JsonProperty(PropertyName = "livenessRoute")]
        public Route LivenessRoute { get; set; }

        /// <summary>
        /// Gets or sets the route to check the readiness of the inference
        /// server container.
        /// </summary>
        [JsonProperty(PropertyName = "readinessRoute")]
        public Route ReadinessRoute { get; set; }

        /// <summary>
        /// Gets or sets the port to send the scoring requests to, within the
        /// inference server container.
        /// </summary>
        [JsonProperty(PropertyName = "scoringRoute")]
        public Route ScoringRoute { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LivenessRoute != null)
            {
                LivenessRoute.Validate();
            }
            if (ReadinessRoute != null)
            {
                ReadinessRoute.Validate();
            }
            if (ScoringRoute != null)
            {
                ScoringRoute.Validate();
            }
        }
    }
}
