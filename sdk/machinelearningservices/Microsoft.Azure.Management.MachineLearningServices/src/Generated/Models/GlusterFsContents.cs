// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// GlusterFs datastore configuration.
    /// </summary>
    [Newtonsoft.Json.JsonObject("GlusterFs")]
    public partial class GlusterFsContents : DatastoreContents
    {
        /// <summary>
        /// Initializes a new instance of the GlusterFsContents class.
        /// </summary>
        public GlusterFsContents()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GlusterFsContents class.
        /// </summary>
        /// <param name="serverAddress">GlusterFS server address (can be the IP
        /// address or server name).</param>
        /// <param name="volumeName">GlusterFS volume name.</param>
        public GlusterFsContents(string serverAddress, string volumeName)
        {
            ServerAddress = serverAddress;
            VolumeName = volumeName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets glusterFS server address (can be the IP address or
        /// server name).
        /// </summary>
        [JsonProperty(PropertyName = "serverAddress")]
        public string ServerAddress { get; set; }

        /// <summary>
        /// Gets or sets glusterFS volume name.
        /// </summary>
        [JsonProperty(PropertyName = "volumeName")]
        public string VolumeName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ServerAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServerAddress");
            }
            if (VolumeName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VolumeName");
            }
            if (ServerAddress != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(ServerAddress, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ServerAddress", "[a-zA-Z0-9_]");
                }
            }
            if (VolumeName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(VolumeName, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "VolumeName", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
