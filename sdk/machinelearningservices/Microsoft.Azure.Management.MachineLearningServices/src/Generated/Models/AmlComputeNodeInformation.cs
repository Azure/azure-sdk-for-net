// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Compute node information related to a AmlCompute.
    /// </summary>
    public partial class AmlComputeNodeInformation
    {
        /// <summary>
        /// Initializes a new instance of the AmlComputeNodeInformation class.
        /// </summary>
        public AmlComputeNodeInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AmlComputeNodeInformation class.
        /// </summary>
        /// <param name="nodeId">Node ID.</param>
        /// <param name="privateIpAddress">Private IP address.</param>
        /// <param name="publicIpAddress">Public IP address.</param>
        /// <param name="port">Port.</param>
        /// <param name="nodeState">State of the compute node. Values are idle,
        /// running, preparing, unusable, leaving and preempted. Possible
        /// values include: 'idle', 'running', 'preparing', 'unusable',
        /// 'leaving', 'preempted'</param>
        /// <param name="runId">Run ID.</param>
        public AmlComputeNodeInformation(string nodeId = default(string), string privateIpAddress = default(string), string publicIpAddress = default(string), double? port = default(double?), string nodeState = default(string), string runId = default(string))
        {
            NodeId = nodeId;
            PrivateIpAddress = privateIpAddress;
            PublicIpAddress = publicIpAddress;
            Port = port;
            NodeState = nodeState;
            RunId = runId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets node ID.
        /// </summary>
        /// <remarks>
        /// ID of the compute node.
        /// </remarks>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; private set; }

        /// <summary>
        /// Gets private IP address.
        /// </summary>
        /// <remarks>
        /// Private IP address of the compute node.
        /// </remarks>
        [JsonProperty(PropertyName = "privateIpAddress")]
        public string PrivateIpAddress { get; private set; }

        /// <summary>
        /// Gets public IP address.
        /// </summary>
        /// <remarks>
        /// Public IP address of the compute node.
        /// </remarks>
        [JsonProperty(PropertyName = "publicIpAddress")]
        public string PublicIpAddress { get; private set; }

        /// <summary>
        /// Gets port.
        /// </summary>
        /// <remarks>
        /// SSH port number of the node.
        /// </remarks>
        [JsonProperty(PropertyName = "port")]
        public double? Port { get; private set; }

        /// <summary>
        /// Gets state of the compute node. Values are idle, running,
        /// preparing, unusable, leaving and preempted. Possible values
        /// include: 'idle', 'running', 'preparing', 'unusable', 'leaving',
        /// 'preempted'
        /// </summary>
        [JsonProperty(PropertyName = "nodeState")]
        public string NodeState { get; private set; }

        /// <summary>
        /// Gets run ID.
        /// </summary>
        /// <remarks>
        /// ID of the Experiment running on the node, if any else null.
        /// </remarks>
        [JsonProperty(PropertyName = "runId")]
        public string RunId { get; private set; }

    }
}
