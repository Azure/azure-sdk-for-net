// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An Image asset.
    /// </summary>
    public partial class ImageAsset
    {
        /// <summary>
        /// Initializes a new instance of the ImageAsset class.
        /// </summary>
        public ImageAsset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageAsset class.
        /// </summary>
        /// <param name="id">The Asset Id.</param>
        /// <param name="mimeType">The mime type.</param>
        /// <param name="url">The Url of the Asset.</param>
        /// <param name="unpack">Whether the Asset is unpacked.</param>
        public ImageAsset(string id = default(string), string mimeType = default(string), string url = default(string), bool? unpack = default(bool?))
        {
            Id = id;
            MimeType = mimeType;
            Url = url;
            Unpack = unpack;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Asset Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the mime type.
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the Url of the Asset.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets whether the Asset is unpacked.
        /// </summary>
        [JsonProperty(PropertyName = "unpack")]
        public bool? Unpack { get; set; }

    }
}
