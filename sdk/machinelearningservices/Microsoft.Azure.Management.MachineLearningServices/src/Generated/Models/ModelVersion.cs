// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model asset version details.
    /// </summary>
    public partial class ModelVersion
    {
        /// <summary>
        /// Initializes a new instance of the ModelVersion class.
        /// </summary>
        public ModelVersion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ModelVersion class.
        /// </summary>
        /// <param name="path">The path of the file/directory in the
        /// datastore.</param>
        /// <param name="datastoreId">ARM resource ID of the datastore where
        /// the asset is located.</param>
        /// <param name="description">The asset description text.</param>
        /// <param name="flavors">Mapping of model flavors to their
        /// properties.</param>
        /// <param name="isAnonymous">If the name version are system generated
        /// (anonymous registration).</param>
        /// <param name="properties">The asset property dictionary.</param>
        /// <param name="tags">Tag dictionary. Tags can be added, removed, and
        /// updated.</param>
        public ModelVersion(string path, string datastoreId = default(string), string description = default(string), IDictionary<string, FlavorData> flavors = default(IDictionary<string, FlavorData>), bool? isAnonymous = default(bool?), IDictionary<string, string> properties = default(IDictionary<string, string>), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            DatastoreId = datastoreId;
            Description = description;
            Flavors = flavors;
            IsAnonymous = isAnonymous;
            Path = path;
            Properties = properties;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM resource ID of the datastore where the asset is
        /// located.
        /// </summary>
        [JsonProperty(PropertyName = "datastoreId")]
        public string DatastoreId { get; set; }

        /// <summary>
        /// Gets or sets the asset description text.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets mapping of model flavors to their properties.
        /// </summary>
        [JsonProperty(PropertyName = "flavors")]
        public IDictionary<string, FlavorData> Flavors { get; set; }

        /// <summary>
        /// Gets or sets if the name version are system generated (anonymous
        /// registration).
        /// </summary>
        [JsonProperty(PropertyName = "isAnonymous")]
        public bool? IsAnonymous { get; set; }

        /// <summary>
        /// Gets or sets the path of the file/directory in the datastore.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the asset property dictionary.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets tag dictionary. Tags can be added, removed, and
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (Path != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Path, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Path", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
