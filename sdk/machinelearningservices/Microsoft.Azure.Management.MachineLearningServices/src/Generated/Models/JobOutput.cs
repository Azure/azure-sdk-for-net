// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Job output definition container information on where to find job
    /// output/logs.
    /// </summary>
    public partial class JobOutput
    {
        /// <summary>
        /// Initializes a new instance of the JobOutput class.
        /// </summary>
        public JobOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobOutput class.
        /// </summary>
        /// <param name="datastoreId">ARM ID of the datastore where the job
        /// logs and artifacts are stored, or null for the default container
        /// ("azureml") in the workspace's storage account.</param>
        /// <param name="path">Path within the datastore to the job logs and
        /// artifacts.</param>
        public JobOutput(string datastoreId = default(string), string path = default(string))
        {
            DatastoreId = datastoreId;
            Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets ARM ID of the datastore where the job logs and artifacts are
        /// stored, or null for the default container ("azureml") in the
        /// workspace's storage account.
        /// </summary>
        [JsonProperty(PropertyName = "datastoreId")]
        public string DatastoreId { get; private set; }

        /// <summary>
        /// Gets path within the datastore to the job logs and artifacts.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; private set; }

    }
}
