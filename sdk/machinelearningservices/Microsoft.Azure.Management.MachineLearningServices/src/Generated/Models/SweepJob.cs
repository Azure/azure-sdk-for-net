// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Sweep job definition.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Sweep")]
    public partial class SweepJob : JobBase
    {
        /// <summary>
        /// Initializes a new instance of the SweepJob class.
        /// </summary>
        public SweepJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SweepJob class.
        /// </summary>
        /// <param name="algorithm">Type of the hyperparameter sampling
        /// algorithms. Possible values include: 'Grid', 'Random',
        /// 'Bayesian'</param>
        /// <param name="compute">Compute binding for the job.</param>
        /// <param name="searchSpace">A dictionary containing each parameter
        /// and its distribution. The dictionary key is the name of the
        /// parameter</param>
        /// <param name="description">The asset description text.</param>
        /// <param name="interactionEndpoints">List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of
        /// FileStreamObject.</param>
        /// <param name="properties">The asset property dictionary.</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress'</param>
        /// <param name="tags">Tag dictionary. Tags can be added, removed, and
        /// updated.</param>
        /// <param name="earlyTermination">Early termination policies enable
        /// canceling poor-performing runs before they complete</param>
        /// <param name="experimentName">The name of the experiment the job
        /// belongs to. If not set, the job is placed in the "Default"
        /// experiment.</param>
        /// <param name="identity">Identity configuration. If set, this should
        /// be one of AmlToken, ManagedIdentity or null.
        /// Defaults to AmlToken if null.</param>
        /// <param name="output">Location of the job output logs and
        /// artifacts.</param>
        /// <param name="priority">Job priority for scheduling policy. Only
        /// applies to AMLCompute.
        /// Private preview feature and only available to users on the allow
        /// list.</param>
        /// <param name="status">The status of a job. Possible values include:
        /// 'NotStarted', 'Starting', 'Provisioning', 'Preparing', 'Queued',
        /// 'Running', 'Finalizing', 'CancelRequested', 'Completed', 'Failed',
        /// 'Canceled', 'NotResponding', 'Paused', 'Unknown'</param>
        /// <param name="timeout">The total timeout in ISO 8601 format. Only
        /// supports duration with precision as low as Minutes.</param>
        /// <param name="trial">Trial component definition.</param>
        public SweepJob(string algorithm, ComputeConfiguration compute, Objective objective, IDictionary<string, object> searchSpace, string description = default(string), IDictionary<string, JobEndpoint> interactionEndpoints = default(IDictionary<string, JobEndpoint>), IDictionary<string, string> properties = default(IDictionary<string, string>), string provisioningState = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), EarlyTerminationPolicy earlyTermination = default(EarlyTerminationPolicy), string experimentName = default(string), IdentityConfiguration identity = default(IdentityConfiguration), int? maxConcurrentTrials = default(int?), int? maxTotalTrials = default(int?), JobOutput output = default(JobOutput), int? priority = default(int?), string status = default(string), System.TimeSpan? timeout = default(System.TimeSpan?), TrialComponent trial = default(TrialComponent))
            : base(description, interactionEndpoints, properties, provisioningState, tags)
        {
            Algorithm = algorithm;
            Compute = compute;
            EarlyTermination = earlyTermination;
            ExperimentName = experimentName;
            Identity = identity;
            MaxConcurrentTrials = maxConcurrentTrials;
            MaxTotalTrials = maxTotalTrials;
            Objective = objective;
            Output = output;
            Priority = priority;
            SearchSpace = searchSpace;
            Status = status;
            Timeout = timeout;
            Trial = trial;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of the hyperparameter sampling algorithms.
        /// Possible values include: 'Grid', 'Random', 'Bayesian'
        /// </summary>
        [JsonProperty(PropertyName = "algorithm")]
        public string Algorithm { get; set; }

        /// <summary>
        /// Gets or sets compute binding for the job.
        /// </summary>
        [JsonProperty(PropertyName = "compute")]
        public ComputeConfiguration Compute { get; set; }

        /// <summary>
        /// Gets or sets early termination policies enable canceling
        /// poor-performing runs before they complete
        /// </summary>
        [JsonProperty(PropertyName = "earlyTermination")]
        public EarlyTerminationPolicy EarlyTermination { get; set; }

        /// <summary>
        /// Gets or sets the name of the experiment the job belongs to. If not
        /// set, the job is placed in the "Default" experiment.
        /// </summary>
        [JsonProperty(PropertyName = "experimentName")]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Gets or sets identity configuration. If set, this should be one of
        /// AmlToken, ManagedIdentity or null.
        /// Defaults to AmlToken if null.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityConfiguration Identity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxConcurrentTrials")]
        public int? MaxConcurrentTrials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxTotalTrials")]
        public int? MaxTotalTrials { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "objective")]
        public Objective Objective { get; set; }

        /// <summary>
        /// Gets location of the job output logs and artifacts.
        /// </summary>
        [JsonProperty(PropertyName = "output")]
        public JobOutput Output { get; private set; }

        /// <summary>
        /// Gets or sets job priority for scheduling policy. Only applies to
        /// AMLCompute.
        /// Private preview feature and only available to users on the allow
        /// list.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets a dictionary containing each parameter and its
        /// distribution. The dictionary key is the name of the parameter
        /// </summary>
        [JsonProperty(PropertyName = "searchSpace")]
        public IDictionary<string, object> SearchSpace { get; set; }

        /// <summary>
        /// Gets the status of a job. Possible values include: 'NotStarted',
        /// 'Starting', 'Provisioning', 'Preparing', 'Queued', 'Running',
        /// 'Finalizing', 'CancelRequested', 'Completed', 'Failed', 'Canceled',
        /// 'NotResponding', 'Paused', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets the total timeout in ISO 8601 format. Only supports
        /// duration with precision as low as Minutes.
        /// </summary>
        [JsonProperty(PropertyName = "timeout")]
        public System.TimeSpan? Timeout { get; set; }

        /// <summary>
        /// Gets or sets trial component definition.
        /// </summary>
        [JsonProperty(PropertyName = "trial")]
        public TrialComponent Trial { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Algorithm == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Algorithm");
            }
            if (Compute == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Compute");
            }
            if (Objective == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Objective");
            }
            if (SearchSpace == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SearchSpace");
            }
            if (Objective != null)
            {
                Objective.Validate();
            }
            if (Trial != null)
            {
                Trial.Validate();
            }
        }
    }
}
