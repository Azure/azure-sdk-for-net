// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Azure Blob datastore configuration.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureBlob")]
    public partial class AzureBlobContents : DatastoreContents
    {
        /// <summary>
        /// Initializes a new instance of the AzureBlobContents class.
        /// </summary>
        public AzureBlobContents()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBlobContents class.
        /// </summary>
        /// <param name="accountName">Storage account name.</param>
        /// <param name="containerName">Storage account container name.</param>
        /// <param name="credentials">Account credentials.</param>
        /// <param name="endpoint">Azure cloud endpoint for the storage
        /// account.</param>
        /// <param name="protocol">Protocol used to communicate with the
        /// storage account.</param>
        public AzureBlobContents(string accountName, string containerName, DatastoreCredentials credentials, string endpoint, string protocol)
        {
            AccountName = accountName;
            ContainerName = containerName;
            Credentials = credentials;
            Endpoint = endpoint;
            Protocol = protocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets storage account name.
        /// </summary>
        [JsonProperty(PropertyName = "accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or sets storage account container name.
        /// </summary>
        [JsonProperty(PropertyName = "containerName")]
        public string ContainerName { get; set; }

        /// <summary>
        /// Gets or sets account credentials.
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public DatastoreCredentials Credentials { get; set; }

        /// <summary>
        /// Gets or sets azure cloud endpoint for the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or sets protocol used to communicate with the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccountName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountName");
            }
            if (ContainerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContainerName");
            }
            if (Credentials == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Credentials");
            }
            if (Endpoint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Endpoint");
            }
            if (Protocol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Protocol");
            }
            if (AccountName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(AccountName, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AccountName", "[a-zA-Z0-9_]");
                }
            }
            if (ContainerName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(ContainerName, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ContainerName", "[a-zA-Z0-9_]");
                }
            }
            if (Endpoint != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Endpoint, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Endpoint", "[a-zA-Z0-9_]");
                }
            }
            if (Protocol != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Protocol, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Protocol", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
