// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Datastore definition.
    /// </summary>
    public partial class DatastoreProperties
    {
        /// <summary>
        /// Initializes a new instance of the DatastoreProperties class.
        /// </summary>
        public DatastoreProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatastoreProperties class.
        /// </summary>
        /// <param name="contents">Reference to the datastore storage
        /// contents.</param>
        /// <param name="description">The asset description text.</param>
        /// <param name="hasBeenValidated">Whether the service has validated
        /// access to the datastore with the provided credentials.</param>
        /// <param name="isDefault">Whether this datastore is the default for
        /// the workspace.</param>
        /// <param name="linkedInfo">Information about the datastore origin, if
        /// linked.</param>
        /// <param name="properties">The asset property dictionary.</param>
        /// <param name="tags">Tag dictionary. Tags can be added, removed, and
        /// updated.</param>
        public DatastoreProperties(DatastoreContents contents, string description = default(string), bool? hasBeenValidated = default(bool?), bool? isDefault = default(bool?), LinkedInfo linkedInfo = default(LinkedInfo), IDictionary<string, string> properties = default(IDictionary<string, string>), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Contents = contents;
            Description = description;
            HasBeenValidated = hasBeenValidated;
            IsDefault = isDefault;
            LinkedInfo = linkedInfo;
            Properties = properties;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets reference to the datastore storage contents.
        /// </summary>
        [JsonProperty(PropertyName = "contents")]
        public DatastoreContents Contents { get; set; }

        /// <summary>
        /// Gets or sets the asset description text.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets whether the service has validated access to the datastore with
        /// the provided credentials.
        /// </summary>
        [JsonProperty(PropertyName = "hasBeenValidated")]
        public bool? HasBeenValidated { get; private set; }

        /// <summary>
        /// Gets or sets whether this datastore is the default for the
        /// workspace.
        /// </summary>
        [JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets or sets information about the datastore origin, if linked.
        /// </summary>
        [JsonProperty(PropertyName = "linkedInfo")]
        public LinkedInfo LinkedInfo { get; set; }

        /// <summary>
        /// Gets or sets the asset property dictionary.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets tag dictionary. Tags can be added, removed, and
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Contents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Contents");
            }
        }
    }
}
