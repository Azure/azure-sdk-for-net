// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Azure Data Lake Gen1 datastore configuration.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureDataLakeGen1")]
    public partial class AzureDataLakeGen1Contents : DatastoreContents
    {
        /// <summary>
        /// Initializes a new instance of the AzureDataLakeGen1Contents class.
        /// </summary>
        public AzureDataLakeGen1Contents()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureDataLakeGen1Contents class.
        /// </summary>
        /// <param name="credentials">Account credentials.</param>
        /// <param name="storeName">Azure Data Lake store name.</param>
        public AzureDataLakeGen1Contents(DatastoreCredentials credentials, string storeName)
        {
            Credentials = credentials;
            StoreName = storeName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets account credentials.
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public DatastoreCredentials Credentials { get; set; }

        /// <summary>
        /// Gets or sets azure Data Lake store name.
        /// </summary>
        [JsonProperty(PropertyName = "storeName")]
        public string StoreName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Credentials == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Credentials");
            }
            if (StoreName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StoreName");
            }
            if (StoreName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(StoreName, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "StoreName", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
