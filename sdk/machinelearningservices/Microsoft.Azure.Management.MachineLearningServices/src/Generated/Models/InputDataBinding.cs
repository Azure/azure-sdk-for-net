// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class InputDataBinding
    {
        /// <summary>
        /// Initializes a new instance of the InputDataBinding class.
        /// </summary>
        public InputDataBinding()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InputDataBinding class.
        /// </summary>
        /// <param name="dataId">ARM resource ID of the registered
        /// dataVersion.</param>
        /// <param name="mode">Mechanism for accessing the data artifact.
        /// Possible values include: 'Mount', 'Download', 'Upload'</param>
        /// <param name="pathOnCompute">Location of data inside the container
        /// process.</param>
        public InputDataBinding(string dataId = default(string), string mode = default(string), string pathOnCompute = default(string))
        {
            DataId = dataId;
            Mode = mode;
            PathOnCompute = pathOnCompute;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM resource ID of the registered dataVersion.
        /// </summary>
        [JsonProperty(PropertyName = "dataId")]
        public string DataId { get; set; }

        /// <summary>
        /// Gets or sets mechanism for accessing the data artifact. Possible
        /// values include: 'Mount', 'Download', 'Upload'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets location of data inside the container process.
        /// </summary>
        [JsonProperty(PropertyName = "pathOnCompute")]
        public string PathOnCompute { get; set; }

    }
}
