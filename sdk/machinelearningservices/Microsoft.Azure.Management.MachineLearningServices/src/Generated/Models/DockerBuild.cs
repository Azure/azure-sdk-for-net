// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class to represent configuration settings for Docker Build
    /// </summary>
    [Newtonsoft.Json.JsonObject("Build")]
    public partial class DockerBuild : DockerSpecification
    {
        /// <summary>
        /// Initializes a new instance of the DockerBuild class.
        /// </summary>
        public DockerBuild()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DockerBuild class.
        /// </summary>
        /// <param name="dockerfile">Docker command line instructions to
        /// assemble an image.
        /// &lt;seealso
        /// href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments"
        /// /&gt;</param>
        /// <param name="platform">The platform information of the docker
        /// image.</param>
        /// <param name="context">Path to a snapshot of the Docker Context.
        /// This property is only valid if Dockerfile is specified.
        /// The path is relative to the asset path which must contain a single
        /// Blob URI value.
        /// &lt;seealso
        /// href="https://docs.docker.com/engine/context/working-with-contexts/"
        /// /&gt;</param>
        public DockerBuild(string dockerfile, DockerImagePlatform platform = default(DockerImagePlatform), string context = default(string))
            : base(platform)
        {
            Context = context;
            Dockerfile = dockerfile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets path to a snapshot of the Docker Context. This
        /// property is only valid if Dockerfile is specified.
        /// The path is relative to the asset path which must contain a single
        /// Blob URI value.
        /// &amp;lt;seealso
        /// href="https://docs.docker.com/engine/context/working-with-contexts/"
        /// /&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public string Context { get; set; }

        /// <summary>
        /// Gets or sets docker command line instructions to assemble an image.
        /// &amp;lt;seealso
        /// href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments"
        /// /&amp;gt;
        /// </summary>
        [JsonProperty(PropertyName = "dockerfile")]
        public string Dockerfile { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Dockerfile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Dockerfile");
            }
            if (Dockerfile != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Dockerfile, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Dockerfile", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
