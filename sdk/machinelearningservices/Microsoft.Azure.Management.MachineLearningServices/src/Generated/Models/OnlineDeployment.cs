// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OnlineDeployment
    {
        /// <summary>
        /// Initializes a new instance of the OnlineDeployment class.
        /// </summary>
        public OnlineDeployment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OnlineDeployment class.
        /// </summary>
        /// <param name="appInsightsEnabled">If true, enables Application
        /// Insights logging.</param>
        /// <param name="codeConfiguration">Code configuration for the endpoint
        /// deployment.</param>
        /// <param name="description">Description of the endpoint
        /// deployment.</param>
        /// <param name="environmentId">ARM resource ID of the environment
        /// specification for the endpoint deployment.</param>
        /// <param name="environmentVariables">Environment variables
        /// configuration for the deployment.</param>
        /// <param name="model">Reference to the model asset for the endpoint
        /// deployment.</param>
        /// <param name="properties">Property dictionary. Properties can be
        /// added, but not removed or altered.</param>
        /// <param name="provisioningState">Provisioning state for the endpoint
        /// deployment. Possible values include: 'Creating', 'Deleting',
        /// 'Scaling', 'Updating', 'Succeeded', 'Failed', 'Canceled'</param>
        public OnlineDeployment(bool? appInsightsEnabled = default(bool?), CodeConfiguration codeConfiguration = default(CodeConfiguration), string description = default(string), string environmentId = default(string), IDictionary<string, string> environmentVariables = default(IDictionary<string, string>), ProbeSettings livenessProbe = default(ProbeSettings), AssetReferenceBase model = default(AssetReferenceBase), IDictionary<string, string> properties = default(IDictionary<string, string>), string provisioningState = default(string), OnlineRequestSettings requestSettings = default(OnlineRequestSettings), OnlineScaleSettings scaleSettings = default(OnlineScaleSettings))
        {
            AppInsightsEnabled = appInsightsEnabled;
            CodeConfiguration = codeConfiguration;
            Description = description;
            EnvironmentId = environmentId;
            EnvironmentVariables = environmentVariables;
            LivenessProbe = livenessProbe;
            Model = model;
            Properties = properties;
            ProvisioningState = provisioningState;
            RequestSettings = requestSettings;
            ScaleSettings = scaleSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets if true, enables Application Insights logging.
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// Gets or sets code configuration for the endpoint deployment.
        /// </summary>
        [JsonProperty(PropertyName = "codeConfiguration")]
        public CodeConfiguration CodeConfiguration { get; set; }

        /// <summary>
        /// Gets or sets description of the endpoint deployment.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets ARM resource ID of the environment specification for
        /// the endpoint deployment.
        /// </summary>
        [JsonProperty(PropertyName = "environmentId")]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or sets environment variables configuration for the
        /// deployment.
        /// </summary>
        [JsonProperty(PropertyName = "environmentVariables")]
        public IDictionary<string, string> EnvironmentVariables { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "livenessProbe")]
        public ProbeSettings LivenessProbe { get; set; }

        /// <summary>
        /// Gets or sets reference to the model asset for the endpoint
        /// deployment.
        /// </summary>
        [JsonProperty(PropertyName = "model")]
        public AssetReferenceBase Model { get; set; }

        /// <summary>
        /// Gets or sets property dictionary. Properties can be added, but not
        /// removed or altered.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets provisioning state for the endpoint deployment. Possible
        /// values include: 'Creating', 'Deleting', 'Scaling', 'Updating',
        /// 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestSettings")]
        public OnlineRequestSettings RequestSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scaleSettings")]
        public OnlineScaleSettings ScaleSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CodeConfiguration != null)
            {
                CodeConfiguration.Validate();
            }
        }
    }
}
