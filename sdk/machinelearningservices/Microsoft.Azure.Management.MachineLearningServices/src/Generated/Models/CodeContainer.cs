// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Container for code asset versions.
    /// </summary>
    public partial class CodeContainer
    {
        /// <summary>
        /// Initializes a new instance of the CodeContainer class.
        /// </summary>
        public CodeContainer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CodeContainer class.
        /// </summary>
        /// <param name="description">The asset description text.</param>
        /// <param name="properties">The asset property dictionary.</param>
        /// <param name="tags">Tag dictionary. Tags can be added, removed, and
        /// updated.</param>
        public CodeContainer(string description = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Description = description;
            Properties = properties;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the asset description text.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the asset property dictionary.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets tag dictionary. Tags can be added, removed, and
        /// updated.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
