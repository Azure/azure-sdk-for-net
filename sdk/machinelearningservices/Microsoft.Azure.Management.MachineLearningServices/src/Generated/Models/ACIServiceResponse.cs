// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The response for an ACI service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ACI")]
    public partial class ACIServiceResponse : ServiceResponseBase
    {
        /// <summary>
        /// Initializes a new instance of the ACIServiceResponse class.
        /// </summary>
        public ACIServiceResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ACIServiceResponse class.
        /// </summary>
        /// <param name="description">The service description.</param>
        /// <param name="kvTags">The service tag dictionary. Tags are
        /// mutable.</param>
        /// <param name="properties">The service property dictionary.
        /// Properties are immutable.</param>
        /// <param name="state">The current state of the service. Possible
        /// values include: 'Transitioning', 'Healthy', 'Unhealthy', 'Failed',
        /// 'Unschedulable'</param>
        /// <param name="error">The error details.</param>
        /// <param name="deploymentType">The deployment type for the service.
        /// Possible values include: 'GRPCRealtimeEndpoint',
        /// 'HttpRealtimeEndpoint', 'Batch'</param>
        /// <param name="containerResourceRequirements">The container resource
        /// requirements.</param>
        /// <param name="scoringUri">The Uri for sending scoring
        /// requests.</param>
        /// <param name="location">The name of the Azure
        /// location/region.</param>
        /// <param name="authEnabled">Whether or not authentication is enabled
        /// on the service.</param>
        /// <param name="sslEnabled">Whether or not SSL is enabled.</param>
        /// <param name="appInsightsEnabled">Whether or not Application
        /// Insights is enabled.</param>
        /// <param name="dataCollection">Details of the data collection options
        /// specified.</param>
        /// <param name="sslCertificate">The public SSL certificate in PEM
        /// format to use if SSL is enabled.</param>
        /// <param name="sslKey">The public SSL key in PEM format for the
        /// certificate.</param>
        /// <param name="cname">The CName for the service.</param>
        /// <param name="publicIp">The public IP address for the
        /// service.</param>
        /// <param name="publicFqdn">The public Fqdn for the service.</param>
        /// <param name="swaggerUri">The Uri for sending swagger
        /// requests.</param>
        /// <param name="modelConfigMap">Details on the models and
        /// configurations.</param>
        /// <param name="modelsProperty">The list of models.</param>
        /// <param name="environmentImageRequest">The Environment, models and
        /// assets used for inferencing.</param>
        /// <param name="vnetConfiguration">The virtual network
        /// configuration.</param>
        /// <param name="encryptionProperties">The encryption
        /// properties.</param>
        public ACIServiceResponse(string description = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), string state = default(string), ServiceResponseBaseError error = default(ServiceResponseBaseError), string deploymentType = default(string), ContainerResourceRequirements containerResourceRequirements = default(ContainerResourceRequirements), string scoringUri = default(string), string location = default(string), bool? authEnabled = default(bool?), bool? sslEnabled = default(bool?), bool? appInsightsEnabled = default(bool?), ACIServiceResponseDataCollection dataCollection = default(ACIServiceResponseDataCollection), string sslCertificate = default(string), string sslKey = default(string), string cname = default(string), string publicIp = default(string), string publicFqdn = default(string), string swaggerUri = default(string), IDictionary<string, object> modelConfigMap = default(IDictionary<string, object>), IList<Model> modelsProperty = default(IList<Model>), ACIServiceResponseEnvironmentImageRequest environmentImageRequest = default(ACIServiceResponseEnvironmentImageRequest), ACIServiceResponseVnetConfiguration vnetConfiguration = default(ACIServiceResponseVnetConfiguration), ACIServiceResponseEncryptionProperties encryptionProperties = default(ACIServiceResponseEncryptionProperties))
            : base(description, kvTags, properties, state, error, deploymentType)
        {
            ContainerResourceRequirements = containerResourceRequirements;
            ScoringUri = scoringUri;
            Location = location;
            AuthEnabled = authEnabled;
            SslEnabled = sslEnabled;
            AppInsightsEnabled = appInsightsEnabled;
            DataCollection = dataCollection;
            SslCertificate = sslCertificate;
            SslKey = sslKey;
            Cname = cname;
            PublicIp = publicIp;
            PublicFqdn = publicFqdn;
            SwaggerUri = swaggerUri;
            ModelConfigMap = modelConfigMap;
            ModelsProperty = modelsProperty;
            EnvironmentImageRequest = environmentImageRequest;
            VnetConfiguration = vnetConfiguration;
            EncryptionProperties = encryptionProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the container resource requirements.
        /// </summary>
        [JsonProperty(PropertyName = "containerResourceRequirements")]
        public ContainerResourceRequirements ContainerResourceRequirements { get; set; }

        /// <summary>
        /// Gets the Uri for sending scoring requests.
        /// </summary>
        [JsonProperty(PropertyName = "scoringUri")]
        public string ScoringUri { get; private set; }

        /// <summary>
        /// Gets or sets the name of the Azure location/region.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets whether or not authentication is enabled on the
        /// service.
        /// </summary>
        [JsonProperty(PropertyName = "authEnabled")]
        public bool? AuthEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether or not SSL is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "sslEnabled")]
        public bool? SslEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether or not Application Insights is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "appInsightsEnabled")]
        public bool? AppInsightsEnabled { get; set; }

        /// <summary>
        /// Gets or sets details of the data collection options specified.
        /// </summary>
        [JsonProperty(PropertyName = "dataCollection")]
        public ACIServiceResponseDataCollection DataCollection { get; set; }

        /// <summary>
        /// Gets or sets the public SSL certificate in PEM format to use if SSL
        /// is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "sslCertificate")]
        public string SslCertificate { get; set; }

        /// <summary>
        /// Gets or sets the public SSL key in PEM format for the certificate.
        /// </summary>
        [JsonProperty(PropertyName = "sslKey")]
        public string SslKey { get; set; }

        /// <summary>
        /// Gets or sets the CName for the service.
        /// </summary>
        [JsonProperty(PropertyName = "cname")]
        public string Cname { get; set; }

        /// <summary>
        /// Gets or sets the public IP address for the service.
        /// </summary>
        [JsonProperty(PropertyName = "publicIp")]
        public string PublicIp { get; set; }

        /// <summary>
        /// Gets or sets the public Fqdn for the service.
        /// </summary>
        [JsonProperty(PropertyName = "publicFqdn")]
        public string PublicFqdn { get; set; }

        /// <summary>
        /// Gets the Uri for sending swagger requests.
        /// </summary>
        [JsonProperty(PropertyName = "swaggerUri")]
        public string SwaggerUri { get; private set; }

        /// <summary>
        /// Gets details on the models and configurations.
        /// </summary>
        [JsonProperty(PropertyName = "modelConfigMap")]
        public IDictionary<string, object> ModelConfigMap { get; private set; }

        /// <summary>
        /// Gets or sets the list of models.
        /// </summary>
        [JsonProperty(PropertyName = "models")]
        public IList<Model> ModelsProperty { get; set; }

        /// <summary>
        /// Gets or sets the Environment, models and assets used for
        /// inferencing.
        /// </summary>
        [JsonProperty(PropertyName = "environmentImageRequest")]
        public ACIServiceResponseEnvironmentImageRequest EnvironmentImageRequest { get; set; }

        /// <summary>
        /// Gets or sets the virtual network configuration.
        /// </summary>
        [JsonProperty(PropertyName = "vnetConfiguration")]
        public ACIServiceResponseVnetConfiguration VnetConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the encryption properties.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionProperties")]
        public ACIServiceResponseEncryptionProperties EncryptionProperties { get; set; }

    }
}
