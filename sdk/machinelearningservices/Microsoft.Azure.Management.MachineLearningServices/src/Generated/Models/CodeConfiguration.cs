// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Configuration for a scoring code asset.
    /// </summary>
    public partial class CodeConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the CodeConfiguration class.
        /// </summary>
        public CodeConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CodeConfiguration class.
        /// </summary>
        /// <param name="scoringScript">The script to execute on startup. eg.
        /// "score.py"</param>
        /// <param name="codeId">ARM resource ID of the code asset.</param>
        public CodeConfiguration(string scoringScript, string codeId = default(string))
        {
            CodeId = codeId;
            ScoringScript = scoringScript;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM resource ID of the code asset.
        /// </summary>
        [JsonProperty(PropertyName = "codeId")]
        public string CodeId { get; set; }

        /// <summary>
        /// Gets or sets the script to execute on startup. eg. "score.py"
        /// </summary>
        [JsonProperty(PropertyName = "scoringScript")]
        public string ScoringScript { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScoringScript == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScoringScript");
            }
            if (ScoringScript != null)
            {
                if (ScoringScript.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ScoringScript", 1);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(ScoringScript, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ScoringScript", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
