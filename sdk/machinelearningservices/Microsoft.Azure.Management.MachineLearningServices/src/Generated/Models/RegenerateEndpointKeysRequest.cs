// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RegenerateEndpointKeysRequest
    {
        /// <summary>
        /// Initializes a new instance of the RegenerateEndpointKeysRequest
        /// class.
        /// </summary>
        public RegenerateEndpointKeysRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegenerateEndpointKeysRequest
        /// class.
        /// </summary>
        /// <param name="keyType">Specification for which type of key to
        /// generate. Primary or Secondary. Possible values include: 'Primary',
        /// 'Secondary'</param>
        /// <param name="keyValue">The value the key is set to.</param>
        public RegenerateEndpointKeysRequest(string keyType, string keyValue = default(string))
        {
            KeyType = keyType;
            KeyValue = keyValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specification for which type of key to generate.
        /// Primary or Secondary. Possible values include: 'Primary',
        /// 'Secondary'
        /// </summary>
        [JsonProperty(PropertyName = "keyType")]
        public string KeyType { get; set; }

        /// <summary>
        /// Gets or sets the value the key is set to.
        /// </summary>
        [JsonProperty(PropertyName = "keyValue")]
        public string KeyValue { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyType");
            }
        }
    }
}
