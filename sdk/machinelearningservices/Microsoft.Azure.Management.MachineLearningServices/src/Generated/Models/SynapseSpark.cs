// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A SynapseSpark compute.
    /// </summary>
    public partial class SynapseSpark
    {
        /// <summary>
        /// Initializes a new instance of the SynapseSpark class.
        /// </summary>
        public SynapseSpark()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseSpark class.
        /// </summary>
        /// <param name="computeType">The type of compute. Possible values
        /// include: 'AKS', 'AmlCompute', 'ComputeInstance', 'DataFactory',
        /// 'VirtualMachine', 'HDInsight', 'Databricks', 'DataLakeAnalytics',
        /// 'SynapseSpark'</param>
        /// <param name="computeLocation">Location for the underlying
        /// compute</param>
        /// <param name="provisioningState">The provision state of the cluster.
        /// Valid values are Unknown, Updating, Provisioning, Succeeded, and
        /// Failed. Possible values include: 'Unknown', 'Updating', 'Creating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="description">The description of the Machine Learning
        /// compute.</param>
        /// <param name="createdOn">The time at which the compute was
        /// created.</param>
        /// <param name="modifiedOn">The time at which the compute was last
        /// modified.</param>
        /// <param name="resourceId">ARM resource id of the underlying
        /// compute</param>
        /// <param name="provisioningErrors">Errors during provisioning</param>
        /// <param name="isAttachedCompute">Indicating whether the compute was
        /// provisioned by user and brought from outside if true, or machine
        /// learning service provisioned it if false.</param>
        /// <param name="disableLocalAuth">Opt-out of local authentication and
        /// ensure customers can use only MSI and AAD exclusively for
        /// authentication.</param>
        /// <param name="properties">AKS properties</param>
        public SynapseSpark(string computeType, string computeLocation = default(string), string provisioningState = default(string), string description = default(string), System.DateTime? createdOn = default(System.DateTime?), System.DateTime? modifiedOn = default(System.DateTime?), string resourceId = default(string), IList<ErrorResponse> provisioningErrors = default(IList<ErrorResponse>), bool? isAttachedCompute = default(bool?), bool? disableLocalAuth = default(bool?), SynapseSparkProperties properties = default(SynapseSparkProperties))
        {
            ComputeType = computeType;
            ComputeLocation = computeLocation;
            ProvisioningState = provisioningState;
            Description = description;
            CreatedOn = createdOn;
            ModifiedOn = modifiedOn;
            ResourceId = resourceId;
            ProvisioningErrors = provisioningErrors;
            IsAttachedCompute = isAttachedCompute;
            DisableLocalAuth = disableLocalAuth;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of compute. Possible values include: 'AKS',
        /// 'AmlCompute', 'ComputeInstance', 'DataFactory', 'VirtualMachine',
        /// 'HDInsight', 'Databricks', 'DataLakeAnalytics', 'SynapseSpark'
        /// </summary>
        [JsonProperty(PropertyName = "computeType")]
        public string ComputeType { get; set; }

        /// <summary>
        /// Gets or sets location for the underlying compute
        /// </summary>
        [JsonProperty(PropertyName = "computeLocation")]
        public string ComputeLocation { get; set; }

        /// <summary>
        /// Gets the provision state of the cluster. Valid values are Unknown,
        /// Updating, Provisioning, Succeeded, and Failed. Possible values
        /// include: 'Unknown', 'Updating', 'Creating', 'Deleting',
        /// 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the description of the Machine Learning compute.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the time at which the compute was created.
        /// </summary>
        [JsonProperty(PropertyName = "createdOn")]
        public System.DateTime? CreatedOn { get; private set; }

        /// <summary>
        /// Gets the time at which the compute was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "modifiedOn")]
        public System.DateTime? ModifiedOn { get; private set; }

        /// <summary>
        /// Gets or sets ARM resource id of the underlying compute
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets errors during provisioning
        /// </summary>
        [JsonProperty(PropertyName = "provisioningErrors")]
        public IList<ErrorResponse> ProvisioningErrors { get; private set; }

        /// <summary>
        /// Gets indicating whether the compute was provisioned by user and
        /// brought from outside if true, or machine learning service
        /// provisioned it if false.
        /// </summary>
        [JsonProperty(PropertyName = "isAttachedCompute")]
        public bool? IsAttachedCompute { get; private set; }

        /// <summary>
        /// Gets or sets opt-out of local authentication and ensure customers
        /// can use only MSI and AAD exclusively for authentication.
        /// </summary>
        [JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth { get; set; }

        /// <summary>
        /// Gets or sets AKS properties
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public SynapseSparkProperties Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ComputeType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ComputeType");
            }
        }
    }
}
