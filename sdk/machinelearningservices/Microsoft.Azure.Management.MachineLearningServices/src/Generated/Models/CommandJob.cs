// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Command job definition.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Command")]
    public partial class CommandJob : JobBase
    {
        /// <summary>
        /// Initializes a new instance of the CommandJob class.
        /// </summary>
        public CommandJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CommandJob class.
        /// </summary>
        /// <param name="command">The command to execute on startup of the job.
        /// eg. "python train.py"</param>
        /// <param name="compute">Compute binding for the job.</param>
        /// <param name="description">The asset description text.</param>
        /// <param name="interactionEndpoints">List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of
        /// FileStreamObject.</param>
        /// <param name="properties">The asset property dictionary.</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress'</param>
        /// <param name="tags">Tag dictionary. Tags can be added, removed, and
        /// updated.</param>
        /// <param name="codeId">ARM resource ID of the code asset.</param>
        /// <param name="distribution">Distribution configuration of the job.
        /// If set, this should be one of Mpi, Tensorflow, PyTorch, or
        /// null.</param>
        /// <param name="environmentId">The ARM resource ID of the Environment
        /// specification for the job.</param>
        /// <param name="environmentVariables">Environment variables included
        /// in the job.</param>
        /// <param name="experimentName">The name of the experiment the job
        /// belongs to. If not set, the job is placed in the "Default"
        /// experiment.</param>
        /// <param name="identity">Identity configuration. If set, this should
        /// be one of AmlToken, ManagedIdentity, or null.
        /// Defaults to AmlToken if null.</param>
        /// <param name="inputDataBindings">Mapping of input data bindings used
        /// in the job.</param>
        /// <param name="output">Location of the job output logs and
        /// artifacts.</param>
        /// <param name="outputDataBindings">Mapping of output data bindings
        /// used in the job.</param>
        /// <param name="parameters">Input parameters.</param>
        /// <param name="priority">Job priority for scheduling policy. Only
        /// applies to AMLCompute.
        /// Private preview feature and only available to users on the allow
        /// list.</param>
        /// <param name="status">Status of the job. Possible values include:
        /// 'NotStarted', 'Starting', 'Provisioning', 'Preparing', 'Queued',
        /// 'Running', 'Finalizing', 'CancelRequested', 'Completed', 'Failed',
        /// 'Canceled', 'NotResponding', 'Paused', 'Unknown'</param>
        /// <param name="timeout">The max run duration in ISO 8601 format,
        /// after which the job will be cancelled. Only supports duration with
        /// precision as low as Seconds.</param>
        public CommandJob(string command, ComputeConfiguration compute, string description = default(string), IDictionary<string, JobEndpoint> interactionEndpoints = default(IDictionary<string, JobEndpoint>), IDictionary<string, string> properties = default(IDictionary<string, string>), string provisioningState = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string codeId = default(string), DistributionConfiguration distribution = default(DistributionConfiguration), string environmentId = default(string), IDictionary<string, string> environmentVariables = default(IDictionary<string, string>), string experimentName = default(string), IdentityConfiguration identity = default(IdentityConfiguration), IDictionary<string, InputDataBinding> inputDataBindings = default(IDictionary<string, InputDataBinding>), JobOutput output = default(JobOutput), IDictionary<string, OutputDataBinding> outputDataBindings = default(IDictionary<string, OutputDataBinding>), IDictionary<string, object> parameters = default(IDictionary<string, object>), int? priority = default(int?), string status = default(string), System.TimeSpan? timeout = default(System.TimeSpan?))
            : base(description, interactionEndpoints, properties, provisioningState, tags)
        {
            CodeId = codeId;
            Command = command;
            Compute = compute;
            Distribution = distribution;
            EnvironmentId = environmentId;
            EnvironmentVariables = environmentVariables;
            ExperimentName = experimentName;
            Identity = identity;
            InputDataBindings = inputDataBindings;
            Output = output;
            OutputDataBindings = outputDataBindings;
            Parameters = parameters;
            Priority = priority;
            Status = status;
            Timeout = timeout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM resource ID of the code asset.
        /// </summary>
        [JsonProperty(PropertyName = "codeId")]
        public string CodeId { get; set; }

        /// <summary>
        /// Gets or sets the command to execute on startup of the job. eg.
        /// "python train.py"
        /// </summary>
        [JsonProperty(PropertyName = "command")]
        public string Command { get; set; }

        /// <summary>
        /// Gets or sets compute binding for the job.
        /// </summary>
        [JsonProperty(PropertyName = "compute")]
        public ComputeConfiguration Compute { get; set; }

        /// <summary>
        /// Gets or sets distribution configuration of the job. If set, this
        /// should be one of Mpi, Tensorflow, PyTorch, or null.
        /// </summary>
        [JsonProperty(PropertyName = "distribution")]
        public DistributionConfiguration Distribution { get; set; }

        /// <summary>
        /// Gets or sets the ARM resource ID of the Environment specification
        /// for the job.
        /// </summary>
        [JsonProperty(PropertyName = "environmentId")]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or sets environment variables included in the job.
        /// </summary>
        [JsonProperty(PropertyName = "environmentVariables")]
        public IDictionary<string, string> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets or sets the name of the experiment the job belongs to. If not
        /// set, the job is placed in the "Default" experiment.
        /// </summary>
        [JsonProperty(PropertyName = "experimentName")]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Gets or sets identity configuration. If set, this should be one of
        /// AmlToken, ManagedIdentity, or null.
        /// Defaults to AmlToken if null.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public IdentityConfiguration Identity { get; set; }

        /// <summary>
        /// Gets or sets mapping of input data bindings used in the job.
        /// </summary>
        [JsonProperty(PropertyName = "inputDataBindings")]
        public IDictionary<string, InputDataBinding> InputDataBindings { get; set; }

        /// <summary>
        /// Gets location of the job output logs and artifacts.
        /// </summary>
        [JsonProperty(PropertyName = "output")]
        public JobOutput Output { get; private set; }

        /// <summary>
        /// Gets or sets mapping of output data bindings used in the job.
        /// </summary>
        [JsonProperty(PropertyName = "outputDataBindings")]
        public IDictionary<string, OutputDataBinding> OutputDataBindings { get; set; }

        /// <summary>
        /// Gets input parameters.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, object> Parameters { get; private set; }

        /// <summary>
        /// Gets or sets job priority for scheduling policy. Only applies to
        /// AMLCompute.
        /// Private preview feature and only available to users on the allow
        /// list.
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets status of the job. Possible values include: 'NotStarted',
        /// 'Starting', 'Provisioning', 'Preparing', 'Queued', 'Running',
        /// 'Finalizing', 'CancelRequested', 'Completed', 'Failed', 'Canceled',
        /// 'NotResponding', 'Paused', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets the max run duration in ISO 8601 format, after which
        /// the job will be cancelled. Only supports duration with precision as
        /// low as Seconds.
        /// </summary>
        [JsonProperty(PropertyName = "timeout")]
        public System.TimeSpan? Timeout { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Command == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Command");
            }
            if (Compute == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Compute");
            }
            if (Command != null)
            {
                if (Command.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Command", 1);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Command, "[a-zA-Z0-9_]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Command", "[a-zA-Z0-9_]");
                }
            }
        }
    }
}
