// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A user that can be assigned to a compute instance.
    /// </summary>
    public partial class AssignedUser
    {
        /// <summary>
        /// Initializes a new instance of the AssignedUser class.
        /// </summary>
        public AssignedUser()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AssignedUser class.
        /// </summary>
        /// <param name="objectId">User’s AAD Object Id.</param>
        /// <param name="tenantId">User’s AAD Tenant Id.</param>
        public AssignedUser(string objectId, string tenantId)
        {
            ObjectId = objectId;
            TenantId = tenantId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user’s AAD Object Id.
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets user’s AAD Tenant Id.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ObjectId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ObjectId");
            }
            if (TenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TenantId");
            }
        }
    }
}
