// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An Azure Machine Learning Model.
    /// </summary>
    public partial class Model
    {
        /// <summary>
        /// Initializes a new instance of the Model class.
        /// </summary>
        public Model()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Model class.
        /// </summary>
        /// <param name="name">The Model name.</param>
        /// <param name="url">The URL of the Model. Usually a SAS URL.</param>
        /// <param name="mimeType">The MIME type of Model content. For more
        /// details about MIME type, please open
        /// https://www.iana.org/assignments/media-types/media-types.xhtml</param>
        /// <param name="id">The Model Id.</param>
        /// <param name="framework">The Model framework.</param>
        /// <param name="frameworkVersion">The Model framework version.</param>
        /// <param name="version">The Model version assigned by Model
        /// Management Service.</param>
        /// <param name="datasets">The list of datasets associated with the
        /// model.</param>
        /// <param name="description">The Model description text.</param>
        /// <param name="createdTime">The Model creation time (UTC).</param>
        /// <param name="modifiedTime">The Model last modified time
        /// (UTC).</param>
        /// <param name="unpack">Indicates whether we need to unpack the Model
        /// during docker Image creation.</param>
        /// <param name="parentModelId">The Parent Model Id.</param>
        /// <param name="runId">The RunId that created this model.</param>
        /// <param name="experimentName">The name of the experiment where this
        /// model was created.</param>
        /// <param name="kvTags">The Model tag dictionary. Items are
        /// mutable.</param>
        /// <param name="properties">The Model property dictionary. Properties
        /// are immutable.</param>
        /// <param name="derivedModelIds">Models derived from this
        /// model</param>
        /// <param name="sampleInputData">Sample Input Data for the Model. A
        /// reference to a dataset in the workspace in the format
        /// aml://dataset/{datasetId}</param>
        /// <param name="sampleOutputData">Sample Output Data for the Model. A
        /// reference to a dataset in the workspace in the format
        /// aml://dataset/{datasetId}</param>
        /// <param name="resourceRequirements">Resource requirements for the
        /// model</param>
        public Model(string name, string url, string mimeType, string id = default(string), string framework = default(string), string frameworkVersion = default(string), long? version = default(long?), IList<DatasetReference> datasets = default(IList<DatasetReference>), string description = default(string), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? modifiedTime = default(System.DateTime?), bool? unpack = default(bool?), string parentModelId = default(string), string runId = default(string), string experimentName = default(string), IDictionary<string, string> kvTags = default(IDictionary<string, string>), IDictionary<string, string> properties = default(IDictionary<string, string>), IList<string> derivedModelIds = default(IList<string>), string sampleInputData = default(string), string sampleOutputData = default(string), ContainerResourceRequirements resourceRequirements = default(ContainerResourceRequirements))
        {
            Id = id;
            Name = name;
            Framework = framework;
            FrameworkVersion = frameworkVersion;
            Version = version;
            Datasets = datasets;
            Url = url;
            MimeType = mimeType;
            Description = description;
            CreatedTime = createdTime;
            ModifiedTime = modifiedTime;
            Unpack = unpack;
            ParentModelId = parentModelId;
            RunId = runId;
            ExperimentName = experimentName;
            KvTags = kvTags;
            Properties = properties;
            DerivedModelIds = derivedModelIds;
            SampleInputData = sampleInputData;
            SampleOutputData = sampleOutputData;
            ResourceRequirements = resourceRequirements;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Model Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the Model name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Model framework.
        /// </summary>
        [JsonProperty(PropertyName = "framework")]
        public string Framework { get; set; }

        /// <summary>
        /// Gets or sets the Model framework version.
        /// </summary>
        [JsonProperty(PropertyName = "frameworkVersion")]
        public string FrameworkVersion { get; set; }

        /// <summary>
        /// Gets or sets the Model version assigned by Model Management
        /// Service.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public long? Version { get; set; }

        /// <summary>
        /// Gets or sets the list of datasets associated with the model.
        /// </summary>
        [JsonProperty(PropertyName = "datasets")]
        public IList<DatasetReference> Datasets { get; set; }

        /// <summary>
        /// Gets or sets the URL of the Model. Usually a SAS URL.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the MIME type of Model content. For more details about
        /// MIME type, please open
        /// https://www.iana.org/assignments/media-types/media-types.xhtml
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the Model description text.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Model creation time (UTC).
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the Model last modified time (UTC).
        /// </summary>
        [JsonProperty(PropertyName = "modifiedTime")]
        public System.DateTime? ModifiedTime { get; set; }

        /// <summary>
        /// Gets or sets indicates whether we need to unpack the Model during
        /// docker Image creation.
        /// </summary>
        [JsonProperty(PropertyName = "unpack")]
        public bool? Unpack { get; set; }

        /// <summary>
        /// Gets or sets the Parent Model Id.
        /// </summary>
        [JsonProperty(PropertyName = "parentModelId")]
        public string ParentModelId { get; set; }

        /// <summary>
        /// Gets or sets the RunId that created this model.
        /// </summary>
        [JsonProperty(PropertyName = "runId")]
        public string RunId { get; set; }

        /// <summary>
        /// Gets or sets the name of the experiment where this model was
        /// created.
        /// </summary>
        [JsonProperty(PropertyName = "experimentName")]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Gets or sets the Model tag dictionary. Items are mutable.
        /// </summary>
        [JsonProperty(PropertyName = "kvTags")]
        public IDictionary<string, string> KvTags { get; set; }

        /// <summary>
        /// Gets or sets the Model property dictionary. Properties are
        /// immutable.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or sets models derived from this model
        /// </summary>
        [JsonProperty(PropertyName = "derivedModelIds")]
        public IList<string> DerivedModelIds { get; set; }

        /// <summary>
        /// Gets or sets sample Input Data for the Model. A reference to a
        /// dataset in the workspace in the format aml://dataset/{datasetId}
        /// </summary>
        [JsonProperty(PropertyName = "sampleInputData")]
        public string SampleInputData { get; set; }

        /// <summary>
        /// Gets or sets sample Output Data for the Model. A reference to a
        /// dataset in the workspace in the format aml://dataset/{datasetId}
        /// </summary>
        [JsonProperty(PropertyName = "sampleOutputData")]
        public string SampleOutputData { get; set; }

        /// <summary>
        /// Gets or sets resource requirements for the model
        /// </summary>
        [JsonProperty(PropertyName = "resourceRequirements")]
        public ContainerResourceRequirements ResourceRequirements { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (MimeType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MimeType");
            }
        }
    }
}
