// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearningServices
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkspaceConnectionsOperations.
    /// </summary>
    public static partial class WorkspaceConnectionsOperationsExtensions
    {
            /// <summary>
            /// List all connections under a AML workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='target'>
            /// Target of the workspace connection.
            /// </param>
            /// <param name='category'>
            /// Category of the workspace connection.
            /// </param>
            public static IEnumerable<WorkspaceConnection> List(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string target = default(string), string category = default(string))
            {
                return operations.ListAsync(resourceGroupName, workspaceName, target, category).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all connections under a AML workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='target'>
            /// Target of the workspace connection.
            /// </param>
            /// <param name='category'>
            /// Category of the workspace connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<WorkspaceConnection>> ListAsync(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string target = default(string), string category = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, target, category, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new workspace connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='connectionName'>
            /// Friendly name of the workspace connection
            /// </param>
            /// <param name='parameters'>
            /// The object for creating or updating a new workspace connection
            /// </param>
            public static WorkspaceConnection Create(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string connectionName, WorkspaceConnectionDto parameters)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, connectionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new workspace connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='connectionName'>
            /// Friendly name of the workspace connection
            /// </param>
            /// <param name='parameters'>
            /// The object for creating or updating a new workspace connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceConnection> CreateAsync(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string connectionName, WorkspaceConnectionDto parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, connectionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the detail of a workspace connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='connectionName'>
            /// Friendly name of the workspace connection
            /// </param>
            public static WorkspaceConnection Get(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string connectionName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the detail of a workspace connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='connectionName'>
            /// Friendly name of the workspace connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceConnection> GetAsync(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a workspace connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='connectionName'>
            /// Friendly name of the workspace connection
            /// </param>
            public static void Delete(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string connectionName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a workspace connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// Name of Azure Machine Learning workspace.
            /// </param>
            /// <param name='connectionName'>
            /// Friendly name of the workspace connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWorkspaceConnectionsOperations operations, string resourceGroupName, string workspaceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, connectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
