// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.MachineLearning.Models;

namespace Azure.ResourceManager.MachineLearning
{
    public partial class Sample_BatchDeploymentResource
    {
        // Delete Batch Deployment.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteBatchDeployment()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/delete.json
            // this example is just showing the usage of "BatchDeployments_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchDeploymentResource created on azure
            // for more information of creating BatchDeploymentResource, please refer to the document of BatchDeploymentResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "my-aml-workspace";
            string endpointName = "testEndpointName";
            string deploymentName = "testDeploymentName";
            ResourceIdentifier batchDeploymentResourceId = BatchDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName, deploymentName);
            BatchDeploymentResource batchDeployment = client.GetBatchDeploymentResource(batchDeploymentResourceId);

            // invoke the operation
            await batchDeployment.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get Batch Deployment.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetBatchDeployment()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/get.json
            // this example is just showing the usage of "BatchDeployments_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchDeploymentResource created on azure
            // for more information of creating BatchDeploymentResource, please refer to the document of BatchDeploymentResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "my-aml-workspace";
            string endpointName = "testEndpointName";
            string deploymentName = "testDeploymentName";
            ResourceIdentifier batchDeploymentResourceId = BatchDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName, deploymentName);
            BatchDeploymentResource batchDeployment = client.GetBatchDeploymentResource(batchDeploymentResourceId);

            // invoke the operation
            BatchDeploymentResource result = await batchDeployment.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BatchDeploymentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Batch Deployment.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateBatchDeployment()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchDeployment/update.json
            // this example is just showing the usage of "BatchDeployments_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchDeploymentResource created on azure
            // for more information of creating BatchDeploymentResource, please refer to the document of BatchDeploymentResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "my-aml-workspace";
            string endpointName = "testEndpointName";
            string deploymentName = "testDeploymentName";
            ResourceIdentifier batchDeploymentResourceId = BatchDeploymentResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName, deploymentName);
            BatchDeploymentResource batchDeployment = client.GetBatchDeploymentResource(batchDeploymentResourceId);

            // invoke the operation
            BatchDeploymentPatch patch = new BatchDeploymentPatch()
            {
                Identity = new PartialManagedServiceIdentity()
                {
                    ManagedServiceIdentityType = ManagedServiceIdentityType.SystemAssigned,
                    UserAssignedIdentities =
{
["string"] = BinaryData.FromObjectAsJson(new
{
}),
},
                },
                Kind = "string",
                Location = new AzureLocation("string"),
                Properties = new PartialBatchDeployment()
                {
                    CodeConfiguration = new PartialCodeConfiguration()
                    {
                        CodeId = "string",
                        ScoringScript = "string",
                    },
                    Compute = "string",
                    Description = "string",
                    EnvironmentId = "string",
                    EnvironmentVariables =
{
["string"] = "string",
},
                    ErrorThreshold = 1,
                    LoggingLevel = BatchLoggingLevel.Info,
                    MaxConcurrencyPerInstance = 1,
                    MiniBatchSize = 1,
                    Model = new PartialAssetReferenceBase()
                    {
                        ReferenceType = ReferenceType.Id,
                    },
                    OutputAction = BatchOutputAction.SummaryOnly,
                    OutputFileName = "string",
                    Properties =
{
["string"] = "string",
},
                    RetrySettings = new PartialBatchRetrySettings()
                    {
                        MaxRetries = 1,
                        Timeout = XmlConvert.ToTimeSpan("PT5M"),
                    },
                },
                Sku = new PartialSku()
                {
                    Capacity = 1,
                    Family = "string",
                    Name = "string",
                    Size = "string",
                    Tier = MachineLearningSkuTier.Free,
                },
                Tags =
{
},
            };
            ArmOperation<BatchDeploymentResource> lro = await batchDeployment.UpdateAsync(WaitUntil.Completed, patch);
            BatchDeploymentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BatchDeploymentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
