// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.MachineLearning.Models;

namespace Azure.ResourceManager.MachineLearning
{
    public partial class Sample_BatchEndpointResource
    {
        // Delete Batch Endpoint.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteBatchEndpoint()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/delete.json
            // this example is just showing the usage of "BatchEndpoints_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchEndpointResource created on azure
            // for more information of creating BatchEndpointResource, please refer to the document of BatchEndpointResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "resourceGroup-1234";
            string workspaceName = "testworkspace";
            string endpointName = "testBatchEndpoint";
            ResourceIdentifier batchEndpointResourceId = BatchEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName);
            BatchEndpointResource batchEndpoint = client.GetBatchEndpointResource(batchEndpointResourceId);

            // invoke the operation
            await batchEndpoint.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get Batch Endpoint.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetBatchEndpoint()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/get.json
            // this example is just showing the usage of "BatchEndpoints_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchEndpointResource created on azure
            // for more information of creating BatchEndpointResource, please refer to the document of BatchEndpointResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "my-aml-workspace";
            string endpointName = "testEndpointName";
            ResourceIdentifier batchEndpointResourceId = BatchEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName);
            BatchEndpointResource batchEndpoint = client.GetBatchEndpointResource(batchEndpointResourceId);

            // invoke the operation
            BatchEndpointResource result = await batchEndpoint.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BatchEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Batch Endpoint.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateBatchEndpoint()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/update.json
            // this example is just showing the usage of "BatchEndpoints_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchEndpointResource created on azure
            // for more information of creating BatchEndpointResource, please refer to the document of BatchEndpointResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "my-aml-workspace";
            string endpointName = "testEndpointName";
            ResourceIdentifier batchEndpointResourceId = BatchEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName);
            BatchEndpointResource batchEndpoint = client.GetBatchEndpointResource(batchEndpointResourceId);

            // invoke the operation
            BatchEndpointPatch patch = new BatchEndpointPatch()
            {
                Identity = new PartialManagedServiceIdentity()
                {
                    ManagedServiceIdentityType = ManagedServiceIdentityType.SystemAssigned,
                    UserAssignedIdentities =
{
["string"] = BinaryData.FromObjectAsJson(new
{
}),
},
                },
                Kind = "string",
                Location = new AzureLocation("string"),
                DefaultsDeploymentName = "string",
                Sku = new PartialSku()
                {
                    Capacity = 1,
                    Family = "string",
                    Name = "string",
                    Size = "string",
                    Tier = MachineLearningSkuTier.Free,
                },
                Tags =
{
},
            };
            ArmOperation<BatchEndpointResource> lro = await batchEndpoint.UpdateAsync(WaitUntil.Completed, patch);
            BatchEndpointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            BatchEndpointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // ListKeys Batch Endpoint.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetKeys_ListKeysBatchEndpoint()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/BatchEndpoint/listKeys.json
            // this example is just showing the usage of "BatchEndpoints_ListKeys" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this BatchEndpointResource created on azure
            // for more information of creating BatchEndpointResource, please refer to the document of BatchEndpointResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "my-aml-workspace";
            string endpointName = "testEndpointName";
            ResourceIdentifier batchEndpointResourceId = BatchEndpointResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, endpointName);
            BatchEndpointResource batchEndpoint = client.GetBatchEndpointResource(batchEndpointResourceId);

            // invoke the operation
            EndpointAuthKeys result = await batchEndpoint.GetKeysAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
