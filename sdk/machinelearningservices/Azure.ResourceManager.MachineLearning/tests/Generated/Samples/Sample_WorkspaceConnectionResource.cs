// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;

namespace Azure.ResourceManager.MachineLearning
{
    public partial class Sample_WorkspaceConnectionResource
    {
        // CreateWorkspaceConnection
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateWorkspaceConnection()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/create.json
            // this example is just showing the usage of "WorkspaceConnections_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceConnectionResource created on azure
            // for more information of creating WorkspaceConnectionResource, please refer to the document of WorkspaceConnectionResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "resourceGroup-1";
            string workspaceName = "workspace-1";
            string connectionName = "connection-1";
            ResourceIdentifier workspaceConnectionResourceId = WorkspaceConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName);
            WorkspaceConnectionResource workspaceConnection = client.GetWorkspaceConnectionResource(workspaceConnectionResourceId);

            // invoke the operation
            WorkspaceConnectionData data = new WorkspaceConnectionData()
            {
                Category = "ACR",
                Target = "www.facebook.com",
                AuthType = "PAT",
                Value = "secrets",
            };
            ArmOperation<WorkspaceConnectionResource> lro = await workspaceConnection.UpdateAsync(WaitUntil.Completed, data);
            WorkspaceConnectionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkspaceConnectionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // GetWorkspaceConnection
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetWorkspaceConnection()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/get.json
            // this example is just showing the usage of "WorkspaceConnections_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceConnectionResource created on azure
            // for more information of creating WorkspaceConnectionResource, please refer to the document of WorkspaceConnectionResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "resourceGroup-1";
            string workspaceName = "workspace-1";
            string connectionName = "connection-1";
            ResourceIdentifier workspaceConnectionResourceId = WorkspaceConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName);
            WorkspaceConnectionResource workspaceConnection = client.GetWorkspaceConnectionResource(workspaceConnectionResourceId);

            // invoke the operation
            WorkspaceConnectionResource result = await workspaceConnection.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            WorkspaceConnectionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeleteWorkspaceConnection
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteWorkspaceConnection()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2022-02-01-preview/examples/WorkspaceConnection/delete.json
            // this example is just showing the usage of "WorkspaceConnections_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceConnectionResource created on azure
            // for more information of creating WorkspaceConnectionResource, please refer to the document of WorkspaceConnectionResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "resourceGroup-1";
            string workspaceName = "workspace-1";
            string connectionName = "connection-1";
            ResourceIdentifier workspaceConnectionResourceId = WorkspaceConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName);
            WorkspaceConnectionResource workspaceConnection = client.GetWorkspaceConnectionResource(workspaceConnectionResourceId);

            // invoke the operation
            await workspaceConnection.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
