// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.MachineLearning;
using Azure.ResourceManager.MachineLearning.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.MachineLearning.Samples
{
    public partial class Sample_RegistryResource
    {
        // List registries by subscription.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetRegistries_ListRegistriesBySubscription()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/listBySubscription.json
            // this example is just showing the usage of "Registries_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (RegistryResource item in subscriptionResource.GetRegistriesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                RegistryData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Delete Registry.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteRegistry()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/delete.json
            // this example is just showing the usage of "Registries_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RegistryResource created on azure
            // for more information of creating RegistryResource, please refer to the document of RegistryResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string registryName = "string";
            ResourceIdentifier registryResourceId = RegistryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, registryName);
            RegistryResource registry = client.GetRegistryResource(registryResourceId);

            // invoke the operation
            await registry.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get Registry with system created accounts.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetRegistryWithSystemCreatedAccounts()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/get-SystemCreated.json
            // this example is just showing the usage of "Registries_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RegistryResource created on azure
            // for more information of creating RegistryResource, please refer to the document of RegistryResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string registryName = "string";
            ResourceIdentifier registryResourceId = RegistryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, registryName);
            RegistryResource registry = client.GetRegistryResource(registryResourceId);

            // invoke the operation
            RegistryResource result = await registry.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RegistryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get Registry with user created accounts.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetRegistryWithUserCreatedAccounts()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/get-UserCreated.json
            // this example is just showing the usage of "Registries_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RegistryResource created on azure
            // for more information of creating RegistryResource, please refer to the document of RegistryResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string registryName = "string";
            ResourceIdentifier registryResourceId = RegistryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, registryName);
            RegistryResource registry = client.GetRegistryResource(registryResourceId);

            // invoke the operation
            RegistryResource result = await registry.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RegistryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Registry with system created accounts.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateRegistryWithSystemCreatedAccounts()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/update-SystemCreated.json
            // this example is just showing the usage of "Registries_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RegistryResource created on azure
            // for more information of creating RegistryResource, please refer to the document of RegistryResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string registryName = "string";
            ResourceIdentifier registryResourceId = RegistryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, registryName);
            RegistryResource registry = client.GetRegistryResource(registryResourceId);

            // invoke the operation
            RegistryPatch patch = new RegistryPatch()
            {
                Identity = new ManagedServiceIdentity("SystemAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("string")] = new UserAssignedIdentity(),
},
                },
                Sku = new MachineLearningSkuPatch()
                {
                    Capacity = 1,
                    Family = "string",
                    Name = "string",
                    Size = "string",
                    Tier = MachineLearningSkuTier.Basic,
                },
                Tags =
{
},
            };
            RegistryResource result = await registry.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RegistryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Registry with user created accounts.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateRegistryWithUserCreatedAccounts()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/update-UserCreated.json
            // this example is just showing the usage of "Registries_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RegistryResource created on azure
            // for more information of creating RegistryResource, please refer to the document of RegistryResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string registryName = "string";
            ResourceIdentifier registryResourceId = RegistryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, registryName);
            RegistryResource registry = client.GetRegistryResource(registryResourceId);

            // invoke the operation
            RegistryPatch patch = new RegistryPatch()
            {
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("string")] = new UserAssignedIdentity(),
},
                },
                Sku = new MachineLearningSkuPatch()
                {
                    Capacity = 1,
                    Family = "string",
                    Name = "string",
                    Size = "string",
                    Tier = MachineLearningSkuTier.Basic,
                },
                Tags =
{
},
            };
            RegistryResource result = await registry.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RegistryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Remove regions from registry
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task RemoveRegions_RemoveRegionsFromRegistry()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2023-06-01-preview/examples/Registries/removeRegions.json
            // this example is just showing the usage of "Registries_RemoveRegions" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RegistryResource created on azure
            // for more information of creating RegistryResource, please refer to the document of RegistryResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string registryName = "string";
            ResourceIdentifier registryResourceId = RegistryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, registryName);
            RegistryResource registry = client.GetRegistryResource(registryResourceId);

            // invoke the operation
            RegistryData data = new RegistryData(new AzureLocation("string"))
            {
                Identity = new ManagedServiceIdentity("None")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("string")] = new UserAssignedIdentity(),
},
                },
                Kind = "string",
                Sku = new MachineLearningSku("string")
                {
                    Tier = MachineLearningSkuTier.Free,
                    Size = "string",
                    Family = "string",
                    Capacity = 1,
                },
                DiscoveryUri = new Uri("string"),
                IntellectualPropertyPublisher = "string",
                ManagedResourceId = "string",
                MlFlowRegistryUri = new Uri("string"),
                PrivateEndpointConnections =
{
new RegistryPrivateEndpointConnection()
{
Id = "string",
Location = new AzureLocation("string"),
GroupIds =
{
"string"
},
PrivateEndpoint = new PrivateEndpointResource()
{
SubnetArmId = "string",
},
PrivateLinkServiceConnectionState = new RegistryPrivateLinkServiceConnectionState()
{
ActionsRequired = "string",
Description = "string",
Status = EndpointServiceConnectionStatus.Approved,
},
ProvisioningState = "string",
}
},
                PublicNetworkAccess = "string",
                RegionDetails =
{
new RegistryRegionArmDetails()
{
AcrDetails =
{
new AcrDetails()
{
SystemCreatedAcrAccount = new SystemCreatedAcrAccount()
{
AcrAccountName = "string",
AcrAccountSku = "string",
ArmResourceId = "string",
},
ArmResourceId = "string",
}
},
Location = new AzureLocation("string"),
StorageAccountDetails =
{
new StorageAccountDetails()
{
SystemCreatedStorageAccount = new SystemCreatedStorageAccount()
{
AllowBlobPublicAccess = false,
ArmResourceId = "string",
StorageAccountHnsEnabled = false,
StorageAccountName = "string",
StorageAccountType = "string",
},
ArmResourceId = "string",
}
},
}
},
                Tags =
{
},
            };
            ArmOperation<RegistryResource> lro = await registry.RemoveRegionsAsync(WaitUntil.Completed, data);
            RegistryResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RegistryData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
