// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.MachineLearning.Models;

namespace Azure.ResourceManager.MachineLearning.Samples
{
    public partial class Sample_RaiBlocklistPropertiesBasicResource
    {
        // Delete Rai Blocklist
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteRaiBlocklist()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-07-01-preview/examples/WorkspaceConnection/RaiBlocklist/delete.json
            // this example is just showing the usage of "ConnectionRaiBlocklist_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RaiBlocklistPropertiesBasicResource created on azure
            // for more information of creating RaiBlocklistPropertiesBasicResource, please refer to the document of RaiBlocklistPropertiesBasicResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "aml-workspace-name";
            string connectionName = "testConnection";
            string raiBlocklistName = "raiBlocklistName";
            ResourceIdentifier raiBlocklistPropertiesBasicResourceId = RaiBlocklistPropertiesBasicResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName, raiBlocklistName);
            RaiBlocklistPropertiesBasicResource raiBlocklistPropertiesBasicResource = client.GetRaiBlocklistPropertiesBasicResource(raiBlocklistPropertiesBasicResourceId);

            // invoke the operation
            await raiBlocklistPropertiesBasicResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get Rai Blocklist
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetRaiBlocklist()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-07-01-preview/examples/WorkspaceConnection/RaiBlocklist/get.json
            // this example is just showing the usage of "ConnectionRaiBlocklist_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RaiBlocklistPropertiesBasicResource created on azure
            // for more information of creating RaiBlocklistPropertiesBasicResource, please refer to the document of RaiBlocklistPropertiesBasicResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "aml-workspace-name";
            string connectionName = "testConnection";
            string raiBlocklistName = "raiBlocklistName";
            ResourceIdentifier raiBlocklistPropertiesBasicResourceId = RaiBlocklistPropertiesBasicResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName, raiBlocklistName);
            RaiBlocklistPropertiesBasicResource raiBlocklistPropertiesBasicResource = client.GetRaiBlocklistPropertiesBasicResource(raiBlocklistPropertiesBasicResourceId);

            // invoke the operation
            RaiBlocklistPropertiesBasicResource result = await raiBlocklistPropertiesBasicResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RaiBlocklistPropertiesBasicResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Rai Blocklist
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateRaiBlocklist()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-07-01-preview/examples/WorkspaceConnection/RaiBlocklist/create.json
            // this example is just showing the usage of "ConnectionRaiBlocklist_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RaiBlocklistPropertiesBasicResource created on azure
            // for more information of creating RaiBlocklistPropertiesBasicResource, please refer to the document of RaiBlocklistPropertiesBasicResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "aml-workspace-name";
            string connectionName = "testConnection";
            string raiBlocklistName = "raiBlocklistName";
            ResourceIdentifier raiBlocklistPropertiesBasicResourceId = RaiBlocklistPropertiesBasicResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName, raiBlocklistName);
            RaiBlocklistPropertiesBasicResource raiBlocklistPropertiesBasicResource = client.GetRaiBlocklistPropertiesBasicResource(raiBlocklistPropertiesBasicResourceId);

            // invoke the operation
            RaiBlocklistPropertiesBasicResourceData data = new RaiBlocklistPropertiesBasicResourceData(new RaiBlocklistProperties()
            {
                Description = "Basic blocklist description",
            });
            ArmOperation<RaiBlocklistPropertiesBasicResource> lro = await raiBlocklistPropertiesBasicResource.UpdateAsync(WaitUntil.Completed, data);
            RaiBlocklistPropertiesBasicResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RaiBlocklistPropertiesBasicResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Bulk Rai Blocklist Items
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task AddBulkConnectionRaiBlocklistItem_CreateBulkRaiBlocklistItems()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-07-01-preview/examples/WorkspaceConnection/RaiBlocklistItem/addBulk.json
            // this example is just showing the usage of "ConnectionRaiBlocklistItem_AddBulk" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RaiBlocklistPropertiesBasicResource created on azure
            // for more information of creating RaiBlocklistPropertiesBasicResource, please refer to the document of RaiBlocklistPropertiesBasicResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "aml-workspace-name";
            string connectionName = "testConnection";
            string raiBlocklistName = "raiBlocklistName";
            ResourceIdentifier raiBlocklistPropertiesBasicResourceId = RaiBlocklistPropertiesBasicResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName, raiBlocklistName);
            RaiBlocklistPropertiesBasicResource raiBlocklistPropertiesBasicResource = client.GetRaiBlocklistPropertiesBasicResource(raiBlocklistPropertiesBasicResourceId);

            // invoke the operation
            IEnumerable<RaiBlocklistItemBulkRequest> content = new RaiBlocklistItemBulkRequest[]
            {
new RaiBlocklistItemBulkRequest()
{
Name = "myblocklistitem1",
Properties = new RaiBlocklistItemProperties()
{
IsRegex = true,
Pattern = "^[a-z0-9_-]{2,16}$",
},
},new RaiBlocklistItemBulkRequest()
{
Name = "myblocklistitem2",
Properties = new RaiBlocklistItemProperties()
{
IsRegex = false,
Pattern = "blockwords",
},
}
            };
            ArmOperation<IList<RaiBlocklistItemPropertiesBasicResourceData>> lro = await raiBlocklistPropertiesBasicResource.AddBulkConnectionRaiBlocklistItemAsync(WaitUntil.Completed, content);
            IList<RaiBlocklistItemPropertiesBasicResourceData> result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Delete Bulk Rai Blocklist Items
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DeleteBulkConnectionRaiBlocklistItem_DeleteBulkRaiBlocklistItems()
        {
            // Generated from example definition: specification/machinelearningservices/resource-manager/Microsoft.MachineLearningServices/preview/2024-07-01-preview/examples/WorkspaceConnection/RaiBlocklistItem/deleteBulk.json
            // this example is just showing the usage of "ConnectionRaiBlocklistItem_DeleteBulk" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RaiBlocklistPropertiesBasicResource created on azure
            // for more information of creating RaiBlocklistPropertiesBasicResource, please refer to the document of RaiBlocklistPropertiesBasicResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "test-rg";
            string workspaceName = "aml-workspace-name";
            string connectionName = "testConnection";
            string raiBlocklistName = "raiBlocklistName";
            ResourceIdentifier raiBlocklistPropertiesBasicResourceId = RaiBlocklistPropertiesBasicResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, connectionName, raiBlocklistName);
            RaiBlocklistPropertiesBasicResource raiBlocklistPropertiesBasicResource = client.GetRaiBlocklistPropertiesBasicResource(raiBlocklistPropertiesBasicResourceId);

            // invoke the operation
            BinaryData body = BinaryData.FromObjectAsJson(new object[] { "myblocklistitem1", "myblocklistitem2" });
            await raiBlocklistPropertiesBasicResource.DeleteBulkConnectionRaiBlocklistItemAsync(WaitUntil.Completed, body);

            Console.WriteLine($"Succeeded");
        }
    }
}
