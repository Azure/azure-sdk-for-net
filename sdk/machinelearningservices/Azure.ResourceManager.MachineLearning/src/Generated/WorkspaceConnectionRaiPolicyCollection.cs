// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.MachineLearning
{
    /// <summary>
    /// A class representing a collection of <see cref="WorkspaceConnectionRaiPolicyResource"/> and their operations.
    /// Each <see cref="WorkspaceConnectionRaiPolicyResource"/> in the collection will belong to the same instance of <see cref="MachineLearningWorkspaceConnectionResource"/>.
    /// To get a <see cref="WorkspaceConnectionRaiPolicyCollection"/> instance call the GetWorkspaceConnectionRaiPolicies method from an instance of <see cref="MachineLearningWorkspaceConnectionResource"/>.
    /// </summary>
    public partial class WorkspaceConnectionRaiPolicyCollection : ArmCollection, IEnumerable<WorkspaceConnectionRaiPolicyResource>, IAsyncEnumerable<WorkspaceConnectionRaiPolicyResource>
    {
        private readonly ClientDiagnostics _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics;
        private readonly ConnectionRaiPolicyRestOperations _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient;
        private readonly ClientDiagnostics _workspaceConnectionRaiPolicyConnectionRaiPoliciesClientDiagnostics;
        private readonly ConnectionRaiPoliciesRestOperations _workspaceConnectionRaiPolicyConnectionRaiPoliciesRestClient;

        /// <summary> Initializes a new instance of the <see cref="WorkspaceConnectionRaiPolicyCollection"/> class for mocking. </summary>
        protected WorkspaceConnectionRaiPolicyCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WorkspaceConnectionRaiPolicyCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal WorkspaceConnectionRaiPolicyCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.MachineLearning", WorkspaceConnectionRaiPolicyResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(WorkspaceConnectionRaiPolicyResource.ResourceType, out string workspaceConnectionRaiPolicyConnectionRaiPolicyApiVersion);
            _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient = new ConnectionRaiPolicyRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, workspaceConnectionRaiPolicyConnectionRaiPolicyApiVersion);
            _workspaceConnectionRaiPolicyConnectionRaiPoliciesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.MachineLearning", WorkspaceConnectionRaiPolicyResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(WorkspaceConnectionRaiPolicyResource.ResourceType, out string workspaceConnectionRaiPolicyConnectionRaiPoliciesApiVersion);
            _workspaceConnectionRaiPolicyConnectionRaiPoliciesRestClient = new ConnectionRaiPoliciesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, workspaceConnectionRaiPolicyConnectionRaiPoliciesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != MachineLearningWorkspaceConnectionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, MachineLearningWorkspaceConnectionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Update the state of specified Content Filters associated with the Azure OpenAI connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="data"> The <see cref="RaiPolicyPropertiesBasicResourceData"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<WorkspaceConnectionRaiPolicyResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string raiPolicyName, RaiPolicyPropertiesBasicResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, data, cancellationToken).ConfigureAwait(false);
                var operation = new MachineLearningArmOperation<WorkspaceConnectionRaiPolicyResource>(new WorkspaceConnectionRaiPolicyOperationSource(Client), _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics, Pipeline, _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update the state of specified Content Filters associated with the Azure OpenAI connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Create</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="data"> The <see cref="RaiPolicyPropertiesBasicResourceData"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<WorkspaceConnectionRaiPolicyResource> CreateOrUpdate(WaitUntil waitUntil, string raiPolicyName, RaiPolicyPropertiesBasicResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, data, cancellationToken);
                var operation = new MachineLearningArmOperation<WorkspaceConnectionRaiPolicyResource>(new WorkspaceConnectionRaiPolicyOperationSource(Client), _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics, Pipeline, _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the specified Content Filters associated with the Azure OpenAI connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> is null. </exception>
        public virtual async Task<Response<WorkspaceConnectionRaiPolicyResource>> GetAsync(string raiPolicyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.Get");
            scope.Start();
            try
            {
                var response = await _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkspaceConnectionRaiPolicyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the specified Content Filters associated with the Azure OpenAI connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> is null. </exception>
        public virtual Response<WorkspaceConnectionRaiPolicyResource> Get(string raiPolicyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.Get");
            scope.Start();
            try
            {
                var response = _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkspaceConnectionRaiPolicyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List the specified Content Filters associated with the Azure OpenAI connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicies_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkspaceConnectionRaiPolicyResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkspaceConnectionRaiPolicyResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _workspaceConnectionRaiPolicyConnectionRaiPoliciesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _workspaceConnectionRaiPolicyConnectionRaiPoliciesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new WorkspaceConnectionRaiPolicyResource(Client, RaiPolicyPropertiesBasicResourceData.DeserializeRaiPolicyPropertiesBasicResourceData(e)), _workspaceConnectionRaiPolicyConnectionRaiPoliciesClientDiagnostics, Pipeline, "WorkspaceConnectionRaiPolicyCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List the specified Content Filters associated with the Azure OpenAI connection.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicies_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkspaceConnectionRaiPolicyResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkspaceConnectionRaiPolicyResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _workspaceConnectionRaiPolicyConnectionRaiPoliciesRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _workspaceConnectionRaiPolicyConnectionRaiPoliciesRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new WorkspaceConnectionRaiPolicyResource(Client, RaiPolicyPropertiesBasicResourceData.DeserializeRaiPolicyPropertiesBasicResourceData(e)), _workspaceConnectionRaiPolicyConnectionRaiPoliciesClientDiagnostics, Pipeline, "WorkspaceConnectionRaiPolicyCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string raiPolicyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.Exists");
            scope.Start();
            try
            {
                var response = await _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> is null. </exception>
        public virtual Response<bool> Exists(string raiPolicyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.Exists");
            scope.Start();
            try
            {
                var response = _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> is null. </exception>
        public virtual async Task<NullableResponse<WorkspaceConnectionRaiPolicyResource>> GetIfExistsAsync(string raiPolicyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<WorkspaceConnectionRaiPolicyResource>(response.GetRawResponse());
                return Response.FromValue(new WorkspaceConnectionRaiPolicyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}/raiPolicies/{raiPolicyName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConnectionRaiPolicy_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-07-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="WorkspaceConnectionRaiPolicyResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="raiPolicyName"> Name of the Rai Policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="raiPolicyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="raiPolicyName"/> is null. </exception>
        public virtual NullableResponse<WorkspaceConnectionRaiPolicyResource> GetIfExists(string raiPolicyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(raiPolicyName, nameof(raiPolicyName));

            using var scope = _workspaceConnectionRaiPolicyConnectionRaiPolicyClientDiagnostics.CreateScope("WorkspaceConnectionRaiPolicyCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _workspaceConnectionRaiPolicyConnectionRaiPolicyRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, raiPolicyName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<WorkspaceConnectionRaiPolicyResource>(response.GetRawResponse());
                return Response.FromValue(new WorkspaceConnectionRaiPolicyResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<WorkspaceConnectionRaiPolicyResource> IEnumerable<WorkspaceConnectionRaiPolicyResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<WorkspaceConnectionRaiPolicyResource> IAsyncEnumerable<WorkspaceConnectionRaiPolicyResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
