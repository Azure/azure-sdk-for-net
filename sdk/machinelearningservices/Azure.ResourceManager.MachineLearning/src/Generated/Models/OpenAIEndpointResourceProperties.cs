// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The OpenAIEndpointResourceProperties. </summary>
    public partial class OpenAIEndpointResourceProperties : EndpointResourceProperties
    {
        /// <summary> Initializes a new instance of <see cref="OpenAIEndpointResourceProperties"/>. </summary>
        public OpenAIEndpointResourceProperties()
        {
            EndpointType = EndpointType.AzureOpenAI;
        }

        /// <summary> Initializes a new instance of <see cref="OpenAIEndpointResourceProperties"/>. </summary>
        /// <param name="associatedResourceId"> Byo resource id for creating the built-in model service endpoints. </param>
        /// <param name="deployments"> Deployments info. </param>
        /// <param name="endpointType"> Type of the endpoint. </param>
        /// <param name="endpointUri"> Uri of the endpoint. </param>
        /// <param name="failureReason"> The failure reason if the creation failed. </param>
        /// <param name="location">
        /// Location of the endpoint.
        /// Since input dto and when parse endpoint resource share the same contract
        /// this Location field is just for parse the endpoint resource info
        /// we won't let customer specify the endpoint resource location since we will create it the same location as workspace
        /// </param>
        /// <param name="name"> Name of the endpoint. </param>
        /// <param name="provisioningState"> Read-only provision state status property. </param>
        /// <param name="shouldCreateAiServicesEndpoint"> Whether the proxy (non-byo) endpoint is a regular endpoint or a OneKeyV2 AI services account endpoint. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OpenAIEndpointResourceProperties(ResourceIdentifier associatedResourceId, IList<EndpointDeploymentResourcePropertiesBasicResourceData> deployments, EndpointType endpointType, Uri endpointUri, string failureReason, AzureLocation? location, string name, DefaultResourceProvisioningState? provisioningState, bool? shouldCreateAiServicesEndpoint, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(associatedResourceId, deployments, endpointType, endpointUri, failureReason, location, name, provisioningState, shouldCreateAiServicesEndpoint, serializedAdditionalRawData)
        {
            EndpointType = endpointType;
        }
    }
}
