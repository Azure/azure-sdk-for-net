// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class RayDistributionConfiguration : IUtf8JsonSerializable, IJsonModel<RayDistributionConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RayDistributionConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RayDistributionConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RayDistributionConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RayDistributionConfiguration)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Address != null)
            {
                if (Address != null)
                {
                    writer.WritePropertyName("address"u8);
                    writer.WriteStringValue(Address);
                }
                else
                {
                    writer.WriteNull("address");
                }
            }
            if (DashboardPort.HasValue)
            {
                if (DashboardPort != null)
                {
                    writer.WritePropertyName("dashboardPort"u8);
                    writer.WriteNumberValue(DashboardPort.Value);
                }
                else
                {
                    writer.WriteNull("dashboardPort");
                }
            }
            if (HeadNodeAdditionalArgs != null)
            {
                if (HeadNodeAdditionalArgs != null)
                {
                    writer.WritePropertyName("headNodeAdditionalArgs"u8);
                    writer.WriteStringValue(HeadNodeAdditionalArgs);
                }
                else
                {
                    writer.WriteNull("headNodeAdditionalArgs");
                }
            }
            if (IncludeDashboard.HasValue)
            {
                if (IncludeDashboard != null)
                {
                    writer.WritePropertyName("includeDashboard"u8);
                    writer.WriteBooleanValue(IncludeDashboard.Value);
                }
                else
                {
                    writer.WriteNull("includeDashboard");
                }
            }
            if (Port.HasValue)
            {
                if (Port != null)
                {
                    writer.WritePropertyName("port"u8);
                    writer.WriteNumberValue(Port.Value);
                }
                else
                {
                    writer.WriteNull("port");
                }
            }
            if (WorkerNodeAdditionalArgs != null)
            {
                if (WorkerNodeAdditionalArgs != null)
                {
                    writer.WritePropertyName("workerNodeAdditionalArgs"u8);
                    writer.WriteStringValue(WorkerNodeAdditionalArgs);
                }
                else
                {
                    writer.WriteNull("workerNodeAdditionalArgs");
                }
            }
            writer.WritePropertyName("distributionType"u8);
            writer.WriteStringValue(DistributionType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RayDistributionConfiguration IJsonModel<RayDistributionConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RayDistributionConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(RayDistributionConfiguration)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRayDistributionConfiguration(document.RootElement, options);
        }

        internal static RayDistributionConfiguration DeserializeRayDistributionConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> address = default;
            Optional<int?> dashboardPort = default;
            Optional<string> headNodeAdditionalArgs = default;
            Optional<bool?> includeDashboard = default;
            Optional<int?> port = default;
            Optional<string> workerNodeAdditionalArgs = default;
            DistributionType distributionType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("address"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        address = null;
                        continue;
                    }
                    address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dashboardPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dashboardPort = null;
                        continue;
                    }
                    dashboardPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("headNodeAdditionalArgs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        headNodeAdditionalArgs = null;
                        continue;
                    }
                    headNodeAdditionalArgs = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("includeDashboard"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        includeDashboard = null;
                        continue;
                    }
                    includeDashboard = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("port"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        port = null;
                        continue;
                    }
                    port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("workerNodeAdditionalArgs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        workerNodeAdditionalArgs = null;
                        continue;
                    }
                    workerNodeAdditionalArgs = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("distributionType"u8))
                {
                    distributionType = new DistributionType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RayDistributionConfiguration(
                distributionType,
                serializedAdditionalRawData,
                address.Value,
                Optional.ToNullable(dashboardPort),
                headNodeAdditionalArgs.Value,
                Optional.ToNullable(includeDashboard),
                Optional.ToNullable(port),
                workerNodeAdditionalArgs.Value);
        }

        BinaryData IPersistableModel<RayDistributionConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RayDistributionConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(RayDistributionConfiguration)} does not support '{options.Format}' format.");
            }
        }

        RayDistributionConfiguration IPersistableModel<RayDistributionConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RayDistributionConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRayDistributionConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(RayDistributionConfiguration)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RayDistributionConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
