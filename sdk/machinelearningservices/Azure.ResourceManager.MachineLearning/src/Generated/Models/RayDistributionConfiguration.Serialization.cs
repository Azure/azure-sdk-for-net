// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class RayDistributionConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Address))
            {
                if (Address != null)
                {
                    writer.WritePropertyName("address"u8);
                    writer.WriteStringValue(Address);
                }
                else
                {
                    writer.WriteNull("address");
                }
            }
            if (Optional.IsDefined(DashboardPort))
            {
                if (DashboardPort != null)
                {
                    writer.WritePropertyName("dashboardPort"u8);
                    writer.WriteNumberValue(DashboardPort.Value);
                }
                else
                {
                    writer.WriteNull("dashboardPort");
                }
            }
            if (Optional.IsDefined(HeadNodeAdditionalArgs))
            {
                if (HeadNodeAdditionalArgs != null)
                {
                    writer.WritePropertyName("headNodeAdditionalArgs"u8);
                    writer.WriteStringValue(HeadNodeAdditionalArgs);
                }
                else
                {
                    writer.WriteNull("headNodeAdditionalArgs");
                }
            }
            if (Optional.IsDefined(IncludeDashboard))
            {
                if (IncludeDashboard != null)
                {
                    writer.WritePropertyName("includeDashboard"u8);
                    writer.WriteBooleanValue(IncludeDashboard.Value);
                }
                else
                {
                    writer.WriteNull("includeDashboard");
                }
            }
            if (Optional.IsDefined(Port))
            {
                if (Port != null)
                {
                    writer.WritePropertyName("port"u8);
                    writer.WriteNumberValue(Port.Value);
                }
                else
                {
                    writer.WriteNull("port");
                }
            }
            if (Optional.IsDefined(WorkerNodeAdditionalArgs))
            {
                if (WorkerNodeAdditionalArgs != null)
                {
                    writer.WritePropertyName("workerNodeAdditionalArgs"u8);
                    writer.WriteStringValue(WorkerNodeAdditionalArgs);
                }
                else
                {
                    writer.WriteNull("workerNodeAdditionalArgs");
                }
            }
            writer.WritePropertyName("distributionType"u8);
            writer.WriteStringValue(DistributionType.ToString());
            writer.WriteEndObject();
        }

        internal static RayDistributionConfiguration DeserializeRayDistributionConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> address = default;
            Optional<int?> dashboardPort = default;
            Optional<string> headNodeAdditionalArgs = default;
            Optional<bool?> includeDashboard = default;
            Optional<int?> port = default;
            Optional<string> workerNodeAdditionalArgs = default;
            DistributionType distributionType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("address"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        address = null;
                        continue;
                    }
                    address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dashboardPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dashboardPort = null;
                        continue;
                    }
                    dashboardPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("headNodeAdditionalArgs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        headNodeAdditionalArgs = null;
                        continue;
                    }
                    headNodeAdditionalArgs = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("includeDashboard"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        includeDashboard = null;
                        continue;
                    }
                    includeDashboard = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("port"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        port = null;
                        continue;
                    }
                    port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("workerNodeAdditionalArgs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        workerNodeAdditionalArgs = null;
                        continue;
                    }
                    workerNodeAdditionalArgs = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("distributionType"u8))
                {
                    distributionType = new DistributionType(property.Value.GetString());
                    continue;
                }
            }
            return new RayDistributionConfiguration(distributionType, address.Value, Optional.ToNullable(dashboardPort), headNodeAdditionalArgs.Value, Optional.ToNullable(includeDashboard), Optional.ToNullable(port), workerNodeAdditionalArgs.Value);
        }
    }
}
