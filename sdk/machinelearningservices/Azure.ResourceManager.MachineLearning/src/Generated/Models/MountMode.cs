// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Mount Mode. </summary>
    public readonly partial struct MountMode : IEquatable<MountMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MountMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MountMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadOnlyValue = "ReadOnly";
        private const string ReadWriteValue = "ReadWrite";

        /// <summary> ReadOnly. </summary>
        public static MountMode ReadOnly { get; } = new MountMode(ReadOnlyValue);
        /// <summary> ReadWrite. </summary>
        public static MountMode ReadWrite { get; } = new MountMode(ReadWriteValue);
        /// <summary> Determines if two <see cref="MountMode"/> values are the same. </summary>
        public static bool operator ==(MountMode left, MountMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MountMode"/> values are not the same. </summary>
        public static bool operator !=(MountMode left, MountMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MountMode"/>. </summary>
        public static implicit operator MountMode(string value) => new MountMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MountMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MountMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
