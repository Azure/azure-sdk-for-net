// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Generation safety quality monitoring signal definition. </summary>
    public partial class GenerationSafetyQualityMonitoringSignal : MonitoringSignalBase
    {
        /// <summary> Initializes a new instance of <see cref="GenerationSafetyQualityMonitoringSignal"/>. </summary>
        /// <param name="metricThresholds"> [Required] Gets or sets the metrics to calculate and the corresponding thresholds. </param>
        /// <param name="samplingRate"> [Required] The sample rate of the target data, should be greater than 0 and at most 1. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="metricThresholds"/> is null. </exception>
        public GenerationSafetyQualityMonitoringSignal(IEnumerable<GenerationSafetyQualityMetricThreshold> metricThresholds, double samplingRate)
        {
            Argument.AssertNotNull(metricThresholds, nameof(metricThresholds));

            MetricThresholds = metricThresholds.ToList();
            ProductionData = new ChangeTrackingList<MonitoringInputDataBase>();
            SamplingRate = samplingRate;
            SignalType = MonitoringSignalType.GenerationSafetyQuality;
        }

        /// <summary> Initializes a new instance of <see cref="GenerationSafetyQualityMonitoringSignal"/>. </summary>
        /// <param name="mode"> The current notification mode for this signal. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="signalType"> [Required] Specifies the type of signal to monitor. </param>
        /// <param name="metricThresholds"> [Required] Gets or sets the metrics to calculate and the corresponding thresholds. </param>
        /// <param name="productionData">
        /// Gets or sets the target data for computing metrics.
        /// Please note <see cref="MonitoringInputDataBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FixedInputData"/>, <see cref="StaticInputData"/> and <see cref="TrailingInputData"/>.
        /// </param>
        /// <param name="samplingRate"> [Required] The sample rate of the target data, should be greater than 0 and at most 1. </param>
        /// <param name="workspaceConnectionId"> Gets or sets the workspace connection ID used to connect to the content generation endpoint. </param>
        internal GenerationSafetyQualityMonitoringSignal(MonitoringNotificationMode? mode, IDictionary<string, string> properties, MonitoringSignalType signalType, IList<GenerationSafetyQualityMetricThreshold> metricThresholds, IList<MonitoringInputDataBase> productionData, double samplingRate, string workspaceConnectionId) : base(mode, properties, signalType)
        {
            MetricThresholds = metricThresholds;
            ProductionData = productionData;
            SamplingRate = samplingRate;
            WorkspaceConnectionId = workspaceConnectionId;
            SignalType = signalType;
        }

        /// <summary> [Required] Gets or sets the metrics to calculate and the corresponding thresholds. </summary>
        public IList<GenerationSafetyQualityMetricThreshold> MetricThresholds { get; }
        /// <summary>
        /// Gets or sets the target data for computing metrics.
        /// Please note <see cref="MonitoringInputDataBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="FixedInputData"/>, <see cref="StaticInputData"/> and <see cref="TrailingInputData"/>.
        /// </summary>
        public IList<MonitoringInputDataBase> ProductionData { get; set; }
        /// <summary> [Required] The sample rate of the target data, should be greater than 0 and at most 1. </summary>
        public double SamplingRate { get; set; }
        /// <summary> Gets or sets the workspace connection ID used to connect to the content generation endpoint. </summary>
        public string WorkspaceConnectionId { get; set; }
    }
}
