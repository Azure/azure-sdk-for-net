// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class DatasetExportSummary : IUtf8JsonSerializable, IJsonModel<DatasetExportSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DatasetExportSummary>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<DatasetExportSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<DatasetExportSummary>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<DatasetExportSummary>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LabeledAssetName))
                {
                    if (LabeledAssetName != null)
                    {
                        writer.WritePropertyName("labeledAssetName"u8);
                        writer.WriteStringValue(LabeledAssetName);
                    }
                    else
                    {
                        writer.WriteNull("labeledAssetName");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(EndOn))
                {
                    if (EndOn != null)
                    {
                        writer.WritePropertyName("endDateTime"u8);
                        writer.WriteStringValue(EndOn.Value, "O");
                    }
                    else
                    {
                        writer.WriteNull("endDateTime");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ExportedRowCount))
                {
                    if (ExportedRowCount != null)
                    {
                        writer.WritePropertyName("exportedRowCount"u8);
                        writer.WriteNumberValue(ExportedRowCount.Value);
                    }
                    else
                    {
                        writer.WriteNull("exportedRowCount");
                    }
                }
            }
            writer.WritePropertyName("format"u8);
            writer.WriteStringValue(Format.ToString());
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LabelingJobId))
                {
                    if (LabelingJobId != null)
                    {
                        writer.WritePropertyName("labelingJobId"u8);
                        writer.WriteStringValue(LabelingJobId);
                    }
                    else
                    {
                        writer.WriteNull("labelingJobId");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(StartOn))
                {
                    if (StartOn != null)
                    {
                        writer.WritePropertyName("startDateTime"u8);
                        writer.WriteStringValue(StartOn.Value, "O");
                    }
                    else
                    {
                        writer.WriteNull("startDateTime");
                    }
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DatasetExportSummary IJsonModel<DatasetExportSummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DatasetExportSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDatasetExportSummary(document.RootElement, options);
        }

        internal static DatasetExportSummary DeserializeDatasetExportSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> labeledAssetName = default;
            Optional<DateTimeOffset?> endDateTime = default;
            Optional<long?> exportedRowCount = default;
            ExportFormatType format = default;
            Optional<string> labelingJobId = default;
            Optional<DateTimeOffset?> startDateTime = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("labeledAssetName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        labeledAssetName = null;
                        continue;
                    }
                    labeledAssetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endDateTime = null;
                        continue;
                    }
                    endDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("exportedRowCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        exportedRowCount = null;
                        continue;
                    }
                    exportedRowCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("format"u8))
                {
                    format = new ExportFormatType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("labelingJobId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        labelingJobId = null;
                        continue;
                    }
                    labelingJobId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        startDateTime = null;
                        continue;
                    }
                    startDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DatasetExportSummary(Optional.ToNullable(endDateTime), Optional.ToNullable(exportedRowCount), format, labelingJobId.Value, Optional.ToNullable(startDateTime), serializedAdditionalRawData, labeledAssetName.Value);
        }

        BinaryData IPersistableModel<DatasetExportSummary>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DatasetExportSummary)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        DatasetExportSummary IPersistableModel<DatasetExportSummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DatasetExportSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeDatasetExportSummary(document.RootElement, options);
        }

        string IPersistableModel<DatasetExportSummary>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
