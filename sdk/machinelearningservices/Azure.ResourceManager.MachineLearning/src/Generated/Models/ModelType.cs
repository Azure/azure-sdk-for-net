// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The async operation state. </summary>
    public readonly partial struct ModelType : IEquatable<ModelType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ModelType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ModelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CustomModelValue = "CustomModel";
        private const string MLFlowModelValue = "MLFlowModel";
        private const string TritonModelValue = "TritonModel";

        /// <summary> CustomModel. </summary>
        public static ModelType CustomModel { get; } = new ModelType(CustomModelValue);
        /// <summary> MLFlowModel. </summary>
        public static ModelType MLFlowModel { get; } = new ModelType(MLFlowModelValue);
        /// <summary> TritonModel. </summary>
        public static ModelType TritonModel { get; } = new ModelType(TritonModelValue);
        /// <summary> Determines if two <see cref="ModelType"/> values are the same. </summary>
        public static bool operator ==(ModelType left, ModelType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModelType"/> values are not the same. </summary>
        public static bool operator !=(ModelType left, ModelType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModelType"/>. </summary>
        public static implicit operator ModelType(string value) => new ModelType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModelType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModelType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
