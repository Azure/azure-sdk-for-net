// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The ManagedPERequirement. </summary>
    public readonly partial struct ManagedPERequirement : IEquatable<ManagedPERequirement>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ManagedPERequirement"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ManagedPERequirement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequiredValue = "Required";
        private const string NotRequiredValue = "NotRequired";
        private const string NotApplicableValue = "NotApplicable";

        /// <summary> Required. </summary>
        public static ManagedPERequirement Required { get; } = new ManagedPERequirement(RequiredValue);
        /// <summary> NotRequired. </summary>
        public static ManagedPERequirement NotRequired { get; } = new ManagedPERequirement(NotRequiredValue);
        /// <summary> NotApplicable. </summary>
        public static ManagedPERequirement NotApplicable { get; } = new ManagedPERequirement(NotApplicableValue);
        /// <summary> Determines if two <see cref="ManagedPERequirement"/> values are the same. </summary>
        public static bool operator ==(ManagedPERequirement left, ManagedPERequirement right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ManagedPERequirement"/> values are not the same. </summary>
        public static bool operator !=(ManagedPERequirement left, ManagedPERequirement right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ManagedPERequirement"/>. </summary>
        public static implicit operator ManagedPERequirement(string value) => new ManagedPERequirement(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ManagedPERequirement other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ManagedPERequirement other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
