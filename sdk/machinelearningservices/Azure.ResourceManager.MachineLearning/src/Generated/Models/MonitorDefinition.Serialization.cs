// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MonitorDefinition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AlertNotificationSetting))
            {
                if (AlertNotificationSetting != null)
                {
                    writer.WritePropertyName("alertNotificationSetting"u8);
                    writer.WriteObjectValue(AlertNotificationSetting);
                }
                else
                {
                    writer.WriteNull("alertNotificationSetting");
                }
            }
            writer.WritePropertyName("computeConfiguration"u8);
            writer.WriteObjectValue(ComputeConfiguration);
            if (Optional.IsDefined(MonitoringTarget))
            {
                if (MonitoringTarget != null)
                {
                    writer.WritePropertyName("monitoringTarget"u8);
                    writer.WriteObjectValue(MonitoringTarget);
                }
                else
                {
                    writer.WriteNull("monitoringTarget");
                }
            }
            writer.WritePropertyName("signals"u8);
            writer.WriteStartObject();
            foreach (var item in Signals)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static MonitorDefinition DeserializeMonitorDefinition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<MonitoringAlertNotificationSettingsBase> alertNotificationSetting = default;
            MonitorComputeConfigurationBase computeConfiguration = default;
            Optional<MonitoringTarget> monitoringTarget = default;
            IDictionary<string, MonitoringSignalBase> signals = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alertNotificationSetting"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        alertNotificationSetting = null;
                        continue;
                    }
                    alertNotificationSetting = MonitoringAlertNotificationSettingsBase.DeserializeMonitoringAlertNotificationSettingsBase(property.Value);
                    continue;
                }
                if (property.NameEquals("computeConfiguration"u8))
                {
                    computeConfiguration = MonitorComputeConfigurationBase.DeserializeMonitorComputeConfigurationBase(property.Value);
                    continue;
                }
                if (property.NameEquals("monitoringTarget"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        monitoringTarget = null;
                        continue;
                    }
                    monitoringTarget = MonitoringTarget.DeserializeMonitoringTarget(property.Value);
                    continue;
                }
                if (property.NameEquals("signals"u8))
                {
                    Dictionary<string, MonitoringSignalBase> dictionary = new Dictionary<string, MonitoringSignalBase>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, MonitoringSignalBase.DeserializeMonitoringSignalBase(property0.Value));
                    }
                    signals = dictionary;
                    continue;
                }
            }
            return new MonitorDefinition(alertNotificationSetting.Value, computeConfiguration, monitoringTarget.Value, signals);
        }
    }
}
