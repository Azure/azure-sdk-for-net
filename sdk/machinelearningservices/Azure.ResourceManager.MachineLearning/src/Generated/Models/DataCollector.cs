// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The DataCollector. </summary>
    public partial class DataCollector
    {
        /// <summary> Initializes a new instance of <see cref="DataCollector"/>. </summary>
        /// <param name="collections">
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="collections"/> is null. </exception>
        public DataCollector(IDictionary<string, DataCollectionConfiguration> collections)
        {
            Argument.AssertNotNull(collections, nameof(collections));

            Collections = collections;
        }

        /// <summary> Initializes a new instance of <see cref="DataCollector"/>. </summary>
        /// <param name="collections">
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
        /// </param>
        /// <param name="requestLogging"> The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional. </param>
        /// <param name="rollingRate">
        /// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
        /// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        /// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        /// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
        /// </param>
        internal DataCollector(IDictionary<string, DataCollectionConfiguration> collections, RequestLogging requestLogging, RollingRateType? rollingRate)
        {
            Collections = collections;
            RequestLogging = requestLogging;
            RollingRate = rollingRate;
        }

        /// <summary>
        /// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
        /// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
        /// </summary>
        public IDictionary<string, DataCollectionConfiguration> Collections { get; }
        /// <summary> The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional. </summary>
        internal RequestLogging RequestLogging { get; set; }
        /// <summary> For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload. </summary>
        public IList<string> RequestLoggingCaptureHeaders
        {
            get => RequestLogging is null ? default : RequestLogging.CaptureHeaders;
            set
            {
                if (RequestLogging is null)
                    RequestLogging = new RequestLogging();
                RequestLogging.CaptureHeaders = value;
            }
        }

        /// <summary>
        /// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
        /// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
        /// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
        /// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
        /// </summary>
        public RollingRateType? RollingRate { get; set; }
    }
}
