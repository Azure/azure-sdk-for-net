// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningComputeInstanceProperties : IUtf8JsonSerializable, IModelJsonSerializable<MachineLearningComputeInstanceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MachineLearningComputeInstanceProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MachineLearningComputeInstanceProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(VmSize))
            {
                writer.WritePropertyName("vmSize"u8);
                writer.WriteStringValue(VmSize);
            }
            if (Optional.IsDefined(Subnet))
            {
                if (Subnet != null)
                {
                    writer.WritePropertyName("subnet"u8);
                    writer.WriteObjectValue(Subnet);
                }
                else
                {
                    writer.WriteNull("subnet");
                }
            }
            if (Optional.IsDefined(ApplicationSharingPolicy))
            {
                writer.WritePropertyName("applicationSharingPolicy"u8);
                writer.WriteStringValue(ApplicationSharingPolicy.Value.ToString());
            }
            if (Optional.IsDefined(SshSettings))
            {
                if (SshSettings != null)
                {
                    writer.WritePropertyName("sshSettings"u8);
                    writer.WriteObjectValue(SshSettings);
                }
                else
                {
                    writer.WriteNull("sshSettings");
                }
            }
            if (Optional.IsDefined(ComputeInstanceAuthorizationType))
            {
                if (ComputeInstanceAuthorizationType != null)
                {
                    writer.WritePropertyName("computeInstanceAuthorizationType"u8);
                    writer.WriteStringValue(ComputeInstanceAuthorizationType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("computeInstanceAuthorizationType");
                }
            }
            if (Optional.IsDefined(PersonalComputeInstanceSettings))
            {
                if (PersonalComputeInstanceSettings != null)
                {
                    writer.WritePropertyName("personalComputeInstanceSettings"u8);
                    writer.WriteObjectValue(PersonalComputeInstanceSettings);
                }
                else
                {
                    writer.WriteNull("personalComputeInstanceSettings");
                }
            }
            if (Optional.IsDefined(SetupScriptsSettings))
            {
                if (SetupScriptsSettings != null)
                {
                    writer.WritePropertyName("setupScripts"u8);
                    writer.WriteObjectValue(SetupScriptsSettings);
                }
                else
                {
                    writer.WriteNull("setupScripts");
                }
            }
            if (Optional.IsDefined(EnableNodePublicIP))
            {
                writer.WritePropertyName("enableNodePublicIp"u8);
                writer.WriteBooleanValue(EnableNodePublicIP.Value);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MachineLearningComputeInstanceProperties DeserializeMachineLearningComputeInstanceProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> vmSize = default;
            Optional<ResourceId> subnet = default;
            Optional<MachineLearningApplicationSharingPolicy> applicationSharingPolicy = default;
            Optional<MachineLearningComputeInstanceSshSettings> sshSettings = default;
            Optional<MachineLearningComputeInstanceConnectivityEndpoints> connectivityEndpoints = default;
            Optional<IReadOnlyList<MachineLearningComputeInstanceApplication>> applications = default;
            Optional<MachineLearningComputeInstanceCreatedBy> createdBy = default;
            Optional<IReadOnlyList<MachineLearningError>> errors = default;
            Optional<MachineLearningComputeInstanceState> state = default;
            Optional<MachineLearningComputeInstanceAuthorizationType?> computeInstanceAuthorizationType = default;
            Optional<PersonalComputeInstanceSettings> personalComputeInstanceSettings = default;
            Optional<SetupScripts> setupScripts = default;
            Optional<MachineLearningComputeInstanceLastOperation> lastOperation = default;
            Optional<ComputeSchedules> schedules = default;
            Optional<bool> enableNodePublicIP = default;
            Optional<IReadOnlyList<MachineLearningComputeInstanceContainer>> containers = default;
            Optional<IReadOnlyList<MachineLearningComputeInstanceDataDisk>> dataDisks = default;
            Optional<IReadOnlyList<MachineLearningComputeInstanceDataMount>> dataMounts = default;
            Optional<ComputeInstanceVersion> versions = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vmSize"u8))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subnet = null;
                        continue;
                    }
                    subnet = ResourceId.DeserializeResourceId(property.Value);
                    continue;
                }
                if (property.NameEquals("applicationSharingPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationSharingPolicy = new MachineLearningApplicationSharingPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sshSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sshSettings = null;
                        continue;
                    }
                    sshSettings = MachineLearningComputeInstanceSshSettings.DeserializeMachineLearningComputeInstanceSshSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("connectivityEndpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectivityEndpoints = MachineLearningComputeInstanceConnectivityEndpoints.DeserializeMachineLearningComputeInstanceConnectivityEndpoints(property.Value);
                    continue;
                }
                if (property.NameEquals("applications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningComputeInstanceApplication> array = new List<MachineLearningComputeInstanceApplication>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceApplication.DeserializeMachineLearningComputeInstanceApplication(item));
                    }
                    applications = array;
                    continue;
                }
                if (property.NameEquals("createdBy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdBy = MachineLearningComputeInstanceCreatedBy.DeserializeMachineLearningComputeInstanceCreatedBy(property.Value);
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningError> array = new List<MachineLearningError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningError.DeserializeMachineLearningError(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new MachineLearningComputeInstanceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("computeInstanceAuthorizationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        computeInstanceAuthorizationType = null;
                        continue;
                    }
                    computeInstanceAuthorizationType = new MachineLearningComputeInstanceAuthorizationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("personalComputeInstanceSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        personalComputeInstanceSettings = null;
                        continue;
                    }
                    personalComputeInstanceSettings = PersonalComputeInstanceSettings.DeserializePersonalComputeInstanceSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("setupScripts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        setupScripts = null;
                        continue;
                    }
                    setupScripts = SetupScripts.DeserializeSetupScripts(property.Value);
                    continue;
                }
                if (property.NameEquals("lastOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lastOperation = null;
                        continue;
                    }
                    lastOperation = MachineLearningComputeInstanceLastOperation.DeserializeMachineLearningComputeInstanceLastOperation(property.Value);
                    continue;
                }
                if (property.NameEquals("schedules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        schedules = null;
                        continue;
                    }
                    schedules = ComputeSchedules.DeserializeComputeSchedules(property.Value);
                    continue;
                }
                if (property.NameEquals("enableNodePublicIp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableNodePublicIP = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("containers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        containers = null;
                        continue;
                    }
                    List<MachineLearningComputeInstanceContainer> array = new List<MachineLearningComputeInstanceContainer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceContainer.DeserializeMachineLearningComputeInstanceContainer(item));
                    }
                    containers = array;
                    continue;
                }
                if (property.NameEquals("dataDisks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dataDisks = null;
                        continue;
                    }
                    List<MachineLearningComputeInstanceDataDisk> array = new List<MachineLearningComputeInstanceDataDisk>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceDataDisk.DeserializeMachineLearningComputeInstanceDataDisk(item));
                    }
                    dataDisks = array;
                    continue;
                }
                if (property.NameEquals("dataMounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dataMounts = null;
                        continue;
                    }
                    List<MachineLearningComputeInstanceDataMount> array = new List<MachineLearningComputeInstanceDataMount>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceDataMount.DeserializeMachineLearningComputeInstanceDataMount(item));
                    }
                    dataMounts = array;
                    continue;
                }
                if (property.NameEquals("versions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    versions = ComputeInstanceVersion.DeserializeComputeInstanceVersion(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MachineLearningComputeInstanceProperties(vmSize.Value, subnet.Value, Optional.ToNullable(applicationSharingPolicy), sshSettings.Value, connectivityEndpoints.Value, Optional.ToList(applications), createdBy.Value, Optional.ToList(errors), Optional.ToNullable(state), Optional.ToNullable(computeInstanceAuthorizationType), personalComputeInstanceSettings.Value, setupScripts.Value, lastOperation.Value, schedules.Value, Optional.ToNullable(enableNodePublicIP), Optional.ToList(containers), Optional.ToList(dataDisks), Optional.ToList(dataMounts), versions.Value, rawData);
        }

        MachineLearningComputeInstanceProperties IModelJsonSerializable<MachineLearningComputeInstanceProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningComputeInstanceProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MachineLearningComputeInstanceProperties>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MachineLearningComputeInstanceProperties IModelSerializable<MachineLearningComputeInstanceProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMachineLearningComputeInstanceProperties(doc.RootElement, options);
        }

        public static implicit operator RequestContent(MachineLearningComputeInstanceProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator MachineLearningComputeInstanceProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMachineLearningComputeInstanceProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
