// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningComputeInstanceProperties : IUtf8JsonSerializable, IJsonModel<MachineLearningComputeInstanceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MachineLearningComputeInstanceProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MachineLearningComputeInstanceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningComputeInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineLearningComputeInstanceProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (VmSize != null)
            {
                writer.WritePropertyName("vmSize"u8);
                writer.WriteStringValue(VmSize);
            }
            if (Subnet != null)
            {
                if (Subnet != null)
                {
                    writer.WritePropertyName("subnet"u8);
                    writer.WriteObjectValue(Subnet);
                }
                else
                {
                    writer.WriteNull("subnet");
                }
            }
            if (ApplicationSharingPolicy.HasValue)
            {
                writer.WritePropertyName("applicationSharingPolicy"u8);
                writer.WriteStringValue(ApplicationSharingPolicy.Value.ToString());
            }
            if (AutologgerSettings != null)
            {
                if (AutologgerSettings != null)
                {
                    writer.WritePropertyName("autologgerSettings"u8);
                    writer.WriteObjectValue(AutologgerSettings);
                }
                else
                {
                    writer.WriteNull("autologgerSettings");
                }
            }
            if (SshSettings != null)
            {
                if (SshSettings != null)
                {
                    writer.WritePropertyName("sshSettings"u8);
                    writer.WriteObjectValue(SshSettings);
                }
                else
                {
                    writer.WriteNull("sshSettings");
                }
            }
            if (!(CustomServices is ChangeTrackingList<CustomService> collection && collection.IsUndefined))
            {
                if (CustomServices != null)
                {
                    writer.WritePropertyName("customServices"u8);
                    writer.WriteStartArray();
                    foreach (var item in CustomServices)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("customServices");
                }
            }
            if (options.Format != "W" && OSImageMetadata != null)
            {
                writer.WritePropertyName("osImageMetadata"u8);
                writer.WriteObjectValue(OSImageMetadata);
            }
            if (options.Format != "W" && ConnectivityEndpoints != null)
            {
                writer.WritePropertyName("connectivityEndpoints"u8);
                writer.WriteObjectValue(ConnectivityEndpoints);
            }
            if (options.Format != "W" && !(Applications is ChangeTrackingList<MachineLearningComputeInstanceApplication> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("applications"u8);
                writer.WriteStartArray();
                foreach (var item in Applications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && CreatedBy != null)
            {
                writer.WritePropertyName("createdBy"u8);
                writer.WriteObjectValue(CreatedBy);
            }
            if (options.Format != "W" && !(Errors is ChangeTrackingList<MachineLearningError> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && State.HasValue)
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (ComputeInstanceAuthorizationType.HasValue)
            {
                if (ComputeInstanceAuthorizationType != null)
                {
                    writer.WritePropertyName("computeInstanceAuthorizationType"u8);
                    writer.WriteStringValue(ComputeInstanceAuthorizationType.Value.ToString());
                }
                else
                {
                    writer.WriteNull("computeInstanceAuthorizationType");
                }
            }
            if (PersonalComputeInstanceSettings != null)
            {
                if (PersonalComputeInstanceSettings != null)
                {
                    writer.WritePropertyName("personalComputeInstanceSettings"u8);
                    writer.WriteObjectValue(PersonalComputeInstanceSettings);
                }
                else
                {
                    writer.WriteNull("personalComputeInstanceSettings");
                }
            }
            if (SetupScriptsSettings != null)
            {
                if (SetupScriptsSettings != null)
                {
                    writer.WritePropertyName("setupScripts"u8);
                    writer.WriteObjectValue(SetupScriptsSettings);
                }
                else
                {
                    writer.WriteNull("setupScripts");
                }
            }
            if (options.Format != "W" && LastOperation != null)
            {
                if (LastOperation != null)
                {
                    writer.WritePropertyName("lastOperation"u8);
                    writer.WriteObjectValue(LastOperation);
                }
                else
                {
                    writer.WriteNull("lastOperation");
                }
            }
            if (Schedules != null)
            {
                if (Schedules != null)
                {
                    writer.WritePropertyName("schedules"u8);
                    writer.WriteObjectValue(Schedules);
                }
                else
                {
                    writer.WriteNull("schedules");
                }
            }
            if (IdleTimeBeforeShutdown != null)
            {
                writer.WritePropertyName("idleTimeBeforeShutdown"u8);
                writer.WriteStringValue(IdleTimeBeforeShutdown);
            }
            if (EnableNodePublicIP.HasValue)
            {
                if (EnableNodePublicIP != null)
                {
                    writer.WritePropertyName("enableNodePublicIp"u8);
                    writer.WriteBooleanValue(EnableNodePublicIP.Value);
                }
                else
                {
                    writer.WriteNull("enableNodePublicIp");
                }
            }
            if (options.Format != "W" && !(Containers is ChangeTrackingList<MachineLearningComputeInstanceContainer> collection2 && collection2.IsUndefined))
            {
                if (Containers != null)
                {
                    writer.WritePropertyName("containers"u8);
                    writer.WriteStartArray();
                    foreach (var item in Containers)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("containers");
                }
            }
            if (options.Format != "W" && !(DataDisks is ChangeTrackingList<MachineLearningComputeInstanceDataDisk> collection3 && collection3.IsUndefined))
            {
                if (DataDisks != null)
                {
                    writer.WritePropertyName("dataDisks"u8);
                    writer.WriteStartArray();
                    foreach (var item in DataDisks)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("dataDisks");
                }
            }
            if (options.Format != "W" && !(DataMounts is ChangeTrackingList<MachineLearningComputeInstanceDataMount> collection4 && collection4.IsUndefined))
            {
                if (DataMounts != null)
                {
                    writer.WritePropertyName("dataMounts"u8);
                    writer.WriteStartArray();
                    foreach (var item in DataMounts)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("dataMounts");
                }
            }
            if (options.Format != "W" && Versions != null)
            {
                writer.WritePropertyName("versions"u8);
                writer.WriteObjectValue(Versions);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MachineLearningComputeInstanceProperties IJsonModel<MachineLearningComputeInstanceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningComputeInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineLearningComputeInstanceProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningComputeInstanceProperties(document.RootElement, options);
        }

        internal static MachineLearningComputeInstanceProperties DeserializeMachineLearningComputeInstanceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> vmSize = default;
            Optional<ResourceId> subnet = default;
            Optional<MachineLearningApplicationSharingPolicy> applicationSharingPolicy = default;
            Optional<ComputeInstanceAutologgerSettings> autologgerSettings = default;
            Optional<MachineLearningComputeInstanceSshSettings> sshSettings = default;
            IList<CustomService> customServices = default;
            Optional<ImageMetadata> osImageMetadata = default;
            Optional<MachineLearningComputeInstanceConnectivityEndpoints> connectivityEndpoints = default;
            IReadOnlyList<MachineLearningComputeInstanceApplication> applications = default;
            Optional<MachineLearningComputeInstanceCreatedBy> createdBy = default;
            IReadOnlyList<MachineLearningError> errors = default;
            Optional<MachineLearningComputeInstanceState> state = default;
            Optional<MachineLearningComputeInstanceAuthorizationType?> computeInstanceAuthorizationType = default;
            Optional<PersonalComputeInstanceSettings> personalComputeInstanceSettings = default;
            Optional<SetupScripts> setupScripts = default;
            Optional<MachineLearningComputeInstanceLastOperation> lastOperation = default;
            Optional<ComputeSchedules> schedules = default;
            Optional<string> idleTimeBeforeShutdown = default;
            Optional<bool?> enableNodePublicIP = default;
            IReadOnlyList<MachineLearningComputeInstanceContainer> containers = default;
            IReadOnlyList<MachineLearningComputeInstanceDataDisk> dataDisks = default;
            IReadOnlyList<MachineLearningComputeInstanceDataMount> dataMounts = default;
            Optional<ComputeInstanceVersion> versions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vmSize"u8))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subnet = null;
                        continue;
                    }
                    subnet = ResourceId.DeserializeResourceId(property.Value, options);
                    continue;
                }
                if (property.NameEquals("applicationSharingPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationSharingPolicy = new MachineLearningApplicationSharingPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("autologgerSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autologgerSettings = null;
                        continue;
                    }
                    autologgerSettings = ComputeInstanceAutologgerSettings.DeserializeComputeInstanceAutologgerSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("sshSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sshSettings = null;
                        continue;
                    }
                    sshSettings = MachineLearningComputeInstanceSshSettings.DeserializeMachineLearningComputeInstanceSshSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("customServices"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        customServices = null;
                        continue;
                    }
                    List<CustomService> array = new List<CustomService>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CustomService.DeserializeCustomService(item, options));
                    }
                    customServices = array;
                    continue;
                }
                if (property.NameEquals("osImageMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osImageMetadata = ImageMetadata.DeserializeImageMetadata(property.Value, options);
                    continue;
                }
                if (property.NameEquals("connectivityEndpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectivityEndpoints = MachineLearningComputeInstanceConnectivityEndpoints.DeserializeMachineLearningComputeInstanceConnectivityEndpoints(property.Value, options);
                    continue;
                }
                if (property.NameEquals("applications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningComputeInstanceApplication> array = new List<MachineLearningComputeInstanceApplication>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceApplication.DeserializeMachineLearningComputeInstanceApplication(item, options));
                    }
                    applications = array;
                    continue;
                }
                if (property.NameEquals("createdBy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdBy = MachineLearningComputeInstanceCreatedBy.DeserializeMachineLearningComputeInstanceCreatedBy(property.Value, options);
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningError> array = new List<MachineLearningError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningError.DeserializeMachineLearningError(item, options));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new MachineLearningComputeInstanceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("computeInstanceAuthorizationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        computeInstanceAuthorizationType = null;
                        continue;
                    }
                    computeInstanceAuthorizationType = new MachineLearningComputeInstanceAuthorizationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("personalComputeInstanceSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        personalComputeInstanceSettings = null;
                        continue;
                    }
                    personalComputeInstanceSettings = PersonalComputeInstanceSettings.DeserializePersonalComputeInstanceSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("setupScripts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        setupScripts = null;
                        continue;
                    }
                    setupScripts = SetupScripts.DeserializeSetupScripts(property.Value, options);
                    continue;
                }
                if (property.NameEquals("lastOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lastOperation = null;
                        continue;
                    }
                    lastOperation = MachineLearningComputeInstanceLastOperation.DeserializeMachineLearningComputeInstanceLastOperation(property.Value, options);
                    continue;
                }
                if (property.NameEquals("schedules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        schedules = null;
                        continue;
                    }
                    schedules = ComputeSchedules.DeserializeComputeSchedules(property.Value, options);
                    continue;
                }
                if (property.NameEquals("idleTimeBeforeShutdown"u8))
                {
                    idleTimeBeforeShutdown = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableNodePublicIp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableNodePublicIP = null;
                        continue;
                    }
                    enableNodePublicIP = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("containers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        containers = null;
                        continue;
                    }
                    List<MachineLearningComputeInstanceContainer> array = new List<MachineLearningComputeInstanceContainer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceContainer.DeserializeMachineLearningComputeInstanceContainer(item, options));
                    }
                    containers = array;
                    continue;
                }
                if (property.NameEquals("dataDisks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dataDisks = null;
                        continue;
                    }
                    List<MachineLearningComputeInstanceDataDisk> array = new List<MachineLearningComputeInstanceDataDisk>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceDataDisk.DeserializeMachineLearningComputeInstanceDataDisk(item, options));
                    }
                    dataDisks = array;
                    continue;
                }
                if (property.NameEquals("dataMounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dataMounts = null;
                        continue;
                    }
                    List<MachineLearningComputeInstanceDataMount> array = new List<MachineLearningComputeInstanceDataMount>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningComputeInstanceDataMount.DeserializeMachineLearningComputeInstanceDataMount(item, options));
                    }
                    dataMounts = array;
                    continue;
                }
                if (property.NameEquals("versions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    versions = ComputeInstanceVersion.DeserializeComputeInstanceVersion(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MachineLearningComputeInstanceProperties(
                vmSize.Value,
                subnet.Value,
                Optional.ToNullable(applicationSharingPolicy),
                autologgerSettings.Value,
                sshSettings.Value,
                customServices ?? new ChangeTrackingList<CustomService>(),
                osImageMetadata.Value,
                connectivityEndpoints.Value,
                applications ?? new ChangeTrackingList<MachineLearningComputeInstanceApplication>(),
                createdBy.Value,
                errors ?? new ChangeTrackingList<MachineLearningError>(),
                Optional.ToNullable(state),
                Optional.ToNullable(computeInstanceAuthorizationType),
                personalComputeInstanceSettings.Value,
                setupScripts.Value,
                lastOperation.Value,
                schedules.Value,
                idleTimeBeforeShutdown.Value,
                Optional.ToNullable(enableNodePublicIP),
                containers ?? new ChangeTrackingList<MachineLearningComputeInstanceContainer>(),
                dataDisks ?? new ChangeTrackingList<MachineLearningComputeInstanceDataDisk>(),
                dataMounts ?? new ChangeTrackingList<MachineLearningComputeInstanceDataMount>(),
                versions.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MachineLearningComputeInstanceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningComputeInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MachineLearningComputeInstanceProperties)} does not support '{options.Format}' format.");
            }
        }

        MachineLearningComputeInstanceProperties IPersistableModel<MachineLearningComputeInstanceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningComputeInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMachineLearningComputeInstanceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MachineLearningComputeInstanceProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MachineLearningComputeInstanceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
