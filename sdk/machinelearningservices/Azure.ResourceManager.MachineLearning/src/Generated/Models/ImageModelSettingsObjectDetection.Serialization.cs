// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ImageModelSettingsObjectDetection : IUtf8JsonSerializable, IJsonModel<ImageModelSettingsObjectDetection>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ImageModelSettingsObjectDetection>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ImageModelSettingsObjectDetection>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageModelSettingsObjectDetection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageModelSettingsObjectDetection)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(BoxDetectionsPerImage))
            {
                if (BoxDetectionsPerImage != null)
                {
                    writer.WritePropertyName("boxDetectionsPerImage"u8);
                    writer.WriteNumberValue(BoxDetectionsPerImage.Value);
                }
                else
                {
                    writer.WriteNull("boxDetectionsPerImage");
                }
            }
            if (Optional.IsDefined(BoxScoreThreshold))
            {
                if (BoxScoreThreshold != null)
                {
                    writer.WritePropertyName("boxScoreThreshold"u8);
                    writer.WriteNumberValue(BoxScoreThreshold.Value);
                }
                else
                {
                    writer.WriteNull("boxScoreThreshold");
                }
            }
            if (Optional.IsDefined(ImageSize))
            {
                if (ImageSize != null)
                {
                    writer.WritePropertyName("imageSize"u8);
                    writer.WriteNumberValue(ImageSize.Value);
                }
                else
                {
                    writer.WriteNull("imageSize");
                }
            }
            if (Optional.IsDefined(LogTrainingMetrics))
            {
                writer.WritePropertyName("logTrainingMetrics"u8);
                writer.WriteStringValue(LogTrainingMetrics.Value.ToString());
            }
            if (Optional.IsDefined(LogValidationLoss))
            {
                writer.WritePropertyName("logValidationLoss"u8);
                writer.WriteStringValue(LogValidationLoss.Value.ToString());
            }
            if (Optional.IsDefined(MaxSize))
            {
                if (MaxSize != null)
                {
                    writer.WritePropertyName("maxSize"u8);
                    writer.WriteNumberValue(MaxSize.Value);
                }
                else
                {
                    writer.WriteNull("maxSize");
                }
            }
            if (Optional.IsDefined(MinSize))
            {
                if (MinSize != null)
                {
                    writer.WritePropertyName("minSize"u8);
                    writer.WriteNumberValue(MinSize.Value);
                }
                else
                {
                    writer.WriteNull("minSize");
                }
            }
            if (Optional.IsDefined(ModelSize))
            {
                writer.WritePropertyName("modelSize"u8);
                writer.WriteStringValue(ModelSize.Value.ToString());
            }
            if (Optional.IsDefined(MultiScale))
            {
                if (MultiScale != null)
                {
                    writer.WritePropertyName("multiScale"u8);
                    writer.WriteBooleanValue(MultiScale.Value);
                }
                else
                {
                    writer.WriteNull("multiScale");
                }
            }
            if (Optional.IsDefined(NmsIouThreshold))
            {
                if (NmsIouThreshold != null)
                {
                    writer.WritePropertyName("nmsIouThreshold"u8);
                    writer.WriteNumberValue(NmsIouThreshold.Value);
                }
                else
                {
                    writer.WriteNull("nmsIouThreshold");
                }
            }
            if (Optional.IsDefined(TileGridSize))
            {
                if (TileGridSize != null)
                {
                    writer.WritePropertyName("tileGridSize"u8);
                    writer.WriteStringValue(TileGridSize);
                }
                else
                {
                    writer.WriteNull("tileGridSize");
                }
            }
            if (Optional.IsDefined(TileOverlapRatio))
            {
                if (TileOverlapRatio != null)
                {
                    writer.WritePropertyName("tileOverlapRatio"u8);
                    writer.WriteNumberValue(TileOverlapRatio.Value);
                }
                else
                {
                    writer.WriteNull("tileOverlapRatio");
                }
            }
            if (Optional.IsDefined(TilePredictionsNmsThreshold))
            {
                if (TilePredictionsNmsThreshold != null)
                {
                    writer.WritePropertyName("tilePredictionsNmsThreshold"u8);
                    writer.WriteNumberValue(TilePredictionsNmsThreshold.Value);
                }
                else
                {
                    writer.WriteNull("tilePredictionsNmsThreshold");
                }
            }
            if (Optional.IsDefined(ValidationIouThreshold))
            {
                if (ValidationIouThreshold != null)
                {
                    writer.WritePropertyName("validationIouThreshold"u8);
                    writer.WriteNumberValue(ValidationIouThreshold.Value);
                }
                else
                {
                    writer.WriteNull("validationIouThreshold");
                }
            }
            if (Optional.IsDefined(ValidationMetricType))
            {
                writer.WritePropertyName("validationMetricType"u8);
                writer.WriteStringValue(ValidationMetricType.Value.ToString());
            }
            if (Optional.IsDefined(AdvancedSettings))
            {
                if (AdvancedSettings != null)
                {
                    writer.WritePropertyName("advancedSettings"u8);
                    writer.WriteStringValue(AdvancedSettings);
                }
                else
                {
                    writer.WriteNull("advancedSettings");
                }
            }
            if (Optional.IsDefined(AmsGradient))
            {
                if (AmsGradient != null)
                {
                    writer.WritePropertyName("amsGradient"u8);
                    writer.WriteBooleanValue(AmsGradient.Value);
                }
                else
                {
                    writer.WriteNull("amsGradient");
                }
            }
            if (Optional.IsDefined(Augmentations))
            {
                if (Augmentations != null)
                {
                    writer.WritePropertyName("augmentations"u8);
                    writer.WriteStringValue(Augmentations);
                }
                else
                {
                    writer.WriteNull("augmentations");
                }
            }
            if (Optional.IsDefined(Beta1))
            {
                if (Beta1 != null)
                {
                    writer.WritePropertyName("beta1"u8);
                    writer.WriteNumberValue(Beta1.Value);
                }
                else
                {
                    writer.WriteNull("beta1");
                }
            }
            if (Optional.IsDefined(Beta2))
            {
                if (Beta2 != null)
                {
                    writer.WritePropertyName("beta2"u8);
                    writer.WriteNumberValue(Beta2.Value);
                }
                else
                {
                    writer.WriteNull("beta2");
                }
            }
            if (Optional.IsDefined(CheckpointFrequency))
            {
                if (CheckpointFrequency != null)
                {
                    writer.WritePropertyName("checkpointFrequency"u8);
                    writer.WriteNumberValue(CheckpointFrequency.Value);
                }
                else
                {
                    writer.WriteNull("checkpointFrequency");
                }
            }
            if (Optional.IsDefined(CheckpointModel))
            {
                if (CheckpointModel != null)
                {
                    writer.WritePropertyName("checkpointModel"u8);
                    writer.WriteObjectValue<MachineLearningFlowModelJobInput>(CheckpointModel, options);
                }
                else
                {
                    writer.WriteNull("checkpointModel");
                }
            }
            if (Optional.IsDefined(CheckpointRunId))
            {
                if (CheckpointRunId != null)
                {
                    writer.WritePropertyName("checkpointRunId"u8);
                    writer.WriteStringValue(CheckpointRunId);
                }
                else
                {
                    writer.WriteNull("checkpointRunId");
                }
            }
            if (Optional.IsDefined(Distributed))
            {
                if (Distributed != null)
                {
                    writer.WritePropertyName("distributed"u8);
                    writer.WriteBooleanValue(Distributed.Value);
                }
                else
                {
                    writer.WriteNull("distributed");
                }
            }
            if (Optional.IsDefined(EarlyStopping))
            {
                if (EarlyStopping != null)
                {
                    writer.WritePropertyName("earlyStopping"u8);
                    writer.WriteBooleanValue(EarlyStopping.Value);
                }
                else
                {
                    writer.WriteNull("earlyStopping");
                }
            }
            if (Optional.IsDefined(EarlyStoppingDelay))
            {
                if (EarlyStoppingDelay != null)
                {
                    writer.WritePropertyName("earlyStoppingDelay"u8);
                    writer.WriteNumberValue(EarlyStoppingDelay.Value);
                }
                else
                {
                    writer.WriteNull("earlyStoppingDelay");
                }
            }
            if (Optional.IsDefined(EarlyStoppingPatience))
            {
                if (EarlyStoppingPatience != null)
                {
                    writer.WritePropertyName("earlyStoppingPatience"u8);
                    writer.WriteNumberValue(EarlyStoppingPatience.Value);
                }
                else
                {
                    writer.WriteNull("earlyStoppingPatience");
                }
            }
            if (Optional.IsDefined(EnableOnnxNormalization))
            {
                if (EnableOnnxNormalization != null)
                {
                    writer.WritePropertyName("enableOnnxNormalization"u8);
                    writer.WriteBooleanValue(EnableOnnxNormalization.Value);
                }
                else
                {
                    writer.WriteNull("enableOnnxNormalization");
                }
            }
            if (Optional.IsDefined(EvaluationFrequency))
            {
                if (EvaluationFrequency != null)
                {
                    writer.WritePropertyName("evaluationFrequency"u8);
                    writer.WriteNumberValue(EvaluationFrequency.Value);
                }
                else
                {
                    writer.WriteNull("evaluationFrequency");
                }
            }
            if (Optional.IsDefined(GradientAccumulationStep))
            {
                if (GradientAccumulationStep != null)
                {
                    writer.WritePropertyName("gradientAccumulationStep"u8);
                    writer.WriteNumberValue(GradientAccumulationStep.Value);
                }
                else
                {
                    writer.WriteNull("gradientAccumulationStep");
                }
            }
            if (Optional.IsDefined(LayersToFreeze))
            {
                if (LayersToFreeze != null)
                {
                    writer.WritePropertyName("layersToFreeze"u8);
                    writer.WriteNumberValue(LayersToFreeze.Value);
                }
                else
                {
                    writer.WriteNull("layersToFreeze");
                }
            }
            if (Optional.IsDefined(LearningRate))
            {
                if (LearningRate != null)
                {
                    writer.WritePropertyName("learningRate"u8);
                    writer.WriteNumberValue(LearningRate.Value);
                }
                else
                {
                    writer.WriteNull("learningRate");
                }
            }
            if (Optional.IsDefined(LearningRateScheduler))
            {
                writer.WritePropertyName("learningRateScheduler"u8);
                writer.WriteStringValue(LearningRateScheduler.Value.ToString());
            }
            if (Optional.IsDefined(ModelName))
            {
                if (ModelName != null)
                {
                    writer.WritePropertyName("modelName"u8);
                    writer.WriteStringValue(ModelName);
                }
                else
                {
                    writer.WriteNull("modelName");
                }
            }
            if (Optional.IsDefined(Momentum))
            {
                if (Momentum != null)
                {
                    writer.WritePropertyName("momentum"u8);
                    writer.WriteNumberValue(Momentum.Value);
                }
                else
                {
                    writer.WriteNull("momentum");
                }
            }
            if (Optional.IsDefined(Nesterov))
            {
                if (Nesterov != null)
                {
                    writer.WritePropertyName("nesterov"u8);
                    writer.WriteBooleanValue(Nesterov.Value);
                }
                else
                {
                    writer.WriteNull("nesterov");
                }
            }
            if (Optional.IsDefined(NumberOfEpochs))
            {
                if (NumberOfEpochs != null)
                {
                    writer.WritePropertyName("numberOfEpochs"u8);
                    writer.WriteNumberValue(NumberOfEpochs.Value);
                }
                else
                {
                    writer.WriteNull("numberOfEpochs");
                }
            }
            if (Optional.IsDefined(NumberOfWorkers))
            {
                if (NumberOfWorkers != null)
                {
                    writer.WritePropertyName("numberOfWorkers"u8);
                    writer.WriteNumberValue(NumberOfWorkers.Value);
                }
                else
                {
                    writer.WriteNull("numberOfWorkers");
                }
            }
            if (Optional.IsDefined(Optimizer))
            {
                writer.WritePropertyName("optimizer"u8);
                writer.WriteStringValue(Optimizer.Value.ToString());
            }
            if (Optional.IsDefined(RandomSeed))
            {
                if (RandomSeed != null)
                {
                    writer.WritePropertyName("randomSeed"u8);
                    writer.WriteNumberValue(RandomSeed.Value);
                }
                else
                {
                    writer.WriteNull("randomSeed");
                }
            }
            if (Optional.IsDefined(StepLRGamma))
            {
                if (StepLRGamma != null)
                {
                    writer.WritePropertyName("stepLRGamma"u8);
                    writer.WriteNumberValue(StepLRGamma.Value);
                }
                else
                {
                    writer.WriteNull("stepLRGamma");
                }
            }
            if (Optional.IsDefined(StepLRStepSize))
            {
                if (StepLRStepSize != null)
                {
                    writer.WritePropertyName("stepLRStepSize"u8);
                    writer.WriteNumberValue(StepLRStepSize.Value);
                }
                else
                {
                    writer.WriteNull("stepLRStepSize");
                }
            }
            if (Optional.IsDefined(TrainingBatchSize))
            {
                if (TrainingBatchSize != null)
                {
                    writer.WritePropertyName("trainingBatchSize"u8);
                    writer.WriteNumberValue(TrainingBatchSize.Value);
                }
                else
                {
                    writer.WriteNull("trainingBatchSize");
                }
            }
            if (Optional.IsDefined(ValidationBatchSize))
            {
                if (ValidationBatchSize != null)
                {
                    writer.WritePropertyName("validationBatchSize"u8);
                    writer.WriteNumberValue(ValidationBatchSize.Value);
                }
                else
                {
                    writer.WriteNull("validationBatchSize");
                }
            }
            if (Optional.IsDefined(WarmupCosineLRCycles))
            {
                if (WarmupCosineLRCycles != null)
                {
                    writer.WritePropertyName("warmupCosineLRCycles"u8);
                    writer.WriteNumberValue(WarmupCosineLRCycles.Value);
                }
                else
                {
                    writer.WriteNull("warmupCosineLRCycles");
                }
            }
            if (Optional.IsDefined(WarmupCosineLRWarmupEpochs))
            {
                if (WarmupCosineLRWarmupEpochs != null)
                {
                    writer.WritePropertyName("warmupCosineLRWarmupEpochs"u8);
                    writer.WriteNumberValue(WarmupCosineLRWarmupEpochs.Value);
                }
                else
                {
                    writer.WriteNull("warmupCosineLRWarmupEpochs");
                }
            }
            if (Optional.IsDefined(WeightDecay))
            {
                if (WeightDecay != null)
                {
                    writer.WritePropertyName("weightDecay"u8);
                    writer.WriteNumberValue(WeightDecay.Value);
                }
                else
                {
                    writer.WriteNull("weightDecay");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ImageModelSettingsObjectDetection IJsonModel<ImageModelSettingsObjectDetection>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageModelSettingsObjectDetection>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ImageModelSettingsObjectDetection)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeImageModelSettingsObjectDetection(document.RootElement, options);
        }

        internal static ImageModelSettingsObjectDetection DeserializeImageModelSettingsObjectDetection(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? boxDetectionsPerImage = default;
            float? boxScoreThreshold = default;
            int? imageSize = default;
            LogTrainingMetric? logTrainingMetrics = default;
            LogValidationLoss? logValidationLoss = default;
            int? maxSize = default;
            int? minSize = default;
            MachineLearningModelSize? modelSize = default;
            bool? multiScale = default;
            float? nmsIouThreshold = default;
            string tileGridSize = default;
            float? tileOverlapRatio = default;
            float? tilePredictionsNmsThreshold = default;
            float? validationIouThreshold = default;
            ValidationMetricType? validationMetricType = default;
            string advancedSettings = default;
            bool? amsGradient = default;
            string augmentations = default;
            float? beta1 = default;
            float? beta2 = default;
            int? checkpointFrequency = default;
            MachineLearningFlowModelJobInput checkpointModel = default;
            string checkpointRunId = default;
            bool? distributed = default;
            bool? earlyStopping = default;
            int? earlyStoppingDelay = default;
            int? earlyStoppingPatience = default;
            bool? enableOnnxNormalization = default;
            int? evaluationFrequency = default;
            int? gradientAccumulationStep = default;
            int? layersToFreeze = default;
            float? learningRate = default;
            LearningRateScheduler? learningRateScheduler = default;
            string modelName = default;
            float? momentum = default;
            bool? nesterov = default;
            int? numberOfEpochs = default;
            int? numberOfWorkers = default;
            StochasticOptimizer? optimizer = default;
            int? randomSeed = default;
            float? stepLRGamma = default;
            int? stepLRStepSize = default;
            int? trainingBatchSize = default;
            int? validationBatchSize = default;
            float? warmupCosineLRCycles = default;
            int? warmupCosineLRWarmupEpochs = default;
            float? weightDecay = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("boxDetectionsPerImage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        boxDetectionsPerImage = null;
                        continue;
                    }
                    boxDetectionsPerImage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("boxScoreThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        boxScoreThreshold = null;
                        continue;
                    }
                    boxScoreThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("imageSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        imageSize = null;
                        continue;
                    }
                    imageSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("logTrainingMetrics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logTrainingMetrics = new LogTrainingMetric(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("logValidationLoss"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logValidationLoss = new LogValidationLoss(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxSize = null;
                        continue;
                    }
                    maxSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minSize = null;
                        continue;
                    }
                    minSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("modelSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    modelSize = new MachineLearningModelSize(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("multiScale"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        multiScale = null;
                        continue;
                    }
                    multiScale = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("nmsIouThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nmsIouThreshold = null;
                        continue;
                    }
                    nmsIouThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("tileGridSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tileGridSize = null;
                        continue;
                    }
                    tileGridSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tileOverlapRatio"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tileOverlapRatio = null;
                        continue;
                    }
                    tileOverlapRatio = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("tilePredictionsNmsThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tilePredictionsNmsThreshold = null;
                        continue;
                    }
                    tilePredictionsNmsThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("validationIouThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        validationIouThreshold = null;
                        continue;
                    }
                    validationIouThreshold = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("validationMetricType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validationMetricType = new ValidationMetricType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("advancedSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        advancedSettings = null;
                        continue;
                    }
                    advancedSettings = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("amsGradient"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        amsGradient = null;
                        continue;
                    }
                    amsGradient = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("augmentations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        augmentations = null;
                        continue;
                    }
                    augmentations = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("beta1"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        beta1 = null;
                        continue;
                    }
                    beta1 = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("beta2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        beta2 = null;
                        continue;
                    }
                    beta2 = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("checkpointFrequency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        checkpointFrequency = null;
                        continue;
                    }
                    checkpointFrequency = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("checkpointModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        checkpointModel = null;
                        continue;
                    }
                    checkpointModel = MachineLearningFlowModelJobInput.DeserializeMachineLearningFlowModelJobInput(property.Value, options);
                    continue;
                }
                if (property.NameEquals("checkpointRunId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        checkpointRunId = null;
                        continue;
                    }
                    checkpointRunId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("distributed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        distributed = null;
                        continue;
                    }
                    distributed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("earlyStopping"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        earlyStopping = null;
                        continue;
                    }
                    earlyStopping = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("earlyStoppingDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        earlyStoppingDelay = null;
                        continue;
                    }
                    earlyStoppingDelay = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("earlyStoppingPatience"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        earlyStoppingPatience = null;
                        continue;
                    }
                    earlyStoppingPatience = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("enableOnnxNormalization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableOnnxNormalization = null;
                        continue;
                    }
                    enableOnnxNormalization = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("evaluationFrequency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        evaluationFrequency = null;
                        continue;
                    }
                    evaluationFrequency = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("gradientAccumulationStep"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        gradientAccumulationStep = null;
                        continue;
                    }
                    gradientAccumulationStep = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("layersToFreeze"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        layersToFreeze = null;
                        continue;
                    }
                    layersToFreeze = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("learningRate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        learningRate = null;
                        continue;
                    }
                    learningRate = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("learningRateScheduler"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    learningRateScheduler = new LearningRateScheduler(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("modelName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modelName = null;
                        continue;
                    }
                    modelName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("momentum"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        momentum = null;
                        continue;
                    }
                    momentum = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("nesterov"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nesterov = null;
                        continue;
                    }
                    nesterov = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("numberOfEpochs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numberOfEpochs = null;
                        continue;
                    }
                    numberOfEpochs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numberOfWorkers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numberOfWorkers = null;
                        continue;
                    }
                    numberOfWorkers = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("optimizer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optimizer = new StochasticOptimizer(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("randomSeed"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        randomSeed = null;
                        continue;
                    }
                    randomSeed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stepLRGamma"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stepLRGamma = null;
                        continue;
                    }
                    stepLRGamma = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("stepLRStepSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stepLRStepSize = null;
                        continue;
                    }
                    stepLRStepSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("trainingBatchSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        trainingBatchSize = null;
                        continue;
                    }
                    trainingBatchSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("validationBatchSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        validationBatchSize = null;
                        continue;
                    }
                    validationBatchSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("warmupCosineLRCycles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        warmupCosineLRCycles = null;
                        continue;
                    }
                    warmupCosineLRCycles = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("warmupCosineLRWarmupEpochs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        warmupCosineLRWarmupEpochs = null;
                        continue;
                    }
                    warmupCosineLRWarmupEpochs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("weightDecay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        weightDecay = null;
                        continue;
                    }
                    weightDecay = property.Value.GetSingle();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ImageModelSettingsObjectDetection(
                advancedSettings,
                amsGradient,
                augmentations,
                beta1,
                beta2,
                checkpointFrequency,
                checkpointModel,
                checkpointRunId,
                distributed,
                earlyStopping,
                earlyStoppingDelay,
                earlyStoppingPatience,
                enableOnnxNormalization,
                evaluationFrequency,
                gradientAccumulationStep,
                layersToFreeze,
                learningRate,
                learningRateScheduler,
                modelName,
                momentum,
                nesterov,
                numberOfEpochs,
                numberOfWorkers,
                optimizer,
                randomSeed,
                stepLRGamma,
                stepLRStepSize,
                trainingBatchSize,
                validationBatchSize,
                warmupCosineLRCycles,
                warmupCosineLRWarmupEpochs,
                weightDecay,
                serializedAdditionalRawData,
                boxDetectionsPerImage,
                boxScoreThreshold,
                imageSize,
                logTrainingMetrics,
                logValidationLoss,
                maxSize,
                minSize,
                modelSize,
                multiScale,
                nmsIouThreshold,
                tileGridSize,
                tileOverlapRatio,
                tilePredictionsNmsThreshold,
                validationIouThreshold,
                validationMetricType);
        }

        BinaryData IPersistableModel<ImageModelSettingsObjectDetection>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageModelSettingsObjectDetection>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ImageModelSettingsObjectDetection)} does not support writing '{options.Format}' format.");
            }
        }

        ImageModelSettingsObjectDetection IPersistableModel<ImageModelSettingsObjectDetection>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ImageModelSettingsObjectDetection>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeImageModelSettingsObjectDetection(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ImageModelSettingsObjectDetection)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ImageModelSettingsObjectDetection>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
