// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningEndpointAuthToken : IUtf8JsonSerializable, IModelJsonSerializable<MachineLearningEndpointAuthToken>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MachineLearningEndpointAuthToken>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MachineLearningEndpointAuthToken>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningEndpointAuthToken>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(AccessToken))
            {
                if (AccessToken != null)
                {
                    writer.WritePropertyName("accessToken"u8);
                    writer.WriteStringValue(AccessToken);
                }
                else
                {
                    writer.WriteNull("accessToken");
                }
            }
            if (Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expiryTimeUtc"u8);
                writer.WriteNumberValue(ExpireOn.Value, "U");
            }
            if (Optional.IsDefined(RefreshOn))
            {
                writer.WritePropertyName("refreshAfterTimeUtc"u8);
                writer.WriteNumberValue(RefreshOn.Value, "U");
            }
            if (Optional.IsDefined(TokenType))
            {
                if (TokenType != null)
                {
                    writer.WritePropertyName("tokenType"u8);
                    writer.WriteStringValue(TokenType);
                }
                else
                {
                    writer.WriteNull("tokenType");
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MachineLearningEndpointAuthToken DeserializeMachineLearningEndpointAuthToken(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> accessToken = default;
            Optional<DateTimeOffset> expiryTimeUtc = default;
            Optional<DateTimeOffset> refreshAfterTimeUtc = default;
            Optional<string> tokenType = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("accessToken"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        accessToken = null;
                        continue;
                    }
                    accessToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("expiryTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expiryTimeUtc = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("refreshAfterTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refreshAfterTimeUtc = DateTimeOffset.FromUnixTimeSeconds(property.Value.GetInt64());
                    continue;
                }
                if (property.NameEquals("tokenType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tokenType = null;
                        continue;
                    }
                    tokenType = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MachineLearningEndpointAuthToken(accessToken.Value, Optional.ToNullable(expiryTimeUtc), Optional.ToNullable(refreshAfterTimeUtc), tokenType.Value, serializedAdditionalRawData);
        }

        MachineLearningEndpointAuthToken IModelJsonSerializable<MachineLearningEndpointAuthToken>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningEndpointAuthToken>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningEndpointAuthToken(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MachineLearningEndpointAuthToken>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningEndpointAuthToken>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MachineLearningEndpointAuthToken IModelSerializable<MachineLearningEndpointAuthToken>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningEndpointAuthToken>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMachineLearningEndpointAuthToken(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MachineLearningEndpointAuthToken"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MachineLearningEndpointAuthToken"/> to convert. </param>
        public static implicit operator RequestContent(MachineLearningEndpointAuthToken model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MachineLearningEndpointAuthToken"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MachineLearningEndpointAuthToken(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMachineLearningEndpointAuthToken(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
