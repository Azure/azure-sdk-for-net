// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MaterializationSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Notification))
            {
                if (Notification != null)
                {
                    writer.WritePropertyName("notification"u8);
                    writer.WriteObjectValue(Notification);
                }
                else
                {
                    writer.WriteNull("notification");
                }
            }
            if (Optional.IsDefined(Resource))
            {
                if (Resource != null)
                {
                    writer.WritePropertyName("resource"u8);
                    writer.WriteObjectValue(Resource);
                }
                else
                {
                    writer.WriteNull("resource");
                }
            }
            if (Optional.IsDefined(Schedule))
            {
                if (Schedule != null)
                {
                    writer.WritePropertyName("schedule"u8);
                    writer.WriteObjectValue(Schedule);
                }
                else
                {
                    writer.WriteNull("schedule");
                }
            }
            if (Optional.IsCollectionDefined(SparkConfiguration))
            {
                if (SparkConfiguration != null)
                {
                    writer.WritePropertyName("sparkConfiguration"u8);
                    writer.WriteStartObject();
                    foreach (var item in SparkConfiguration)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("sparkConfiguration");
                }
            }
            if (Optional.IsDefined(StoreType))
            {
                writer.WritePropertyName("storeType"u8);
                writer.WriteStringValue(StoreType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static MaterializationSettings DeserializeMaterializationSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<NotificationSetting> notification = default;
            Optional<MaterializationComputeResource> resource = default;
            Optional<MachineLearningRecurrenceTrigger> schedule = default;
            Optional<IDictionary<string, string>> sparkConfiguration = default;
            Optional<MaterializationStoreType> storeType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("notification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        notification = null;
                        continue;
                    }
                    notification = NotificationSetting.DeserializeNotificationSetting(property.Value);
                    continue;
                }
                if (property.NameEquals("resource"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resource = null;
                        continue;
                    }
                    resource = MaterializationComputeResource.DeserializeMaterializationComputeResource(property.Value);
                    continue;
                }
                if (property.NameEquals("schedule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        schedule = null;
                        continue;
                    }
                    schedule = MachineLearningRecurrenceTrigger.DeserializeMachineLearningRecurrenceTrigger(property.Value);
                    continue;
                }
                if (property.NameEquals("sparkConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sparkConfiguration = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    sparkConfiguration = dictionary;
                    continue;
                }
                if (property.NameEquals("storeType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storeType = new MaterializationStoreType(property.Value.GetString());
                    continue;
                }
            }
            return new MaterializationSettings(notification.Value, resource.Value, schedule.Value, Optional.ToDictionary(sparkConfiguration), Optional.ToNullable(storeType));
        }
    }
}
