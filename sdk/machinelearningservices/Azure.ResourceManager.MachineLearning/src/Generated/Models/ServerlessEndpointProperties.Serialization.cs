// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ServerlessEndpointProperties : IUtf8JsonSerializable, IJsonModel<ServerlessEndpointProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ServerlessEndpointProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ServerlessEndpointProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServerlessEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServerlessEndpointProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("authMode"u8);
            writer.WriteStringValue(AuthMode.ToString());
            if (Optional.IsDefined(ContentSafety))
            {
                if (ContentSafety != null)
                {
                    writer.WritePropertyName("contentSafety"u8);
                    writer.WriteObjectValue(ContentSafety, options);
                }
                else
                {
                    writer.WriteNull("contentSafety");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(EndpointState))
            {
                writer.WritePropertyName("endpointState"u8);
                writer.WriteStringValue(EndpointState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(InferenceEndpoint))
            {
                if (InferenceEndpoint != null)
                {
                    writer.WritePropertyName("inferenceEndpoint"u8);
                    writer.WriteObjectValue(InferenceEndpoint, options);
                }
                else
                {
                    writer.WriteNull("inferenceEndpoint");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(MarketplaceSubscriptionId))
            {
                if (MarketplaceSubscriptionId != null)
                {
                    writer.WritePropertyName("marketplaceSubscriptionId"u8);
                    writer.WriteStringValue(MarketplaceSubscriptionId);
                }
                else
                {
                    writer.WriteNull("marketplaceSubscriptionId");
                }
            }
            if (Optional.IsDefined(ModelSettings))
            {
                if (ModelSettings != null)
                {
                    writer.WritePropertyName("modelSettings"u8);
                    writer.WriteObjectValue(ModelSettings, options);
                }
                else
                {
                    writer.WriteNull("modelSettings");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ServerlessEndpointProperties IJsonModel<ServerlessEndpointProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServerlessEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ServerlessEndpointProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeServerlessEndpointProperties(document.RootElement, options);
        }

        internal static ServerlessEndpointProperties DeserializeServerlessEndpointProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ServerlessInferenceEndpointAuthMode authMode = default;
            ContentSafety contentSafety = default;
            ServerlessEndpointState? endpointState = default;
            ServerlessInferenceEndpoint inferenceEndpoint = default;
            string marketplaceSubscriptionId = default;
            ModelSettings modelSettings = default;
            MachineLearningEndpointProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authMode"u8))
                {
                    authMode = new ServerlessInferenceEndpointAuthMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("contentSafety"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        contentSafety = null;
                        continue;
                    }
                    contentSafety = ContentSafety.DeserializeContentSafety(property.Value, options);
                    continue;
                }
                if (property.NameEquals("endpointState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endpointState = new ServerlessEndpointState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("inferenceEndpoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inferenceEndpoint = null;
                        continue;
                    }
                    inferenceEndpoint = ServerlessInferenceEndpoint.DeserializeServerlessInferenceEndpoint(property.Value, options);
                    continue;
                }
                if (property.NameEquals("marketplaceSubscriptionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        marketplaceSubscriptionId = null;
                        continue;
                    }
                    marketplaceSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modelSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modelSettings = null;
                        continue;
                    }
                    modelSettings = ModelSettings.DeserializeModelSettings(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new MachineLearningEndpointProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ServerlessEndpointProperties(
                authMode,
                contentSafety,
                endpointState,
                inferenceEndpoint,
                marketplaceSubscriptionId,
                modelSettings,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ServerlessEndpointProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServerlessEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ServerlessEndpointProperties)} does not support writing '{options.Format}' format.");
            }
        }

        ServerlessEndpointProperties IPersistableModel<ServerlessEndpointProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ServerlessEndpointProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeServerlessEndpointProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ServerlessEndpointProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ServerlessEndpointProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
