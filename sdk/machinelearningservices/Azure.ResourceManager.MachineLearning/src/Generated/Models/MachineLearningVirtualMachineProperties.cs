// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// The MachineLearningVirtualMachineProperties.
    /// Serialized Name: VirtualMachineSchemaProperties
    /// </summary>
    public partial class MachineLearningVirtualMachineProperties
    {
        /// <summary> Initializes a new instance of MachineLearningVirtualMachineProperties. </summary>
        public MachineLearningVirtualMachineProperties()
        {
        }

        /// <summary> Initializes a new instance of MachineLearningVirtualMachineProperties. </summary>
        /// <param name="virtualMachineSize">
        /// Virtual Machine size
        /// Serialized Name: VirtualMachineSchemaProperties.virtualMachineSize
        /// </param>
        /// <param name="sshPort">
        /// Port open for ssh connections.
        /// Serialized Name: VirtualMachineSchemaProperties.sshPort
        /// </param>
        /// <param name="notebookServerPort">
        /// Notebook server port open for ssh connections.
        /// Serialized Name: VirtualMachineSchemaProperties.notebookServerPort
        /// </param>
        /// <param name="address">
        /// Public IP address of the virtual machine.
        /// Serialized Name: VirtualMachineSchemaProperties.address
        /// </param>
        /// <param name="administratorAccount">
        /// Admin credentials for virtual machine
        /// Serialized Name: VirtualMachineSchemaProperties.administratorAccount
        /// </param>
        /// <param name="isNotebookInstanceCompute">
        /// Indicates whether this compute will be used for running notebooks.
        /// Serialized Name: VirtualMachineSchemaProperties.isNotebookInstanceCompute
        /// </param>
        internal MachineLearningVirtualMachineProperties(string virtualMachineSize, int? sshPort, int? notebookServerPort, string address, MachineLearningVmSshCredentials administratorAccount, bool? isNotebookInstanceCompute)
        {
            VirtualMachineSize = virtualMachineSize;
            SshPort = sshPort;
            NotebookServerPort = notebookServerPort;
            Address = address;
            AdministratorAccount = administratorAccount;
            IsNotebookInstanceCompute = isNotebookInstanceCompute;
        }

        /// <summary>
        /// Virtual Machine size
        /// Serialized Name: VirtualMachineSchemaProperties.virtualMachineSize
        /// </summary>
        public string VirtualMachineSize { get; set; }
        /// <summary>
        /// Port open for ssh connections.
        /// Serialized Name: VirtualMachineSchemaProperties.sshPort
        /// </summary>
        public int? SshPort { get; set; }
        /// <summary>
        /// Notebook server port open for ssh connections.
        /// Serialized Name: VirtualMachineSchemaProperties.notebookServerPort
        /// </summary>
        public int? NotebookServerPort { get; set; }
        /// <summary>
        /// Public IP address of the virtual machine.
        /// Serialized Name: VirtualMachineSchemaProperties.address
        /// </summary>
        public string Address { get; set; }
        /// <summary>
        /// Admin credentials for virtual machine
        /// Serialized Name: VirtualMachineSchemaProperties.administratorAccount
        /// </summary>
        public MachineLearningVmSshCredentials AdministratorAccount { get; set; }
        /// <summary>
        /// Indicates whether this compute will be used for running notebooks.
        /// Serialized Name: VirtualMachineSchemaProperties.isNotebookInstanceCompute
        /// </summary>
        public bool? IsNotebookInstanceCompute { get; set; }
    }
}
