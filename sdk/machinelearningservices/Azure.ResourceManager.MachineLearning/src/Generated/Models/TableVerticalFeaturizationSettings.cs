// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Featurization Configuration. </summary>
    public partial class TableVerticalFeaturizationSettings : FeaturizationSettings
    {
        /// <summary> Initializes a new instance of TableVerticalFeaturizationSettings. </summary>
        public TableVerticalFeaturizationSettings()
        {
            BlockedTransformers = new ChangeTrackingList<string>();
            ColumnNameAndTypes = new ChangeTrackingDictionary<string, string>();
            DropColumns = new ChangeTrackingList<string>();
            TransformerParams = new ChangeTrackingDictionary<string, IList<ColumnTransformer>>();
        }

        /// <summary> Initializes a new instance of TableVerticalFeaturizationSettings. </summary>
        /// <param name="datasetLanguage"> Dataset language, useful for the text data. </param>
        /// <param name="blockedTransformers"> These transformers shall not be used in featurization. </param>
        /// <param name="columnNameAndTypes"> Dictionary of column name and its type (int, float, string, datetime etc). </param>
        /// <param name="dropColumns"> Columns to be dropped from data during featurization. </param>
        /// <param name="enableDnnFeaturization"> Determines whether to use Dnn based featurizers for data featurization. </param>
        /// <param name="mode">
        /// Featurization mode - User can keep the default &apos;Auto&apos; mode and AutoML will take care of necessary transformation of the data in featurization phase.
        /// If &apos;Off&apos; is selected then no featurization is done.
        /// If &apos;Custom&apos; is selected then user can specify additional inputs to customize how featurization is done.
        /// </param>
        /// <param name="transformerParams"> User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor. </param>
        internal TableVerticalFeaturizationSettings(string datasetLanguage, IList<string> blockedTransformers, IDictionary<string, string> columnNameAndTypes, IList<string> dropColumns, bool? enableDnnFeaturization, FeaturizationMode? mode, IDictionary<string, IList<ColumnTransformer>> transformerParams) : base(datasetLanguage)
        {
            BlockedTransformers = blockedTransformers;
            ColumnNameAndTypes = columnNameAndTypes;
            DropColumns = dropColumns;
            EnableDnnFeaturization = enableDnnFeaturization;
            Mode = mode;
            TransformerParams = transformerParams;
        }

        /// <summary> These transformers shall not be used in featurization. </summary>
        public IList<string> BlockedTransformers { get; set; }
        /// <summary> Dictionary of column name and its type (int, float, string, datetime etc). </summary>
        public IDictionary<string, string> ColumnNameAndTypes { get; set; }
        /// <summary> Columns to be dropped from data during featurization. </summary>
        public IList<string> DropColumns { get; set; }
        /// <summary> Determines whether to use Dnn based featurizers for data featurization. </summary>
        public bool? EnableDnnFeaturization { get; set; }
        /// <summary>
        /// Featurization mode - User can keep the default &apos;Auto&apos; mode and AutoML will take care of necessary transformation of the data in featurization phase.
        /// If &apos;Off&apos; is selected then no featurization is done.
        /// If &apos;Custom&apos; is selected then user can specify additional inputs to customize how featurization is done.
        /// </summary>
        public FeaturizationMode? Mode { get; set; }
        /// <summary> User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor. </summary>
        public IDictionary<string, IList<ColumnTransformer>> TransformerParams { get; set; }
    }
}
