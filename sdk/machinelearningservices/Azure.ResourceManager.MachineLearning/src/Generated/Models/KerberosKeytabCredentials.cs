// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The KerberosKeytabCredentials. </summary>
    public partial class KerberosKeytabCredentials : MachineLearningDatastoreCredentials
    {
        /// <summary> Initializes a new instance of <see cref="KerberosKeytabCredentials"/>. </summary>
        /// <param name="secrets"> [Required] Keytab secrets. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secrets"/> is null. </exception>
        public KerberosKeytabCredentials(KerberosKeytabSecrets secrets)
        {
            Argument.AssertNotNull(secrets, nameof(secrets));

            Secrets = secrets;
            CredentialsType = CredentialsType.KerberosKeytab;
        }

        /// <summary> Initializes a new instance of <see cref="KerberosKeytabCredentials"/>. </summary>
        /// <param name="credentialsType"> [Required] Credential type used to authentication with storage. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="secrets"> [Required] Keytab secrets. </param>
        internal KerberosKeytabCredentials(CredentialsType credentialsType, IDictionary<string, BinaryData> serializedAdditionalRawData, KerberosKeytabSecrets secrets) : base(credentialsType, serializedAdditionalRawData)
        {
            Secrets = secrets;
            CredentialsType = credentialsType;
        }

        /// <summary> Initializes a new instance of <see cref="KerberosKeytabCredentials"/> for deserialization. </summary>
        internal KerberosKeytabCredentials()
        {
        }

        /// <summary> [Required] Keytab secrets. </summary>
        public KerberosKeytabSecrets Secrets { get; set; }
    }
}
