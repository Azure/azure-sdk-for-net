// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class SystemCreatedStorageAccount : IUtf8JsonSerializable, IJsonModel<SystemCreatedStorageAccount>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SystemCreatedStorageAccount>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<SystemCreatedStorageAccount>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<SystemCreatedStorageAccount>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<SystemCreatedStorageAccount>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(AllowBlobPublicAccess))
            {
                writer.WritePropertyName("allowBlobPublicAccess"u8);
                writer.WriteBooleanValue(AllowBlobPublicAccess.Value);
            }
            if (Optional.IsDefined(ArmResourceIdentifier))
            {
                if (ArmResourceIdentifier != null)
                {
                    writer.WritePropertyName("armResourceId"u8);
                    writer.WriteObjectValue(ArmResourceIdentifier);
                }
                else
                {
                    writer.WriteNull("armResourceId");
                }
            }
            if (Optional.IsDefined(StorageAccountHnsEnabled))
            {
                writer.WritePropertyName("storageAccountHnsEnabled"u8);
                writer.WriteBooleanValue(StorageAccountHnsEnabled.Value);
            }
            if (Optional.IsDefined(StorageAccountName))
            {
                if (StorageAccountName != null)
                {
                    writer.WritePropertyName("storageAccountName"u8);
                    writer.WriteStringValue(StorageAccountName);
                }
                else
                {
                    writer.WriteNull("storageAccountName");
                }
            }
            if (Optional.IsDefined(StorageAccountType))
            {
                if (StorageAccountType != null)
                {
                    writer.WritePropertyName("storageAccountType"u8);
                    writer.WriteStringValue(StorageAccountType);
                }
                else
                {
                    writer.WriteNull("storageAccountType");
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SystemCreatedStorageAccount IJsonModel<SystemCreatedStorageAccount>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SystemCreatedStorageAccount)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSystemCreatedStorageAccount(document.RootElement, options);
        }

        internal static SystemCreatedStorageAccount DeserializeSystemCreatedStorageAccount(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> allowBlobPublicAccess = default;
            Optional<ArmResourceId> armResourceId = default;
            Optional<bool> storageAccountHnsEnabled = default;
            Optional<string> storageAccountName = default;
            Optional<string> storageAccountType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("allowBlobPublicAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowBlobPublicAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("armResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        armResourceId = null;
                        continue;
                    }
                    armResourceId = Models.ArmResourceId.DeserializeArmResourceId(property.Value);
                    continue;
                }
                if (property.NameEquals("storageAccountHnsEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageAccountHnsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("storageAccountName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storageAccountName = null;
                        continue;
                    }
                    storageAccountName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccountType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storageAccountType = null;
                        continue;
                    }
                    storageAccountType = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SystemCreatedStorageAccount(Optional.ToNullable(allowBlobPublicAccess), armResourceId.Value, Optional.ToNullable(storageAccountHnsEnabled), storageAccountName.Value, storageAccountType.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SystemCreatedStorageAccount>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SystemCreatedStorageAccount)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SystemCreatedStorageAccount IPersistableModel<SystemCreatedStorageAccount>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SystemCreatedStorageAccount)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSystemCreatedStorageAccount(document.RootElement, options);
        }

        string IPersistableModel<SystemCreatedStorageAccount>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
