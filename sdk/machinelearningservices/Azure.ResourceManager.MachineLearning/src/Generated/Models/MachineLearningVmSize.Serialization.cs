// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningVmSize : IUtf8JsonSerializable, IJsonModel<MachineLearningVmSize>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MachineLearningVmSize>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MachineLearningVmSize>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningVmSize>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineLearningVmSize)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W" && Optional.IsDefined(Family))
            {
                writer.WritePropertyName("family"u8);
                writer.WriteStringValue(Family);
            }
            if (options.Format != "W" && Optional.IsDefined(VCpus))
            {
                writer.WritePropertyName("vCPUs"u8);
                writer.WriteNumberValue(VCpus.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(Gpus))
            {
                writer.WritePropertyName("gpus"u8);
                writer.WriteNumberValue(Gpus.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(OSVhdSizeMB))
            {
                writer.WritePropertyName("osVhdSizeMB"u8);
                writer.WriteNumberValue(OSVhdSizeMB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxResourceVolumeMB))
            {
                writer.WritePropertyName("maxResourceVolumeMB"u8);
                writer.WriteNumberValue(MaxResourceVolumeMB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MemoryGB))
            {
                writer.WritePropertyName("memoryGB"u8);
                writer.WriteNumberValue(MemoryGB.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LowPriorityCapable))
            {
                writer.WritePropertyName("lowPriorityCapable"u8);
                writer.WriteBooleanValue(LowPriorityCapable.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsPremiumIOSupported))
            {
                writer.WritePropertyName("premiumIO"u8);
                writer.WriteBooleanValue(IsPremiumIOSupported.Value);
            }
            if (Optional.IsDefined(EstimatedVmPrices))
            {
                writer.WritePropertyName("estimatedVMPrices"u8);
                writer.WriteObjectValue(EstimatedVmPrices);
            }
            if (Optional.IsCollectionDefined(SupportedComputeTypes))
            {
                writer.WritePropertyName("supportedComputeTypes"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedComputeTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MachineLearningVmSize IJsonModel<MachineLearningVmSize>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningVmSize>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineLearningVmSize)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningVmSize(document.RootElement, options);
        }

        internal static MachineLearningVmSize DeserializeMachineLearningVmSize(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<string> family = default;
            Optional<int> vCpus = default;
            Optional<int> gpus = default;
            Optional<int> osVhdSizeMB = default;
            Optional<int> maxResourceVolumeMB = default;
            Optional<double> memoryGB = default;
            Optional<bool> lowPriorityCapable = default;
            Optional<bool> premiumIO = default;
            Optional<MachineLearningEstimatedVmPrices> estimatedVmPrices = default;
            Optional<IReadOnlyList<string>> supportedComputeTypes = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("family"u8))
                {
                    family = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vCPUs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vCpus = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("gpus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gpus = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("osVhdSizeMB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osVhdSizeMB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxResourceVolumeMB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxResourceVolumeMB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("memoryGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryGB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("lowPriorityCapable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lowPriorityCapable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("premiumIO"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    premiumIO = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("estimatedVMPrices"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    estimatedVmPrices = MachineLearningEstimatedVmPrices.DeserializeMachineLearningEstimatedVmPrices(property.Value);
                    continue;
                }
                if (property.NameEquals("supportedComputeTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    supportedComputeTypes = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MachineLearningVmSize(name.Value, family.Value, Optional.ToNullable(vCpus), Optional.ToNullable(gpus), Optional.ToNullable(osVhdSizeMB), Optional.ToNullable(maxResourceVolumeMB), Optional.ToNullable(memoryGB), Optional.ToNullable(lowPriorityCapable), Optional.ToNullable(premiumIO), estimatedVmPrices.Value, Optional.ToList(supportedComputeTypes), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                if (Name.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Name}'''");
                }
                else
                {
                    builder.AppendLine($" '{Name}'");
                }
            }

            if (Optional.IsDefined(Family))
            {
                builder.Append("  family:");
                if (Family.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Family}'''");
                }
                else
                {
                    builder.AppendLine($" '{Family}'");
                }
            }

            if (Optional.IsDefined(VCpus))
            {
                builder.Append("  vCPUs:");
                builder.AppendLine($" {VCpus.Value}");
            }

            if (Optional.IsDefined(Gpus))
            {
                builder.Append("  gpus:");
                builder.AppendLine($" {Gpus.Value}");
            }

            if (Optional.IsDefined(OSVhdSizeMB))
            {
                builder.Append("  osVhdSizeMB:");
                builder.AppendLine($" {OSVhdSizeMB.Value}");
            }

            if (Optional.IsDefined(MaxResourceVolumeMB))
            {
                builder.Append("  maxResourceVolumeMB:");
                builder.AppendLine($" {MaxResourceVolumeMB.Value}");
            }

            if (Optional.IsDefined(MemoryGB))
            {
                builder.Append("  memoryGB:");
                builder.AppendLine($" '{MemoryGB.Value.ToString()}'");
            }

            if (Optional.IsDefined(LowPriorityCapable))
            {
                builder.Append("  lowPriorityCapable:");
                var boolValue = LowPriorityCapable.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsPremiumIOSupported))
            {
                builder.Append("  premiumIO:");
                var boolValue = IsPremiumIOSupported.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(EstimatedVmPrices))
            {
                builder.Append("  estimatedVMPrices:");
                AppendChildObject(builder, EstimatedVmPrices, options, 2, false);
            }

            if (Optional.IsCollectionDefined(SupportedComputeTypes))
            {
                if (SupportedComputeTypes.Any())
                {
                    builder.Append("  supportedComputeTypes:");
                    builder.AppendLine(" [");
                    foreach (var item in SupportedComputeTypes)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("    '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"    '{item}'");
                        }
                    }
                    builder.AppendLine("  ]");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<MachineLearningVmSize>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningVmSize>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(MachineLearningVmSize)} does not support '{options.Format}' format.");
            }
        }

        MachineLearningVmSize IPersistableModel<MachineLearningVmSize>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningVmSize>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMachineLearningVmSize(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(MachineLearningVmSize)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MachineLearningVmSize>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
