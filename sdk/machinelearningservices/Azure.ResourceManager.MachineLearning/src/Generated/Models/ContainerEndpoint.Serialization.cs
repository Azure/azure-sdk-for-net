// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ContainerEndpoint : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol"u8);
                writer.WriteStringValue(Protocol.Value.ToString());
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target"u8);
                writer.WriteNumberValue(Target.Value);
            }
            if (Optional.IsDefined(Published))
            {
                if (Published != null)
                {
                    writer.WritePropertyName("published"u8);
                    writer.WriteNumberValue(Published.Value);
                }
                else
                {
                    writer.WriteNull("published");
                }
            }
            if (Optional.IsDefined(HostIP))
            {
                if (HostIP != null)
                {
                    writer.WritePropertyName("hostIp"u8);
                    writer.WriteStringValue(HostIP);
                }
                else
                {
                    writer.WriteNull("hostIp");
                }
            }
            writer.WriteEndObject();
        }

        internal static ContainerEndpoint DeserializeContainerEndpoint(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ContainerCommunicationProtocol> protocol = default;
            Optional<string> name = default;
            Optional<int> target = default;
            Optional<int?> published = default;
            Optional<string> hostIP = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    protocol = new ContainerCommunicationProtocol(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("target"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    target = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("published"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        published = null;
                        continue;
                    }
                    published = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("hostIp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        hostIP = null;
                        continue;
                    }
                    hostIP = property.Value.GetString();
                    continue;
                }
            }
            return new ContainerEndpoint(Optional.ToNullable(protocol), name.Value, Optional.ToNullable(target), Optional.ToNullable(published), hostIP.Value);
        }
    }
}
