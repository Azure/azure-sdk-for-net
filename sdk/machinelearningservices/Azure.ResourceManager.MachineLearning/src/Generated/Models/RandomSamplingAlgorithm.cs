// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Defines a Sampling Algorithm that generates values randomly. </summary>
    public partial class RandomSamplingAlgorithm : SamplingAlgorithm
    {
        /// <summary> Initializes a new instance of <see cref="RandomSamplingAlgorithm"/>. </summary>
        public RandomSamplingAlgorithm()
        {
            SamplingAlgorithmType = SamplingAlgorithmType.Random;
        }

        /// <summary> Initializes a new instance of <see cref="RandomSamplingAlgorithm"/>. </summary>
        /// <param name="samplingAlgorithmType"> [Required] The algorithm used for generating hyperparameter values, along with configuration properties. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="logbase"> An optional positive number or e in string format to be used as base for log based random sampling. </param>
        /// <param name="rule"> The specific type of random algorithm. </param>
        /// <param name="seed"> An optional integer to use as the seed for random number generation. </param>
        internal RandomSamplingAlgorithm(SamplingAlgorithmType samplingAlgorithmType, IDictionary<string, BinaryData> serializedAdditionalRawData, string logbase, RandomSamplingAlgorithmRule? rule, int? seed) : base(samplingAlgorithmType, serializedAdditionalRawData)
        {
            Logbase = logbase;
            Rule = rule;
            Seed = seed;
            SamplingAlgorithmType = samplingAlgorithmType;
        }

        /// <summary> An optional positive number or e in string format to be used as base for log based random sampling. </summary>
        public string Logbase { get; set; }
        /// <summary> The specific type of random algorithm. </summary>
        public RandomSamplingAlgorithmRule? Rule { get; set; }
        /// <summary> An optional integer to use as the seed for random number generation. </summary>
        public int? Seed { get; set; }
    }
}
