// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningKubernetesProperties : IUtf8JsonSerializable, IModelJsonSerializable<MachineLearningKubernetesProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MachineLearningKubernetesProperties>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MachineLearningKubernetesProperties>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningKubernetesProperties>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(RelayConnectionString))
            {
                if (RelayConnectionString != null)
                {
                    writer.WritePropertyName("relayConnectionString"u8);
                    writer.WriteStringValue(RelayConnectionString);
                }
                else
                {
                    writer.WriteNull("relayConnectionString");
                }
            }
            if (Optional.IsDefined(ServiceBusConnectionString))
            {
                if (ServiceBusConnectionString != null)
                {
                    writer.WritePropertyName("serviceBusConnectionString"u8);
                    writer.WriteStringValue(ServiceBusConnectionString);
                }
                else
                {
                    writer.WriteNull("serviceBusConnectionString");
                }
            }
            if (Optional.IsDefined(ExtensionPrincipalId))
            {
                if (ExtensionPrincipalId != null)
                {
                    writer.WritePropertyName("extensionPrincipalId"u8);
                    writer.WriteStringValue(ExtensionPrincipalId);
                }
                else
                {
                    writer.WriteNull("extensionPrincipalId");
                }
            }
            if (Optional.IsDefined(ExtensionInstanceReleaseTrain))
            {
                writer.WritePropertyName("extensionInstanceReleaseTrain"u8);
                writer.WriteStringValue(ExtensionInstanceReleaseTrain);
            }
            if (Optional.IsDefined(VcName))
            {
                writer.WritePropertyName("vcName"u8);
                writer.WriteStringValue(VcName);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace"u8);
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(DefaultInstanceType))
            {
                writer.WritePropertyName("defaultInstanceType"u8);
                writer.WriteStringValue(DefaultInstanceType);
            }
            if (Optional.IsCollectionDefined(InstanceTypes))
            {
                writer.WritePropertyName("instanceTypes"u8);
                writer.WriteStartObject();
                foreach (var item in InstanceTypes)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningInstanceTypeSchema>)item.Value).Serialize(writer, options);
                    }
                }
                writer.WriteEndObject();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MachineLearningKubernetesProperties DeserializeMachineLearningKubernetesProperties(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> relayConnectionString = default;
            Optional<string> serviceBusConnectionString = default;
            Optional<string> extensionPrincipalId = default;
            Optional<string> extensionInstanceReleaseTrain = default;
            Optional<string> vcName = default;
            Optional<string> @namespace = default;
            Optional<string> defaultInstanceType = default;
            Optional<IDictionary<string, MachineLearningInstanceTypeSchema>> instanceTypes = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("relayConnectionString"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        relayConnectionString = null;
                        continue;
                    }
                    relayConnectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceBusConnectionString"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        serviceBusConnectionString = null;
                        continue;
                    }
                    serviceBusConnectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extensionPrincipalId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        extensionPrincipalId = null;
                        continue;
                    }
                    extensionPrincipalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extensionInstanceReleaseTrain"u8))
                {
                    extensionInstanceReleaseTrain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vcName"u8))
                {
                    vcName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"u8))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultInstanceType"u8))
                {
                    defaultInstanceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, MachineLearningInstanceTypeSchema> dictionary = new Dictionary<string, MachineLearningInstanceTypeSchema>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, MachineLearningInstanceTypeSchema.DeserializeMachineLearningInstanceTypeSchema(property0.Value));
                    }
                    instanceTypes = dictionary;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MachineLearningKubernetesProperties(relayConnectionString.Value, serviceBusConnectionString.Value, extensionPrincipalId.Value, extensionInstanceReleaseTrain.Value, vcName.Value, @namespace.Value, defaultInstanceType.Value, Optional.ToDictionary(instanceTypes), rawData);
        }

        MachineLearningKubernetesProperties IModelJsonSerializable<MachineLearningKubernetesProperties>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningKubernetesProperties>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningKubernetesProperties(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MachineLearningKubernetesProperties>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningKubernetesProperties>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MachineLearningKubernetesProperties IModelSerializable<MachineLearningKubernetesProperties>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MachineLearningKubernetesProperties>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMachineLearningKubernetesProperties(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MachineLearningKubernetesProperties"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MachineLearningKubernetesProperties"/> to convert. </param>
        public static implicit operator RequestContent(MachineLearningKubernetesProperties model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MachineLearningKubernetesProperties"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MachineLearningKubernetesProperties(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMachineLearningKubernetesProperties(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
