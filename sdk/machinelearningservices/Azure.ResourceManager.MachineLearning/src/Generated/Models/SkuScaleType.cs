// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Node scaling setting for the compute sku. </summary>
    public readonly partial struct SkuScaleType : IEquatable<SkuScaleType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkuScaleType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkuScaleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AutomaticValue = "Automatic";
        private const string ManualValue = "Manual";
        private const string NoneValue = "None";

        /// <summary> Automatically scales node count. </summary>
        public static SkuScaleType Automatic { get; } = new SkuScaleType(AutomaticValue);
        /// <summary> Node count scaled upon user request. </summary>
        public static SkuScaleType Manual { get; } = new SkuScaleType(ManualValue);
        /// <summary> Fixed set of nodes. </summary>
        public static SkuScaleType None { get; } = new SkuScaleType(NoneValue);
        /// <summary> Determines if two <see cref="SkuScaleType"/> values are the same. </summary>
        public static bool operator ==(SkuScaleType left, SkuScaleType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkuScaleType"/> values are not the same. </summary>
        public static bool operator !=(SkuScaleType left, SkuScaleType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkuScaleType"/>. </summary>
        public static implicit operator SkuScaleType(string value) => new SkuScaleType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkuScaleType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkuScaleType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
