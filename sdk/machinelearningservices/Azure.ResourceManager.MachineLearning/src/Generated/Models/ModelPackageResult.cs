// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Package response returned after async package operation completes successfully. </summary>
    public partial class ModelPackageResult
    {
        /// <summary> Initializes a new instance of <see cref="ModelPackageResult"/>. </summary>
        internal ModelPackageResult()
        {
            EnvironmentVariables = new ChangeTrackingDictionary<string, string>();
            Inputs = new ChangeTrackingList<ModelPackageInput>();
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="ModelPackageResult"/>. </summary>
        /// <param name="baseEnvironmentSource">
        /// Base environment to start with.
        /// Please note <see cref="Models.BaseEnvironmentSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BaseEnvironmentType"/>.
        /// </param>
        /// <param name="buildId"> Build id of the image build operation. </param>
        /// <param name="buildState"> Build state of the image build operation. </param>
        /// <param name="environmentVariables"> Collection of environment variables. </param>
        /// <param name="inferencingServer">
        /// Inferencing server configurations.
        /// Please note <see cref="Models.InferencingServer"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureMLBatchInferencingServer"/>, <see cref="AzureMLOnlineInferencingServer"/>, <see cref="CustomInferencingServer"/> and <see cref="TritonInferencingServer"/>.
        /// </param>
        /// <param name="inputs"> Collection of inputs. </param>
        /// <param name="logUri"> Log url of the image build operation. </param>
        /// <param name="modelConfiguration"> Model configuration including the mount mode. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="targetEnvironmentId"> Asset ID of the target environment created by package operation. </param>
        internal ModelPackageResult(BaseEnvironmentSource baseEnvironmentSource, string buildId, PackageBuildState? buildState, IReadOnlyDictionary<string, string> environmentVariables, InferencingServer inferencingServer, IReadOnlyList<ModelPackageInput> inputs, Uri logUri, ModelConfiguration modelConfiguration, IReadOnlyDictionary<string, string> tags, string targetEnvironmentId)
        {
            BaseEnvironmentSource = baseEnvironmentSource;
            BuildId = buildId;
            BuildState = buildState;
            EnvironmentVariables = environmentVariables;
            InferencingServer = inferencingServer;
            Inputs = inputs;
            LogUri = logUri;
            ModelConfiguration = modelConfiguration;
            Tags = tags;
            TargetEnvironmentId = targetEnvironmentId;
        }

        /// <summary>
        /// Base environment to start with.
        /// Please note <see cref="Models.BaseEnvironmentSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BaseEnvironmentType"/>.
        /// </summary>
        public BaseEnvironmentSource BaseEnvironmentSource { get; }
        /// <summary> Build id of the image build operation. </summary>
        public string BuildId { get; }
        /// <summary> Build state of the image build operation. </summary>
        public PackageBuildState? BuildState { get; }
        /// <summary> Collection of environment variables. </summary>
        public IReadOnlyDictionary<string, string> EnvironmentVariables { get; }
        /// <summary>
        /// Inferencing server configurations.
        /// Please note <see cref="Models.InferencingServer"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureMLBatchInferencingServer"/>, <see cref="AzureMLOnlineInferencingServer"/>, <see cref="CustomInferencingServer"/> and <see cref="TritonInferencingServer"/>.
        /// </summary>
        public InferencingServer InferencingServer { get; }
        /// <summary> Collection of inputs. </summary>
        public IReadOnlyList<ModelPackageInput> Inputs { get; }
        /// <summary> Log url of the image build operation. </summary>
        public Uri LogUri { get; }
        /// <summary> Model configuration including the mount mode. </summary>
        public ModelConfiguration ModelConfiguration { get; }
        /// <summary> Tag dictionary. Tags can be added, removed, and updated. </summary>
        public IReadOnlyDictionary<string, string> Tags { get; }
        /// <summary> Asset ID of the target environment created by package operation. </summary>
        public string TargetEnvironmentId { get; }
    }
}
