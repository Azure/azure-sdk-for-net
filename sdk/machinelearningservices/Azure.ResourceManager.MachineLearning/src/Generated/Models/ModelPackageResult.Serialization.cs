// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ModelPackageResult : IUtf8JsonSerializable, IJsonModel<ModelPackageResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ModelPackageResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ModelPackageResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ModelPackageResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ModelPackageResult)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(BaseEnvironmentSource))
            {
                if (BaseEnvironmentSource != null)
                {
                    writer.WritePropertyName("baseEnvironmentSource"u8);
                    writer.WriteObjectValue(BaseEnvironmentSource, options);
                }
                else
                {
                    writer.WriteNull("baseEnvironmentSource");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(BuildId))
            {
                if (BuildId != null)
                {
                    writer.WritePropertyName("buildId"u8);
                    writer.WriteStringValue(BuildId);
                }
                else
                {
                    writer.WriteNull("buildId");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(BuildState))
            {
                writer.WritePropertyName("buildState"u8);
                writer.WriteStringValue(BuildState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(EnvironmentVariables))
            {
                if (EnvironmentVariables != null)
                {
                    writer.WritePropertyName("environmentVariables"u8);
                    writer.WriteStartObject();
                    foreach (var item in EnvironmentVariables)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("environmentVariables");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(InferencingServer))
            {
                if (InferencingServer != null)
                {
                    writer.WritePropertyName("inferencingServer"u8);
                    writer.WriteObjectValue(InferencingServer, options);
                }
                else
                {
                    writer.WriteNull("inferencingServer");
                }
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Inputs))
            {
                if (Inputs != null)
                {
                    writer.WritePropertyName("inputs"u8);
                    writer.WriteStartArray();
                    foreach (var item in Inputs)
                    {
                        writer.WriteObjectValue(item, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("inputs");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(LogUri))
            {
                if (LogUri != null)
                {
                    writer.WritePropertyName("logUrl"u8);
                    writer.WriteStringValue(LogUri.AbsoluteUri);
                }
                else
                {
                    writer.WriteNull("logUrl");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(ModelConfiguration))
            {
                if (ModelConfiguration != null)
                {
                    writer.WritePropertyName("modelConfiguration"u8);
                    writer.WriteObjectValue(ModelConfiguration, options);
                }
                else
                {
                    writer.WriteNull("modelConfiguration");
                }
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Tags))
            {
                if (Tags != null)
                {
                    writer.WritePropertyName("tags"u8);
                    writer.WriteStartObject();
                    foreach (var item in Tags)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("tags");
                }
            }
            if (options.Format != "W" && Optional.IsDefined(TargetEnvironmentId))
            {
                if (TargetEnvironmentId != null)
                {
                    writer.WritePropertyName("targetEnvironmentId"u8);
                    writer.WriteStringValue(TargetEnvironmentId);
                }
                else
                {
                    writer.WriteNull("targetEnvironmentId");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ModelPackageResult IJsonModel<ModelPackageResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ModelPackageResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ModelPackageResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeModelPackageResult(document.RootElement, options);
        }

        internal static ModelPackageResult DeserializeModelPackageResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BaseEnvironmentSource baseEnvironmentSource = default;
            string buildId = default;
            PackageBuildState? buildState = default;
            IReadOnlyDictionary<string, string> environmentVariables = default;
            InferencingServer inferencingServer = default;
            IReadOnlyList<ModelPackageInput> inputs = default;
            Uri logUrl = default;
            ModelConfiguration modelConfiguration = default;
            IReadOnlyDictionary<string, string> tags = default;
            string targetEnvironmentId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseEnvironmentSource"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        baseEnvironmentSource = null;
                        continue;
                    }
                    baseEnvironmentSource = BaseEnvironmentSource.DeserializeBaseEnvironmentSource(property.Value, options);
                    continue;
                }
                if (property.NameEquals("buildId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        buildId = null;
                        continue;
                    }
                    buildId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("buildState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    buildState = new PackageBuildState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("environmentVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        environmentVariables = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    environmentVariables = dictionary;
                    continue;
                }
                if (property.NameEquals("inferencingServer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inferencingServer = null;
                        continue;
                    }
                    inferencingServer = InferencingServer.DeserializeInferencingServer(property.Value, options);
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inputs = null;
                        continue;
                    }
                    List<ModelPackageInput> array = new List<ModelPackageInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelPackageInput.DeserializeModelPackageInput(item, options));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("logUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        logUrl = null;
                        continue;
                    }
                    logUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("modelConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modelConfiguration = null;
                        continue;
                    }
                    modelConfiguration = ModelConfiguration.DeserializeModelConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tags = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("targetEnvironmentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetEnvironmentId = null;
                        continue;
                    }
                    targetEnvironmentId = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ModelPackageResult(
                baseEnvironmentSource,
                buildId,
                buildState,
                environmentVariables ?? new ChangeTrackingDictionary<string, string>(),
                inferencingServer,
                inputs ?? new ChangeTrackingList<ModelPackageInput>(),
                logUrl,
                modelConfiguration,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                targetEnvironmentId,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ModelPackageResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ModelPackageResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ModelPackageResult)} does not support writing '{options.Format}' format.");
            }
        }

        ModelPackageResult IPersistableModel<ModelPackageResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ModelPackageResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeModelPackageResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ModelPackageResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ModelPackageResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
