// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ModelPackageResult
    {
        internal static ModelPackageResult DeserializeModelPackageResult(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<BaseEnvironmentSource> baseEnvironmentSource = default;
            Optional<string> buildId = default;
            Optional<PackageBuildState> buildState = default;
            Optional<IReadOnlyDictionary<string, string>> environmentVariables = default;
            Optional<InferencingServer> inferencingServer = default;
            Optional<IReadOnlyList<ModelPackageInput>> inputs = default;
            Optional<Uri> logUrl = default;
            Optional<ModelConfiguration> modelConfiguration = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            Optional<string> targetEnvironmentId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseEnvironmentSource"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        baseEnvironmentSource = null;
                        continue;
                    }
                    baseEnvironmentSource = BaseEnvironmentSource.DeserializeBaseEnvironmentSource(property.Value);
                    continue;
                }
                if (property.NameEquals("buildId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        buildId = null;
                        continue;
                    }
                    buildId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("buildState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    buildState = new PackageBuildState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("environmentVariables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        environmentVariables = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    environmentVariables = dictionary;
                    continue;
                }
                if (property.NameEquals("inferencingServer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inferencingServer = null;
                        continue;
                    }
                    inferencingServer = InferencingServer.DeserializeInferencingServer(property.Value);
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inputs = null;
                        continue;
                    }
                    List<ModelPackageInput> array = new List<ModelPackageInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelPackageInput.DeserializeModelPackageInput(item));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("logUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        logUrl = null;
                        continue;
                    }
                    logUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("modelConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modelConfiguration = null;
                        continue;
                    }
                    modelConfiguration = ModelConfiguration.DeserializeModelConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tags = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("targetEnvironmentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetEnvironmentId = null;
                        continue;
                    }
                    targetEnvironmentId = property.Value.GetString();
                    continue;
                }
            }
            return new ModelPackageResult(baseEnvironmentSource.Value, buildId.Value, Optional.ToNullable(buildState), Optional.ToDictionary(environmentVariables), inferencingServer.Value, Optional.ToList(inputs), logUrl.Value, modelConfiguration.Value, Optional.ToDictionary(tags), targetEnvironmentId.Value);
        }
    }
}
