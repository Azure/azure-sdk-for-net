// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class OnlineInferenceConfiguration : IUtf8JsonSerializable, IJsonModel<OnlineInferenceConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<OnlineInferenceConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<OnlineInferenceConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<OnlineInferenceConfiguration>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<OnlineInferenceConfiguration>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Configurations))
            {
                if (Configurations != null)
                {
                    writer.WritePropertyName("configurations"u8);
                    writer.WriteStartObject();
                    foreach (var item in Configurations)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("configurations");
                }
            }
            if (Optional.IsDefined(EntryScript))
            {
                if (EntryScript != null)
                {
                    writer.WritePropertyName("entryScript"u8);
                    writer.WriteStringValue(EntryScript);
                }
                else
                {
                    writer.WriteNull("entryScript");
                }
            }
            if (Optional.IsDefined(LivenessRoute))
            {
                if (LivenessRoute != null)
                {
                    writer.WritePropertyName("livenessRoute"u8);
                    writer.WriteObjectValue(LivenessRoute);
                }
                else
                {
                    writer.WriteNull("livenessRoute");
                }
            }
            if (Optional.IsDefined(ReadinessRoute))
            {
                if (ReadinessRoute != null)
                {
                    writer.WritePropertyName("readinessRoute"u8);
                    writer.WriteObjectValue(ReadinessRoute);
                }
                else
                {
                    writer.WriteNull("readinessRoute");
                }
            }
            if (Optional.IsDefined(ScoringRoute))
            {
                if (ScoringRoute != null)
                {
                    writer.WritePropertyName("scoringRoute"u8);
                    writer.WriteObjectValue(ScoringRoute);
                }
                else
                {
                    writer.WriteNull("scoringRoute");
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        OnlineInferenceConfiguration IJsonModel<OnlineInferenceConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(OnlineInferenceConfiguration)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeOnlineInferenceConfiguration(document.RootElement, options);
        }

        internal static OnlineInferenceConfiguration DeserializeOnlineInferenceConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> configurations = default;
            Optional<string> entryScript = default;
            Optional<MachineLearningInferenceContainerRoute> livenessRoute = default;
            Optional<MachineLearningInferenceContainerRoute> readinessRoute = default;
            Optional<MachineLearningInferenceContainerRoute> scoringRoute = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("configurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        configurations = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    configurations = dictionary;
                    continue;
                }
                if (property.NameEquals("entryScript"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        entryScript = null;
                        continue;
                    }
                    entryScript = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("livenessRoute"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        livenessRoute = null;
                        continue;
                    }
                    livenessRoute = MachineLearningInferenceContainerRoute.DeserializeMachineLearningInferenceContainerRoute(property.Value);
                    continue;
                }
                if (property.NameEquals("readinessRoute"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        readinessRoute = null;
                        continue;
                    }
                    readinessRoute = MachineLearningInferenceContainerRoute.DeserializeMachineLearningInferenceContainerRoute(property.Value);
                    continue;
                }
                if (property.NameEquals("scoringRoute"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scoringRoute = null;
                        continue;
                    }
                    scoringRoute = MachineLearningInferenceContainerRoute.DeserializeMachineLearningInferenceContainerRoute(property.Value);
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new OnlineInferenceConfiguration(Optional.ToDictionary(configurations), entryScript.Value, livenessRoute.Value, readinessRoute.Value, scoringRoute.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<OnlineInferenceConfiguration>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(OnlineInferenceConfiguration)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        OnlineInferenceConfiguration IPersistableModel<OnlineInferenceConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(OnlineInferenceConfiguration)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeOnlineInferenceConfiguration(document.RootElement, options);
        }

        string IPersistableModel<OnlineInferenceConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
