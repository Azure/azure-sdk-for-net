// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    [ModelReaderProxy(typeof(UnknownExportSummary))]
    public partial class ExportSummary : IUtf8JsonSerializable, IJsonModel<ExportSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExportSummary>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<ExportSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(EndOn))
                {
                    if (EndOn != null)
                    {
                        writer.WritePropertyName("endDateTime"u8);
                        writer.WriteStringValue(EndOn.Value, "O");
                    }
                    else
                    {
                        writer.WriteNull("endDateTime");
                    }
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(ExportedRowCount))
                {
                    if (ExportedRowCount != null)
                    {
                        writer.WritePropertyName("exportedRowCount"u8);
                        writer.WriteNumberValue(ExportedRowCount.Value);
                    }
                    else
                    {
                        writer.WriteNull("exportedRowCount");
                    }
                }
            }
            writer.WritePropertyName("format"u8);
            writer.WriteStringValue(Format.ToString());
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(LabelingJobId))
                {
                    if (LabelingJobId != null)
                    {
                        writer.WritePropertyName("labelingJobId"u8);
                        writer.WriteStringValue(LabelingJobId);
                    }
                    else
                    {
                        writer.WriteNull("labelingJobId");
                    }
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(StartOn))
                {
                    if (StartOn != null)
                    {
                        writer.WritePropertyName("startDateTime"u8);
                        writer.WriteStringValue(StartOn.Value, "O");
                    }
                    else
                    {
                        writer.WriteNull("startDateTime");
                    }
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ExportSummary IJsonModel<ExportSummary>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ExportSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExportSummary(document.RootElement, options);
        }

        internal static ExportSummary DeserializeExportSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("format", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "CSV": return CsvExportSummary.DeserializeCsvExportSummary(element);
                    case "Coco": return CocoExportSummary.DeserializeCocoExportSummary(element);
                    case "Dataset": return DatasetExportSummary.DeserializeDatasetExportSummary(element);
                }
            }
            return UnknownExportSummary.DeserializeUnknownExportSummary(element);
        }

        BinaryData IModel<ExportSummary>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ExportSummary)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ExportSummary IModel<ExportSummary>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ExportSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeExportSummary(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<ExportSummary>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
