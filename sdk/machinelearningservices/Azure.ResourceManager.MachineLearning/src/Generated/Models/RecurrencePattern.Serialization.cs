// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class RecurrencePattern : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("hours");
            writer.WriteStartArray();
            foreach (var item in Hours)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("minutes");
            writer.WriteStartArray();
            foreach (var item in Minutes)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Weekdays))
            {
                if (Weekdays != null)
                {
                    writer.WritePropertyName("weekdays");
                    writer.WriteStartArray();
                    foreach (var item in Weekdays)
                    {
                        writer.WriteStringValue(item.ToString());
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("weekdays");
                }
            }
            writer.WriteEndObject();
        }

        internal static RecurrencePattern DeserializeRecurrencePattern(JsonElement element)
        {
            IList<int> hours = default;
            IList<int> minutes = default;
            Optional<IList<Weekday>> weekdays = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hours"))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    hours = array;
                    continue;
                }
                if (property.NameEquals("minutes"))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    minutes = array;
                    continue;
                }
                if (property.NameEquals("weekdays"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        weekdays = null;
                        continue;
                    }
                    List<Weekday> array = new List<Weekday>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Weekday(item.GetString()));
                    }
                    weekdays = array;
                    continue;
                }
            }
            return new RecurrencePattern(hours, minutes, Optional.ToList(weekdays));
        }
    }
}
