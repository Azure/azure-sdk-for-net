// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class DatastoreCredentials : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("credentialsType");
            writer.WriteStringValue(CredentialsType.ToString());
            writer.WriteEndObject();
        }

        internal static DatastoreCredentials DeserializeDatastoreCredentials(JsonElement element)
        {
            if (element.TryGetProperty("credentialsType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AccountKey": return AccountKeyDatastoreCredentials.DeserializeAccountKeyDatastoreCredentials(element);
                    case "Certificate": return CertificateDatastoreCredentials.DeserializeCertificateDatastoreCredentials(element);
                    case "KerberosKeytab": return KerberosKeytabCredentials.DeserializeKerberosKeytabCredentials(element);
                    case "KerberosPassword": return KerberosPasswordCredentials.DeserializeKerberosPasswordCredentials(element);
                    case "None": return NoneDatastoreCredentials.DeserializeNoneDatastoreCredentials(element);
                    case "Sas": return SasDatastoreCredentials.DeserializeSasDatastoreCredentials(element);
                    case "ServicePrincipal": return ServicePrincipalDatastoreCredentials.DeserializeServicePrincipalDatastoreCredentials(element);
                }
            }
            CredentialsType credentialsType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("credentialsType"))
                {
                    credentialsType = new CredentialsType(property.Value.GetString());
                    continue;
                }
            }
            return new UnknownDatastoreCredentials(credentialsType);
        }
    }
}
