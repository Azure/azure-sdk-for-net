// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The RecurrenceTrigger. </summary>
    public partial class RecurrenceTrigger : TriggerBase
    {
        /// <summary> Initializes a new instance of RecurrenceTrigger. </summary>
        /// <param name="frequency"> [Required] The frequency to trigger schedule. </param>
        /// <param name="interval"> [Required] Specifies schedule interval in conjunction with frequency. </param>
        public RecurrenceTrigger(RecurrenceFrequency frequency, int interval)
        {
            Frequency = frequency;
            Interval = interval;
            TriggerType = TriggerType.Recurrence;
        }

        /// <summary> Initializes a new instance of RecurrenceTrigger. </summary>
        /// <param name="endTime">
        /// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
        /// Recommented format would be &quot;2022-06-01T00:00:01&quot;
        /// If not present, the schedule will run indefinitely
        /// </param>
        /// <param name="startTime"> Specifies start time of schedule in ISO 8601 format, but without a UTC offset. </param>
        /// <param name="timeZone">
        /// Specifies time zone in which the schedule runs.
        /// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
        /// </param>
        /// <param name="triggerType"> [Required]. </param>
        /// <param name="frequency"> [Required] The frequency to trigger schedule. </param>
        /// <param name="interval"> [Required] Specifies schedule interval in conjunction with frequency. </param>
        /// <param name="schedule"> The recurrence schedule. </param>
        internal RecurrenceTrigger(string endTime, string startTime, string timeZone, TriggerType triggerType, RecurrenceFrequency frequency, int interval, RecurrenceSchedule schedule) : base(endTime, startTime, timeZone, triggerType)
        {
            Frequency = frequency;
            Interval = interval;
            Schedule = schedule;
            TriggerType = triggerType;
        }

        /// <summary> [Required] The frequency to trigger schedule. </summary>
        public RecurrenceFrequency Frequency { get; set; }
        /// <summary> [Required] Specifies schedule interval in conjunction with frequency. </summary>
        public int Interval { get; set; }
        /// <summary> The recurrence schedule. </summary>
        public RecurrenceSchedule Schedule { get; set; }
    }
}
