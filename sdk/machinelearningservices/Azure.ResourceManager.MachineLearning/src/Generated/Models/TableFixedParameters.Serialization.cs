// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class TableFixedParameters : IUtf8JsonSerializable, IJsonModel<TableFixedParameters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TableFixedParameters>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<TableFixedParameters>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TableFixedParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TableFixedParameters)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Booster))
            {
                if (Booster != null)
                {
                    writer.WritePropertyName("booster"u8);
                    writer.WriteStringValue(Booster);
                }
                else
                {
                    writer.WriteNull("booster");
                }
            }
            if (Optional.IsDefined(BoostingType))
            {
                if (BoostingType != null)
                {
                    writer.WritePropertyName("boostingType"u8);
                    writer.WriteStringValue(BoostingType);
                }
                else
                {
                    writer.WriteNull("boostingType");
                }
            }
            if (Optional.IsDefined(GrowPolicy))
            {
                if (GrowPolicy != null)
                {
                    writer.WritePropertyName("growPolicy"u8);
                    writer.WriteStringValue(GrowPolicy);
                }
                else
                {
                    writer.WriteNull("growPolicy");
                }
            }
            if (Optional.IsDefined(LearningRate))
            {
                if (LearningRate != null)
                {
                    writer.WritePropertyName("learningRate"u8);
                    writer.WriteNumberValue(LearningRate.Value);
                }
                else
                {
                    writer.WriteNull("learningRate");
                }
            }
            if (Optional.IsDefined(MaxBin))
            {
                if (MaxBin != null)
                {
                    writer.WritePropertyName("maxBin"u8);
                    writer.WriteNumberValue(MaxBin.Value);
                }
                else
                {
                    writer.WriteNull("maxBin");
                }
            }
            if (Optional.IsDefined(MaxDepth))
            {
                if (MaxDepth != null)
                {
                    writer.WritePropertyName("maxDepth"u8);
                    writer.WriteNumberValue(MaxDepth.Value);
                }
                else
                {
                    writer.WriteNull("maxDepth");
                }
            }
            if (Optional.IsDefined(MaxLeaves))
            {
                if (MaxLeaves != null)
                {
                    writer.WritePropertyName("maxLeaves"u8);
                    writer.WriteNumberValue(MaxLeaves.Value);
                }
                else
                {
                    writer.WriteNull("maxLeaves");
                }
            }
            if (Optional.IsDefined(MinDataInLeaf))
            {
                if (MinDataInLeaf != null)
                {
                    writer.WritePropertyName("minDataInLeaf"u8);
                    writer.WriteNumberValue(MinDataInLeaf.Value);
                }
                else
                {
                    writer.WriteNull("minDataInLeaf");
                }
            }
            if (Optional.IsDefined(MinSplitGain))
            {
                if (MinSplitGain != null)
                {
                    writer.WritePropertyName("minSplitGain"u8);
                    writer.WriteNumberValue(MinSplitGain.Value);
                }
                else
                {
                    writer.WriteNull("minSplitGain");
                }
            }
            if (Optional.IsDefined(ModelName))
            {
                if (ModelName != null)
                {
                    writer.WritePropertyName("modelName"u8);
                    writer.WriteStringValue(ModelName);
                }
                else
                {
                    writer.WriteNull("modelName");
                }
            }
            if (Optional.IsDefined(NEstimators))
            {
                if (NEstimators != null)
                {
                    writer.WritePropertyName("nEstimators"u8);
                    writer.WriteNumberValue(NEstimators.Value);
                }
                else
                {
                    writer.WriteNull("nEstimators");
                }
            }
            if (Optional.IsDefined(NumLeaves))
            {
                if (NumLeaves != null)
                {
                    writer.WritePropertyName("numLeaves"u8);
                    writer.WriteNumberValue(NumLeaves.Value);
                }
                else
                {
                    writer.WriteNull("numLeaves");
                }
            }
            if (Optional.IsDefined(PreprocessorName))
            {
                if (PreprocessorName != null)
                {
                    writer.WritePropertyName("preprocessorName"u8);
                    writer.WriteStringValue(PreprocessorName);
                }
                else
                {
                    writer.WriteNull("preprocessorName");
                }
            }
            if (Optional.IsDefined(RegAlpha))
            {
                if (RegAlpha != null)
                {
                    writer.WritePropertyName("regAlpha"u8);
                    writer.WriteNumberValue(RegAlpha.Value);
                }
                else
                {
                    writer.WriteNull("regAlpha");
                }
            }
            if (Optional.IsDefined(RegLambda))
            {
                if (RegLambda != null)
                {
                    writer.WritePropertyName("regLambda"u8);
                    writer.WriteNumberValue(RegLambda.Value);
                }
                else
                {
                    writer.WriteNull("regLambda");
                }
            }
            if (Optional.IsDefined(Subsample))
            {
                if (Subsample != null)
                {
                    writer.WritePropertyName("subsample"u8);
                    writer.WriteNumberValue(Subsample.Value);
                }
                else
                {
                    writer.WriteNull("subsample");
                }
            }
            if (Optional.IsDefined(SubsampleFreq))
            {
                if (SubsampleFreq != null)
                {
                    writer.WritePropertyName("subsampleFreq"u8);
                    writer.WriteNumberValue(SubsampleFreq.Value);
                }
                else
                {
                    writer.WriteNull("subsampleFreq");
                }
            }
            if (Optional.IsDefined(TreeMethod))
            {
                if (TreeMethod != null)
                {
                    writer.WritePropertyName("treeMethod"u8);
                    writer.WriteStringValue(TreeMethod);
                }
                else
                {
                    writer.WriteNull("treeMethod");
                }
            }
            if (Optional.IsDefined(WithMean))
            {
                writer.WritePropertyName("withMean"u8);
                writer.WriteBooleanValue(WithMean.Value);
            }
            if (Optional.IsDefined(WithStd))
            {
                writer.WritePropertyName("withStd"u8);
                writer.WriteBooleanValue(WithStd.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        TableFixedParameters IJsonModel<TableFixedParameters>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TableFixedParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TableFixedParameters)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTableFixedParameters(document.RootElement, options);
        }

        internal static TableFixedParameters DeserializeTableFixedParameters(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string booster = default;
            string boostingType = default;
            string growPolicy = default;
            double? learningRate = default;
            int? maxBin = default;
            int? maxDepth = default;
            int? maxLeaves = default;
            int? minDataInLeaf = default;
            double? minSplitGain = default;
            string modelName = default;
            int? nEstimators = default;
            int? numLeaves = default;
            string preprocessorName = default;
            double? regAlpha = default;
            double? regLambda = default;
            double? subsample = default;
            double? subsampleFreq = default;
            string treeMethod = default;
            bool? withMean = default;
            bool? withStd = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("booster"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        booster = null;
                        continue;
                    }
                    booster = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("boostingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        boostingType = null;
                        continue;
                    }
                    boostingType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("growPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        growPolicy = null;
                        continue;
                    }
                    growPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("learningRate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        learningRate = null;
                        continue;
                    }
                    learningRate = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("maxBin"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxBin = null;
                        continue;
                    }
                    maxBin = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxDepth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxDepth = null;
                        continue;
                    }
                    maxDepth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxLeaves"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxLeaves = null;
                        continue;
                    }
                    maxLeaves = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minDataInLeaf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minDataInLeaf = null;
                        continue;
                    }
                    minDataInLeaf = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minSplitGain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minSplitGain = null;
                        continue;
                    }
                    minSplitGain = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("modelName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modelName = null;
                        continue;
                    }
                    modelName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nEstimators"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nEstimators = null;
                        continue;
                    }
                    nEstimators = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numLeaves"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numLeaves = null;
                        continue;
                    }
                    numLeaves = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("preprocessorName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preprocessorName = null;
                        continue;
                    }
                    preprocessorName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("regAlpha"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        regAlpha = null;
                        continue;
                    }
                    regAlpha = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("regLambda"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        regLambda = null;
                        continue;
                    }
                    regLambda = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("subsample"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subsample = null;
                        continue;
                    }
                    subsample = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("subsampleFreq"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subsampleFreq = null;
                        continue;
                    }
                    subsampleFreq = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("treeMethod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        treeMethod = null;
                        continue;
                    }
                    treeMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("withMean"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    withMean = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("withStd"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    withStd = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new TableFixedParameters(
                booster,
                boostingType,
                growPolicy,
                learningRate,
                maxBin,
                maxDepth,
                maxLeaves,
                minDataInLeaf,
                minSplitGain,
                modelName,
                nEstimators,
                numLeaves,
                preprocessorName,
                regAlpha,
                regLambda,
                subsample,
                subsampleFreq,
                treeMethod,
                withMean,
                withStd,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TableFixedParameters>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TableFixedParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TableFixedParameters)} does not support writing '{options.Format}' format.");
            }
        }

        TableFixedParameters IPersistableModel<TableFixedParameters>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TableFixedParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTableFixedParameters(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TableFixedParameters)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TableFixedParameters>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
