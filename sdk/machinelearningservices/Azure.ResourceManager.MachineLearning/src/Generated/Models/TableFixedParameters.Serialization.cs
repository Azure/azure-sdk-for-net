// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class TableFixedParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Booster))
            {
                if (Booster != null)
                {
                    writer.WritePropertyName("booster"u8);
                    writer.WriteStringValue(Booster);
                }
                else
                {
                    writer.WriteNull("booster");
                }
            }
            if (Optional.IsDefined(BoostingType))
            {
                if (BoostingType != null)
                {
                    writer.WritePropertyName("boostingType"u8);
                    writer.WriteStringValue(BoostingType);
                }
                else
                {
                    writer.WriteNull("boostingType");
                }
            }
            if (Optional.IsDefined(GrowPolicy))
            {
                if (GrowPolicy != null)
                {
                    writer.WritePropertyName("growPolicy"u8);
                    writer.WriteStringValue(GrowPolicy);
                }
                else
                {
                    writer.WriteNull("growPolicy");
                }
            }
            if (Optional.IsDefined(LearningRate))
            {
                if (LearningRate != null)
                {
                    writer.WritePropertyName("learningRate"u8);
                    writer.WriteNumberValue(LearningRate.Value);
                }
                else
                {
                    writer.WriteNull("learningRate");
                }
            }
            if (Optional.IsDefined(MaxBin))
            {
                if (MaxBin != null)
                {
                    writer.WritePropertyName("maxBin"u8);
                    writer.WriteNumberValue(MaxBin.Value);
                }
                else
                {
                    writer.WriteNull("maxBin");
                }
            }
            if (Optional.IsDefined(MaxDepth))
            {
                if (MaxDepth != null)
                {
                    writer.WritePropertyName("maxDepth"u8);
                    writer.WriteNumberValue(MaxDepth.Value);
                }
                else
                {
                    writer.WriteNull("maxDepth");
                }
            }
            if (Optional.IsDefined(MaxLeaves))
            {
                if (MaxLeaves != null)
                {
                    writer.WritePropertyName("maxLeaves"u8);
                    writer.WriteNumberValue(MaxLeaves.Value);
                }
                else
                {
                    writer.WriteNull("maxLeaves");
                }
            }
            if (Optional.IsDefined(MinDataInLeaf))
            {
                if (MinDataInLeaf != null)
                {
                    writer.WritePropertyName("minDataInLeaf"u8);
                    writer.WriteNumberValue(MinDataInLeaf.Value);
                }
                else
                {
                    writer.WriteNull("minDataInLeaf");
                }
            }
            if (Optional.IsDefined(MinSplitGain))
            {
                if (MinSplitGain != null)
                {
                    writer.WritePropertyName("minSplitGain"u8);
                    writer.WriteNumberValue(MinSplitGain.Value);
                }
                else
                {
                    writer.WriteNull("minSplitGain");
                }
            }
            if (Optional.IsDefined(ModelName))
            {
                if (ModelName != null)
                {
                    writer.WritePropertyName("modelName"u8);
                    writer.WriteStringValue(ModelName);
                }
                else
                {
                    writer.WriteNull("modelName");
                }
            }
            if (Optional.IsDefined(NEstimators))
            {
                if (NEstimators != null)
                {
                    writer.WritePropertyName("nEstimators"u8);
                    writer.WriteNumberValue(NEstimators.Value);
                }
                else
                {
                    writer.WriteNull("nEstimators");
                }
            }
            if (Optional.IsDefined(NumLeaves))
            {
                if (NumLeaves != null)
                {
                    writer.WritePropertyName("numLeaves"u8);
                    writer.WriteNumberValue(NumLeaves.Value);
                }
                else
                {
                    writer.WriteNull("numLeaves");
                }
            }
            if (Optional.IsDefined(PreprocessorName))
            {
                if (PreprocessorName != null)
                {
                    writer.WritePropertyName("preprocessorName"u8);
                    writer.WriteStringValue(PreprocessorName);
                }
                else
                {
                    writer.WriteNull("preprocessorName");
                }
            }
            if (Optional.IsDefined(RegAlpha))
            {
                if (RegAlpha != null)
                {
                    writer.WritePropertyName("regAlpha"u8);
                    writer.WriteNumberValue(RegAlpha.Value);
                }
                else
                {
                    writer.WriteNull("regAlpha");
                }
            }
            if (Optional.IsDefined(RegLambda))
            {
                if (RegLambda != null)
                {
                    writer.WritePropertyName("regLambda"u8);
                    writer.WriteNumberValue(RegLambda.Value);
                }
                else
                {
                    writer.WriteNull("regLambda");
                }
            }
            if (Optional.IsDefined(Subsample))
            {
                if (Subsample != null)
                {
                    writer.WritePropertyName("subsample"u8);
                    writer.WriteNumberValue(Subsample.Value);
                }
                else
                {
                    writer.WriteNull("subsample");
                }
            }
            if (Optional.IsDefined(SubsampleFreq))
            {
                if (SubsampleFreq != null)
                {
                    writer.WritePropertyName("subsampleFreq"u8);
                    writer.WriteNumberValue(SubsampleFreq.Value);
                }
                else
                {
                    writer.WriteNull("subsampleFreq");
                }
            }
            if (Optional.IsDefined(TreeMethod))
            {
                if (TreeMethod != null)
                {
                    writer.WritePropertyName("treeMethod"u8);
                    writer.WriteStringValue(TreeMethod);
                }
                else
                {
                    writer.WriteNull("treeMethod");
                }
            }
            if (Optional.IsDefined(WithMean))
            {
                writer.WritePropertyName("withMean"u8);
                writer.WriteBooleanValue(WithMean.Value);
            }
            if (Optional.IsDefined(WithStd))
            {
                writer.WritePropertyName("withStd"u8);
                writer.WriteBooleanValue(WithStd.Value);
            }
            writer.WriteEndObject();
        }

        internal static TableFixedParameters DeserializeTableFixedParameters(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> booster = default;
            Optional<string> boostingType = default;
            Optional<string> growPolicy = default;
            Optional<double?> learningRate = default;
            Optional<int?> maxBin = default;
            Optional<int?> maxDepth = default;
            Optional<int?> maxLeaves = default;
            Optional<int?> minDataInLeaf = default;
            Optional<double?> minSplitGain = default;
            Optional<string> modelName = default;
            Optional<int?> nEstimators = default;
            Optional<int?> numLeaves = default;
            Optional<string> preprocessorName = default;
            Optional<double?> regAlpha = default;
            Optional<double?> regLambda = default;
            Optional<double?> subsample = default;
            Optional<double?> subsampleFreq = default;
            Optional<string> treeMethod = default;
            Optional<bool> withMean = default;
            Optional<bool> withStd = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("booster"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        booster = null;
                        continue;
                    }
                    booster = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("boostingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        boostingType = null;
                        continue;
                    }
                    boostingType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("growPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        growPolicy = null;
                        continue;
                    }
                    growPolicy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("learningRate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        learningRate = null;
                        continue;
                    }
                    learningRate = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("maxBin"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxBin = null;
                        continue;
                    }
                    maxBin = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxDepth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxDepth = null;
                        continue;
                    }
                    maxDepth = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxLeaves"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxLeaves = null;
                        continue;
                    }
                    maxLeaves = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minDataInLeaf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minDataInLeaf = null;
                        continue;
                    }
                    minDataInLeaf = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minSplitGain"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        minSplitGain = null;
                        continue;
                    }
                    minSplitGain = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("modelName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        modelName = null;
                        continue;
                    }
                    modelName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nEstimators"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nEstimators = null;
                        continue;
                    }
                    nEstimators = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numLeaves"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numLeaves = null;
                        continue;
                    }
                    numLeaves = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("preprocessorName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preprocessorName = null;
                        continue;
                    }
                    preprocessorName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("regAlpha"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        regAlpha = null;
                        continue;
                    }
                    regAlpha = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("regLambda"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        regLambda = null;
                        continue;
                    }
                    regLambda = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("subsample"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subsample = null;
                        continue;
                    }
                    subsample = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("subsampleFreq"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subsampleFreq = null;
                        continue;
                    }
                    subsampleFreq = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("treeMethod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        treeMethod = null;
                        continue;
                    }
                    treeMethod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("withMean"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    withMean = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("withStd"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    withStd = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TableFixedParameters(booster.Value, boostingType.Value, growPolicy.Value, Optional.ToNullable(learningRate), Optional.ToNullable(maxBin), Optional.ToNullable(maxDepth), Optional.ToNullable(maxLeaves), Optional.ToNullable(minDataInLeaf), Optional.ToNullable(minSplitGain), modelName.Value, Optional.ToNullable(nEstimators), Optional.ToNullable(numLeaves), preprocessorName.Value, Optional.ToNullable(regAlpha), Optional.ToNullable(regLambda), Optional.ToNullable(subsample), Optional.ToNullable(subsampleFreq), treeMethod.Value, Optional.ToNullable(withMean), Optional.ToNullable(withStd));
        }
    }
}
