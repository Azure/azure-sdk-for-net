// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
    internal partial class MonitorEmailNotificationSettings : IUtf8JsonSerializable, IJsonModel<MonitorEmailNotificationSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MonitorEmailNotificationSettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MonitorEmailNotificationSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MonitorEmailNotificationSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MonitorEmailNotificationSettings)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Emails))
            {
                if (Emails != null)
                {
                    writer.WritePropertyName("emails"u8);
                    writer.WriteStartArray();
                    foreach (var item in Emails)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("emails");
                }
========
    public partial class PipelineGroupExporter : IUtf8JsonSerializable, IJsonModel<PipelineGroupExporter>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PipelineGroupExporter>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<PipelineGroupExporter>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupExporter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PipelineGroupExporter)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(ExporterType.ToString());
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(AzureMonitorWorkspaceLogs))
            {
                writer.WritePropertyName("azureMonitorWorkspaceLogs"u8);
                writer.WriteObjectValue(AzureMonitorWorkspaceLogs, options);
            }
            if (Optional.IsDefined(Tcp))
            {
                writer.WritePropertyName("tcp"u8);
                writer.WriteObjectValue(Tcp, options);
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
        MonitorEmailNotificationSettings IJsonModel<MonitorEmailNotificationSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MonitorEmailNotificationSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MonitorEmailNotificationSettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMonitorEmailNotificationSettings(document.RootElement, options);
        }

        internal static MonitorEmailNotificationSettings DeserializeMonitorEmailNotificationSettings(JsonElement element, ModelReaderWriterOptions options = null)
========
        PipelineGroupExporter IJsonModel<PipelineGroupExporter>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupExporter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PipelineGroupExporter)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePipelineGroupExporter(document.RootElement, options);
        }

        internal static PipelineGroupExporter DeserializePipelineGroupExporter(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
            IList<string> emails = default;
========
            PipelineGroupExporterType type = default;
            string name = default;
            MonitorWorkspaceLogsExporter azureMonitorWorkspaceLogs = default;
            TcpExporter tcp = default;
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
                if (property.NameEquals("emails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        emails = null;
========
                if (property.NameEquals("type"u8))
                {
                    type = new PipelineGroupExporterType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("azureMonitorWorkspaceLogs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs
                        continue;
                    }
                    azureMonitorWorkspaceLogs = MonitorWorkspaceLogsExporter.DeserializeMonitorWorkspaceLogsExporter(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tcp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
                    emails = array;
========
                    tcp = TcpExporter.DeserializeTcpExporter(property.Value, options);
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
            return new MonitorEmailNotificationSettings(emails ?? new ChangeTrackingList<string>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MonitorEmailNotificationSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MonitorEmailNotificationSettings>)this).GetFormatFromOptions(options) : options.Format;
========
            return new PipelineGroupExporter(type, name, azureMonitorWorkspaceLogs, tcp, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PipelineGroupExporter>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupExporter>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
                    throw new FormatException($"The model {nameof(MonitorEmailNotificationSettings)} does not support writing '{options.Format}' format.");
            }
        }

        MonitorEmailNotificationSettings IPersistableModel<MonitorEmailNotificationSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MonitorEmailNotificationSettings>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(PipelineGroupExporter)} does not support writing '{options.Format}' format.");
            }
        }

        PipelineGroupExporter IPersistableModel<PipelineGroupExporter>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupExporter>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
<<<<<<<< HEAD:sdk/machinelearningservices/Azure.ResourceManager.MachineLearning/src/Generated/Models/MonitorEmailNotificationSettings.Serialization.cs
                        return DeserializeMonitorEmailNotificationSettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MonitorEmailNotificationSettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MonitorEmailNotificationSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        return DeserializePipelineGroupExporter(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PipelineGroupExporter)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PipelineGroupExporter>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupExporter.Serialization.cs
    }
}
