// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The KerberosPasswordCredentials. </summary>
    public partial class KerberosPasswordCredentials : MachineLearningDatastoreCredentials
    {
        /// <summary> Initializes a new instance of <see cref="KerberosPasswordCredentials"/>. </summary>
        /// <param name="secrets"> [Required] Kerberos password secrets. </param>
        /// <param name="kerberosKdcAddress"> [Required] IP Address or DNS HostName. </param>
        /// <param name="kerberosPrincipal"> [Required] Kerberos Username. </param>
        /// <param name="kerberosRealm"> [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secrets"/>, <paramref name="kerberosKdcAddress"/>, <paramref name="kerberosPrincipal"/> or <paramref name="kerberosRealm"/> is null. </exception>
        public KerberosPasswordCredentials(KerberosPasswordSecrets secrets, string kerberosKdcAddress, string kerberosPrincipal, string kerberosRealm)
        {
            Argument.AssertNotNull(secrets, nameof(secrets));
            Argument.AssertNotNull(kerberosKdcAddress, nameof(kerberosKdcAddress));
            Argument.AssertNotNull(kerberosPrincipal, nameof(kerberosPrincipal));
            Argument.AssertNotNull(kerberosRealm, nameof(kerberosRealm));

            Secrets = secrets;
            KerberosKdcAddress = kerberosKdcAddress;
            KerberosPrincipal = kerberosPrincipal;
            KerberosRealm = kerberosRealm;
            CredentialsType = CredentialsType.KerberosPassword;
        }

        /// <summary> Initializes a new instance of <see cref="KerberosPasswordCredentials"/>. </summary>
        /// <param name="credentialsType"> [Required] Credential type used to authentication with storage. </param>
        /// <param name="secrets"> [Required] Kerberos password secrets. </param>
        /// <param name="kerberosKdcAddress"> [Required] IP Address or DNS HostName. </param>
        /// <param name="kerberosPrincipal"> [Required] Kerberos Username. </param>
        /// <param name="kerberosRealm"> [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service. </param>
        internal KerberosPasswordCredentials(CredentialsType credentialsType, KerberosPasswordSecrets secrets, string kerberosKdcAddress, string kerberosPrincipal, string kerberosRealm) : base(credentialsType)
        {
            Secrets = secrets;
            KerberosKdcAddress = kerberosKdcAddress;
            KerberosPrincipal = kerberosPrincipal;
            KerberosRealm = kerberosRealm;
            CredentialsType = credentialsType;
        }

        /// <summary> [Required] Kerberos password secrets. </summary>
        public KerberosPasswordSecrets Secrets { get; set; }
        /// <summary> [Required] IP Address or DNS HostName. </summary>
        public string KerberosKdcAddress { get; set; }
        /// <summary> [Required] Kerberos Username. </summary>
        public string KerberosPrincipal { get; set; }
        /// <summary> [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service. </summary>
        public string KerberosRealm { get; set; }
    }
}
