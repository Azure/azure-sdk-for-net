// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class AmlComputeScaleSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("maxNodeCount"u8);
            writer.WriteNumberValue(MaxNodeCount);
            if (Optional.IsDefined(MinNodeCount))
            {
                writer.WritePropertyName("minNodeCount"u8);
                writer.WriteNumberValue(MinNodeCount.Value);
            }
            if (Optional.IsDefined(NodeIdleTimeBeforeScaleDown))
            {
                if (NodeIdleTimeBeforeScaleDown != null)
                {
                    writer.WritePropertyName("nodeIdleTimeBeforeScaleDown"u8);
                    writer.WriteStringValue(NodeIdleTimeBeforeScaleDown.Value, "P");
                }
                else
                {
                    writer.WriteNull("nodeIdleTimeBeforeScaleDown");
                }
            }
            writer.WriteEndObject();
        }

        internal static AmlComputeScaleSettings DeserializeAmlComputeScaleSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int maxNodeCount = default;
            Optional<int> minNodeCount = default;
            Optional<TimeSpan?> nodeIdleTimeBeforeScaleDown = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxNodeCount"u8))
                {
                    maxNodeCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("minNodeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minNodeCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nodeIdleTimeBeforeScaleDown"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nodeIdleTimeBeforeScaleDown = null;
                        continue;
                    }
                    nodeIdleTimeBeforeScaleDown = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new AmlComputeScaleSettings(maxNodeCount, Optional.ToNullable(minNodeCount), Optional.ToNullable(nodeIdleTimeBeforeScaleDown));
        }
    }
}
