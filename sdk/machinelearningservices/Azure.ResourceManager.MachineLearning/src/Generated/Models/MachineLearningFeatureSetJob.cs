// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Dto object representing the feature set job. </summary>
    public partial class MachineLearningFeatureSetJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MachineLearningFeatureSetJob"/>. </summary>
        internal MachineLearningFeatureSetJob()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="MachineLearningFeatureSetJob"/>. </summary>
        /// <param name="createdOn"> Specifies the created date. </param>
        /// <param name="displayName"> Specifies the display name. </param>
        /// <param name="duration"> Specifies the duration. </param>
        /// <param name="experimentId"> Specifies the experiment id. </param>
        /// <param name="featureWindow"> Specifies the backfill feature window to be materialized. </param>
        /// <param name="jobId"> Specifies the job id. </param>
        /// <param name="status"> Specifies the job status. </param>
        /// <param name="tags"> Specifies the tags if any. </param>
        /// <param name="featureStoreJobType"> Specifies the feature store job type. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MachineLearningFeatureSetJob(DateTimeOffset? createdOn, string displayName, TimeSpan? duration, string experimentId, FeatureWindow featureWindow, string jobId, MachineLearningJobStatus? status, IReadOnlyDictionary<string, string> tags, FeatureStoreJobType? featureStoreJobType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CreatedOn = createdOn;
            DisplayName = displayName;
            Duration = duration;
            ExperimentId = experimentId;
            FeatureWindow = featureWindow;
            JobId = jobId;
            Status = status;
            Tags = tags;
            FeatureStoreJobType = featureStoreJobType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Specifies the created date. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Specifies the display name. </summary>
        public string DisplayName { get; }
        /// <summary> Specifies the duration. </summary>
        public TimeSpan? Duration { get; }
        /// <summary> Specifies the experiment id. </summary>
        public string ExperimentId { get; }
        /// <summary> Specifies the backfill feature window to be materialized. </summary>
        public FeatureWindow FeatureWindow { get; }
        /// <summary> Specifies the job id. </summary>
        public string JobId { get; }
        /// <summary> Specifies the job status. </summary>
        public MachineLearningJobStatus? Status { get; }
        /// <summary> Specifies the tags if any. </summary>
        public IReadOnlyDictionary<string, string> Tags { get; }
        /// <summary> Specifies the feature store job type. </summary>
        public FeatureStoreJobType? FeatureStoreJobType { get; }
    }
}
