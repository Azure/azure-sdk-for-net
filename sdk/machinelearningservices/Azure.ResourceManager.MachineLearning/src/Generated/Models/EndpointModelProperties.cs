// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Endpoint Model properties. </summary>
    public partial class EndpointModelProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EndpointModelProperties"/>. </summary>
        internal EndpointModelProperties()
        {
            Capabilities = new ChangeTrackingDictionary<string, string>();
            FinetuneCapabilities = new ChangeTrackingDictionary<string, string>();
            Skus = new ChangeTrackingList<EndpointModelSkuProperties>();
        }

        /// <summary> Initializes a new instance of <see cref="EndpointModelProperties"/>. </summary>
        /// <param name="capabilities"> The capabilities. </param>
        /// <param name="deprecation"></param>
        /// <param name="finetuneCapabilities"> The capabilities for finetune models. </param>
        /// <param name="format"> Deployment model format. </param>
        /// <param name="isDefaultVersion"> If the model is default version. </param>
        /// <param name="lifecycleStatus"> Model lifecycle status. </param>
        /// <param name="maxCapacity"> The max capacity. </param>
        /// <param name="name"> Deployment model name. </param>
        /// <param name="skus"> The list of Model Sku. </param>
        /// <param name="systemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <param name="version"> Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EndpointModelProperties(IReadOnlyDictionary<string, string> capabilities, EndpointModelDeprecationProperties deprecation, IReadOnlyDictionary<string, string> finetuneCapabilities, string format, bool? isDefaultVersion, ModelLifecycleStatus? lifecycleStatus, int? maxCapacity, string name, IReadOnlyList<EndpointModelSkuProperties> skus, SystemData systemData, string version, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Capabilities = capabilities;
            Deprecation = deprecation;
            FinetuneCapabilities = finetuneCapabilities;
            Format = format;
            IsDefaultVersion = isDefaultVersion;
            LifecycleStatus = lifecycleStatus;
            MaxCapacity = maxCapacity;
            Name = name;
            Skus = skus;
            SystemData = systemData;
            Version = version;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The capabilities. </summary>
        public IReadOnlyDictionary<string, string> Capabilities { get; }
        /// <summary> Gets the deprecation. </summary>
        public EndpointModelDeprecationProperties Deprecation { get; }
        /// <summary> The capabilities for finetune models. </summary>
        public IReadOnlyDictionary<string, string> FinetuneCapabilities { get; }
        /// <summary> Deployment model format. </summary>
        public string Format { get; }
        /// <summary> If the model is default version. </summary>
        public bool? IsDefaultVersion { get; }
        /// <summary> Model lifecycle status. </summary>
        public ModelLifecycleStatus? LifecycleStatus { get; }
        /// <summary> The max capacity. </summary>
        public int? MaxCapacity { get; }
        /// <summary> Deployment model name. </summary>
        public string Name { get; }
        /// <summary> The list of Model Sku. </summary>
        public IReadOnlyList<EndpointModelSkuProperties> Skus { get; }
        /// <summary> Metadata pertaining to creation and last modification of the resource. </summary>
        public SystemData SystemData { get; }
        /// <summary> Optional. Deployment model version. If version is not specified, a default version will be assigned. The default version is different for different models and might change when there is new version available for a model. Default version for a model could be found from list models API. </summary>
        public string Version { get; }
    }
}
