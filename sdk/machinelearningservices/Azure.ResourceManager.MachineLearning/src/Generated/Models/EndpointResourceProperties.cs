// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// Please note <see cref="EndpointResourceProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="ContentSafetyEndpointResourceProperties"/>, <see cref="OpenAIEndpointResourceProperties"/>, <see cref="SpeechEndpointResourceProperties"/>, <see cref="ManagedOnlineEndpointResourceProperties"/> and <see cref="ServerlessEndpointResourceProperties"/>.
    /// </summary>
    public abstract partial class EndpointResourceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EndpointResourceProperties"/>. </summary>
        protected EndpointResourceProperties()
        {
            Deployments = new ChangeTrackingList<EndpointDeploymentResourcePropertiesBasicResourceData>();
        }

        /// <summary> Initializes a new instance of <see cref="EndpointResourceProperties"/>. </summary>
        /// <param name="associatedResourceId"> Byo resource id for creating the built-in model service endpoints. </param>
        /// <param name="deployments"> Deployments info. </param>
        /// <param name="endpointType"> Type of the endpoint. </param>
        /// <param name="endpointUri"> Uri of the endpoint. </param>
        /// <param name="failureReason"> The failure reason if the creation failed. </param>
        /// <param name="location">
        /// Location of the endpoint.
        /// Since input dto and when parse endpoint resource share the same contract
        /// this Location field is just for parse the endpoint resource info
        /// we won't let customer specify the endpoint resource location since we will create it the same location as workspace
        /// </param>
        /// <param name="name"> Name of the endpoint. </param>
        /// <param name="provisioningState"> Read-only provision state status property. </param>
        /// <param name="shouldCreateAiServicesEndpoint"> Whether the proxy (non-byo) endpoint is a regular endpoint or a OneKeyV2 AI services account endpoint. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EndpointResourceProperties(ResourceIdentifier associatedResourceId, IList<EndpointDeploymentResourcePropertiesBasicResourceData> deployments, EndpointType endpointType, Uri endpointUri, string failureReason, AzureLocation? location, string name, DefaultResourceProvisioningState? provisioningState, bool? shouldCreateAiServicesEndpoint, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AssociatedResourceId = associatedResourceId;
            Deployments = deployments;
            EndpointType = endpointType;
            EndpointUri = endpointUri;
            FailureReason = failureReason;
            Location = location;
            Name = name;
            ProvisioningState = provisioningState;
            ShouldCreateAiServicesEndpoint = shouldCreateAiServicesEndpoint;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Byo resource id for creating the built-in model service endpoints. </summary>
        public ResourceIdentifier AssociatedResourceId { get; set; }
        /// <summary> Deployments info. </summary>
        public IList<EndpointDeploymentResourcePropertiesBasicResourceData> Deployments { get; }
        /// <summary> Type of the endpoint. </summary>
        internal EndpointType EndpointType { get; set; }
        /// <summary> Uri of the endpoint. </summary>
        public Uri EndpointUri { get; set; }
        /// <summary> The failure reason if the creation failed. </summary>
        public string FailureReason { get; set; }
        /// <summary>
        /// Location of the endpoint.
        /// Since input dto and when parse endpoint resource share the same contract
        /// this Location field is just for parse the endpoint resource info
        /// we won't let customer specify the endpoint resource location since we will create it the same location as workspace
        /// </summary>
        public AzureLocation? Location { get; set; }
        /// <summary> Name of the endpoint. </summary>
        public string Name { get; set; }
        /// <summary> Read-only provision state status property. </summary>
        public DefaultResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Whether the proxy (non-byo) endpoint is a regular endpoint or a OneKeyV2 AI services account endpoint. </summary>
        public bool? ShouldCreateAiServicesEndpoint { get; set; }
    }
}
