// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// The estimated price info for using a VM.
    /// Serialized Name: EstimatedVMPrices
    /// </summary>
    public partial class EstimatedVmPrices
    {
        /// <summary> Initializes a new instance of EstimatedVmPrices. </summary>
        /// <param name="billingCurrency">
        /// Three lettered code specifying the currency of the VM price. Example: USD
        /// Serialized Name: EstimatedVMPrices.billingCurrency
        /// </param>
        /// <param name="unitOfMeasure">
        /// The unit of time measurement for the specified VM price. Example: OneHour
        /// Serialized Name: EstimatedVMPrices.unitOfMeasure
        /// </param>
        /// <param name="values">
        /// The list of estimated prices for using a VM of a particular OS type, tier, etc.
        /// Serialized Name: EstimatedVMPrices.values
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="values"/> is null. </exception>
        internal EstimatedVmPrices(BillingCurrency billingCurrency, UnitOfMeasure unitOfMeasure, IEnumerable<EstimatedVmPrice> values)
        {
            Argument.AssertNotNull(values, nameof(values));

            BillingCurrency = billingCurrency;
            UnitOfMeasure = unitOfMeasure;
            Values = values.ToList();
        }

        /// <summary> Initializes a new instance of EstimatedVmPrices. </summary>
        /// <param name="billingCurrency">
        /// Three lettered code specifying the currency of the VM price. Example: USD
        /// Serialized Name: EstimatedVMPrices.billingCurrency
        /// </param>
        /// <param name="unitOfMeasure">
        /// The unit of time measurement for the specified VM price. Example: OneHour
        /// Serialized Name: EstimatedVMPrices.unitOfMeasure
        /// </param>
        /// <param name="values">
        /// The list of estimated prices for using a VM of a particular OS type, tier, etc.
        /// Serialized Name: EstimatedVMPrices.values
        /// </param>
        internal EstimatedVmPrices(BillingCurrency billingCurrency, UnitOfMeasure unitOfMeasure, IReadOnlyList<EstimatedVmPrice> values)
        {
            BillingCurrency = billingCurrency;
            UnitOfMeasure = unitOfMeasure;
            Values = values;
        }

        /// <summary>
        /// Three lettered code specifying the currency of the VM price. Example: USD
        /// Serialized Name: EstimatedVMPrices.billingCurrency
        /// </summary>
        public BillingCurrency BillingCurrency { get; }
        /// <summary>
        /// The unit of time measurement for the specified VM price. Example: OneHour
        /// Serialized Name: EstimatedVMPrices.unitOfMeasure
        /// </summary>
        public UnitOfMeasure UnitOfMeasure { get; }
        /// <summary>
        /// The list of estimated prices for using a VM of a particular OS type, tier, etc.
        /// Serialized Name: EstimatedVMPrices.values
        /// </summary>
        public IReadOnlyList<EstimatedVmPrice> Values { get; }
    }
}
