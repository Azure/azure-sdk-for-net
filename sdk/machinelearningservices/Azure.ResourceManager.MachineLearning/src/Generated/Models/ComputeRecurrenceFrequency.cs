// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Enum to describe the frequency of a compute recurrence schedule. </summary>
    public readonly partial struct ComputeRecurrenceFrequency : IEquatable<ComputeRecurrenceFrequency>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputeRecurrenceFrequency"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeRecurrenceFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MinuteValue = "Minute";
        private const string HourValue = "Hour";
        private const string DayValue = "Day";
        private const string WeekValue = "Week";
        private const string MonthValue = "Month";

        /// <summary> Minute frequency. </summary>
        public static ComputeRecurrenceFrequency Minute { get; } = new ComputeRecurrenceFrequency(MinuteValue);
        /// <summary> Hour frequency. </summary>
        public static ComputeRecurrenceFrequency Hour { get; } = new ComputeRecurrenceFrequency(HourValue);
        /// <summary> Day frequency. </summary>
        public static ComputeRecurrenceFrequency Day { get; } = new ComputeRecurrenceFrequency(DayValue);
        /// <summary> Week frequency. </summary>
        public static ComputeRecurrenceFrequency Week { get; } = new ComputeRecurrenceFrequency(WeekValue);
        /// <summary> Month frequency. </summary>
        public static ComputeRecurrenceFrequency Month { get; } = new ComputeRecurrenceFrequency(MonthValue);
        /// <summary> Determines if two <see cref="ComputeRecurrenceFrequency"/> values are the same. </summary>
        public static bool operator ==(ComputeRecurrenceFrequency left, ComputeRecurrenceFrequency right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeRecurrenceFrequency"/> values are not the same. </summary>
        public static bool operator !=(ComputeRecurrenceFrequency left, ComputeRecurrenceFrequency right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeRecurrenceFrequency"/>. </summary>
        public static implicit operator ComputeRecurrenceFrequency(string value) => new ComputeRecurrenceFrequency(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeRecurrenceFrequency other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeRecurrenceFrequency other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
