// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The FineTuningTaskType. </summary>
    public readonly partial struct FineTuningTaskType : IEquatable<FineTuningTaskType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FineTuningTaskType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FineTuningTaskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ChatCompletionValue = "ChatCompletion";
        private const string TextCompletionValue = "TextCompletion";
        private const string TextClassificationValue = "TextClassification";
        private const string QuestionAnsweringValue = "QuestionAnswering";
        private const string TextSummarizationValue = "TextSummarization";
        private const string TokenClassificationValue = "TokenClassification";
        private const string TextTranslationValue = "TextTranslation";
        private const string ImageClassificationValue = "ImageClassification";
        private const string ImageInstanceSegmentationValue = "ImageInstanceSegmentation";
        private const string ImageObjectDetectionValue = "ImageObjectDetection";
        private const string VideoMultiObjectTrackingValue = "VideoMultiObjectTracking";

        /// <summary> ChatCompletion. </summary>
        public static FineTuningTaskType ChatCompletion { get; } = new FineTuningTaskType(ChatCompletionValue);
        /// <summary> TextCompletion. </summary>
        public static FineTuningTaskType TextCompletion { get; } = new FineTuningTaskType(TextCompletionValue);
        /// <summary> TextClassification. </summary>
        public static FineTuningTaskType TextClassification { get; } = new FineTuningTaskType(TextClassificationValue);
        /// <summary> QuestionAnswering. </summary>
        public static FineTuningTaskType QuestionAnswering { get; } = new FineTuningTaskType(QuestionAnsweringValue);
        /// <summary> TextSummarization. </summary>
        public static FineTuningTaskType TextSummarization { get; } = new FineTuningTaskType(TextSummarizationValue);
        /// <summary> TokenClassification. </summary>
        public static FineTuningTaskType TokenClassification { get; } = new FineTuningTaskType(TokenClassificationValue);
        /// <summary> TextTranslation. </summary>
        public static FineTuningTaskType TextTranslation { get; } = new FineTuningTaskType(TextTranslationValue);
        /// <summary> ImageClassification. </summary>
        public static FineTuningTaskType ImageClassification { get; } = new FineTuningTaskType(ImageClassificationValue);
        /// <summary> ImageInstanceSegmentation. </summary>
        public static FineTuningTaskType ImageInstanceSegmentation { get; } = new FineTuningTaskType(ImageInstanceSegmentationValue);
        /// <summary> ImageObjectDetection. </summary>
        public static FineTuningTaskType ImageObjectDetection { get; } = new FineTuningTaskType(ImageObjectDetectionValue);
        /// <summary> VideoMultiObjectTracking. </summary>
        public static FineTuningTaskType VideoMultiObjectTracking { get; } = new FineTuningTaskType(VideoMultiObjectTrackingValue);
        /// <summary> Determines if two <see cref="FineTuningTaskType"/> values are the same. </summary>
        public static bool operator ==(FineTuningTaskType left, FineTuningTaskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FineTuningTaskType"/> values are not the same. </summary>
        public static bool operator !=(FineTuningTaskType left, FineTuningTaskType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FineTuningTaskType"/>. </summary>
        public static implicit operator FineTuningTaskType(string value) => new FineTuningTaskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FineTuningTaskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FineTuningTaskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
