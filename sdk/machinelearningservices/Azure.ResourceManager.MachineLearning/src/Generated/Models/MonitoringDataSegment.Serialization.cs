// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MonitoringDataSegment : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Feature))
            {
                if (Feature != null)
                {
                    writer.WritePropertyName("feature"u8);
                    writer.WriteStringValue(Feature);
                }
                else
                {
                    writer.WriteNull("feature");
                }
            }
            if (Optional.IsCollectionDefined(Values))
            {
                if (Values != null)
                {
                    writer.WritePropertyName("values"u8);
                    writer.WriteStartArray();
                    foreach (var item in Values)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("values");
                }
            }
            writer.WriteEndObject();
        }

        internal static MonitoringDataSegment DeserializeMonitoringDataSegment(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> feature = default;
            Optional<IList<string>> values = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("feature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        feature = null;
                        continue;
                    }
                    feature = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("values"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        values = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    values = array;
                    continue;
                }
            }
            return new MonitoringDataSegment(feature.Value, Optional.ToList(values));
        }
    }
}
