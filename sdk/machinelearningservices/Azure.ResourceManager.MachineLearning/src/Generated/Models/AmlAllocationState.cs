// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
    /// Serialized Name: AllocationState
    /// </summary>
    public readonly partial struct AmlAllocationState : IEquatable<AmlAllocationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AmlAllocationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AmlAllocationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SteadyValue = "Steady";
        private const string ResizingValue = "Resizing";

        /// <summary>
        /// Steady
        /// Serialized Name: AllocationState.Steady
        /// </summary>
        public static AmlAllocationState Steady { get; } = new AmlAllocationState(SteadyValue);
        /// <summary>
        /// Resizing
        /// Serialized Name: AllocationState.Resizing
        /// </summary>
        public static AmlAllocationState Resizing { get; } = new AmlAllocationState(ResizingValue);
        /// <summary> Determines if two <see cref="AmlAllocationState"/> values are the same. </summary>
        public static bool operator ==(AmlAllocationState left, AmlAllocationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AmlAllocationState"/> values are not the same. </summary>
        public static bool operator !=(AmlAllocationState left, AmlAllocationState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AmlAllocationState"/>. </summary>
        public static implicit operator AmlAllocationState(string value) => new AmlAllocationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AmlAllocationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AmlAllocationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
