// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Enum of learning rate schedulers that aligns with those supported by HF. </summary>
    public readonly partial struct NlpLearningRateScheduler : IEquatable<NlpLearningRateScheduler>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NlpLearningRateScheduler"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NlpLearningRateScheduler(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string LinearValue = "Linear";
        private const string CosineValue = "Cosine";
        private const string CosineWithRestartsValue = "CosineWithRestarts";
        private const string PolynomialValue = "Polynomial";
        private const string ConstantValue = "Constant";
        private const string ConstantWithWarmupValue = "ConstantWithWarmup";

        /// <summary> No learning rate schedule. </summary>
        public static NlpLearningRateScheduler None { get; } = new NlpLearningRateScheduler(NoneValue);
        /// <summary> Linear warmup and decay. </summary>
        public static NlpLearningRateScheduler Linear { get; } = new NlpLearningRateScheduler(LinearValue);
        /// <summary> Linear warmup then cosine decay. </summary>
        public static NlpLearningRateScheduler Cosine { get; } = new NlpLearningRateScheduler(CosineValue);
        /// <summary> Linear warmup, cosine decay, then restart to initial LR. </summary>
        public static NlpLearningRateScheduler CosineWithRestarts { get; } = new NlpLearningRateScheduler(CosineWithRestartsValue);
        /// <summary> Increase linearly then polynomially decay. </summary>
        public static NlpLearningRateScheduler Polynomial { get; } = new NlpLearningRateScheduler(PolynomialValue);
        /// <summary> Constant learning rate. </summary>
        public static NlpLearningRateScheduler Constant { get; } = new NlpLearningRateScheduler(ConstantValue);
        /// <summary> Linear warmup followed by constant value. </summary>
        public static NlpLearningRateScheduler ConstantWithWarmup { get; } = new NlpLearningRateScheduler(ConstantWithWarmupValue);
        /// <summary> Determines if two <see cref="NlpLearningRateScheduler"/> values are the same. </summary>
        public static bool operator ==(NlpLearningRateScheduler left, NlpLearningRateScheduler right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NlpLearningRateScheduler"/> values are not the same. </summary>
        public static bool operator !=(NlpLearningRateScheduler left, NlpLearningRateScheduler right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NlpLearningRateScheduler"/>. </summary>
        public static implicit operator NlpLearningRateScheduler(string value) => new NlpLearningRateScheduler(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NlpLearningRateScheduler other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NlpLearningRateScheduler other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
