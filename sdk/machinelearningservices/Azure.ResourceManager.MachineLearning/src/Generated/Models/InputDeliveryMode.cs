// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Enum to determine the input data delivery mode. </summary>
    public readonly partial struct InputDeliveryMode : IEquatable<InputDeliveryMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InputDeliveryMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InputDeliveryMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadOnlyMountValue = "ReadOnlyMount";
        private const string ReadWriteMountValue = "ReadWriteMount";
        private const string DownloadValue = "Download";
        private const string DirectValue = "Direct";
        private const string EvalMountValue = "EvalMount";
        private const string EvalDownloadValue = "EvalDownload";

        /// <summary> ReadOnlyMount. </summary>
        public static InputDeliveryMode ReadOnlyMount { get; } = new InputDeliveryMode(ReadOnlyMountValue);
        /// <summary> ReadWriteMount. </summary>
        public static InputDeliveryMode ReadWriteMount { get; } = new InputDeliveryMode(ReadWriteMountValue);
        /// <summary> Download. </summary>
        public static InputDeliveryMode Download { get; } = new InputDeliveryMode(DownloadValue);
        /// <summary> Direct. </summary>
        public static InputDeliveryMode Direct { get; } = new InputDeliveryMode(DirectValue);
        /// <summary> EvalMount. </summary>
        public static InputDeliveryMode EvalMount { get; } = new InputDeliveryMode(EvalMountValue);
        /// <summary> EvalDownload. </summary>
        public static InputDeliveryMode EvalDownload { get; } = new InputDeliveryMode(EvalDownloadValue);
        /// <summary> Determines if two <see cref="InputDeliveryMode"/> values are the same. </summary>
        public static bool operator ==(InputDeliveryMode left, InputDeliveryMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InputDeliveryMode"/> values are not the same. </summary>
        public static bool operator !=(InputDeliveryMode left, InputDeliveryMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InputDeliveryMode"/>. </summary>
        public static implicit operator InputDeliveryMode(string value) => new InputDeliveryMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InputDeliveryMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InputDeliveryMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
