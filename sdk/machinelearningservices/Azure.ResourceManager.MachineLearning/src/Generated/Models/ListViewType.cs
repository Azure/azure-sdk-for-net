// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The ListViewType. </summary>
    public readonly partial struct ListViewType : IEquatable<ListViewType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ListViewType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ListViewType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveOnlyValue = "ActiveOnly";
        private const string ArchivedOnlyValue = "ArchivedOnly";
        private const string AllValue = "All";

        /// <summary> ActiveOnly. </summary>
        public static ListViewType ActiveOnly { get; } = new ListViewType(ActiveOnlyValue);
        /// <summary> ArchivedOnly. </summary>
        public static ListViewType ArchivedOnly { get; } = new ListViewType(ArchivedOnlyValue);
        /// <summary> All. </summary>
        public static ListViewType All { get; } = new ListViewType(AllValue);
        /// <summary> Determines if two <see cref="ListViewType"/> values are the same. </summary>
        public static bool operator ==(ListViewType left, ListViewType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ListViewType"/> values are not the same. </summary>
        public static bool operator !=(ListViewType left, ListViewType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ListViewType"/>. </summary>
        public static implicit operator ListViewType(string value) => new ListViewType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ListViewType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ListViewType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
