// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Cron schedule definition. </summary>
    public partial class CronSchedule : ScheduleBase
    {
        /// <summary> Initializes a new instance of CronSchedule. </summary>
        /// <param name="expression">
        /// [Required] Specifies cron expression of schedule.
        /// The expression should follow NCronTab format.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="expression"/> is null. </exception>
        public CronSchedule(string expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            Expression = expression;
            ScheduleType = ScheduleType.Cron;
        }

        /// <summary> Initializes a new instance of CronSchedule. </summary>
        /// <param name="endOn">
        /// Specifies end time of schedule in ISO 8601 format.
        /// If not present, the schedule will run indefinitely
        /// </param>
        /// <param name="scheduleStatus"> Specifies the schedule&apos;s status. </param>
        /// <param name="scheduleType"> [Required] Specifies the schedule type. </param>
        /// <param name="startOn"> Specifies start time of schedule in ISO 8601 format. </param>
        /// <param name="timeZone">
        /// Specifies time zone in which the schedule runs.
        /// TimeZone should follow Windows time zone format.
        /// </param>
        /// <param name="expression">
        /// [Required] Specifies cron expression of schedule.
        /// The expression should follow NCronTab format.
        /// </param>
        internal CronSchedule(DateTimeOffset? endOn, ScheduleStatus? scheduleStatus, ScheduleType scheduleType, DateTimeOffset? startOn, string timeZone, string expression) : base(endOn, scheduleStatus, scheduleType, startOn, timeZone)
        {
            Expression = expression;
            ScheduleType = scheduleType;
        }

        /// <summary>
        /// [Required] Specifies cron expression of schedule.
        /// The expression should follow NCronTab format.
        /// </summary>
        public string Expression { get; set; }
    }
}
