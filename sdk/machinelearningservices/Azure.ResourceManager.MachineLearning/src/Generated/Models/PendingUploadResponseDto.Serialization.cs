// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class PendingUploadResponseDto
    {
        internal static PendingUploadResponseDto DeserializePendingUploadResponseDto(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<BlobReferenceForConsumptionDto> blobReferenceForConsumption = default;
            Optional<string> pendingUploadId = default;
            Optional<PendingUploadType> pendingUploadType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("blobReferenceForConsumption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        blobReferenceForConsumption = null;
                        continue;
                    }
                    blobReferenceForConsumption = BlobReferenceForConsumptionDto.DeserializeBlobReferenceForConsumptionDto(property.Value);
                    continue;
                }
                if (property.NameEquals("pendingUploadId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pendingUploadId = null;
                        continue;
                    }
                    pendingUploadId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pendingUploadType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pendingUploadType = new PendingUploadType(property.Value.GetString());
                    continue;
                }
            }
            return new PendingUploadResponseDto(blobReferenceForConsumption.Value, pendingUploadId.Value, Optional.ToNullable(pendingUploadType));
        }
    }
}
