// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class PredictionDriftMonitoringSignal : IUtf8JsonSerializable, IJsonModel<PredictionDriftMonitoringSignal>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PredictionDriftMonitoringSignal>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<PredictionDriftMonitoringSignal>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PredictionDriftMonitoringSignal>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PredictionDriftMonitoringSignal)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(FeatureDataTypeOverride))
            {
                if (FeatureDataTypeOverride != null)
                {
                    writer.WritePropertyName("featureDataTypeOverride"u8);
                    writer.WriteStartObject();
                    foreach (var item in FeatureDataTypeOverride)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value.ToString());
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("featureDataTypeOverride");
                }
            }
            writer.WritePropertyName("metricThresholds"u8);
            writer.WriteStartArray();
            foreach (var item in MetricThresholds)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("productionData"u8);
            writer.WriteObjectValue(ProductionData, options);
            writer.WritePropertyName("referenceData"u8);
            writer.WriteObjectValue(ReferenceData, options);
<<<<<<< HEAD
            if (Optional.IsCollectionDefined(FeatureDataTypeOverride))
            {
                if (FeatureDataTypeOverride != null)
                {
                    writer.WritePropertyName("featureDataTypeOverride"u8);
                    writer.WriteStartObject();
                    foreach (var item in FeatureDataTypeOverride)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value.ToString());
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("featureDataTypeOverride");
                }
            }
            writer.WritePropertyName("signalType"u8);
            writer.WriteStringValue(SignalType.ToString());
            if (Optional.IsCollectionDefined(NotificationTypes))
            {
=======
            if (Optional.IsCollectionDefined(NotificationTypes))
            {
>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7
                if (NotificationTypes != null)
                {
                    writer.WritePropertyName("notificationTypes"u8);
                    writer.WriteStartArray();
                    foreach (var item in NotificationTypes)
                    {
                        writer.WriteStringValue(item.ToString());
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("notificationTypes");
                }
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                if (Properties != null)
                {
                    writer.WritePropertyName("properties"u8);
                    writer.WriteStartObject();
                    foreach (var item in Properties)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("properties");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PredictionDriftMonitoringSignal IJsonModel<PredictionDriftMonitoringSignal>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PredictionDriftMonitoringSignal>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PredictionDriftMonitoringSignal)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePredictionDriftMonitoringSignal(document.RootElement, options);
        }

        internal static PredictionDriftMonitoringSignal DeserializePredictionDriftMonitoringSignal(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, MonitoringFeatureDataType> featureDataTypeOverride = default;
            IList<PredictionDriftMetricThresholdBase> metricThresholds = default;
            MonitoringInputDataBase productionData = default;
            MonitoringInputDataBase referenceData = default;
<<<<<<< HEAD
            IDictionary<string, MonitoringFeatureDataType> featureDataTypeOverride = default;
=======
            IList<MonitoringNotificationType> notificationTypes = default;
            IDictionary<string, string> properties = default;
>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7
            MonitoringSignalType signalType = default;
            IList<MonitoringNotificationType> notificationTypes = default;
            IDictionary<string, string> properties = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("featureDataTypeOverride"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        featureDataTypeOverride = null;
                        continue;
                    }
                    Dictionary<string, MonitoringFeatureDataType> dictionary = new Dictionary<string, MonitoringFeatureDataType>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, new MonitoringFeatureDataType(property0.Value.GetString()));
                    }
                    featureDataTypeOverride = dictionary;
                    continue;
                }
                if (property.NameEquals("metricThresholds"u8))
                {
                    List<PredictionDriftMetricThresholdBase> array = new List<PredictionDriftMetricThresholdBase>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PredictionDriftMetricThresholdBase.DeserializePredictionDriftMetricThresholdBase(item, options));
                    }
                    metricThresholds = array;
                    continue;
                }
                if (property.NameEquals("productionData"u8))
                {
                    productionData = MonitoringInputDataBase.DeserializeMonitoringInputDataBase(property.Value, options);
                    continue;
                }
                if (property.NameEquals("referenceData"u8))
                {
                    referenceData = MonitoringInputDataBase.DeserializeMonitoringInputDataBase(property.Value, options);
                    continue;
                }
<<<<<<< HEAD
                if (property.NameEquals("featureDataTypeOverride"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        featureDataTypeOverride = null;
                        continue;
                    }
                    Dictionary<string, MonitoringFeatureDataType> dictionary = new Dictionary<string, MonitoringFeatureDataType>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, new MonitoringFeatureDataType(property0.Value.GetString()));
                    }
                    featureDataTypeOverride = dictionary;
                    continue;
                }
                if (property.NameEquals("signalType"u8))
                {
                    signalType = new MonitoringSignalType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        notificationTypes = null;
                        continue;
                    }
=======
                if (property.NameEquals("notificationTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        notificationTypes = null;
                        continue;
                    }
>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7
                    List<MonitoringNotificationType> array = new List<MonitoringNotificationType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new MonitoringNotificationType(item.GetString()));
                    }
                    notificationTypes = array;
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        properties = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    properties = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new PredictionDriftMonitoringSignal(
<<<<<<< HEAD
=======
                notificationTypes ?? new ChangeTrackingList<MonitoringNotificationType>(),
                properties ?? new ChangeTrackingDictionary<string, string>(),
>>>>>>> 3f8cf30a3ebe61cfdd08f1bbe8fa5494eda0e9f7
                signalType,
                notificationTypes ?? new ChangeTrackingList<MonitoringNotificationType>(),
                properties ?? new ChangeTrackingDictionary<string, string>(),
                serializedAdditionalRawData,
                featureDataTypeOverride ?? new ChangeTrackingDictionary<string, MonitoringFeatureDataType>(),
                metricThresholds,
                productionData,
                referenceData,
                featureDataTypeOverride ?? new ChangeTrackingDictionary<string, MonitoringFeatureDataType>());
        }

        BinaryData IPersistableModel<PredictionDriftMonitoringSignal>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PredictionDriftMonitoringSignal>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(PredictionDriftMonitoringSignal)} does not support writing '{options.Format}' format.");
            }
        }

        PredictionDriftMonitoringSignal IPersistableModel<PredictionDriftMonitoringSignal>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PredictionDriftMonitoringSignal>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializePredictionDriftMonitoringSignal(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PredictionDriftMonitoringSignal)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PredictionDriftMonitoringSignal>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
