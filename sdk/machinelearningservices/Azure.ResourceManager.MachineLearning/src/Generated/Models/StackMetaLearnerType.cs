// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// The meta-learner is a model trained on the output of the individual heterogeneous models.
    /// Default meta-learners are LogisticRegression for classification tasks (or LogisticRegressionCV if cross-validation is enabled) and ElasticNet for regression/forecasting tasks (or ElasticNetCV if cross-validation is enabled).
    /// This parameter can be one of the following strings: LogisticRegression, LogisticRegressionCV, LightGBMClassifier, ElasticNet, ElasticNetCV, LightGBMRegressor, or LinearRegression
    /// </summary>
    public readonly partial struct StackMetaLearnerType : IEquatable<StackMetaLearnerType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StackMetaLearnerType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StackMetaLearnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string LogisticRegressionValue = "LogisticRegression";
        private const string LogisticRegressionCVValue = "LogisticRegressionCV";
        private const string LightGBMClassifierValue = "LightGBMClassifier";
        private const string ElasticNetValue = "ElasticNet";
        private const string ElasticNetCVValue = "ElasticNetCV";
        private const string LightGBMRegressorValue = "LightGBMRegressor";
        private const string LinearRegressionValue = "LinearRegression";

        /// <summary> None. </summary>
        public static StackMetaLearnerType None { get; } = new StackMetaLearnerType(NoneValue);
        /// <summary> Default meta-learners are LogisticRegression for classification tasks. </summary>
        public static StackMetaLearnerType LogisticRegression { get; } = new StackMetaLearnerType(LogisticRegressionValue);
        /// <summary> Default meta-learners are LogisticRegression for classification task when CV is on. </summary>
        public static StackMetaLearnerType LogisticRegressionCV { get; } = new StackMetaLearnerType(LogisticRegressionCVValue);
        /// <summary> LightGBMClassifier. </summary>
        public static StackMetaLearnerType LightGBMClassifier { get; } = new StackMetaLearnerType(LightGBMClassifierValue);
        /// <summary> Default meta-learners are LogisticRegression for regression task. </summary>
        public static StackMetaLearnerType ElasticNet { get; } = new StackMetaLearnerType(ElasticNetValue);
        /// <summary> Default meta-learners are LogisticRegression for regression task when CV is on. </summary>
        public static StackMetaLearnerType ElasticNetCV { get; } = new StackMetaLearnerType(ElasticNetCVValue);
        /// <summary> LightGBMRegressor. </summary>
        public static StackMetaLearnerType LightGBMRegressor { get; } = new StackMetaLearnerType(LightGBMRegressorValue);
        /// <summary> LinearRegression. </summary>
        public static StackMetaLearnerType LinearRegression { get; } = new StackMetaLearnerType(LinearRegressionValue);
        /// <summary> Determines if two <see cref="StackMetaLearnerType"/> values are the same. </summary>
        public static bool operator ==(StackMetaLearnerType left, StackMetaLearnerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StackMetaLearnerType"/> values are not the same. </summary>
        public static bool operator !=(StackMetaLearnerType left, StackMetaLearnerType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StackMetaLearnerType"/>. </summary>
        public static implicit operator StackMetaLearnerType(string value) => new StackMetaLearnerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StackMetaLearnerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StackMetaLearnerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
