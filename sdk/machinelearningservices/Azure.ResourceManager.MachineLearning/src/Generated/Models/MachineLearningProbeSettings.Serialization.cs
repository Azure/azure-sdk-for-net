// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningProbeSettings : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(FailureThreshold))
            {
                writer.WritePropertyName("failureThreshold"u8);
                writer.WriteNumberValue(FailureThreshold.Value);
            }
            if (Core.Optional.IsDefined(InitialDelay))
            {
                if (InitialDelay != null)
                {
                    writer.WritePropertyName("initialDelay"u8);
                    writer.WriteStringValue(InitialDelay.Value, "P");
                }
                else
                {
                    writer.WriteNull("initialDelay");
                }
            }
            if (Core.Optional.IsDefined(Period))
            {
                writer.WritePropertyName("period"u8);
                writer.WriteStringValue(Period.Value, "P");
            }
            if (Core.Optional.IsDefined(SuccessThreshold))
            {
                writer.WritePropertyName("successThreshold"u8);
                writer.WriteNumberValue(SuccessThreshold.Value);
            }
            if (Core.Optional.IsDefined(Timeout))
            {
                writer.WritePropertyName("timeout"u8);
                writer.WriteStringValue(Timeout.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static MachineLearningProbeSettings DeserializeMachineLearningProbeSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int> failureThreshold = default;
            Core.Optional<TimeSpan?> initialDelay = default;
            Core.Optional<TimeSpan> period = default;
            Core.Optional<int> successThreshold = default;
            Core.Optional<TimeSpan> timeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("failureThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failureThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("initialDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        initialDelay = null;
                        continue;
                    }
                    initialDelay = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("period"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    period = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("successThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    successThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("timeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeout = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new MachineLearningProbeSettings(Core.Optional.ToNullable(failureThreshold), Core.Optional.ToNullable(initialDelay), Core.Optional.ToNullable(period), Core.Optional.ToNullable(successThreshold), Core.Optional.ToNullable(timeout));
        }
    }
}
