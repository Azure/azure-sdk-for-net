// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// Settings for user account that gets created on each on the nodes of a compute.
    /// Serialized Name: UserAccountCredentials
    /// </summary>
    public partial class MachineLearningUserAccountCredentials
    {
        /// <summary> Initializes a new instance of MachineLearningUserAccountCredentials. </summary>
        /// <param name="adminUserName">
        /// Name of the administrator user account which can be used to SSH to nodes.
        /// Serialized Name: UserAccountCredentials.adminUserName
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="adminUserName"/> is null. </exception>
        public MachineLearningUserAccountCredentials(string adminUserName)
        {
            Argument.AssertNotNull(adminUserName, nameof(adminUserName));

            AdminUserName = adminUserName;
        }

        /// <summary> Initializes a new instance of MachineLearningUserAccountCredentials. </summary>
        /// <param name="adminUserName">
        /// Name of the administrator user account which can be used to SSH to nodes.
        /// Serialized Name: UserAccountCredentials.adminUserName
        /// </param>
        /// <param name="adminUserSshPublicKey">
        /// SSH public key of the administrator user account.
        /// Serialized Name: UserAccountCredentials.adminUserSshPublicKey
        /// </param>
        /// <param name="adminUserPassword">
        /// Password of the administrator user account.
        /// Serialized Name: UserAccountCredentials.adminUserPassword
        /// </param>
        internal MachineLearningUserAccountCredentials(string adminUserName, string adminUserSshPublicKey, string adminUserPassword)
        {
            AdminUserName = adminUserName;
            AdminUserSshPublicKey = adminUserSshPublicKey;
            AdminUserPassword = adminUserPassword;
        }

        /// <summary>
        /// Name of the administrator user account which can be used to SSH to nodes.
        /// Serialized Name: UserAccountCredentials.adminUserName
        /// </summary>
        public string AdminUserName { get; set; }
        /// <summary>
        /// SSH public key of the administrator user account.
        /// Serialized Name: UserAccountCredentials.adminUserSshPublicKey
        /// </summary>
        public string AdminUserSshPublicKey { get; set; }
        /// <summary>
        /// Password of the administrator user account.
        /// Serialized Name: UserAccountCredentials.adminUserPassword
        /// </summary>
        public string AdminUserPassword { get; set; }
    }
}
