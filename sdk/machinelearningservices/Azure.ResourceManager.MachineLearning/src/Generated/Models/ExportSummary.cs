// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// The ExportSummary.
    /// Please note <see cref="ExportSummary"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="CocoExportSummary"/>, <see cref="CsvExportSummary"/> and <see cref="DatasetExportSummary"/>.
    /// </summary>
    public abstract partial class ExportSummary
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ExportSummary"/>. </summary>
        protected ExportSummary()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ExportSummary"/>. </summary>
        /// <param name="endOn"> The time when the export was completed. </param>
        /// <param name="exportedRowCount"> The total number of labeled datapoints exported. </param>
        /// <param name="format"> [Required] The format of exported labels, also as the discriminator. </param>
        /// <param name="labelingJobId"> Name and identifier of the job containing exported labels. </param>
        /// <param name="startOn"> The time when the export was requested. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ExportSummary(DateTimeOffset? endOn, long? exportedRowCount, ExportFormatType format, string labelingJobId, DateTimeOffset? startOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            EndOn = endOn;
            ExportedRowCount = exportedRowCount;
            Format = format;
            LabelingJobId = labelingJobId;
            StartOn = startOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The time when the export was completed. </summary>
        public DateTimeOffset? EndOn { get; }
        /// <summary> The total number of labeled datapoints exported. </summary>
        public long? ExportedRowCount { get; }
        /// <summary> [Required] The format of exported labels, also as the discriminator. </summary>
        internal ExportFormatType Format { get; set; }
        /// <summary> Name and identifier of the job containing exported labels. </summary>
        public string LabelingJobId { get; }
        /// <summary> The time when the export was requested. </summary>
        public DateTimeOffset? StartOn { get; }
    }
}
