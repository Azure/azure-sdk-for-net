// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class NotificationSetting : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(EmailOn))
            {
                if (EmailOn != null)
                {
                    writer.WritePropertyName("emailOn"u8);
                    writer.WriteStartArray();
                    foreach (var item in EmailOn)
                    {
                        writer.WriteStringValue(item.ToString());
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("emailOn");
                }
            }
            if (Optional.IsCollectionDefined(Emails))
            {
                if (Emails != null)
                {
                    writer.WritePropertyName("emails"u8);
                    writer.WriteStartArray();
                    foreach (var item in Emails)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("emails");
                }
            }
            if (Optional.IsCollectionDefined(Webhooks))
            {
                if (Webhooks != null)
                {
                    writer.WritePropertyName("webhooks"u8);
                    writer.WriteStartObject();
                    foreach (var item in Webhooks)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteObjectValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("webhooks");
                }
            }
            writer.WriteEndObject();
        }

        internal static NotificationSetting DeserializeNotificationSetting(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<EmailNotificationEnableType>> emailOn = default;
            Optional<IList<string>> emails = default;
            Optional<IDictionary<string, MachineLearningWebhook>> webhooks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("emailOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        emailOn = null;
                        continue;
                    }
                    List<EmailNotificationEnableType> array = new List<EmailNotificationEnableType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new EmailNotificationEnableType(item.GetString()));
                    }
                    emailOn = array;
                    continue;
                }
                if (property.NameEquals("emails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        emails = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    emails = array;
                    continue;
                }
                if (property.NameEquals("webhooks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        webhooks = null;
                        continue;
                    }
                    Dictionary<string, MachineLearningWebhook> dictionary = new Dictionary<string, MachineLearningWebhook>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, MachineLearningWebhook.DeserializeMachineLearningWebhook(property0.Value));
                    }
                    webhooks = dictionary;
                    continue;
                }
            }
            return new NotificationSetting(Optional.ToList(emailOn), Optional.ToList(emails), Optional.ToDictionary(webhooks));
        }
    }
}
