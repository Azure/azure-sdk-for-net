// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class VirtualMachineSchemaProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(VirtualMachineSize))
            {
                writer.WritePropertyName("virtualMachineSize");
                writer.WriteStringValue(VirtualMachineSize);
            }
            if (Optional.IsDefined(SshPort))
            {
                writer.WritePropertyName("sshPort");
                writer.WriteNumberValue(SshPort.Value);
            }
            if (Optional.IsDefined(NotebookServerPort))
            {
                writer.WritePropertyName("notebookServerPort");
                writer.WriteNumberValue(NotebookServerPort.Value);
            }
            if (Optional.IsDefined(Address))
            {
                writer.WritePropertyName("address");
                writer.WriteStringValue(Address);
            }
            if (Optional.IsDefined(AdministratorAccount))
            {
                if (AdministratorAccount != null)
                {
                    writer.WritePropertyName("administratorAccount");
                    writer.WriteObjectValue(AdministratorAccount);
                }
                else
                {
                    writer.WriteNull("administratorAccount");
                }
            }
            if (Optional.IsDefined(IsNotebookInstanceCompute))
            {
                writer.WritePropertyName("isNotebookInstanceCompute");
                writer.WriteBooleanValue(IsNotebookInstanceCompute.Value);
            }
            writer.WriteEndObject();
        }

        internal static VirtualMachineSchemaProperties DeserializeVirtualMachineSchemaProperties(JsonElement element)
        {
            Optional<string> virtualMachineSize = default;
            Optional<int> sshPort = default;
            Optional<int> notebookServerPort = default;
            Optional<string> address = default;
            Optional<VirtualMachineSshCredentials> administratorAccount = default;
            Optional<bool> isNotebookInstanceCompute = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("virtualMachineSize"))
                {
                    virtualMachineSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sshPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sshPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("notebookServerPort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    notebookServerPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("address"))
                {
                    address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("administratorAccount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        administratorAccount = null;
                        continue;
                    }
                    administratorAccount = VirtualMachineSshCredentials.DeserializeVirtualMachineSshCredentials(property.Value);
                    continue;
                }
                if (property.NameEquals("isNotebookInstanceCompute"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isNotebookInstanceCompute = property.Value.GetBoolean();
                    continue;
                }
            }
            return new VirtualMachineSchemaProperties(virtualMachineSize.Value, Optional.ToNullable(sshPort), Optional.ToNullable(notebookServerPort), address.Value, administratorAccount.Value, Optional.ToNullable(isNotebookInstanceCompute));
        }
    }
}
