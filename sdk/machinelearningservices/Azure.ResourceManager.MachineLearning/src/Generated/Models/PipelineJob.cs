// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// Pipeline Job definition: defines generic to MFE attributes.
    /// Serialized Name: PipelineJob
    /// </summary>
    public partial class PipelineJob : MachineLearningJobProperties
    {
        /// <summary> Initializes a new instance of PipelineJob. </summary>
        public PipelineJob()
        {
            Inputs = new ChangeTrackingDictionary<string, JobInput>();
            Jobs = new ChangeTrackingDictionary<string, BinaryData>();
            Outputs = new ChangeTrackingDictionary<string, JobOutput>();
            JobType = JobType.Pipeline;
        }

        /// <summary> Initializes a new instance of PipelineJob. </summary>
        /// <param name="description">
        /// The asset description text.
        /// Serialized Name: ResourceBase.description
        /// </param>
        /// <param name="properties">
        /// The asset property dictionary.
        /// Serialized Name: ResourceBase.properties
        /// </param>
        /// <param name="tags">
        /// Tag dictionary. Tags can be added, removed, and updated.
        /// Serialized Name: ResourceBase.tags
        /// </param>
        /// <param name="componentId">
        /// ARM resource ID of the component resource.
        /// Serialized Name: JobBase.componentId
        /// </param>
        /// <param name="computeId">
        /// ARM resource ID of the compute resource.
        /// Serialized Name: JobBase.computeId
        /// </param>
        /// <param name="displayName">
        /// Display name of job.
        /// Serialized Name: JobBase.displayName
        /// </param>
        /// <param name="experimentName">
        /// The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment.
        /// Serialized Name: JobBase.experimentName
        /// </param>
        /// <param name="identity">
        /// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        /// Defaults to AmlToken if null.
        /// Serialized Name: JobBase.identity
        /// Please note <see cref="MachineLearningIdentityConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmlToken"/>, <see cref="MachineLearningManagedIdentity"/> and <see cref="MachineLearningUserIdentity"/>.
        /// </param>
        /// <param name="isArchived">
        /// Is the asset archived?
        /// Serialized Name: JobBase.isArchived
        /// </param>
        /// <param name="jobType">
        /// [Required] Specifies the type of job.
        /// Serialized Name: JobBase.jobType
        /// </param>
        /// <param name="services">
        /// List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        /// Serialized Name: JobBase.services
        /// </param>
        /// <param name="status">
        /// Status of the job.
        /// Serialized Name: JobBase.status
        /// </param>
        /// <param name="inputs">
        /// Inputs for the pipeline job.
        /// Serialized Name: PipelineJob.inputs
        /// Please note <see cref="JobInput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomModelJobInput"/>, <see cref="LiteralJobInput"/>, <see cref="MLFlowModelJobInput"/>, <see cref="MLTableJobInput"/>, <see cref="TritonModelJobInput"/>, <see cref="UriFileJobInput"/> and <see cref="UriFolderJobInput"/>.
        /// </param>
        /// <param name="jobs">
        /// Jobs construct the Pipeline Job.
        /// Serialized Name: PipelineJob.jobs
        /// </param>
        /// <param name="outputs">
        /// Outputs for the pipeline job
        /// Serialized Name: PipelineJob.outputs
        /// Please note <see cref="JobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomModelJobOutput"/>, <see cref="MLFlowModelJobOutput"/>, <see cref="MLTableJobOutput"/>, <see cref="TritonModelJobOutput"/>, <see cref="UriFileJobOutput"/> and <see cref="UriFolderJobOutput"/>.
        /// </param>
        /// <param name="settings">
        /// Pipeline settings, for things like ContinueRunOnStepFailure etc.
        /// Serialized Name: PipelineJob.settings
        /// </param>
        /// <param name="sourceJobId">
        /// ARM resource ID of source job.
        /// Serialized Name: PipelineJob.sourceJobId
        /// </param>
        internal PipelineJob(string description, IDictionary<string, string> properties, IDictionary<string, string> tags, string componentId, string computeId, string displayName, string experimentName, MachineLearningIdentityConfiguration identity, bool? isArchived, JobType jobType, IDictionary<string, JobService> services, JobStatus? status, IDictionary<string, JobInput> inputs, IDictionary<string, BinaryData> jobs, IDictionary<string, JobOutput> outputs, BinaryData settings, string sourceJobId) : base(description, properties, tags, componentId, computeId, displayName, experimentName, identity, isArchived, jobType, services, status)
        {
            Inputs = inputs;
            Jobs = jobs;
            Outputs = outputs;
            Settings = settings;
            SourceJobId = sourceJobId;
            JobType = jobType;
        }

        /// <summary>
        /// Inputs for the pipeline job.
        /// Serialized Name: PipelineJob.inputs
        /// Please note <see cref="JobInput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomModelJobInput"/>, <see cref="LiteralJobInput"/>, <see cref="MLFlowModelJobInput"/>, <see cref="MLTableJobInput"/>, <see cref="TritonModelJobInput"/>, <see cref="UriFileJobInput"/> and <see cref="UriFolderJobInput"/>.
        /// </summary>
        public IDictionary<string, JobInput> Inputs { get; set; }
        /// <summary>
        /// Jobs construct the Pipeline Job.
        /// Serialized Name: PipelineJob.jobs
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Jobs { get; set; }
        /// <summary>
        /// Outputs for the pipeline job
        /// Serialized Name: PipelineJob.outputs
        /// Please note <see cref="JobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CustomModelJobOutput"/>, <see cref="MLFlowModelJobOutput"/>, <see cref="MLTableJobOutput"/>, <see cref="TritonModelJobOutput"/>, <see cref="UriFileJobOutput"/> and <see cref="UriFolderJobOutput"/>.
        /// </summary>
        public IDictionary<string, JobOutput> Outputs { get; set; }
        /// <summary>
        /// Pipeline settings, for things like ContinueRunOnStepFailure etc.
        /// Serialized Name: PipelineJob.settings
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Settings { get; set; }
        /// <summary>
        /// ARM resource ID of source job.
        /// Serialized Name: PipelineJob.sourceJobId
        /// </summary>
        public string SourceJobId { get; set; }
    }
}
