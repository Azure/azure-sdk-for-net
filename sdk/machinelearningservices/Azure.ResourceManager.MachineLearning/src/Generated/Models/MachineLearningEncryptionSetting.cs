// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The MachineLearningEncryptionSetting. </summary>
    public partial class MachineLearningEncryptionSetting
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MachineLearningEncryptionSetting"/>. </summary>
        /// <param name="keyVaultProperties"> KeyVault details to do the encryption. </param>
        /// <param name="status"> Indicates whether or not the encryption is enabled for the workspace. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVaultProperties"/> is null. </exception>
        public MachineLearningEncryptionSetting(MachineLearningEncryptionKeyVaultProperties keyVaultProperties, MachineLearningEncryptionStatus status)
        {
            Argument.AssertNotNull(keyVaultProperties, nameof(keyVaultProperties));

            KeyVaultProperties = keyVaultProperties;
            Status = status;
        }

        /// <summary> Initializes a new instance of <see cref="MachineLearningEncryptionSetting"/>. </summary>
        /// <param name="cosmosDBResourceId">
        /// The byok cosmosdb account that customer brings to store customer's data
        /// with encryption
        /// </param>
        /// <param name="identity"> Identity to be used with the keyVault. </param>
        /// <param name="keyVaultProperties"> KeyVault details to do the encryption. </param>
        /// <param name="searchAccountResourceId">
        /// The byok search account that customer brings to store customer's data
        /// with encryption
        /// </param>
        /// <param name="status"> Indicates whether or not the encryption is enabled for the workspace. </param>
        /// <param name="storageAccountResourceId">
        /// The byok storage account that customer brings to store customer's data
        /// with encryption
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MachineLearningEncryptionSetting(ResourceIdentifier cosmosDBResourceId, MachineLearningCmkIdentity identity, MachineLearningEncryptionKeyVaultProperties keyVaultProperties, ResourceIdentifier searchAccountResourceId, MachineLearningEncryptionStatus status, ResourceIdentifier storageAccountResourceId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CosmosDBResourceId = cosmosDBResourceId;
            Identity = identity;
            KeyVaultProperties = keyVaultProperties;
            SearchAccountResourceId = searchAccountResourceId;
            Status = status;
            StorageAccountResourceId = storageAccountResourceId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MachineLearningEncryptionSetting"/> for deserialization. </summary>
        internal MachineLearningEncryptionSetting()
        {
        }

        /// <summary>
        /// The byok cosmosdb account that customer brings to store customer's data
        /// with encryption
        /// </summary>
        public ResourceIdentifier CosmosDBResourceId { get; set; }
        /// <summary> Identity to be used with the keyVault. </summary>
        internal MachineLearningCmkIdentity Identity { get; set; }
        /// <summary> UserAssignedIdentity to be used to fetch the encryption key from keyVault. </summary>
        public ResourceIdentifier UserAssignedIdentity
        {
            get => Identity is null ? default : Identity.UserAssignedIdentity;
            set
            {
                if (Identity is null)
                    Identity = new MachineLearningCmkIdentity();
                Identity.UserAssignedIdentity = value;
            }
        }

        /// <summary> KeyVault details to do the encryption. </summary>
        public MachineLearningEncryptionKeyVaultProperties KeyVaultProperties { get; set; }
        /// <summary>
        /// The byok search account that customer brings to store customer's data
        /// with encryption
        /// </summary>
        public ResourceIdentifier SearchAccountResourceId { get; set; }
        /// <summary> Indicates whether or not the encryption is enabled for the workspace. </summary>
        public MachineLearningEncryptionStatus Status { get; set; }
        /// <summary>
        /// The byok storage account that customer brings to store customer's data
        /// with encryption
        /// </summary>
        public ResourceIdentifier StorageAccountResourceId { get; set; }
    }
}
