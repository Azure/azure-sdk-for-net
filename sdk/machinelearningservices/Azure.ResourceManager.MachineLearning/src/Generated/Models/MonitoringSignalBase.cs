// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// The MonitoringSignalBase.
    /// Please note <see cref="MonitoringSignalBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="CustomMonitoringSignal"/>, <see cref="DataDriftMonitoringSignal"/>, <see cref="DataQualityMonitoringSignal"/>, <see cref="FeatureAttributionDriftMonitoringSignal"/>, <see cref="GenerationSafetyQualityMonitoringSignal"/>, <see cref="GenerationTokenStatisticsSignal"/>, <see cref="ModelPerformanceSignal"/> and <see cref="PredictionDriftMonitoringSignal"/>.
    /// </summary>
    public abstract partial class MonitoringSignalBase
    {
        /// <summary> Initializes a new instance of <see cref="MonitoringSignalBase"/>. </summary>
        protected MonitoringSignalBase()
        {
            Properties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="MonitoringSignalBase"/>. </summary>
        /// <param name="mode"> The current notification mode for this signal. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="signalType"> [Required] Specifies the type of signal to monitor. </param>
        internal MonitoringSignalBase(MonitoringNotificationMode? mode, IDictionary<string, string> properties, MonitoringSignalType signalType)
        {
            Mode = mode;
            Properties = properties;
            SignalType = signalType;
        }

        /// <summary> The current notification mode for this signal. </summary>
        public MonitoringNotificationMode? Mode { get; set; }
        /// <summary> Property dictionary. Properties can be added, but not removed or altered. </summary>
        public IDictionary<string, string> Properties { get; set; }
        /// <summary> [Required] Specifies the type of signal to monitor. </summary>
        internal MonitoringSignalType SignalType { get; set; }
    }
}
