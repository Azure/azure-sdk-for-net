// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class DatabaseSource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Query))
            {
                if (Query != null)
                {
                    writer.WritePropertyName("query"u8);
                    writer.WriteStringValue(Query);
                }
                else
                {
                    writer.WriteNull("query");
                }
            }
            if (Optional.IsDefined(StoredProcedure))
            {
                if (StoredProcedure != null)
                {
                    writer.WritePropertyName("storedProcedure"u8);
                    writer.WriteStringValue(StoredProcedure);
                }
                else
                {
                    writer.WriteNull("storedProcedure");
                }
            }
            if (Optional.IsCollectionDefined(StoredProcedureParams))
            {
                if (StoredProcedureParams != null)
                {
                    writer.WritePropertyName("storedProcedureParams"u8);
                    writer.WriteStartArray();
                    foreach (var item in StoredProcedureParams)
                    {
                        if (item == null)
                        {
                            writer.WriteNullValue();
                            continue;
                        }
                        writer.WriteStartObject();
                        foreach (var item0 in item)
                        {
                            writer.WritePropertyName(item0.Key);
                            writer.WriteStringValue(item0.Value);
                        }
                        writer.WriteEndObject();
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("storedProcedureParams");
                }
            }
            if (Optional.IsDefined(TableName))
            {
                if (TableName != null)
                {
                    writer.WritePropertyName("tableName"u8);
                    writer.WriteStringValue(TableName);
                }
                else
                {
                    writer.WriteNull("tableName");
                }
            }
            if (Optional.IsDefined(Connection))
            {
                if (Connection != null)
                {
                    writer.WritePropertyName("connection"u8);
                    writer.WriteStringValue(Connection);
                }
                else
                {
                    writer.WriteNull("connection");
                }
            }
            writer.WritePropertyName("sourceType"u8);
            writer.WriteStringValue(SourceType.ToString());
            writer.WriteEndObject();
        }

        internal static DatabaseSource DeserializeDatabaseSource(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> query = default;
            Optional<string> storedProcedure = default;
            Optional<IList<IDictionary<string, string>>> storedProcedureParams = default;
            Optional<string> tableName = default;
            Optional<string> connection = default;
            DataImportSourceType sourceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("query"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        query = null;
                        continue;
                    }
                    query = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storedProcedure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storedProcedure = null;
                        continue;
                    }
                    storedProcedure = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storedProcedureParams"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storedProcedureParams = null;
                        continue;
                    }
                    List<IDictionary<string, string>> array = new List<IDictionary<string, string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property0 in item.EnumerateObject())
                            {
                                dictionary.Add(property0.Name, property0.Value.GetString());
                            }
                            array.Add(dictionary);
                        }
                    }
                    storedProcedureParams = array;
                    continue;
                }
                if (property.NameEquals("tableName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        tableName = null;
                        continue;
                    }
                    tableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        connection = null;
                        continue;
                    }
                    connection = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceType"u8))
                {
                    sourceType = new DataImportSourceType(property.Value.GetString());
                    continue;
                }
            }
            return new DatabaseSource(connection.Value, sourceType, query.Value, storedProcedure.Value, Optional.ToList(storedProcedureParams), tableName.Value);
        }
    }
}
