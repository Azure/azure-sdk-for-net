// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MonitorServerlessSparkCompute : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("computeIdentity"u8);
            writer.WriteObjectValue(ComputeIdentity);
            writer.WritePropertyName("instanceType"u8);
            writer.WriteStringValue(InstanceType);
            writer.WritePropertyName("runtimeVersion"u8);
            writer.WriteStringValue(RuntimeVersion);
            writer.WritePropertyName("computeType"u8);
            writer.WriteStringValue(ComputeType.ToString());
            writer.WriteEndObject();
        }

        internal static MonitorServerlessSparkCompute DeserializeMonitorServerlessSparkCompute(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            MonitorComputeIdentityBase computeIdentity = default;
            string instanceType = default;
            string runtimeVersion = default;
            MonitorComputeType computeType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("computeIdentity"u8))
                {
                    computeIdentity = MonitorComputeIdentityBase.DeserializeMonitorComputeIdentityBase(property.Value);
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runtimeVersion"u8))
                {
                    runtimeVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("computeType"u8))
                {
                    computeType = new MonitorComputeType(property.Value.GetString());
                    continue;
                }
            }
            return new MonitorServerlessSparkCompute(computeType, computeIdentity, instanceType, runtimeVersion);
        }
    }
}
