// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The DataImport. </summary>
    public partial class DataImport : MachineLearningDataVersionProperties
    {
        /// <summary> Initializes a new instance of <see cref="DataImport"/>. </summary>
        /// <param name="dataUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataUri"/> is null. </exception>
        public DataImport(Uri dataUri) : base(dataUri)
        {
            Argument.AssertNotNull(dataUri, nameof(dataUri));

            DataType = MachineLearningDataType.UriFolder;
        }

        /// <summary> Initializes a new instance of <see cref="DataImport"/>. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="autoDeleteSetting"> Specifies the lifecycle setting of managed data asset. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous. </param>
        /// <param name="isArchived"> Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived. </param>
        /// <param name="dataType"> [Required] Specifies the type of data. </param>
        /// <param name="dataUri"> [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330. </param>
        /// <param name="intellectualProperty"> Intellectual Property details. Used if data is an Intellectual Property. </param>
        /// <param name="stage"> Stage in the data lifecycle assigned to this data asset. </param>
        /// <param name="assetName"> Name of the asset for data import job to create. </param>
        /// <param name="source">
        /// Source data of the asset to import from
        /// Please note <see cref="DataImportSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatabaseSource"/> and <see cref="FileSystemSource"/>.
        /// </param>
        internal DataImport(string description, IDictionary<string, string> properties, IDictionary<string, string> tags, AutoDeleteSetting autoDeleteSetting, bool? isAnonymous, bool? isArchived, MachineLearningDataType dataType, Uri dataUri, IntellectualProperty intellectualProperty, string stage, string assetName, DataImportSource source) : base(description, properties, tags, autoDeleteSetting, isAnonymous, isArchived, dataType, dataUri, intellectualProperty, stage)
        {
            AssetName = assetName;
            Source = source;
            DataType = dataType;
        }

        /// <summary> Name of the asset for data import job to create. </summary>
        public string AssetName { get; set; }
        /// <summary>
        /// Source data of the asset to import from
        /// Please note <see cref="DataImportSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DatabaseSource"/> and <see cref="FileSystemSource"/>.
        /// </summary>
        public DataImportSource Source { get; set; }
    }
}
