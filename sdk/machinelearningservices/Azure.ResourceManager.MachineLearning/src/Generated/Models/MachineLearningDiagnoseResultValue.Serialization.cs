// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningDiagnoseResultValue : IUtf8JsonSerializable, IModelJsonSerializable<MachineLearningDiagnoseResultValue>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MachineLearningDiagnoseResultValue>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MachineLearningDiagnoseResultValue>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(UserDefinedRouteResults))
            {
                writer.WritePropertyName("userDefinedRouteResults"u8);
                writer.WriteStartArray();
                foreach (var item in UserDefinedRouteResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NetworkSecurityRuleResults))
            {
                writer.WritePropertyName("networkSecurityRuleResults"u8);
                writer.WriteStartArray();
                foreach (var item in NetworkSecurityRuleResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResourceLockResults))
            {
                writer.WritePropertyName("resourceLockResults"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceLockResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DnsResolutionResults))
            {
                writer.WritePropertyName("dnsResolutionResults"u8);
                writer.WriteStartArray();
                foreach (var item in DnsResolutionResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageAccountResults))
            {
                writer.WritePropertyName("storageAccountResults"u8);
                writer.WriteStartArray();
                foreach (var item in StorageAccountResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(KeyVaultResults))
            {
                writer.WritePropertyName("keyVaultResults"u8);
                writer.WriteStartArray();
                foreach (var item in KeyVaultResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ContainerRegistryResults))
            {
                writer.WritePropertyName("containerRegistryResults"u8);
                writer.WriteStartArray();
                foreach (var item in ContainerRegistryResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ApplicationInsightsResults))
            {
                writer.WritePropertyName("applicationInsightsResults"u8);
                writer.WriteStartArray();
                foreach (var item in ApplicationInsightsResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(OtherResults))
            {
                writer.WritePropertyName("otherResults"u8);
                writer.WriteStartArray();
                foreach (var item in OtherResults)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<MachineLearningDiagnoseResult>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MachineLearningDiagnoseResultValue DeserializeMachineLearningDiagnoseResultValue(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> userDefinedRouteResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> networkSecurityRuleResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> resourceLockResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> dnsResolutionResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> storageAccountResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> keyVaultResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> containerRegistryResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> applicationInsightsResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> otherResults = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("userDefinedRouteResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    userDefinedRouteResults = array;
                    continue;
                }
                if (property.NameEquals("networkSecurityRuleResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    networkSecurityRuleResults = array;
                    continue;
                }
                if (property.NameEquals("resourceLockResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    resourceLockResults = array;
                    continue;
                }
                if (property.NameEquals("dnsResolutionResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    dnsResolutionResults = array;
                    continue;
                }
                if (property.NameEquals("storageAccountResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    storageAccountResults = array;
                    continue;
                }
                if (property.NameEquals("keyVaultResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    keyVaultResults = array;
                    continue;
                }
                if (property.NameEquals("containerRegistryResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    containerRegistryResults = array;
                    continue;
                }
                if (property.NameEquals("applicationInsightsResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    applicationInsightsResults = array;
                    continue;
                }
                if (property.NameEquals("otherResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    otherResults = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MachineLearningDiagnoseResultValue(Optional.ToList(userDefinedRouteResults), Optional.ToList(networkSecurityRuleResults), Optional.ToList(resourceLockResults), Optional.ToList(dnsResolutionResults), Optional.ToList(storageAccountResults), Optional.ToList(keyVaultResults), Optional.ToList(containerRegistryResults), Optional.ToList(applicationInsightsResults), Optional.ToList(otherResults), rawData);
        }

        MachineLearningDiagnoseResultValue IModelJsonSerializable<MachineLearningDiagnoseResultValue>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningDiagnoseResultValue(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MachineLearningDiagnoseResultValue>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MachineLearningDiagnoseResultValue IModelSerializable<MachineLearningDiagnoseResultValue>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMachineLearningDiagnoseResultValue(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MachineLearningDiagnoseResultValue"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MachineLearningDiagnoseResultValue"/> to convert. </param>
        public static implicit operator RequestContent(MachineLearningDiagnoseResultValue model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MachineLearningDiagnoseResultValue"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MachineLearningDiagnoseResultValue(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMachineLearningDiagnoseResultValue(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
