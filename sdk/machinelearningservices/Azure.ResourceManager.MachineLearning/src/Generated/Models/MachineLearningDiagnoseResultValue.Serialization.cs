// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class MachineLearningDiagnoseResultValue : IUtf8JsonSerializable, IJsonModel<MachineLearningDiagnoseResultValue>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MachineLearningDiagnoseResultValue>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MachineLearningDiagnoseResultValue>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningDiagnoseResultValue>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineLearningDiagnoseResultValue)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(UserDefinedRouteResults))
            {
                writer.WritePropertyName("userDefinedRouteResults"u8);
                writer.WriteStartArray();
                foreach (var item in UserDefinedRouteResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(NetworkSecurityRuleResults))
            {
                writer.WritePropertyName("networkSecurityRuleResults"u8);
                writer.WriteStartArray();
                foreach (var item in NetworkSecurityRuleResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ResourceLockResults))
            {
                writer.WritePropertyName("resourceLockResults"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceLockResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DnsResolutionResults))
            {
                writer.WritePropertyName("dnsResolutionResults"u8);
                writer.WriteStartArray();
                foreach (var item in DnsResolutionResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageAccountResults))
            {
                writer.WritePropertyName("storageAccountResults"u8);
                writer.WriteStartArray();
                foreach (var item in StorageAccountResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(KeyVaultResults))
            {
                writer.WritePropertyName("keyVaultResults"u8);
                writer.WriteStartArray();
                foreach (var item in KeyVaultResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ContainerRegistryResults))
            {
                writer.WritePropertyName("containerRegistryResults"u8);
                writer.WriteStartArray();
                foreach (var item in ContainerRegistryResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ApplicationInsightsResults))
            {
                writer.WritePropertyName("applicationInsightsResults"u8);
                writer.WriteStartArray();
                foreach (var item in ApplicationInsightsResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(OtherResults))
            {
                writer.WritePropertyName("otherResults"u8);
                writer.WriteStartArray();
                foreach (var item in OtherResults)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MachineLearningDiagnoseResultValue IJsonModel<MachineLearningDiagnoseResultValue>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningDiagnoseResultValue>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MachineLearningDiagnoseResultValue)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMachineLearningDiagnoseResultValue(document.RootElement, options);
        }

        internal static MachineLearningDiagnoseResultValue DeserializeMachineLearningDiagnoseResultValue(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> userDefinedRouteResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> networkSecurityRuleResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> resourceLockResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> dnsResolutionResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> storageAccountResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> keyVaultResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> containerRegistryResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> applicationInsightsResults = default;
            Optional<IReadOnlyList<MachineLearningDiagnoseResult>> otherResults = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("userDefinedRouteResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    userDefinedRouteResults = array;
                    continue;
                }
                if (property.NameEquals("networkSecurityRuleResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    networkSecurityRuleResults = array;
                    continue;
                }
                if (property.NameEquals("resourceLockResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    resourceLockResults = array;
                    continue;
                }
                if (property.NameEquals("dnsResolutionResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    dnsResolutionResults = array;
                    continue;
                }
                if (property.NameEquals("storageAccountResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    storageAccountResults = array;
                    continue;
                }
                if (property.NameEquals("keyVaultResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    keyVaultResults = array;
                    continue;
                }
                if (property.NameEquals("containerRegistryResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    containerRegistryResults = array;
                    continue;
                }
                if (property.NameEquals("applicationInsightsResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    applicationInsightsResults = array;
                    continue;
                }
                if (property.NameEquals("otherResults"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MachineLearningDiagnoseResult> array = new List<MachineLearningDiagnoseResult>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MachineLearningDiagnoseResult.DeserializeMachineLearningDiagnoseResult(item));
                    }
                    otherResults = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MachineLearningDiagnoseResultValue(Optional.ToList(userDefinedRouteResults), Optional.ToList(networkSecurityRuleResults), Optional.ToList(resourceLockResults), Optional.ToList(dnsResolutionResults), Optional.ToList(storageAccountResults), Optional.ToList(keyVaultResults), Optional.ToList(containerRegistryResults), Optional.ToList(applicationInsightsResults), Optional.ToList(otherResults), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MachineLearningDiagnoseResultValue>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningDiagnoseResultValue>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(MachineLearningDiagnoseResultValue)} does not support '{options.Format}' format.");
            }
        }

        MachineLearningDiagnoseResultValue IPersistableModel<MachineLearningDiagnoseResultValue>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MachineLearningDiagnoseResultValue>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMachineLearningDiagnoseResultValue(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MachineLearningDiagnoseResultValue)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MachineLearningDiagnoseResultValue>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
