// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The os patching status. </summary>
    public readonly partial struct PatchStatus : IEquatable<PatchStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PatchStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PatchStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CompletedWithWarningsValue = "CompletedWithWarnings";
        private const string FailedValue = "Failed";
        private const string InProgressValue = "InProgress";
        private const string SucceededValue = "Succeeded";
        private const string UnknownValue = "Unknown";

        /// <summary> CompletedWithWarnings. </summary>
        public static PatchStatus CompletedWithWarnings { get; } = new PatchStatus(CompletedWithWarningsValue);
        /// <summary> Failed. </summary>
        public static PatchStatus Failed { get; } = new PatchStatus(FailedValue);
        /// <summary> InProgress. </summary>
        public static PatchStatus InProgress { get; } = new PatchStatus(InProgressValue);
        /// <summary> Succeeded. </summary>
        public static PatchStatus Succeeded { get; } = new PatchStatus(SucceededValue);
        /// <summary> Unknown. </summary>
        public static PatchStatus Unknown { get; } = new PatchStatus(UnknownValue);
        /// <summary> Determines if two <see cref="PatchStatus"/> values are the same. </summary>
        public static bool operator ==(PatchStatus left, PatchStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PatchStatus"/> values are not the same. </summary>
        public static bool operator !=(PatchStatus left, PatchStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PatchStatus"/>. </summary>
        public static implicit operator PatchStatus(string value) => new PatchStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PatchStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PatchStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
