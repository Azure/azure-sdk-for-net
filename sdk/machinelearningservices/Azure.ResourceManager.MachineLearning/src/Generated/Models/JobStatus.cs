// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// The status of a job.
    /// Serialized Name: JobStatus
    /// </summary>
    public readonly partial struct JobStatus : IEquatable<JobStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string StartingValue = "Starting";
        private const string ProvisioningValue = "Provisioning";
        private const string PreparingValue = "Preparing";
        private const string QueuedValue = "Queued";
        private const string RunningValue = "Running";
        private const string FinalizingValue = "Finalizing";
        private const string CancelRequestedValue = "CancelRequested";
        private const string CompletedValue = "Completed";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string NotRespondingValue = "NotResponding";
        private const string PausedValue = "Paused";
        private const string UnknownValue = "Unknown";

        /// <summary>
        /// Run hasn&apos;t started yet.
        /// Serialized Name: JobStatus.NotStarted
        /// </summary>
        public static JobStatus NotStarted { get; } = new JobStatus(NotStartedValue);
        /// <summary>
        /// Run has started. The user has a run ID.
        /// Serialized Name: JobStatus.Starting
        /// </summary>
        public static JobStatus Starting { get; } = new JobStatus(StartingValue);
        /// <summary>
        /// (Not used currently) It will be used if ES is creating the compute target.
        /// Serialized Name: JobStatus.Provisioning
        /// </summary>
        public static JobStatus Provisioning { get; } = new JobStatus(ProvisioningValue);
        /// <summary>
        /// The run environment is being prepared.
        /// Serialized Name: JobStatus.Preparing
        /// </summary>
        public static JobStatus Preparing { get; } = new JobStatus(PreparingValue);
        /// <summary>
        /// The job is queued in the compute target. For example, in BatchAI the job is in queued state, while waiting for all required nodes to be ready.
        /// Serialized Name: JobStatus.Queued
        /// </summary>
        public static JobStatus Queued { get; } = new JobStatus(QueuedValue);
        /// <summary>
        /// The job started to run in the compute target.
        /// Serialized Name: JobStatus.Running
        /// </summary>
        public static JobStatus Running { get; } = new JobStatus(RunningValue);
        /// <summary>
        /// Job is completed in the target. It is in output collection state now.
        /// Serialized Name: JobStatus.Finalizing
        /// </summary>
        public static JobStatus Finalizing { get; } = new JobStatus(FinalizingValue);
        /// <summary>
        /// Cancellation has been requested for the job.
        /// Serialized Name: JobStatus.CancelRequested
        /// </summary>
        public static JobStatus CancelRequested { get; } = new JobStatus(CancelRequestedValue);
        /// <summary>
        /// Job completed successfully. This reflects that both the job itself and output collection states completed successfully
        /// Serialized Name: JobStatus.Completed
        /// </summary>
        public static JobStatus Completed { get; } = new JobStatus(CompletedValue);
        /// <summary>
        /// Job failed.
        /// Serialized Name: JobStatus.Failed
        /// </summary>
        public static JobStatus Failed { get; } = new JobStatus(FailedValue);
        /// <summary>
        /// Following cancellation request, the job is now successfully canceled.
        /// Serialized Name: JobStatus.Canceled
        /// </summary>
        public static JobStatus Canceled { get; } = new JobStatus(CanceledValue);
        /// <summary>
        /// When heartbeat is enabled, if the run isn&apos;t updating any information to RunHistory then the run goes to NotResponding state.
        /// NotResponding is the only state that is exempt from strict transition orders. A run can go from NotResponding to any of the previous states.
        /// Serialized Name: JobStatus.NotResponding
        /// </summary>
        public static JobStatus NotResponding { get; } = new JobStatus(NotRespondingValue);
        /// <summary>
        /// The job is paused by users. Some adjustment to labeling jobs can be made only in paused state.
        /// Serialized Name: JobStatus.Paused
        /// </summary>
        public static JobStatus Paused { get; } = new JobStatus(PausedValue);
        /// <summary>
        /// Default job status if not mapped to all other statuses
        /// Serialized Name: JobStatus.Unknown
        /// </summary>
        public static JobStatus Unknown { get; } = new JobStatus(UnknownValue);
        /// <summary> Determines if two <see cref="JobStatus"/> values are the same. </summary>
        public static bool operator ==(JobStatus left, JobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobStatus"/> values are not the same. </summary>
        public static bool operator !=(JobStatus left, JobStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobStatus"/>. </summary>
        public static implicit operator JobStatus(string value) => new JobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
