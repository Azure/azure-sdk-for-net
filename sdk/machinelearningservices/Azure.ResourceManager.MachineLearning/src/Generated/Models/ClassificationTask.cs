// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Classification task in AutoML Table vertical. </summary>
    public partial class ClassificationTask : AutoMLVertical
    {
        /// <summary> Initializes a new instance of <see cref="ClassificationTask"/>. </summary>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="trainingData"/> is null. </exception>
        public ClassificationTask(MachineLearningTableJobInput trainingData) : base(trainingData)
        {
            Argument.AssertNotNull(trainingData, nameof(trainingData));

            CvSplitColumnNames = new ChangeTrackingList<string>();
            SearchSpace = new ChangeTrackingList<TableParameterSubspace>();
            TaskType = TaskType.Classification;
        }

        /// <summary> Initializes a new instance of <see cref="ClassificationTask"/>. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="taskType"> [Required] Task type for AutoMLJob. </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="positiveLabel"> Positive label for binary metrics calculation. </param>
        /// <param name="primaryMetric"> Primary metric for the task. </param>
        /// <param name="trainingSettings"> Inputs for training phase for an AutoML Job. </param>
        /// <param name="cvSplitColumnNames"> Columns to use for CVSplit data. </param>
        /// <param name="featurizationSettings"> Featurization inputs needed for AutoML job. </param>
        /// <param name="fixedParameters"> Model/training parameters that will remain constant throughout training. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="nCrossValidations">
        /// Number of cross validation folds to be applied on training dataset
        /// when validation dataset is not provided.
        /// Please note <see cref="Models.NCrossValidations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoNCrossValidations"/> and <see cref="CustomNCrossValidations"/>.
        /// </param>
        /// <param name="searchSpace"> Search space for sampling different combinations of models and their hyperparameters. </param>
        /// <param name="sweepSettings"> Settings for model sweeping and hyperparameter tuning. </param>
        /// <param name="testData"> Test data input. </param>
        /// <param name="testDataSize">
        /// The fraction of test dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="weightColumnName"> The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. </param>
        internal ClassificationTask(MachineLearningLogVerbosity? logVerbosity, string targetColumnName, TaskType taskType, MachineLearningTableJobInput trainingData, string positiveLabel, ClassificationPrimaryMetric? primaryMetric, ClassificationTrainingSettings trainingSettings, IList<string> cvSplitColumnNames, TableVerticalFeaturizationSettings featurizationSettings, TableFixedParameters fixedParameters, TableVerticalLimitSettings limitSettings, NCrossValidations nCrossValidations, IList<TableParameterSubspace> searchSpace, TableSweepSettings sweepSettings, MachineLearningTableJobInput testData, double? testDataSize, MachineLearningTableJobInput validationData, double? validationDataSize, string weightColumnName) : base(logVerbosity, targetColumnName, taskType, trainingData)
        {
            PositiveLabel = positiveLabel;
            PrimaryMetric = primaryMetric;
            TrainingSettings = trainingSettings;
            CvSplitColumnNames = cvSplitColumnNames;
            FeaturizationSettings = featurizationSettings;
            FixedParameters = fixedParameters;
            LimitSettings = limitSettings;
            NCrossValidations = nCrossValidations;
            SearchSpace = searchSpace;
            SweepSettings = sweepSettings;
            TestData = testData;
            TestDataSize = testDataSize;
            ValidationData = validationData;
            ValidationDataSize = validationDataSize;
            WeightColumnName = weightColumnName;
            TaskType = taskType;
        }

        /// <summary> Positive label for binary metrics calculation. </summary>
        public string PositiveLabel { get; set; }
        /// <summary> Primary metric for the task. </summary>
        public ClassificationPrimaryMetric? PrimaryMetric { get; set; }
        /// <summary> Inputs for training phase for an AutoML Job. </summary>
        public ClassificationTrainingSettings TrainingSettings { get; set; }
        /// <summary> Columns to use for CVSplit data. </summary>
        public IList<string> CvSplitColumnNames { get; set; }
        /// <summary> Featurization inputs needed for AutoML job. </summary>
        public TableVerticalFeaturizationSettings FeaturizationSettings { get; set; }
        /// <summary> Model/training parameters that will remain constant throughout training. </summary>
        public TableFixedParameters FixedParameters { get; set; }
        /// <summary> Execution constraints for AutoMLJob. </summary>
        public TableVerticalLimitSettings LimitSettings { get; set; }
        /// <summary>
        /// Number of cross validation folds to be applied on training dataset
        /// when validation dataset is not provided.
        /// Please note <see cref="Models.NCrossValidations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoNCrossValidations"/> and <see cref="CustomNCrossValidations"/>.
        /// </summary>
        public NCrossValidations NCrossValidations { get; set; }
        /// <summary> Search space for sampling different combinations of models and their hyperparameters. </summary>
        public IList<TableParameterSubspace> SearchSpace { get; set; }
        /// <summary> Settings for model sweeping and hyperparameter tuning. </summary>
        public TableSweepSettings SweepSettings { get; set; }
        /// <summary> Test data input. </summary>
        public MachineLearningTableJobInput TestData { get; set; }
        /// <summary>
        /// The fraction of test dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </summary>
        public double? TestDataSize { get; set; }
        /// <summary> Validation data inputs. </summary>
        public MachineLearningTableJobInput ValidationData { get; set; }
        /// <summary>
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </summary>
        public double? ValidationDataSize { get; set; }
        /// <summary> The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. </summary>
        public string WeightColumnName { get; set; }
    }
}
