// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The MachineLearningResourceConfiguration. </summary>
    public partial class MachineLearningResourceConfiguration
    {
        /// <summary> Initializes a new instance of <see cref="MachineLearningResourceConfiguration"/>. </summary>
        public MachineLearningResourceConfiguration()
        {
            Locations = new ChangeTrackingList<string>();
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="MachineLearningResourceConfiguration"/>. </summary>
        /// <param name="instanceCount"> Optional number of instances or nodes used by the compute target. </param>
        /// <param name="instanceType"> Optional type of VM used as supported by the compute target. </param>
        /// <param name="locations"> Locations where the job can run. </param>
        /// <param name="maxInstanceCount">
        /// Optional max allowed number of instances or nodes to be used by the compute target.
        /// For use with elastic training, currently supported by PyTorch distribution type only.
        /// </param>
        /// <param name="properties"> Additional properties bag. </param>
        internal MachineLearningResourceConfiguration(int? instanceCount, string instanceType, IList<string> locations, int? maxInstanceCount, IDictionary<string, BinaryData> properties)
        {
            InstanceCount = instanceCount;
            InstanceType = instanceType;
            Locations = locations;
            MaxInstanceCount = maxInstanceCount;
            Properties = properties;
        }

        /// <summary> Optional number of instances or nodes used by the compute target. </summary>
        public int? InstanceCount { get; set; }
        /// <summary> Optional type of VM used as supported by the compute target. </summary>
        public string InstanceType { get; set; }
        /// <summary> Locations where the job can run. </summary>
        public IList<string> Locations { get; set; }
        /// <summary>
        /// Optional max allowed number of instances or nodes to be used by the compute target.
        /// For use with elastic training, currently supported by PyTorch distribution type only.
        /// </summary>
        public int? MaxInstanceCount { get; set; }
        /// <summary>
        /// Additional properties bag.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> Properties { get; set; }
    }
}
