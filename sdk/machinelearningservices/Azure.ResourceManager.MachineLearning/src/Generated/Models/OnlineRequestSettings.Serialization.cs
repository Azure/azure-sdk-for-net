// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class OnlineRequestSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxConcurrentRequestsPerInstance))
            {
                writer.WritePropertyName("maxConcurrentRequestsPerInstance");
                writer.WriteNumberValue(MaxConcurrentRequestsPerInstance.Value);
            }
            if (Optional.IsDefined(MaxQueueWait))
            {
                writer.WritePropertyName("maxQueueWait");
                writer.WriteStringValue(MaxQueueWait.Value, "P");
            }
            if (Optional.IsDefined(RequestTimeout))
            {
                writer.WritePropertyName("requestTimeout");
                writer.WriteStringValue(RequestTimeout.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static OnlineRequestSettings DeserializeOnlineRequestSettings(JsonElement element)
        {
            Optional<int> maxConcurrentRequestsPerInstance = default;
            Optional<TimeSpan> maxQueueWait = default;
            Optional<TimeSpan> requestTimeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxConcurrentRequestsPerInstance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxConcurrentRequestsPerInstance = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxQueueWait"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxQueueWait = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("requestTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    requestTimeout = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new OnlineRequestSettings(Optional.ToNullable(maxConcurrentRequestsPerInstance), Optional.ToNullable(maxQueueWait), Optional.ToNullable(requestTimeout));
        }
    }
}
