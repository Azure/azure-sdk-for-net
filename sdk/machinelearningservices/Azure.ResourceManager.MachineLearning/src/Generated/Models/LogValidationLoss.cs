// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The LogValidationLoss. </summary>
    public readonly partial struct LogValidationLoss : IEquatable<LogValidationLoss>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LogValidationLoss"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogValidationLoss(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnableValue = "Enable";
        private const string DisableValue = "Disable";

        /// <summary> Enable compute and log validation metrics. </summary>
        public static LogValidationLoss Enable { get; } = new LogValidationLoss(EnableValue);
        /// <summary> Disable compute and log validation metrics. </summary>
        public static LogValidationLoss Disable { get; } = new LogValidationLoss(DisableValue);
        /// <summary> Determines if two <see cref="LogValidationLoss"/> values are the same. </summary>
        public static bool operator ==(LogValidationLoss left, LogValidationLoss right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogValidationLoss"/> values are not the same. </summary>
        public static bool operator !=(LogValidationLoss left, LogValidationLoss right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogValidationLoss"/>. </summary>
        public static implicit operator LogValidationLoss(string value) => new LogValidationLoss(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogValidationLoss other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogValidationLoss other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
