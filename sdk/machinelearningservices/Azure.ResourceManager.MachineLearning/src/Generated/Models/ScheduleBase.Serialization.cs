// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ScheduleBase : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EndOn))
            {
                if (EndOn != null)
                {
                    writer.WritePropertyName("endTime");
                    writer.WriteStringValue(EndOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("endTime");
                }
            }
            if (Optional.IsDefined(ScheduleStatus))
            {
                writer.WritePropertyName("scheduleStatus");
                writer.WriteStringValue(ScheduleStatus.Value.ToString());
            }
            writer.WritePropertyName("scheduleType");
            writer.WriteStringValue(ScheduleType.ToString());
            if (Optional.IsDefined(StartOn))
            {
                if (StartOn != null)
                {
                    writer.WritePropertyName("startTime");
                    writer.WriteStringValue(StartOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("startTime");
                }
            }
            if (Optional.IsDefined(TimeZone))
            {
                if (TimeZone != null)
                {
                    writer.WritePropertyName("timeZone");
                    writer.WriteStringValue(TimeZone);
                }
                else
                {
                    writer.WriteNull("timeZone");
                }
            }
            writer.WriteEndObject();
        }

        internal static ScheduleBase DeserializeScheduleBase(JsonElement element)
        {
            if (element.TryGetProperty("scheduleType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "Cron": return CronSchedule.DeserializeCronSchedule(element);
                    case "Recurrence": return RecurrenceSchedule.DeserializeRecurrenceSchedule(element);
                }
            }
            return UnknownScheduleBase.DeserializeUnknownScheduleBase(element);
        }
    }
}
