// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    public partial class ForecastingSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CountryOrRegionForHolidays))
            {
                if (CountryOrRegionForHolidays != null)
                {
                    writer.WritePropertyName("countryOrRegionForHolidays"u8);
                    writer.WriteStringValue(CountryOrRegionForHolidays);
                }
                else
                {
                    writer.WriteNull("countryOrRegionForHolidays");
                }
            }
            if (Optional.IsDefined(CvStepSize))
            {
                if (CvStepSize != null)
                {
                    writer.WritePropertyName("cvStepSize"u8);
                    writer.WriteNumberValue(CvStepSize.Value);
                }
                else
                {
                    writer.WriteNull("cvStepSize");
                }
            }
            if (Optional.IsDefined(FeatureLags))
            {
                writer.WritePropertyName("featureLags"u8);
                writer.WriteStringValue(FeatureLags.Value.ToString());
            }
            if (Optional.IsCollectionDefined(FeaturesUnknownAtForecastTime))
            {
                if (FeaturesUnknownAtForecastTime != null)
                {
                    writer.WritePropertyName("featuresUnknownAtForecastTime"u8);
                    writer.WriteStartArray();
                    foreach (var item in FeaturesUnknownAtForecastTime)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("featuresUnknownAtForecastTime");
                }
            }
            if (Optional.IsDefined(ForecastHorizon))
            {
                writer.WritePropertyName("forecastHorizon"u8);
                writer.WriteObjectValue(ForecastHorizon);
            }
            if (Optional.IsDefined(Frequency))
            {
                if (Frequency != null)
                {
                    writer.WritePropertyName("frequency"u8);
                    writer.WriteStringValue(Frequency);
                }
                else
                {
                    writer.WriteNull("frequency");
                }
            }
            if (Optional.IsDefined(Seasonality))
            {
                writer.WritePropertyName("seasonality"u8);
                writer.WriteObjectValue(Seasonality);
            }
            if (Optional.IsDefined(ShortSeriesHandlingConfig))
            {
                writer.WritePropertyName("shortSeriesHandlingConfig"u8);
                writer.WriteStringValue(ShortSeriesHandlingConfig.Value.ToString());
            }
            if (Optional.IsDefined(TargetAggregateFunction))
            {
                writer.WritePropertyName("targetAggregateFunction"u8);
                writer.WriteStringValue(TargetAggregateFunction.Value.ToString());
            }
            if (Optional.IsDefined(TargetLags))
            {
                if (TargetLags != null)
                {
                    writer.WritePropertyName("targetLags"u8);
                    writer.WriteObjectValue(TargetLags);
                }
                else
                {
                    writer.WriteNull("targetLags");
                }
            }
            if (Optional.IsDefined(TargetRollingWindowSize))
            {
                if (TargetRollingWindowSize != null)
                {
                    writer.WritePropertyName("targetRollingWindowSize"u8);
                    writer.WriteObjectValue(TargetRollingWindowSize);
                }
                else
                {
                    writer.WriteNull("targetRollingWindowSize");
                }
            }
            if (Optional.IsDefined(TimeColumnName))
            {
                if (TimeColumnName != null)
                {
                    writer.WritePropertyName("timeColumnName"u8);
                    writer.WriteStringValue(TimeColumnName);
                }
                else
                {
                    writer.WriteNull("timeColumnName");
                }
            }
            if (Optional.IsCollectionDefined(TimeSeriesIdColumnNames))
            {
                if (TimeSeriesIdColumnNames != null)
                {
                    writer.WritePropertyName("timeSeriesIdColumnNames"u8);
                    writer.WriteStartArray();
                    foreach (var item in TimeSeriesIdColumnNames)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("timeSeriesIdColumnNames");
                }
            }
            if (Optional.IsDefined(UseStl))
            {
                writer.WritePropertyName("useStl"u8);
                writer.WriteStringValue(UseStl.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static ForecastingSettings DeserializeForecastingSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> countryOrRegionForHolidays = default;
            Optional<int?> cvStepSize = default;
            Optional<MachineLearningFeatureLag> featureLags = default;
            Optional<IList<string>> featuresUnknownAtForecastTime = default;
            Optional<ForecastHorizon> forecastHorizon = default;
            Optional<string> frequency = default;
            Optional<ForecastingSeasonality> seasonality = default;
            Optional<MachineLearningShortSeriesHandlingConfiguration> shortSeriesHandlingConfig = default;
            Optional<TargetAggregationFunction> targetAggregateFunction = default;
            Optional<TargetLags> targetLags = default;
            Optional<TargetRollingWindowSize> targetRollingWindowSize = default;
            Optional<string> timeColumnName = default;
            Optional<IList<string>> timeSeriesIdColumnNames = default;
            Optional<MachineLearningUseStl> useStl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("countryOrRegionForHolidays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        countryOrRegionForHolidays = null;
                        continue;
                    }
                    countryOrRegionForHolidays = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cvStepSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cvStepSize = null;
                        continue;
                    }
                    cvStepSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("featureLags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    featureLags = new MachineLearningFeatureLag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("featuresUnknownAtForecastTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        featuresUnknownAtForecastTime = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    featuresUnknownAtForecastTime = array;
                    continue;
                }
                if (property.NameEquals("forecastHorizon"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    forecastHorizon = ForecastHorizon.DeserializeForecastHorizon(property.Value);
                    continue;
                }
                if (property.NameEquals("frequency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        frequency = null;
                        continue;
                    }
                    frequency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("seasonality"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    seasonality = ForecastingSeasonality.DeserializeForecastingSeasonality(property.Value);
                    continue;
                }
                if (property.NameEquals("shortSeriesHandlingConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shortSeriesHandlingConfig = new MachineLearningShortSeriesHandlingConfiguration(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetAggregateFunction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetAggregateFunction = new TargetAggregationFunction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetLags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetLags = null;
                        continue;
                    }
                    targetLags = TargetLags.DeserializeTargetLags(property.Value);
                    continue;
                }
                if (property.NameEquals("targetRollingWindowSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetRollingWindowSize = null;
                        continue;
                    }
                    targetRollingWindowSize = TargetRollingWindowSize.DeserializeTargetRollingWindowSize(property.Value);
                    continue;
                }
                if (property.NameEquals("timeColumnName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        timeColumnName = null;
                        continue;
                    }
                    timeColumnName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timeSeriesIdColumnNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        timeSeriesIdColumnNames = null;
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    timeSeriesIdColumnNames = array;
                    continue;
                }
                if (property.NameEquals("useStl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    useStl = new MachineLearningUseStl(property.Value.GetString());
                    continue;
                }
            }
            return new ForecastingSettings(countryOrRegionForHolidays.Value, Optional.ToNullable(cvStepSize), Optional.ToNullable(featureLags), Optional.ToList(featuresUnknownAtForecastTime), forecastHorizon.Value, frequency.Value, seasonality.Value, Optional.ToNullable(shortSeriesHandlingConfig), Optional.ToNullable(targetAggregateFunction), targetLags.Value, targetRollingWindowSize.Value, timeColumnName.Value, Optional.ToList(timeSeriesIdColumnNames), Optional.ToNullable(useStl));
        }
    }
}
