// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> The ServerlessEndpointResourceProperties. </summary>
    public partial class ServerlessEndpointResourceProperties : EndpointResourceProperties
    {
        /// <summary> Initializes a new instance of <see cref="ServerlessEndpointResourceProperties"/>. </summary>
        public ServerlessEndpointResourceProperties()
        {
            EndpointType = EndpointType.ServerlessEndpoint;
        }

        /// <summary> Initializes a new instance of <see cref="ServerlessEndpointResourceProperties"/>. </summary>
        /// <param name="associatedResourceId"> Byo resource id for creating the built-in model service endpoints. </param>
        /// <param name="deployments"> Deployments info. </param>
        /// <param name="endpointType"> Type of the endpoint. </param>
        /// <param name="endpointUri"> Uri of the endpoint. </param>
        /// <param name="failureReason"> The failure reason if the creation failed. </param>
        /// <param name="location">
        /// Location of the endpoint.
        /// Since input dto and when parse endpoint resource share the same contract
        /// this Location field is just for parse the endpoint resource info
        /// we won't let customer specify the endpoint resource location since we will create it the same location as workspace
        /// </param>
        /// <param name="name"> Name of the endpoint. </param>
        /// <param name="provisioningState"> Read-only provision state status property. </param>
        /// <param name="shouldCreateAiServicesEndpoint"> Whether the proxy (non-byo) endpoint is a regular endpoint or a OneKeyV2 AI services account endpoint. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="authMode"></param>
        /// <param name="capacityReservation"></param>
        /// <param name="contentSafety"></param>
        /// <param name="endpointState"> State of the Serverless Endpoint. </param>
        /// <param name="inferenceEndpoint"></param>
        /// <param name="marketplaceSubscriptionId"></param>
        /// <param name="metadata"> Anything. </param>
        /// <param name="modelSettings"></param>
        /// <param name="offer"></param>
        internal ServerlessEndpointResourceProperties(ResourceIdentifier associatedResourceId, IList<EndpointDeploymentResourcePropertiesBasicResourceData> deployments, EndpointType endpointType, Uri endpointUri, string failureReason, AzureLocation? location, string name, DefaultResourceProvisioningState? provisioningState, bool? shouldCreateAiServicesEndpoint, IDictionary<string, BinaryData> serializedAdditionalRawData, ServerlessInferenceEndpointAuthMode? authMode, ServerlessEndpointCapacityReservation capacityReservation, ServerlessEndpointContentSafety contentSafety, ServerlessEndpointState? endpointState, ServerlessEndpointInferenceEndpoint inferenceEndpoint, string marketplaceSubscriptionId, BinaryData metadata, ServerlessEndpointModelSettings modelSettings, ServerlessOffer offer) : base(associatedResourceId, deployments, endpointType, endpointUri, failureReason, location, name, provisioningState, shouldCreateAiServicesEndpoint, serializedAdditionalRawData)
        {
            AuthMode = authMode;
            CapacityReservation = capacityReservation;
            ContentSafety = contentSafety;
            EndpointState = endpointState;
            InferenceEndpoint = inferenceEndpoint;
            MarketplaceSubscriptionId = marketplaceSubscriptionId;
            Metadata = metadata;
            ModelSettings = modelSettings;
            Offer = offer;
            EndpointType = endpointType;
        }

        /// <summary> Gets or sets the auth mode. </summary>
        public ServerlessInferenceEndpointAuthMode? AuthMode { get; set; }
        /// <summary> Gets or sets the capacity reservation. </summary>
        public ServerlessEndpointCapacityReservation CapacityReservation { get; set; }
        /// <summary> Gets or sets the content safety. </summary>
        internal ServerlessEndpointContentSafety ContentSafety { get; set; }
        /// <summary> Specifies the status of content safety. </summary>
        public ContentSafetyStatus? ContentSafetyStatus
        {
            get => ContentSafety is null ? default(ContentSafetyStatus?) : ContentSafety.ContentSafetyStatus;
            set
            {
                ContentSafety = value.HasValue ? new ServerlessEndpointContentSafety(value.Value) : null;
            }
        }

        /// <summary> State of the Serverless Endpoint. </summary>
        public ServerlessEndpointState? EndpointState { get; set; }
        /// <summary> Gets or sets the inference endpoint. </summary>
        public ServerlessEndpointInferenceEndpoint InferenceEndpoint { get; set; }
        /// <summary> Gets or sets the marketplace subscription id. </summary>
        public string MarketplaceSubscriptionId { get; set; }
        /// <summary>
        /// Anything
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Metadata { get; set; }
        /// <summary> Gets or sets the model settings. </summary>
        internal ServerlessEndpointModelSettings ModelSettings { get; set; }
        /// <summary> Gets or sets the model id. </summary>
        public string ModelId
        {
            get => ModelSettings is null ? default : ModelSettings.ModelId;
            set => ModelSettings = new ServerlessEndpointModelSettings(value);
        }

        /// <summary> Gets or sets the offer. </summary>
        public ServerlessOffer Offer { get; set; }
    }
}
