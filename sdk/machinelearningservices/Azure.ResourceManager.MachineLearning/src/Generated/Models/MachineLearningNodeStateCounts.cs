// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// Counts of various compute node states on the amlCompute.
    /// Serialized Name: NodeStateCounts
    /// </summary>
    public partial class MachineLearningNodeStateCounts
    {
        /// <summary> Initializes a new instance of MachineLearningNodeStateCounts. </summary>
        internal MachineLearningNodeStateCounts()
        {
        }

        /// <summary> Initializes a new instance of MachineLearningNodeStateCounts. </summary>
        /// <param name="idleNodeCount">
        /// Number of compute nodes in idle state.
        /// Serialized Name: NodeStateCounts.idleNodeCount
        /// </param>
        /// <param name="runningNodeCount">
        /// Number of compute nodes which are running jobs.
        /// Serialized Name: NodeStateCounts.runningNodeCount
        /// </param>
        /// <param name="preparingNodeCount">
        /// Number of compute nodes which are being prepared.
        /// Serialized Name: NodeStateCounts.preparingNodeCount
        /// </param>
        /// <param name="unusableNodeCount">
        /// Number of compute nodes which are in unusable state.
        /// Serialized Name: NodeStateCounts.unusableNodeCount
        /// </param>
        /// <param name="leavingNodeCount">
        /// Number of compute nodes which are leaving the amlCompute.
        /// Serialized Name: NodeStateCounts.leavingNodeCount
        /// </param>
        /// <param name="preemptedNodeCount">
        /// Number of compute nodes which are in preempted state.
        /// Serialized Name: NodeStateCounts.preemptedNodeCount
        /// </param>
        internal MachineLearningNodeStateCounts(int? idleNodeCount, int? runningNodeCount, int? preparingNodeCount, int? unusableNodeCount, int? leavingNodeCount, int? preemptedNodeCount)
        {
            IdleNodeCount = idleNodeCount;
            RunningNodeCount = runningNodeCount;
            PreparingNodeCount = preparingNodeCount;
            UnusableNodeCount = unusableNodeCount;
            LeavingNodeCount = leavingNodeCount;
            PreemptedNodeCount = preemptedNodeCount;
        }

        /// <summary>
        /// Number of compute nodes in idle state.
        /// Serialized Name: NodeStateCounts.idleNodeCount
        /// </summary>
        public int? IdleNodeCount { get; }
        /// <summary>
        /// Number of compute nodes which are running jobs.
        /// Serialized Name: NodeStateCounts.runningNodeCount
        /// </summary>
        public int? RunningNodeCount { get; }
        /// <summary>
        /// Number of compute nodes which are being prepared.
        /// Serialized Name: NodeStateCounts.preparingNodeCount
        /// </summary>
        public int? PreparingNodeCount { get; }
        /// <summary>
        /// Number of compute nodes which are in unusable state.
        /// Serialized Name: NodeStateCounts.unusableNodeCount
        /// </summary>
        public int? UnusableNodeCount { get; }
        /// <summary>
        /// Number of compute nodes which are leaving the amlCompute.
        /// Serialized Name: NodeStateCounts.leavingNodeCount
        /// </summary>
        public int? LeavingNodeCount { get; }
        /// <summary>
        /// Number of compute nodes which are in preempted state.
        /// Serialized Name: NodeStateCounts.preemptedNodeCount
        /// </summary>
        public int? PreemptedNodeCount { get; }
    }
}
