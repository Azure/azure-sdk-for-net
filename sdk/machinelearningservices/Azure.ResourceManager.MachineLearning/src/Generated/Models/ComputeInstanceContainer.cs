// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary>
    /// Defines an Aml Instance container.
    /// Serialized Name: ComputeInstanceContainer
    /// </summary>
    public partial class ComputeInstanceContainer
    {
        /// <summary> Initializes a new instance of ComputeInstanceContainer. </summary>
        internal ComputeInstanceContainer()
        {
            Services = new ChangeTrackingList<BinaryData>();
        }

        /// <summary> Initializes a new instance of ComputeInstanceContainer. </summary>
        /// <param name="name">
        /// Name of the ComputeInstance container.
        /// Serialized Name: ComputeInstanceContainer.name
        /// </param>
        /// <param name="autosave">
        /// Auto save settings.
        /// Serialized Name: ComputeInstanceContainer.autosave
        /// </param>
        /// <param name="gpu">
        /// Information of GPU.
        /// Serialized Name: ComputeInstanceContainer.gpu
        /// </param>
        /// <param name="network">
        /// network of this container.
        /// Serialized Name: ComputeInstanceContainer.network
        /// </param>
        /// <param name="environment">
        /// Environment information of this container.
        /// Serialized Name: ComputeInstanceContainer.environment
        /// </param>
        /// <param name="services">
        /// services of this containers.
        /// Serialized Name: ComputeInstanceContainer.services
        /// </param>
        internal ComputeInstanceContainer(string name, Autosave? autosave, string gpu, Network? network, ComputeInstanceEnvironmentInfo environment, IReadOnlyList<BinaryData> services)
        {
            Name = name;
            Autosave = autosave;
            Gpu = gpu;
            Network = network;
            Environment = environment;
            Services = services;
        }

        /// <summary>
        /// Name of the ComputeInstance container.
        /// Serialized Name: ComputeInstanceContainer.name
        /// </summary>
        public string Name { get; }
        /// <summary>
        /// Auto save settings.
        /// Serialized Name: ComputeInstanceContainer.autosave
        /// </summary>
        public Autosave? Autosave { get; }
        /// <summary>
        /// Information of GPU.
        /// Serialized Name: ComputeInstanceContainer.gpu
        /// </summary>
        public string Gpu { get; }
        /// <summary>
        /// network of this container.
        /// Serialized Name: ComputeInstanceContainer.network
        /// </summary>
        public Network? Network { get; }
        /// <summary>
        /// Environment information of this container.
        /// Serialized Name: ComputeInstanceContainer.environment
        /// </summary>
        public ComputeInstanceEnvironmentInfo Environment { get; }
        /// <summary>
        /// services of this containers.
        /// Serialized Name: ComputeInstanceContainer.services
        /// <para>
        /// To assign an object to the element of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyList<BinaryData> Services { get; }
    }
}
