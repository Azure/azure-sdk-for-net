// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure;
using Azure.Core;
using Azure.ResourceManager.MachineLearning;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.MachineLearning.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class MachineLearningModelFactory
    {
        /// <summary> Initializes a new instance of MachineLearningError. </summary>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.MachineLearningError"/> instance for mocking. </returns>
        public static MachineLearningError MachineLearningError(ResponseError error = null)
        {
            return new MachineLearningError(error);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="sku"> The sku of the workspace. </param>
        /// <param name="workspaceId"> The immutable id associated with this workspace. </param>
        /// <param name="description"> The description of this workspace. </param>
        /// <param name="friendlyName"> The friendly name for this workspace. This name in mutable. </param>
        /// <param name="keyVault"> ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been created. </param>
        /// <param name="applicationInsights"> ARM id of the application insights associated with this workspace. </param>
        /// <param name="containerRegistry"> ARM id of the container registry associated with this workspace. </param>
        /// <param name="storageAccount"> ARM id of the storage account associated with this workspace. This cannot be changed once the workspace has been created. </param>
        /// <param name="discoveryUri"> Url for the discovery service to identify regional endpoints for machine learning experimentation services. </param>
        /// <param name="provisioningState"> The current deployment state of workspace resource. The provisioningState is to indicate states for resource provisioning. </param>
        /// <param name="encryption"> The encryption settings of Azure ML workspace. </param>
        /// <param name="isHbiWorkspace"> The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service. </param>
        /// <param name="serviceProvisionedResourceGroup"> The name of the managed resource group created by workspace RP in customer subscription if the workspace is CMK workspace. </param>
        /// <param name="privateLinkCount"> Count of private connections in the workspace. </param>
        /// <param name="imageBuildCompute"> The compute name for image build. </param>
        /// <param name="allowPublicAccessWhenBehindVnet"> The flag to indicate whether to allow public access when behind VNet. </param>
        /// <param name="publicNetworkAccess"> Whether requests from Public Network are allowed. </param>
        /// <param name="privateEndpointConnections"> The list of private endpoint connections in the workspace. </param>
        /// <param name="sharedPrivateLinkResources"> The list of shared private link resources in this workspace. </param>
        /// <param name="notebookInfo"> The notebook info of Azure ML workspace. </param>
        /// <param name="cosmosDbCollectionsThroughput"> The service managed resource settings. </param>
        /// <param name="primaryUserAssignedIdentity"> The user assigned identity resource id that represents the workspace identity. </param>
        /// <param name="tenantId"> The tenant id associated with this workspace. </param>
        /// <param name="isStorageHnsEnabled"> If the storage associated with the workspace has hierarchical namespace(HNS) enabled. </param>
        /// <param name="mlFlowTrackingUri"> The URI associated with this workspace that machine learning flow must point at to set up tracking. </param>
        /// <param name="isV1LegacyMode"> Enabling v1_legacy_mode may prevent you from using features provided by the v2 API. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningWorkspaceData"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceData MachineLearningWorkspaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, MachineLearningSku sku = null, string workspaceId = null, string description = null, string friendlyName = null, string keyVault = null, string applicationInsights = null, string containerRegistry = null, string storageAccount = null, Uri discoveryUri = null, MachineLearningProvisioningState? provisioningState = null, MachineLearningEncryptionSetting encryption = null, bool? isHbiWorkspace = null, string serviceProvisionedResourceGroup = null, int? privateLinkCount = null, string imageBuildCompute = null, bool? allowPublicAccessWhenBehindVnet = null, MachineLearningPublicNetworkAccess? publicNetworkAccess = null, IEnumerable<MachineLearningPrivateEndpointConnectionData> privateEndpointConnections = null, IEnumerable<MachineLearningSharedPrivateLinkResource> sharedPrivateLinkResources = null, MachineLearningNotebookResourceInfo notebookInfo = null, int? cosmosDbCollectionsThroughput = null, string primaryUserAssignedIdentity = null, Guid? tenantId = null, bool? isStorageHnsEnabled = null, Uri mlFlowTrackingUri = null, bool? isV1LegacyMode = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<MachineLearningPrivateEndpointConnectionData>();
            sharedPrivateLinkResources ??= new List<MachineLearningSharedPrivateLinkResource>();

            return new MachineLearningWorkspaceData(id, name, resourceType, systemData, tags, location, identity, sku, workspaceId, description, friendlyName, keyVault, applicationInsights, containerRegistry, storageAccount, discoveryUri, provisioningState, encryption, isHbiWorkspace, serviceProvisionedResourceGroup, privateLinkCount, imageBuildCompute, allowPublicAccessWhenBehindVnet, publicNetworkAccess, privateEndpointConnections?.ToList(), sharedPrivateLinkResources?.ToList(), notebookInfo, cosmosDbCollectionsThroughput != null ? new ServiceManagedResourcesSettings(new CosmosDbSettings(cosmosDbCollectionsThroughput)) : null, primaryUserAssignedIdentity, tenantId, isStorageHnsEnabled, mlFlowTrackingUri, isV1LegacyMode);
        }

        /// <summary> Initializes a new instance of MachineLearningEncryptionSetting. </summary>
        /// <param name="status"> Indicates whether or not the encryption is enabled for the workspace. </param>
        /// <param name="userAssignedIdentity"> The identity that will be used to access the key vault for encryption at rest. </param>
        /// <param name="keyVaultProperties"> Customer Key vault properties. </param>
        /// <returns> A new <see cref="Models.MachineLearningEncryptionSetting"/> instance for mocking. </returns>
        public static MachineLearningEncryptionSetting MachineLearningEncryptionSetting(MachineLearningEncryptionStatus status = default, ResourceIdentifier userAssignedIdentity = null, MachineLearningEncryptionKeyVaultProperties keyVaultProperties = null)
        {
            return new MachineLearningEncryptionSetting(status, userAssignedIdentity != null ? new MachineLearningCmkIdentity(userAssignedIdentity) : null, keyVaultProperties);
        }

        /// <summary> Initializes a new instance of MachineLearningEncryptionKeyVaultProperties. </summary>
        /// <param name="keyVaultArmId"> The ArmId of the keyVault where the customer owned encryption key is present. </param>
        /// <param name="keyIdentifier"> Key vault uri to access the encryption key. </param>
        /// <param name="identityClientId"> For future use - The client id of the identity which will be used to access key vault. </param>
        /// <returns> A new <see cref="Models.MachineLearningEncryptionKeyVaultProperties"/> instance for mocking. </returns>
        public static MachineLearningEncryptionKeyVaultProperties MachineLearningEncryptionKeyVaultProperties(ResourceIdentifier keyVaultArmId = null, string keyIdentifier = null, string identityClientId = null)
        {
            return new MachineLearningEncryptionKeyVaultProperties(keyVaultArmId, keyIdentifier, identityClientId);
        }

        /// <summary> Initializes a new instance of MachineLearningPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="sku"> The sku of the workspace. </param>
        /// <param name="privateEndpoint"> The resource of private end point. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static MachineLearningPrivateEndpointConnectionData MachineLearningPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, MachineLearningSku sku = null, MachineLearningPrivateEndpoint privateEndpoint = null, MachineLearningPrivateLinkServiceConnectionState connectionState = null, MachineLearningPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MachineLearningPrivateEndpointConnectionData(id, name, resourceType, systemData, tags, location, identity, sku, privateEndpoint, connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of MachineLearningPrivateEndpoint. </summary>
        /// <param name="id"> The ARM identifier for Private Endpoint. </param>
        /// <param name="subnetArmId"> The ARM identifier for Subnet resource that private endpoint links to. </param>
        /// <returns> A new <see cref="Models.MachineLearningPrivateEndpoint"/> instance for mocking. </returns>
        public static MachineLearningPrivateEndpoint MachineLearningPrivateEndpoint(ResourceIdentifier id = null, ResourceIdentifier subnetArmId = null)
        {
            return new MachineLearningPrivateEndpoint(id, subnetArmId);
        }

        /// <summary> Initializes a new instance of MachineLearningPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.MachineLearningPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static MachineLearningPrivateLinkServiceConnectionState MachineLearningPrivateLinkServiceConnectionState(MachineLearningPrivateEndpointServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new MachineLearningPrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of MachineLearningSku. </summary>
        /// <param name="name"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
        /// <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
        /// <param name="size"> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </param>
        /// <param name="family"> If the service has different generations of hardware, for the same SKU, then that can be captured here. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <returns> A new <see cref="Models.MachineLearningSku"/> instance for mocking. </returns>
        public static MachineLearningSku MachineLearningSku(string name = null, MachineLearningSkuTier? tier = null, string size = null, string family = null, int? capacity = null)
        {
            return new MachineLearningSku(name, tier, size, family, capacity);
        }

        /// <summary> Initializes a new instance of MachineLearningSharedPrivateLinkResource. </summary>
        /// <param name="name"> Unique name of the private link. </param>
        /// <param name="privateLinkResourceId"> The resource id that private link links to. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requestMessage"> Request message. </param>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <returns> A new <see cref="Models.MachineLearningSharedPrivateLinkResource"/> instance for mocking. </returns>
        public static MachineLearningSharedPrivateLinkResource MachineLearningSharedPrivateLinkResource(string name = null, ResourceIdentifier privateLinkResourceId = null, string groupId = null, string requestMessage = null, MachineLearningPrivateEndpointServiceConnectionStatus? status = null)
        {
            return new MachineLearningSharedPrivateLinkResource(name, privateLinkResourceId, groupId, requestMessage, status);
        }

        /// <summary> Initializes a new instance of MachineLearningNotebookResourceInfo. </summary>
        /// <param name="fqdn"></param>
        /// <param name="resourceId"> the data plane resourceId that used to initialize notebook component. </param>
        /// <param name="notebookPreparationError"> The error that occurs when preparing notebook. </param>
        /// <returns> A new <see cref="Models.MachineLearningNotebookResourceInfo"/> instance for mocking. </returns>
        public static MachineLearningNotebookResourceInfo MachineLearningNotebookResourceInfo(string fqdn = null, string resourceId = null, MachineLearningNotebookPreparationError notebookPreparationError = null)
        {
            return new MachineLearningNotebookResourceInfo(fqdn, resourceId, notebookPreparationError);
        }

        /// <summary> Initializes a new instance of MachineLearningNotebookPreparationError. </summary>
        /// <param name="errorMessage"></param>
        /// <param name="statusCode"></param>
        /// <returns> A new <see cref="Models.MachineLearningNotebookPreparationError"/> instance for mocking. </returns>
        public static MachineLearningNotebookPreparationError MachineLearningNotebookPreparationError(string errorMessage = null, int? statusCode = null)
        {
            return new MachineLearningNotebookPreparationError(errorMessage, statusCode);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceDiagnoseResult. </summary>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceDiagnoseResult"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceDiagnoseResult MachineLearningWorkspaceDiagnoseResult(MachineLearningDiagnoseResultValue value = null)
        {
            return new MachineLearningWorkspaceDiagnoseResult(value);
        }

        /// <summary> Initializes a new instance of MachineLearningDiagnoseResultValue. </summary>
        /// <param name="userDefinedRouteResults"></param>
        /// <param name="networkSecurityRuleResults"></param>
        /// <param name="resourceLockResults"></param>
        /// <param name="dnsResolutionResults"></param>
        /// <param name="storageAccountResults"></param>
        /// <param name="keyVaultResults"></param>
        /// <param name="containerRegistryResults"></param>
        /// <param name="applicationInsightsResults"></param>
        /// <param name="otherResults"></param>
        /// <returns> A new <see cref="Models.MachineLearningDiagnoseResultValue"/> instance for mocking. </returns>
        public static MachineLearningDiagnoseResultValue MachineLearningDiagnoseResultValue(IEnumerable<MachineLearningDiagnoseResult> userDefinedRouteResults = null, IEnumerable<MachineLearningDiagnoseResult> networkSecurityRuleResults = null, IEnumerable<MachineLearningDiagnoseResult> resourceLockResults = null, IEnumerable<MachineLearningDiagnoseResult> dnsResolutionResults = null, IEnumerable<MachineLearningDiagnoseResult> storageAccountResults = null, IEnumerable<MachineLearningDiagnoseResult> keyVaultResults = null, IEnumerable<MachineLearningDiagnoseResult> containerRegistryResults = null, IEnumerable<MachineLearningDiagnoseResult> applicationInsightsResults = null, IEnumerable<MachineLearningDiagnoseResult> otherResults = null)
        {
            userDefinedRouteResults ??= new List<MachineLearningDiagnoseResult>();
            networkSecurityRuleResults ??= new List<MachineLearningDiagnoseResult>();
            resourceLockResults ??= new List<MachineLearningDiagnoseResult>();
            dnsResolutionResults ??= new List<MachineLearningDiagnoseResult>();
            storageAccountResults ??= new List<MachineLearningDiagnoseResult>();
            keyVaultResults ??= new List<MachineLearningDiagnoseResult>();
            containerRegistryResults ??= new List<MachineLearningDiagnoseResult>();
            applicationInsightsResults ??= new List<MachineLearningDiagnoseResult>();
            otherResults ??= new List<MachineLearningDiagnoseResult>();

            return new MachineLearningDiagnoseResultValue(userDefinedRouteResults?.ToList(), networkSecurityRuleResults?.ToList(), resourceLockResults?.ToList(), dnsResolutionResults?.ToList(), storageAccountResults?.ToList(), keyVaultResults?.ToList(), containerRegistryResults?.ToList(), applicationInsightsResults?.ToList(), otherResults?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningDiagnoseResult. </summary>
        /// <param name="code"> Code for workspace setup error. </param>
        /// <param name="level"> Level of workspace setup error. </param>
        /// <param name="message"> Message of workspace setup error. </param>
        /// <returns> A new <see cref="Models.MachineLearningDiagnoseResult"/> instance for mocking. </returns>
        public static MachineLearningDiagnoseResult MachineLearningDiagnoseResult(string code = null, MachineLearningDiagnoseResultLevel? level = null, string message = null)
        {
            return new MachineLearningDiagnoseResult(code, level, message);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceGetKeysResult. </summary>
        /// <param name="userStorageKey"></param>
        /// <param name="userStorageResourceId"></param>
        /// <param name="appInsightsInstrumentationKey"></param>
        /// <param name="containerRegistryCredentials"></param>
        /// <param name="notebookAccessKeys"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceGetKeysResult"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceGetKeysResult MachineLearningWorkspaceGetKeysResult(string userStorageKey = null, string userStorageResourceId = null, string appInsightsInstrumentationKey = null, MachineLearningContainerRegistryCredentials containerRegistryCredentials = null, MachineLearningWorkspaceGetNotebookKeysResult notebookAccessKeys = null)
        {
            return new MachineLearningWorkspaceGetKeysResult(userStorageKey, userStorageResourceId, appInsightsInstrumentationKey, containerRegistryCredentials, notebookAccessKeys);
        }

        /// <summary> Initializes a new instance of MachineLearningContainerRegistryCredentials. </summary>
        /// <param name="location"></param>
        /// <param name="username"></param>
        /// <param name="passwords"></param>
        /// <returns> A new <see cref="Models.MachineLearningContainerRegistryCredentials"/> instance for mocking. </returns>
        public static MachineLearningContainerRegistryCredentials MachineLearningContainerRegistryCredentials(AzureLocation? location = null, string username = null, IEnumerable<MachineLearningPasswordDetail> passwords = null)
        {
            passwords ??= new List<MachineLearningPasswordDetail>();

            return new MachineLearningContainerRegistryCredentials(location, username, passwords?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningPasswordDetail. </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.MachineLearningPasswordDetail"/> instance for mocking. </returns>
        public static MachineLearningPasswordDetail MachineLearningPasswordDetail(string name = null, string value = null)
        {
            return new MachineLearningPasswordDetail(name, value);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceGetNotebookKeysResult. </summary>
        /// <param name="primaryAccessKey"></param>
        /// <param name="secondaryAccessKey"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceGetNotebookKeysResult"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceGetNotebookKeysResult MachineLearningWorkspaceGetNotebookKeysResult(string primaryAccessKey = null, string secondaryAccessKey = null)
        {
            return new MachineLearningWorkspaceGetNotebookKeysResult(primaryAccessKey, secondaryAccessKey);
        }

        /// <summary> Initializes a new instance of MachineLearningUsage. </summary>
        /// <param name="id"> Specifies the resource ID. </param>
        /// <param name="amlWorkspaceLocation"> Region of the AML workspace in the id. </param>
        /// <param name="usageType"> Specifies the resource type. </param>
        /// <param name="unit"> An enum describing the unit of usage measurement. </param>
        /// <param name="currentValue"> The current usage of the resource. </param>
        /// <param name="limit"> The maximum permitted usage of the resource. </param>
        /// <param name="name"> The name of the type of usage. </param>
        /// <returns> A new <see cref="Models.MachineLearningUsage"/> instance for mocking. </returns>
        public static MachineLearningUsage MachineLearningUsage(string id = null, string amlWorkspaceLocation = null, string usageType = null, MachineLearningUsageUnit? unit = null, long? currentValue = null, long? limit = null, MachineLearningUsageName name = null)
        {
            return new MachineLearningUsage(id, amlWorkspaceLocation, usageType, unit, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of MachineLearningUsageName. </summary>
        /// <param name="value"> The name of the resource. </param>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <returns> A new <see cref="Models.MachineLearningUsageName"/> instance for mocking. </returns>
        public static MachineLearningUsageName MachineLearningUsageName(string value = null, string localizedValue = null)
        {
            return new MachineLearningUsageName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of MachineLearningVmSize. </summary>
        /// <param name="name"> The name of the virtual machine size. </param>
        /// <param name="family"> The family name of the virtual machine size. </param>
        /// <param name="vCpus"> The number of vCPUs supported by the virtual machine size. </param>
        /// <param name="gpus"> The number of gPUs supported by the virtual machine size. </param>
        /// <param name="osVhdSizeMB"> The OS VHD disk size, in MB, allowed by the virtual machine size. </param>
        /// <param name="maxResourceVolumeMB"> The resource volume size, in MB, allowed by the virtual machine size. </param>
        /// <param name="memoryGB"> The amount of memory, in GB, supported by the virtual machine size. </param>
        /// <param name="lowPriorityCapable"> Specifies if the virtual machine size supports low priority VMs. </param>
        /// <param name="isPremiumIOSupported"> Specifies if the virtual machine size supports premium IO. </param>
        /// <param name="estimatedVmPrices"> The estimated price information for using a VM. </param>
        /// <param name="supportedComputeTypes"> Specifies the compute types supported by the virtual machine size. </param>
        /// <returns> A new <see cref="Models.MachineLearningVmSize"/> instance for mocking. </returns>
        public static MachineLearningVmSize MachineLearningVmSize(string name = null, string family = null, int? vCpus = null, int? gpus = null, int? osVhdSizeMB = null, int? maxResourceVolumeMB = null, double? memoryGB = null, bool? lowPriorityCapable = null, bool? isPremiumIOSupported = null, MachineLearningEstimatedVmPrices estimatedVmPrices = null, IEnumerable<string> supportedComputeTypes = null)
        {
            supportedComputeTypes ??= new List<string>();

            return new MachineLearningVmSize(name, family, vCpus, gpus, osVhdSizeMB, maxResourceVolumeMB, memoryGB, lowPriorityCapable, isPremiumIOSupported, estimatedVmPrices, supportedComputeTypes?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningEstimatedVmPrices. </summary>
        /// <param name="billingCurrency"> Three lettered code specifying the currency of the VM price. Example: USD. </param>
        /// <param name="unitOfMeasure"> The unit of time measurement for the specified VM price. Example: OneHour. </param>
        /// <param name="values"> The list of estimated prices for using a VM of a particular OS type, tier, etc. </param>
        /// <returns> A new <see cref="Models.MachineLearningEstimatedVmPrices"/> instance for mocking. </returns>
        public static MachineLearningEstimatedVmPrices MachineLearningEstimatedVmPrices(MachineLearningBillingCurrency billingCurrency = default, MachineLearningUnitOfMeasure unitOfMeasure = default, IEnumerable<MachineLearningEstimatedVmPrice> values = null)
        {
            values ??= new List<MachineLearningEstimatedVmPrice>();

            return new MachineLearningEstimatedVmPrices(billingCurrency, unitOfMeasure, values?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningEstimatedVmPrice. </summary>
        /// <param name="retailPrice"> The price charged for using the VM. </param>
        /// <param name="osType"> Operating system type used by the VM. </param>
        /// <param name="vmTier"> The type of the VM. </param>
        /// <returns> A new <see cref="Models.MachineLearningEstimatedVmPrice"/> instance for mocking. </returns>
        public static MachineLearningEstimatedVmPrice MachineLearningEstimatedVmPrice(double retailPrice = default, MachineLearningVmPriceOSType osType = default, MachineLearningVmTier vmTier = default)
        {
            return new MachineLearningEstimatedVmPrice(retailPrice, osType, vmTier);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceQuotaUpdate. </summary>
        /// <param name="id"> Specifies the resource ID. </param>
        /// <param name="updateWorkspaceQuotasType"> Specifies the resource type. </param>
        /// <param name="limit"> The maximum permitted quota of the resource. </param>
        /// <param name="unit"> An enum describing the unit of quota measurement. </param>
        /// <param name="status"> Status of update workspace quota. </param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceQuotaUpdate"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceQuotaUpdate MachineLearningWorkspaceQuotaUpdate(string id = null, string updateWorkspaceQuotasType = null, long? limit = null, MachineLearningQuotaUnit? unit = null, MachineLearningWorkspaceQuotaStatus? status = null)
        {
            return new MachineLearningWorkspaceQuotaUpdate(id, updateWorkspaceQuotasType, limit, unit, status);
        }

        /// <summary> Initializes a new instance of MachineLearningResourceQuota. </summary>
        /// <param name="id"> Specifies the resource ID. </param>
        /// <param name="amlWorkspaceLocation"> Region of the AML workspace in the id. </param>
        /// <param name="resourceQuotaType"> Specifies the resource type. </param>
        /// <param name="name"> Name of the resource. </param>
        /// <param name="limit"> The maximum permitted quota of the resource. </param>
        /// <param name="unit"> An enum describing the unit of quota measurement. </param>
        /// <returns> A new <see cref="Models.MachineLearningResourceQuota"/> instance for mocking. </returns>
        public static MachineLearningResourceQuota MachineLearningResourceQuota(string id = null, string amlWorkspaceLocation = null, string resourceQuotaType = null, MachineLearningResourceName name = null, long? limit = null, MachineLearningQuotaUnit? unit = null)
        {
            return new MachineLearningResourceQuota(id, amlWorkspaceLocation, resourceQuotaType, name, limit, unit);
        }

        /// <summary> Initializes a new instance of MachineLearningResourceName. </summary>
        /// <param name="value"> The name of the resource. </param>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <returns> A new <see cref="Models.MachineLearningResourceName"/> instance for mocking. </returns>
        public static MachineLearningResourceName MachineLearningResourceName(string value = null, string localizedValue = null)
        {
            return new MachineLearningResourceName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="sku"> The sku of the workspace. </param>
        /// <param name="properties">
        /// Compute properties
        /// Please note <see cref="MachineLearningComputeProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAksCompute"/>, <see cref="AmlCompute"/>, <see cref="MachineLearningComputeInstance"/>, <see cref="MachineLearningDataFactoryCompute"/>, <see cref="MachineLearningDataLakeAnalytics"/>, <see cref="MachineLearningDatabricksCompute"/>, <see cref="MachineLearningHDInsightCompute"/>, <see cref="MachineLearningKubernetesCompute"/>, <see cref="MachineLearningSynapseSpark"/> and <see cref="MachineLearningVirtualMachineCompute"/>.
        /// </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningComputeData"/> instance for mocking. </returns>
        public static MachineLearningComputeData MachineLearningComputeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, MachineLearningSku sku = null, MachineLearningComputeProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MachineLearningComputeData(id, name, resourceType, systemData, tags, location, identity, sku, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeProperties. </summary>
        /// <param name="computeType"> The type of compute. </param>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeProperties"/> instance for mocking. </returns>
        public static MachineLearningComputeProperties MachineLearningComputeProperties(string computeType = "Unknown", string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new UnknownCompute(computeType, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth);
        }

        /// <summary> Initializes a new instance of AmlComputeScaleSettings. </summary>
        /// <param name="maxNodeCount"> Max number of nodes to use. </param>
        /// <param name="minNodeCount"> Min number of nodes to use. </param>
        /// <param name="nodeIdleTimeBeforeScaleDown"> Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format. </param>
        /// <returns> A new <see cref="Models.AmlComputeScaleSettings"/> instance for mocking. </returns>
        public static AmlComputeScaleSettings AmlComputeScaleSettings(int maxNodeCount = default, int? minNodeCount = null, TimeSpan? nodeIdleTimeBeforeScaleDown = null)
        {
            return new AmlComputeScaleSettings(maxNodeCount, minNodeCount, nodeIdleTimeBeforeScaleDown);
        }

        /// <summary> Initializes a new instance of AmlComputeNodeInformation. </summary>
        /// <param name="nodeId"> ID of the compute node. </param>
        /// <param name="privateIPAddress"> Private IP address of the compute node. </param>
        /// <param name="publicIPAddress"> Public IP address of the compute node. </param>
        /// <param name="port"> SSH port number of the node. </param>
        /// <param name="nodeState"> State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted. </param>
        /// <param name="runId"> ID of the Experiment running on the node, if any else null. </param>
        /// <returns> A new <see cref="Models.AmlComputeNodeInformation"/> instance for mocking. </returns>
        public static AmlComputeNodeInformation AmlComputeNodeInformation(string nodeId = null, IPAddress privateIPAddress = null, IPAddress publicIPAddress = null, int? port = null, MachineLearningNodeState? nodeState = null, string runId = null)
        {
            return new AmlComputeNodeInformation(nodeId, privateIPAddress, publicIPAddress, port, nodeState, runId);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceNotebookAccessTokenResult. </summary>
        /// <param name="notebookResourceId"></param>
        /// <param name="hostName"></param>
        /// <param name="publicDns"></param>
        /// <param name="accessToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="expiresIn"></param>
        /// <param name="refreshToken"></param>
        /// <param name="scope"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceNotebookAccessTokenResult"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceNotebookAccessTokenResult MachineLearningWorkspaceNotebookAccessTokenResult(string notebookResourceId = null, string hostName = null, string publicDns = null, string accessToken = null, string tokenType = null, int? expiresIn = null, string refreshToken = null, string scope = null)
        {
            return new MachineLearningWorkspaceNotebookAccessTokenResult(notebookResourceId, hostName, publicDns, accessToken, tokenType, expiresIn, refreshToken, scope);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeSecrets. </summary>
        /// <param name="computeType"> The type of compute. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeSecrets"/> instance for mocking. </returns>
        public static MachineLearningComputeSecrets MachineLearningComputeSecrets(string computeType = "Unknown")
        {
            return new UnknownComputeSecrets(computeType);
        }

        /// <summary> Initializes a new instance of MachineLearningPrivateLinkResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="sku"> The sku of the workspace. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource Private link DNS zone name. </param>
        /// <returns> A new <see cref="Models.MachineLearningPrivateLinkResource"/> instance for mocking. </returns>
        public static MachineLearningPrivateLinkResource MachineLearningPrivateLinkResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, MachineLearningSku sku = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            tags ??= new Dictionary<string, string>();
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new MachineLearningPrivateLinkResource(id, name, resourceType, systemData, tags, location, identity, sku, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceGetStorageAccountKeysResult. </summary>
        /// <param name="userStorageKey"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceGetStorageAccountKeysResult"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceGetStorageAccountKeysResult MachineLearningWorkspaceGetStorageAccountKeysResult(string userStorageKey = null)
        {
            return new MachineLearningWorkspaceGetStorageAccountKeysResult(userStorageKey);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Please note <see cref="MachineLearningWorkspaceConnectionProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningManagedIdentityAuthTypeWorkspaceConnection"/>, <see cref="MachineLearningNoneAuthTypeWorkspaceConnection"/>, <see cref="MachineLearningPatAuthTypeWorkspaceConnection"/>, <see cref="MachineLearningSasAuthTypeWorkspaceConnection"/> and <see cref="MachineLearningUsernamePasswordAuthTypeWorkspaceConnection"/>.
        /// </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningWorkspaceConnectionData"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceConnectionData MachineLearningWorkspaceConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningWorkspaceConnectionProperties properties = null)
        {
            return new MachineLearningWorkspaceConnectionData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceConnectionProperties. </summary>
        /// <param name="authType"> Authentication type of the connection target. </param>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="target"></param>
        /// <param name="value"> Value details of the workspace connection. </param>
        /// <param name="valueFormat"> format for the workspace connection value. </param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceConnectionProperties"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceConnectionProperties MachineLearningWorkspaceConnectionProperties(string authType = "Unknown", MachineLearningConnectionCategory? category = null, string target = null, string value = null, MachineLearningValueFormat? valueFormat = null)
        {
            return new UnknownWorkspaceConnectionPropertiesV2(authType, category, target, value, valueFormat);
        }

        /// <summary> Initializes a new instance of MachineLearningFqdnEndpoints. </summary>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.MachineLearningFqdnEndpoints"/> instance for mocking. </returns>
        public static MachineLearningFqdnEndpoints MachineLearningFqdnEndpoints(MachineLearningFqdnEndpointsProperties properties = null)
        {
            return new MachineLearningFqdnEndpoints(properties);
        }

        /// <summary> Initializes a new instance of MachineLearningFqdnEndpointsProperties. </summary>
        /// <param name="category"></param>
        /// <param name="endpoints"></param>
        /// <returns> A new <see cref="Models.MachineLearningFqdnEndpointsProperties"/> instance for mocking. </returns>
        public static MachineLearningFqdnEndpointsProperties MachineLearningFqdnEndpointsProperties(string category = null, IEnumerable<MachineLearningFqdnEndpoint> endpoints = null)
        {
            endpoints ??= new List<MachineLearningFqdnEndpoint>();

            return new MachineLearningFqdnEndpointsProperties(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningFqdnEndpoint. </summary>
        /// <param name="domainName"></param>
        /// <param name="endpointDetails"></param>
        /// <returns> A new <see cref="Models.MachineLearningFqdnEndpoint"/> instance for mocking. </returns>
        public static MachineLearningFqdnEndpoint MachineLearningFqdnEndpoint(string domainName = null, IEnumerable<MachineLearningFqdnEndpointDetail> endpointDetails = null)
        {
            endpointDetails ??= new List<MachineLearningFqdnEndpointDetail>();

            return new MachineLearningFqdnEndpoint(domainName, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningFqdnEndpointDetail. </summary>
        /// <param name="port"></param>
        /// <returns> A new <see cref="Models.MachineLearningFqdnEndpointDetail"/> instance for mocking. </returns>
        public static MachineLearningFqdnEndpointDetail MachineLearningFqdnEndpointDetail(int? port = null)
        {
            return new MachineLearningFqdnEndpointDetail(port);
        }

        /// <summary> Initializes a new instance of MachineLearningBatchEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity (system assigned and/or user assigned identities). </param>
        /// <param name="kind"> Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <param name="sku"> Sku details required for ARM contract for Autoscaling. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningBatchEndpointData"/> instance for mocking. </returns>
        public static MachineLearningBatchEndpointData MachineLearningBatchEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string kind = null, MachineLearningBatchEndpointProperties properties = null, MachineLearningSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MachineLearningBatchEndpointData(id, name, resourceType, systemData, tags, location, identity, kind, properties, sku);
        }

        /// <summary> Initializes a new instance of MachineLearningBatchEndpointProperties. </summary>
        /// <param name="authMode"> [Required] Use &apos;Key&apos; for key based authentication and &apos;AMLToken&apos; for Azure Machine Learning token-based authentication. &apos;Key&apos; doesn&apos;t expire but &apos;AMLToken&apos; does. </param>
        /// <param name="description"> Description of the inference endpoint. </param>
        /// <param name="keys">
        /// EndpointAuthKeys to set initially on an Endpoint.
        /// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
        /// </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="scoringUri"> Endpoint URI. </param>
        /// <param name="swaggerUri"> Endpoint Swagger URI. </param>
        /// <param name="defaultsDeploymentName"> Default values for Batch Endpoint. </param>
        /// <param name="provisioningState"> Provisioning state for the endpoint. </param>
        /// <returns> A new <see cref="Models.MachineLearningBatchEndpointProperties"/> instance for mocking. </returns>
        public static MachineLearningBatchEndpointProperties MachineLearningBatchEndpointProperties(MachineLearningEndpointAuthMode authMode = default, string description = null, MachineLearningEndpointAuthKeys keys = null, IDictionary<string, string> properties = null, Uri scoringUri = null, Uri swaggerUri = null, string defaultsDeploymentName = null, MachineLearningEndpointProvisioningState? provisioningState = null)
        {
            properties ??= new Dictionary<string, string>();

            return new MachineLearningBatchEndpointProperties(authMode, description, keys, properties, scoringUri, swaggerUri, defaultsDeploymentName != null ? new BatchEndpointDefaults(defaultsDeploymentName) : null, provisioningState);
        }

        /// <summary> Initializes a new instance of MachineLearningEndpointProperties. </summary>
        /// <param name="authMode"> [Required] Use &apos;Key&apos; for key based authentication and &apos;AMLToken&apos; for Azure Machine Learning token-based authentication. &apos;Key&apos; doesn&apos;t expire but &apos;AMLToken&apos; does. </param>
        /// <param name="description"> Description of the inference endpoint. </param>
        /// <param name="keys">
        /// EndpointAuthKeys to set initially on an Endpoint.
        /// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
        /// </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="scoringUri"> Endpoint URI. </param>
        /// <param name="swaggerUri"> Endpoint Swagger URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningEndpointProperties"/> instance for mocking. </returns>
        public static MachineLearningEndpointProperties MachineLearningEndpointProperties(MachineLearningEndpointAuthMode authMode = default, string description = null, MachineLearningEndpointAuthKeys keys = null, IDictionary<string, string> properties = null, Uri scoringUri = null, Uri swaggerUri = null)
        {
            properties ??= new Dictionary<string, string>();

            return new MachineLearningEndpointProperties(authMode, description, keys, properties, scoringUri, swaggerUri);
        }

        /// <summary> Initializes a new instance of MachineLearningEndpointAuthKeys. </summary>
        /// <param name="primaryKey"> The primary key. </param>
        /// <param name="secondaryKey"> The secondary key. </param>
        /// <returns> A new <see cref="Models.MachineLearningEndpointAuthKeys"/> instance for mocking. </returns>
        public static MachineLearningEndpointAuthKeys MachineLearningEndpointAuthKeys(string primaryKey = null, string secondaryKey = null)
        {
            return new MachineLearningEndpointAuthKeys(primaryKey, secondaryKey);
        }

        /// <summary> Initializes a new instance of MachineLearningBatchDeploymentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity (system assigned and/or user assigned identities). </param>
        /// <param name="kind"> Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <param name="sku"> Sku details required for ARM contract for Autoscaling. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningBatchDeploymentData"/> instance for mocking. </returns>
        public static MachineLearningBatchDeploymentData MachineLearningBatchDeploymentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string kind = null, MachineLearningBatchDeploymentProperties properties = null, MachineLearningSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MachineLearningBatchDeploymentData(id, name, resourceType, systemData, tags, location, identity, kind, properties, sku);
        }

        /// <summary> Initializes a new instance of MachineLearningBatchDeploymentProperties. </summary>
        /// <param name="codeConfiguration"> Code configuration for the endpoint deployment. </param>
        /// <param name="description"> Description of the endpoint deployment. </param>
        /// <param name="environmentId"> ARM resource ID or AssetId of the environment specification for the endpoint deployment. </param>
        /// <param name="environmentVariables"> Environment variables configuration for the deployment. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="compute"> Compute target for batch inference operation. </param>
        /// <param name="errorThreshold">
        /// Error threshold, if the error count for the entire input goes above this value,
        /// the batch inference will be aborted. Range is [-1, int.MaxValue].
        /// For FileDataset, this value is the count of file failures.
        /// For TabularDataset, this value is the count of record failures.
        /// If set to -1 (the lower bound), all failures during batch inference will be ignored.
        /// </param>
        /// <param name="loggingLevel"> Logging level for batch inference operation. </param>
        /// <param name="maxConcurrencyPerInstance"> Indicates maximum number of parallelism per instance. </param>
        /// <param name="miniBatchSize">
        /// Size of the mini-batch passed to each batch invocation.
        /// For FileDataset, this is the number of files per mini-batch.
        /// For TabularDataset, this is the size of the records in bytes, per mini-batch.
        /// </param>
        /// <param name="model">
        /// Reference to the model asset for the endpoint deployment.
        /// Please note <see cref="MachineLearningAssetReferenceBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningDataPathAssetReference"/>, <see cref="MachineLearningIdAssetReference"/> and <see cref="MachineLearningOutputPathAssetReference"/>.
        /// </param>
        /// <param name="outputAction"> Indicates how the output will be organized. </param>
        /// <param name="outputFileName"> Customized output file name for append_row output action. </param>
        /// <param name="provisioningState"> Provisioning state for the endpoint deployment. </param>
        /// <param name="resources">
        /// Indicates compute configuration for the job.
        /// If not provided, will default to the defaults defined in ResourceConfiguration.
        /// </param>
        /// <param name="retrySettings">
        /// Retry Settings for the batch inference operation.
        /// If not provided, will default to the defaults defined in BatchRetrySettings.
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningBatchDeploymentProperties"/> instance for mocking. </returns>
        public static MachineLearningBatchDeploymentProperties MachineLearningBatchDeploymentProperties(MachineLearningCodeConfiguration codeConfiguration = null, string description = null, string environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, string> properties = null, string compute = null, int? errorThreshold = null, MachineLearningBatchLoggingLevel? loggingLevel = null, int? maxConcurrencyPerInstance = null, long? miniBatchSize = null, MachineLearningAssetReferenceBase model = null, MachineLearningBatchOutputAction? outputAction = null, string outputFileName = null, MachineLearningDeploymentProvisioningState? provisioningState = null, MachineLearningDeploymentResourceConfiguration resources = null, MachineLearningBatchRetrySettings retrySettings = null)
        {
            environmentVariables ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new MachineLearningBatchDeploymentProperties(codeConfiguration, description, environmentId, environmentVariables, properties, compute, errorThreshold, loggingLevel, maxConcurrencyPerInstance, miniBatchSize, model, outputAction, outputFileName, provisioningState, resources, retrySettings);
        }

        /// <summary> Initializes a new instance of MachineLearningAssetReferenceBase. </summary>
        /// <param name="referenceType"> [Required] Specifies the type of asset reference. </param>
        /// <returns> A new <see cref="Models.MachineLearningAssetReferenceBase"/> instance for mocking. </returns>
        public static MachineLearningAssetReferenceBase MachineLearningAssetReferenceBase(string referenceType = "Unknown")
        {
            return new UnknownAssetReferenceBase(referenceType);
        }

        /// <summary> Initializes a new instance of MachineLearningDeploymentResourceConfiguration. </summary>
        /// <param name="instanceCount"> Optional number of instances or nodes used by the compute target. </param>
        /// <param name="instanceType"> Optional type of VM used as supported by the compute target. </param>
        /// <param name="properties"> Additional properties bag. </param>
        /// <returns> A new <see cref="Models.MachineLearningDeploymentResourceConfiguration"/> instance for mocking. </returns>
        public static MachineLearningDeploymentResourceConfiguration MachineLearningDeploymentResourceConfiguration(int? instanceCount = null, string instanceType = null, IDictionary<string, BinaryData> properties = null)
        {
            properties ??= new Dictionary<string, BinaryData>();

            return new MachineLearningDeploymentResourceConfiguration(instanceCount, instanceType, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningResourceConfiguration. </summary>
        /// <param name="instanceCount"> Optional number of instances or nodes used by the compute target. </param>
        /// <param name="instanceType"> Optional type of VM used as supported by the compute target. </param>
        /// <param name="properties"> Additional properties bag. </param>
        /// <returns> A new <see cref="Models.MachineLearningResourceConfiguration"/> instance for mocking. </returns>
        public static MachineLearningResourceConfiguration MachineLearningResourceConfiguration(int? instanceCount = null, string instanceType = null, IDictionary<string, BinaryData> properties = null)
        {
            properties ??= new Dictionary<string, BinaryData>();

            return new MachineLearningResourceConfiguration(instanceCount, instanceType, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningBatchRetrySettings. </summary>
        /// <param name="maxRetries"> Maximum retry count for a mini-batch. </param>
        /// <param name="timeout"> Invocation timeout for a mini-batch, in ISO 8601 format. </param>
        /// <returns> A new <see cref="Models.MachineLearningBatchRetrySettings"/> instance for mocking. </returns>
        public static MachineLearningBatchRetrySettings MachineLearningBatchRetrySettings(int? maxRetries = null, TimeSpan? timeout = null)
        {
            return new MachineLearningBatchRetrySettings(maxRetries, timeout);
        }

        /// <summary> Initializes a new instance of MachineLearningEndpointDeploymentProperties. </summary>
        /// <param name="codeConfiguration"> Code configuration for the endpoint deployment. </param>
        /// <param name="description"> Description of the endpoint deployment. </param>
        /// <param name="environmentId"> ARM resource ID or AssetId of the environment specification for the endpoint deployment. </param>
        /// <param name="environmentVariables"> Environment variables configuration for the deployment. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <returns> A new <see cref="Models.MachineLearningEndpointDeploymentProperties"/> instance for mocking. </returns>
        public static MachineLearningEndpointDeploymentProperties MachineLearningEndpointDeploymentProperties(MachineLearningCodeConfiguration codeConfiguration = null, string description = null, string environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, string> properties = null)
        {
            environmentVariables ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new MachineLearningEndpointDeploymentProperties(codeConfiguration, description, environmentId, environmentVariables, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningCodeConfiguration. </summary>
        /// <param name="codeId"> ARM resource ID of the code asset. </param>
        /// <param name="scoringScript"> [Required] The script to execute on startup. eg. &quot;score.py&quot;. </param>
        /// <returns> A new <see cref="Models.MachineLearningCodeConfiguration"/> instance for mocking. </returns>
        public static MachineLearningCodeConfiguration MachineLearningCodeConfiguration(ResourceIdentifier codeId = null, string scoringScript = null)
        {
            return new MachineLearningCodeConfiguration(codeId, scoringScript);
        }

        /// <summary> Initializes a new instance of MachineLearningCodeContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningCodeContainerData"/> instance for mocking. </returns>
        public static MachineLearningCodeContainerData MachineLearningCodeContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningCodeContainerProperties properties = null)
        {
            return new MachineLearningCodeContainerData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningCodeContainerProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="latestVersion"> The latest version inside this container. </param>
        /// <param name="nextVersion"> The next auto incremental version. </param>
        /// <returns> A new <see cref="Models.MachineLearningCodeContainerProperties"/> instance for mocking. </returns>
        public static MachineLearningCodeContainerProperties MachineLearningCodeContainerProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isArchived = null, string latestVersion = null, string nextVersion = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningCodeContainerProperties(description, properties, tags, isArchived, latestVersion, nextVersion);
        }

        /// <summary> Initializes a new instance of MachineLearningAssetContainer. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="latestVersion"> The latest version inside this container. </param>
        /// <param name="nextVersion"> The next auto incremental version. </param>
        /// <returns> A new <see cref="Models.MachineLearningAssetContainer"/> instance for mocking. </returns>
        public static MachineLearningAssetContainer MachineLearningAssetContainer(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isArchived = null, string latestVersion = null, string nextVersion = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningAssetContainer(description, properties, tags, isArchived, latestVersion, nextVersion);
        }

        /// <summary> Initializes a new instance of MachineLearningResourceBase. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <returns> A new <see cref="Models.MachineLearningResourceBase"/> instance for mocking. </returns>
        public static MachineLearningResourceBase MachineLearningResourceBase(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningResourceBase(description, properties, tags);
        }

        /// <summary> Initializes a new instance of MachineLearningCodeVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningCodeVersionData"/> instance for mocking. </returns>
        public static MachineLearningCodeVersionData MachineLearningCodeVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningCodeVersionProperties properties = null)
        {
            return new MachineLearningCodeVersionData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningCodeVersionProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="codeUri"> Uri where code is located. </param>
        /// <returns> A new <see cref="Models.MachineLearningCodeVersionProperties"/> instance for mocking. </returns>
        public static MachineLearningCodeVersionProperties MachineLearningCodeVersionProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, Uri codeUri = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningCodeVersionProperties(description, properties, tags, isAnonymous, isArchived, codeUri);
        }

        /// <summary> Initializes a new instance of MachineLearningAssetBase. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <returns> A new <see cref="Models.MachineLearningAssetBase"/> instance for mocking. </returns>
        public static MachineLearningAssetBase MachineLearningAssetBase(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningAssetBase(description, properties, tags, isAnonymous, isArchived);
        }

        /// <summary> Initializes a new instance of MachineLearningComponentContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningComponentContainerData"/> instance for mocking. </returns>
        public static MachineLearningComponentContainerData MachineLearningComponentContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningComponentContainerProperties properties = null)
        {
            return new MachineLearningComponentContainerData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningComponentContainerProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="latestVersion"> The latest version inside this container. </param>
        /// <param name="nextVersion"> The next auto incremental version. </param>
        /// <returns> A new <see cref="Models.MachineLearningComponentContainerProperties"/> instance for mocking. </returns>
        public static MachineLearningComponentContainerProperties MachineLearningComponentContainerProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isArchived = null, string latestVersion = null, string nextVersion = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningComponentContainerProperties(description, properties, tags, isArchived, latestVersion, nextVersion);
        }

        /// <summary> Initializes a new instance of MachineLearningComponentVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningComponentVersionData"/> instance for mocking. </returns>
        public static MachineLearningComponentVersionData MachineLearningComponentVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningComponentVersionProperties properties = null)
        {
            return new MachineLearningComponentVersionData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningComponentVersionProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="componentSpec">
        /// Defines Component definition details.
        /// &lt;see href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command&quot; /&gt;
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningComponentVersionProperties"/> instance for mocking. </returns>
        public static MachineLearningComponentVersionProperties MachineLearningComponentVersionProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, BinaryData componentSpec = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningComponentVersionProperties(description, properties, tags, isAnonymous, isArchived, componentSpec);
        }

        /// <summary> Initializes a new instance of MachineLearningDataContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningDataContainerData"/> instance for mocking. </returns>
        public static MachineLearningDataContainerData MachineLearningDataContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningDataContainerProperties properties = null)
        {
            return new MachineLearningDataContainerData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningDataContainerProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="latestVersion"> The latest version inside this container. </param>
        /// <param name="nextVersion"> The next auto incremental version. </param>
        /// <param name="dataType"> [Required] Specifies the type of data. </param>
        /// <returns> A new <see cref="Models.MachineLearningDataContainerProperties"/> instance for mocking. </returns>
        public static MachineLearningDataContainerProperties MachineLearningDataContainerProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isArchived = null, string latestVersion = null, string nextVersion = null, MachineLearningDataType dataType = default)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningDataContainerProperties(description, properties, tags, isArchived, latestVersion, nextVersion, dataType);
        }

        /// <summary> Initializes a new instance of MachineLearningDataVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// [Required] Additional attributes of the entity.
        /// Please note <see cref="MachineLearningDataVersionProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningTable"/>, <see cref="MachineLearningUriFileDataVersion"/> and <see cref="MachineLearningUriFolderDataVersion"/>.
        /// </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningDataVersionData"/> instance for mocking. </returns>
        public static MachineLearningDataVersionData MachineLearningDataVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningDataVersionProperties properties = null)
        {
            return new MachineLearningDataVersionData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningDataVersionProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="dataType"> [Required] Specifies the type of data. </param>
        /// <param name="dataUri"> [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20221001.Assets.DataVersionBase.DataType. </param>
        /// <returns> A new <see cref="Models.MachineLearningDataVersionProperties"/> instance for mocking. </returns>
        public static MachineLearningDataVersionProperties MachineLearningDataVersionProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, string dataType = "Unknown", Uri dataUri = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningDataVersionProperties(description, properties, tags, isAnonymous, isArchived, dataType, dataUri);
        }

        /// <summary> Initializes a new instance of MachineLearningDatastoreData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// [Required] Additional attributes of the entity.
        /// Please note <see cref="MachineLearningDatastoreProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAzureBlobDatastore"/>, <see cref="MachineLearningAzureDataLakeGen1Datastore"/>, <see cref="MachineLearningAzureDataLakeGen2Datastore"/> and <see cref="MachineLearningAzureFileDatastore"/>.
        /// </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningDatastoreData"/> instance for mocking. </returns>
        public static MachineLearningDatastoreData MachineLearningDatastoreData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningDatastoreProperties properties = null)
        {
            return new MachineLearningDatastoreData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningDatastoreProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="credentials">
        /// [Required] Account credentials.
        /// Please note <see cref="MachineLearningDatastoreCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAccountKeyDatastoreCredentials"/>, <see cref="MachineLearningCertificateDatastoreCredentials"/>, <see cref="MachineLearningNoneDatastoreCredentials"/>, <see cref="MachineLearningSasDatastoreCredentials"/> and <see cref="MachineLearningServicePrincipalDatastoreCredentials"/>.
        /// </param>
        /// <param name="datastoreType"> [Required] Storage type backing the datastore. </param>
        /// <param name="isDefault"> Readonly property to indicate if datastore is the workspace default datastore. </param>
        /// <returns> A new <see cref="Models.MachineLearningDatastoreProperties"/> instance for mocking. </returns>
        public static MachineLearningDatastoreProperties MachineLearningDatastoreProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, MachineLearningDatastoreCredentials credentials = null, string datastoreType = "Unknown", bool? isDefault = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningDatastoreProperties(description, properties, tags, credentials, datastoreType, isDefault);
        }

        /// <summary> Initializes a new instance of MachineLearningDatastoreCredentials. </summary>
        /// <param name="credentialsType"> [Required] Credential type used to authentication with storage. </param>
        /// <returns> A new <see cref="Models.MachineLearningDatastoreCredentials"/> instance for mocking. </returns>
        public static MachineLearningDatastoreCredentials MachineLearningDatastoreCredentials(string credentialsType = "Unknown")
        {
            return new UnknownDatastoreCredentials(credentialsType);
        }

        /// <summary> Initializes a new instance of MachineLearningDatastoreSecrets. </summary>
        /// <param name="secretsType"> [Required] Credential type used to authentication with storage. </param>
        /// <returns> A new <see cref="Models.MachineLearningDatastoreSecrets"/> instance for mocking. </returns>
        public static MachineLearningDatastoreSecrets MachineLearningDatastoreSecrets(string secretsType = "Unknown")
        {
            return new UnknownDatastoreSecrets(secretsType);
        }

        /// <summary> Initializes a new instance of MachineLearningEnvironmentContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningEnvironmentContainerData"/> instance for mocking. </returns>
        public static MachineLearningEnvironmentContainerData MachineLearningEnvironmentContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningEnvironmentContainerProperties properties = null)
        {
            return new MachineLearningEnvironmentContainerData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningEnvironmentContainerProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="latestVersion"> The latest version inside this container. </param>
        /// <param name="nextVersion"> The next auto incremental version. </param>
        /// <returns> A new <see cref="Models.MachineLearningEnvironmentContainerProperties"/> instance for mocking. </returns>
        public static MachineLearningEnvironmentContainerProperties MachineLearningEnvironmentContainerProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isArchived = null, string latestVersion = null, string nextVersion = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningEnvironmentContainerProperties(description, properties, tags, isArchived, latestVersion, nextVersion);
        }

        /// <summary> Initializes a new instance of MachineLearningEnvironmentVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningEnvironmentVersionData"/> instance for mocking. </returns>
        public static MachineLearningEnvironmentVersionData MachineLearningEnvironmentVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningEnvironmentVersionProperties properties = null)
        {
            return new MachineLearningEnvironmentVersionData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningEnvironmentVersionProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="autoRebuild"> Defines if image needs to be rebuilt based on base image changes. </param>
        /// <param name="build"> Configuration settings for Docker build context. </param>
        /// <param name="condaFile">
        /// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
        /// &lt;see href=&quot;https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment&quot; /&gt;
        /// </param>
        /// <param name="environmentType">
        /// Environment type is either user managed or curated by the Azure ML service
        /// &lt;see href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments&quot; /&gt;
        /// </param>
        /// <param name="image">
        /// Name of the image that will be used for the environment.
        /// &lt;seealso href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image&quot; /&gt;
        /// </param>
        /// <param name="inferenceConfig"> Defines configuration specific to inference. </param>
        /// <param name="osType"> The OS type of the environment. </param>
        /// <returns> A new <see cref="Models.MachineLearningEnvironmentVersionProperties"/> instance for mocking. </returns>
        public static MachineLearningEnvironmentVersionProperties MachineLearningEnvironmentVersionProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, AutoRebuildSetting? autoRebuild = null, MachineLearningBuildContext build = null, string condaFile = null, MachineLearningEnvironmentType? environmentType = null, string image = null, MachineLearningInferenceContainerProperties inferenceConfig = null, MachineLearningOperatingSystemType? osType = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningEnvironmentVersionProperties(description, properties, tags, isAnonymous, isArchived, autoRebuild, build, condaFile, environmentType, image, inferenceConfig, osType);
        }

        /// <summary> Initializes a new instance of MachineLearningBuildContext. </summary>
        /// <param name="contextUri">
        /// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
        /// &lt;seealso href=&quot;https://docs.docker.com/engine/reference/commandline/build/#extended-description&quot; /&gt;
        /// </param>
        /// <param name="dockerfilePath">
        /// Path to the Dockerfile in the build context.
        /// &lt;seealso href=&quot;https://docs.docker.com/engine/reference/builder/&quot; /&gt;
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningBuildContext"/> instance for mocking. </returns>
        public static MachineLearningBuildContext MachineLearningBuildContext(Uri contextUri = null, string dockerfilePath = null)
        {
            return new MachineLearningBuildContext(contextUri, dockerfilePath);
        }

        /// <summary> Initializes a new instance of MachineLearningInferenceContainerProperties. </summary>
        /// <param name="livenessRoute"> The route to check the liveness of the inference server container. </param>
        /// <param name="readinessRoute"> The route to check the readiness of the inference server container. </param>
        /// <param name="scoringRoute"> The port to send the scoring requests to, within the inference server container. </param>
        /// <returns> A new <see cref="Models.MachineLearningInferenceContainerProperties"/> instance for mocking. </returns>
        public static MachineLearningInferenceContainerProperties MachineLearningInferenceContainerProperties(MachineLearningInferenceContainerRoute livenessRoute = null, MachineLearningInferenceContainerRoute readinessRoute = null, MachineLearningInferenceContainerRoute scoringRoute = null)
        {
            return new MachineLearningInferenceContainerProperties(livenessRoute, readinessRoute, scoringRoute);
        }

        /// <summary> Initializes a new instance of MachineLearningJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// [Required] Additional attributes of the entity.
        /// Please note <see cref="MachineLearningJobProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoMLJob"/>, <see cref="MachineLearningCommandJob"/>, <see cref="MachineLearningPipelineJob"/> and <see cref="MachineLearningSweepJob"/>.
        /// </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningJobData"/> instance for mocking. </returns>
        public static MachineLearningJobData MachineLearningJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningJobProperties properties = null)
        {
            return new MachineLearningJobData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningJobProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="componentId"> ARM resource ID of the component resource. </param>
        /// <param name="computeId"> ARM resource ID of the compute resource. </param>
        /// <param name="displayName"> Display name of job. </param>
        /// <param name="experimentName"> The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment. </param>
        /// <param name="identity">
        /// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        /// Defaults to AmlToken if null.
        /// Please note <see cref="MachineLearningIdentityConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmlToken"/>, <see cref="MachineLearningManagedIdentity"/> and <see cref="MachineLearningUserIdentity"/>.
        /// </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="jobType"> [Required] Specifies the type of job. </param>
        /// <param name="services">
        /// List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        /// </param>
        /// <param name="status"> Status of the job. </param>
        /// <returns> A new <see cref="Models.MachineLearningJobProperties"/> instance for mocking. </returns>
        public static MachineLearningJobProperties MachineLearningJobProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, ResourceIdentifier componentId = null, ResourceIdentifier computeId = null, string displayName = null, string experimentName = null, MachineLearningIdentityConfiguration identity = null, bool? isArchived = null, string jobType = "Unknown", IDictionary<string, MachineLearningJobService> services = null, MachineLearningJobStatus? status = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            services ??= new Dictionary<string, MachineLearningJobService>();

            return new MachineLearningJobProperties(description, properties, tags, componentId, computeId, displayName, experimentName, identity, isArchived, jobType, services, status);
        }

        /// <summary> Initializes a new instance of MachineLearningIdentityConfiguration. </summary>
        /// <param name="identityType"> [Required] Specifies the type of identity framework. </param>
        /// <returns> A new <see cref="Models.MachineLearningIdentityConfiguration"/> instance for mocking. </returns>
        public static MachineLearningIdentityConfiguration MachineLearningIdentityConfiguration(string identityType = "Unknown")
        {
            return new UnknownIdentityConfiguration(identityType);
        }

        /// <summary> Initializes a new instance of MachineLearningJobService. </summary>
        /// <param name="endpoint"> Url for endpoint. </param>
        /// <param name="errorMessage"> Any error in the service. </param>
        /// <param name="jobServiceType"> Endpoint type. </param>
        /// <param name="port"> Port for endpoint. </param>
        /// <param name="properties"> Additional properties to set on the endpoint. </param>
        /// <param name="status"> Status of endpoint. </param>
        /// <returns> A new <see cref="Models.MachineLearningJobService"/> instance for mocking. </returns>
        public static MachineLearningJobService MachineLearningJobService(string endpoint = null, string errorMessage = null, string jobServiceType = null, int? port = null, IDictionary<string, string> properties = null, string status = null)
        {
            properties ??= new Dictionary<string, string>();

            return new MachineLearningJobService(endpoint, errorMessage, jobServiceType, port, properties, status);
        }

        /// <summary> Initializes a new instance of MachineLearningModelContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningModelContainerData"/> instance for mocking. </returns>
        public static MachineLearningModelContainerData MachineLearningModelContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningModelContainerProperties properties = null)
        {
            return new MachineLearningModelContainerData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningModelContainerProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="latestVersion"> The latest version inside this container. </param>
        /// <param name="nextVersion"> The next auto incremental version. </param>
        /// <returns> A new <see cref="Models.MachineLearningModelContainerProperties"/> instance for mocking. </returns>
        public static MachineLearningModelContainerProperties MachineLearningModelContainerProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isArchived = null, string latestVersion = null, string nextVersion = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningModelContainerProperties(description, properties, tags, isArchived, latestVersion, nextVersion);
        }

        /// <summary> Initializes a new instance of MachineLearningModelVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningModelVersionData"/> instance for mocking. </returns>
        public static MachineLearningModelVersionData MachineLearningModelVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningModelVersionProperties properties = null)
        {
            return new MachineLearningModelVersionData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningModelVersionProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="flavors"> Mapping of model flavors to their properties. </param>
        /// <param name="jobName"> Name of the training job which produced this model. </param>
        /// <param name="modelType"> The storage format for this entity. Used for NCD. </param>
        /// <param name="modelUri"> The URI path to the model contents. </param>
        /// <returns> A new <see cref="Models.MachineLearningModelVersionProperties"/> instance for mocking. </returns>
        public static MachineLearningModelVersionProperties MachineLearningModelVersionProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, IDictionary<string, MachineLearningFlavorData> flavors = null, string jobName = null, string modelType = null, Uri modelUri = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            flavors ??= new Dictionary<string, MachineLearningFlavorData>();

            return new MachineLearningModelVersionProperties(description, properties, tags, isAnonymous, isArchived, flavors, jobName, modelType, modelUri);
        }

        /// <summary> Initializes a new instance of MachineLearningFlavorData. </summary>
        /// <param name="data"> Model flavor-specific data. </param>
        /// <returns> A new <see cref="Models.MachineLearningFlavorData"/> instance for mocking. </returns>
        public static MachineLearningFlavorData MachineLearningFlavorData(IDictionary<string, string> data = null)
        {
            data ??= new Dictionary<string, string>();

            return new MachineLearningFlavorData(data);
        }

        /// <summary> Initializes a new instance of MachineLearningOnlineEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity (system assigned and/or user assigned identities). </param>
        /// <param name="kind"> Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <param name="sku"> Sku details required for ARM contract for Autoscaling. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningOnlineEndpointData"/> instance for mocking. </returns>
        public static MachineLearningOnlineEndpointData MachineLearningOnlineEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string kind = null, MachineLearningOnlineEndpointProperties properties = null, MachineLearningSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MachineLearningOnlineEndpointData(id, name, resourceType, systemData, tags, location, identity, kind, properties, sku);
        }

        /// <summary> Initializes a new instance of MachineLearningOnlineEndpointProperties. </summary>
        /// <param name="authMode"> [Required] Use &apos;Key&apos; for key based authentication and &apos;AMLToken&apos; for Azure Machine Learning token-based authentication. &apos;Key&apos; doesn&apos;t expire but &apos;AMLToken&apos; does. </param>
        /// <param name="description"> Description of the inference endpoint. </param>
        /// <param name="keys">
        /// EndpointAuthKeys to set initially on an Endpoint.
        /// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
        /// </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="scoringUri"> Endpoint URI. </param>
        /// <param name="swaggerUri"> Endpoint Swagger URI. </param>
        /// <param name="compute">
        /// ARM resource ID of the compute if it exists.
        /// optional
        /// </param>
        /// <param name="provisioningState"> Provisioning state for the endpoint. </param>
        /// <param name="publicNetworkAccess"> Set to &quot;Enabled&quot; for endpoints that should allow public access when Private Link is enabled. </param>
        /// <param name="traffic"> Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100. </param>
        /// <returns> A new <see cref="Models.MachineLearningOnlineEndpointProperties"/> instance for mocking. </returns>
        public static MachineLearningOnlineEndpointProperties MachineLearningOnlineEndpointProperties(MachineLearningEndpointAuthMode authMode = default, string description = null, MachineLearningEndpointAuthKeys keys = null, IDictionary<string, string> properties = null, Uri scoringUri = null, Uri swaggerUri = null, string compute = null, MachineLearningEndpointProvisioningState? provisioningState = null, MachineLearningPublicNetworkAccessType? publicNetworkAccess = null, IDictionary<string, int> traffic = null)
        {
            properties ??= new Dictionary<string, string>();
            traffic ??= new Dictionary<string, int>();

            return new MachineLearningOnlineEndpointProperties(authMode, description, keys, properties, scoringUri, swaggerUri, compute, provisioningState, publicNetworkAccess, traffic);
        }

        /// <summary> Initializes a new instance of MachineLearningOnlineDeploymentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity (system assigned and/or user assigned identities). </param>
        /// <param name="kind"> Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. </param>
        /// <param name="properties">
        /// [Required] Additional attributes of the entity.
        /// Please note <see cref="MachineLearningOnlineDeploymentProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningKubernetesOnlineDeployment"/> and <see cref="MachineLearningManagedOnlineDeployment"/>.
        /// </param>
        /// <param name="sku"> Sku details required for ARM contract for Autoscaling. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningOnlineDeploymentData"/> instance for mocking. </returns>
        public static MachineLearningOnlineDeploymentData MachineLearningOnlineDeploymentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string kind = null, MachineLearningOnlineDeploymentProperties properties = null, MachineLearningSku sku = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MachineLearningOnlineDeploymentData(id, name, resourceType, systemData, tags, location, identity, kind, properties, sku);
        }

        /// <summary> Initializes a new instance of MachineLearningOnlineDeploymentProperties. </summary>
        /// <param name="codeConfiguration"> Code configuration for the endpoint deployment. </param>
        /// <param name="description"> Description of the endpoint deployment. </param>
        /// <param name="environmentId"> ARM resource ID or AssetId of the environment specification for the endpoint deployment. </param>
        /// <param name="environmentVariables"> Environment variables configuration for the deployment. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="appInsightsEnabled"> If true, enables Application Insights logging. </param>
        /// <param name="egressPublicNetworkAccess"> If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled. </param>
        /// <param name="endpointComputeType"> [Required] The compute type of the endpoint. </param>
        /// <param name="instanceType"> Compute instance type. </param>
        /// <param name="livenessProbe"> Liveness probe monitors the health of the container regularly. </param>
        /// <param name="model"> The URI path to the model. </param>
        /// <param name="modelMountPath"> The path to mount the model in custom container. </param>
        /// <param name="provisioningState"> Provisioning state for the endpoint deployment. </param>
        /// <param name="readinessProbe"> Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe. </param>
        /// <param name="requestSettings"> Request settings for the deployment. </param>
        /// <param name="scaleSettings">
        /// Scale settings for the deployment.
        /// If it is null or not provided,
        /// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
        /// and to DefaultScaleSettings for ManagedOnlineDeployment.
        /// Please note <see cref="MachineLearningOnlineScaleSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningDefaultScaleSettings"/> and <see cref="MachineLearningTargetUtilizationScaleSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningOnlineDeploymentProperties"/> instance for mocking. </returns>
        public static MachineLearningOnlineDeploymentProperties MachineLearningOnlineDeploymentProperties(MachineLearningCodeConfiguration codeConfiguration = null, string description = null, string environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, string> properties = null, bool? appInsightsEnabled = null, MachineLearningEgressPublicNetworkAccessType? egressPublicNetworkAccess = null, string endpointComputeType = "Unknown", string instanceType = null, MachineLearningProbeSettings livenessProbe = null, string model = null, string modelMountPath = null, MachineLearningDeploymentProvisioningState? provisioningState = null, MachineLearningProbeSettings readinessProbe = null, MachineLearningOnlineRequestSettings requestSettings = null, MachineLearningOnlineScaleSettings scaleSettings = null)
        {
            environmentVariables ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new MachineLearningOnlineDeploymentProperties(codeConfiguration, description, environmentId, environmentVariables, properties, appInsightsEnabled, egressPublicNetworkAccess, endpointComputeType, instanceType, livenessProbe, model, modelMountPath, provisioningState, readinessProbe, requestSettings, scaleSettings);
        }

        /// <summary> Initializes a new instance of MachineLearningProbeSettings. </summary>
        /// <param name="failureThreshold"> The number of failures to allow before returning an unhealthy status. </param>
        /// <param name="initialDelay"> The delay before the first probe in ISO 8601 format. </param>
        /// <param name="period"> The length of time between probes in ISO 8601 format. </param>
        /// <param name="successThreshold"> The number of successful probes before returning a healthy status. </param>
        /// <param name="timeout"> The probe timeout in ISO 8601 format. </param>
        /// <returns> A new <see cref="Models.MachineLearningProbeSettings"/> instance for mocking. </returns>
        public static MachineLearningProbeSettings MachineLearningProbeSettings(int? failureThreshold = null, TimeSpan? initialDelay = null, TimeSpan? period = null, int? successThreshold = null, TimeSpan? timeout = null)
        {
            return new MachineLearningProbeSettings(failureThreshold, initialDelay, period, successThreshold, timeout);
        }

        /// <summary> Initializes a new instance of MachineLearningOnlineRequestSettings. </summary>
        /// <param name="maxConcurrentRequestsPerInstance"> The number of maximum concurrent requests per node allowed per deployment. Defaults to 1. </param>
        /// <param name="maxQueueWait">
        /// The maximum amount of time a request will stay in the queue in ISO 8601 format.
        /// Defaults to 500ms.
        /// </param>
        /// <param name="requestTimeout">
        /// The scoring timeout in ISO 8601 format.
        /// Defaults to 5000ms.
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningOnlineRequestSettings"/> instance for mocking. </returns>
        public static MachineLearningOnlineRequestSettings MachineLearningOnlineRequestSettings(int? maxConcurrentRequestsPerInstance = null, TimeSpan? maxQueueWait = null, TimeSpan? requestTimeout = null)
        {
            return new MachineLearningOnlineRequestSettings(maxConcurrentRequestsPerInstance, maxQueueWait, requestTimeout);
        }

        /// <summary> Initializes a new instance of MachineLearningOnlineScaleSettings. </summary>
        /// <param name="scaleType"> [Required] Type of deployment scaling algorithm. </param>
        /// <returns> A new <see cref="Models.MachineLearningOnlineScaleSettings"/> instance for mocking. </returns>
        public static MachineLearningOnlineScaleSettings MachineLearningOnlineScaleSettings(string scaleType = "Unknown")
        {
            return new UnknownOnlineScaleSettings(scaleType);
        }

        /// <summary> Initializes a new instance of MachineLearningDeploymentLogs. </summary>
        /// <param name="content"> The retrieved online deployment logs. </param>
        /// <returns> A new <see cref="Models.MachineLearningDeploymentLogs"/> instance for mocking. </returns>
        public static MachineLearningDeploymentLogs MachineLearningDeploymentLogs(string content = null)
        {
            return new MachineLearningDeploymentLogs(content);
        }

        /// <summary> Initializes a new instance of MachineLearningSkuDetail. </summary>
        /// <param name="capacity"> Gets or sets the Sku Capacity. </param>
        /// <param name="resourceType"> The resource type name. </param>
        /// <param name="sku"> Gets or sets the Sku. </param>
        /// <returns> A new <see cref="Models.MachineLearningSkuDetail"/> instance for mocking. </returns>
        public static MachineLearningSkuDetail MachineLearningSkuDetail(MachineLearningSkuCapacity capacity = null, string resourceType = null, MachineLearningSkuSetting sku = null)
        {
            return new MachineLearningSkuDetail(capacity, resourceType, sku);
        }

        /// <summary> Initializes a new instance of MachineLearningSkuCapacity. </summary>
        /// <param name="default"> Gets or sets the default capacity. </param>
        /// <param name="maximum"> Gets or sets the maximum. </param>
        /// <param name="minimum"> Gets or sets the minimum. </param>
        /// <param name="scaleType"> Gets or sets the type of the scale. </param>
        /// <returns> A new <see cref="Models.MachineLearningSkuCapacity"/> instance for mocking. </returns>
        public static MachineLearningSkuCapacity MachineLearningSkuCapacity(int? @default = null, int? maximum = null, int? minimum = null, MachineLearningSkuScaleType? scaleType = null)
        {
            return new MachineLearningSkuCapacity(@default, maximum, minimum, scaleType);
        }

        /// <summary> Initializes a new instance of MachineLearningSkuSetting. </summary>
        /// <param name="name"> [Required] The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
        /// <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
        /// <returns> A new <see cref="Models.MachineLearningSkuSetting"/> instance for mocking. </returns>
        public static MachineLearningSkuSetting MachineLearningSkuSetting(string name = null, MachineLearningSkuTier? tier = null)
        {
            return new MachineLearningSkuSetting(name, tier);
        }

        /// <summary> Initializes a new instance of MachineLearningEndpointAuthToken. </summary>
        /// <param name="accessToken"> Access token for endpoint authentication. </param>
        /// <param name="expireOn"> Access token expiry time (UTC). </param>
        /// <param name="refreshOn"> Refresh access token after time (UTC). </param>
        /// <param name="tokenType"> Access token type. </param>
        /// <returns> A new <see cref="Models.MachineLearningEndpointAuthToken"/> instance for mocking. </returns>
        public static MachineLearningEndpointAuthToken MachineLearningEndpointAuthToken(string accessToken = null, DateTimeOffset? expireOn = null, DateTimeOffset? refreshOn = null, string tokenType = null)
        {
            return new MachineLearningEndpointAuthToken(accessToken, expireOn, refreshOn, tokenType);
        }

        /// <summary> Initializes a new instance of MachineLearningScheduleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> [Required] Additional attributes of the entity. </param>
        /// <returns> A new <see cref="MachineLearning.MachineLearningScheduleData"/> instance for mocking. </returns>
        public static MachineLearningScheduleData MachineLearningScheduleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, MachineLearningScheduleProperties properties = null)
        {
            return new MachineLearningScheduleData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningScheduleProperties. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="action">
        /// [Required] Specifies the action of the schedule
        /// Please note <see cref="MachineLearningScheduleAction"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningJobScheduleAction"/> and <see cref="MachineLearningEndpointScheduleAction"/>.
        /// </param>
        /// <param name="displayName"> Display name of schedule. </param>
        /// <param name="isEnabled"> Is the schedule enabled?. </param>
        /// <param name="provisioningState"> Provisioning state for the schedule. </param>
        /// <param name="trigger">
        /// [Required] Specifies the trigger details
        /// Please note <see cref="MachineLearningTriggerBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CronTrigger"/> and <see cref="MachineLearningRecurrenceTrigger"/>.
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningScheduleProperties"/> instance for mocking. </returns>
        public static MachineLearningScheduleProperties MachineLearningScheduleProperties(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, MachineLearningScheduleAction action = null, string displayName = null, bool? isEnabled = null, MachineLearningScheduleProvisioningStatus? provisioningState = null, MachineLearningTriggerBase trigger = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningScheduleProperties(description, properties, tags, action, displayName, isEnabled, provisioningState, trigger);
        }

        /// <summary> Initializes a new instance of MachineLearningScheduleAction. </summary>
        /// <param name="actionType"> [Required] Specifies the action type of the schedule. </param>
        /// <returns> A new <see cref="Models.MachineLearningScheduleAction"/> instance for mocking. </returns>
        public static MachineLearningScheduleAction MachineLearningScheduleAction(string actionType = "Unknown")
        {
            return new UnknownScheduleActionBase(actionType);
        }

        /// <summary> Initializes a new instance of MachineLearningTriggerBase. </summary>
        /// <param name="endTime">
        /// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
        /// Recommented format would be &quot;2022-06-01T00:00:01&quot;
        /// If not present, the schedule will run indefinitely
        /// </param>
        /// <param name="startTime"> Specifies start time of schedule in ISO 8601 format, but without a UTC offset. </param>
        /// <param name="timeZone">
        /// Specifies time zone in which the schedule runs.
        /// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
        /// </param>
        /// <param name="triggerType"> [Required]. </param>
        /// <returns> A new <see cref="Models.MachineLearningTriggerBase"/> instance for mocking. </returns>
        public static MachineLearningTriggerBase MachineLearningTriggerBase(string endTime = null, string startTime = null, string timeZone = null, string triggerType = "Unknown")
        {
            return new UnknownTriggerBase(endTime, startTime, timeZone, triggerType);
        }

        /// <summary> Initializes a new instance of MachineLearningUserFeature. </summary>
        /// <param name="id"> Specifies the feature ID. </param>
        /// <param name="displayName"> Specifies the feature name. </param>
        /// <param name="description"> Describes the feature for user experience. </param>
        /// <returns> A new <see cref="Models.MachineLearningUserFeature"/> instance for mocking. </returns>
        public static MachineLearningUserFeature MachineLearningUserFeature(string id = null, string displayName = null, string description = null)
        {
            return new MachineLearningUserFeature(id, displayName, description);
        }

        /// <summary> Initializes a new instance of MachineLearningAksCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"> AKS properties. </param>
        /// <returns> A new <see cref="Models.MachineLearningAksCompute"/> instance for mocking. </returns>
        public static MachineLearningAksCompute MachineLearningAksCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningAksComputeProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningAksCompute(ComputeType.Aks, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningAksComputeProperties. </summary>
        /// <param name="clusterFqdn"> Cluster full qualified domain name. </param>
        /// <param name="systemServices"> System services. </param>
        /// <param name="agentCount"> Number of agents. </param>
        /// <param name="agentVmSize"> Agent virtual machine size. </param>
        /// <param name="clusterPurpose"> Intended usage of the cluster. </param>
        /// <param name="sslConfiguration"> SSL configuration. </param>
        /// <param name="aksNetworkingConfiguration"> AKS networking configuration for vnet. </param>
        /// <param name="loadBalancerType"> Load Balancer Type. </param>
        /// <param name="loadBalancerSubnet"> Load Balancer Subnet. </param>
        /// <returns> A new <see cref="Models.MachineLearningAksComputeProperties"/> instance for mocking. </returns>
        public static MachineLearningAksComputeProperties MachineLearningAksComputeProperties(string clusterFqdn = null, IEnumerable<MachineLearningComputeSystemService> systemServices = null, int? agentCount = null, string agentVmSize = null, MachineLearningClusterPurpose? clusterPurpose = null, MachineLearningSslConfiguration sslConfiguration = null, MachineLearningAksNetworkingConfiguration aksNetworkingConfiguration = null, MachineLearningLoadBalancerType? loadBalancerType = null, string loadBalancerSubnet = null)
        {
            systemServices ??= new List<MachineLearningComputeSystemService>();

            return new MachineLearningAksComputeProperties(clusterFqdn, systemServices?.ToList(), agentCount, agentVmSize, clusterPurpose, sslConfiguration, aksNetworkingConfiguration, loadBalancerType, loadBalancerSubnet);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeSystemService. </summary>
        /// <param name="systemServiceType"> The type of this system service. </param>
        /// <param name="publicIPAddress"> Public IP address. </param>
        /// <param name="version"> The version for this type. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeSystemService"/> instance for mocking. </returns>
        public static MachineLearningComputeSystemService MachineLearningComputeSystemService(string systemServiceType = null, string publicIPAddress = null, string version = null)
        {
            return new MachineLearningComputeSystemService(systemServiceType, publicIPAddress, version);
        }

        /// <summary> Initializes a new instance of MachineLearningSslConfiguration. </summary>
        /// <param name="status"> Enable or disable ssl for scoring. </param>
        /// <param name="cert"> Cert data. </param>
        /// <param name="key"> Key data. </param>
        /// <param name="cname"> CNAME of the cert. </param>
        /// <param name="leafDomainLabel"> Leaf domain label of public endpoint. </param>
        /// <param name="overwriteExistingDomain"> Indicates whether to overwrite existing domain label. </param>
        /// <returns> A new <see cref="Models.MachineLearningSslConfiguration"/> instance for mocking. </returns>
        public static MachineLearningSslConfiguration MachineLearningSslConfiguration(MachineLearningSslConfigStatus? status = null, string cert = null, string key = null, string cname = null, string leafDomainLabel = null, bool? overwriteExistingDomain = null)
        {
            return new MachineLearningSslConfiguration(status, cert, key, cname, leafDomainLabel, overwriteExistingDomain);
        }

        /// <summary> Initializes a new instance of MachineLearningAksNetworkingConfiguration. </summary>
        /// <param name="subnetId"> Virtual network subnet resource ID the compute nodes belong to. </param>
        /// <param name="serviceCidr"> A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges. </param>
        /// <param name="dnsServiceIP"> An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr. </param>
        /// <param name="dockerBridgeCidr"> A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range. </param>
        /// <returns> A new <see cref="Models.MachineLearningAksNetworkingConfiguration"/> instance for mocking. </returns>
        public static MachineLearningAksNetworkingConfiguration MachineLearningAksNetworkingConfiguration(ResourceIdentifier subnetId = null, string serviceCidr = null, string dnsServiceIP = null, string dockerBridgeCidr = null)
        {
            return new MachineLearningAksNetworkingConfiguration(subnetId, serviceCidr, dnsServiceIP, dockerBridgeCidr);
        }

        /// <summary> Initializes a new instance of MachineLearningKubernetesCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"> Properties of Kubernetes. </param>
        /// <returns> A new <see cref="Models.MachineLearningKubernetesCompute"/> instance for mocking. </returns>
        public static MachineLearningKubernetesCompute MachineLearningKubernetesCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningKubernetesProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningKubernetesCompute(ComputeType.Kubernetes, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningKubernetesProperties. </summary>
        /// <param name="relayConnectionString"> Relay connection string. </param>
        /// <param name="serviceBusConnectionString"> ServiceBus connection string. </param>
        /// <param name="extensionPrincipalId"> Extension principal-id. </param>
        /// <param name="extensionInstanceReleaseTrain"> Extension instance release train. </param>
        /// <param name="vcName"> VC name. </param>
        /// <param name="namespace"> Compute namespace. </param>
        /// <param name="defaultInstanceType"> Default instance type. </param>
        /// <param name="instanceTypes"> Instance Type Schema. </param>
        /// <returns> A new <see cref="Models.MachineLearningKubernetesProperties"/> instance for mocking. </returns>
        public static MachineLearningKubernetesProperties MachineLearningKubernetesProperties(string relayConnectionString = null, string serviceBusConnectionString = null, string extensionPrincipalId = null, string extensionInstanceReleaseTrain = null, string vcName = null, string @namespace = null, string defaultInstanceType = null, IDictionary<string, MachineLearningInstanceTypeSchema> instanceTypes = null)
        {
            instanceTypes ??= new Dictionary<string, MachineLearningInstanceTypeSchema>();

            return new MachineLearningKubernetesProperties(relayConnectionString, serviceBusConnectionString, extensionPrincipalId, extensionInstanceReleaseTrain, vcName, @namespace, defaultInstanceType, instanceTypes);
        }

        /// <summary> Initializes a new instance of MachineLearningInstanceTypeSchema. </summary>
        /// <param name="nodeSelector"> Node Selector. </param>
        /// <param name="resources"> Resource requests/limits for this instance type. </param>
        /// <returns> A new <see cref="Models.MachineLearningInstanceTypeSchema"/> instance for mocking. </returns>
        public static MachineLearningInstanceTypeSchema MachineLearningInstanceTypeSchema(IDictionary<string, string> nodeSelector = null, MachineLearningInstanceTypeSchemaResources resources = null)
        {
            nodeSelector ??= new Dictionary<string, string>();

            return new MachineLearningInstanceTypeSchema(nodeSelector, resources);
        }

        /// <summary> Initializes a new instance of MachineLearningInstanceTypeSchemaResources. </summary>
        /// <param name="requests"> Resource requests for this instance type. </param>
        /// <param name="limits"> Resource limits for this instance type. </param>
        /// <returns> A new <see cref="Models.MachineLearningInstanceTypeSchemaResources"/> instance for mocking. </returns>
        public static MachineLearningInstanceTypeSchemaResources MachineLearningInstanceTypeSchemaResources(IDictionary<string, string> requests = null, IDictionary<string, string> limits = null)
        {
            requests ??= new Dictionary<string, string>();
            limits ??= new Dictionary<string, string>();

            return new MachineLearningInstanceTypeSchemaResources(requests, limits);
        }

        /// <summary> Initializes a new instance of AmlComputeProperties. </summary>
        /// <param name="osType"> Compute OS Type. </param>
        /// <param name="vmSize"> Virtual Machine Size. </param>
        /// <param name="vmPriority"> Virtual Machine priority. </param>
        /// <param name="virtualMachineImageId"> Virtual Machine image for AML Compute - windows only. </param>
        /// <param name="isolatedNetwork"> Network is isolated or not. </param>
        /// <param name="scaleSettings"> Scale settings for AML Compute. </param>
        /// <param name="userAccountCredentials"> Credentials for an administrator user account that will be created on each compute node. </param>
        /// <param name="subnetId"> Virtual network subnet resource ID the compute nodes belong to. </param>
        /// <param name="remoteLoginPortPublicAccess"> State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled. </param>
        /// <param name="allocationState"> Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute. </param>
        /// <param name="allocationStateTransitionOn"> The time at which the compute entered its current allocation state. </param>
        /// <param name="errors"> Collection of errors encountered by various compute nodes during node setup. </param>
        /// <param name="currentNodeCount"> The number of compute nodes currently assigned to the compute. </param>
        /// <param name="targetNodeCount"> The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation. </param>
        /// <param name="nodeStateCounts"> Counts of various node states on the compute. </param>
        /// <param name="enableNodePublicIP"> Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs. </param>
        /// <param name="propertyBag"> A property bag containing additional properties. </param>
        /// <returns> A new <see cref="Models.AmlComputeProperties"/> instance for mocking. </returns>
        public static AmlComputeProperties AmlComputeProperties(MachineLearningOSType? osType = null, string vmSize = null, MachineLearningVmPriority? vmPriority = null, string virtualMachineImageId = null, bool? isolatedNetwork = null, AmlComputeScaleSettings scaleSettings = null, MachineLearningUserAccountCredentials userAccountCredentials = null, ResourceIdentifier subnetId = null, MachineLearningRemoteLoginPortPublicAccess? remoteLoginPortPublicAccess = null, MachineLearningAllocationState? allocationState = null, DateTimeOffset? allocationStateTransitionOn = null, IEnumerable<MachineLearningError> errors = null, int? currentNodeCount = null, int? targetNodeCount = null, MachineLearningNodeStateCounts nodeStateCounts = null, bool? enableNodePublicIP = null, BinaryData propertyBag = null)
        {
            errors ??= new List<MachineLearningError>();

            return new AmlComputeProperties(osType, vmSize, vmPriority, virtualMachineImageId != null ? new VirtualMachineImage(virtualMachineImageId) : null, isolatedNetwork, scaleSettings, userAccountCredentials, subnetId != null ? new ResourceId(subnetId) : null, remoteLoginPortPublicAccess, allocationState, allocationStateTransitionOn, errors?.ToList(), currentNodeCount, targetNodeCount, nodeStateCounts, enableNodePublicIP, propertyBag);
        }

        /// <summary> Initializes a new instance of MachineLearningUserAccountCredentials. </summary>
        /// <param name="adminUserName"> Name of the administrator user account which can be used to SSH to nodes. </param>
        /// <param name="adminUserSshPublicKey"> SSH public key of the administrator user account. </param>
        /// <param name="adminUserPassword"> Password of the administrator user account. </param>
        /// <returns> A new <see cref="Models.MachineLearningUserAccountCredentials"/> instance for mocking. </returns>
        public static MachineLearningUserAccountCredentials MachineLearningUserAccountCredentials(string adminUserName = null, string adminUserSshPublicKey = null, string adminUserPassword = null)
        {
            return new MachineLearningUserAccountCredentials(adminUserName, adminUserSshPublicKey, adminUserPassword);
        }

        /// <summary> Initializes a new instance of MachineLearningNodeStateCounts. </summary>
        /// <param name="idleNodeCount"> Number of compute nodes in idle state. </param>
        /// <param name="runningNodeCount"> Number of compute nodes which are running jobs. </param>
        /// <param name="preparingNodeCount"> Number of compute nodes which are being prepared. </param>
        /// <param name="unusableNodeCount"> Number of compute nodes which are in unusable state. </param>
        /// <param name="leavingNodeCount"> Number of compute nodes which are leaving the amlCompute. </param>
        /// <param name="preemptedNodeCount"> Number of compute nodes which are in preempted state. </param>
        /// <returns> A new <see cref="Models.MachineLearningNodeStateCounts"/> instance for mocking. </returns>
        public static MachineLearningNodeStateCounts MachineLearningNodeStateCounts(int? idleNodeCount = null, int? runningNodeCount = null, int? preparingNodeCount = null, int? unusableNodeCount = null, int? leavingNodeCount = null, int? preemptedNodeCount = null)
        {
            return new MachineLearningNodeStateCounts(idleNodeCount, runningNodeCount, preparingNodeCount, unusableNodeCount, leavingNodeCount, preemptedNodeCount);
        }

        /// <summary> Initializes a new instance of AmlCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"> Properties of AmlCompute. </param>
        /// <returns> A new <see cref="Models.AmlCompute"/> instance for mocking. </returns>
        public static AmlCompute AmlCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, AmlComputeProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new AmlCompute(ComputeType.AmlCompute, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceProperties. </summary>
        /// <param name="vmSize"> Virtual Machine Size. </param>
        /// <param name="subnetId"> Virtual network subnet resource ID the compute nodes belong to. </param>
        /// <param name="applicationSharingPolicy"> Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role. </param>
        /// <param name="sshSettings"> Specifies policy and settings for SSH access. </param>
        /// <param name="connectivityEndpoints"> Describes all connectivity endpoints available for this ComputeInstance. </param>
        /// <param name="applications"> Describes available applications and their endpoints on this ComputeInstance. </param>
        /// <param name="createdBy"> Describes information on user who created this ComputeInstance. </param>
        /// <param name="errors"> Collection of errors encountered on this ComputeInstance. </param>
        /// <param name="state"> The current state of this ComputeInstance. </param>
        /// <param name="computeInstanceAuthorizationType"> The Compute Instance Authorization type. Available values are personal (default). </param>
        /// <param name="personalComputeInstanceAssignedUser"> Settings for a personal compute instance. </param>
        /// <param name="scripts"> Details of customized scripts to execute for setting up the cluster. </param>
        /// <param name="lastOperation"> The last operation on ComputeInstance. </param>
        /// <param name="schedulesComputeStartStop"> The list of schedules to be applied on the computes. </param>
        /// <param name="enableNodePublicIP"> Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs. </param>
        /// <param name="containers"> Describes informations of containers on this ComputeInstance. </param>
        /// <param name="dataDisks"> Describes informations of dataDisks on this ComputeInstance. </param>
        /// <param name="dataMounts"> Describes informations of dataMounts on this ComputeInstance. </param>
        /// <param name="versionsRuntime"> ComputeInstance version. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceProperties"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceProperties MachineLearningComputeInstanceProperties(string vmSize = null, ResourceIdentifier subnetId = null, MachineLearningApplicationSharingPolicy? applicationSharingPolicy = null, MachineLearningComputeInstanceSshSettings sshSettings = null, MachineLearningComputeInstanceConnectivityEndpoints connectivityEndpoints = null, IEnumerable<MachineLearningComputeInstanceApplication> applications = null, MachineLearningComputeInstanceCreatedBy createdBy = null, IEnumerable<MachineLearningError> errors = null, MachineLearningComputeInstanceState? state = null, MachineLearningComputeInstanceAuthorizationType? computeInstanceAuthorizationType = null, MachineLearningComputeInstanceAssignedUser personalComputeInstanceAssignedUser = null, MachineLearningScriptsToExecute scripts = null, MachineLearningComputeInstanceLastOperation lastOperation = null, IEnumerable<MachineLearningComputeStartStopSchedule> schedulesComputeStartStop = null, bool? enableNodePublicIP = null, IEnumerable<MachineLearningComputeInstanceContainer> containers = null, IEnumerable<MachineLearningComputeInstanceDataDisk> dataDisks = null, IEnumerable<MachineLearningComputeInstanceDataMount> dataMounts = null, string versionsRuntime = null)
        {
            applications ??= new List<MachineLearningComputeInstanceApplication>();
            errors ??= new List<MachineLearningError>();
            schedulesComputeStartStop ??= new List<MachineLearningComputeStartStopSchedule>();
            containers ??= new List<MachineLearningComputeInstanceContainer>();
            dataDisks ??= new List<MachineLearningComputeInstanceDataDisk>();
            dataMounts ??= new List<MachineLearningComputeInstanceDataMount>();

            return new MachineLearningComputeInstanceProperties(vmSize, subnetId != null ? new ResourceId(subnetId) : null, applicationSharingPolicy, sshSettings, connectivityEndpoints, applications?.ToList(), createdBy, errors?.ToList(), state, computeInstanceAuthorizationType, personalComputeInstanceAssignedUser != null ? new PersonalComputeInstanceSettings(personalComputeInstanceAssignedUser) : null, scripts != null ? new SetupScripts(scripts) : null, lastOperation, schedulesComputeStartStop != null ? new ComputeSchedules(schedulesComputeStartStop?.ToList()) : null, enableNodePublicIP, containers?.ToList(), dataDisks?.ToList(), dataMounts?.ToList(), versionsRuntime != null ? new ComputeInstanceVersion(versionsRuntime) : null);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceSshSettings. </summary>
        /// <param name="sshPublicAccess"> State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable. </param>
        /// <param name="adminUserName"> Describes the admin user name. </param>
        /// <param name="sshPort"> Describes the port for connecting through SSH. </param>
        /// <param name="adminPublicKey"> Specifies the SSH rsa public key file as a string. Use &quot;ssh-keygen -t rsa -b 2048&quot; to generate your SSH key pairs. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceSshSettings"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceSshSettings MachineLearningComputeInstanceSshSettings(MachineLearningSshPublicAccess? sshPublicAccess = null, string adminUserName = null, int? sshPort = null, string adminPublicKey = null)
        {
            return new MachineLearningComputeInstanceSshSettings(sshPublicAccess, adminUserName, sshPort, adminPublicKey);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceConnectivityEndpoints. </summary>
        /// <param name="publicIPAddress"> Public IP Address of this ComputeInstance. </param>
        /// <param name="privateIPAddress"> Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed). </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceConnectivityEndpoints"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceConnectivityEndpoints MachineLearningComputeInstanceConnectivityEndpoints(string publicIPAddress = null, string privateIPAddress = null)
        {
            return new MachineLearningComputeInstanceConnectivityEndpoints(publicIPAddress, privateIPAddress);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceApplication. </summary>
        /// <param name="displayName"> Name of the ComputeInstance application. </param>
        /// <param name="endpointUri"> Application&apos; endpoint URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceApplication"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceApplication MachineLearningComputeInstanceApplication(string displayName = null, Uri endpointUri = null)
        {
            return new MachineLearningComputeInstanceApplication(displayName, endpointUri);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceCreatedBy. </summary>
        /// <param name="userName"> Name of the user. </param>
        /// <param name="userOrgId"> Uniquely identifies user&apos; Azure Active Directory organization. </param>
        /// <param name="userId"> Uniquely identifies the user within his/her organization. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceCreatedBy"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceCreatedBy MachineLearningComputeInstanceCreatedBy(string userName = null, string userOrgId = null, string userId = null)
        {
            return new MachineLearningComputeInstanceCreatedBy(userName, userOrgId, userId);
        }

        /// <summary> Initializes a new instance of MachineLearningScriptsToExecute. </summary>
        /// <param name="startupScript"> Script that&apos;s run every time the machine starts. </param>
        /// <param name="creationScript"> Script that&apos;s run only once during provision of the compute. </param>
        /// <returns> A new <see cref="Models.MachineLearningScriptsToExecute"/> instance for mocking. </returns>
        public static MachineLearningScriptsToExecute MachineLearningScriptsToExecute(MachineLearningScriptReference startupScript = null, MachineLearningScriptReference creationScript = null)
        {
            return new MachineLearningScriptsToExecute(startupScript, creationScript);
        }

        /// <summary> Initializes a new instance of MachineLearningScriptReference. </summary>
        /// <param name="scriptSource"> The storage source of the script: workspace. </param>
        /// <param name="scriptData"> The location of scripts in the mounted volume. </param>
        /// <param name="scriptArguments"> Optional command line arguments passed to the script to run. </param>
        /// <param name="timeout"> Optional time period passed to timeout command. </param>
        /// <returns> A new <see cref="Models.MachineLearningScriptReference"/> instance for mocking. </returns>
        public static MachineLearningScriptReference MachineLearningScriptReference(string scriptSource = null, string scriptData = null, string scriptArguments = null, string timeout = null)
        {
            return new MachineLearningScriptReference(scriptSource, scriptData, scriptArguments, timeout);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceLastOperation. </summary>
        /// <param name="operationName"> Name of the last operation. </param>
        /// <param name="operationOn"> Time of the last operation. </param>
        /// <param name="operationStatus"> Operation status. </param>
        /// <param name="operationTrigger"> Trigger of operation. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceLastOperation"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceLastOperation MachineLearningComputeInstanceLastOperation(MachineLearningOperationName? operationName = null, DateTimeOffset? operationOn = null, MachineLearningOperationStatus? operationStatus = null, MachineLearningOperationTrigger? operationTrigger = null)
        {
            return new MachineLearningComputeInstanceLastOperation(operationName, operationOn, operationStatus, operationTrigger);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeStartStopSchedule. </summary>
        /// <param name="id"> A system assigned id for the schedule. </param>
        /// <param name="provisioningStatus"> The current deployment state of schedule. </param>
        /// <param name="status"> Is the schedule enabled or disabled?. </param>
        /// <param name="action"> [Required] The compute power action. </param>
        /// <param name="triggerType"> [Required] The schedule trigger type. </param>
        /// <param name="recurrence"> Required if triggerType is Recurrence. </param>
        /// <param name="cron"> Required if triggerType is Cron. </param>
        /// <param name="schedule"> [Deprecated] Not used any more. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeStartStopSchedule"/> instance for mocking. </returns>
        public static MachineLearningComputeStartStopSchedule MachineLearningComputeStartStopSchedule(string id = null, MachineLearningComputeProvisioningStatus? provisioningStatus = null, MachineLearningScheduleStatus? status = null, MachineLearningComputePowerAction? action = null, MachineLearningTriggerType? triggerType = null, MachineLearningRecurrenceTrigger recurrence = null, CronTrigger cron = null, MachineLearningScheduleBase schedule = null)
        {
            return new MachineLearningComputeStartStopSchedule(id, provisioningStatus, status, action, triggerType, recurrence, cron, schedule);
        }

        /// <summary> Initializes a new instance of MachineLearningRecurrenceTrigger. </summary>
        /// <param name="endTime">
        /// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
        /// Recommented format would be &quot;2022-06-01T00:00:01&quot;
        /// If not present, the schedule will run indefinitely
        /// </param>
        /// <param name="startTime"> Specifies start time of schedule in ISO 8601 format, but without a UTC offset. </param>
        /// <param name="timeZone">
        /// Specifies time zone in which the schedule runs.
        /// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
        /// </param>
        /// <param name="frequency"> [Required] The frequency to trigger schedule. </param>
        /// <param name="interval"> [Required] Specifies schedule interval in conjunction with frequency. </param>
        /// <param name="schedule"> The recurrence schedule. </param>
        /// <returns> A new <see cref="Models.MachineLearningRecurrenceTrigger"/> instance for mocking. </returns>
        public static MachineLearningRecurrenceTrigger MachineLearningRecurrenceTrigger(string endTime = null, string startTime = null, string timeZone = null, MachineLearningRecurrenceFrequency frequency = default, int interval = default, MachineLearningRecurrenceSchedule schedule = null)
        {
            return new MachineLearningRecurrenceTrigger(endTime, startTime, timeZone, MachineLearningTriggerType.Recurrence, frequency, interval, schedule);
        }

        /// <summary> Initializes a new instance of MachineLearningRecurrenceSchedule. </summary>
        /// <param name="hours"> [Required] List of hours for the schedule. </param>
        /// <param name="minutes"> [Required] List of minutes for the schedule. </param>
        /// <param name="monthDays"> List of month days for the schedule. </param>
        /// <param name="weekDays"> List of days for the schedule. </param>
        /// <returns> A new <see cref="Models.MachineLearningRecurrenceSchedule"/> instance for mocking. </returns>
        public static MachineLearningRecurrenceSchedule MachineLearningRecurrenceSchedule(IEnumerable<int> hours = null, IEnumerable<int> minutes = null, IEnumerable<int> monthDays = null, IEnumerable<MachineLearningDayOfWeek> weekDays = null)
        {
            hours ??= new List<int>();
            minutes ??= new List<int>();
            monthDays ??= new List<int>();
            weekDays ??= new List<MachineLearningDayOfWeek>();

            return new MachineLearningRecurrenceSchedule(hours?.ToList(), minutes?.ToList(), monthDays?.ToList(), weekDays?.ToList());
        }

        /// <summary> Initializes a new instance of CronTrigger. </summary>
        /// <param name="endTime">
        /// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
        /// Recommented format would be &quot;2022-06-01T00:00:01&quot;
        /// If not present, the schedule will run indefinitely
        /// </param>
        /// <param name="startTime"> Specifies start time of schedule in ISO 8601 format, but without a UTC offset. </param>
        /// <param name="timeZone">
        /// Specifies time zone in which the schedule runs.
        /// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
        /// </param>
        /// <param name="expression">
        /// [Required] Specifies cron expression of schedule.
        /// The expression should follow NCronTab format.
        /// </param>
        /// <returns> A new <see cref="Models.CronTrigger"/> instance for mocking. </returns>
        public static CronTrigger CronTrigger(string endTime = null, string startTime = null, string timeZone = null, string expression = null)
        {
            return new CronTrigger(endTime, startTime, timeZone, MachineLearningTriggerType.Cron, expression);
        }

        /// <summary> Initializes a new instance of MachineLearningScheduleBase. </summary>
        /// <param name="id"> A system assigned id for the schedule. </param>
        /// <param name="provisioningStatus"> The current deployment state of schedule. </param>
        /// <param name="status"> Is the schedule enabled or disabled?. </param>
        /// <returns> A new <see cref="Models.MachineLearningScheduleBase"/> instance for mocking. </returns>
        public static MachineLearningScheduleBase MachineLearningScheduleBase(string id = null, MachineLearningScheduleProvisioningState? provisioningStatus = null, MachineLearningScheduleStatus? status = null)
        {
            return new MachineLearningScheduleBase(id, provisioningStatus, status);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceContainer. </summary>
        /// <param name="name"> Name of the ComputeInstance container. </param>
        /// <param name="autosave"> Auto save settings. </param>
        /// <param name="gpu"> Information of GPU. </param>
        /// <param name="network"> network of this container. </param>
        /// <param name="environment"> Environment information of this container. </param>
        /// <param name="services"> services of this containers. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceContainer"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceContainer MachineLearningComputeInstanceContainer(string name = null, MachineLearningComputeInstanceAutosave? autosave = null, string gpu = null, MachineLearningNetwork? network = null, MachineLearningComputeInstanceEnvironmentInfo environment = null, IEnumerable<BinaryData> services = null)
        {
            services ??= new List<BinaryData>();

            return new MachineLearningComputeInstanceContainer(name, autosave, gpu, network, environment, services?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceEnvironmentInfo. </summary>
        /// <param name="name"> name of environment. </param>
        /// <param name="version"> version of environment. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceEnvironmentInfo"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceEnvironmentInfo MachineLearningComputeInstanceEnvironmentInfo(string name = null, string version = null)
        {
            return new MachineLearningComputeInstanceEnvironmentInfo(name, version);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceDataDisk. </summary>
        /// <param name="caching"> Caching type of Data Disk. </param>
        /// <param name="diskSizeGB"> The initial disk size in gigabytes. </param>
        /// <param name="lun"> The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. </param>
        /// <param name="storageAccountType"> type of this storage account. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceDataDisk"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceDataDisk MachineLearningComputeInstanceDataDisk(MachineLearningCachingType? caching = null, int? diskSizeGB = null, int? lun = null, MachineLearningStorageAccountType? storageAccountType = null)
        {
            return new MachineLearningComputeInstanceDataDisk(caching, diskSizeGB, lun, storageAccountType);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstanceDataMount. </summary>
        /// <param name="source"> Source of the ComputeInstance data mount. </param>
        /// <param name="sourceType"> Data source type. </param>
        /// <param name="mountName"> name of the ComputeInstance data mount. </param>
        /// <param name="mountAction"> Mount Action. </param>
        /// <param name="createdBy"> who this data mount created by. </param>
        /// <param name="mountPath"> Path of this data mount. </param>
        /// <param name="mountState"> Mount state. </param>
        /// <param name="mountedOn"> The time when the disk mounted. </param>
        /// <param name="error"> Error of this data mount. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstanceDataMount"/> instance for mocking. </returns>
        public static MachineLearningComputeInstanceDataMount MachineLearningComputeInstanceDataMount(string source = null, MachineLearningSourceType? sourceType = null, string mountName = null, MachineLearningMountAction? mountAction = null, string createdBy = null, string mountPath = null, MachineLearningMountState? mountState = null, DateTimeOffset? mountedOn = null, string error = null)
        {
            return new MachineLearningComputeInstanceDataMount(source, sourceType, mountName, mountAction, createdBy, mountPath, mountState, mountedOn, error);
        }

        /// <summary> Initializes a new instance of MachineLearningComputeInstance. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"> Properties of ComputeInstance. </param>
        /// <returns> A new <see cref="Models.MachineLearningComputeInstance"/> instance for mocking. </returns>
        public static MachineLearningComputeInstance MachineLearningComputeInstance(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningComputeInstanceProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningComputeInstance(ComputeType.ComputeInstance, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningVirtualMachineCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.MachineLearningVirtualMachineCompute"/> instance for mocking. </returns>
        public static MachineLearningVirtualMachineCompute MachineLearningVirtualMachineCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningVirtualMachineProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningVirtualMachineCompute(ComputeType.VirtualMachine, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningVirtualMachineProperties. </summary>
        /// <param name="virtualMachineSize"> Virtual Machine size. </param>
        /// <param name="sshPort"> Port open for ssh connections. </param>
        /// <param name="notebookServerPort"> Notebook server port open for ssh connections. </param>
        /// <param name="address"> Public IP address of the virtual machine. </param>
        /// <param name="administratorAccount"> Admin credentials for virtual machine. </param>
        /// <param name="isNotebookInstanceCompute"> Indicates whether this compute will be used for running notebooks. </param>
        /// <returns> A new <see cref="Models.MachineLearningVirtualMachineProperties"/> instance for mocking. </returns>
        public static MachineLearningVirtualMachineProperties MachineLearningVirtualMachineProperties(string virtualMachineSize = null, int? sshPort = null, int? notebookServerPort = null, IPAddress address = null, MachineLearningVmSshCredentials administratorAccount = null, bool? isNotebookInstanceCompute = null)
        {
            return new MachineLearningVirtualMachineProperties(virtualMachineSize, sshPort, notebookServerPort, address, administratorAccount, isNotebookInstanceCompute);
        }

        /// <summary> Initializes a new instance of MachineLearningVmSshCredentials. </summary>
        /// <param name="username"> Username of admin account. </param>
        /// <param name="password"> Password of admin account. </param>
        /// <param name="publicKeyData"> Public key data. </param>
        /// <param name="privateKeyData"> Private key data. </param>
        /// <returns> A new <see cref="Models.MachineLearningVmSshCredentials"/> instance for mocking. </returns>
        public static MachineLearningVmSshCredentials MachineLearningVmSshCredentials(string username = null, string password = null, string publicKeyData = null, string privateKeyData = null)
        {
            return new MachineLearningVmSshCredentials(username, password, publicKeyData, privateKeyData);
        }

        /// <summary> Initializes a new instance of MachineLearningHDInsightProperties. </summary>
        /// <param name="sshPort"> Port open for ssh connections on the master node of the cluster. </param>
        /// <param name="address"> Public IP address of the master node of the cluster. </param>
        /// <param name="administratorAccount"> Admin credentials for master node of the cluster. </param>
        /// <returns> A new <see cref="Models.MachineLearningHDInsightProperties"/> instance for mocking. </returns>
        public static MachineLearningHDInsightProperties MachineLearningHDInsightProperties(int? sshPort = null, IPAddress address = null, MachineLearningVmSshCredentials administratorAccount = null)
        {
            return new MachineLearningHDInsightProperties(sshPort, address, administratorAccount);
        }

        /// <summary> Initializes a new instance of MachineLearningHDInsightCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"> HDInsight compute properties. </param>
        /// <returns> A new <see cref="Models.MachineLearningHDInsightCompute"/> instance for mocking. </returns>
        public static MachineLearningHDInsightCompute MachineLearningHDInsightCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningHDInsightProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningHDInsightCompute(ComputeType.HDInsight, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningDataFactoryCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <returns> A new <see cref="Models.MachineLearningDataFactoryCompute"/> instance for mocking. </returns>
        public static MachineLearningDataFactoryCompute MachineLearningDataFactoryCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningDataFactoryCompute(ComputeType.DataFactory, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth);
        }

        /// <summary> Initializes a new instance of MachineLearningDatabricksProperties. </summary>
        /// <param name="databricksAccessToken"> Databricks access token. </param>
        /// <param name="workspaceUri"> Workspace Url. </param>
        /// <returns> A new <see cref="Models.MachineLearningDatabricksProperties"/> instance for mocking. </returns>
        public static MachineLearningDatabricksProperties MachineLearningDatabricksProperties(string databricksAccessToken = null, Uri workspaceUri = null)
        {
            return new MachineLearningDatabricksProperties(databricksAccessToken, workspaceUri);
        }

        /// <summary> Initializes a new instance of MachineLearningDatabricksCompute. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"> Properties of Databricks. </param>
        /// <returns> A new <see cref="Models.MachineLearningDatabricksCompute"/> instance for mocking. </returns>
        public static MachineLearningDatabricksCompute MachineLearningDatabricksCompute(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningDatabricksProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningDatabricksCompute(ComputeType.Databricks, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningDataLakeAnalytics. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="dataLakeStoreAccountName"></param>
        /// <returns> A new <see cref="Models.MachineLearningDataLakeAnalytics"/> instance for mocking. </returns>
        public static MachineLearningDataLakeAnalytics MachineLearningDataLakeAnalytics(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, string dataLakeStoreAccountName = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningDataLakeAnalytics(ComputeType.DataLakeAnalytics, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, dataLakeStoreAccountName != null ? new MachineLearningDataLakeAnalyticsProperties(dataLakeStoreAccountName) : null);
        }

        /// <summary> Initializes a new instance of MachineLearningSynapseSpark. </summary>
        /// <param name="computeLocation"> Location for the underlying compute. </param>
        /// <param name="provisioningState"> The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed. </param>
        /// <param name="description"> The description of the Machine Learning compute. </param>
        /// <param name="createdOn"> The time at which the compute was created. </param>
        /// <param name="modifiedOn"> The time at which the compute was last modified. </param>
        /// <param name="resourceId"> ARM resource id of the underlying compute. </param>
        /// <param name="provisioningErrors"> Errors during provisioning. </param>
        /// <param name="isAttachedCompute"> Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication. </param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.MachineLearningSynapseSpark"/> instance for mocking. </returns>
        public static MachineLearningSynapseSpark MachineLearningSynapseSpark(string computeLocation = null, MachineLearningProvisioningState? provisioningState = null, string description = null, DateTimeOffset? createdOn = null, DateTimeOffset? modifiedOn = null, ResourceIdentifier resourceId = null, IEnumerable<MachineLearningError> provisioningErrors = null, bool? isAttachedCompute = null, bool? disableLocalAuth = null, MachineLearningSynapseSparkProperties properties = null)
        {
            provisioningErrors ??= new List<MachineLearningError>();

            return new MachineLearningSynapseSpark(ComputeType.SynapseSpark, computeLocation, provisioningState, description, createdOn, modifiedOn, resourceId, provisioningErrors?.ToList(), isAttachedCompute, disableLocalAuth, properties);
        }

        /// <summary> Initializes a new instance of MachineLearningSynapseSparkProperties. </summary>
        /// <param name="autoScaleProperties"> Auto scale properties. </param>
        /// <param name="autoPauseProperties"> Auto pause properties. </param>
        /// <param name="sparkVersion"> Spark version. </param>
        /// <param name="nodeCount"> The number of compute nodes currently assigned to the compute. </param>
        /// <param name="nodeSize"> Node size. </param>
        /// <param name="nodeSizeFamily"> Node size family. </param>
        /// <param name="subscriptionId"> Azure subscription identifier. </param>
        /// <param name="resourceGroup"> Name of the resource group in which workspace is located. </param>
        /// <param name="workspaceName"> Name of Azure Machine Learning workspace. </param>
        /// <param name="poolName"> Pool name. </param>
        /// <returns> A new <see cref="Models.MachineLearningSynapseSparkProperties"/> instance for mocking. </returns>
        public static MachineLearningSynapseSparkProperties MachineLearningSynapseSparkProperties(MachineLearningAutoScaleProperties autoScaleProperties = null, MachineLearningAutoPauseProperties autoPauseProperties = null, string sparkVersion = null, int? nodeCount = null, string nodeSize = null, string nodeSizeFamily = null, string subscriptionId = null, string resourceGroup = null, string workspaceName = null, string poolName = null)
        {
            return new MachineLearningSynapseSparkProperties(autoScaleProperties, autoPauseProperties, sparkVersion, nodeCount, nodeSize, nodeSizeFamily, subscriptionId, resourceGroup, workspaceName, poolName);
        }

        /// <summary> Initializes a new instance of MachineLearningAutoScaleProperties. </summary>
        /// <param name="minNodeCount"></param>
        /// <param name="isEnabled"></param>
        /// <param name="maxNodeCount"></param>
        /// <returns> A new <see cref="Models.MachineLearningAutoScaleProperties"/> instance for mocking. </returns>
        public static MachineLearningAutoScaleProperties MachineLearningAutoScaleProperties(int? minNodeCount = null, bool? isEnabled = null, int? maxNodeCount = null)
        {
            return new MachineLearningAutoScaleProperties(minNodeCount, isEnabled, maxNodeCount);
        }

        /// <summary> Initializes a new instance of MachineLearningAutoPauseProperties. </summary>
        /// <param name="delayInMinutes"></param>
        /// <param name="isEnabled"></param>
        /// <returns> A new <see cref="Models.MachineLearningAutoPauseProperties"/> instance for mocking. </returns>
        public static MachineLearningAutoPauseProperties MachineLearningAutoPauseProperties(int? delayInMinutes = null, bool? isEnabled = null)
        {
            return new MachineLearningAutoPauseProperties(delayInMinutes, isEnabled);
        }

        /// <summary> Initializes a new instance of MachineLearningAksComputeSecrets. </summary>
        /// <param name="userKubeConfig"> Content of kubeconfig file that can be used to connect to the Kubernetes cluster. </param>
        /// <param name="adminKubeConfig"> Content of kubeconfig file that can be used to connect to the Kubernetes cluster. </param>
        /// <param name="imagePullSecretName"> Image registry pull secret. </param>
        /// <returns> A new <see cref="Models.MachineLearningAksComputeSecrets"/> instance for mocking. </returns>
        public static MachineLearningAksComputeSecrets MachineLearningAksComputeSecrets(string userKubeConfig = null, string adminKubeConfig = null, string imagePullSecretName = null)
        {
            return new MachineLearningAksComputeSecrets(ComputeType.Aks, userKubeConfig, adminKubeConfig, imagePullSecretName);
        }

        /// <summary> Initializes a new instance of MachineLearningVirtualMachineSecrets. </summary>
        /// <param name="administratorAccount"> Admin credentials for virtual machine. </param>
        /// <returns> A new <see cref="Models.MachineLearningVirtualMachineSecrets"/> instance for mocking. </returns>
        public static MachineLearningVirtualMachineSecrets MachineLearningVirtualMachineSecrets(MachineLearningVmSshCredentials administratorAccount = null)
        {
            return new MachineLearningVirtualMachineSecrets(ComputeType.VirtualMachine, administratorAccount);
        }

        /// <summary> Initializes a new instance of MachineLearningDatabricksComputeSecrets. </summary>
        /// <param name="databricksAccessToken"> access token for databricks account. </param>
        /// <returns> A new <see cref="Models.MachineLearningDatabricksComputeSecrets"/> instance for mocking. </returns>
        public static MachineLearningDatabricksComputeSecrets MachineLearningDatabricksComputeSecrets(string databricksAccessToken = null)
        {
            return new MachineLearningDatabricksComputeSecrets(ComputeType.Databricks, databricksAccessToken);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceConnectionUsernamePassword. </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceConnectionUsernamePassword"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceConnectionUsernamePassword MachineLearningWorkspaceConnectionUsernamePassword(string username = null, string password = null)
        {
            return new MachineLearningWorkspaceConnectionUsernamePassword(username, password);
        }

        /// <summary> Initializes a new instance of MachineLearningPatAuthTypeWorkspaceConnection. </summary>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="target"></param>
        /// <param name="value"> Value details of the workspace connection. </param>
        /// <param name="valueFormat"> format for the workspace connection value. </param>
        /// <param name="credentialsPat"></param>
        /// <returns> A new <see cref="Models.MachineLearningPatAuthTypeWorkspaceConnection"/> instance for mocking. </returns>
        public static MachineLearningPatAuthTypeWorkspaceConnection MachineLearningPatAuthTypeWorkspaceConnection(MachineLearningConnectionCategory? category = null, string target = null, string value = null, MachineLearningValueFormat? valueFormat = null, string credentialsPat = null)
        {
            return new MachineLearningPatAuthTypeWorkspaceConnection(MachineLearningConnectionAuthType.Pat, category, target, value, valueFormat, credentialsPat != null ? new WorkspaceConnectionPersonalAccessToken(credentialsPat) : null);
        }

        /// <summary> Initializes a new instance of MachineLearningSasAuthTypeWorkspaceConnection. </summary>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="target"></param>
        /// <param name="value"> Value details of the workspace connection. </param>
        /// <param name="valueFormat"> format for the workspace connection value. </param>
        /// <param name="credentialsSas"></param>
        /// <returns> A new <see cref="Models.MachineLearningSasAuthTypeWorkspaceConnection"/> instance for mocking. </returns>
        public static MachineLearningSasAuthTypeWorkspaceConnection MachineLearningSasAuthTypeWorkspaceConnection(MachineLearningConnectionCategory? category = null, string target = null, string value = null, MachineLearningValueFormat? valueFormat = null, string credentialsSas = null)
        {
            return new MachineLearningSasAuthTypeWorkspaceConnection(MachineLearningConnectionAuthType.Sas, category, target, value, valueFormat, credentialsSas != null ? new WorkspaceConnectionSharedAccessSignature(credentialsSas) : null);
        }

        /// <summary> Initializes a new instance of MachineLearningUsernamePasswordAuthTypeWorkspaceConnection. </summary>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="target"></param>
        /// <param name="value"> Value details of the workspace connection. </param>
        /// <param name="valueFormat"> format for the workspace connection value. </param>
        /// <param name="credentials"></param>
        /// <returns> A new <see cref="Models.MachineLearningUsernamePasswordAuthTypeWorkspaceConnection"/> instance for mocking. </returns>
        public static MachineLearningUsernamePasswordAuthTypeWorkspaceConnection MachineLearningUsernamePasswordAuthTypeWorkspaceConnection(MachineLearningConnectionCategory? category = null, string target = null, string value = null, MachineLearningValueFormat? valueFormat = null, MachineLearningWorkspaceConnectionUsernamePassword credentials = null)
        {
            return new MachineLearningUsernamePasswordAuthTypeWorkspaceConnection(MachineLearningConnectionAuthType.UsernamePassword, category, target, value, valueFormat, credentials);
        }

        /// <summary> Initializes a new instance of MachineLearningNoneAuthTypeWorkspaceConnection. </summary>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="target"></param>
        /// <param name="value"> Value details of the workspace connection. </param>
        /// <param name="valueFormat"> format for the workspace connection value. </param>
        /// <returns> A new <see cref="Models.MachineLearningNoneAuthTypeWorkspaceConnection"/> instance for mocking. </returns>
        public static MachineLearningNoneAuthTypeWorkspaceConnection MachineLearningNoneAuthTypeWorkspaceConnection(MachineLearningConnectionCategory? category = null, string target = null, string value = null, MachineLearningValueFormat? valueFormat = null)
        {
            return new MachineLearningNoneAuthTypeWorkspaceConnection(MachineLearningConnectionAuthType.None, category, target, value, valueFormat);
        }

        /// <summary> Initializes a new instance of MachineLearningWorkspaceConnectionManagedIdentity. </summary>
        /// <param name="resourceId"></param>
        /// <param name="clientId"></param>
        /// <returns> A new <see cref="Models.MachineLearningWorkspaceConnectionManagedIdentity"/> instance for mocking. </returns>
        public static MachineLearningWorkspaceConnectionManagedIdentity MachineLearningWorkspaceConnectionManagedIdentity(ResourceIdentifier resourceId = null, string clientId = null)
        {
            return new MachineLearningWorkspaceConnectionManagedIdentity(resourceId, clientId);
        }

        /// <summary> Initializes a new instance of MachineLearningManagedIdentityAuthTypeWorkspaceConnection. </summary>
        /// <param name="category"> Category of the connection. </param>
        /// <param name="target"></param>
        /// <param name="value"> Value details of the workspace connection. </param>
        /// <param name="valueFormat"> format for the workspace connection value. </param>
        /// <param name="credentials"></param>
        /// <returns> A new <see cref="Models.MachineLearningManagedIdentityAuthTypeWorkspaceConnection"/> instance for mocking. </returns>
        public static MachineLearningManagedIdentityAuthTypeWorkspaceConnection MachineLearningManagedIdentityAuthTypeWorkspaceConnection(MachineLearningConnectionCategory? category = null, string target = null, string value = null, MachineLearningValueFormat? valueFormat = null, MachineLearningWorkspaceConnectionManagedIdentity credentials = null)
        {
            return new MachineLearningManagedIdentityAuthTypeWorkspaceConnection(MachineLearningConnectionAuthType.ManagedIdentity, category, target, value, valueFormat, credentials);
        }

        /// <summary> Initializes a new instance of MachineLearningAccountKeyDatastoreCredentials. </summary>
        /// <param name="secrets"> [Required] Storage account secrets. </param>
        /// <returns> A new <see cref="Models.MachineLearningAccountKeyDatastoreCredentials"/> instance for mocking. </returns>
        public static MachineLearningAccountKeyDatastoreCredentials MachineLearningAccountKeyDatastoreCredentials(MachineLearningAccountKeyDatastoreSecrets secrets = null)
        {
            return new MachineLearningAccountKeyDatastoreCredentials(CredentialsType.AccountKey, secrets);
        }

        /// <summary> Initializes a new instance of MachineLearningAccountKeyDatastoreSecrets. </summary>
        /// <param name="key"> Storage account key. </param>
        /// <returns> A new <see cref="Models.MachineLearningAccountKeyDatastoreSecrets"/> instance for mocking. </returns>
        public static MachineLearningAccountKeyDatastoreSecrets MachineLearningAccountKeyDatastoreSecrets(string key = null)
        {
            return new MachineLearningAccountKeyDatastoreSecrets(SecretsType.AccountKey, key);
        }

        /// <summary> Initializes a new instance of AmlToken. </summary>
        /// <returns> A new <see cref="Models.AmlToken"/> instance for mocking. </returns>
        public static AmlToken AmlToken()
        {
            return new AmlToken(IdentityConfigurationType.AmlToken);
        }

        /// <summary> Initializes a new instance of AutoForecastHorizon. </summary>
        /// <returns> A new <see cref="Models.AutoForecastHorizon"/> instance for mocking. </returns>
        public static AutoForecastHorizon AutoForecastHorizon()
        {
            return new AutoForecastHorizon(ForecastHorizonMode.Auto);
        }

        /// <summary> Initializes a new instance of ForecastHorizon. </summary>
        /// <param name="mode"> [Required] Set forecast horizon value selection mode. </param>
        /// <returns> A new <see cref="Models.ForecastHorizon"/> instance for mocking. </returns>
        public static ForecastHorizon ForecastHorizon(string mode = "Unknown")
        {
            return new UnknownForecastHorizon(mode);
        }

        /// <summary> Initializes a new instance of AutoMLJob. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="componentId"> ARM resource ID of the component resource. </param>
        /// <param name="computeId"> ARM resource ID of the compute resource. </param>
        /// <param name="displayName"> Display name of job. </param>
        /// <param name="experimentName"> The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment. </param>
        /// <param name="identity">
        /// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        /// Defaults to AmlToken if null.
        /// Please note <see cref="MachineLearningIdentityConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmlToken"/>, <see cref="MachineLearningManagedIdentity"/> and <see cref="MachineLearningUserIdentity"/>.
        /// </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="services">
        /// List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        /// </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="environmentId">
        /// The ARM resource ID of the Environment specification for the job.
        /// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
        /// </param>
        /// <param name="environmentVariables"> Environment variables included in the job. </param>
        /// <param name="outputs">
        /// Mapping of output data bindings used in the job.
        /// Please note <see cref="MachineLearningJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobOutput"/>, <see cref="MachineLearningFlowModelJobOutput"/>, <see cref="MachineLearningTableJobOutput"/>, <see cref="MachineLearningTritonModelJobOutput"/>, <see cref="MachineLearningUriFileJobOutput"/> and <see cref="MachineLearningUriFolderJobOutput"/>.
        /// </param>
        /// <param name="resources"> Compute Resource configuration for the job. </param>
        /// <param name="taskDetails">
        /// [Required] This represents scenario which can be one of Tables/NLP/Image
        /// Please note <see cref="AutoMLVertical"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ClassificationTask"/>, <see cref="MachineLearningForecasting"/>, <see cref="ImageClassification"/>, <see cref="ImageClassificationMultilabel"/>, <see cref="ImageInstanceSegmentation"/>, <see cref="ImageObjectDetection"/>, <see cref="AutoMLVerticalRegression"/>, <see cref="TextClassification"/>, <see cref="TextClassificationMultilabel"/> and <see cref="TextNer"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AutoMLJob"/> instance for mocking. </returns>
        public static AutoMLJob AutoMLJob(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, ResourceIdentifier componentId = null, ResourceIdentifier computeId = null, string displayName = null, string experimentName = null, MachineLearningIdentityConfiguration identity = null, bool? isArchived = null, IDictionary<string, MachineLearningJobService> services = null, MachineLearningJobStatus? status = null, string environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, MachineLearningJobOutput> outputs = null, MachineLearningJobResourceConfiguration resources = null, AutoMLVertical taskDetails = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            services ??= new Dictionary<string, MachineLearningJobService>();
            environmentVariables ??= new Dictionary<string, string>();
            outputs ??= new Dictionary<string, MachineLearningJobOutput>();

            return new AutoMLJob(description, properties, tags, componentId, computeId, displayName, experimentName, identity, isArchived, JobType.AutoML, services, status, environmentId, environmentVariables, outputs, resources, taskDetails);
        }

        /// <summary> Initializes a new instance of MachineLearningJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="jobOutputType"> [Required] Specifies the type of job. </param>
        /// <returns> A new <see cref="Models.MachineLearningJobOutput"/> instance for mocking. </returns>
        public static MachineLearningJobOutput MachineLearningJobOutput(string description = null, string jobOutputType = "Unknown")
        {
            return new UnknownJobOutput(description, jobOutputType);
        }

        /// <summary> Initializes a new instance of MachineLearningJobResourceConfiguration. </summary>
        /// <param name="instanceCount"> Optional number of instances or nodes used by the compute target. </param>
        /// <param name="instanceType"> Optional type of VM used as supported by the compute target. </param>
        /// <param name="properties"> Additional properties bag. </param>
        /// <param name="dockerArgs"> Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types. </param>
        /// <param name="shmSize"> Size of the docker container&apos;s shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes). </param>
        /// <returns> A new <see cref="Models.MachineLearningJobResourceConfiguration"/> instance for mocking. </returns>
        public static MachineLearningJobResourceConfiguration MachineLearningJobResourceConfiguration(int? instanceCount = null, string instanceType = null, IDictionary<string, BinaryData> properties = null, string dockerArgs = null, string shmSize = null)
        {
            properties ??= new Dictionary<string, BinaryData>();

            return new MachineLearningJobResourceConfiguration(instanceCount, instanceType, properties, dockerArgs, shmSize);
        }

        /// <summary> Initializes a new instance of AutoMLVertical. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="taskType"> [Required] Task type for AutoMLJob. </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <returns> A new <see cref="Models.AutoMLVertical"/> instance for mocking. </returns>
        public static AutoMLVertical AutoMLVertical(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, string taskType = "Unknown", MachineLearningTableJobInput trainingData = null)
        {
            return new UnknownAutoMLVertical(logVerbosity, targetColumnName, taskType, trainingData);
        }

        /// <summary> Initializes a new instance of MachineLearningTableJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="mode"> Input Asset Delivery Mode. </param>
        /// <param name="uri"> [Required] Input Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningTableJobInput"/> instance for mocking. </returns>
        public static MachineLearningTableJobInput MachineLearningTableJobInput(string description = null, MachineLearningInputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningTableJobInput(description, JobInputType.Mltable, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="jobInputType"> [Required] Specifies the type of job. </param>
        /// <returns> A new <see cref="Models.MachineLearningJobInput"/> instance for mocking. </returns>
        public static MachineLearningJobInput MachineLearningJobInput(string description = null, string jobInputType = "Unknown")
        {
            return new UnknownJobInput(description, jobInputType);
        }

        /// <summary> Initializes a new instance of AutoNCrossValidations. </summary>
        /// <returns> A new <see cref="Models.AutoNCrossValidations"/> instance for mocking. </returns>
        public static AutoNCrossValidations AutoNCrossValidations()
        {
            return new AutoNCrossValidations(NCrossValidationsMode.Auto);
        }

        /// <summary> Initializes a new instance of NCrossValidations. </summary>
        /// <param name="mode"> [Required] Mode for determining N-Cross validations. </param>
        /// <returns> A new <see cref="Models.NCrossValidations"/> instance for mocking. </returns>
        public static NCrossValidations NCrossValidations(string mode = "Unknown")
        {
            return new UnknownNCrossValidations(mode);
        }

        /// <summary> Initializes a new instance of AutoSeasonality. </summary>
        /// <returns> A new <see cref="Models.AutoSeasonality"/> instance for mocking. </returns>
        public static AutoSeasonality AutoSeasonality()
        {
            return new AutoSeasonality(SeasonalityMode.Auto);
        }

        /// <summary> Initializes a new instance of ForecastingSeasonality. </summary>
        /// <param name="mode"> [Required] Seasonality mode. </param>
        /// <returns> A new <see cref="Models.ForecastingSeasonality"/> instance for mocking. </returns>
        public static ForecastingSeasonality ForecastingSeasonality(string mode = "Unknown")
        {
            return new UnknownSeasonality(mode);
        }

        /// <summary> Initializes a new instance of AutoTargetLags. </summary>
        /// <returns> A new <see cref="Models.AutoTargetLags"/> instance for mocking. </returns>
        public static AutoTargetLags AutoTargetLags()
        {
            return new AutoTargetLags(TargetLagsMode.Auto);
        }

        /// <summary> Initializes a new instance of TargetLags. </summary>
        /// <param name="mode"> [Required] Set target lags mode - Auto/Custom. </param>
        /// <returns> A new <see cref="Models.TargetLags"/> instance for mocking. </returns>
        public static TargetLags TargetLags(string mode = "Unknown")
        {
            return new UnknownTargetLags(mode);
        }

        /// <summary> Initializes a new instance of AutoTargetRollingWindowSize. </summary>
        /// <returns> A new <see cref="Models.AutoTargetRollingWindowSize"/> instance for mocking. </returns>
        public static AutoTargetRollingWindowSize AutoTargetRollingWindowSize()
        {
            return new AutoTargetRollingWindowSize(TargetRollingWindowSizeMode.Auto);
        }

        /// <summary> Initializes a new instance of TargetRollingWindowSize. </summary>
        /// <param name="mode"> [Required] TargetRollingWindowSiz detection mode. </param>
        /// <returns> A new <see cref="Models.TargetRollingWindowSize"/> instance for mocking. </returns>
        public static TargetRollingWindowSize TargetRollingWindowSize(string mode = "Unknown")
        {
            return new UnknownTargetRollingWindowSize(mode);
        }

        /// <summary> Initializes a new instance of MachineLearningAzureBlobDatastore. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="credentials">
        /// [Required] Account credentials.
        /// Please note <see cref="MachineLearningDatastoreCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAccountKeyDatastoreCredentials"/>, <see cref="MachineLearningCertificateDatastoreCredentials"/>, <see cref="MachineLearningNoneDatastoreCredentials"/>, <see cref="MachineLearningSasDatastoreCredentials"/> and <see cref="MachineLearningServicePrincipalDatastoreCredentials"/>.
        /// </param>
        /// <param name="isDefault"> Readonly property to indicate if datastore is the workspace default datastore. </param>
        /// <param name="accountName"> Storage account name. </param>
        /// <param name="containerName"> Storage account container name. </param>
        /// <param name="endpoint"> Azure cloud endpoint for the storage account. </param>
        /// <param name="protocol"> Protocol used to communicate with the storage account. </param>
        /// <param name="serviceDataAccessAuthIdentity"> Indicates which identity to use to authenticate service data access to customer&apos;s storage. </param>
        /// <returns> A new <see cref="Models.MachineLearningAzureBlobDatastore"/> instance for mocking. </returns>
        public static MachineLearningAzureBlobDatastore MachineLearningAzureBlobDatastore(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, MachineLearningDatastoreCredentials credentials = null, bool? isDefault = null, string accountName = null, string containerName = null, string endpoint = null, string protocol = null, MachineLearningServiceDataAccessAuthIdentity? serviceDataAccessAuthIdentity = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningAzureBlobDatastore(description, properties, tags, credentials, DatastoreType.AzureBlob, isDefault, accountName, containerName, endpoint, protocol, serviceDataAccessAuthIdentity);
        }

        /// <summary> Initializes a new instance of MachineLearningAzureDataLakeGen1Datastore. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="credentials">
        /// [Required] Account credentials.
        /// Please note <see cref="MachineLearningDatastoreCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAccountKeyDatastoreCredentials"/>, <see cref="MachineLearningCertificateDatastoreCredentials"/>, <see cref="MachineLearningNoneDatastoreCredentials"/>, <see cref="MachineLearningSasDatastoreCredentials"/> and <see cref="MachineLearningServicePrincipalDatastoreCredentials"/>.
        /// </param>
        /// <param name="isDefault"> Readonly property to indicate if datastore is the workspace default datastore. </param>
        /// <param name="serviceDataAccessAuthIdentity"> Indicates which identity to use to authenticate service data access to customer&apos;s storage. </param>
        /// <param name="storeName"> [Required] Azure Data Lake store name. </param>
        /// <returns> A new <see cref="Models.MachineLearningAzureDataLakeGen1Datastore"/> instance for mocking. </returns>
        public static MachineLearningAzureDataLakeGen1Datastore MachineLearningAzureDataLakeGen1Datastore(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, MachineLearningDatastoreCredentials credentials = null, bool? isDefault = null, MachineLearningServiceDataAccessAuthIdentity? serviceDataAccessAuthIdentity = null, string storeName = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningAzureDataLakeGen1Datastore(description, properties, tags, credentials, DatastoreType.AzureDataLakeGen1, isDefault, serviceDataAccessAuthIdentity, storeName);
        }

        /// <summary> Initializes a new instance of MachineLearningAzureDataLakeGen2Datastore. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="credentials">
        /// [Required] Account credentials.
        /// Please note <see cref="MachineLearningDatastoreCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAccountKeyDatastoreCredentials"/>, <see cref="MachineLearningCertificateDatastoreCredentials"/>, <see cref="MachineLearningNoneDatastoreCredentials"/>, <see cref="MachineLearningSasDatastoreCredentials"/> and <see cref="MachineLearningServicePrincipalDatastoreCredentials"/>.
        /// </param>
        /// <param name="isDefault"> Readonly property to indicate if datastore is the workspace default datastore. </param>
        /// <param name="accountName"> [Required] Storage account name. </param>
        /// <param name="endpoint"> Azure cloud endpoint for the storage account. </param>
        /// <param name="filesystem"> [Required] The name of the Data Lake Gen2 filesystem. </param>
        /// <param name="protocol"> Protocol used to communicate with the storage account. </param>
        /// <param name="serviceDataAccessAuthIdentity"> Indicates which identity to use to authenticate service data access to customer&apos;s storage. </param>
        /// <returns> A new <see cref="Models.MachineLearningAzureDataLakeGen2Datastore"/> instance for mocking. </returns>
        public static MachineLearningAzureDataLakeGen2Datastore MachineLearningAzureDataLakeGen2Datastore(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, MachineLearningDatastoreCredentials credentials = null, bool? isDefault = null, string accountName = null, string endpoint = null, string filesystem = null, string protocol = null, MachineLearningServiceDataAccessAuthIdentity? serviceDataAccessAuthIdentity = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningAzureDataLakeGen2Datastore(description, properties, tags, credentials, DatastoreType.AzureDataLakeGen2, isDefault, accountName, endpoint, filesystem, protocol, serviceDataAccessAuthIdentity);
        }

        /// <summary> Initializes a new instance of MachineLearningAzureFileDatastore. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="credentials">
        /// [Required] Account credentials.
        /// Please note <see cref="MachineLearningDatastoreCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningAccountKeyDatastoreCredentials"/>, <see cref="MachineLearningCertificateDatastoreCredentials"/>, <see cref="MachineLearningNoneDatastoreCredentials"/>, <see cref="MachineLearningSasDatastoreCredentials"/> and <see cref="MachineLearningServicePrincipalDatastoreCredentials"/>.
        /// </param>
        /// <param name="isDefault"> Readonly property to indicate if datastore is the workspace default datastore. </param>
        /// <param name="accountName"> [Required] Storage account name. </param>
        /// <param name="endpoint"> Azure cloud endpoint for the storage account. </param>
        /// <param name="fileShareName"> [Required] The name of the Azure file share that the datastore points to. </param>
        /// <param name="protocol"> Protocol used to communicate with the storage account. </param>
        /// <param name="serviceDataAccessAuthIdentity"> Indicates which identity to use to authenticate service data access to customer&apos;s storage. </param>
        /// <returns> A new <see cref="Models.MachineLearningAzureFileDatastore"/> instance for mocking. </returns>
        public static MachineLearningAzureFileDatastore MachineLearningAzureFileDatastore(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, MachineLearningDatastoreCredentials credentials = null, bool? isDefault = null, string accountName = null, string endpoint = null, string fileShareName = null, string protocol = null, MachineLearningServiceDataAccessAuthIdentity? serviceDataAccessAuthIdentity = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningAzureFileDatastore(description, properties, tags, credentials, DatastoreType.AzureFile, isDefault, accountName, endpoint, fileShareName, protocol, serviceDataAccessAuthIdentity);
        }

        /// <summary> Initializes a new instance of BanditPolicy. </summary>
        /// <param name="delayEvaluation"> Number of intervals by which to delay the first evaluation. </param>
        /// <param name="evaluationInterval"> Interval (number of runs) between policy evaluations. </param>
        /// <param name="slackAmount"> Absolute distance allowed from the best performing run. </param>
        /// <param name="slackFactor"> Ratio of the allowed distance from the best performing run. </param>
        /// <returns> A new <see cref="Models.BanditPolicy"/> instance for mocking. </returns>
        public static BanditPolicy BanditPolicy(int? delayEvaluation = null, int? evaluationInterval = null, float? slackAmount = null, float? slackFactor = null)
        {
            return new BanditPolicy(delayEvaluation, evaluationInterval, EarlyTerminationPolicyType.Bandit, slackAmount, slackFactor);
        }

        /// <summary> Initializes a new instance of MachineLearningEarlyTerminationPolicy. </summary>
        /// <param name="delayEvaluation"> Number of intervals by which to delay the first evaluation. </param>
        /// <param name="evaluationInterval"> Interval (number of runs) between policy evaluations. </param>
        /// <param name="policyType"> [Required] Name of policy configuration. </param>
        /// <returns> A new <see cref="Models.MachineLearningEarlyTerminationPolicy"/> instance for mocking. </returns>
        public static MachineLearningEarlyTerminationPolicy MachineLearningEarlyTerminationPolicy(int? delayEvaluation = null, int? evaluationInterval = null, string policyType = "Unknown")
        {
            return new UnknownEarlyTerminationPolicy(delayEvaluation, evaluationInterval, policyType);
        }

        /// <summary> Initializes a new instance of BayesianSamplingAlgorithm. </summary>
        /// <returns> A new <see cref="Models.BayesianSamplingAlgorithm"/> instance for mocking. </returns>
        public static BayesianSamplingAlgorithm BayesianSamplingAlgorithm()
        {
            return new BayesianSamplingAlgorithm(SamplingAlgorithmType.Bayesian);
        }

        /// <summary> Initializes a new instance of SamplingAlgorithm. </summary>
        /// <param name="samplingAlgorithmType"> [Required] The algorithm used for generating hyperparameter values, along with configuration properties. </param>
        /// <returns> A new <see cref="Models.SamplingAlgorithm"/> instance for mocking. </returns>
        public static SamplingAlgorithm SamplingAlgorithm(string samplingAlgorithmType = "Unknown")
        {
            return new UnknownSamplingAlgorithm(samplingAlgorithmType);
        }

        /// <summary> Initializes a new instance of MachineLearningCertificateDatastoreCredentials. </summary>
        /// <param name="authorityUri"> Authority URL used for authentication. </param>
        /// <param name="clientId"> [Required] Service principal client ID. </param>
        /// <param name="resourceUri"> Resource the service principal has access to. </param>
        /// <param name="secrets"> [Required] Service principal secrets. </param>
        /// <param name="tenantId"> [Required] ID of the tenant to which the service principal belongs. </param>
        /// <param name="thumbprint"> [Required] Thumbprint of the certificate used for authentication. </param>
        /// <returns> A new <see cref="Models.MachineLearningCertificateDatastoreCredentials"/> instance for mocking. </returns>
        public static MachineLearningCertificateDatastoreCredentials MachineLearningCertificateDatastoreCredentials(Uri authorityUri = null, Guid clientId = default, Uri resourceUri = null, MachineLearningCertificateDatastoreSecrets secrets = null, Guid tenantId = default, string thumbprint = null)
        {
            return new MachineLearningCertificateDatastoreCredentials(CredentialsType.Certificate, authorityUri, clientId, resourceUri, secrets, tenantId, thumbprint);
        }

        /// <summary> Initializes a new instance of MachineLearningCertificateDatastoreSecrets. </summary>
        /// <param name="certificate"> Service principal certificate. </param>
        /// <returns> A new <see cref="Models.MachineLearningCertificateDatastoreSecrets"/> instance for mocking. </returns>
        public static MachineLearningCertificateDatastoreSecrets MachineLearningCertificateDatastoreSecrets(string certificate = null)
        {
            return new MachineLearningCertificateDatastoreSecrets(SecretsType.Certificate, certificate);
        }

        /// <summary> Initializes a new instance of ClassificationTask. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="positiveLabel"> Positive label for binary metrics calculation. </param>
        /// <param name="primaryMetric"> Primary metric for the task. </param>
        /// <param name="trainingSettings"> Inputs for training phase for an AutoML Job. </param>
        /// <param name="cvSplitColumnNames"> Columns to use for CVSplit data. </param>
        /// <param name="featurizationSettings"> Featurization inputs needed for AutoML job. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="nCrossValidations">
        /// Number of cross validation folds to be applied on training dataset
        /// when validation dataset is not provided.
        /// Please note <see cref="NCrossValidations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoNCrossValidations"/> and <see cref="CustomNCrossValidations"/>.
        /// </param>
        /// <param name="testData"> Test data input. </param>
        /// <param name="testDataSize">
        /// The fraction of test dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="weightColumnName"> The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. </param>
        /// <returns> A new <see cref="Models.ClassificationTask"/> instance for mocking. </returns>
        public static ClassificationTask ClassificationTask(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, string positiveLabel = null, ClassificationPrimaryMetric? primaryMetric = null, ClassificationTrainingSettings trainingSettings = null, IEnumerable<string> cvSplitColumnNames = null, TableVerticalFeaturizationSettings featurizationSettings = null, TableVerticalLimitSettings limitSettings = null, NCrossValidations nCrossValidations = null, MachineLearningTableJobInput testData = null, double? testDataSize = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null, string weightColumnName = null)
        {
            cvSplitColumnNames ??= new List<string>();

            return new ClassificationTask(logVerbosity, targetColumnName, TaskType.Classification, trainingData, positiveLabel, primaryMetric, trainingSettings, cvSplitColumnNames?.ToList(), featurizationSettings, limitSettings, nCrossValidations, testData, testDataSize, validationData, validationDataSize, weightColumnName);
        }

        /// <summary> Initializes a new instance of ClassificationTrainingSettings. </summary>
        /// <param name="isDnnTrainingEnabled"> Enable recommendation of DNN models. </param>
        /// <param name="isModelExplainabilityEnabled"> Flag to turn on explainability on best model. </param>
        /// <param name="isOnnxCompatibleModelsEnabled"> Flag for enabling onnx compatible models. </param>
        /// <param name="isStackEnsembleEnabled"> Enable stack ensemble run. </param>
        /// <param name="isVoteEnsembleEnabled"> Enable voting ensemble run. </param>
        /// <param name="ensembleModelDownloadTimeout">
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </param>
        /// <param name="stackEnsembleSettings"> Stack ensemble settings for stack ensemble run. </param>
        /// <param name="allowedTrainingAlgorithms"> Allowed models for classification task. </param>
        /// <param name="blockedTrainingAlgorithms"> Blocked models for classification task. </param>
        /// <returns> A new <see cref="Models.ClassificationTrainingSettings"/> instance for mocking. </returns>
        public static ClassificationTrainingSettings ClassificationTrainingSettings(bool? isDnnTrainingEnabled = null, bool? isModelExplainabilityEnabled = null, bool? isOnnxCompatibleModelsEnabled = null, bool? isStackEnsembleEnabled = null, bool? isVoteEnsembleEnabled = null, TimeSpan? ensembleModelDownloadTimeout = null, MachineLearningStackEnsembleSettings stackEnsembleSettings = null, IEnumerable<ClassificationModel> allowedTrainingAlgorithms = null, IEnumerable<ClassificationModel> blockedTrainingAlgorithms = null)
        {
            allowedTrainingAlgorithms ??= new List<ClassificationModel>();
            blockedTrainingAlgorithms ??= new List<ClassificationModel>();

            return new ClassificationTrainingSettings(isDnnTrainingEnabled, isModelExplainabilityEnabled, isOnnxCompatibleModelsEnabled, isStackEnsembleEnabled, isVoteEnsembleEnabled, ensembleModelDownloadTimeout, stackEnsembleSettings, allowedTrainingAlgorithms?.ToList(), blockedTrainingAlgorithms?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningTrainingSettings. </summary>
        /// <param name="isDnnTrainingEnabled"> Enable recommendation of DNN models. </param>
        /// <param name="isModelExplainabilityEnabled"> Flag to turn on explainability on best model. </param>
        /// <param name="isOnnxCompatibleModelsEnabled"> Flag for enabling onnx compatible models. </param>
        /// <param name="isStackEnsembleEnabled"> Enable stack ensemble run. </param>
        /// <param name="isVoteEnsembleEnabled"> Enable voting ensemble run. </param>
        /// <param name="ensembleModelDownloadTimeout">
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </param>
        /// <param name="stackEnsembleSettings"> Stack ensemble settings for stack ensemble run. </param>
        /// <returns> A new <see cref="Models.MachineLearningTrainingSettings"/> instance for mocking. </returns>
        public static MachineLearningTrainingSettings MachineLearningTrainingSettings(bool? isDnnTrainingEnabled = null, bool? isModelExplainabilityEnabled = null, bool? isOnnxCompatibleModelsEnabled = null, bool? isStackEnsembleEnabled = null, bool? isVoteEnsembleEnabled = null, TimeSpan? ensembleModelDownloadTimeout = null, MachineLearningStackEnsembleSettings stackEnsembleSettings = null)
        {
            return new MachineLearningTrainingSettings(isDnnTrainingEnabled, isModelExplainabilityEnabled, isOnnxCompatibleModelsEnabled, isStackEnsembleEnabled, isVoteEnsembleEnabled, ensembleModelDownloadTimeout, stackEnsembleSettings);
        }

        /// <summary> Initializes a new instance of MachineLearningStackEnsembleSettings. </summary>
        /// <param name="stackMetaLearnerKWargs"> Optional parameters to pass to the initializer of the meta-learner. </param>
        /// <param name="stackMetaLearnerTrainPercentage"> Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2. </param>
        /// <param name="stackMetaLearnerType"> The meta-learner is a model trained on the output of the individual heterogeneous models. </param>
        /// <returns> A new <see cref="Models.MachineLearningStackEnsembleSettings"/> instance for mocking. </returns>
        public static MachineLearningStackEnsembleSettings MachineLearningStackEnsembleSettings(BinaryData stackMetaLearnerKWargs = null, double? stackMetaLearnerTrainPercentage = null, MachineLearningStackMetaLearnerType? stackMetaLearnerType = null)
        {
            return new MachineLearningStackEnsembleSettings(stackMetaLearnerKWargs, stackMetaLearnerTrainPercentage, stackMetaLearnerType);
        }

        /// <summary> Initializes a new instance of TableVerticalFeaturizationSettings. </summary>
        /// <param name="datasetLanguage"> Dataset language, useful for the text data. </param>
        /// <param name="blockedTransformers"> These transformers shall not be used in featurization. </param>
        /// <param name="columnNameAndTypes"> Dictionary of column name and its type (int, float, string, datetime etc). </param>
        /// <param name="enableDnnFeaturization"> Determines whether to use Dnn based featurizers for data featurization. </param>
        /// <param name="mode">
        /// Featurization mode - User can keep the default &apos;Auto&apos; mode and AutoML will take care of necessary transformation of the data in featurization phase.
        /// If &apos;Off&apos; is selected then no featurization is done.
        /// If &apos;Custom&apos; is selected then user can specify additional inputs to customize how featurization is done.
        /// </param>
        /// <param name="transformerParams"> User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor. </param>
        /// <returns> A new <see cref="Models.TableVerticalFeaturizationSettings"/> instance for mocking. </returns>
        public static TableVerticalFeaturizationSettings TableVerticalFeaturizationSettings(string datasetLanguage = null, IEnumerable<BlockedTransformer> blockedTransformers = null, IDictionary<string, string> columnNameAndTypes = null, bool? enableDnnFeaturization = null, MachineLearningFeaturizationMode? mode = null, IDictionary<string, IList<ColumnTransformer>> transformerParams = null)
        {
            blockedTransformers ??= new List<BlockedTransformer>();
            columnNameAndTypes ??= new Dictionary<string, string>();
            transformerParams ??= new Dictionary<string, IList<ColumnTransformer>>();

            return new TableVerticalFeaturizationSettings(datasetLanguage, blockedTransformers?.ToList(), columnNameAndTypes, enableDnnFeaturization, mode, transformerParams);
        }

        /// <summary> Initializes a new instance of ColumnTransformer. </summary>
        /// <param name="fields"> Fields to apply transformer logic on. </param>
        /// <param name="parameters">
        /// Different properties to be passed to transformer.
        /// Input expected is dictionary of key,value pairs in JSON format.
        /// </param>
        /// <returns> A new <see cref="Models.ColumnTransformer"/> instance for mocking. </returns>
        public static ColumnTransformer ColumnTransformer(IEnumerable<string> fields = null, BinaryData parameters = null)
        {
            fields ??= new List<string>();

            return new ColumnTransformer(fields?.ToList(), parameters);
        }

        /// <summary> Initializes a new instance of MachineLearningFeaturizationSettings. </summary>
        /// <param name="datasetLanguage"> Dataset language, useful for the text data. </param>
        /// <returns> A new <see cref="Models.MachineLearningFeaturizationSettings"/> instance for mocking. </returns>
        public static MachineLearningFeaturizationSettings MachineLearningFeaturizationSettings(string datasetLanguage = null)
        {
            return new MachineLearningFeaturizationSettings(datasetLanguage);
        }

        /// <summary> Initializes a new instance of TableVerticalLimitSettings. </summary>
        /// <param name="enableEarlyTermination"> Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations. </param>
        /// <param name="exitScore"> Exit score for the AutoML job. </param>
        /// <param name="maxConcurrentTrials"> Maximum Concurrent iterations. </param>
        /// <param name="maxCoresPerTrial"> Max cores per iteration. </param>
        /// <param name="maxTrials"> Number of iterations. </param>
        /// <param name="timeout"> AutoML job timeout. </param>
        /// <param name="trialTimeout"> Iteration timeout. </param>
        /// <returns> A new <see cref="Models.TableVerticalLimitSettings"/> instance for mocking. </returns>
        public static TableVerticalLimitSettings TableVerticalLimitSettings(bool? enableEarlyTermination = null, double? exitScore = null, int? maxConcurrentTrials = null, int? maxCoresPerTrial = null, int? maxTrials = null, TimeSpan? timeout = null, TimeSpan? trialTimeout = null)
        {
            return new TableVerticalLimitSettings(enableEarlyTermination, exitScore, maxConcurrentTrials, maxCoresPerTrial, maxTrials, timeout, trialTimeout);
        }

        /// <summary> Initializes a new instance of MachineLearningCommandJob. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="componentId"> ARM resource ID of the component resource. </param>
        /// <param name="computeId"> ARM resource ID of the compute resource. </param>
        /// <param name="displayName"> Display name of job. </param>
        /// <param name="experimentName"> The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment. </param>
        /// <param name="identity">
        /// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        /// Defaults to AmlToken if null.
        /// Please note <see cref="MachineLearningIdentityConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmlToken"/>, <see cref="MachineLearningManagedIdentity"/> and <see cref="MachineLearningUserIdentity"/>.
        /// </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="services">
        /// List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        /// </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="codeId"> ARM resource ID of the code asset. </param>
        /// <param name="command"> [Required] The command to execute on startup of the job. eg. &quot;python train.py&quot;. </param>
        /// <param name="distribution">
        /// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
        /// Please note <see cref="MachineLearningDistributionConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MpiDistributionConfiguration"/>, <see cref="PyTorchDistributionConfiguration"/> and <see cref="TensorFlowDistributionConfiguration"/>.
        /// </param>
        /// <param name="environmentId"> [Required] The ARM resource ID of the Environment specification for the job. </param>
        /// <param name="environmentVariables"> Environment variables included in the job. </param>
        /// <param name="inputs">
        /// Mapping of input data bindings used in the job.
        /// Please note <see cref="MachineLearningJobInput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobInput"/>, <see cref="MachineLearningLiteralJobInput"/>, <see cref="MachineLearningFlowModelJobInput"/>, <see cref="MachineLearningTableJobInput"/>, <see cref="MachineLearningTritonModelJobInput"/>, <see cref="MachineLearningUriFileJobInput"/> and <see cref="MachineLearningUriFolderJobInput"/>.
        /// </param>
        /// <param name="limits"> Command Job limit. </param>
        /// <param name="outputs">
        /// Mapping of output data bindings used in the job.
        /// Please note <see cref="MachineLearningJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobOutput"/>, <see cref="MachineLearningFlowModelJobOutput"/>, <see cref="MachineLearningTableJobOutput"/>, <see cref="MachineLearningTritonModelJobOutput"/>, <see cref="MachineLearningUriFileJobOutput"/> and <see cref="MachineLearningUriFolderJobOutput"/>.
        /// </param>
        /// <param name="parameters"> Input parameters. </param>
        /// <param name="resources"> Compute Resource configuration for the job. </param>
        /// <returns> A new <see cref="Models.MachineLearningCommandJob"/> instance for mocking. </returns>
        public static MachineLearningCommandJob MachineLearningCommandJob(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, ResourceIdentifier componentId = null, ResourceIdentifier computeId = null, string displayName = null, string experimentName = null, MachineLearningIdentityConfiguration identity = null, bool? isArchived = null, IDictionary<string, MachineLearningJobService> services = null, MachineLearningJobStatus? status = null, ResourceIdentifier codeId = null, string command = null, MachineLearningDistributionConfiguration distribution = null, ResourceIdentifier environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, MachineLearningJobInput> inputs = null, MachineLearningCommandJobLimits limits = null, IDictionary<string, MachineLearningJobOutput> outputs = null, BinaryData parameters = null, MachineLearningJobResourceConfiguration resources = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            services ??= new Dictionary<string, MachineLearningJobService>();
            environmentVariables ??= new Dictionary<string, string>();
            inputs ??= new Dictionary<string, MachineLearningJobInput>();
            outputs ??= new Dictionary<string, MachineLearningJobOutput>();

            return new MachineLearningCommandJob(description, properties, tags, componentId, computeId, displayName, experimentName, identity, isArchived, JobType.Command, services, status, codeId, command, distribution, environmentId, environmentVariables, inputs, limits, outputs, parameters, resources);
        }

        /// <summary> Initializes a new instance of MachineLearningDistributionConfiguration. </summary>
        /// <param name="distributionType"> [Required] Specifies the type of distribution framework. </param>
        /// <returns> A new <see cref="Models.MachineLearningDistributionConfiguration"/> instance for mocking. </returns>
        public static MachineLearningDistributionConfiguration MachineLearningDistributionConfiguration(string distributionType = "Unknown")
        {
            return new UnknownDistributionConfiguration(distributionType);
        }

        /// <summary> Initializes a new instance of MachineLearningCommandJobLimits. </summary>
        /// <param name="timeout"> The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds. </param>
        /// <returns> A new <see cref="Models.MachineLearningCommandJobLimits"/> instance for mocking. </returns>
        public static MachineLearningCommandJobLimits MachineLearningCommandJobLimits(TimeSpan? timeout = null)
        {
            return new MachineLearningCommandJobLimits(JobLimitsType.Command, timeout);
        }

        /// <summary> Initializes a new instance of MachineLearningJobLimits. </summary>
        /// <param name="jobLimitsType"> [Required] JobLimit type. </param>
        /// <param name="timeout"> The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds. </param>
        /// <returns> A new <see cref="Models.MachineLearningJobLimits"/> instance for mocking. </returns>
        public static MachineLearningJobLimits MachineLearningJobLimits(string jobLimitsType = "Unknown", TimeSpan? timeout = null)
        {
            return new UnknownJobLimits(jobLimitsType, timeout);
        }

        /// <summary> Initializes a new instance of MachineLearningContainerResourceRequirements. </summary>
        /// <param name="containerResourceLimits"> Container resource limit info:. </param>
        /// <param name="containerResourceRequests"> Container resource request info:. </param>
        /// <returns> A new <see cref="Models.MachineLearningContainerResourceRequirements"/> instance for mocking. </returns>
        public static MachineLearningContainerResourceRequirements MachineLearningContainerResourceRequirements(MachineLearningContainerResourceSettings containerResourceLimits = null, MachineLearningContainerResourceSettings containerResourceRequests = null)
        {
            return new MachineLearningContainerResourceRequirements(containerResourceLimits, containerResourceRequests);
        }

        /// <summary> Initializes a new instance of MachineLearningContainerResourceSettings. </summary>
        /// <param name="cpu">
        /// Number of vCPUs request/limit for container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </param>
        /// <param name="gpu">
        /// Number of Nvidia GPU cards request/limit for container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </param>
        /// <param name="memory">
        /// Memory size request/limit for container. More info:
        /// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningContainerResourceSettings"/> instance for mocking. </returns>
        public static MachineLearningContainerResourceSettings MachineLearningContainerResourceSettings(string cpu = null, string gpu = null, string memory = null)
        {
            return new MachineLearningContainerResourceSettings(cpu, gpu, memory);
        }

        /// <summary> Initializes a new instance of CustomForecastHorizon. </summary>
        /// <param name="value"> [Required] Forecast horizon value. </param>
        /// <returns> A new <see cref="Models.CustomForecastHorizon"/> instance for mocking. </returns>
        public static CustomForecastHorizon CustomForecastHorizon(int value = default)
        {
            return new CustomForecastHorizon(ForecastHorizonMode.Custom, value);
        }

        /// <summary> Initializes a new instance of MachineLearningCustomModelJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="mode"> Input Asset Delivery Mode. </param>
        /// <param name="uri"> [Required] Input Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningCustomModelJobInput"/> instance for mocking. </returns>
        public static MachineLearningCustomModelJobInput MachineLearningCustomModelJobInput(string description = null, MachineLearningInputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningCustomModelJobInput(description, JobInputType.CustomModel, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningCustomModelJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="mode"> Output Asset Delivery Mode. </param>
        /// <param name="uri"> Output Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningCustomModelJobOutput"/> instance for mocking. </returns>
        public static MachineLearningCustomModelJobOutput MachineLearningCustomModelJobOutput(string description = null, MachineLearningOutputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningCustomModelJobOutput(description, JobOutputType.CustomModel, mode, uri);
        }

        /// <summary> Initializes a new instance of CustomNCrossValidations. </summary>
        /// <param name="value"> [Required] N-Cross validations value. </param>
        /// <returns> A new <see cref="Models.CustomNCrossValidations"/> instance for mocking. </returns>
        public static CustomNCrossValidations CustomNCrossValidations(int value = default)
        {
            return new CustomNCrossValidations(NCrossValidationsMode.Custom, value);
        }

        /// <summary> Initializes a new instance of CustomSeasonality. </summary>
        /// <param name="value"> [Required] Seasonality value. </param>
        /// <returns> A new <see cref="Models.CustomSeasonality"/> instance for mocking. </returns>
        public static CustomSeasonality CustomSeasonality(int value = default)
        {
            return new CustomSeasonality(SeasonalityMode.Custom, value);
        }

        /// <summary> Initializes a new instance of CustomTargetLags. </summary>
        /// <param name="values"> [Required] Set target lags values. </param>
        /// <returns> A new <see cref="Models.CustomTargetLags"/> instance for mocking. </returns>
        public static CustomTargetLags CustomTargetLags(IEnumerable<int> values = null)
        {
            values ??= new List<int>();

            return new CustomTargetLags(TargetLagsMode.Custom, values?.ToList());
        }

        /// <summary> Initializes a new instance of CustomTargetRollingWindowSize. </summary>
        /// <param name="value"> [Required] TargetRollingWindowSize value. </param>
        /// <returns> A new <see cref="Models.CustomTargetRollingWindowSize"/> instance for mocking. </returns>
        public static CustomTargetRollingWindowSize CustomTargetRollingWindowSize(int value = default)
        {
            return new CustomTargetRollingWindowSize(TargetRollingWindowSizeMode.Custom, value);
        }

        /// <summary> Initializes a new instance of MachineLearningDataPathAssetReference. </summary>
        /// <param name="datastoreId"> ARM resource ID of the datastore where the asset is located. </param>
        /// <param name="path"> The path of the file/directory in the datastore. </param>
        /// <returns> A new <see cref="Models.MachineLearningDataPathAssetReference"/> instance for mocking. </returns>
        public static MachineLearningDataPathAssetReference MachineLearningDataPathAssetReference(string datastoreId = null, string path = null)
        {
            return new MachineLearningDataPathAssetReference(ReferenceType.DataPath, datastoreId, path);
        }

        /// <summary> Initializes a new instance of MachineLearningDefaultScaleSettings. </summary>
        /// <returns> A new <see cref="Models.MachineLearningDefaultScaleSettings"/> instance for mocking. </returns>
        public static MachineLearningDefaultScaleSettings MachineLearningDefaultScaleSettings()
        {
            return new MachineLearningDefaultScaleSettings(ScaleType.Default);
        }

        /// <summary> Initializes a new instance of MachineLearningEndpointScheduleAction. </summary>
        /// <param name="endpointInvocationDefinition">
        /// [Required] Defines Schedule action definition details.
        /// &lt;see href=&quot;TBD&quot; /&gt;
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningEndpointScheduleAction"/> instance for mocking. </returns>
        public static MachineLearningEndpointScheduleAction MachineLearningEndpointScheduleAction(BinaryData endpointInvocationDefinition = null)
        {
            return new MachineLearningEndpointScheduleAction(ScheduleActionType.InvokeBatchEndpoint, endpointInvocationDefinition);
        }

        /// <summary> Initializes a new instance of MachineLearningForecasting. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="forecastingSettings"> Forecasting task specific inputs. </param>
        /// <param name="primaryMetric"> Primary metric for forecasting task. </param>
        /// <param name="trainingSettings"> Inputs for training phase for an AutoML Job. </param>
        /// <param name="cvSplitColumnNames"> Columns to use for CVSplit data. </param>
        /// <param name="featurizationSettings"> Featurization inputs needed for AutoML job. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="nCrossValidations">
        /// Number of cross validation folds to be applied on training dataset
        /// when validation dataset is not provided.
        /// Please note <see cref="NCrossValidations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoNCrossValidations"/> and <see cref="CustomNCrossValidations"/>.
        /// </param>
        /// <param name="testData"> Test data input. </param>
        /// <param name="testDataSize">
        /// The fraction of test dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="weightColumnName"> The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. </param>
        /// <returns> A new <see cref="Models.MachineLearningForecasting"/> instance for mocking. </returns>
        public static MachineLearningForecasting MachineLearningForecasting(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ForecastingSettings forecastingSettings = null, ForecastingPrimaryMetric? primaryMetric = null, ForecastingTrainingSettings trainingSettings = null, IEnumerable<string> cvSplitColumnNames = null, TableVerticalFeaturizationSettings featurizationSettings = null, TableVerticalLimitSettings limitSettings = null, NCrossValidations nCrossValidations = null, MachineLearningTableJobInput testData = null, double? testDataSize = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null, string weightColumnName = null)
        {
            cvSplitColumnNames ??= new List<string>();

            return new MachineLearningForecasting(logVerbosity, targetColumnName, TaskType.Forecasting, trainingData, forecastingSettings, primaryMetric, trainingSettings, cvSplitColumnNames?.ToList(), featurizationSettings, limitSettings, nCrossValidations, testData, testDataSize, validationData, validationDataSize, weightColumnName);
        }

        /// <summary> Initializes a new instance of ForecastingSettings. </summary>
        /// <param name="countryOrRegionForHolidays">
        /// Country or region for holidays for forecasting tasks.
        /// These should be ISO 3166 two-letter country/region codes, for example &apos;US&apos; or &apos;GB&apos;.
        /// </param>
        /// <param name="cvStepSize">
        /// Number of periods between the origin time of one CV fold and the next fold. For
        /// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
        /// three days apart.
        /// </param>
        /// <param name="featureLags"> Flag for generating lags for the numeric features with &apos;auto&apos; or null. </param>
        /// <param name="forecastHorizon">
        /// The desired maximum forecast horizon in units of time-series frequency.
        /// Please note <see cref="ForecastHorizon"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoForecastHorizon"/> and <see cref="CustomForecastHorizon"/>.
        /// </param>
        /// <param name="frequency"> When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default. </param>
        /// <param name="seasonality">
        /// Set time series seasonality as an integer multiple of the series frequency.
        /// If seasonality is set to &apos;auto&apos;, it will be inferred.
        /// Please note <see cref="ForecastingSeasonality"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoSeasonality"/> and <see cref="CustomSeasonality"/>.
        /// </param>
        /// <param name="shortSeriesHandlingConfig"> The parameter defining how if AutoML should handle short time series. </param>
        /// <param name="targetAggregateFunction">
        /// The function to be used to aggregate the time series target column to conform to a user specified frequency.
        /// If the TargetAggregateFunction is set i.e. not &apos;None&apos;, but the freq parameter is not set, the error is raised. The possible target aggregation functions are: &quot;sum&quot;, &quot;max&quot;, &quot;min&quot; and &quot;mean&quot;.
        /// </param>
        /// <param name="targetLags">
        /// The number of past periods to lag from the target column.
        /// Please note <see cref="TargetLags"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoTargetLags"/> and <see cref="CustomTargetLags"/>.
        /// </param>
        /// <param name="targetRollingWindowSize">
        /// The number of past periods used to create a rolling window average of the target column.
        /// Please note <see cref="TargetRollingWindowSize"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoTargetRollingWindowSize"/> and <see cref="CustomTargetRollingWindowSize"/>.
        /// </param>
        /// <param name="timeColumnName"> The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency. </param>
        /// <param name="timeSeriesIdColumnNames">
        /// The names of columns used to group a timeseries. It can be used to create multiple series.
        /// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
        /// </param>
        /// <param name="useStl"> Configure STL Decomposition of the time-series target column. </param>
        /// <returns> A new <see cref="Models.ForecastingSettings"/> instance for mocking. </returns>
        public static ForecastingSettings ForecastingSettings(string countryOrRegionForHolidays = null, int? cvStepSize = null, MachineLearningFeatureLag? featureLags = null, ForecastHorizon forecastHorizon = null, string frequency = null, ForecastingSeasonality seasonality = null, MachineLearningShortSeriesHandlingConfiguration? shortSeriesHandlingConfig = null, TargetAggregationFunction? targetAggregateFunction = null, TargetLags targetLags = null, TargetRollingWindowSize targetRollingWindowSize = null, string timeColumnName = null, IEnumerable<string> timeSeriesIdColumnNames = null, MachineLearningUseStl? useStl = null)
        {
            timeSeriesIdColumnNames ??= new List<string>();

            return new ForecastingSettings(countryOrRegionForHolidays, cvStepSize, featureLags, forecastHorizon, frequency, seasonality, shortSeriesHandlingConfig, targetAggregateFunction, targetLags, targetRollingWindowSize, timeColumnName, timeSeriesIdColumnNames?.ToList(), useStl);
        }

        /// <summary> Initializes a new instance of ForecastingTrainingSettings. </summary>
        /// <param name="isDnnTrainingEnabled"> Enable recommendation of DNN models. </param>
        /// <param name="isModelExplainabilityEnabled"> Flag to turn on explainability on best model. </param>
        /// <param name="isOnnxCompatibleModelsEnabled"> Flag for enabling onnx compatible models. </param>
        /// <param name="isStackEnsembleEnabled"> Enable stack ensemble run. </param>
        /// <param name="isVoteEnsembleEnabled"> Enable voting ensemble run. </param>
        /// <param name="ensembleModelDownloadTimeout">
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </param>
        /// <param name="stackEnsembleSettings"> Stack ensemble settings for stack ensemble run. </param>
        /// <param name="allowedTrainingAlgorithms"> Allowed models for forecasting task. </param>
        /// <param name="blockedTrainingAlgorithms"> Blocked models for forecasting task. </param>
        /// <returns> A new <see cref="Models.ForecastingTrainingSettings"/> instance for mocking. </returns>
        public static ForecastingTrainingSettings ForecastingTrainingSettings(bool? isDnnTrainingEnabled = null, bool? isModelExplainabilityEnabled = null, bool? isOnnxCompatibleModelsEnabled = null, bool? isStackEnsembleEnabled = null, bool? isVoteEnsembleEnabled = null, TimeSpan? ensembleModelDownloadTimeout = null, MachineLearningStackEnsembleSettings stackEnsembleSettings = null, IEnumerable<ForecastingModel> allowedTrainingAlgorithms = null, IEnumerable<ForecastingModel> blockedTrainingAlgorithms = null)
        {
            allowedTrainingAlgorithms ??= new List<ForecastingModel>();
            blockedTrainingAlgorithms ??= new List<ForecastingModel>();

            return new ForecastingTrainingSettings(isDnnTrainingEnabled, isModelExplainabilityEnabled, isOnnxCompatibleModelsEnabled, isStackEnsembleEnabled, isVoteEnsembleEnabled, ensembleModelDownloadTimeout, stackEnsembleSettings, allowedTrainingAlgorithms?.ToList(), blockedTrainingAlgorithms?.ToList());
        }

        /// <summary> Initializes a new instance of GridSamplingAlgorithm. </summary>
        /// <returns> A new <see cref="Models.GridSamplingAlgorithm"/> instance for mocking. </returns>
        public static GridSamplingAlgorithm GridSamplingAlgorithm()
        {
            return new GridSamplingAlgorithm(SamplingAlgorithmType.Grid);
        }

        /// <summary> Initializes a new instance of MachineLearningIdAssetReference. </summary>
        /// <param name="assetId"> [Required] ARM resource ID of the asset. </param>
        /// <returns> A new <see cref="Models.MachineLearningIdAssetReference"/> instance for mocking. </returns>
        public static MachineLearningIdAssetReference MachineLearningIdAssetReference(ResourceIdentifier assetId = null)
        {
            return new MachineLearningIdAssetReference(ReferenceType.Id, assetId);
        }

        /// <summary> Initializes a new instance of ImageClassification. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric"> Primary metric to optimize for this task. </param>
        /// <param name="modelSettings"> Settings used for training the model. </param>
        /// <param name="searchSpace"> Search space for sampling different combinations of models and their hyperparameters. </param>
        /// <param name="limitSettings"> [Required] Limit settings for the AutoML job. </param>
        /// <param name="sweepSettings"> Model sweeping and hyperparameter sweeping related settings. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <returns> A new <see cref="Models.ImageClassification"/> instance for mocking. </returns>
        public static ImageClassification ImageClassification(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ClassificationPrimaryMetric? primaryMetric = null, ImageModelSettingsClassification modelSettings = null, IEnumerable<ImageModelDistributionSettingsClassification> searchSpace = null, ImageLimitSettings limitSettings = null, ImageSweepSettings sweepSettings = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null)
        {
            searchSpace ??= new List<ImageModelDistributionSettingsClassification>();

            return new ImageClassification(logVerbosity, targetColumnName, TaskType.ImageClassification, trainingData, primaryMetric, modelSettings, searchSpace?.ToList(), limitSettings, sweepSettings, validationData, validationDataSize);
        }

        /// <summary> Initializes a new instance of ImageModelSettingsClassification. </summary>
        /// <param name="advancedSettings"> Settings for advanced scenarios. </param>
        /// <param name="amsGradient"> Enable AMSGrad when optimizer is &apos;adam&apos; or &apos;adamw&apos;. </param>
        /// <param name="augmentations"> Settings for using Augmentations. </param>
        /// <param name="beta1"> Value of &apos;beta1&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="beta2"> Value of &apos;beta2&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="checkpointFrequency"> Frequency to store model checkpoints. Must be a positive integer. </param>
        /// <param name="checkpointModel"> The pretrained checkpoint model for incremental training. </param>
        /// <param name="checkpointRunId"> The id of a previous run that has a pretrained checkpoint for incremental training. </param>
        /// <param name="distributed"> Whether to use distributed training. </param>
        /// <param name="earlyStopping"> Enable early stopping logic during training. </param>
        /// <param name="earlyStoppingDelay">
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </param>
        /// <param name="earlyStoppingPatience">
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </param>
        /// <param name="enableOnnxNormalization"> Enable normalization when exporting ONNX model. </param>
        /// <param name="evaluationFrequency"> Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. </param>
        /// <param name="gradientAccumulationStep">
        /// Gradient accumulation means running a configured number of &quot;GradAccumulationStep&quot; steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </param>
        /// <param name="layersToFreeze">
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for &apos;seresnext&apos; means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="learningRate"> Initial learning rate. Must be a float in the range [0, 1]. </param>
        /// <param name="learningRateScheduler"> Type of learning rate scheduler. Must be &apos;warmup_cosine&apos; or &apos;step&apos;. </param>
        /// <param name="modelName">
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="momentum"> Value of momentum when optimizer is &apos;sgd&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="nesterov"> Enable nesterov when optimizer is &apos;sgd&apos;. </param>
        /// <param name="numberOfEpochs"> Number of training epochs. Must be a positive integer. </param>
        /// <param name="numberOfWorkers"> Number of data loader workers. Must be a non-negative integer. </param>
        /// <param name="optimizer"> Type of optimizer. </param>
        /// <param name="randomSeed"> Random seed to be used when using deterministic training. </param>
        /// <param name="stepLRGamma"> Value of gamma when learning rate scheduler is &apos;step&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="stepLRStepSize"> Value of step size when learning rate scheduler is &apos;step&apos;. Must be a positive integer. </param>
        /// <param name="trainingBatchSize"> Training batch size. Must be a positive integer. </param>
        /// <param name="validationBatchSize"> Validation batch size. Must be a positive integer. </param>
        /// <param name="warmupCosineLRCycles"> Value of cosine cycle when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="warmupCosineLRWarmupEpochs"> Value of warmup epochs when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a positive integer. </param>
        /// <param name="weightDecay"> Value of weight decay when optimizer is &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. Must be a float in the range[0, 1]. </param>
        /// <param name="trainingCropSize"> Image crop size that is input to the neural network for the training dataset. Must be a positive integer. </param>
        /// <param name="validationCropSize"> Image crop size that is input to the neural network for the validation dataset. Must be a positive integer. </param>
        /// <param name="validationResizeSize"> Image size to which to resize before cropping for validation dataset. Must be a positive integer. </param>
        /// <param name="weightedLoss">
        /// Weighted loss. The accepted values are 0 for no weighted loss.
        /// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
        /// </param>
        /// <returns> A new <see cref="Models.ImageModelSettingsClassification"/> instance for mocking. </returns>
        public static ImageModelSettingsClassification ImageModelSettingsClassification(string advancedSettings = null, bool? amsGradient = null, string augmentations = null, float? beta1 = null, float? beta2 = null, int? checkpointFrequency = null, MachineLearningFlowModelJobInput checkpointModel = null, string checkpointRunId = null, bool? distributed = null, bool? earlyStopping = null, int? earlyStoppingDelay = null, int? earlyStoppingPatience = null, bool? enableOnnxNormalization = null, int? evaluationFrequency = null, int? gradientAccumulationStep = null, int? layersToFreeze = null, float? learningRate = null, LearningRateScheduler? learningRateScheduler = null, string modelName = null, float? momentum = null, bool? nesterov = null, int? numberOfEpochs = null, int? numberOfWorkers = null, StochasticOptimizer? optimizer = null, int? randomSeed = null, float? stepLRGamma = null, int? stepLRStepSize = null, int? trainingBatchSize = null, int? validationBatchSize = null, float? warmupCosineLRCycles = null, int? warmupCosineLRWarmupEpochs = null, float? weightDecay = null, int? trainingCropSize = null, int? validationCropSize = null, int? validationResizeSize = null, int? weightedLoss = null)
        {
            return new ImageModelSettingsClassification(advancedSettings, amsGradient, augmentations, beta1, beta2, checkpointFrequency, checkpointModel, checkpointRunId, distributed, earlyStopping, earlyStoppingDelay, earlyStoppingPatience, enableOnnxNormalization, evaluationFrequency, gradientAccumulationStep, layersToFreeze, learningRate, learningRateScheduler, modelName, momentum, nesterov, numberOfEpochs, numberOfWorkers, optimizer, randomSeed, stepLRGamma, stepLRStepSize, trainingBatchSize, validationBatchSize, warmupCosineLRCycles, warmupCosineLRWarmupEpochs, weightDecay, trainingCropSize, validationCropSize, validationResizeSize, weightedLoss);
        }

        /// <summary> Initializes a new instance of ImageModelSettings. </summary>
        /// <param name="advancedSettings"> Settings for advanced scenarios. </param>
        /// <param name="amsGradient"> Enable AMSGrad when optimizer is &apos;adam&apos; or &apos;adamw&apos;. </param>
        /// <param name="augmentations"> Settings for using Augmentations. </param>
        /// <param name="beta1"> Value of &apos;beta1&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="beta2"> Value of &apos;beta2&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="checkpointFrequency"> Frequency to store model checkpoints. Must be a positive integer. </param>
        /// <param name="checkpointModel"> The pretrained checkpoint model for incremental training. </param>
        /// <param name="checkpointRunId"> The id of a previous run that has a pretrained checkpoint for incremental training. </param>
        /// <param name="distributed"> Whether to use distributed training. </param>
        /// <param name="earlyStopping"> Enable early stopping logic during training. </param>
        /// <param name="earlyStoppingDelay">
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </param>
        /// <param name="earlyStoppingPatience">
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </param>
        /// <param name="enableOnnxNormalization"> Enable normalization when exporting ONNX model. </param>
        /// <param name="evaluationFrequency"> Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. </param>
        /// <param name="gradientAccumulationStep">
        /// Gradient accumulation means running a configured number of &quot;GradAccumulationStep&quot; steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </param>
        /// <param name="layersToFreeze">
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for &apos;seresnext&apos; means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="learningRate"> Initial learning rate. Must be a float in the range [0, 1]. </param>
        /// <param name="learningRateScheduler"> Type of learning rate scheduler. Must be &apos;warmup_cosine&apos; or &apos;step&apos;. </param>
        /// <param name="modelName">
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="momentum"> Value of momentum when optimizer is &apos;sgd&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="nesterov"> Enable nesterov when optimizer is &apos;sgd&apos;. </param>
        /// <param name="numberOfEpochs"> Number of training epochs. Must be a positive integer. </param>
        /// <param name="numberOfWorkers"> Number of data loader workers. Must be a non-negative integer. </param>
        /// <param name="optimizer"> Type of optimizer. </param>
        /// <param name="randomSeed"> Random seed to be used when using deterministic training. </param>
        /// <param name="stepLRGamma"> Value of gamma when learning rate scheduler is &apos;step&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="stepLRStepSize"> Value of step size when learning rate scheduler is &apos;step&apos;. Must be a positive integer. </param>
        /// <param name="trainingBatchSize"> Training batch size. Must be a positive integer. </param>
        /// <param name="validationBatchSize"> Validation batch size. Must be a positive integer. </param>
        /// <param name="warmupCosineLRCycles"> Value of cosine cycle when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="warmupCosineLRWarmupEpochs"> Value of warmup epochs when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a positive integer. </param>
        /// <param name="weightDecay"> Value of weight decay when optimizer is &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. Must be a float in the range[0, 1]. </param>
        /// <returns> A new <see cref="Models.ImageModelSettings"/> instance for mocking. </returns>
        public static ImageModelSettings ImageModelSettings(string advancedSettings = null, bool? amsGradient = null, string augmentations = null, float? beta1 = null, float? beta2 = null, int? checkpointFrequency = null, MachineLearningFlowModelJobInput checkpointModel = null, string checkpointRunId = null, bool? distributed = null, bool? earlyStopping = null, int? earlyStoppingDelay = null, int? earlyStoppingPatience = null, bool? enableOnnxNormalization = null, int? evaluationFrequency = null, int? gradientAccumulationStep = null, int? layersToFreeze = null, float? learningRate = null, LearningRateScheduler? learningRateScheduler = null, string modelName = null, float? momentum = null, bool? nesterov = null, int? numberOfEpochs = null, int? numberOfWorkers = null, StochasticOptimizer? optimizer = null, int? randomSeed = null, float? stepLRGamma = null, int? stepLRStepSize = null, int? trainingBatchSize = null, int? validationBatchSize = null, float? warmupCosineLRCycles = null, int? warmupCosineLRWarmupEpochs = null, float? weightDecay = null)
        {
            return new ImageModelSettings(advancedSettings, amsGradient, augmentations, beta1, beta2, checkpointFrequency, checkpointModel, checkpointRunId, distributed, earlyStopping, earlyStoppingDelay, earlyStoppingPatience, enableOnnxNormalization, evaluationFrequency, gradientAccumulationStep, layersToFreeze, learningRate, learningRateScheduler, modelName, momentum, nesterov, numberOfEpochs, numberOfWorkers, optimizer, randomSeed, stepLRGamma, stepLRStepSize, trainingBatchSize, validationBatchSize, warmupCosineLRCycles, warmupCosineLRWarmupEpochs, weightDecay);
        }

        /// <summary> Initializes a new instance of MachineLearningFlowModelJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="mode"> Input Asset Delivery Mode. </param>
        /// <param name="uri"> [Required] Input Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningFlowModelJobInput"/> instance for mocking. </returns>
        public static MachineLearningFlowModelJobInput MachineLearningFlowModelJobInput(string description = null, MachineLearningInputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningFlowModelJobInput(description, JobInputType.MlflowModel, mode, uri);
        }

        /// <summary> Initializes a new instance of ImageModelDistributionSettingsClassification. </summary>
        /// <param name="amsGradient"> Enable AMSGrad when optimizer is &apos;adam&apos; or &apos;adamw&apos;. </param>
        /// <param name="augmentations"> Settings for using Augmentations. </param>
        /// <param name="beta1"> Value of &apos;beta1&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="beta2"> Value of &apos;beta2&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="distributed"> Whether to use distributer training. </param>
        /// <param name="earlyStopping"> Enable early stopping logic during training. </param>
        /// <param name="earlyStoppingDelay">
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </param>
        /// <param name="earlyStoppingPatience">
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </param>
        /// <param name="enableOnnxNormalization"> Enable normalization when exporting ONNX model. </param>
        /// <param name="evaluationFrequency"> Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. </param>
        /// <param name="gradientAccumulationStep">
        /// Gradient accumulation means running a configured number of &quot;GradAccumulationStep&quot; steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </param>
        /// <param name="layersToFreeze">
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for &apos;seresnext&apos; means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="learningRate"> Initial learning rate. Must be a float in the range [0, 1]. </param>
        /// <param name="learningRateScheduler"> Type of learning rate scheduler. Must be &apos;warmup_cosine&apos; or &apos;step&apos;. </param>
        /// <param name="modelName">
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="momentum"> Value of momentum when optimizer is &apos;sgd&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="nesterov"> Enable nesterov when optimizer is &apos;sgd&apos;. </param>
        /// <param name="numberOfEpochs"> Number of training epochs. Must be a positive integer. </param>
        /// <param name="numberOfWorkers"> Number of data loader workers. Must be a non-negative integer. </param>
        /// <param name="optimizer"> Type of optimizer. Must be either &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. </param>
        /// <param name="randomSeed"> Random seed to be used when using deterministic training. </param>
        /// <param name="stepLRGamma"> Value of gamma when learning rate scheduler is &apos;step&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="stepLRStepSize"> Value of step size when learning rate scheduler is &apos;step&apos;. Must be a positive integer. </param>
        /// <param name="trainingBatchSize"> Training batch size. Must be a positive integer. </param>
        /// <param name="validationBatchSize"> Validation batch size. Must be a positive integer. </param>
        /// <param name="warmupCosineLRCycles"> Value of cosine cycle when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="warmupCosineLRWarmupEpochs"> Value of warmup epochs when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a positive integer. </param>
        /// <param name="weightDecay"> Value of weight decay when optimizer is &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. Must be a float in the range[0, 1]. </param>
        /// <param name="trainingCropSize"> Image crop size that is input to the neural network for the training dataset. Must be a positive integer. </param>
        /// <param name="validationCropSize"> Image crop size that is input to the neural network for the validation dataset. Must be a positive integer. </param>
        /// <param name="validationResizeSize"> Image size to which to resize before cropping for validation dataset. Must be a positive integer. </param>
        /// <param name="weightedLoss">
        /// Weighted loss. The accepted values are 0 for no weighted loss.
        /// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
        /// </param>
        /// <returns> A new <see cref="Models.ImageModelDistributionSettingsClassification"/> instance for mocking. </returns>
        public static ImageModelDistributionSettingsClassification ImageModelDistributionSettingsClassification(string amsGradient = null, string augmentations = null, string beta1 = null, string beta2 = null, string distributed = null, string earlyStopping = null, string earlyStoppingDelay = null, string earlyStoppingPatience = null, string enableOnnxNormalization = null, string evaluationFrequency = null, string gradientAccumulationStep = null, string layersToFreeze = null, string learningRate = null, string learningRateScheduler = null, string modelName = null, string momentum = null, string nesterov = null, string numberOfEpochs = null, string numberOfWorkers = null, string optimizer = null, string randomSeed = null, string stepLRGamma = null, string stepLRStepSize = null, string trainingBatchSize = null, string validationBatchSize = null, string warmupCosineLRCycles = null, string warmupCosineLRWarmupEpochs = null, string weightDecay = null, string trainingCropSize = null, string validationCropSize = null, string validationResizeSize = null, string weightedLoss = null)
        {
            return new ImageModelDistributionSettingsClassification(amsGradient, augmentations, beta1, beta2, distributed, earlyStopping, earlyStoppingDelay, earlyStoppingPatience, enableOnnxNormalization, evaluationFrequency, gradientAccumulationStep, layersToFreeze, learningRate, learningRateScheduler, modelName, momentum, nesterov, numberOfEpochs, numberOfWorkers, optimizer, randomSeed, stepLRGamma, stepLRStepSize, trainingBatchSize, validationBatchSize, warmupCosineLRCycles, warmupCosineLRWarmupEpochs, weightDecay, trainingCropSize, validationCropSize, validationResizeSize, weightedLoss);
        }

        /// <summary> Initializes a new instance of ImageModelDistributionSettings. </summary>
        /// <param name="amsGradient"> Enable AMSGrad when optimizer is &apos;adam&apos; or &apos;adamw&apos;. </param>
        /// <param name="augmentations"> Settings for using Augmentations. </param>
        /// <param name="beta1"> Value of &apos;beta1&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="beta2"> Value of &apos;beta2&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="distributed"> Whether to use distributer training. </param>
        /// <param name="earlyStopping"> Enable early stopping logic during training. </param>
        /// <param name="earlyStoppingDelay">
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </param>
        /// <param name="earlyStoppingPatience">
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </param>
        /// <param name="enableOnnxNormalization"> Enable normalization when exporting ONNX model. </param>
        /// <param name="evaluationFrequency"> Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. </param>
        /// <param name="gradientAccumulationStep">
        /// Gradient accumulation means running a configured number of &quot;GradAccumulationStep&quot; steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </param>
        /// <param name="layersToFreeze">
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for &apos;seresnext&apos; means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="learningRate"> Initial learning rate. Must be a float in the range [0, 1]. </param>
        /// <param name="learningRateScheduler"> Type of learning rate scheduler. Must be &apos;warmup_cosine&apos; or &apos;step&apos;. </param>
        /// <param name="modelName">
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="momentum"> Value of momentum when optimizer is &apos;sgd&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="nesterov"> Enable nesterov when optimizer is &apos;sgd&apos;. </param>
        /// <param name="numberOfEpochs"> Number of training epochs. Must be a positive integer. </param>
        /// <param name="numberOfWorkers"> Number of data loader workers. Must be a non-negative integer. </param>
        /// <param name="optimizer"> Type of optimizer. Must be either &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. </param>
        /// <param name="randomSeed"> Random seed to be used when using deterministic training. </param>
        /// <param name="stepLRGamma"> Value of gamma when learning rate scheduler is &apos;step&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="stepLRStepSize"> Value of step size when learning rate scheduler is &apos;step&apos;. Must be a positive integer. </param>
        /// <param name="trainingBatchSize"> Training batch size. Must be a positive integer. </param>
        /// <param name="validationBatchSize"> Validation batch size. Must be a positive integer. </param>
        /// <param name="warmupCosineLRCycles"> Value of cosine cycle when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="warmupCosineLRWarmupEpochs"> Value of warmup epochs when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a positive integer. </param>
        /// <param name="weightDecay"> Value of weight decay when optimizer is &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. Must be a float in the range[0, 1]. </param>
        /// <returns> A new <see cref="Models.ImageModelDistributionSettings"/> instance for mocking. </returns>
        public static ImageModelDistributionSettings ImageModelDistributionSettings(string amsGradient = null, string augmentations = null, string beta1 = null, string beta2 = null, string distributed = null, string earlyStopping = null, string earlyStoppingDelay = null, string earlyStoppingPatience = null, string enableOnnxNormalization = null, string evaluationFrequency = null, string gradientAccumulationStep = null, string layersToFreeze = null, string learningRate = null, string learningRateScheduler = null, string modelName = null, string momentum = null, string nesterov = null, string numberOfEpochs = null, string numberOfWorkers = null, string optimizer = null, string randomSeed = null, string stepLRGamma = null, string stepLRStepSize = null, string trainingBatchSize = null, string validationBatchSize = null, string warmupCosineLRCycles = null, string warmupCosineLRWarmupEpochs = null, string weightDecay = null)
        {
            return new ImageModelDistributionSettings(amsGradient, augmentations, beta1, beta2, distributed, earlyStopping, earlyStoppingDelay, earlyStoppingPatience, enableOnnxNormalization, evaluationFrequency, gradientAccumulationStep, layersToFreeze, learningRate, learningRateScheduler, modelName, momentum, nesterov, numberOfEpochs, numberOfWorkers, optimizer, randomSeed, stepLRGamma, stepLRStepSize, trainingBatchSize, validationBatchSize, warmupCosineLRCycles, warmupCosineLRWarmupEpochs, weightDecay);
        }

        /// <summary> Initializes a new instance of ImageLimitSettings. </summary>
        /// <param name="maxConcurrentTrials"> Maximum number of concurrent AutoML iterations. </param>
        /// <param name="maxTrials"> Maximum number of AutoML iterations. </param>
        /// <param name="timeout"> AutoML job timeout. </param>
        /// <returns> A new <see cref="Models.ImageLimitSettings"/> instance for mocking. </returns>
        public static ImageLimitSettings ImageLimitSettings(int? maxConcurrentTrials = null, int? maxTrials = null, TimeSpan? timeout = null)
        {
            return new ImageLimitSettings(maxConcurrentTrials, maxTrials, timeout);
        }

        /// <summary> Initializes a new instance of ImageSweepSettings. </summary>
        /// <param name="earlyTermination">
        /// Type of early termination policy.
        /// Please note <see cref="MachineLearningEarlyTerminationPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BanditPolicy"/>, <see cref="MedianStoppingPolicy"/> and <see cref="TruncationSelectionPolicy"/>.
        /// </param>
        /// <param name="samplingAlgorithm"> [Required] Type of the hyperparameter sampling algorithms. </param>
        /// <returns> A new <see cref="Models.ImageSweepSettings"/> instance for mocking. </returns>
        public static ImageSweepSettings ImageSweepSettings(MachineLearningEarlyTerminationPolicy earlyTermination = null, SamplingAlgorithmType samplingAlgorithm = default)
        {
            return new ImageSweepSettings(earlyTermination, samplingAlgorithm);
        }

        /// <summary> Initializes a new instance of ImageClassificationMultilabel. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric"> Primary metric to optimize for this task. </param>
        /// <param name="modelSettings"> Settings used for training the model. </param>
        /// <param name="searchSpace"> Search space for sampling different combinations of models and their hyperparameters. </param>
        /// <param name="limitSettings"> [Required] Limit settings for the AutoML job. </param>
        /// <param name="sweepSettings"> Model sweeping and hyperparameter sweeping related settings. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <returns> A new <see cref="Models.ImageClassificationMultilabel"/> instance for mocking. </returns>
        public static ImageClassificationMultilabel ImageClassificationMultilabel(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ClassificationMultilabelPrimaryMetric? primaryMetric = null, ImageModelSettingsClassification modelSettings = null, IEnumerable<ImageModelDistributionSettingsClassification> searchSpace = null, ImageLimitSettings limitSettings = null, ImageSweepSettings sweepSettings = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null)
        {
            searchSpace ??= new List<ImageModelDistributionSettingsClassification>();

            return new ImageClassificationMultilabel(logVerbosity, targetColumnName, TaskType.ImageClassificationMultilabel, trainingData, primaryMetric, modelSettings, searchSpace?.ToList(), limitSettings, sweepSettings, validationData, validationDataSize);
        }

        /// <summary> Initializes a new instance of ImageInstanceSegmentation. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric"> Primary metric to optimize for this task. </param>
        /// <param name="modelSettings"> Settings used for training the model. </param>
        /// <param name="searchSpace"> Search space for sampling different combinations of models and their hyperparameters. </param>
        /// <param name="limitSettings"> [Required] Limit settings for the AutoML job. </param>
        /// <param name="sweepSettings"> Model sweeping and hyperparameter sweeping related settings. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <returns> A new <see cref="Models.ImageInstanceSegmentation"/> instance for mocking. </returns>
        public static ImageInstanceSegmentation ImageInstanceSegmentation(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, InstanceSegmentationPrimaryMetric? primaryMetric = null, ImageModelSettingsObjectDetection modelSettings = null, IEnumerable<ImageModelDistributionSettingsObjectDetection> searchSpace = null, ImageLimitSettings limitSettings = null, ImageSweepSettings sweepSettings = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null)
        {
            searchSpace ??= new List<ImageModelDistributionSettingsObjectDetection>();

            return new ImageInstanceSegmentation(logVerbosity, targetColumnName, TaskType.ImageInstanceSegmentation, trainingData, primaryMetric, modelSettings, searchSpace?.ToList(), limitSettings, sweepSettings, validationData, validationDataSize);
        }

        /// <summary> Initializes a new instance of ImageModelSettingsObjectDetection. </summary>
        /// <param name="advancedSettings"> Settings for advanced scenarios. </param>
        /// <param name="amsGradient"> Enable AMSGrad when optimizer is &apos;adam&apos; or &apos;adamw&apos;. </param>
        /// <param name="augmentations"> Settings for using Augmentations. </param>
        /// <param name="beta1"> Value of &apos;beta1&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="beta2"> Value of &apos;beta2&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="checkpointFrequency"> Frequency to store model checkpoints. Must be a positive integer. </param>
        /// <param name="checkpointModel"> The pretrained checkpoint model for incremental training. </param>
        /// <param name="checkpointRunId"> The id of a previous run that has a pretrained checkpoint for incremental training. </param>
        /// <param name="distributed"> Whether to use distributed training. </param>
        /// <param name="earlyStopping"> Enable early stopping logic during training. </param>
        /// <param name="earlyStoppingDelay">
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </param>
        /// <param name="earlyStoppingPatience">
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </param>
        /// <param name="enableOnnxNormalization"> Enable normalization when exporting ONNX model. </param>
        /// <param name="evaluationFrequency"> Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. </param>
        /// <param name="gradientAccumulationStep">
        /// Gradient accumulation means running a configured number of &quot;GradAccumulationStep&quot; steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </param>
        /// <param name="layersToFreeze">
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for &apos;seresnext&apos; means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="learningRate"> Initial learning rate. Must be a float in the range [0, 1]. </param>
        /// <param name="learningRateScheduler"> Type of learning rate scheduler. Must be &apos;warmup_cosine&apos; or &apos;step&apos;. </param>
        /// <param name="modelName">
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="momentum"> Value of momentum when optimizer is &apos;sgd&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="nesterov"> Enable nesterov when optimizer is &apos;sgd&apos;. </param>
        /// <param name="numberOfEpochs"> Number of training epochs. Must be a positive integer. </param>
        /// <param name="numberOfWorkers"> Number of data loader workers. Must be a non-negative integer. </param>
        /// <param name="optimizer"> Type of optimizer. </param>
        /// <param name="randomSeed"> Random seed to be used when using deterministic training. </param>
        /// <param name="stepLRGamma"> Value of gamma when learning rate scheduler is &apos;step&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="stepLRStepSize"> Value of step size when learning rate scheduler is &apos;step&apos;. Must be a positive integer. </param>
        /// <param name="trainingBatchSize"> Training batch size. Must be a positive integer. </param>
        /// <param name="validationBatchSize"> Validation batch size. Must be a positive integer. </param>
        /// <param name="warmupCosineLRCycles"> Value of cosine cycle when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="warmupCosineLRWarmupEpochs"> Value of warmup epochs when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a positive integer. </param>
        /// <param name="weightDecay"> Value of weight decay when optimizer is &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. Must be a float in the range[0, 1]. </param>
        /// <param name="boxDetectionsPerImage">
        /// Maximum number of detections per image, for all classes. Must be a positive integer.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="boxScoreThreshold">
        /// During inference, only return proposals with a classification score greater than
        /// BoxScoreThreshold. Must be a float in the range[0, 1].
        /// </param>
        /// <param name="imageSize">
        /// Image size for train and validation. Must be a positive integer.
        /// Note: The training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is only supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="maxSize">
        /// Maximum size of the image to be rescaled before feeding it to the backbone.
        /// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="minSize">
        /// Minimum size of the image to be rescaled before feeding it to the backbone.
        /// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="modelSize">
        /// Model size. Must be &apos;small&apos;, &apos;medium&apos;, &apos;large&apos;, or &apos;xlarge&apos;.
        /// Note: training run may get into CUDA OOM if the model size is too big.
        /// Note: This settings is only supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="multiScale">
        /// Enable multi-scale image by varying image size by +/- 50%.
        /// Note: training run may get into CUDA OOM if no sufficient GPU memory.
        /// Note: This settings is only supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="nmsIouThreshold"> IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1]. </param>
        /// <param name="tileGridSize">
        /// The grid size to use for tiling each image. Note: TileGridSize must not be
        /// None to enable small object detection logic. A string containing two integers in mxn format.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="tileOverlapRatio">
        /// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="tilePredictionsNmsThreshold">
        /// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
        /// Used in validation/ inference. Must be float in the range [0, 1].
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="validationIouThreshold"> IOU threshold to use when computing validation metric. Must be float in the range [0, 1]. </param>
        /// <param name="validationMetricType"> Metric computation method to use for validation metrics. </param>
        /// <returns> A new <see cref="Models.ImageModelSettingsObjectDetection"/> instance for mocking. </returns>
        public static ImageModelSettingsObjectDetection ImageModelSettingsObjectDetection(string advancedSettings = null, bool? amsGradient = null, string augmentations = null, float? beta1 = null, float? beta2 = null, int? checkpointFrequency = null, MachineLearningFlowModelJobInput checkpointModel = null, string checkpointRunId = null, bool? distributed = null, bool? earlyStopping = null, int? earlyStoppingDelay = null, int? earlyStoppingPatience = null, bool? enableOnnxNormalization = null, int? evaluationFrequency = null, int? gradientAccumulationStep = null, int? layersToFreeze = null, float? learningRate = null, LearningRateScheduler? learningRateScheduler = null, string modelName = null, float? momentum = null, bool? nesterov = null, int? numberOfEpochs = null, int? numberOfWorkers = null, StochasticOptimizer? optimizer = null, int? randomSeed = null, float? stepLRGamma = null, int? stepLRStepSize = null, int? trainingBatchSize = null, int? validationBatchSize = null, float? warmupCosineLRCycles = null, int? warmupCosineLRWarmupEpochs = null, float? weightDecay = null, int? boxDetectionsPerImage = null, float? boxScoreThreshold = null, int? imageSize = null, int? maxSize = null, int? minSize = null, MachineLearningModelSize? modelSize = null, bool? multiScale = null, float? nmsIouThreshold = null, string tileGridSize = null, float? tileOverlapRatio = null, float? tilePredictionsNmsThreshold = null, float? validationIouThreshold = null, ValidationMetricType? validationMetricType = null)
        {
            return new ImageModelSettingsObjectDetection(advancedSettings, amsGradient, augmentations, beta1, beta2, checkpointFrequency, checkpointModel, checkpointRunId, distributed, earlyStopping, earlyStoppingDelay, earlyStoppingPatience, enableOnnxNormalization, evaluationFrequency, gradientAccumulationStep, layersToFreeze, learningRate, learningRateScheduler, modelName, momentum, nesterov, numberOfEpochs, numberOfWorkers, optimizer, randomSeed, stepLRGamma, stepLRStepSize, trainingBatchSize, validationBatchSize, warmupCosineLRCycles, warmupCosineLRWarmupEpochs, weightDecay, boxDetectionsPerImage, boxScoreThreshold, imageSize, maxSize, minSize, modelSize, multiScale, nmsIouThreshold, tileGridSize, tileOverlapRatio, tilePredictionsNmsThreshold, validationIouThreshold, validationMetricType);
        }

        /// <summary> Initializes a new instance of ImageModelDistributionSettingsObjectDetection. </summary>
        /// <param name="amsGradient"> Enable AMSGrad when optimizer is &apos;adam&apos; or &apos;adamw&apos;. </param>
        /// <param name="augmentations"> Settings for using Augmentations. </param>
        /// <param name="beta1"> Value of &apos;beta1&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="beta2"> Value of &apos;beta2&apos; when optimizer is &apos;adam&apos; or &apos;adamw&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="distributed"> Whether to use distributer training. </param>
        /// <param name="earlyStopping"> Enable early stopping logic during training. </param>
        /// <param name="earlyStoppingDelay">
        /// Minimum number of epochs or validation evaluations to wait before primary metric improvement
        /// is tracked for early stopping. Must be a positive integer.
        /// </param>
        /// <param name="earlyStoppingPatience">
        /// Minimum number of epochs or validation evaluations with no primary metric improvement before
        /// the run is stopped. Must be a positive integer.
        /// </param>
        /// <param name="enableOnnxNormalization"> Enable normalization when exporting ONNX model. </param>
        /// <param name="evaluationFrequency"> Frequency to evaluate validation dataset to get metric scores. Must be a positive integer. </param>
        /// <param name="gradientAccumulationStep">
        /// Gradient accumulation means running a configured number of &quot;GradAccumulationStep&quot; steps without
        /// updating the model weights while accumulating the gradients of those steps, and then using
        /// the accumulated gradients to compute the weight updates. Must be a positive integer.
        /// </param>
        /// <param name="layersToFreeze">
        /// Number of layers to freeze for the model. Must be a positive integer.
        /// For instance, passing 2 as value for &apos;seresnext&apos; means
        /// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
        /// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="learningRate"> Initial learning rate. Must be a float in the range [0, 1]. </param>
        /// <param name="learningRateScheduler"> Type of learning rate scheduler. Must be &apos;warmup_cosine&apos; or &apos;step&apos;. </param>
        /// <param name="modelName">
        /// Name of the model to use for training.
        /// For more information on the available models please visit the official documentation:
        /// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
        /// </param>
        /// <param name="momentum"> Value of momentum when optimizer is &apos;sgd&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="nesterov"> Enable nesterov when optimizer is &apos;sgd&apos;. </param>
        /// <param name="numberOfEpochs"> Number of training epochs. Must be a positive integer. </param>
        /// <param name="numberOfWorkers"> Number of data loader workers. Must be a non-negative integer. </param>
        /// <param name="optimizer"> Type of optimizer. Must be either &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. </param>
        /// <param name="randomSeed"> Random seed to be used when using deterministic training. </param>
        /// <param name="stepLRGamma"> Value of gamma when learning rate scheduler is &apos;step&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="stepLRStepSize"> Value of step size when learning rate scheduler is &apos;step&apos;. Must be a positive integer. </param>
        /// <param name="trainingBatchSize"> Training batch size. Must be a positive integer. </param>
        /// <param name="validationBatchSize"> Validation batch size. Must be a positive integer. </param>
        /// <param name="warmupCosineLRCycles"> Value of cosine cycle when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a float in the range [0, 1]. </param>
        /// <param name="warmupCosineLRWarmupEpochs"> Value of warmup epochs when learning rate scheduler is &apos;warmup_cosine&apos;. Must be a positive integer. </param>
        /// <param name="weightDecay"> Value of weight decay when optimizer is &apos;sgd&apos;, &apos;adam&apos;, or &apos;adamw&apos;. Must be a float in the range[0, 1]. </param>
        /// <param name="boxDetectionsPerImage">
        /// Maximum number of detections per image, for all classes. Must be a positive integer.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="boxScoreThreshold">
        /// During inference, only return proposals with a classification score greater than
        /// BoxScoreThreshold. Must be a float in the range[0, 1].
        /// </param>
        /// <param name="imageSize">
        /// Image size for train and validation. Must be a positive integer.
        /// Note: The training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is only supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="maxSize">
        /// Maximum size of the image to be rescaled before feeding it to the backbone.
        /// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="minSize">
        /// Minimum size of the image to be rescaled before feeding it to the backbone.
        /// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="modelSize">
        /// Model size. Must be &apos;small&apos;, &apos;medium&apos;, &apos;large&apos;, or &apos;xlarge&apos;.
        /// Note: training run may get into CUDA OOM if the model size is too big.
        /// Note: This settings is only supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="multiScale">
        /// Enable multi-scale image by varying image size by +/- 50%.
        /// Note: training run may get into CUDA OOM if no sufficient GPU memory.
        /// Note: This settings is only supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="nmsIouThreshold"> IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1]. </param>
        /// <param name="tileGridSize">
        /// The grid size to use for tiling each image. Note: TileGridSize must not be
        /// None to enable small object detection logic. A string containing two integers in mxn format.
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="tileOverlapRatio">
        /// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// </param>
        /// <param name="tilePredictionsNmsThreshold">
        /// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
        /// Used in validation/ inference. Must be float in the range [0, 1].
        /// Note: This settings is not supported for the &apos;yolov5&apos; algorithm.
        /// NMS: Non-maximum suppression
        /// </param>
        /// <param name="validationIouThreshold"> IOU threshold to use when computing validation metric. Must be float in the range [0, 1]. </param>
        /// <param name="validationMetricType"> Metric computation method to use for validation metrics. Must be &apos;none&apos;, &apos;coco&apos;, &apos;voc&apos;, or &apos;coco_voc&apos;. </param>
        /// <returns> A new <see cref="Models.ImageModelDistributionSettingsObjectDetection"/> instance for mocking. </returns>
        public static ImageModelDistributionSettingsObjectDetection ImageModelDistributionSettingsObjectDetection(string amsGradient = null, string augmentations = null, string beta1 = null, string beta2 = null, string distributed = null, string earlyStopping = null, string earlyStoppingDelay = null, string earlyStoppingPatience = null, string enableOnnxNormalization = null, string evaluationFrequency = null, string gradientAccumulationStep = null, string layersToFreeze = null, string learningRate = null, string learningRateScheduler = null, string modelName = null, string momentum = null, string nesterov = null, string numberOfEpochs = null, string numberOfWorkers = null, string optimizer = null, string randomSeed = null, string stepLRGamma = null, string stepLRStepSize = null, string trainingBatchSize = null, string validationBatchSize = null, string warmupCosineLRCycles = null, string warmupCosineLRWarmupEpochs = null, string weightDecay = null, string boxDetectionsPerImage = null, string boxScoreThreshold = null, string imageSize = null, string maxSize = null, string minSize = null, string modelSize = null, string multiScale = null, string nmsIouThreshold = null, string tileGridSize = null, string tileOverlapRatio = null, string tilePredictionsNmsThreshold = null, string validationIouThreshold = null, string validationMetricType = null)
        {
            return new ImageModelDistributionSettingsObjectDetection(amsGradient, augmentations, beta1, beta2, distributed, earlyStopping, earlyStoppingDelay, earlyStoppingPatience, enableOnnxNormalization, evaluationFrequency, gradientAccumulationStep, layersToFreeze, learningRate, learningRateScheduler, modelName, momentum, nesterov, numberOfEpochs, numberOfWorkers, optimizer, randomSeed, stepLRGamma, stepLRStepSize, trainingBatchSize, validationBatchSize, warmupCosineLRCycles, warmupCosineLRWarmupEpochs, weightDecay, boxDetectionsPerImage, boxScoreThreshold, imageSize, maxSize, minSize, modelSize, multiScale, nmsIouThreshold, tileGridSize, tileOverlapRatio, tilePredictionsNmsThreshold, validationIouThreshold, validationMetricType);
        }

        /// <summary> Initializes a new instance of ImageObjectDetection. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric"> Primary metric to optimize for this task. </param>
        /// <param name="modelSettings"> Settings used for training the model. </param>
        /// <param name="searchSpace"> Search space for sampling different combinations of models and their hyperparameters. </param>
        /// <param name="limitSettings"> [Required] Limit settings for the AutoML job. </param>
        /// <param name="sweepSettings"> Model sweeping and hyperparameter sweeping related settings. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <returns> A new <see cref="Models.ImageObjectDetection"/> instance for mocking. </returns>
        public static ImageObjectDetection ImageObjectDetection(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ObjectDetectionPrimaryMetric? primaryMetric = null, ImageModelSettingsObjectDetection modelSettings = null, IEnumerable<ImageModelDistributionSettingsObjectDetection> searchSpace = null, ImageLimitSettings limitSettings = null, ImageSweepSettings sweepSettings = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null)
        {
            searchSpace ??= new List<ImageModelDistributionSettingsObjectDetection>();

            return new ImageObjectDetection(logVerbosity, targetColumnName, TaskType.ImageObjectDetection, trainingData, primaryMetric, modelSettings, searchSpace?.ToList(), limitSettings, sweepSettings, validationData, validationDataSize);
        }

        /// <summary> Initializes a new instance of MachineLearningJobScheduleAction. </summary>
        /// <param name="jobDefinition">
        /// [Required] Defines Schedule action definition details.
        /// Please note <see cref="MachineLearningJobProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoMLJob"/>, <see cref="MachineLearningCommandJob"/>, <see cref="MachineLearningPipelineJob"/> and <see cref="MachineLearningSweepJob"/>.
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningJobScheduleAction"/> instance for mocking. </returns>
        public static MachineLearningJobScheduleAction MachineLearningJobScheduleAction(MachineLearningJobProperties jobDefinition = null)
        {
            return new MachineLearningJobScheduleAction(ScheduleActionType.CreateJob, jobDefinition);
        }

        /// <summary> Initializes a new instance of MachineLearningKubernetesOnlineDeployment. </summary>
        /// <param name="codeConfiguration"> Code configuration for the endpoint deployment. </param>
        /// <param name="description"> Description of the endpoint deployment. </param>
        /// <param name="environmentId"> ARM resource ID or AssetId of the environment specification for the endpoint deployment. </param>
        /// <param name="environmentVariables"> Environment variables configuration for the deployment. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="appInsightsEnabled"> If true, enables Application Insights logging. </param>
        /// <param name="egressPublicNetworkAccess"> If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled. </param>
        /// <param name="instanceType"> Compute instance type. </param>
        /// <param name="livenessProbe"> Liveness probe monitors the health of the container regularly. </param>
        /// <param name="model"> The URI path to the model. </param>
        /// <param name="modelMountPath"> The path to mount the model in custom container. </param>
        /// <param name="provisioningState"> Provisioning state for the endpoint deployment. </param>
        /// <param name="readinessProbe"> Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe. </param>
        /// <param name="requestSettings"> Request settings for the deployment. </param>
        /// <param name="scaleSettings">
        /// Scale settings for the deployment.
        /// If it is null or not provided,
        /// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
        /// and to DefaultScaleSettings for ManagedOnlineDeployment.
        /// Please note <see cref="MachineLearningOnlineScaleSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningDefaultScaleSettings"/> and <see cref="MachineLearningTargetUtilizationScaleSettings"/>.
        /// </param>
        /// <param name="containerResourceRequirements"> The resource requirements for the container (cpu and memory). </param>
        /// <returns> A new <see cref="Models.MachineLearningKubernetesOnlineDeployment"/> instance for mocking. </returns>
        public static MachineLearningKubernetesOnlineDeployment MachineLearningKubernetesOnlineDeployment(MachineLearningCodeConfiguration codeConfiguration = null, string description = null, string environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, string> properties = null, bool? appInsightsEnabled = null, MachineLearningEgressPublicNetworkAccessType? egressPublicNetworkAccess = null, string instanceType = null, MachineLearningProbeSettings livenessProbe = null, string model = null, string modelMountPath = null, MachineLearningDeploymentProvisioningState? provisioningState = null, MachineLearningProbeSettings readinessProbe = null, MachineLearningOnlineRequestSettings requestSettings = null, MachineLearningOnlineScaleSettings scaleSettings = null, MachineLearningContainerResourceRequirements containerResourceRequirements = null)
        {
            environmentVariables ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new MachineLearningKubernetesOnlineDeployment(codeConfiguration, description, environmentId, environmentVariables, properties, appInsightsEnabled, egressPublicNetworkAccess, MachineLearningEndpointComputeType.Kubernetes, instanceType, livenessProbe, model, modelMountPath, provisioningState, readinessProbe, requestSettings, scaleSettings, containerResourceRequirements);
        }

        /// <summary> Initializes a new instance of MachineLearningLiteralJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="value"> [Required] Literal value for the input. </param>
        /// <returns> A new <see cref="Models.MachineLearningLiteralJobInput"/> instance for mocking. </returns>
        public static MachineLearningLiteralJobInput MachineLearningLiteralJobInput(string description = null, string value = null)
        {
            return new MachineLearningLiteralJobInput(description, JobInputType.Literal, value);
        }

        /// <summary> Initializes a new instance of MachineLearningManagedIdentity. </summary>
        /// <param name="clientId"> Specifies a user-assigned identity by client ID. For system-assigned, do not set this field. </param>
        /// <param name="objectId"> Specifies a user-assigned identity by object ID. For system-assigned, do not set this field. </param>
        /// <param name="resourceId"> Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field. </param>
        /// <returns> A new <see cref="Models.MachineLearningManagedIdentity"/> instance for mocking. </returns>
        public static MachineLearningManagedIdentity MachineLearningManagedIdentity(Guid? clientId = null, Guid? objectId = null, ResourceIdentifier resourceId = null)
        {
            return new MachineLearningManagedIdentity(IdentityConfigurationType.Managed, clientId, objectId, resourceId);
        }

        /// <summary> Initializes a new instance of MachineLearningManagedOnlineDeployment. </summary>
        /// <param name="codeConfiguration"> Code configuration for the endpoint deployment. </param>
        /// <param name="description"> Description of the endpoint deployment. </param>
        /// <param name="environmentId"> ARM resource ID or AssetId of the environment specification for the endpoint deployment. </param>
        /// <param name="environmentVariables"> Environment variables configuration for the deployment. </param>
        /// <param name="properties"> Property dictionary. Properties can be added, but not removed or altered. </param>
        /// <param name="appInsightsEnabled"> If true, enables Application Insights logging. </param>
        /// <param name="egressPublicNetworkAccess"> If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled. </param>
        /// <param name="instanceType"> Compute instance type. </param>
        /// <param name="livenessProbe"> Liveness probe monitors the health of the container regularly. </param>
        /// <param name="model"> The URI path to the model. </param>
        /// <param name="modelMountPath"> The path to mount the model in custom container. </param>
        /// <param name="provisioningState"> Provisioning state for the endpoint deployment. </param>
        /// <param name="readinessProbe"> Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe. </param>
        /// <param name="requestSettings"> Request settings for the deployment. </param>
        /// <param name="scaleSettings">
        /// Scale settings for the deployment.
        /// If it is null or not provided,
        /// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
        /// and to DefaultScaleSettings for ManagedOnlineDeployment.
        /// Please note <see cref="MachineLearningOnlineScaleSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningDefaultScaleSettings"/> and <see cref="MachineLearningTargetUtilizationScaleSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.MachineLearningManagedOnlineDeployment"/> instance for mocking. </returns>
        public static MachineLearningManagedOnlineDeployment MachineLearningManagedOnlineDeployment(MachineLearningCodeConfiguration codeConfiguration = null, string description = null, string environmentId = null, IDictionary<string, string> environmentVariables = null, IDictionary<string, string> properties = null, bool? appInsightsEnabled = null, MachineLearningEgressPublicNetworkAccessType? egressPublicNetworkAccess = null, string instanceType = null, MachineLearningProbeSettings livenessProbe = null, string model = null, string modelMountPath = null, MachineLearningDeploymentProvisioningState? provisioningState = null, MachineLearningProbeSettings readinessProbe = null, MachineLearningOnlineRequestSettings requestSettings = null, MachineLearningOnlineScaleSettings scaleSettings = null)
        {
            environmentVariables ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new MachineLearningManagedOnlineDeployment(codeConfiguration, description, environmentId, environmentVariables, properties, appInsightsEnabled, egressPublicNetworkAccess, MachineLearningEndpointComputeType.Managed, instanceType, livenessProbe, model, modelMountPath, provisioningState, readinessProbe, requestSettings, scaleSettings);
        }

        /// <summary> Initializes a new instance of MedianStoppingPolicy. </summary>
        /// <param name="delayEvaluation"> Number of intervals by which to delay the first evaluation. </param>
        /// <param name="evaluationInterval"> Interval (number of runs) between policy evaluations. </param>
        /// <returns> A new <see cref="Models.MedianStoppingPolicy"/> instance for mocking. </returns>
        public static MedianStoppingPolicy MedianStoppingPolicy(int? delayEvaluation = null, int? evaluationInterval = null)
        {
            return new MedianStoppingPolicy(delayEvaluation, evaluationInterval, EarlyTerminationPolicyType.MedianStopping);
        }

        /// <summary> Initializes a new instance of MachineLearningFlowModelJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="mode"> Output Asset Delivery Mode. </param>
        /// <param name="uri"> Output Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningFlowModelJobOutput"/> instance for mocking. </returns>
        public static MachineLearningFlowModelJobOutput MachineLearningFlowModelJobOutput(string description = null, MachineLearningOutputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningFlowModelJobOutput(description, JobOutputType.MlflowModel, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningTable. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="dataUri"> [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20221001.Assets.DataVersionBase.DataType. </param>
        /// <param name="referencedUris"> Uris referenced in the MLTable definition (required for lineage). </param>
        /// <returns> A new <see cref="Models.MachineLearningTable"/> instance for mocking. </returns>
        public static MachineLearningTable MachineLearningTable(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, Uri dataUri = null, IEnumerable<Uri> referencedUris = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            referencedUris ??= new List<Uri>();

            return new MachineLearningTable(description, properties, tags, isAnonymous, isArchived, MachineLearningDataType.Mltable, dataUri, referencedUris?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningTableJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="mode"> Output Asset Delivery Mode. </param>
        /// <param name="uri"> Output Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningTableJobOutput"/> instance for mocking. </returns>
        public static MachineLearningTableJobOutput MachineLearningTableJobOutput(string description = null, MachineLearningOutputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningTableJobOutput(description, JobOutputType.Mltable, mode, uri);
        }

        /// <summary> Initializes a new instance of MpiDistributionConfiguration. </summary>
        /// <param name="processCountPerInstance"> Number of processes per MPI node. </param>
        /// <returns> A new <see cref="Models.MpiDistributionConfiguration"/> instance for mocking. </returns>
        public static MpiDistributionConfiguration MpiDistributionConfiguration(int? processCountPerInstance = null)
        {
            return new MpiDistributionConfiguration(DistributionType.Mpi, processCountPerInstance);
        }

        /// <summary> Initializes a new instance of NlpVerticalLimitSettings. </summary>
        /// <param name="maxConcurrentTrials"> Maximum Concurrent AutoML iterations. </param>
        /// <param name="maxTrials"> Number of AutoML iterations. </param>
        /// <param name="timeout"> AutoML job timeout. </param>
        /// <returns> A new <see cref="Models.NlpVerticalLimitSettings"/> instance for mocking. </returns>
        public static NlpVerticalLimitSettings NlpVerticalLimitSettings(int? maxConcurrentTrials = null, int? maxTrials = null, TimeSpan? timeout = null)
        {
            return new NlpVerticalLimitSettings(maxConcurrentTrials, maxTrials, timeout);
        }

        /// <summary> Initializes a new instance of MachineLearningNoneDatastoreCredentials. </summary>
        /// <returns> A new <see cref="Models.MachineLearningNoneDatastoreCredentials"/> instance for mocking. </returns>
        public static MachineLearningNoneDatastoreCredentials MachineLearningNoneDatastoreCredentials()
        {
            return new MachineLearningNoneDatastoreCredentials(CredentialsType.None);
        }

        /// <summary> Initializes a new instance of MachineLearningOutputPathAssetReference. </summary>
        /// <param name="jobId"> ARM resource ID of the job. </param>
        /// <param name="path"> The path of the file/directory in the job output. </param>
        /// <returns> A new <see cref="Models.MachineLearningOutputPathAssetReference"/> instance for mocking. </returns>
        public static MachineLearningOutputPathAssetReference MachineLearningOutputPathAssetReference(ResourceIdentifier jobId = null, string path = null)
        {
            return new MachineLearningOutputPathAssetReference(ReferenceType.OutputPath, jobId, path);
        }

        /// <summary> Initializes a new instance of MachineLearningPipelineJob. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="componentId"> ARM resource ID of the component resource. </param>
        /// <param name="computeId"> ARM resource ID of the compute resource. </param>
        /// <param name="displayName"> Display name of job. </param>
        /// <param name="experimentName"> The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment. </param>
        /// <param name="identity">
        /// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        /// Defaults to AmlToken if null.
        /// Please note <see cref="MachineLearningIdentityConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmlToken"/>, <see cref="MachineLearningManagedIdentity"/> and <see cref="MachineLearningUserIdentity"/>.
        /// </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="services">
        /// List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        /// </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="inputs">
        /// Inputs for the pipeline job.
        /// Please note <see cref="MachineLearningJobInput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobInput"/>, <see cref="MachineLearningLiteralJobInput"/>, <see cref="MachineLearningFlowModelJobInput"/>, <see cref="MachineLearningTableJobInput"/>, <see cref="MachineLearningTritonModelJobInput"/>, <see cref="MachineLearningUriFileJobInput"/> and <see cref="MachineLearningUriFolderJobInput"/>.
        /// </param>
        /// <param name="jobs"> Jobs construct the Pipeline Job. </param>
        /// <param name="outputs">
        /// Outputs for the pipeline job
        /// Please note <see cref="MachineLearningJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobOutput"/>, <see cref="MachineLearningFlowModelJobOutput"/>, <see cref="MachineLearningTableJobOutput"/>, <see cref="MachineLearningTritonModelJobOutput"/>, <see cref="MachineLearningUriFileJobOutput"/> and <see cref="MachineLearningUriFolderJobOutput"/>.
        /// </param>
        /// <param name="settings"> Pipeline settings, for things like ContinueRunOnStepFailure etc. </param>
        /// <param name="sourceJobId"> ARM resource ID of source job. </param>
        /// <returns> A new <see cref="Models.MachineLearningPipelineJob"/> instance for mocking. </returns>
        public static MachineLearningPipelineJob MachineLearningPipelineJob(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, ResourceIdentifier componentId = null, ResourceIdentifier computeId = null, string displayName = null, string experimentName = null, MachineLearningIdentityConfiguration identity = null, bool? isArchived = null, IDictionary<string, MachineLearningJobService> services = null, MachineLearningJobStatus? status = null, IDictionary<string, MachineLearningJobInput> inputs = null, IDictionary<string, BinaryData> jobs = null, IDictionary<string, MachineLearningJobOutput> outputs = null, BinaryData settings = null, ResourceIdentifier sourceJobId = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            services ??= new Dictionary<string, MachineLearningJobService>();
            inputs ??= new Dictionary<string, MachineLearningJobInput>();
            jobs ??= new Dictionary<string, BinaryData>();
            outputs ??= new Dictionary<string, MachineLearningJobOutput>();

            return new MachineLearningPipelineJob(description, properties, tags, componentId, computeId, displayName, experimentName, identity, isArchived, JobType.Pipeline, services, status, inputs, jobs, outputs, settings, sourceJobId);
        }

        /// <summary> Initializes a new instance of PyTorchDistributionConfiguration. </summary>
        /// <param name="processCountPerInstance"> Number of processes per node. </param>
        /// <returns> A new <see cref="Models.PyTorchDistributionConfiguration"/> instance for mocking. </returns>
        public static PyTorchDistributionConfiguration PyTorchDistributionConfiguration(int? processCountPerInstance = null)
        {
            return new PyTorchDistributionConfiguration(DistributionType.PyTorch, processCountPerInstance);
        }

        /// <summary> Initializes a new instance of RandomSamplingAlgorithm. </summary>
        /// <param name="rule"> The specific type of random algorithm. </param>
        /// <param name="seed"> An optional integer to use as the seed for random number generation. </param>
        /// <returns> A new <see cref="Models.RandomSamplingAlgorithm"/> instance for mocking. </returns>
        public static RandomSamplingAlgorithm RandomSamplingAlgorithm(RandomSamplingAlgorithmRule? rule = null, int? seed = null)
        {
            return new RandomSamplingAlgorithm(SamplingAlgorithmType.Random, rule, seed);
        }

        /// <summary> Initializes a new instance of AutoMLVerticalRegression. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric"> Primary metric for regression task. </param>
        /// <param name="trainingSettings"> Inputs for training phase for an AutoML Job. </param>
        /// <param name="cvSplitColumnNames"> Columns to use for CVSplit data. </param>
        /// <param name="featurizationSettings"> Featurization inputs needed for AutoML job. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="nCrossValidations">
        /// Number of cross validation folds to be applied on training dataset
        /// when validation dataset is not provided.
        /// Please note <see cref="NCrossValidations"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AutoNCrossValidations"/> and <see cref="CustomNCrossValidations"/>.
        /// </param>
        /// <param name="testData"> Test data input. </param>
        /// <param name="testDataSize">
        /// The fraction of test dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <param name="validationDataSize">
        /// The fraction of training dataset that needs to be set aside for validation purpose.
        /// Values between (0.0 , 1.0)
        /// Applied when validation dataset is not provided.
        /// </param>
        /// <param name="weightColumnName"> The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down. </param>
        /// <returns> A new <see cref="Models.AutoMLVerticalRegression"/> instance for mocking. </returns>
        public static AutoMLVerticalRegression AutoMLVerticalRegression(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, AutoMLVerticalRegressionPrimaryMetric? primaryMetric = null, RegressionTrainingSettings trainingSettings = null, IEnumerable<string> cvSplitColumnNames = null, TableVerticalFeaturizationSettings featurizationSettings = null, TableVerticalLimitSettings limitSettings = null, NCrossValidations nCrossValidations = null, MachineLearningTableJobInput testData = null, double? testDataSize = null, MachineLearningTableJobInput validationData = null, double? validationDataSize = null, string weightColumnName = null)
        {
            cvSplitColumnNames ??= new List<string>();

            return new AutoMLVerticalRegression(logVerbosity, targetColumnName, TaskType.Regression, trainingData, primaryMetric, trainingSettings, cvSplitColumnNames?.ToList(), featurizationSettings, limitSettings, nCrossValidations, testData, testDataSize, validationData, validationDataSize, weightColumnName);
        }

        /// <summary> Initializes a new instance of RegressionTrainingSettings. </summary>
        /// <param name="isDnnTrainingEnabled"> Enable recommendation of DNN models. </param>
        /// <param name="isModelExplainabilityEnabled"> Flag to turn on explainability on best model. </param>
        /// <param name="isOnnxCompatibleModelsEnabled"> Flag for enabling onnx compatible models. </param>
        /// <param name="isStackEnsembleEnabled"> Enable stack ensemble run. </param>
        /// <param name="isVoteEnsembleEnabled"> Enable voting ensemble run. </param>
        /// <param name="ensembleModelDownloadTimeout">
        /// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
        /// Configure this parameter with a higher value than 300 secs, if more time is needed.
        /// </param>
        /// <param name="stackEnsembleSettings"> Stack ensemble settings for stack ensemble run. </param>
        /// <param name="allowedTrainingAlgorithms"> Allowed models for regression task. </param>
        /// <param name="blockedTrainingAlgorithms"> Blocked models for regression task. </param>
        /// <returns> A new <see cref="Models.RegressionTrainingSettings"/> instance for mocking. </returns>
        public static RegressionTrainingSettings RegressionTrainingSettings(bool? isDnnTrainingEnabled = null, bool? isModelExplainabilityEnabled = null, bool? isOnnxCompatibleModelsEnabled = null, bool? isStackEnsembleEnabled = null, bool? isVoteEnsembleEnabled = null, TimeSpan? ensembleModelDownloadTimeout = null, MachineLearningStackEnsembleSettings stackEnsembleSettings = null, IEnumerable<AutoMLVerticalRegressionModel> allowedTrainingAlgorithms = null, IEnumerable<AutoMLVerticalRegressionModel> blockedTrainingAlgorithms = null)
        {
            allowedTrainingAlgorithms ??= new List<AutoMLVerticalRegressionModel>();
            blockedTrainingAlgorithms ??= new List<AutoMLVerticalRegressionModel>();

            return new RegressionTrainingSettings(isDnnTrainingEnabled, isModelExplainabilityEnabled, isOnnxCompatibleModelsEnabled, isStackEnsembleEnabled, isVoteEnsembleEnabled, ensembleModelDownloadTimeout, stackEnsembleSettings, allowedTrainingAlgorithms?.ToList(), blockedTrainingAlgorithms?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningSasDatastoreCredentials. </summary>
        /// <param name="secrets"> [Required] Storage container secrets. </param>
        /// <returns> A new <see cref="Models.MachineLearningSasDatastoreCredentials"/> instance for mocking. </returns>
        public static MachineLearningSasDatastoreCredentials MachineLearningSasDatastoreCredentials(MachineLearningSasDatastoreSecrets secrets = null)
        {
            return new MachineLearningSasDatastoreCredentials(CredentialsType.Sas, secrets);
        }

        /// <summary> Initializes a new instance of MachineLearningSasDatastoreSecrets. </summary>
        /// <param name="sasToken"> Storage container SAS token. </param>
        /// <returns> A new <see cref="Models.MachineLearningSasDatastoreSecrets"/> instance for mocking. </returns>
        public static MachineLearningSasDatastoreSecrets MachineLearningSasDatastoreSecrets(string sasToken = null)
        {
            return new MachineLearningSasDatastoreSecrets(SecretsType.Sas, sasToken);
        }

        /// <summary> Initializes a new instance of MachineLearningServicePrincipalDatastoreCredentials. </summary>
        /// <param name="authorityUri"> Authority URL used for authentication. </param>
        /// <param name="clientId"> [Required] Service principal client ID. </param>
        /// <param name="resourceUri"> Resource the service principal has access to. </param>
        /// <param name="secrets"> [Required] Service principal secrets. </param>
        /// <param name="tenantId"> [Required] ID of the tenant to which the service principal belongs. </param>
        /// <returns> A new <see cref="Models.MachineLearningServicePrincipalDatastoreCredentials"/> instance for mocking. </returns>
        public static MachineLearningServicePrincipalDatastoreCredentials MachineLearningServicePrincipalDatastoreCredentials(Uri authorityUri = null, Guid clientId = default, Uri resourceUri = null, MachineLearningServicePrincipalDatastoreSecrets secrets = null, Guid tenantId = default)
        {
            return new MachineLearningServicePrincipalDatastoreCredentials(CredentialsType.ServicePrincipal, authorityUri, clientId, resourceUri, secrets, tenantId);
        }

        /// <summary> Initializes a new instance of MachineLearningServicePrincipalDatastoreSecrets. </summary>
        /// <param name="clientSecret"> Service principal secret. </param>
        /// <returns> A new <see cref="Models.MachineLearningServicePrincipalDatastoreSecrets"/> instance for mocking. </returns>
        public static MachineLearningServicePrincipalDatastoreSecrets MachineLearningServicePrincipalDatastoreSecrets(string clientSecret = null)
        {
            return new MachineLearningServicePrincipalDatastoreSecrets(SecretsType.ServicePrincipal, clientSecret);
        }

        /// <summary> Initializes a new instance of MachineLearningSweepJob. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="componentId"> ARM resource ID of the component resource. </param>
        /// <param name="computeId"> ARM resource ID of the compute resource. </param>
        /// <param name="displayName"> Display name of job. </param>
        /// <param name="experimentName"> The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment. </param>
        /// <param name="identity">
        /// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
        /// Defaults to AmlToken if null.
        /// Please note <see cref="MachineLearningIdentityConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmlToken"/>, <see cref="MachineLearningManagedIdentity"/> and <see cref="MachineLearningUserIdentity"/>.
        /// </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="services">
        /// List of JobEndpoints.
        /// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
        /// </param>
        /// <param name="status"> Status of the job. </param>
        /// <param name="earlyTermination">
        /// Early termination policies enable canceling poor-performing runs before they complete
        /// Please note <see cref="MachineLearningEarlyTerminationPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BanditPolicy"/>, <see cref="MedianStoppingPolicy"/> and <see cref="TruncationSelectionPolicy"/>.
        /// </param>
        /// <param name="inputs">
        /// Mapping of input data bindings used in the job.
        /// Please note <see cref="MachineLearningJobInput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobInput"/>, <see cref="MachineLearningLiteralJobInput"/>, <see cref="MachineLearningFlowModelJobInput"/>, <see cref="MachineLearningTableJobInput"/>, <see cref="MachineLearningTritonModelJobInput"/>, <see cref="MachineLearningUriFileJobInput"/> and <see cref="MachineLearningUriFolderJobInput"/>.
        /// </param>
        /// <param name="limits"> Sweep Job limit. </param>
        /// <param name="objective"> [Required] Optimization objective. </param>
        /// <param name="outputs">
        /// Mapping of output data bindings used in the job.
        /// Please note <see cref="MachineLearningJobOutput"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MachineLearningCustomModelJobOutput"/>, <see cref="MachineLearningFlowModelJobOutput"/>, <see cref="MachineLearningTableJobOutput"/>, <see cref="MachineLearningTritonModelJobOutput"/>, <see cref="MachineLearningUriFileJobOutput"/> and <see cref="MachineLearningUriFolderJobOutput"/>.
        /// </param>
        /// <param name="samplingAlgorithm">
        /// [Required] The hyperparameter sampling algorithm
        /// Please note <see cref="SamplingAlgorithm"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BayesianSamplingAlgorithm"/>, <see cref="GridSamplingAlgorithm"/> and <see cref="RandomSamplingAlgorithm"/>.
        /// </param>
        /// <param name="searchSpace"> [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter. </param>
        /// <param name="trial"> [Required] Trial component definition. </param>
        /// <returns> A new <see cref="Models.MachineLearningSweepJob"/> instance for mocking. </returns>
        public static MachineLearningSweepJob MachineLearningSweepJob(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, ResourceIdentifier componentId = null, ResourceIdentifier computeId = null, string displayName = null, string experimentName = null, MachineLearningIdentityConfiguration identity = null, bool? isArchived = null, IDictionary<string, MachineLearningJobService> services = null, MachineLearningJobStatus? status = null, MachineLearningEarlyTerminationPolicy earlyTermination = null, IDictionary<string, MachineLearningJobInput> inputs = null, MachineLearningSweepJobLimits limits = null, MachineLearningObjective objective = null, IDictionary<string, MachineLearningJobOutput> outputs = null, SamplingAlgorithm samplingAlgorithm = null, BinaryData searchSpace = null, MachineLearningTrialComponent trial = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();
            services ??= new Dictionary<string, MachineLearningJobService>();
            inputs ??= new Dictionary<string, MachineLearningJobInput>();
            outputs ??= new Dictionary<string, MachineLearningJobOutput>();

            return new MachineLearningSweepJob(description, properties, tags, componentId, computeId, displayName, experimentName, identity, isArchived, JobType.Sweep, services, status, earlyTermination, inputs, limits, objective, outputs, samplingAlgorithm, searchSpace, trial);
        }

        /// <summary> Initializes a new instance of MachineLearningSweepJobLimits. </summary>
        /// <param name="timeout"> The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds. </param>
        /// <param name="maxConcurrentTrials"> Sweep Job max concurrent trials. </param>
        /// <param name="maxTotalTrials"> Sweep Job max total trials. </param>
        /// <param name="trialTimeout"> Sweep Job Trial timeout value. </param>
        /// <returns> A new <see cref="Models.MachineLearningSweepJobLimits"/> instance for mocking. </returns>
        public static MachineLearningSweepJobLimits MachineLearningSweepJobLimits(TimeSpan? timeout = null, int? maxConcurrentTrials = null, int? maxTotalTrials = null, TimeSpan? trialTimeout = null)
        {
            return new MachineLearningSweepJobLimits(JobLimitsType.Sweep, timeout, maxConcurrentTrials, maxTotalTrials, trialTimeout);
        }

        /// <summary> Initializes a new instance of MachineLearningTrialComponent. </summary>
        /// <param name="codeId"> ARM resource ID of the code asset. </param>
        /// <param name="command"> [Required] The command to execute on startup of the job. eg. &quot;python train.py&quot;. </param>
        /// <param name="distribution">
        /// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
        /// Please note <see cref="MachineLearningDistributionConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="MpiDistributionConfiguration"/>, <see cref="PyTorchDistributionConfiguration"/> and <see cref="TensorFlowDistributionConfiguration"/>.
        /// </param>
        /// <param name="environmentId"> [Required] The ARM resource ID of the Environment specification for the job. </param>
        /// <param name="environmentVariables"> Environment variables included in the job. </param>
        /// <param name="resources"> Compute Resource configuration for the job. </param>
        /// <returns> A new <see cref="Models.MachineLearningTrialComponent"/> instance for mocking. </returns>
        public static MachineLearningTrialComponent MachineLearningTrialComponent(ResourceIdentifier codeId = null, string command = null, MachineLearningDistributionConfiguration distribution = null, ResourceIdentifier environmentId = null, IDictionary<string, string> environmentVariables = null, MachineLearningJobResourceConfiguration resources = null)
        {
            environmentVariables ??= new Dictionary<string, string>();

            return new MachineLearningTrialComponent(codeId, command, distribution, environmentId, environmentVariables, resources);
        }

        /// <summary> Initializes a new instance of MachineLearningTargetUtilizationScaleSettings. </summary>
        /// <param name="maxInstances"> The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances. </param>
        /// <param name="minInstances"> The minimum number of instances to always be present. </param>
        /// <param name="pollingInterval"> The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds. </param>
        /// <param name="targetUtilizationPercentage"> Target CPU usage for the autoscaler. </param>
        /// <returns> A new <see cref="Models.MachineLearningTargetUtilizationScaleSettings"/> instance for mocking. </returns>
        public static MachineLearningTargetUtilizationScaleSettings MachineLearningTargetUtilizationScaleSettings(int? maxInstances = null, int? minInstances = null, TimeSpan? pollingInterval = null, int? targetUtilizationPercentage = null)
        {
            return new MachineLearningTargetUtilizationScaleSettings(ScaleType.TargetUtilization, maxInstances, minInstances, pollingInterval, targetUtilizationPercentage);
        }

        /// <summary> Initializes a new instance of TensorFlowDistributionConfiguration. </summary>
        /// <param name="parameterServerCount"> Number of parameter server tasks. </param>
        /// <param name="workerCount"> Number of workers. If not specified, will default to the instance count. </param>
        /// <returns> A new <see cref="Models.TensorFlowDistributionConfiguration"/> instance for mocking. </returns>
        public static TensorFlowDistributionConfiguration TensorFlowDistributionConfiguration(int? parameterServerCount = null, int? workerCount = null)
        {
            return new TensorFlowDistributionConfiguration(DistributionType.TensorFlow, parameterServerCount, workerCount);
        }

        /// <summary> Initializes a new instance of TextClassification. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric"> Primary metric for Text-Classification task. </param>
        /// <param name="featurizationDatasetLanguage"> Featurization inputs needed for AutoML job. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <returns> A new <see cref="Models.TextClassification"/> instance for mocking. </returns>
        public static TextClassification TextClassification(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ClassificationPrimaryMetric? primaryMetric = null, string featurizationDatasetLanguage = null, NlpVerticalLimitSettings limitSettings = null, MachineLearningTableJobInput validationData = null)
        {
            return new TextClassification(logVerbosity, targetColumnName, TaskType.TextClassification, trainingData, primaryMetric, featurizationDatasetLanguage != null ? new NlpVerticalFeaturizationSettings(featurizationDatasetLanguage) : null, limitSettings, validationData);
        }

        /// <summary> Initializes a new instance of TextClassificationMultilabel. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric">
        /// Primary metric for Text-Classification-Multilabel task.
        /// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
        /// </param>
        /// <param name="featurizationDatasetLanguage"> Featurization inputs needed for AutoML job. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <returns> A new <see cref="Models.TextClassificationMultilabel"/> instance for mocking. </returns>
        public static TextClassificationMultilabel TextClassificationMultilabel(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ClassificationMultilabelPrimaryMetric? primaryMetric = null, string featurizationDatasetLanguage = null, NlpVerticalLimitSettings limitSettings = null, MachineLearningTableJobInput validationData = null)
        {
            return new TextClassificationMultilabel(logVerbosity, targetColumnName, TaskType.TextClassificationMultilabel, trainingData, primaryMetric, featurizationDatasetLanguage != null ? new NlpVerticalFeaturizationSettings(featurizationDatasetLanguage) : null, limitSettings, validationData);
        }

        /// <summary> Initializes a new instance of TextNer. </summary>
        /// <param name="logVerbosity"> Log verbosity for the job. </param>
        /// <param name="targetColumnName">
        /// Target column name: This is prediction values column.
        /// Also known as label column name in context of classification tasks.
        /// </param>
        /// <param name="trainingData"> [Required] Training data input. </param>
        /// <param name="primaryMetric">
        /// Primary metric for Text-NER task.
        /// Only &apos;Accuracy&apos; is supported for Text-NER, so user need not set this explicitly.
        /// </param>
        /// <param name="featurizationDatasetLanguage"> Featurization inputs needed for AutoML job. </param>
        /// <param name="limitSettings"> Execution constraints for AutoMLJob. </param>
        /// <param name="validationData"> Validation data inputs. </param>
        /// <returns> A new <see cref="Models.TextNer"/> instance for mocking. </returns>
        public static TextNer TextNer(MachineLearningLogVerbosity? logVerbosity = null, string targetColumnName = null, MachineLearningTableJobInput trainingData = null, ClassificationPrimaryMetric? primaryMetric = null, string featurizationDatasetLanguage = null, NlpVerticalLimitSettings limitSettings = null, MachineLearningTableJobInput validationData = null)
        {
            return new TextNer(logVerbosity, targetColumnName, TaskType.TextNER, trainingData, primaryMetric, featurizationDatasetLanguage != null ? new NlpVerticalFeaturizationSettings(featurizationDatasetLanguage) : null, limitSettings, validationData);
        }

        /// <summary> Initializes a new instance of MachineLearningTritonModelJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="mode"> Input Asset Delivery Mode. </param>
        /// <param name="uri"> [Required] Input Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningTritonModelJobInput"/> instance for mocking. </returns>
        public static MachineLearningTritonModelJobInput MachineLearningTritonModelJobInput(string description = null, MachineLearningInputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningTritonModelJobInput(description, JobInputType.TritonModel, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningTritonModelJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="mode"> Output Asset Delivery Mode. </param>
        /// <param name="uri"> Output Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningTritonModelJobOutput"/> instance for mocking. </returns>
        public static MachineLearningTritonModelJobOutput MachineLearningTritonModelJobOutput(string description = null, MachineLearningOutputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningTritonModelJobOutput(description, JobOutputType.TritonModel, mode, uri);
        }

        /// <summary> Initializes a new instance of TruncationSelectionPolicy. </summary>
        /// <param name="delayEvaluation"> Number of intervals by which to delay the first evaluation. </param>
        /// <param name="evaluationInterval"> Interval (number of runs) between policy evaluations. </param>
        /// <param name="truncationPercentage"> The percentage of runs to cancel at each evaluation interval. </param>
        /// <returns> A new <see cref="Models.TruncationSelectionPolicy"/> instance for mocking. </returns>
        public static TruncationSelectionPolicy TruncationSelectionPolicy(int? delayEvaluation = null, int? evaluationInterval = null, int? truncationPercentage = null)
        {
            return new TruncationSelectionPolicy(delayEvaluation, evaluationInterval, EarlyTerminationPolicyType.TruncationSelection, truncationPercentage);
        }

        /// <summary> Initializes a new instance of MachineLearningUriFileDataVersion. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="dataUri"> [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20221001.Assets.DataVersionBase.DataType. </param>
        /// <returns> A new <see cref="Models.MachineLearningUriFileDataVersion"/> instance for mocking. </returns>
        public static MachineLearningUriFileDataVersion MachineLearningUriFileDataVersion(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, Uri dataUri = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningUriFileDataVersion(description, properties, tags, isAnonymous, isArchived, MachineLearningDataType.UriFile, dataUri);
        }

        /// <summary> Initializes a new instance of MachineLearningUriFileJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="mode"> Input Asset Delivery Mode. </param>
        /// <param name="uri"> [Required] Input Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningUriFileJobInput"/> instance for mocking. </returns>
        public static MachineLearningUriFileJobInput MachineLearningUriFileJobInput(string description = null, MachineLearningInputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningUriFileJobInput(description, JobInputType.UriFile, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningUriFileJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="mode"> Output Asset Delivery Mode. </param>
        /// <param name="uri"> Output Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningUriFileJobOutput"/> instance for mocking. </returns>
        public static MachineLearningUriFileJobOutput MachineLearningUriFileJobOutput(string description = null, MachineLearningOutputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningUriFileJobOutput(description, JobOutputType.UriFile, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningUriFolderDataVersion. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="isAnonymous"> If the name version are system generated (anonymous registration). </param>
        /// <param name="isArchived"> Is the asset archived?. </param>
        /// <param name="dataUri"> [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20221001.Assets.DataVersionBase.DataType. </param>
        /// <returns> A new <see cref="Models.MachineLearningUriFolderDataVersion"/> instance for mocking. </returns>
        public static MachineLearningUriFolderDataVersion MachineLearningUriFolderDataVersion(string description = null, IDictionary<string, string> properties = null, IDictionary<string, string> tags = null, bool? isAnonymous = null, bool? isArchived = null, Uri dataUri = null)
        {
            properties ??= new Dictionary<string, string>();
            tags ??= new Dictionary<string, string>();

            return new MachineLearningUriFolderDataVersion(description, properties, tags, isAnonymous, isArchived, MachineLearningDataType.UriFolder, dataUri);
        }

        /// <summary> Initializes a new instance of MachineLearningUriFolderJobInput. </summary>
        /// <param name="description"> Description for the input. </param>
        /// <param name="mode"> Input Asset Delivery Mode. </param>
        /// <param name="uri"> [Required] Input Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningUriFolderJobInput"/> instance for mocking. </returns>
        public static MachineLearningUriFolderJobInput MachineLearningUriFolderJobInput(string description = null, MachineLearningInputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningUriFolderJobInput(description, JobInputType.UriFolder, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningUriFolderJobOutput. </summary>
        /// <param name="description"> Description for the output. </param>
        /// <param name="mode"> Output Asset Delivery Mode. </param>
        /// <param name="uri"> Output Asset URI. </param>
        /// <returns> A new <see cref="Models.MachineLearningUriFolderJobOutput"/> instance for mocking. </returns>
        public static MachineLearningUriFolderJobOutput MachineLearningUriFolderJobOutput(string description = null, MachineLearningOutputDeliveryMode? mode = null, Uri uri = null)
        {
            return new MachineLearningUriFolderJobOutput(description, JobOutputType.UriFolder, mode, uri);
        }

        /// <summary> Initializes a new instance of MachineLearningUserIdentity. </summary>
        /// <returns> A new <see cref="Models.MachineLearningUserIdentity"/> instance for mocking. </returns>
        public static MachineLearningUserIdentity MachineLearningUserIdentity()
        {
            return new MachineLearningUserIdentity(IdentityConfigurationType.UserIdentity);
        }
    }
}
