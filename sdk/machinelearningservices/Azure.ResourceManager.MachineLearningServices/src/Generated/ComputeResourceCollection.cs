// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.MachineLearningServices.Models;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> A class representing collection of ComputeResource and their operations over its parent. </summary>
    public partial class ComputeResourceCollection : ArmCollection, IEnumerable<ComputeResource>, IAsyncEnumerable<ComputeResource>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ComputeRestOperations _computeRestClient;

        /// <summary> Initializes a new instance of the <see cref="ComputeResourceCollection"/> class for mocking. </summary>
        protected ComputeResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of ComputeResourceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ComputeResourceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _computeRestClient = new ComputeRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Workspace.ResourceType;

        // Collection level operations.

        /// <summary> Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="parameters"> Payload with Machine Learning compute definition. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual ComputeCreateOrUpdateOperation CreateOrUpdate(string computeName, ComputeResourceData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _computeRestClient.CreateOrUpdate(Id.ResourceGroupName, Id.Name, computeName, parameters, cancellationToken);
                var operation = new ComputeCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _computeRestClient.CreateCreateOrUpdateRequest(Id.ResourceGroupName, Id.Name, computeName, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates compute. This call will overwrite a compute if it exists. This is a nonrecoverable operation. If your intent is to create a new compute, do a GET first to verify that it does not exist yet. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="parameters"> Payload with Machine Learning compute definition. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ComputeCreateOrUpdateOperation> CreateOrUpdateAsync(string computeName, ComputeResourceData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _computeRestClient.CreateOrUpdateAsync(Id.ResourceGroupName, Id.Name, computeName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ComputeCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _computeRestClient.CreateCreateOrUpdateRequest(Id.ResourceGroupName, Id.Name, computeName, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not returned - use &apos;keys&apos; nested resource to get them. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> is null. </exception>
        public virtual Response<ComputeResource> Get(string computeName, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _computeRestClient.Get(Id.ResourceGroupName, Id.Name, computeName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComputeResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets compute definition by its name. Any secrets (storage keys, service credentials, etc) are not returned - use &apos;keys&apos; nested resource to get them. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> is null. </exception>
        public async virtual Task<Response<ComputeResource>> GetAsync(string computeName, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _computeRestClient.GetAsync(Id.ResourceGroupName, Id.Name, computeName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ComputeResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> is null. </exception>
        public virtual Response<ComputeResource> GetIfExists(string computeName, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _computeRestClient.Get(Id.ResourceGroupName, Id.Name, computeName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<ComputeResource>(null, response.GetRawResponse())
                    : Response.FromValue(new ComputeResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> is null. </exception>
        public async virtual Task<Response<ComputeResource>> GetIfExistsAsync(string computeName, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _computeRestClient.GetAsync(Id.ResourceGroupName, Id.Name, computeName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<ComputeResource>(null, response.GetRawResponse())
                    : Response.FromValue(new ComputeResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string computeName, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(computeName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="computeName"> Name of the Azure Machine Learning compute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string computeName, CancellationToken cancellationToken = default)
        {
            if (computeName == null)
            {
                throw new ArgumentNullException(nameof(computeName));
            }

            using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(computeName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets computes in specified workspace. </summary>
        /// <param name="skip"> Continuation token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ComputeResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ComputeResource> GetAll(string skip = null, CancellationToken cancellationToken = default)
        {
            Page<ComputeResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _computeRestClient.List(Id.ResourceGroupName, Id.Name, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ComputeResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ComputeResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _computeRestClient.ListNextPage(nextLink, Id.ResourceGroupName, Id.Name, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ComputeResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets computes in specified workspace. </summary>
        /// <param name="skip"> Continuation token for pagination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ComputeResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ComputeResource> GetAllAsync(string skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ComputeResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _computeRestClient.ListAsync(Id.ResourceGroupName, Id.Name, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ComputeResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ComputeResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ComputeResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _computeRestClient.ListNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ComputeResource(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ComputeResource> IEnumerable<ComputeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ComputeResource> IAsyncEnumerable<ComputeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, ComputeResource, ComputeResourceData> Construct() { }
    }
}
