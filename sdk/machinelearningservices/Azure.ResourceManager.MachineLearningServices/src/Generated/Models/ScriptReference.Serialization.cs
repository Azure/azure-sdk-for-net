// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices
{
    public partial class ScriptReference : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ScriptSource))
            {
                writer.WritePropertyName("scriptSource");
                writer.WriteStringValue(ScriptSource);
            }
            if (Optional.IsDefined(ScriptData))
            {
                writer.WritePropertyName("scriptData");
                writer.WriteStringValue(ScriptData);
            }
            if (Optional.IsDefined(ScriptArguments))
            {
                writer.WritePropertyName("scriptArguments");
                writer.WriteStringValue(ScriptArguments);
            }
            if (Optional.IsDefined(Timeout))
            {
                writer.WritePropertyName("timeout");
                writer.WriteStringValue(Timeout);
            }
            writer.WriteEndObject();
        }

        internal static ScriptReference DeserializeScriptReference(JsonElement element)
        {
            Optional<string> scriptSource = default;
            Optional<string> scriptData = default;
            Optional<string> scriptArguments = default;
            Optional<string> timeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scriptSource"))
                {
                    scriptSource = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scriptData"))
                {
                    scriptData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scriptArguments"))
                {
                    scriptArguments = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timeout"))
                {
                    timeout = property.Value.GetString();
                    continue;
                }
            }
            return new ScriptReference(scriptSource.Value, scriptData.Value, scriptArguments.Value, timeout.Value);
        }
    }
}
