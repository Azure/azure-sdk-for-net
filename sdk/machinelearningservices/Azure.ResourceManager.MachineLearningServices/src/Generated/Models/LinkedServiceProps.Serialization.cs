// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class LinkedServiceProps : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("linkedServiceResourceId");
            writer.WriteStringValue(LinkedServiceResourceId);
            if (Optional.IsDefined(LinkType))
            {
                writer.WritePropertyName("linkType");
                writer.WriteStringValue(LinkType);
            }
            if (Optional.IsDefined(CreatedTime))
            {
                writer.WritePropertyName("createdTime");
                writer.WriteStringValue(CreatedTime.Value, "O");
            }
            if (Optional.IsDefined(ModifiedTime))
            {
                writer.WritePropertyName("modifiedTime");
                writer.WriteStringValue(ModifiedTime.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static LinkedServiceProps DeserializeLinkedServiceProps(JsonElement element)
        {
            string linkedServiceResourceId = default;
            Optional<string> linkType = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<DateTimeOffset> modifiedTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("linkedServiceResourceId"))
                {
                    linkedServiceResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linkType"))
                {
                    linkType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("modifiedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    modifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new LinkedServiceProps(linkedServiceResourceId, linkType.Value, Optional.ToNullable(createdTime), Optional.ToNullable(modifiedTime));
        }
    }
}
