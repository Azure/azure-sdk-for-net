// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> The type of the variant. </summary>
    public readonly partial struct VariantType : IEquatable<VariantType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="VariantType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VariantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ControlValue = "Control";
        private const string TreatmentValue = "Treatment";

        /// <summary> Control. </summary>
        public static VariantType Control { get; } = new VariantType(ControlValue);
        /// <summary> Treatment. </summary>
        public static VariantType Treatment { get; } = new VariantType(TreatmentValue);
        /// <summary> Determines if two <see cref="VariantType"/> values are the same. </summary>
        public static bool operator ==(VariantType left, VariantType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VariantType"/> values are not the same. </summary>
        public static bool operator !=(VariantType left, VariantType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VariantType"/>. </summary>
        public static implicit operator VariantType(string value) => new VariantType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VariantType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VariantType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
