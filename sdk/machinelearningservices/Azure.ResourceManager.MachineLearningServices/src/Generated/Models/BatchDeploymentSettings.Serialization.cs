// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class BatchDeploymentSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ComputeId))
            {
                writer.WritePropertyName("computeId");
                writer.WriteStringValue(ComputeId);
            }
            if (Optional.IsDefined(ErrorThreshold))
            {
                writer.WritePropertyName("errorThreshold");
                writer.WriteNumberValue(ErrorThreshold.Value);
            }
            if (Optional.IsDefined(RetrySettings))
            {
                writer.WritePropertyName("retrySettings");
                writer.WriteObjectValue(RetrySettings);
            }
            if (Optional.IsDefined(PartitioningScheme))
            {
                writer.WritePropertyName("partitioningScheme");
                writer.WriteObjectValue(PartitioningScheme);
            }
            if (Optional.IsDefined(LoggingLevel))
            {
                writer.WritePropertyName("loggingLevel");
                writer.WriteStringValue(LoggingLevel.Value.ToSerialString());
            }
            if (Optional.IsDefined(OutputConfiguration))
            {
                writer.WritePropertyName("outputConfiguration");
                writer.WriteObjectValue(OutputConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static BatchDeploymentSettings DeserializeBatchDeploymentSettings(JsonElement element)
        {
            Optional<string> computeId = default;
            Optional<int> errorThreshold = default;
            Optional<BatchRetrySettings> retrySettings = default;
            Optional<BatchPartitioningScheme> partitioningScheme = default;
            Optional<BatchLoggingLevel> loggingLevel = default;
            Optional<BatchOutputConfiguration> outputConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("computeId"))
                {
                    computeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorThreshold"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    errorThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("retrySettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retrySettings = BatchRetrySettings.DeserializeBatchRetrySettings(property.Value);
                    continue;
                }
                if (property.NameEquals("partitioningScheme"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    partitioningScheme = BatchPartitioningScheme.DeserializeBatchPartitioningScheme(property.Value);
                    continue;
                }
                if (property.NameEquals("loggingLevel"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    loggingLevel = property.Value.GetString().ToBatchLoggingLevel();
                    continue;
                }
                if (property.NameEquals("outputConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    outputConfiguration = BatchOutputConfiguration.DeserializeBatchOutputConfiguration(property.Value);
                    continue;
                }
            }
            return new BatchDeploymentSettings(computeId.Value, Optional.ToNullable(errorThreshold), retrySettings.Value, partitioningScheme.Value, Optional.ToNullable(loggingLevel), outputConfiguration.Value);
        }
    }
}
