// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> Current state of an ComputeInstance. </summary>
    public readonly partial struct ComputeInstanceState : IEquatable<ComputeInstanceState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ComputeInstanceState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeInstanceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatingValue = "Creating";
        private const string CreateFailedValue = "CreateFailed";
        private const string DeletingValue = "Deleting";
        private const string RunningValue = "Running";
        private const string RestartingValue = "Restarting";
        private const string JobRunningValue = "JobRunning";
        private const string SettingUpValue = "SettingUp";
        private const string SetupFailedValue = "SetupFailed";
        private const string StartingValue = "Starting";
        private const string StoppedValue = "Stopped";
        private const string StoppingValue = "Stopping";
        private const string UserSettingUpValue = "UserSettingUp";
        private const string UserSetupFailedValue = "UserSetupFailed";
        private const string UnknownValue = "Unknown";
        private const string UnusableValue = "Unusable";

        /// <summary> Creating. </summary>
        public static ComputeInstanceState Creating { get; } = new ComputeInstanceState(CreatingValue);
        /// <summary> CreateFailed. </summary>
        public static ComputeInstanceState CreateFailed { get; } = new ComputeInstanceState(CreateFailedValue);
        /// <summary> Deleting. </summary>
        public static ComputeInstanceState Deleting { get; } = new ComputeInstanceState(DeletingValue);
        /// <summary> Running. </summary>
        public static ComputeInstanceState Running { get; } = new ComputeInstanceState(RunningValue);
        /// <summary> Restarting. </summary>
        public static ComputeInstanceState Restarting { get; } = new ComputeInstanceState(RestartingValue);
        /// <summary> JobRunning. </summary>
        public static ComputeInstanceState JobRunning { get; } = new ComputeInstanceState(JobRunningValue);
        /// <summary> SettingUp. </summary>
        public static ComputeInstanceState SettingUp { get; } = new ComputeInstanceState(SettingUpValue);
        /// <summary> SetupFailed. </summary>
        public static ComputeInstanceState SetupFailed { get; } = new ComputeInstanceState(SetupFailedValue);
        /// <summary> Starting. </summary>
        public static ComputeInstanceState Starting { get; } = new ComputeInstanceState(StartingValue);
        /// <summary> Stopped. </summary>
        public static ComputeInstanceState Stopped { get; } = new ComputeInstanceState(StoppedValue);
        /// <summary> Stopping. </summary>
        public static ComputeInstanceState Stopping { get; } = new ComputeInstanceState(StoppingValue);
        /// <summary> UserSettingUp. </summary>
        public static ComputeInstanceState UserSettingUp { get; } = new ComputeInstanceState(UserSettingUpValue);
        /// <summary> UserSetupFailed. </summary>
        public static ComputeInstanceState UserSetupFailed { get; } = new ComputeInstanceState(UserSetupFailedValue);
        /// <summary> Unknown. </summary>
        public static ComputeInstanceState Unknown { get; } = new ComputeInstanceState(UnknownValue);
        /// <summary> Unusable. </summary>
        public static ComputeInstanceState Unusable { get; } = new ComputeInstanceState(UnusableValue);
        /// <summary> Determines if two <see cref="ComputeInstanceState"/> values are the same. </summary>
        public static bool operator ==(ComputeInstanceState left, ComputeInstanceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeInstanceState"/> values are not the same. </summary>
        public static bool operator !=(ComputeInstanceState left, ComputeInstanceState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeInstanceState"/>. </summary>
        public static implicit operator ComputeInstanceState(string value) => new ComputeInstanceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeInstanceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeInstanceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
