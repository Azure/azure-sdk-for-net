// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class TerminationConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxTotalRuns))
            {
                writer.WritePropertyName("maxTotalRuns");
                writer.WriteNumberValue(MaxTotalRuns.Value);
            }
            if (Optional.IsDefined(MaxConcurrentRuns))
            {
                writer.WritePropertyName("maxConcurrentRuns");
                writer.WriteNumberValue(MaxConcurrentRuns.Value);
            }
            if (Optional.IsDefined(MaxDurationMinutes))
            {
                writer.WritePropertyName("maxDurationMinutes");
                writer.WriteNumberValue(MaxDurationMinutes.Value);
            }
            if (Optional.IsDefined(EarlyTerminationPolicyConfiguration))
            {
                writer.WritePropertyName("earlyTerminationPolicyConfiguration");
                writer.WriteObjectValue(EarlyTerminationPolicyConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static TerminationConfiguration DeserializeTerminationConfiguration(JsonElement element)
        {
            Optional<int> maxTotalRuns = default;
            Optional<int> maxConcurrentRuns = default;
            Optional<int> maxDurationMinutes = default;
            Optional<EarlyTerminationPolicyConfiguration> earlyTerminationPolicyConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxTotalRuns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxTotalRuns = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxConcurrentRuns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxConcurrentRuns = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxDurationMinutes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxDurationMinutes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("earlyTerminationPolicyConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    earlyTerminationPolicyConfiguration = EarlyTerminationPolicyConfiguration.DeserializeEarlyTerminationPolicyConfiguration(property.Value);
                    continue;
                }
            }
            return new TerminationConfiguration(Optional.ToNullable(maxTotalRuns), Optional.ToNullable(maxConcurrentRuns), Optional.ToNullable(maxDurationMinutes), earlyTerminationPolicyConfiguration.Value);
        }
    }
}
