// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    internal partial class NlpVertical : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DataSettings))
            {
                if (DataSettings != null)
                {
                    writer.WritePropertyName("dataSettings");
                    writer.WriteObjectValue(DataSettings);
                }
                else
                {
                    writer.WriteNull("dataSettings");
                }
            }
            if (Optional.IsDefined(FeaturizationSettings))
            {
                if (FeaturizationSettings != null)
                {
                    writer.WritePropertyName("featurizationSettings");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(FeaturizationSettings);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(FeaturizationSettings.ToString()).RootElement);
#endif
                }
                else
                {
                    writer.WriteNull("featurizationSettings");
                }
            }
            if (Optional.IsDefined(LimitSettings))
            {
                if (LimitSettings != null)
                {
                    writer.WritePropertyName("limitSettings");
                    writer.WriteObjectValue(LimitSettings);
                }
                else
                {
                    writer.WriteNull("limitSettings");
                }
            }
            writer.WriteEndObject();
        }

        internal static NlpVertical DeserializeNlpVertical(JsonElement element)
        {
            Optional<NlpVerticalDataSettings> dataSettings = default;
            Optional<BinaryData> featurizationSettings = default;
            Optional<NlpVerticalLimitSettings> limitSettings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dataSettings = null;
                        continue;
                    }
                    dataSettings = NlpVerticalDataSettings.DeserializeNlpVerticalDataSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("featurizationSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        featurizationSettings = null;
                        continue;
                    }
                    featurizationSettings = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("limitSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        limitSettings = null;
                        continue;
                    }
                    limitSettings = NlpVerticalLimitSettings.DeserializeNlpVerticalLimitSettings(property.Value);
                    continue;
                }
            }
            return new NlpVertical(dataSettings.Value, featurizationSettings.Value, limitSettings.Value);
        }
    }
}
