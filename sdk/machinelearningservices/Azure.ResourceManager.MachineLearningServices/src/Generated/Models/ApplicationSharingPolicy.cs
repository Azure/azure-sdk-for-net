// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role. </summary>
    public readonly partial struct ApplicationSharingPolicy : IEquatable<ApplicationSharingPolicy>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ApplicationSharingPolicy"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApplicationSharingPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PersonalValue = "Personal";
        private const string SharedValue = "Shared";

        /// <summary> Personal. </summary>
        public static ApplicationSharingPolicy Personal { get; } = new ApplicationSharingPolicy(PersonalValue);
        /// <summary> Shared. </summary>
        public static ApplicationSharingPolicy Shared { get; } = new ApplicationSharingPolicy(SharedValue);
        /// <summary> Determines if two <see cref="ApplicationSharingPolicy"/> values are the same. </summary>
        public static bool operator ==(ApplicationSharingPolicy left, ApplicationSharingPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ApplicationSharingPolicy"/> values are not the same. </summary>
        public static bool operator !=(ApplicationSharingPolicy left, ApplicationSharingPolicy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ApplicationSharingPolicy"/>. </summary>
        public static implicit operator ApplicationSharingPolicy(string value) => new ApplicationSharingPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApplicationSharingPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ApplicationSharingPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
