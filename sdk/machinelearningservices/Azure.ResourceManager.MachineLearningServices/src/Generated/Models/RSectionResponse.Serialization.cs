// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class RSectionResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RVersion))
            {
                writer.WritePropertyName("rVersion");
                writer.WriteStringValue(RVersion);
            }
            if (Optional.IsDefined(UserManaged))
            {
                writer.WritePropertyName("userManaged");
                writer.WriteBooleanValue(UserManaged.Value);
            }
            if (Optional.IsDefined(RscriptPath))
            {
                writer.WritePropertyName("rscriptPath");
                writer.WriteStringValue(RscriptPath);
            }
            if (Optional.IsDefined(SnapshotDate))
            {
                writer.WritePropertyName("snapshotDate");
                writer.WriteStringValue(SnapshotDate);
            }
            if (Optional.IsCollectionDefined(CranPackages))
            {
                writer.WritePropertyName("cranPackages");
                writer.WriteStartArray();
                foreach (var item in CranPackages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GitHubPackages))
            {
                writer.WritePropertyName("gitHubPackages");
                writer.WriteStartArray();
                foreach (var item in GitHubPackages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(CustomUrlPackages))
            {
                writer.WritePropertyName("customUrlPackages");
                writer.WriteStartArray();
                foreach (var item in CustomUrlPackages)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(BioConductorPackages))
            {
                writer.WritePropertyName("bioConductorPackages");
                writer.WriteStartArray();
                foreach (var item in BioConductorPackages)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RSectionResponse DeserializeRSectionResponse(JsonElement element)
        {
            Optional<string> rVersion = default;
            Optional<bool> userManaged = default;
            Optional<string> rscriptPath = default;
            Optional<string> snapshotDate = default;
            Optional<IList<RCranPackage>> cranPackages = default;
            Optional<IList<RGitHubPackageResponse>> gitHubPackages = default;
            Optional<IList<string>> customUrlPackages = default;
            Optional<IList<string>> bioConductorPackages = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("rVersion"))
                {
                    rVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userManaged"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    userManaged = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("rscriptPath"))
                {
                    rscriptPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("snapshotDate"))
                {
                    snapshotDate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cranPackages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RCranPackage> array = new List<RCranPackage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RCranPackage.DeserializeRCranPackage(item));
                    }
                    cranPackages = array;
                    continue;
                }
                if (property.NameEquals("gitHubPackages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RGitHubPackageResponse> array = new List<RGitHubPackageResponse>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RGitHubPackageResponse.DeserializeRGitHubPackageResponse(item));
                    }
                    gitHubPackages = array;
                    continue;
                }
                if (property.NameEquals("customUrlPackages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    customUrlPackages = array;
                    continue;
                }
                if (property.NameEquals("bioConductorPackages"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    bioConductorPackages = array;
                    continue;
                }
            }
            return new RSectionResponse(rVersion.Value, Optional.ToNullable(userManaged), rscriptPath.Value, snapshotDate.Value, Optional.ToList(cranPackages), Optional.ToList(gitHubPackages), Optional.ToList(customUrlPackages), Optional.ToList(bioConductorPackages));
        }
    }
}
