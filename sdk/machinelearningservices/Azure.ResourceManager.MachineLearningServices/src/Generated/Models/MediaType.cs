// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> Media type of data asset. </summary>
    public readonly partial struct MediaType : IEquatable<MediaType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MediaType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MediaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ImageValue = "Image";
        private const string TextValue = "Text";

        /// <summary> Image. </summary>
        public static MediaType Image { get; } = new MediaType(ImageValue);
        /// <summary> Text. </summary>
        public static MediaType Text { get; } = new MediaType(TextValue);
        /// <summary> Determines if two <see cref="MediaType"/> values are the same. </summary>
        public static bool operator ==(MediaType left, MediaType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MediaType"/> values are not the same. </summary>
        public static bool operator !=(MediaType left, MediaType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MediaType"/>. </summary>
        public static implicit operator MediaType(string value) => new MediaType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MediaType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MediaType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
