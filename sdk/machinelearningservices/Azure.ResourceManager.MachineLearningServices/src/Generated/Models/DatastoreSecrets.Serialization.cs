// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices
{
    public partial class DatastoreSecrets : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("secretsType");
            writer.WriteStringValue(SecretsType.ToString());
            writer.WriteEndObject();
        }

        internal static DatastoreSecrets DeserializeDatastoreSecrets(JsonElement element)
        {
            if (element.TryGetProperty("secretsType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "Certificate": return CertificateDatastoreSecrets.DeserializeCertificateDatastoreSecrets(element);
                    case "None": return NoneDatastoreSecrets.DeserializeNoneDatastoreSecrets(element);
                    case "Sas": return SasDatastoreSecrets.DeserializeSasDatastoreSecrets(element);
                    case "ServicePrincipal": return ServicePrincipalDatastoreSecrets.DeserializeServicePrincipalDatastoreSecrets(element);
                    case "SqlAdmin": return SqlAdminDatastoreSecrets.DeserializeSqlAdminDatastoreSecrets(element);
                    case "AccountKey": return AccountKeyDatastoreSecrets.DeserializeAccountKeyDatastoreSecrets(element);
                }
            }
            SecretsType secretsType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("secretsType"))
                {
                    secretsType = new SecretsType(property.Value.GetString());
                    continue;
                }
            }
            return new DatastoreSecrets(secretsType);
        }
    }
}
