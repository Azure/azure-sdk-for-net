// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices
{
    public partial class CertificateDatastoreCredentials : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AuthorityUrl))
            {
                writer.WritePropertyName("authorityUrl");
                writer.WriteStringValue(AuthorityUrl);
            }
            writer.WritePropertyName("clientId");
            writer.WriteStringValue(ClientId);
            if (Optional.IsDefined(ResourceUri))
            {
                writer.WritePropertyName("resourceUri");
                writer.WriteStringValue(ResourceUri);
            }
            if (Optional.IsDefined(Secrets))
            {
                writer.WritePropertyName("secrets");
                writer.WriteObjectValue(Secrets);
            }
            writer.WritePropertyName("tenantId");
            writer.WriteStringValue(TenantId);
            writer.WritePropertyName("thumbprint");
            writer.WriteStringValue(Thumbprint);
            writer.WritePropertyName("credentialsType");
            writer.WriteStringValue(CredentialsType.ToString());
            writer.WriteEndObject();
        }

        internal static CertificateDatastoreCredentials DeserializeCertificateDatastoreCredentials(JsonElement element)
        {
            Optional<string> authorityUrl = default;
            Guid clientId = default;
            Optional<string> resourceUri = default;
            Optional<CertificateDatastoreSecrets> secrets = default;
            Guid tenantId = default;
            string thumbprint = default;
            CredentialsType credentialsType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authorityUrl"))
                {
                    authorityUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientId"))
                {
                    clientId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("resourceUri"))
                {
                    resourceUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secrets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    secrets = CertificateDatastoreSecrets.DeserializeCertificateDatastoreSecrets(property.Value);
                    continue;
                }
                if (property.NameEquals("tenantId"))
                {
                    tenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("thumbprint"))
                {
                    thumbprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("credentialsType"))
                {
                    credentialsType = new CredentialsType(property.Value.GetString());
                    continue;
                }
            }
            return new CertificateDatastoreCredentials(credentialsType, authorityUrl.Value, clientId, resourceUri.Value, secrets.Value, tenantId, thumbprint);
        }
    }
}
