// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class AKSServiceResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Models))
            {
                writer.WritePropertyName("models");
                writer.WriteStartArray();
                foreach (var item in Models)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ContainerResourceRequirements))
            {
                writer.WritePropertyName("containerResourceRequirements");
                writer.WriteObjectValue(ContainerResourceRequirements);
            }
            if (Optional.IsDefined(MaxConcurrentRequestsPerContainer))
            {
                writer.WritePropertyName("maxConcurrentRequestsPerContainer");
                writer.WriteNumberValue(MaxConcurrentRequestsPerContainer.Value);
            }
            if (Optional.IsDefined(MaxQueueWaitMs))
            {
                writer.WritePropertyName("maxQueueWaitMs");
                writer.WriteNumberValue(MaxQueueWaitMs.Value);
            }
            if (Optional.IsDefined(ComputeName))
            {
                writer.WritePropertyName("computeName");
                writer.WriteStringValue(ComputeName);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace");
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(NumReplicas))
            {
                writer.WritePropertyName("numReplicas");
                writer.WriteNumberValue(NumReplicas.Value);
            }
            if (Optional.IsDefined(DataCollection))
            {
                writer.WritePropertyName("dataCollection");
                writer.WriteObjectValue(DataCollection);
            }
            if (Optional.IsDefined(AppInsightsEnabled))
            {
                writer.WritePropertyName("appInsightsEnabled");
                writer.WriteBooleanValue(AppInsightsEnabled.Value);
            }
            if (Optional.IsDefined(AutoScaler))
            {
                writer.WritePropertyName("autoScaler");
                writer.WriteObjectValue(AutoScaler);
            }
            if (Optional.IsDefined(ScoringTimeoutMs))
            {
                writer.WritePropertyName("scoringTimeoutMs");
                writer.WriteNumberValue(ScoringTimeoutMs.Value);
            }
            if (Optional.IsDefined(LivenessProbeRequirements))
            {
                writer.WritePropertyName("livenessProbeRequirements");
                writer.WriteObjectValue(LivenessProbeRequirements);
            }
            if (Optional.IsDefined(AuthEnabled))
            {
                writer.WritePropertyName("authEnabled");
                writer.WriteBooleanValue(AuthEnabled.Value);
            }
            if (Optional.IsDefined(AadAuthEnabled))
            {
                writer.WritePropertyName("aadAuthEnabled");
                writer.WriteBooleanValue(AadAuthEnabled.Value);
            }
            if (Optional.IsDefined(EnvironmentImageRequest))
            {
                writer.WritePropertyName("environmentImageRequest");
                writer.WriteObjectValue(EnvironmentImageRequest);
            }
            if (Optional.IsDefined(IsDefault))
            {
                writer.WritePropertyName("isDefault");
                writer.WriteBooleanValue(IsDefault.Value);
            }
            if (Optional.IsDefined(TrafficPercentile))
            {
                writer.WritePropertyName("trafficPercentile");
                writer.WriteNumberValue(TrafficPercentile.Value);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type.Value.ToString());
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(KvTags))
            {
                writer.WritePropertyName("kvTags");
                writer.WriteStartObject();
                foreach (var item in KvTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties");
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("computeType");
            writer.WriteStringValue(ComputeType.ToString());
            if (Optional.IsDefined(DeploymentType))
            {
                writer.WritePropertyName("deploymentType");
                writer.WriteStringValue(DeploymentType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static AKSServiceResponse DeserializeAKSServiceResponse(JsonElement element)
        {
            Optional<IList<Model>> models = default;
            Optional<ContainerResourceRequirements> containerResourceRequirements = default;
            Optional<int> maxConcurrentRequestsPerContainer = default;
            Optional<int> maxQueueWaitMs = default;
            Optional<string> computeName = default;
            Optional<string> @namespace = default;
            Optional<int> numReplicas = default;
            Optional<AKSServiceResponseDataCollection> dataCollection = default;
            Optional<bool> appInsightsEnabled = default;
            Optional<AKSServiceResponseAutoScaler> autoScaler = default;
            Optional<string> scoringUri = default;
            Optional<AKSServiceResponseDeploymentStatus> deploymentStatus = default;
            Optional<int> scoringTimeoutMs = default;
            Optional<AKSServiceResponseLivenessProbeRequirements> livenessProbeRequirements = default;
            Optional<bool> authEnabled = default;
            Optional<bool> aadAuthEnabled = default;
            Optional<string> swaggerUri = default;
            Optional<IReadOnlyDictionary<string, object>> modelConfigMap = default;
            Optional<AKSServiceResponseEnvironmentImageRequest> environmentImageRequest = default;
            Optional<bool> isDefault = default;
            Optional<float> trafficPercentile = default;
            Optional<VariantType> type = default;
            Optional<string> description = default;
            Optional<IDictionary<string, string>> kvTags = default;
            Optional<IDictionary<string, string>> properties = default;
            Optional<WebServiceState> state = default;
            Optional<ServiceResponseBaseError> error = default;
            ComputeEnvironmentType computeType = default;
            Optional<DeploymentType> deploymentType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("models"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Model> array = new List<Model>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Model.DeserializeModel(item));
                    }
                    models = array;
                    continue;
                }
                if (property.NameEquals("containerResourceRequirements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    containerResourceRequirements = ContainerResourceRequirements.DeserializeContainerResourceRequirements(property.Value);
                    continue;
                }
                if (property.NameEquals("maxConcurrentRequestsPerContainer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxConcurrentRequestsPerContainer = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxQueueWaitMs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxQueueWaitMs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("computeName"))
                {
                    computeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numReplicas"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numReplicas = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dataCollection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataCollection = AKSServiceResponseDataCollection.DeserializeAKSServiceResponseDataCollection(property.Value);
                    continue;
                }
                if (property.NameEquals("appInsightsEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appInsightsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoScaler"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoScaler = AKSServiceResponseAutoScaler.DeserializeAKSServiceResponseAutoScaler(property.Value);
                    continue;
                }
                if (property.NameEquals("scoringUri"))
                {
                    scoringUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deploymentStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deploymentStatus = AKSServiceResponseDeploymentStatus.DeserializeAKSServiceResponseDeploymentStatus(property.Value);
                    continue;
                }
                if (property.NameEquals("scoringTimeoutMs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scoringTimeoutMs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("livenessProbeRequirements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    livenessProbeRequirements = AKSServiceResponseLivenessProbeRequirements.DeserializeAKSServiceResponseLivenessProbeRequirements(property.Value);
                    continue;
                }
                if (property.NameEquals("authEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("aadAuthEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    aadAuthEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("swaggerUri"))
                {
                    swaggerUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modelConfigMap"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    modelConfigMap = dictionary;
                    continue;
                }
                if (property.NameEquals("environmentImageRequest"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    environmentImageRequest = AKSServiceResponseEnvironmentImageRequest.DeserializeAKSServiceResponseEnvironmentImageRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("isDefault"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDefault = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("trafficPercentile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trafficPercentile = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new VariantType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kvTags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    kvTags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    properties = dictionary;
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new WebServiceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("error"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    error = ServiceResponseBaseError.DeserializeServiceResponseBaseError(property.Value);
                    continue;
                }
                if (property.NameEquals("computeType"))
                {
                    computeType = new ComputeEnvironmentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deploymentType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deploymentType = new DeploymentType(property.Value.GetString());
                    continue;
                }
            }
            return new AKSServiceResponse(description.Value, Optional.ToDictionary(kvTags), Optional.ToDictionary(properties), Optional.ToNullable(state), error.Value, computeType, Optional.ToNullable(deploymentType), Optional.ToNullable(isDefault), Optional.ToNullable(trafficPercentile), Optional.ToNullable(type), Optional.ToList(models), containerResourceRequirements.Value, Optional.ToNullable(maxConcurrentRequestsPerContainer), Optional.ToNullable(maxQueueWaitMs), computeName.Value, @namespace.Value, Optional.ToNullable(numReplicas), dataCollection.Value, Optional.ToNullable(appInsightsEnabled), autoScaler.Value, scoringUri.Value, deploymentStatus.Value, Optional.ToNullable(scoringTimeoutMs), livenessProbeRequirements.Value, Optional.ToNullable(authEnabled), Optional.ToNullable(aadAuthEnabled), swaggerUri.Value, Optional.ToDictionary(modelConfigMap), environmentImageRequest.Value);
        }
    }
}
