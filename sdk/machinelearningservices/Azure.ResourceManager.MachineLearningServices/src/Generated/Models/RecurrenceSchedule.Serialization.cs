// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class RecurrenceSchedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("frequency");
            writer.WriteStringValue(Frequency.ToString());
            writer.WritePropertyName("interval");
            writer.WriteNumberValue(Interval);
            writer.WritePropertyName("pattern");
            writer.WriteObjectValue(Pattern);
            if (Optional.IsDefined(EndTime))
            {
                if (EndTime != null)
                {
                    writer.WritePropertyName("endTime");
                    writer.WriteStringValue(EndTime.Value, "O");
                }
                else
                {
                    writer.WriteNull("endTime");
                }
            }
            if (Optional.IsDefined(ScheduleStatus))
            {
                writer.WritePropertyName("scheduleStatus");
                writer.WriteStringValue(ScheduleStatus.Value.ToString());
            }
            writer.WritePropertyName("scheduleType");
            writer.WriteStringValue(ScheduleType.ToString());
            if (Optional.IsDefined(StartTime))
            {
                if (StartTime != null)
                {
                    writer.WritePropertyName("startTime");
                    writer.WriteStringValue(StartTime.Value, "O");
                }
                else
                {
                    writer.WriteNull("startTime");
                }
            }
            if (Optional.IsDefined(TimeZone))
            {
                if (TimeZone != null)
                {
                    writer.WritePropertyName("timeZone");
                    writer.WriteStringValue(TimeZone);
                }
                else
                {
                    writer.WriteNull("timeZone");
                }
            }
            writer.WriteEndObject();
        }

        internal static RecurrenceSchedule DeserializeRecurrenceSchedule(JsonElement element)
        {
            RecurrenceFrequency frequency = default;
            int interval = default;
            RecurrencePattern pattern = default;
            Optional<DateTimeOffset?> endTime = default;
            Optional<ScheduleStatus> scheduleStatus = default;
            ScheduleType scheduleType = default;
            Optional<DateTimeOffset?> startTime = default;
            Optional<string> timeZone = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frequency"))
                {
                    frequency = new RecurrenceFrequency(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("interval"))
                {
                    interval = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("pattern"))
                {
                    pattern = RecurrencePattern.DeserializeRecurrencePattern(property.Value);
                    continue;
                }
                if (property.NameEquals("endTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endTime = null;
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("scheduleStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scheduleStatus = new ScheduleStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scheduleType"))
                {
                    scheduleType = new ScheduleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        startTime = null;
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("timeZone"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        timeZone = null;
                        continue;
                    }
                    timeZone = property.Value.GetString();
                    continue;
                }
            }
            return new RecurrenceSchedule(Optional.ToNullable(endTime), Optional.ToNullable(scheduleStatus), scheduleType, Optional.ToNullable(startTime), timeZone.Value, frequency, interval, pattern);
        }
    }
}
