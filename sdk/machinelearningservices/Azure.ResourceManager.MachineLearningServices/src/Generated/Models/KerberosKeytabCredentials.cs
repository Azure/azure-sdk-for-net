// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> The KerberosKeytabCredentials. </summary>
    public partial class KerberosKeytabCredentials : DatastoreCredentials
    {
        /// <summary> Initializes a new instance of KerberosKeytabCredentials. </summary>
        /// <param name="secrets"> Keytab secrets. </param>
        /// <param name="kerberosKdcAddress"> IP Address or DNS HostName. </param>
        /// <param name="kerberosPrincipal"> Kerberos Username. </param>
        /// <param name="kerberosRealm"> Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secrets"/>, <paramref name="kerberosKdcAddress"/>, <paramref name="kerberosPrincipal"/> or <paramref name="kerberosRealm"/> is null. </exception>
        public KerberosKeytabCredentials(KerberosKeytabSecrets secrets, string kerberosKdcAddress, string kerberosPrincipal, string kerberosRealm)
        {
            if (secrets == null)
            {
                throw new ArgumentNullException(nameof(secrets));
            }
            if (kerberosKdcAddress == null)
            {
                throw new ArgumentNullException(nameof(kerberosKdcAddress));
            }
            if (kerberosPrincipal == null)
            {
                throw new ArgumentNullException(nameof(kerberosPrincipal));
            }
            if (kerberosRealm == null)
            {
                throw new ArgumentNullException(nameof(kerberosRealm));
            }

            Secrets = secrets;
            KerberosKdcAddress = kerberosKdcAddress;
            KerberosPrincipal = kerberosPrincipal;
            KerberosRealm = kerberosRealm;
            CredentialsType = CredentialsType.KerberosKeytab;
        }

        /// <summary> Initializes a new instance of KerberosKeytabCredentials. </summary>
        /// <param name="credentialsType"> Credential type used to authentication with storage. </param>
        /// <param name="secrets"> Keytab secrets. </param>
        /// <param name="kerberosKdcAddress"> IP Address or DNS HostName. </param>
        /// <param name="kerberosPrincipal"> Kerberos Username. </param>
        /// <param name="kerberosRealm"> Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service. </param>
        internal KerberosKeytabCredentials(CredentialsType credentialsType, KerberosKeytabSecrets secrets, string kerberosKdcAddress, string kerberosPrincipal, string kerberosRealm) : base(credentialsType)
        {
            Secrets = secrets;
            KerberosKdcAddress = kerberosKdcAddress;
            KerberosPrincipal = kerberosPrincipal;
            KerberosRealm = kerberosRealm;
            CredentialsType = credentialsType;
        }

        /// <summary> Keytab secrets. </summary>
        public KerberosKeytabSecrets Secrets { get; set; }
        /// <summary> IP Address or DNS HostName. </summary>
        public string KerberosKdcAddress { get; set; }
        /// <summary> Kerberos Username. </summary>
        public string KerberosPrincipal { get; set; }
        /// <summary> Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service. </summary>
        public string KerberosRealm { get; set; }
    }
}
