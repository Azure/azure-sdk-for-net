// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> The async operation state. </summary>
    public readonly partial struct ModelFormat : IEquatable<ModelFormat>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ModelFormat"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ModelFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CustomValue = "Custom";
        private const string MLFlowValue = "MLFlow";
        private const string TritonValue = "Triton";
        private const string OpenAIValue = "OpenAI";

        /// <summary> Custom. </summary>
        public static ModelFormat Custom { get; } = new ModelFormat(CustomValue);
        /// <summary> MLFlow. </summary>
        public static ModelFormat MLFlow { get; } = new ModelFormat(MLFlowValue);
        /// <summary> Triton. </summary>
        public static ModelFormat Triton { get; } = new ModelFormat(TritonValue);
        /// <summary> OpenAI. </summary>
        public static ModelFormat OpenAI { get; } = new ModelFormat(OpenAIValue);
        /// <summary> Determines if two <see cref="ModelFormat"/> values are the same. </summary>
        public static bool operator ==(ModelFormat left, ModelFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModelFormat"/> values are not the same. </summary>
        public static bool operator !=(ModelFormat left, ModelFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModelFormat"/>. </summary>
        public static implicit operator ModelFormat(string value) => new ModelFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModelFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModelFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
