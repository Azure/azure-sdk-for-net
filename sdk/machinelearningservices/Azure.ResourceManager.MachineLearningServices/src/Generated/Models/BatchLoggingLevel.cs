// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary>
    /// Log verbosity for batch inferencing.
    /// 
    /// Increasing verbosity order for logging is : Warning, Info and Debug.
    /// 
    /// The default value is Info.
    /// </summary>
    public readonly partial struct BatchLoggingLevel : IEquatable<BatchLoggingLevel>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="BatchLoggingLevel"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BatchLoggingLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InfoValue = "Info";
        private const string WarningValue = "Warning";
        private const string DebugValue = "Debug";

        /// <summary> Info. </summary>
        public static BatchLoggingLevel Info { get; } = new BatchLoggingLevel(InfoValue);
        /// <summary> Warning. </summary>
        public static BatchLoggingLevel Warning { get; } = new BatchLoggingLevel(WarningValue);
        /// <summary> Debug. </summary>
        public static BatchLoggingLevel Debug { get; } = new BatchLoggingLevel(DebugValue);
        /// <summary> Determines if two <see cref="BatchLoggingLevel"/> values are the same. </summary>
        public static bool operator ==(BatchLoggingLevel left, BatchLoggingLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BatchLoggingLevel"/> values are not the same. </summary>
        public static bool operator !=(BatchLoggingLevel left, BatchLoggingLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BatchLoggingLevel"/>. </summary>
        public static implicit operator BatchLoggingLevel(string value) => new BatchLoggingLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BatchLoggingLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BatchLoggingLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
