// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices
{
    public partial class DockerSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("dockerSpecificationType");
            writer.WriteStringValue(DockerSpecificationType.ToString());
            if (Optional.IsDefined(Platform))
            {
                writer.WritePropertyName("platform");
                writer.WriteObjectValue(Platform);
            }
            writer.WriteEndObject();
        }

        internal static DockerSpecification DeserializeDockerSpecification(JsonElement element)
        {
            if (element.TryGetProperty("dockerSpecificationType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "Build": return DockerBuild.DeserializeDockerBuild(element);
                    case "Image": return DockerImage.DeserializeDockerImage(element);
                }
            }
            DockerSpecificationType dockerSpecificationType = default;
            Optional<DockerImagePlatform> platform = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dockerSpecificationType"))
                {
                    dockerSpecificationType = new DockerSpecificationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("platform"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    platform = DockerImagePlatform.DeserializeDockerImagePlatform(property.Value);
                    continue;
                }
            }
            return new DockerSpecification(dockerSpecificationType, platform.Value);
        }
    }
}
