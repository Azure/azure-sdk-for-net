// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    internal static class JobStatusExtensions
    {
        public static string ToSerialString(this JobStatus value) => value switch
        {
            JobStatus.NotStarted => "NotStarted",
            JobStatus.Starting => "Starting",
            JobStatus.Provisioning => "Provisioning",
            JobStatus.Preparing => "Preparing",
            JobStatus.Queued => "Queued",
            JobStatus.Running => "Running",
            JobStatus.Finalizing => "Finalizing",
            JobStatus.CancelRequested => "CancelRequested",
            JobStatus.Completed => "Completed",
            JobStatus.Failed => "Failed",
            JobStatus.Canceled => "Canceled",
            JobStatus.NotResponding => "NotResponding",
            JobStatus.Paused => "Paused",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown JobStatus value.")
        };

        public static JobStatus ToJobStatus(this string value)
        {
            if (string.Equals(value, "NotStarted", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.NotStarted;
            if (string.Equals(value, "Starting", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Starting;
            if (string.Equals(value, "Provisioning", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Provisioning;
            if (string.Equals(value, "Preparing", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Preparing;
            if (string.Equals(value, "Queued", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Queued;
            if (string.Equals(value, "Running", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Running;
            if (string.Equals(value, "Finalizing", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Finalizing;
            if (string.Equals(value, "CancelRequested", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.CancelRequested;
            if (string.Equals(value, "Completed", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Completed;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Failed;
            if (string.Equals(value, "Canceled", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Canceled;
            if (string.Equals(value, "NotResponding", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.NotResponding;
            if (string.Equals(value, "Paused", StringComparison.InvariantCultureIgnoreCase)) return JobStatus.Paused;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown JobStatus value.");
        }
    }
}
