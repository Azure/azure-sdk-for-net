// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> Base definition for datastore contents configuration. </summary>
    public partial class DatastoreDetails : ResourceBase
    {
        /// <summary> Initializes a new instance of DatastoreDetails. </summary>
        /// <param name="credentials"> [Required] Account credentials. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentials"/> is null. </exception>
        public DatastoreDetails(DatastoreCredentials credentials)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException(nameof(credentials));
            }

            Credentials = credentials;
        }

        /// <summary> Initializes a new instance of DatastoreDetails. </summary>
        /// <param name="description"> The asset description text. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="credentials"> [Required] Account credentials. </param>
        /// <param name="datastoreType"> [Required] Storage type backing the datastore. </param>
        /// <param name="isDefault"> Readonly property to indicate if datastore is the workspace default datastore. </param>
        internal DatastoreDetails(string description, IDictionary<string, string> properties, IDictionary<string, string> tags, DatastoreCredentials credentials, DatastoreType datastoreType, bool? isDefault) : base(description, properties, tags)
        {
            Credentials = credentials;
            DatastoreType = datastoreType;
            IsDefault = isDefault;
        }

        /// <summary> [Required] Account credentials. </summary>
        internal DatastoreCredentials Credentials { get; set; }
        /// <summary> [Required] Credential type used to authentication with storage. </summary>
        internal CredentialsType CredentialsType
        {
            get => Credentials is null ? default : Credentials.CredentialsType;
            set
            {
                if (Credentials is null)
                    Credentials = new DatastoreCredentials();
                Credentials.CredentialsType = value;
            }
        }

        /// <summary> [Required] Storage type backing the datastore. </summary>
        internal DatastoreType DatastoreType { get; set; }
        /// <summary> Readonly property to indicate if datastore is the workspace default datastore. </summary>
        public bool? IsDefault { get; }
    }
}
