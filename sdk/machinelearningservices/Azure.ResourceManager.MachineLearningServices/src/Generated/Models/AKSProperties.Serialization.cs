// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class AKSProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ClusterFqdn))
            {
                writer.WritePropertyName("clusterFqdn");
                writer.WriteStringValue(ClusterFqdn);
            }
            if (Optional.IsDefined(AgentCount))
            {
                writer.WritePropertyName("agentCount");
                writer.WriteNumberValue(AgentCount.Value);
            }
            if (Optional.IsDefined(AgentVMSize))
            {
                writer.WritePropertyName("agentVMSize");
                writer.WriteStringValue(AgentVMSize);
            }
            if (Optional.IsDefined(SslConfiguration))
            {
                writer.WritePropertyName("sslConfiguration");
                writer.WriteObjectValue(SslConfiguration);
            }
            if (Optional.IsDefined(AksNetworkingConfiguration))
            {
                writer.WritePropertyName("aksNetworkingConfiguration");
                writer.WriteObjectValue(AksNetworkingConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static AKSProperties DeserializeAKSProperties(JsonElement element)
        {
            Optional<string> clusterFqdn = default;
            Optional<IReadOnlyList<SystemService>> systemServices = default;
            Optional<int> agentCount = default;
            Optional<string> agentVMSize = default;
            Optional<SslConfiguration> sslConfiguration = default;
            Optional<AksNetworkingConfiguration> aksNetworkingConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clusterFqdn"))
                {
                    clusterFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemServices"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SystemService> array = new List<SystemService>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SystemService.DeserializeSystemService(item));
                    }
                    systemServices = array;
                    continue;
                }
                if (property.NameEquals("agentCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("agentVMSize"))
                {
                    agentVMSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sslConfiguration = SslConfiguration.DeserializeSslConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("aksNetworkingConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    aksNetworkingConfiguration = AksNetworkingConfiguration.DeserializeAksNetworkingConfiguration(property.Value);
                    continue;
                }
            }
            return new AKSProperties(clusterFqdn.Value, Optional.ToList(systemServices), Optional.ToNullable(agentCount), agentVMSize.Value, sslConfiguration.Value, aksNetworkingConfiguration.Value);
        }
    }
}
