// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> Defines supported metric goals for hyperparameter tuning. </summary>
    public readonly partial struct PrimaryMetricGoal : IEquatable<PrimaryMetricGoal>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="PrimaryMetricGoal"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PrimaryMetricGoal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MinimizeValue = "Minimize";
        private const string MaximizeValue = "Maximize";

        /// <summary> Minimize. </summary>
        public static PrimaryMetricGoal Minimize { get; } = new PrimaryMetricGoal(MinimizeValue);
        /// <summary> Maximize. </summary>
        public static PrimaryMetricGoal Maximize { get; } = new PrimaryMetricGoal(MaximizeValue);
        /// <summary> Determines if two <see cref="PrimaryMetricGoal"/> values are the same. </summary>
        public static bool operator ==(PrimaryMetricGoal left, PrimaryMetricGoal right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PrimaryMetricGoal"/> values are not the same. </summary>
        public static bool operator !=(PrimaryMetricGoal left, PrimaryMetricGoal right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PrimaryMetricGoal"/>. </summary>
        public static implicit operator PrimaryMetricGoal(string value) => new PrimaryMetricGoal(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PrimaryMetricGoal other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PrimaryMetricGoal other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
