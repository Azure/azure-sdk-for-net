// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> Enum to determine how batch inferencing will handle output. </summary>
    public readonly partial struct BatchOutputAction : IEquatable<BatchOutputAction>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="BatchOutputAction"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BatchOutputAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SummaryOnlyValue = "SummaryOnly";
        private const string AppendRowValue = "AppendRow";

        /// <summary> SummaryOnly. </summary>
        public static BatchOutputAction SummaryOnly { get; } = new BatchOutputAction(SummaryOnlyValue);
        /// <summary> AppendRow. </summary>
        public static BatchOutputAction AppendRow { get; } = new BatchOutputAction(AppendRowValue);
        /// <summary> Determines if two <see cref="BatchOutputAction"/> values are the same. </summary>
        public static bool operator ==(BatchOutputAction left, BatchOutputAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BatchOutputAction"/> values are not the same. </summary>
        public static bool operator !=(BatchOutputAction left, BatchOutputAction right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BatchOutputAction"/>. </summary>
        public static implicit operator BatchOutputAction(string value) => new BatchOutputAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BatchOutputAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BatchOutputAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
