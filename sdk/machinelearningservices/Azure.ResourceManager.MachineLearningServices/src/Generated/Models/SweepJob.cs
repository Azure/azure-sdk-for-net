// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> The SweepJob. </summary>
    public partial class SweepJob : ComputeJobBase
    {
        /// <summary> Initializes a new instance of SweepJob. </summary>
        /// <param name="computeBinding"> Compute binding definition. </param>
        /// <param name="parameterSamplingConfiguration"> class for all hyperparameter sampling algorithms. </param>
        /// <param name="evaluationConfiguration"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="computeBinding"/>, <paramref name="parameterSamplingConfiguration"/>, or <paramref name="evaluationConfiguration"/> is null. </exception>
        public SweepJob(ComputeBinding computeBinding, ParameterSamplingConfiguration parameterSamplingConfiguration, EvaluationConfiguration evaluationConfiguration) : base(computeBinding)
        {
            if (computeBinding == null)
            {
                throw new ArgumentNullException(nameof(computeBinding));
            }
            if (parameterSamplingConfiguration == null)
            {
                throw new ArgumentNullException(nameof(parameterSamplingConfiguration));
            }
            if (evaluationConfiguration == null)
            {
                throw new ArgumentNullException(nameof(evaluationConfiguration));
            }

            ParameterSamplingConfiguration = parameterSamplingConfiguration;
            EvaluationConfiguration = evaluationConfiguration;
            JobType = JobType.Sweep;
        }

        /// <summary> Initializes a new instance of SweepJob. </summary>
        /// <param name="jobType"> Specifies the type of job. </param>
        /// <param name="interactionEndpoints">
        /// Dictonary of endpoint URIs, keyed by enumerated job endpoints.
        /// 
        /// For local jobs, a job endpoint will have a value of FileStreamObject.
        /// </param>
        /// <param name="description"> The asset description text. </param>
        /// <param name="tags"> Tag dictionary. Tags can be added, removed, and updated. </param>
        /// <param name="properties"> The asset property dictionary. </param>
        /// <param name="experimentName"> The name of the experiment the job belongs to. If not set, the job is placed in the &quot;Default&quot; experiment. </param>
        /// <param name="computeBinding"> Compute binding definition. </param>
        /// <param name="output"> . </param>
        /// <param name="status"> The status of a job. </param>
        /// <param name="parameterSamplingConfiguration"> class for all hyperparameter sampling algorithms. </param>
        /// <param name="terminationConfiguration"> . </param>
        /// <param name="evaluationConfiguration"> . </param>
        /// <param name="trialComponent"> . </param>
        internal SweepJob(JobType jobType, JobBaseInteractionEndpoints interactionEndpoints, string description, IDictionary<string, string> tags, IDictionary<string, string> properties, string experimentName, ComputeBinding computeBinding, JobOutput output, JobStatus? status, ParameterSamplingConfiguration parameterSamplingConfiguration, TerminationConfiguration terminationConfiguration, EvaluationConfiguration evaluationConfiguration, TrialComponent trialComponent) : base(jobType, interactionEndpoints, description, tags, properties, experimentName, computeBinding, output)
        {
            Status = status;
            ParameterSamplingConfiguration = parameterSamplingConfiguration;
            TerminationConfiguration = terminationConfiguration;
            EvaluationConfiguration = evaluationConfiguration;
            TrialComponent = trialComponent;
            JobType = jobType;
        }

        /// <summary> The status of a job. </summary>
        public JobStatus? Status { get; set; }
        /// <summary> class for all hyperparameter sampling algorithms. </summary>
        public ParameterSamplingConfiguration ParameterSamplingConfiguration { get; set; }
        public TerminationConfiguration TerminationConfiguration { get; set; }
        public EvaluationConfiguration EvaluationConfiguration { get; set; }
        public TrialComponent TrialComponent { get; set; }
    }
}
