// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> Describes how the data should be attached to the container. </summary>
    public readonly partial struct DataBindingMode : IEquatable<DataBindingMode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DataBindingMode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataBindingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MountValue = "Mount";
        private const string DownloadValue = "Download";
        private const string UploadValue = "Upload";

        /// <summary> Mount. </summary>
        public static DataBindingMode Mount { get; } = new DataBindingMode(MountValue);
        /// <summary> Download. </summary>
        public static DataBindingMode Download { get; } = new DataBindingMode(DownloadValue);
        /// <summary> Upload. </summary>
        public static DataBindingMode Upload { get; } = new DataBindingMode(UploadValue);
        /// <summary> Determines if two <see cref="DataBindingMode"/> values are the same. </summary>
        public static bool operator ==(DataBindingMode left, DataBindingMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataBindingMode"/> values are not the same. </summary>
        public static bool operator !=(DataBindingMode left, DataBindingMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataBindingMode"/>. </summary>
        public static implicit operator DataBindingMode(string value) => new DataBindingMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataBindingMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataBindingMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
