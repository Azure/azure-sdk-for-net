// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class UriReference : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(File))
            {
                if (File != null)
                {
                    writer.WritePropertyName("file");
                    writer.WriteStringValue(File);
                }
                else
                {
                    writer.WriteNull("file");
                }
            }
            if (Optional.IsDefined(Folder))
            {
                if (Folder != null)
                {
                    writer.WritePropertyName("folder");
                    writer.WriteStringValue(Folder);
                }
                else
                {
                    writer.WriteNull("folder");
                }
            }
            writer.WriteEndObject();
        }

        internal static UriReference DeserializeUriReference(JsonElement element)
        {
            Optional<string> file = default;
            Optional<string> folder = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("file"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        file = null;
                        continue;
                    }
                    file = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("folder"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        folder = null;
                        continue;
                    }
                    folder = property.Value.GetString();
                    continue;
                }
            }
            return new UriReference(file.Value, folder.Value);
        }
    }
}
