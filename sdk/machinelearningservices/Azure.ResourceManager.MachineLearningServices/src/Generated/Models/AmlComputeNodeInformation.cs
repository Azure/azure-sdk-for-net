// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    /// <summary> Compute node information related to a AmlCompute. </summary>
    public partial class AmlComputeNodeInformation
    {
        /// <summary> Initializes a new instance of AmlComputeNodeInformation. </summary>
        internal AmlComputeNodeInformation()
        {
        }

        /// <summary> Initializes a new instance of AmlComputeNodeInformation. </summary>
        /// <param name="nodeId"> ID of the compute node. </param>
        /// <param name="privateIpAddress"> Private IP address of the compute node. </param>
        /// <param name="publicIpAddress"> Public IP address of the compute node. </param>
        /// <param name="port"> SSH port number of the node. </param>
        /// <param name="nodeState"> State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted. </param>
        /// <param name="runId"> ID of the Experiment running on the node, if any else null. </param>
        internal AmlComputeNodeInformation(string nodeId, string privateIpAddress, string publicIpAddress, int? port, NodeState? nodeState, string runId)
        {
            NodeId = nodeId;
            PrivateIpAddress = privateIpAddress;
            PublicIpAddress = publicIpAddress;
            Port = port;
            NodeState = nodeState;
            RunId = runId;
        }

        /// <summary> ID of the compute node. </summary>
        public string NodeId { get; }
        /// <summary> Private IP address of the compute node. </summary>
        public string PrivateIpAddress { get; }
        /// <summary> Public IP address of the compute node. </summary>
        public string PublicIpAddress { get; }
        /// <summary> SSH port number of the node. </summary>
        public int? Port { get; }
        /// <summary> State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted. </summary>
        public NodeState? NodeState { get; }
        /// <summary> ID of the Experiment running on the node, if any else null. </summary>
        public string RunId { get; }
    }
}
