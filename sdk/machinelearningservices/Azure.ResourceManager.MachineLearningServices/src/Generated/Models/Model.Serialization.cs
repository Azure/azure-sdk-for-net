// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class Model : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(Framework))
            {
                writer.WritePropertyName("framework");
                writer.WriteStringValue(Framework);
            }
            if (Optional.IsDefined(FrameworkVersion))
            {
                writer.WritePropertyName("frameworkVersion");
                writer.WriteStringValue(FrameworkVersion);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteNumberValue(Version.Value);
            }
            if (Optional.IsCollectionDefined(Datasets))
            {
                writer.WritePropertyName("datasets");
                writer.WriteStartArray();
                foreach (var item in Datasets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("url");
            writer.WriteStringValue(Url);
            writer.WritePropertyName("mimeType");
            writer.WriteStringValue(MimeType);
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(CreatedTime))
            {
                writer.WritePropertyName("createdTime");
                writer.WriteStringValue(CreatedTime.Value, "O");
            }
            if (Optional.IsDefined(ModifiedTime))
            {
                writer.WritePropertyName("modifiedTime");
                writer.WriteStringValue(ModifiedTime.Value, "O");
            }
            if (Optional.IsDefined(Unpack))
            {
                writer.WritePropertyName("unpack");
                writer.WriteBooleanValue(Unpack.Value);
            }
            if (Optional.IsDefined(ParentModelId))
            {
                writer.WritePropertyName("parentModelId");
                writer.WriteStringValue(ParentModelId);
            }
            if (Optional.IsDefined(RunId))
            {
                writer.WritePropertyName("runId");
                writer.WriteStringValue(RunId);
            }
            if (Optional.IsDefined(ExperimentName))
            {
                writer.WritePropertyName("experimentName");
                writer.WriteStringValue(ExperimentName);
            }
            if (Optional.IsCollectionDefined(KvTags))
            {
                writer.WritePropertyName("kvTags");
                writer.WriteStartObject();
                foreach (var item in KvTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties");
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(DerivedModelIds))
            {
                writer.WritePropertyName("derivedModelIds");
                writer.WriteStartArray();
                foreach (var item in DerivedModelIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SampleInputData))
            {
                writer.WritePropertyName("sampleInputData");
                writer.WriteStringValue(SampleInputData);
            }
            if (Optional.IsDefined(SampleOutputData))
            {
                writer.WritePropertyName("sampleOutputData");
                writer.WriteStringValue(SampleOutputData);
            }
            if (Optional.IsDefined(ResourceRequirements))
            {
                writer.WritePropertyName("resourceRequirements");
                writer.WriteObjectValue(ResourceRequirements);
            }
            writer.WriteEndObject();
        }

        internal static Model DeserializeModel(JsonElement element)
        {
            Optional<string> id = default;
            string name = default;
            Optional<string> framework = default;
            Optional<string> frameworkVersion = default;
            Optional<long> version = default;
            Optional<IList<DatasetReference>> datasets = default;
            string url = default;
            string mimeType = default;
            Optional<string> description = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<DateTimeOffset> modifiedTime = default;
            Optional<bool> unpack = default;
            Optional<string> parentModelId = default;
            Optional<string> runId = default;
            Optional<string> experimentName = default;
            Optional<IDictionary<string, string>> kvTags = default;
            Optional<IDictionary<string, string>> properties = default;
            Optional<IList<string>> derivedModelIds = default;
            Optional<string> sampleInputData = default;
            Optional<string> sampleOutputData = default;
            Optional<ContainerResourceRequirements> resourceRequirements = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("framework"))
                {
                    framework = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frameworkVersion"))
                {
                    frameworkVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("datasets"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DatasetReference> array = new List<DatasetReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasetReference.DeserializeDatasetReference(item));
                    }
                    datasets = array;
                    continue;
                }
                if (property.NameEquals("url"))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mimeType"))
                {
                    mimeType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("modifiedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    modifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("unpack"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    unpack = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("parentModelId"))
                {
                    parentModelId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runId"))
                {
                    runId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("experimentName"))
                {
                    experimentName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kvTags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    kvTags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    properties = dictionary;
                    continue;
                }
                if (property.NameEquals("derivedModelIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    derivedModelIds = array;
                    continue;
                }
                if (property.NameEquals("sampleInputData"))
                {
                    sampleInputData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sampleOutputData"))
                {
                    sampleOutputData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceRequirements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceRequirements = ContainerResourceRequirements.DeserializeContainerResourceRequirements(property.Value);
                    continue;
                }
            }
            return new Model(id.Value, name, framework.Value, frameworkVersion.Value, Optional.ToNullable(version), Optional.ToList(datasets), url, mimeType, description.Value, Optional.ToNullable(createdTime), Optional.ToNullable(modifiedTime), Optional.ToNullable(unpack), parentModelId.Value, runId.Value, experimentName.Value, Optional.ToDictionary(kvTags), Optional.ToDictionary(properties), Optional.ToList(derivedModelIds), sampleInputData.Value, sampleOutputData.Value, resourceRequirements.Value);
        }
    }
}
