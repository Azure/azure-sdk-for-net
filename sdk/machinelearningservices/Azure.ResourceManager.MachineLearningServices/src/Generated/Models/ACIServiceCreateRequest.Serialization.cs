// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class ACIServiceCreateRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ContainerResourceRequirements))
            {
                writer.WritePropertyName("containerResourceRequirements");
                writer.WriteObjectValue(ContainerResourceRequirements);
            }
            if (Optional.IsDefined(AuthEnabled))
            {
                writer.WritePropertyName("authEnabled");
                writer.WriteBooleanValue(AuthEnabled.Value);
            }
            if (Optional.IsDefined(SslEnabled))
            {
                writer.WritePropertyName("sslEnabled");
                writer.WriteBooleanValue(SslEnabled.Value);
            }
            if (Optional.IsDefined(AppInsightsEnabled))
            {
                writer.WritePropertyName("appInsightsEnabled");
                writer.WriteBooleanValue(AppInsightsEnabled.Value);
            }
            if (Optional.IsDefined(DataCollection))
            {
                writer.WritePropertyName("dataCollection");
                writer.WriteObjectValue(DataCollection);
            }
            if (Optional.IsDefined(SslCertificate))
            {
                writer.WritePropertyName("sslCertificate");
                writer.WriteStringValue(SslCertificate);
            }
            if (Optional.IsDefined(SslKey))
            {
                writer.WritePropertyName("sslKey");
                writer.WriteStringValue(SslKey);
            }
            if (Optional.IsDefined(Cname))
            {
                writer.WritePropertyName("cname");
                writer.WriteStringValue(Cname);
            }
            if (Optional.IsDefined(DnsNameLabel))
            {
                writer.WritePropertyName("dnsNameLabel");
                writer.WriteStringValue(DnsNameLabel);
            }
            if (Optional.IsDefined(VnetConfiguration))
            {
                writer.WritePropertyName("vnetConfiguration");
                writer.WriteObjectValue(VnetConfiguration);
            }
            if (Optional.IsDefined(EncryptionProperties))
            {
                writer.WritePropertyName("encryptionProperties");
                writer.WriteObjectValue(EncryptionProperties);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(KvTags))
            {
                writer.WritePropertyName("kvTags");
                writer.WriteStartObject();
                foreach (var item in KvTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties");
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Keys))
            {
                writer.WritePropertyName("keys");
                writer.WriteObjectValue(Keys);
            }
            writer.WritePropertyName("computeType");
            writer.WriteStringValue(ComputeType.ToString());
            if (Optional.IsDefined(EnvironmentImageRequest))
            {
                writer.WritePropertyName("environmentImageRequest");
                writer.WriteObjectValue(EnvironmentImageRequest);
            }
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location");
                writer.WriteStringValue(Location);
            }
            writer.WriteEndObject();
        }
    }
}
