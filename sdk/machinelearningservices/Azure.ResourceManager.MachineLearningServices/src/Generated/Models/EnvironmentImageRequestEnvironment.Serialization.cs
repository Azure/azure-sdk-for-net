// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class EnvironmentImageRequestEnvironment : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Python))
            {
                writer.WritePropertyName("python");
                writer.WriteObjectValue(Python);
            }
            if (Optional.IsCollectionDefined(EnvironmentVariables))
            {
                writer.WritePropertyName("environmentVariables");
                writer.WriteStartObject();
                foreach (var item in EnvironmentVariables)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Docker))
            {
                writer.WritePropertyName("docker");
                writer.WriteObjectValue(Docker);
            }
            if (Optional.IsDefined(Spark))
            {
                writer.WritePropertyName("spark");
                writer.WriteObjectValue(Spark);
            }
            if (Optional.IsDefined(R))
            {
                writer.WritePropertyName("r");
                writer.WriteObjectValue(R);
            }
            if (Optional.IsDefined(InferencingStackVersion))
            {
                writer.WritePropertyName("inferencingStackVersion");
                writer.WriteStringValue(InferencingStackVersion);
            }
            writer.WriteEndObject();
        }
    }
}
