// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class SweepJobLimits : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxConcurrentTrials))
            {
                if (MaxConcurrentTrials != null)
                {
                    writer.WritePropertyName("maxConcurrentTrials");
                    writer.WriteNumberValue(MaxConcurrentTrials.Value);
                }
                else
                {
                    writer.WriteNull("maxConcurrentTrials");
                }
            }
            if (Optional.IsDefined(MaxTotalTrials))
            {
                if (MaxTotalTrials != null)
                {
                    writer.WritePropertyName("maxTotalTrials");
                    writer.WriteNumberValue(MaxTotalTrials.Value);
                }
                else
                {
                    writer.WriteNull("maxTotalTrials");
                }
            }
            if (Optional.IsDefined(Timeout))
            {
                if (Timeout != null)
                {
                    writer.WritePropertyName("timeout");
                    writer.WriteStringValue(Timeout.Value, "P");
                }
                else
                {
                    writer.WriteNull("timeout");
                }
            }
            if (Optional.IsDefined(TrialTimeout))
            {
                if (TrialTimeout != null)
                {
                    writer.WritePropertyName("trialTimeout");
                    writer.WriteStringValue(TrialTimeout.Value, "P");
                }
                else
                {
                    writer.WriteNull("trialTimeout");
                }
            }
            writer.WriteEndObject();
        }

        internal static SweepJobLimits DeserializeSweepJobLimits(JsonElement element)
        {
            Optional<JobLimitsType> jobLimitsType = default;
            Optional<int?> maxConcurrentTrials = default;
            Optional<int?> maxTotalTrials = default;
            Optional<TimeSpan?> timeout = default;
            Optional<TimeSpan?> trialTimeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("jobLimitsType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobLimitsType = new JobLimitsType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maxConcurrentTrials"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxConcurrentTrials = null;
                        continue;
                    }
                    maxConcurrentTrials = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxTotalTrials"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxTotalTrials = null;
                        continue;
                    }
                    maxTotalTrials = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("timeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        timeout = null;
                        continue;
                    }
                    timeout = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("trialTimeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        trialTimeout = null;
                        continue;
                    }
                    trialTimeout = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new SweepJobLimits(Optional.ToNullable(jobLimitsType), Optional.ToNullable(maxConcurrentTrials), Optional.ToNullable(maxTotalTrials), Optional.ToNullable(timeout), Optional.ToNullable(trialTimeout));
        }
    }
}
