// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.MachineLearningServices.Models
{
    public partial class DeploymentConfigurationBase : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("endpointComputeType");
            writer.WriteStringValue(EndpointComputeType.ToSerialString());
            if (Optional.IsDefined(AppInsightsEnabled))
            {
                writer.WritePropertyName("appInsightsEnabled");
                writer.WriteBooleanValue(AppInsightsEnabled.Value);
            }
            if (Optional.IsDefined(MaxConcurrentRequestsPerInstance))
            {
                writer.WritePropertyName("maxConcurrentRequestsPerInstance");
                writer.WriteNumberValue(MaxConcurrentRequestsPerInstance.Value);
            }
            if (Optional.IsDefined(MaxQueueWaitMs))
            {
                writer.WritePropertyName("maxQueueWaitMs");
                writer.WriteNumberValue(MaxQueueWaitMs.Value);
            }
            if (Optional.IsDefined(ScoringTimeoutMs))
            {
                writer.WritePropertyName("scoringTimeoutMs");
                writer.WriteNumberValue(ScoringTimeoutMs.Value);
            }
            if (Optional.IsDefined(ContainerResourceRequirements))
            {
                writer.WritePropertyName("containerResourceRequirements");
                writer.WriteObjectValue(ContainerResourceRequirements);
            }
            if (Optional.IsDefined(LivenessProbeRequirements))
            {
                writer.WritePropertyName("livenessProbeRequirements");
                writer.WriteObjectValue(LivenessProbeRequirements);
            }
            writer.WriteEndObject();
        }

        internal static DeploymentConfigurationBase DeserializeDeploymentConfigurationBase(JsonElement element)
        {
            EndpointComputeType endpointComputeType = default;
            Optional<bool> appInsightsEnabled = default;
            Optional<int> maxConcurrentRequestsPerInstance = default;
            Optional<int> maxQueueWaitMs = default;
            Optional<int> scoringTimeoutMs = default;
            Optional<ContainerResourceRequirements> containerResourceRequirements = default;
            Optional<LivenessProbeRequirements> livenessProbeRequirements = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("endpointComputeType"))
                {
                    endpointComputeType = property.Value.GetString().ToEndpointComputeType();
                    continue;
                }
                if (property.NameEquals("appInsightsEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    appInsightsEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maxConcurrentRequestsPerInstance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxConcurrentRequestsPerInstance = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxQueueWaitMs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxQueueWaitMs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scoringTimeoutMs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scoringTimeoutMs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("containerResourceRequirements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    containerResourceRequirements = ContainerResourceRequirements.DeserializeContainerResourceRequirements(property.Value);
                    continue;
                }
                if (property.NameEquals("livenessProbeRequirements"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    livenessProbeRequirements = LivenessProbeRequirements.DeserializeLivenessProbeRequirements(property.Value);
                    continue;
                }
            }
            return new DeploymentConfigurationBase(endpointComputeType, Optional.ToNullable(appInsightsEnabled), Optional.ToNullable(maxConcurrentRequestsPerInstance), Optional.ToNullable(maxQueueWaitMs), Optional.ToNullable(scoringTimeoutMs), containerResourceRequirements.Value, livenessProbeRequirements.Value);
        }
    }
}
