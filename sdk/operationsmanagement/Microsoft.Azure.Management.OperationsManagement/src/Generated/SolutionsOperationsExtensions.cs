// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SolutionsOperations.
    /// </summary>
    public static partial class SolutionsOperationsExtensions
    {
            /// <summary>
            /// Create/Update Solution.
            /// </summary>
            /// <remarks>
            /// Creates or updates the Solution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create OMS Solution.
            /// </param>
            public static Solution CreateOrUpdate(this ISolutionsOperations operations, string resourceGroupName, string solutionName, Solution parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, solutionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create/Update Solution.
            /// </summary>
            /// <remarks>
            /// Creates or updates the Solution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create OMS Solution.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Solution> CreateOrUpdateAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, Solution parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, solutionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a Solution.
            /// </summary>
            /// <remarks>
            /// Patch a Solution. Only updating tags supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            public static Solution Update(this ISolutionsOperations operations, string resourceGroupName, string solutionName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, solutionName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a Solution.
            /// </summary>
            /// <remarks>
            /// Patch a Solution. Only updating tags supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Solution> UpdateAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, solutionName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the solution
            /// </summary>
            /// <remarks>
            /// Deletes the solution in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            public static void Delete(this ISolutionsOperations operations, string resourceGroupName, string solutionName)
            {
                operations.DeleteAsync(resourceGroupName, solutionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the solution
            /// </summary>
            /// <remarks>
            /// Deletes the solution in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, solutionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve solution.
            /// </summary>
            /// <remarks>
            /// Retrieves the user solution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            public static Solution Get(this ISolutionsOperations operations, string resourceGroupName, string solutionName)
            {
                return operations.GetAsync(resourceGroupName, solutionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve solution.
            /// </summary>
            /// <remarks>
            /// Retrieves the user solution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Solution> GetAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, solutionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the solution list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the solution list. It will retrieve both first party and third
            /// party solutions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            public static SolutionPropertiesList ListByResourceGroup(this ISolutionsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the solution list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the solution list. It will retrieve both first party and third
            /// party solutions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SolutionPropertiesList> ListByResourceGroupAsync(this ISolutionsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the solution list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the solution list. It will retrieve both first party and third
            /// party solutions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SolutionPropertiesList ListBySubscription(this ISolutionsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the solution list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the solution list. It will retrieve both first party and third
            /// party solutions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SolutionPropertiesList> ListBySubscriptionAsync(this ISolutionsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create/Update Solution.
            /// </summary>
            /// <remarks>
            /// Creates or updates the Solution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create OMS Solution.
            /// </param>
            public static Solution BeginCreateOrUpdate(this ISolutionsOperations operations, string resourceGroupName, string solutionName, Solution parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, solutionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create/Update Solution.
            /// </summary>
            /// <remarks>
            /// Creates or updates the Solution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create OMS Solution.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Solution> BeginCreateOrUpdateAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, Solution parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, solutionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a Solution.
            /// </summary>
            /// <remarks>
            /// Patch a Solution. Only updating tags supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            public static Solution BeginUpdate(this ISolutionsOperations operations, string resourceGroupName, string solutionName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, solutionName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a Solution.
            /// </summary>
            /// <remarks>
            /// Patch a Solution. Only updating tags supported.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Solution> BeginUpdateAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, solutionName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the solution
            /// </summary>
            /// <remarks>
            /// Deletes the solution in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            public static void BeginDelete(this ISolutionsOperations operations, string resourceGroupName, string solutionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, solutionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the solution
            /// </summary>
            /// <remarks>
            /// Deletes the solution in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='solutionName'>
            /// User Solution Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISolutionsOperations operations, string resourceGroupName, string solutionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, solutionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
