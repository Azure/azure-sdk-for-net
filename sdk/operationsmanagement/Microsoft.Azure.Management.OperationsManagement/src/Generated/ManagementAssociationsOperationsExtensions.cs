// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagementAssociationsOperations.
    /// </summary>
    public static partial class ManagementAssociationsOperationsExtensions
    {
            /// <summary>
            /// Retrieves the ManagementAssociations list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the ManagementAssociations list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ManagementAssociationPropertiesList ListBySubscription(this IManagementAssociationsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the ManagementAssociations list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the ManagementAssociations list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementAssociationPropertiesList> ListBySubscriptionAsync(this IManagementAssociationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create/Update ManagementAssociation.
            /// </summary>
            /// <remarks>
            /// Creates or updates the ManagementAssociation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementAssociationName'>
            /// User ManagementAssociation Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create ManagementAssociation extension.
            /// </param>
            public static ManagementAssociation CreateOrUpdate(this IManagementAssociationsOperations operations, string resourceGroupName, string managementAssociationName, ManagementAssociation parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, managementAssociationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create/Update ManagementAssociation.
            /// </summary>
            /// <remarks>
            /// Creates or updates the ManagementAssociation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementAssociationName'>
            /// User ManagementAssociation Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create ManagementAssociation extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementAssociation> CreateOrUpdateAsync(this IManagementAssociationsOperations operations, string resourceGroupName, string managementAssociationName, ManagementAssociation parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, managementAssociationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the ManagementAssociation
            /// </summary>
            /// <remarks>
            /// Deletes the ManagementAssociation in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementAssociationName'>
            /// User ManagementAssociation Name.
            /// </param>
            public static void Delete(this IManagementAssociationsOperations operations, string resourceGroupName, string managementAssociationName)
            {
                operations.DeleteAsync(resourceGroupName, managementAssociationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the ManagementAssociation
            /// </summary>
            /// <remarks>
            /// Deletes the ManagementAssociation in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementAssociationName'>
            /// User ManagementAssociation Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagementAssociationsOperations operations, string resourceGroupName, string managementAssociationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, managementAssociationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve ManagementAssociation.
            /// </summary>
            /// <remarks>
            /// Retrieves the user ManagementAssociation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementAssociationName'>
            /// User ManagementAssociation Name.
            /// </param>
            public static ManagementAssociation Get(this IManagementAssociationsOperations operations, string resourceGroupName, string managementAssociationName)
            {
                return operations.GetAsync(resourceGroupName, managementAssociationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve ManagementAssociation.
            /// </summary>
            /// <remarks>
            /// Retrieves the user ManagementAssociation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementAssociationName'>
            /// User ManagementAssociation Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementAssociation> GetAsync(this IManagementAssociationsOperations operations, string resourceGroupName, string managementAssociationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, managementAssociationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
