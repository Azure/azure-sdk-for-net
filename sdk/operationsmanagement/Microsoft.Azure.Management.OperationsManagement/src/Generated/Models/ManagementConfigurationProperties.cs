// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationsManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ManagementConfiguration properties supported by the
    /// OperationsManagement resource provider.
    /// </summary>
    public partial class ManagementConfigurationProperties : IResource
    {
        /// <summary>
        /// Initializes a new instance of the ManagementConfigurationProperties
        /// class.
        /// </summary>
        public ManagementConfigurationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagementConfigurationProperties
        /// class.
        /// </summary>
        /// <param name="parentResourceType">The type of the parent
        /// resource.</param>
        /// <param name="parameters">Parameters to run the ARM template</param>
        /// <param name="template">The Json object containing the ARM template
        /// to deploy</param>
        /// <param name="applicationId">The applicationId of the appliance for
        /// this Management.</param>
        /// <param name="provisioningState">The provisioning state for the
        /// ManagementConfiguration.</param>
        public ManagementConfigurationProperties(string parentResourceType, IList<ArmTemplateParameter> parameters, object template, string applicationId = default(string), string provisioningState = default(string))
        {
            ApplicationId = applicationId;
            ParentResourceType = parentResourceType;
            Parameters = parameters;
            ProvisioningState = provisioningState;
            Template = template;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the applicationId of the appliance for this
        /// Management.
        /// </summary>
        [JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the type of the parent resource.
        /// </summary>
        [JsonProperty(PropertyName = "parentResourceType")]
        public string ParentResourceType { get; set; }

        /// <summary>
        /// Gets or sets parameters to run the ARM template
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IList<ArmTemplateParameter> Parameters { get; set; }

        /// <summary>
        /// Gets the provisioning state for the ManagementConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the Json object containing the ARM template to deploy
        /// </summary>
        [JsonProperty(PropertyName = "template")]
        public object Template { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ParentResourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParentResourceType");
            }
            if (Parameters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parameters");
            }
            if (Template == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Template");
            }
        }
    }
}
