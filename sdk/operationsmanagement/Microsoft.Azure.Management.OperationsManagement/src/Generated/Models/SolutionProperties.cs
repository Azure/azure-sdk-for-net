// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationsManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Solution properties supported by the OperationsManagement resource
    /// provider.
    /// </summary>
    public partial class SolutionProperties : IResource
    {
        /// <summary>
        /// Initializes a new instance of the SolutionProperties class.
        /// </summary>
        public SolutionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SolutionProperties class.
        /// </summary>
        /// <param name="workspaceResourceId">The azure resourceId for the
        /// workspace where the solution will be deployed/enabled.</param>
        /// <param name="provisioningState">The provisioning state for the
        /// solution.</param>
        /// <param name="containedResources">The azure resources that will be
        /// contained within the solutions. They will be locked and gets
        /// deleted automatically when the solution is deleted.</param>
        /// <param name="referencedResources">The resources that will be
        /// referenced from this solution. Deleting any of those solution out
        /// of band will break the solution.</param>
        public SolutionProperties(string workspaceResourceId, string provisioningState = default(string), IList<string> containedResources = default(IList<string>), IList<string> referencedResources = default(IList<string>))
        {
            WorkspaceResourceId = workspaceResourceId;
            ProvisioningState = provisioningState;
            ContainedResources = containedResources;
            ReferencedResources = referencedResources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the azure resourceId for the workspace where the
        /// solution will be deployed/enabled.
        /// </summary>
        [JsonProperty(PropertyName = "workspaceResourceId")]
        public string WorkspaceResourceId { get; set; }

        /// <summary>
        /// Gets the provisioning state for the solution.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the azure resources that will be contained within the
        /// solutions. They will be locked and gets deleted automatically when
        /// the solution is deleted.
        /// </summary>
        [JsonProperty(PropertyName = "containedResources")]
        public IList<string> ContainedResources { get; set; }

        /// <summary>
        /// Gets or sets the resources that will be referenced from this
        /// solution. Deleting any of those solution out of band will break the
        /// solution.
        /// </summary>
        [JsonProperty(PropertyName = "referencedResources")]
        public IList<string> ReferencedResources { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WorkspaceResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WorkspaceResourceId");
            }
        }
    }
}
