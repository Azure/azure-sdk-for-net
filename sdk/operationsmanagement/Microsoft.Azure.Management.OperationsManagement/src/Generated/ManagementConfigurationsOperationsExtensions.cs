// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationsManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagementConfigurationsOperations.
    /// </summary>
    public static partial class ManagementConfigurationsOperationsExtensions
    {
            /// <summary>
            /// Retrieves the ManagementConfigurations list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the ManagementConfigurations list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ManagementConfigurationPropertiesList ListBySubscription(this IManagementConfigurationsOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the ManagementConfigurations list for the subscription
            /// </summary>
            /// <remarks>
            /// Retrieves the ManagementConfigurations list.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementConfigurationPropertiesList> ListBySubscriptionAsync(this IManagementConfigurationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create/Update ManagementConfiguration.
            /// </summary>
            /// <remarks>
            /// Creates or updates the ManagementConfiguration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementConfigurationName'>
            /// User Management Configuration Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create OMS Solution.
            /// </param>
            public static ManagementConfiguration CreateOrUpdate(this IManagementConfigurationsOperations operations, string resourceGroupName, string managementConfigurationName, ManagementConfiguration parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, managementConfigurationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create/Update ManagementConfiguration.
            /// </summary>
            /// <remarks>
            /// Creates or updates the ManagementConfiguration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementConfigurationName'>
            /// User Management Configuration Name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create OMS Solution.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementConfiguration> CreateOrUpdateAsync(this IManagementConfigurationsOperations operations, string resourceGroupName, string managementConfigurationName, ManagementConfiguration parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, managementConfigurationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the ManagementConfiguration
            /// </summary>
            /// <remarks>
            /// Deletes the ManagementConfiguration in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementConfigurationName'>
            /// User Management Configuration Name.
            /// </param>
            public static void Delete(this IManagementConfigurationsOperations operations, string resourceGroupName, string managementConfigurationName)
            {
                operations.DeleteAsync(resourceGroupName, managementConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the ManagementConfiguration
            /// </summary>
            /// <remarks>
            /// Deletes the ManagementConfiguration in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementConfigurationName'>
            /// User Management Configuration Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IManagementConfigurationsOperations operations, string resourceGroupName, string managementConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, managementConfigurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve ManagementConfiguration.
            /// </summary>
            /// <remarks>
            /// Retrieves the user ManagementConfiguration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementConfigurationName'>
            /// User Management Configuration Name.
            /// </param>
            public static ManagementConfiguration Get(this IManagementConfigurationsOperations operations, string resourceGroupName, string managementConfigurationName)
            {
                return operations.GetAsync(resourceGroupName, managementConfigurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve ManagementConfiguration.
            /// </summary>
            /// <remarks>
            /// Retrieves the user ManagementConfiguration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='managementConfigurationName'>
            /// User Management Configuration Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementConfiguration> GetAsync(this IManagementConfigurationsOperations operations, string resourceGroupName, string managementConfigurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, managementConfigurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
