// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.EventGrid.Models
{
    public partial class EventSubscriptionFilter : IUtf8JsonSerializable, IModelJsonSerializable<EventSubscriptionFilter>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<EventSubscriptionFilter>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<EventSubscriptionFilter>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<EventSubscriptionFilter>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(SubjectBeginsWith))
            {
                writer.WritePropertyName("subjectBeginsWith"u8);
                writer.WriteStringValue(SubjectBeginsWith);
            }
            if (Optional.IsDefined(SubjectEndsWith))
            {
                writer.WritePropertyName("subjectEndsWith"u8);
                writer.WriteStringValue(SubjectEndsWith);
            }
            if (Optional.IsCollectionDefined(IncludedEventTypes))
            {
                writer.WritePropertyName("includedEventTypes"u8);
                writer.WriteStartArray();
                foreach (var item in IncludedEventTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsSubjectCaseSensitive))
            {
                writer.WritePropertyName("isSubjectCaseSensitive"u8);
                writer.WriteBooleanValue(IsSubjectCaseSensitive.Value);
            }
            if (Optional.IsDefined(IsAdvancedFilteringOnArraysEnabled))
            {
                writer.WritePropertyName("enableAdvancedFilteringOnArrays"u8);
                writer.WriteBooleanValue(IsAdvancedFilteringOnArraysEnabled.Value);
            }
            if (Optional.IsCollectionDefined(AdvancedFilters))
            {
                writer.WritePropertyName("advancedFilters"u8);
                writer.WriteStartArray();
                foreach (var item in AdvancedFilters)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<AdvancedFilter>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static EventSubscriptionFilter DeserializeEventSubscriptionFilter(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> subjectBeginsWith = default;
            Optional<string> subjectEndsWith = default;
            Optional<IList<string>> includedEventTypes = default;
            Optional<bool> isSubjectCaseSensitive = default;
            Optional<bool> enableAdvancedFilteringOnArrays = default;
            Optional<IList<AdvancedFilter>> advancedFilters = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("subjectBeginsWith"u8))
                {
                    subjectBeginsWith = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subjectEndsWith"u8))
                {
                    subjectEndsWith = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("includedEventTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    includedEventTypes = array;
                    continue;
                }
                if (property.NameEquals("isSubjectCaseSensitive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSubjectCaseSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableAdvancedFilteringOnArrays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAdvancedFilteringOnArrays = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("advancedFilters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdvancedFilter> array = new List<AdvancedFilter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AdvancedFilter.DeserializeAdvancedFilter(item));
                    }
                    advancedFilters = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new EventSubscriptionFilter(subjectBeginsWith.Value, subjectEndsWith.Value, Optional.ToList(includedEventTypes), Optional.ToNullable(isSubjectCaseSensitive), Optional.ToNullable(enableAdvancedFilteringOnArrays), Optional.ToList(advancedFilters), rawData);
        }

        EventSubscriptionFilter IModelJsonSerializable<EventSubscriptionFilter>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<EventSubscriptionFilter>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeEventSubscriptionFilter(doc.RootElement, options);
        }

        BinaryData IModelSerializable<EventSubscriptionFilter>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<EventSubscriptionFilter>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        EventSubscriptionFilter IModelSerializable<EventSubscriptionFilter>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<EventSubscriptionFilter>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeEventSubscriptionFilter(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="EventSubscriptionFilter"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="EventSubscriptionFilter"/> to convert. </param>
        public static implicit operator RequestContent(EventSubscriptionFilter model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="EventSubscriptionFilter"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator EventSubscriptionFilter(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeEventSubscriptionFilter(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
