// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventGrid.Models
{
    public partial class EventSubscriptionFilter : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SubjectBeginsWith))
            {
                writer.WritePropertyName("subjectBeginsWith"u8);
                writer.WriteStringValue(SubjectBeginsWith);
            }
            if (Optional.IsDefined(SubjectEndsWith))
            {
                writer.WritePropertyName("subjectEndsWith"u8);
                writer.WriteStringValue(SubjectEndsWith);
            }
            if (Optional.IsCollectionDefined(IncludedEventTypes))
            {
                writer.WritePropertyName("includedEventTypes"u8);
                writer.WriteStartArray();
                foreach (var item in IncludedEventTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsSubjectCaseSensitive))
            {
                writer.WritePropertyName("isSubjectCaseSensitive"u8);
                writer.WriteBooleanValue(IsSubjectCaseSensitive.Value);
            }
            if (Optional.IsDefined(IsAdvancedFilteringOnArraysEnabled))
            {
                writer.WritePropertyName("enableAdvancedFilteringOnArrays"u8);
                writer.WriteBooleanValue(IsAdvancedFilteringOnArraysEnabled.Value);
            }
            if (Optional.IsCollectionDefined(AdvancedFilters))
            {
                writer.WritePropertyName("advancedFilters"u8);
                writer.WriteStartArray();
                foreach (var item in AdvancedFilters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static EventSubscriptionFilter DeserializeEventSubscriptionFilter(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> subjectBeginsWith = default;
            Optional<string> subjectEndsWith = default;
            Optional<IList<string>> includedEventTypes = default;
            Optional<bool> isSubjectCaseSensitive = default;
            Optional<bool> enableAdvancedFilteringOnArrays = default;
            Optional<IList<AdvancedFilter>> advancedFilters = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("subjectBeginsWith"u8))
                {
                    subjectBeginsWith = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subjectEndsWith"u8))
                {
                    subjectEndsWith = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("includedEventTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    includedEventTypes = array;
                    continue;
                }
                if (property.NameEquals("isSubjectCaseSensitive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSubjectCaseSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableAdvancedFilteringOnArrays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAdvancedFilteringOnArrays = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("advancedFilters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdvancedFilter> array = new List<AdvancedFilter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AdvancedFilter.DeserializeAdvancedFilter(item));
                    }
                    advancedFilters = array;
                    continue;
                }
            }
            return new EventSubscriptionFilter(subjectBeginsWith.Value, subjectEndsWith.Value, Optional.ToList(includedEventTypes), Optional.ToNullable(isSubjectCaseSensitive), Optional.ToNullable(enableAdvancedFilteringOnArrays), Optional.ToList(advancedFilters));
        }
    }
}
