// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventGrid.Models
{
    public partial class QueueInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ReceiveLockDurationInSeconds))
            {
                writer.WritePropertyName("receiveLockDurationInSeconds"u8);
                writer.WriteNumberValue(ReceiveLockDurationInSeconds.Value);
            }
            if (Core.Optional.IsDefined(MaxDeliveryCount))
            {
                writer.WritePropertyName("maxDeliveryCount"u8);
                writer.WriteNumberValue(MaxDeliveryCount.Value);
            }
            if (Core.Optional.IsDefined(DeadLetterDestinationWithResourceIdentity))
            {
                writer.WritePropertyName("deadLetterDestinationWithResourceIdentity"u8);
                writer.WriteObjectValue(DeadLetterDestinationWithResourceIdentity);
            }
            if (Core.Optional.IsDefined(EventTimeToLive))
            {
                writer.WritePropertyName("eventTimeToLive"u8);
                writer.WriteStringValue(EventTimeToLive.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static QueueInfo DeserializeQueueInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int> receiveLockDurationInSeconds = default;
            Core.Optional<int> maxDeliveryCount = default;
            Core.Optional<DeadLetterWithResourceIdentity> deadLetterDestinationWithResourceIdentity = default;
            Core.Optional<TimeSpan> eventTimeToLive = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("receiveLockDurationInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    receiveLockDurationInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxDeliveryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxDeliveryCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("deadLetterDestinationWithResourceIdentity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deadLetterDestinationWithResourceIdentity = DeadLetterWithResourceIdentity.DeserializeDeadLetterWithResourceIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("eventTimeToLive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eventTimeToLive = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new QueueInfo(Core.Optional.ToNullable(receiveLockDurationInSeconds), Core.Optional.ToNullable(maxDeliveryCount), deadLetterDestinationWithResourceIdentity.Value, Core.Optional.ToNullable(eventTimeToLive));
        }
    }
}
