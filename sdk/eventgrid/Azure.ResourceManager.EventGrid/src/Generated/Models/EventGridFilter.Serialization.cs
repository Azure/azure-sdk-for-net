// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventGrid.Models
{
    public partial class EventGridFilter : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("operatorType"u8);
            writer.WriteStringValue(OperatorType.ToString());
            if (Optional.IsDefined(Key))
            {
                writer.WritePropertyName("key"u8);
                writer.WriteStringValue(Key);
            }
            writer.WriteEndObject();
        }

        internal static EventGridFilter DeserializeEventGridFilter(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("operatorType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "BoolEquals": return BoolEqualsFilter.DeserializeBoolEqualsFilter(element);
                    case "IsNotNull": return IsNotNullFilter.DeserializeIsNotNullFilter(element);
                    case "IsNullOrUndefined": return IsNullOrUndefinedFilter.DeserializeIsNullOrUndefinedFilter(element);
                    case "NumberGreaterThan": return NumberGreaterThanFilter.DeserializeNumberGreaterThanFilter(element);
                    case "NumberGreaterThanOrEquals": return NumberGreaterThanOrEqualsFilter.DeserializeNumberGreaterThanOrEqualsFilter(element);
                    case "NumberIn": return NumberInFilter.DeserializeNumberInFilter(element);
                    case "NumberInRange": return NumberInRangeFilter.DeserializeNumberInRangeFilter(element);
                    case "NumberLessThan": return NumberLessThanFilter.DeserializeNumberLessThanFilter(element);
                    case "NumberLessThanOrEquals": return NumberLessThanOrEqualsFilter.DeserializeNumberLessThanOrEqualsFilter(element);
                    case "NumberNotIn": return NumberNotInFilter.DeserializeNumberNotInFilter(element);
                    case "NumberNotInRange": return NumberNotInRangeFilter.DeserializeNumberNotInRangeFilter(element);
                    case "StringBeginsWith": return StringBeginsWithFilter.DeserializeStringBeginsWithFilter(element);
                    case "StringContains": return StringContainsFilter.DeserializeStringContainsFilter(element);
                    case "StringEndsWith": return StringEndsWithFilter.DeserializeStringEndsWithFilter(element);
                    case "StringIn": return StringInFilter.DeserializeStringInFilter(element);
                    case "StringNotBeginsWith": return StringNotBeginsWithFilter.DeserializeStringNotBeginsWithFilter(element);
                    case "StringNotContains": return StringNotContainsFilter.DeserializeStringNotContainsFilter(element);
                    case "StringNotEndsWith": return StringNotEndsWithFilter.DeserializeStringNotEndsWithFilter(element);
                    case "StringNotIn": return StringNotInFilter.DeserializeStringNotInFilter(element);
                }
            }
            return UnknownFilter.DeserializeUnknownFilter(element);
        }
    }
}
