// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EventGrid.Models
{
    /// <summary>
    /// The state of the Customer Managed Key (CMK) encryption. This is a read-only property which determines if the associated key is active and valid and used
    /// actively by runtime as expected. When the associated CMK becomes invalid (e.g., if it is deleted, or if versioned CMK is not current anymore), Event Grid
    /// Service will set this state to disabled to indicate that this key is not valid anymore and requires action from user.
    /// </summary>
    public readonly partial struct KeyEncryptionKeyStatus : IEquatable<KeyEncryptionKeyStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="KeyEncryptionKeyStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KeyEncryptionKeyStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string RevokedValue = "Revoked";

        /// <summary> Active. </summary>
        public static KeyEncryptionKeyStatus Active { get; } = new KeyEncryptionKeyStatus(ActiveValue);
        /// <summary> Revoked. </summary>
        public static KeyEncryptionKeyStatus Revoked { get; } = new KeyEncryptionKeyStatus(RevokedValue);
        /// <summary> Determines if two <see cref="KeyEncryptionKeyStatus"/> values are the same. </summary>
        public static bool operator ==(KeyEncryptionKeyStatus left, KeyEncryptionKeyStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KeyEncryptionKeyStatus"/> values are not the same. </summary>
        public static bool operator !=(KeyEncryptionKeyStatus left, KeyEncryptionKeyStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="KeyEncryptionKeyStatus"/>. </summary>
        public static implicit operator KeyEncryptionKeyStatus(string value) => new KeyEncryptionKeyStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KeyEncryptionKeyStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KeyEncryptionKeyStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
