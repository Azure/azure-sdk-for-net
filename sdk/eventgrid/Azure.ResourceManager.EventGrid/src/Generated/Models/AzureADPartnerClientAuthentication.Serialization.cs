// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.EventGrid.Models
{
    public partial class AzureADPartnerClientAuthentication : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("clientAuthenticationType"u8);
            writer.WriteStringValue(ClientAuthenticationType.ToString());
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(AzureActiveDirectoryTenantId))
            {
                writer.WritePropertyName("azureActiveDirectoryTenantId"u8);
                writer.WriteStringValue(AzureActiveDirectoryTenantId);
            }
            if (Optional.IsDefined(AzureActiveDirectoryApplicationIdOrUri))
            {
                writer.WritePropertyName("azureActiveDirectoryApplicationIdOrUri"u8);
                writer.WriteStringValue(AzureActiveDirectoryApplicationIdOrUri.AbsoluteUri);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static AzureADPartnerClientAuthentication DeserializeAzureADPartnerClientAuthentication(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            PartnerClientAuthenticationType clientAuthenticationType = default;
            Optional<string> azureActiveDirectoryTenantId = default;
            Optional<Uri> azureActiveDirectoryApplicationIdOrUri = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientAuthenticationType"u8))
                {
                    clientAuthenticationType = new PartnerClientAuthenticationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("azureActiveDirectoryTenantId"u8))
                        {
                            azureActiveDirectoryTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("azureActiveDirectoryApplicationIdOrUri"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            azureActiveDirectoryApplicationIdOrUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AzureADPartnerClientAuthentication(clientAuthenticationType, azureActiveDirectoryTenantId.Value, azureActiveDirectoryApplicationIdOrUri.Value);
        }
    }
}
