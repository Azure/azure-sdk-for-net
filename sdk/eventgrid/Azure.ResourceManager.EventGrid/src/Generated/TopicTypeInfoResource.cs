// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.EventGrid.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.EventGrid
{
    /// <summary>
    /// A Class representing a TopicTypeInfo along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="TopicTypeInfoResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetTopicTypeInfoResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource" /> using the GetTopicTypeInfo method.
    /// </summary>
    public partial class TopicTypeInfoResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="TopicTypeInfoResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string topicTypeName)
        {
            var resourceId = $"/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _topicTypeInfoTopicTypesClientDiagnostics;
        private readonly TopicTypesRestOperations _topicTypeInfoTopicTypesRestClient;
        private readonly TopicTypeInfoData _data;

        /// <summary> Initializes a new instance of the <see cref="TopicTypeInfoResource"/> class for mocking. </summary>
        protected TopicTypeInfoResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "TopicTypeInfoResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal TopicTypeInfoResource(ArmClient client, TopicTypeInfoData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="TopicTypeInfoResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TopicTypeInfoResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _topicTypeInfoTopicTypesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.EventGrid", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string topicTypeInfoTopicTypesApiVersion);
            _topicTypeInfoTopicTypesRestClient = new TopicTypesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, topicTypeInfoTopicTypesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.EventGrid/topicTypes";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual TopicTypeInfoData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get information about a topic type.
        /// Request Path: /providers/Microsoft.EventGrid/topicTypes/{topicTypeName}
        /// Operation Id: TopicTypes_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TopicTypeInfoResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _topicTypeInfoTopicTypesClientDiagnostics.CreateScope("TopicTypeInfoResource.Get");
            scope.Start();
            try
            {
                var response = await _topicTypeInfoTopicTypesRestClient.GetAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TopicTypeInfoResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information about a topic type.
        /// Request Path: /providers/Microsoft.EventGrid/topicTypes/{topicTypeName}
        /// Operation Id: TopicTypes_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TopicTypeInfoResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _topicTypeInfoTopicTypesClientDiagnostics.CreateScope("TopicTypeInfoResource.Get");
            scope.Start();
            try
            {
                var response = _topicTypeInfoTopicTypesRestClient.Get(Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TopicTypeInfoResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List event types for a topic type.
        /// Request Path: /providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes
        /// Operation Id: TopicTypes_ListEventTypes
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="EventType" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<EventType> GetEventTypesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<EventType>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _topicTypeInfoTopicTypesClientDiagnostics.CreateScope("TopicTypeInfoResource.GetEventTypes");
                scope.Start();
                try
                {
                    var response = await _topicTypeInfoTopicTypesRestClient.ListEventTypesAsync(Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// List event types for a topic type.
        /// Request Path: /providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes
        /// Operation Id: TopicTypes_ListEventTypes
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="EventType" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<EventType> GetEventTypes(CancellationToken cancellationToken = default)
        {
            Page<EventType> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _topicTypeInfoTopicTypesClientDiagnostics.CreateScope("TopicTypeInfoResource.GetEventTypes");
                scope.Start();
                try
                {
                    var response = _topicTypeInfoTopicTypesRestClient.ListEventTypes(Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
