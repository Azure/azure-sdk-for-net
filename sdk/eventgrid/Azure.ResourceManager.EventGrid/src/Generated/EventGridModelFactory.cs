// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.EventGrid;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.EventGrid.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class EventGridModelFactory
    {
        /// <summary> Initializes a new instance of PartnerNamespaceChannelData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="channelType"> The type of the event channel which represents the direction flow of events. </param>
        /// <param name="partnerTopicInfo"> This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel. </param>
        /// <param name="messageForActivation"> Context or helpful message that can be used during the approval process by the subscriber. </param>
        /// <param name="provisioningState"> Provisioning state of the channel. </param>
        /// <param name="readinessState"> The readiness state of the corresponding partner topic. </param>
        /// <param name="expireOnIfNotActivated">
        /// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
        /// the channel and corresponding partner topic are deleted.
        /// </param>
        /// <returns> A new <see cref="EventGrid.PartnerNamespaceChannelData"/> instance for mocking. </returns>
        public static PartnerNamespaceChannelData PartnerNamespaceChannelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PartnerNamespaceChannelType? channelType = null, PartnerTopicInfo partnerTopicInfo = null, string messageForActivation = null, PartnerNamespaceChannelProvisioningState? provisioningState = null, PartnerTopicReadinessState? readinessState = null, DateTimeOffset? expireOnIfNotActivated = null)
        {
            return new PartnerNamespaceChannelData(id, name, resourceType, systemData, channelType, partnerTopicInfo, messageForActivation, provisioningState, readinessState, expireOnIfNotActivated);
        }

        /// <summary> Initializes a new instance of PartnerTopicInfo. </summary>
        /// <param name="azureSubscriptionId">
        /// Azure subscription ID of the subscriber. The partner topic associated with the channel will be
        /// created under this Azure subscription.
        /// </param>
        /// <param name="resourceGroupName">
        /// Azure Resource Group of the subscriber. The partner topic associated with the channel will be
        /// created under this resource group.
        /// </param>
        /// <param name="name"> Name of the partner topic associated with the channel. </param>
        /// <param name="eventTypeInfo">
        /// Event Type Information for the partner topic. This information is provided by the publisher and can be used by the 
        /// subscriber to view different types of events that are published.
        /// </param>
        /// <param name="source">
        /// The source information is provided by the publisher to determine the scope or context from which the events
        /// are originating. This information can be used by the subscriber during the approval process of the
        /// created partner topic.
        /// </param>
        /// <returns> A new <see cref="Models.PartnerTopicInfo"/> instance for mocking. </returns>
        public static PartnerTopicInfo PartnerTopicInfo(Guid? azureSubscriptionId = null, string resourceGroupName = null, string name = null, PartnerTopicEventTypeInfo eventTypeInfo = null, string source = null)
        {
            return new PartnerTopicInfo(azureSubscriptionId, resourceGroupName, name, eventTypeInfo, source);
        }

        /// <summary> Initializes a new instance of PartnerTopicEventTypeInfo. </summary>
        /// <param name="kind"> The kind of event type used. </param>
        /// <param name="inlineEventTypes">
        /// A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
        /// An example of a valid inline event name is &quot;Contoso.OrderCreated&quot;.
        /// The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
        /// </param>
        /// <returns> A new <see cref="Models.PartnerTopicEventTypeInfo"/> instance for mocking. </returns>
        public static PartnerTopicEventTypeInfo PartnerTopicEventTypeInfo(EventDefinitionKind? kind = null, IDictionary<string, InlineEventProperties> inlineEventTypes = null)
        {
            inlineEventTypes ??= new Dictionary<string, InlineEventProperties>();

            return new PartnerTopicEventTypeInfo(kind, inlineEventTypes);
        }

        /// <summary> Initializes a new instance of InlineEventProperties. </summary>
        /// <param name="description"> The description for the inline event. </param>
        /// <param name="displayName"> The displayName for the inline event. </param>
        /// <param name="documentationUri"> The documentationUrl for the inline event. </param>
        /// <param name="dataSchemaUri"> The dataSchemaUrl for the inline event. </param>
        /// <returns> A new <see cref="Models.InlineEventProperties"/> instance for mocking. </returns>
        public static InlineEventProperties InlineEventProperties(string description = null, string displayName = null, Uri documentationUri = null, Uri dataSchemaUri = null)
        {
            return new InlineEventProperties(description, displayName, documentationUri, dataSchemaUri);
        }

        /// <summary> Initializes a new instance of EventSubscriptionFullUri. </summary>
        /// <param name="endpoint"> The URL that represents the endpoint of the destination of an event subscription. </param>
        /// <returns> A new <see cref="Models.EventSubscriptionFullUri"/> instance for mocking. </returns>
        public static EventSubscriptionFullUri EventSubscriptionFullUri(Uri endpoint = null)
        {
            return new EventSubscriptionFullUri(endpoint);
        }

        /// <summary> Initializes a new instance of EventGridDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity information for the Event Grid Domain resource. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections. </param>
        /// <param name="provisioningState"> Provisioning state of the Event Grid Domain Resource. </param>
        /// <param name="endpoint"> Endpoint for the Event Grid Domain Resource which is used for publishing the events. </param>
        /// <param name="inputSchema"> This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource. </param>
        /// <param name="inputSchemaMapping">
        /// Information about the InputSchemaMapping which specified the info about mapping event payload.
        /// Please note <see cref="EventGridInputSchemaMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventGridJsonInputSchemaMapping"/>.
        /// </param>
        /// <param name="metricResourceId"> Metric resource id for the Event Grid Domain Resource. </param>
        /// <param name="publicNetworkAccess">
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref=&quot;P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules&quot; /&gt;
        /// </param>
        /// <param name="inboundIPRules"> This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. </param>
        /// <param name="isLocalAuthDisabled"> This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. </param>
        /// <param name="autoCreateTopicWithFirstSubscription">
        /// This Boolean is used to specify the creation mechanism for &apos;all&apos; the Event Grid Domain Topics associated with this Event Grid Domain resource.
        /// In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
        /// When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
        /// created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
        /// by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
        /// flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
        /// domain topic on demand if needed.
        /// </param>
        /// <param name="autoDeleteTopicWithLastSubscription">
        /// This Boolean is used to specify the deletion mechanism for &apos;all&apos; the Event Grid Domain Topics associated with this Event Grid Domain resource.
        /// In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
        /// When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
        /// of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
        /// (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
        /// control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
        /// resources by the user.
        /// </param>
        /// <param name="dataResidencyBoundary"> Data Residency Boundary of the resource. </param>
        /// <returns> A new <see cref="EventGrid.EventGridDomainData"/> instance for mocking. </returns>
        public static EventGridDomainData EventGridDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, IEnumerable<EventGridPrivateEndpointConnectionData> privateEndpointConnections = null, EventGridDomainProvisioningState? provisioningState = null, Uri endpoint = null, EventGridInputSchema? inputSchema = null, EventGridInputSchemaMapping inputSchemaMapping = null, string metricResourceId = null, EventGridPublicNetworkAccess? publicNetworkAccess = null, IEnumerable<EventGridInboundIPRule> inboundIPRules = null, bool? isLocalAuthDisabled = null, bool? autoCreateTopicWithFirstSubscription = null, bool? autoDeleteTopicWithLastSubscription = null, DataResidencyBoundary? dataResidencyBoundary = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<EventGridPrivateEndpointConnectionData>();
            inboundIPRules ??= new List<EventGridInboundIPRule>();

            return new EventGridDomainData(id, name, resourceType, systemData, tags, location, identity, privateEndpointConnections?.ToList(), provisioningState, endpoint, inputSchema, inputSchemaMapping, metricResourceId, publicNetworkAccess, inboundIPRules?.ToList(), isLocalAuthDisabled, autoCreateTopicWithFirstSubscription, autoDeleteTopicWithLastSubscription, dataResidencyBoundary);
        }

        /// <summary> Initializes a new instance of EventGridPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateEndpointId"> The Private Endpoint resource for this Connection. </param>
        /// <param name="groupIds"> GroupIds from the private link service resource. </param>
        /// <param name="connectionState"> Details about the state of the connection. </param>
        /// <param name="provisioningState"> Provisioning state of the Private Endpoint Connection. </param>
        /// <returns> A new <see cref="EventGrid.EventGridPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static EventGridPrivateEndpointConnectionData EventGridPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier privateEndpointId = null, IEnumerable<string> groupIds = null, EventGridPrivateEndpointConnectionState connectionState = null, EventGridResourceProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new EventGridPrivateEndpointConnectionData(id, name, resourceType, systemData, ResourceManagerModelFactory.WritableSubResource(privateEndpointId), groupIds?.ToList(), connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of EventGridPrivateEndpointConnectionState. </summary>
        /// <param name="status"> Status of the connection. </param>
        /// <param name="description"> Description of the connection state. </param>
        /// <param name="actionsRequired"> Actions required (if any). </param>
        /// <returns> A new <see cref="Models.EventGridPrivateEndpointConnectionState"/> instance for mocking. </returns>
        public static EventGridPrivateEndpointConnectionState EventGridPrivateEndpointConnectionState(EventGridPrivateEndpointPersistedConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new EventGridPrivateEndpointConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of EventGridInputSchemaMapping. </summary>
        /// <param name="inputSchemaMappingType"> Type of the custom mapping. </param>
        /// <returns> A new <see cref="Models.EventGridInputSchemaMapping"/> instance for mocking. </returns>
        public static EventGridInputSchemaMapping EventGridInputSchemaMapping(string inputSchemaMappingType = null)
        {
            return new UnknownInputSchemaMapping(inputSchemaMappingType);
        }

        /// <summary> Initializes a new instance of EventGridInboundIPRule. </summary>
        /// <param name="ipMask"> IP Address in CIDR notation e.g., 10.0.0.0/8. </param>
        /// <param name="action"> Action to perform based on the match or no match of the IpMask. </param>
        /// <returns> A new <see cref="Models.EventGridInboundIPRule"/> instance for mocking. </returns>
        public static EventGridInboundIPRule EventGridInboundIPRule(string ipMask = null, EventGridIPActionType? action = null)
        {
            return new EventGridInboundIPRule(ipMask, action);
        }

        /// <summary> Initializes a new instance of EventGridDomainSharedAccessKeys. </summary>
        /// <param name="key1"> Shared access key1 for the domain. </param>
        /// <param name="key2"> Shared access key2 for the domain. </param>
        /// <returns> A new <see cref="Models.EventGridDomainSharedAccessKeys"/> instance for mocking. </returns>
        public static EventGridDomainSharedAccessKeys EventGridDomainSharedAccessKeys(string key1 = null, string key2 = null)
        {
            return new EventGridDomainSharedAccessKeys(key1, key2);
        }

        /// <summary> Initializes a new instance of DomainTopicData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of the domain topic. </param>
        /// <returns> A new <see cref="EventGrid.DomainTopicData"/> instance for mocking. </returns>
        public static DomainTopicData DomainTopicData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DomainTopicProvisioningState? provisioningState = null)
        {
            return new DomainTopicData(id, name, resourceType, systemData, provisioningState);
        }

        /// <summary> Initializes a new instance of DeliveryAttributeMapping. </summary>
        /// <param name="name"> Name of the delivery attribute or header. </param>
        /// <param name="mappingType"> Type of the delivery attribute or header name. </param>
        /// <returns> A new <see cref="Models.DeliveryAttributeMapping"/> instance for mocking. </returns>
        public static DeliveryAttributeMapping DeliveryAttributeMapping(string name = null, string mappingType = null)
        {
            return new UnknownDeliveryAttributeMapping(name, mappingType);
        }

        /// <summary> Initializes a new instance of EventGridSubscriptionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="topic"> Name of the topic of the event subscription. </param>
        /// <param name="provisioningState"> Provisioning state of the event subscription. </param>
        /// <param name="destination">
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid&apos;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// Please note <see cref="EventSubscriptionDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFunctionEventSubscriptionDestination"/>, <see cref="EventHubEventSubscriptionDestination"/>, <see cref="HybridConnectionEventSubscriptionDestination"/>, <see cref="ServiceBusQueueEventSubscriptionDestination"/>, <see cref="ServiceBusTopicEventSubscriptionDestination"/>, <see cref="StorageQueueEventSubscriptionDestination"/> and <see cref="WebHookEventSubscriptionDestination"/>.
        /// </param>
        /// <param name="deliveryWithResourceIdentity">
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </param>
        /// <param name="filter"> Information about the filter for the event subscription. </param>
        /// <param name="labels"> List of user defined labels. </param>
        /// <param name="expireOn"> Expiration time of the event subscription. </param>
        /// <param name="eventDeliverySchema"> The event delivery schema for the event subscription. </param>
        /// <param name="retryPolicy"> The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. </param>
        /// <param name="deadLetterDestination">
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its&apos; destination is sent to the dead letter destination.
        /// Uses Azure Event Grid&apos;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// Please note <see cref="DeadLetterDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StorageBlobDeadLetterDestination"/>.
        /// </param>
        /// <param name="deadLetterWithResourceIdentity">
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its&apos; destination is sent to the dead letter destination.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </param>
        /// <returns> A new <see cref="EventGrid.EventGridSubscriptionData"/> instance for mocking. </returns>
        public static EventGridSubscriptionData EventGridSubscriptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string topic = null, EventSubscriptionProvisioningState? provisioningState = null, EventSubscriptionDestination destination = null, DeliveryWithResourceIdentity deliveryWithResourceIdentity = null, EventSubscriptionFilter filter = null, IEnumerable<string> labels = null, DateTimeOffset? expireOn = null, EventDeliverySchema? eventDeliverySchema = null, EventSubscriptionRetryPolicy retryPolicy = null, DeadLetterDestination deadLetterDestination = null, DeadLetterWithResourceIdentity deadLetterWithResourceIdentity = null)
        {
            labels ??= new List<string>();

            return new EventGridSubscriptionData(id, name, resourceType, systemData, topic, provisioningState, destination, deliveryWithResourceIdentity, filter, labels?.ToList(), expireOn, eventDeliverySchema, retryPolicy, deadLetterDestination, deadLetterWithResourceIdentity);
        }

        /// <summary> Initializes a new instance of EventSubscriptionDestination. </summary>
        /// <param name="endpointType"> Type of the endpoint for the event subscription destination. </param>
        /// <returns> A new <see cref="Models.EventSubscriptionDestination"/> instance for mocking. </returns>
        public static EventSubscriptionDestination EventSubscriptionDestination(string endpointType = null)
        {
            return new UnknownEventSubscriptionDestination(endpointType);
        }

        /// <summary> Initializes a new instance of DeliveryWithResourceIdentity. </summary>
        /// <param name="identity"> The identity to use when delivering events. </param>
        /// <param name="destination">
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid&apos;s identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// Please note <see cref="EventSubscriptionDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFunctionEventSubscriptionDestination"/>, <see cref="EventHubEventSubscriptionDestination"/>, <see cref="HybridConnectionEventSubscriptionDestination"/>, <see cref="ServiceBusQueueEventSubscriptionDestination"/>, <see cref="ServiceBusTopicEventSubscriptionDestination"/>, <see cref="StorageQueueEventSubscriptionDestination"/> and <see cref="WebHookEventSubscriptionDestination"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DeliveryWithResourceIdentity"/> instance for mocking. </returns>
        public static DeliveryWithResourceIdentity DeliveryWithResourceIdentity(EventSubscriptionIdentity identity = null, EventSubscriptionDestination destination = null)
        {
            return new DeliveryWithResourceIdentity(identity, destination);
        }

        /// <summary> Initializes a new instance of EventSubscriptionIdentity. </summary>
        /// <param name="identityType"> The type of managed identity used. The type &apos;SystemAssigned, UserAssigned&apos; includes both an implicitly created identity and a set of user-assigned identities. The type &apos;None&apos; will remove any identity. </param>
        /// <param name="userAssignedIdentity"> The user identity associated with the resource. </param>
        /// <returns> A new <see cref="Models.EventSubscriptionIdentity"/> instance for mocking. </returns>
        public static EventSubscriptionIdentity EventSubscriptionIdentity(EventSubscriptionIdentityType? identityType = null, string userAssignedIdentity = null)
        {
            return new EventSubscriptionIdentity(identityType, userAssignedIdentity);
        }

        /// <summary> Initializes a new instance of EventSubscriptionFilter. </summary>
        /// <param name="subjectBeginsWith">
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </param>
        /// <param name="subjectEndsWith">
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </param>
        /// <param name="includedEventTypes"> A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null. </param>
        /// <param name="isSubjectCaseSensitive">
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </param>
        /// <param name="isAdvancedFilteringOnArraysEnabled"> Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. </param>
        /// <param name="advancedFilters">
        /// An array of advanced filters that are used for filtering event subscriptions.
        /// Please note <see cref="AdvancedFilter"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BoolEqualsAdvancedFilter"/>, <see cref="IsNotNullAdvancedFilter"/>, <see cref="IsNullOrUndefinedAdvancedFilter"/>, <see cref="NumberGreaterThanAdvancedFilter"/>, <see cref="NumberGreaterThanOrEqualsAdvancedFilter"/>, <see cref="NumberInAdvancedFilter"/>, <see cref="NumberInRangeAdvancedFilter"/>, <see cref="NumberLessThanAdvancedFilter"/>, <see cref="NumberLessThanOrEqualsAdvancedFilter"/>, <see cref="NumberNotInAdvancedFilter"/>, <see cref="NumberNotInRangeAdvancedFilter"/>, <see cref="StringBeginsWithAdvancedFilter"/>, <see cref="StringContainsAdvancedFilter"/>, <see cref="StringEndsWithAdvancedFilter"/>, <see cref="StringInAdvancedFilter"/>, <see cref="StringNotBeginsWithAdvancedFilter"/>, <see cref="StringNotContainsAdvancedFilter"/>, <see cref="StringNotEndsWithAdvancedFilter"/> and <see cref="StringNotInAdvancedFilter"/>.
        /// </param>
        /// <returns> A new <see cref="Models.EventSubscriptionFilter"/> instance for mocking. </returns>
        public static EventSubscriptionFilter EventSubscriptionFilter(string subjectBeginsWith = null, string subjectEndsWith = null, IEnumerable<string> includedEventTypes = null, bool? isSubjectCaseSensitive = null, bool? isAdvancedFilteringOnArraysEnabled = null, IEnumerable<AdvancedFilter> advancedFilters = null)
        {
            includedEventTypes ??= new List<string>();
            advancedFilters ??= new List<AdvancedFilter>();

            return new EventSubscriptionFilter(subjectBeginsWith, subjectEndsWith, includedEventTypes?.ToList(), isSubjectCaseSensitive, isAdvancedFilteringOnArraysEnabled, advancedFilters?.ToList());
        }

        /// <summary> Initializes a new instance of AdvancedFilter. </summary>
        /// <param name="operatorType"> The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others. </param>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <returns> A new <see cref="Models.AdvancedFilter"/> instance for mocking. </returns>
        public static AdvancedFilter AdvancedFilter(string operatorType = null, string key = null)
        {
            return new UnknownAdvancedFilter(operatorType, key);
        }

        /// <summary> Initializes a new instance of EventSubscriptionRetryPolicy. </summary>
        /// <param name="maxDeliveryAttempts"> Maximum number of delivery retry attempts for events. </param>
        /// <param name="eventTimeToLiveInMinutes"> Time To Live (in minutes) for events. </param>
        /// <returns> A new <see cref="Models.EventSubscriptionRetryPolicy"/> instance for mocking. </returns>
        public static EventSubscriptionRetryPolicy EventSubscriptionRetryPolicy(int? maxDeliveryAttempts = null, int? eventTimeToLiveInMinutes = null)
        {
            return new EventSubscriptionRetryPolicy(maxDeliveryAttempts, eventTimeToLiveInMinutes);
        }

        /// <summary> Initializes a new instance of DeadLetterDestination. </summary>
        /// <param name="endpointType"> Type of the endpoint for the dead letter destination. </param>
        /// <returns> A new <see cref="Models.DeadLetterDestination"/> instance for mocking. </returns>
        public static DeadLetterDestination DeadLetterDestination(string endpointType = null)
        {
            return new UnknownDeadLetterDestination(endpointType);
        }

        /// <summary> Initializes a new instance of DeadLetterWithResourceIdentity. </summary>
        /// <param name="identity"> The identity to use when dead-lettering events. </param>
        /// <param name="deadLetterDestination">
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
        /// Please note <see cref="DeadLetterDestination"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="StorageBlobDeadLetterDestination"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DeadLetterWithResourceIdentity"/> instance for mocking. </returns>
        public static DeadLetterWithResourceIdentity DeadLetterWithResourceIdentity(EventSubscriptionIdentity identity = null, DeadLetterDestination deadLetterDestination = null)
        {
            return new DeadLetterWithResourceIdentity(identity, deadLetterDestination);
        }

        /// <summary> Initializes a new instance of EventGridTopicData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity information for the resource. </param>
        /// <param name="privateEndpointConnections"></param>
        /// <param name="provisioningState"> Provisioning state of the topic. </param>
        /// <param name="endpoint"> Endpoint for the topic. </param>
        /// <param name="inputSchema"> This determines the format that Event Grid should expect for incoming events published to the topic. </param>
        /// <param name="inputSchemaMapping">
        /// This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema.
        /// Please note <see cref="EventGridInputSchemaMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EventGridJsonInputSchemaMapping"/>.
        /// </param>
        /// <param name="metricResourceId"> Metric resource id for the topic. </param>
        /// <param name="publicNetworkAccess">
        /// This determines if traffic is allowed over public network. By default it is enabled. 
        /// You can further restrict to specific IPs by configuring &lt;seealso cref=&quot;P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules&quot; /&gt;
        /// </param>
        /// <param name="inboundIPRules"> This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. </param>
        /// <param name="isLocalAuthDisabled"> This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. </param>
        /// <param name="dataResidencyBoundary"> Data Residency Boundary of the resource. </param>
        /// <returns> A new <see cref="EventGrid.EventGridTopicData"/> instance for mocking. </returns>
        public static EventGridTopicData EventGridTopicData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, IEnumerable<EventGridPrivateEndpointConnectionData> privateEndpointConnections = null, EventGridTopicProvisioningState? provisioningState = null, Uri endpoint = null, EventGridInputSchema? inputSchema = null, EventGridInputSchemaMapping inputSchemaMapping = null, string metricResourceId = null, EventGridPublicNetworkAccess? publicNetworkAccess = null, IEnumerable<EventGridInboundIPRule> inboundIPRules = null, bool? isLocalAuthDisabled = null, DataResidencyBoundary? dataResidencyBoundary = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<EventGridPrivateEndpointConnectionData>();
            inboundIPRules ??= new List<EventGridInboundIPRule>();

            return new EventGridTopicData(id, name, resourceType, systemData, tags, location, identity, privateEndpointConnections?.ToList(), provisioningState, endpoint, inputSchema, inputSchemaMapping, metricResourceId, publicNetworkAccess, inboundIPRules?.ToList(), isLocalAuthDisabled, dataResidencyBoundary);
        }

        /// <summary> Initializes a new instance of TopicSharedAccessKeys. </summary>
        /// <param name="key1"> Shared access key1 for the topic. </param>
        /// <param name="key2"> Shared access key2 for the topic. </param>
        /// <returns> A new <see cref="Models.TopicSharedAccessKeys"/> instance for mocking. </returns>
        public static TopicSharedAccessKeys TopicSharedAccessKeys(string key1 = null, string key2 = null)
        {
            return new TopicSharedAccessKeys(key1, key2);
        }

        /// <summary> Initializes a new instance of PartnerConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="partnerAuthorization"> The details of authorized partners. </param>
        /// <param name="provisioningState"> Provisioning state of the partner configuration. </param>
        /// <returns> A new <see cref="EventGrid.PartnerConfigurationData"/> instance for mocking. </returns>
        public static PartnerConfigurationData PartnerConfigurationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, PartnerAuthorization partnerAuthorization = null, PartnerConfigurationProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PartnerConfigurationData(id, name, resourceType, systemData, tags, location, partnerAuthorization, provisioningState);
        }

        /// <summary> Initializes a new instance of PartnerAuthorization. </summary>
        /// <param name="defaultMaximumExpirationTimeInDays">
        /// Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
        /// not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
        /// </param>
        /// <param name="authorizedPartnersList"> The list of authorized partners. </param>
        /// <returns> A new <see cref="Models.PartnerAuthorization"/> instance for mocking. </returns>
        public static PartnerAuthorization PartnerAuthorization(int? defaultMaximumExpirationTimeInDays = null, IEnumerable<EventGridPartnerContent> authorizedPartnersList = null)
        {
            authorizedPartnersList ??= new List<EventGridPartnerContent>();

            return new PartnerAuthorization(defaultMaximumExpirationTimeInDays, authorizedPartnersList?.ToList());
        }

        /// <summary> Initializes a new instance of EventGridPartnerContent. </summary>
        /// <param name="partnerRegistrationImmutableId"> The immutableId of the corresponding partner registration. </param>
        /// <param name="partnerName"> The partner name. </param>
        /// <param name="authorizationExpireOn">
        /// Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber&apos;s
        /// context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
        /// If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
        /// </param>
        /// <returns> A new <see cref="Models.EventGridPartnerContent"/> instance for mocking. </returns>
        public static EventGridPartnerContent EventGridPartnerContent(Guid? partnerRegistrationImmutableId = null, string partnerName = null, DateTimeOffset? authorizationExpireOn = null)
        {
            return new EventGridPartnerContent(partnerRegistrationImmutableId, partnerName, authorizationExpireOn);
        }

        /// <summary> Initializes a new instance of PartnerNamespaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="privateEndpointConnections"></param>
        /// <param name="provisioningState"> Provisioning state of the partner namespace. </param>
        /// <param name="partnerRegistrationFullyQualifiedId">
        /// The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
        /// </param>
        /// <param name="endpoint"> Endpoint for the partner namespace. </param>
        /// <param name="publicNetworkAccess">
        /// This determines if traffic is allowed over public network. By default it is enabled.
        /// You can further restrict to specific IPs by configuring &lt;seealso cref=&quot;P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules&quot; /&gt;
        /// </param>
        /// <param name="inboundIPRules"> This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. </param>
        /// <param name="isLocalAuthDisabled"> This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. </param>
        /// <param name="partnerTopicRoutingMode">
        /// This determines if events published to this partner namespace should use the source attribute in the event payload
        /// or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
        /// </param>
        /// <returns> A new <see cref="EventGrid.PartnerNamespaceData"/> instance for mocking. </returns>
        public static PartnerNamespaceData PartnerNamespaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<EventGridPrivateEndpointConnectionData> privateEndpointConnections = null, PartnerNamespaceProvisioningState? provisioningState = null, ResourceIdentifier partnerRegistrationFullyQualifiedId = null, Uri endpoint = null, EventGridPublicNetworkAccess? publicNetworkAccess = null, IEnumerable<EventGridInboundIPRule> inboundIPRules = null, bool? isLocalAuthDisabled = null, PartnerTopicRoutingMode? partnerTopicRoutingMode = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<EventGridPrivateEndpointConnectionData>();
            inboundIPRules ??= new List<EventGridInboundIPRule>();

            return new PartnerNamespaceData(id, name, resourceType, systemData, tags, location, privateEndpointConnections?.ToList(), provisioningState, partnerRegistrationFullyQualifiedId, endpoint, publicNetworkAccess, inboundIPRules?.ToList(), isLocalAuthDisabled, partnerTopicRoutingMode);
        }

        /// <summary> Initializes a new instance of PartnerNamespaceSharedAccessKeys. </summary>
        /// <param name="key1"> Shared access key1 for the partner namespace. </param>
        /// <param name="key2"> Shared access key2 for the partner namespace. </param>
        /// <returns> A new <see cref="Models.PartnerNamespaceSharedAccessKeys"/> instance for mocking. </returns>
        public static PartnerNamespaceSharedAccessKeys PartnerNamespaceSharedAccessKeys(string key1 = null, string key2 = null)
        {
            return new PartnerNamespaceSharedAccessKeys(key1, key2);
        }

        /// <summary> Initializes a new instance of PartnerRegistrationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> Provisioning state of the partner registration. </param>
        /// <param name="partnerRegistrationImmutableId">
        /// The immutableId of the corresponding partner registration.
        /// Note: This property is marked for deprecation and is not supported in any future GA API version
        /// </param>
        /// <returns> A new <see cref="EventGrid.PartnerRegistrationData"/> instance for mocking. </returns>
        public static PartnerRegistrationData PartnerRegistrationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, PartnerRegistrationProvisioningState? provisioningState = null, Guid? partnerRegistrationImmutableId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PartnerRegistrationData(id, name, resourceType, systemData, tags, location, provisioningState, partnerRegistrationImmutableId);
        }

        /// <summary> Initializes a new instance of PartnerTopicData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity information for the Partner Topic resource. </param>
        /// <param name="partnerRegistrationImmutableId"> The immutableId of the corresponding partner registration. </param>
        /// <param name="source"> Source associated with this partner topic. This represents a unique partner resource. </param>
        /// <param name="eventTypeInfo"> Event Type information from the corresponding event channel. </param>
        /// <param name="expireOnIfNotActivated">
        /// Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
        /// the partner topic and corresponding event channel are deleted.
        /// </param>
        /// <param name="provisioningState"> Provisioning state of the partner topic. </param>
        /// <param name="activationState"> Activation state of the partner topic. </param>
        /// <param name="partnerTopicFriendlyDescription">
        /// Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
        /// This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
        /// </param>
        /// <param name="messageForActivation"> Context or helpful message that can be used during the approval process by the subscriber. </param>
        /// <returns> A new <see cref="EventGrid.PartnerTopicData"/> instance for mocking. </returns>
        public static PartnerTopicData PartnerTopicData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, Guid? partnerRegistrationImmutableId = null, string source = null, PartnerTopicEventTypeInfo eventTypeInfo = null, DateTimeOffset? expireOnIfNotActivated = null, PartnerTopicProvisioningState? provisioningState = null, PartnerTopicActivationState? activationState = null, string partnerTopicFriendlyDescription = null, string messageForActivation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PartnerTopicData(id, name, resourceType, systemData, tags, location, identity, partnerRegistrationImmutableId, source, eventTypeInfo, expireOnIfNotActivated, provisioningState, activationState, partnerTopicFriendlyDescription, messageForActivation);
        }

        /// <summary> Initializes a new instance of EventGridPrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"></param>
        /// <param name="displayName"></param>
        /// <param name="requiredMembers"></param>
        /// <param name="requiredZoneNames"></param>
        /// <returns> A new <see cref="EventGrid.EventGridPrivateLinkResourceData"/> instance for mocking. </returns>
        public static EventGridPrivateLinkResourceData EventGridPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, string displayName = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new EventGridPrivateLinkResourceData(id, name, resourceType, systemData, groupId, displayName, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of SystemTopicData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity information for the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the system topic. </param>
        /// <param name="source"> Source for the system topic. </param>
        /// <param name="topicType"> TopicType for the system topic. </param>
        /// <param name="metricResourceId"> Metric resource id for the system topic. </param>
        /// <returns> A new <see cref="EventGrid.SystemTopicData"/> instance for mocking. </returns>
        public static SystemTopicData SystemTopicData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, EventGridResourceProvisioningState? provisioningState = null, ResourceIdentifier source = null, string topicType = null, Guid? metricResourceId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SystemTopicData(id, name, resourceType, systemData, tags, location, identity, provisioningState, source, topicType, metricResourceId);
        }

        /// <summary> Initializes a new instance of EventTypeUnderTopic. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> Display name of the event type. </param>
        /// <param name="description"> Description of the event type. </param>
        /// <param name="schemaUri"> Url of the schema for this event type. </param>
        /// <param name="isInDefaultSet"> IsInDefaultSet flag of the event type. </param>
        /// <returns> A new <see cref="Models.EventTypeUnderTopic"/> instance for mocking. </returns>
        public static EventTypeUnderTopic EventTypeUnderTopic(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string displayName = null, string description = null, Uri schemaUri = null, bool? isInDefaultSet = null)
        {
            return new EventTypeUnderTopic(id, name, resourceType, systemData, displayName, description, schemaUri, isInDefaultSet);
        }

        /// <summary> Initializes a new instance of ExtensionTopicData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Description of the extension topic. </param>
        /// <param name="systemTopic"> System topic resource id which is mapped to the source. </param>
        /// <returns> A new <see cref="EventGrid.ExtensionTopicData"/> instance for mocking. </returns>
        public static ExtensionTopicData ExtensionTopicData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string systemTopic = null)
        {
            return new ExtensionTopicData(id, name, resourceType, systemData, description, systemTopic);
        }

        /// <summary> Initializes a new instance of TopicTypeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provider"> Namespace of the provider of the topic type. </param>
        /// <param name="displayName"> Display Name for the topic type. </param>
        /// <param name="description"> Description of the topic type. </param>
        /// <param name="resourceRegionType"> Region type of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the topic type. </param>
        /// <param name="supportedLocations"> List of locations supported by this topic type. </param>
        /// <param name="sourceResourceFormat"> Source resource format. </param>
        /// <param name="supportedScopesForSource"> Supported source scopes. </param>
        /// <returns> A new <see cref="EventGrid.TopicTypeData"/> instance for mocking. </returns>
        public static TopicTypeData TopicTypeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provider = null, string displayName = null, string description = null, EventGridResourceRegionType? resourceRegionType = null, TopicTypeProvisioningState? provisioningState = null, IEnumerable<string> supportedLocations = null, string sourceResourceFormat = null, IEnumerable<TopicTypeSourceScope> supportedScopesForSource = null)
        {
            supportedLocations ??= new List<string>();
            supportedScopesForSource ??= new List<TopicTypeSourceScope>();

            return new TopicTypeData(id, name, resourceType, systemData, provider, displayName, description, resourceRegionType, provisioningState, supportedLocations?.ToList(), sourceResourceFormat, supportedScopesForSource?.ToList());
        }

        /// <summary> Initializes a new instance of VerifiedPartnerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="partnerRegistrationImmutableId"> ImmutableId of the corresponding partner registration. </param>
        /// <param name="organizationName"> Official name of the Partner. </param>
        /// <param name="partnerDisplayName"> Display name of the verified partner. </param>
        /// <param name="partnerTopicDetails"> Details of the partner topic scenario. </param>
        /// <param name="provisioningState"> Provisioning state of the verified partner. </param>
        /// <returns> A new <see cref="EventGrid.VerifiedPartnerData"/> instance for mocking. </returns>
        public static VerifiedPartnerData VerifiedPartnerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Guid? partnerRegistrationImmutableId = null, string organizationName = null, string partnerDisplayName = null, PartnerDetails partnerTopicDetails = null, VerifiedPartnerProvisioningState? provisioningState = null)
        {
            return new VerifiedPartnerData(id, name, resourceType, systemData, partnerRegistrationImmutableId, organizationName, partnerDisplayName, partnerTopicDetails, provisioningState);
        }

        /// <summary> Initializes a new instance of PartnerDetails. </summary>
        /// <param name="description"> This is short description about the partner. The length of this description should not exceed 256 characters. </param>
        /// <param name="longDescription"> Long description for the partner&apos;s scenarios and integration.Length of this description should not exceed 2048 characters. </param>
        /// <param name="setupUri">
        /// URI of the partner website that can be used by Azure customers to setup Event Grid
        /// integration on an event source.
        /// </param>
        /// <returns> A new <see cref="Models.PartnerDetails"/> instance for mocking. </returns>
        public static PartnerDetails PartnerDetails(string description = null, string longDescription = null, Uri setupUri = null)
        {
            return new PartnerDetails(description, longDescription, setupUri);
        }

        /// <summary> Initializes a new instance of JsonFieldWithDefault. </summary>
        /// <param name="sourceField"> Name of a field in the input event schema that&apos;s to be used as the source of a mapping. </param>
        /// <param name="defaultValue"> The default value to be used for mapping when a SourceField is not provided or if there&apos;s no property with the specified name in the published JSON event payload. </param>
        /// <returns> A new <see cref="Models.JsonFieldWithDefault"/> instance for mocking. </returns>
        public static JsonFieldWithDefault JsonFieldWithDefault(string sourceField = null, string defaultValue = null)
        {
            return new JsonFieldWithDefault(sourceField, defaultValue);
        }

        /// <summary> Initializes a new instance of EventGridJsonInputSchemaMapping. </summary>
        /// <param name="idSourceField"> The mapping information for the Id property of the Event Grid Event. </param>
        /// <param name="topicSourceField"> The mapping information for the Topic property of the Event Grid Event. </param>
        /// <param name="eventTimeSourceField"> The mapping information for the EventTime property of the Event Grid Event. </param>
        /// <param name="eventType"> The mapping information for the EventType property of the Event Grid Event. </param>
        /// <param name="subject"> The mapping information for the Subject property of the Event Grid Event. </param>
        /// <param name="dataVersion"> The mapping information for the DataVersion property of the Event Grid Event. </param>
        /// <returns> A new <see cref="Models.EventGridJsonInputSchemaMapping"/> instance for mocking. </returns>
        public static EventGridJsonInputSchemaMapping EventGridJsonInputSchemaMapping(string idSourceField = null, string topicSourceField = null, string eventTimeSourceField = null, JsonFieldWithDefault eventType = null, JsonFieldWithDefault subject = null, JsonFieldWithDefault dataVersion = null)
        {
            return new EventGridJsonInputSchemaMapping("Json", new JsonField(idSourceField), new JsonField(topicSourceField), new JsonField(eventTimeSourceField), eventType, subject, dataVersion);
        }

        /// <summary> Initializes a new instance of StaticDeliveryAttributeMapping. </summary>
        /// <param name="name"> Name of the delivery attribute or header. </param>
        /// <param name="value"> Value of the delivery attribute. </param>
        /// <param name="isSecret"> Boolean flag to tell if the attribute contains sensitive information . </param>
        /// <returns> A new <see cref="Models.StaticDeliveryAttributeMapping"/> instance for mocking. </returns>
        public static StaticDeliveryAttributeMapping StaticDeliveryAttributeMapping(string name = null, string value = null, bool? isSecret = null)
        {
            return new StaticDeliveryAttributeMapping(name, "Static", value, isSecret);
        }

        /// <summary> Initializes a new instance of DynamicDeliveryAttributeMapping. </summary>
        /// <param name="name"> Name of the delivery attribute or header. </param>
        /// <param name="sourceField"> JSON path in the event which contains attribute value. </param>
        /// <returns> A new <see cref="Models.DynamicDeliveryAttributeMapping"/> instance for mocking. </returns>
        public static DynamicDeliveryAttributeMapping DynamicDeliveryAttributeMapping(string name = null, string sourceField = null)
        {
            return new DynamicDeliveryAttributeMapping(name, "Dynamic", sourceField);
        }

        /// <summary> Initializes a new instance of NumberInAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.NumberInAdvancedFilter"/> instance for mocking. </returns>
        public static NumberInAdvancedFilter NumberInAdvancedFilter(string key = null, IEnumerable<double> values = null)
        {
            values ??= new List<double>();

            return new NumberInAdvancedFilter("NumberIn", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StorageBlobDeadLetterDestination. </summary>
        /// <param name="resourceId"> The Azure Resource ID of the storage account that is the destination of the deadletter events. </param>
        /// <param name="blobContainerName"> The name of the Storage blob container that is the destination of the deadletter events. </param>
        /// <returns> A new <see cref="Models.StorageBlobDeadLetterDestination"/> instance for mocking. </returns>
        public static StorageBlobDeadLetterDestination StorageBlobDeadLetterDestination(ResourceIdentifier resourceId = null, string blobContainerName = null)
        {
            return new StorageBlobDeadLetterDestination("StorageBlob", resourceId, blobContainerName);
        }

        /// <summary> Initializes a new instance of NumberNotInAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.NumberNotInAdvancedFilter"/> instance for mocking. </returns>
        public static NumberNotInAdvancedFilter NumberNotInAdvancedFilter(string key = null, IEnumerable<double> values = null)
        {
            values ??= new List<double>();

            return new NumberNotInAdvancedFilter("NumberNotIn", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of NumberLessThanAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="value"> The filter value. </param>
        /// <returns> A new <see cref="Models.NumberLessThanAdvancedFilter"/> instance for mocking. </returns>
        public static NumberLessThanAdvancedFilter NumberLessThanAdvancedFilter(string key = null, double? value = null)
        {
            return new NumberLessThanAdvancedFilter("NumberLessThan", key, value);
        }

        /// <summary> Initializes a new instance of NumberGreaterThanAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="value"> The filter value. </param>
        /// <returns> A new <see cref="Models.NumberGreaterThanAdvancedFilter"/> instance for mocking. </returns>
        public static NumberGreaterThanAdvancedFilter NumberGreaterThanAdvancedFilter(string key = null, double? value = null)
        {
            return new NumberGreaterThanAdvancedFilter("NumberGreaterThan", key, value);
        }

        /// <summary> Initializes a new instance of NumberLessThanOrEqualsAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="value"> The filter value. </param>
        /// <returns> A new <see cref="Models.NumberLessThanOrEqualsAdvancedFilter"/> instance for mocking. </returns>
        public static NumberLessThanOrEqualsAdvancedFilter NumberLessThanOrEqualsAdvancedFilter(string key = null, double? value = null)
        {
            return new NumberLessThanOrEqualsAdvancedFilter("NumberLessThanOrEquals", key, value);
        }

        /// <summary> Initializes a new instance of NumberGreaterThanOrEqualsAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="value"> The filter value. </param>
        /// <returns> A new <see cref="Models.NumberGreaterThanOrEqualsAdvancedFilter"/> instance for mocking. </returns>
        public static NumberGreaterThanOrEqualsAdvancedFilter NumberGreaterThanOrEqualsAdvancedFilter(string key = null, double? value = null)
        {
            return new NumberGreaterThanOrEqualsAdvancedFilter("NumberGreaterThanOrEquals", key, value);
        }

        /// <summary> Initializes a new instance of BoolEqualsAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="value"> The boolean filter value. </param>
        /// <returns> A new <see cref="Models.BoolEqualsAdvancedFilter"/> instance for mocking. </returns>
        public static BoolEqualsAdvancedFilter BoolEqualsAdvancedFilter(string key = null, bool? value = null)
        {
            return new BoolEqualsAdvancedFilter("BoolEquals", key, value);
        }

        /// <summary> Initializes a new instance of StringInAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringInAdvancedFilter"/> instance for mocking. </returns>
        public static StringInAdvancedFilter StringInAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringInAdvancedFilter("StringIn", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringNotInAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringNotInAdvancedFilter"/> instance for mocking. </returns>
        public static StringNotInAdvancedFilter StringNotInAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringNotInAdvancedFilter("StringNotIn", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringBeginsWithAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringBeginsWithAdvancedFilter"/> instance for mocking. </returns>
        public static StringBeginsWithAdvancedFilter StringBeginsWithAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringBeginsWithAdvancedFilter("StringBeginsWith", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringEndsWithAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringEndsWithAdvancedFilter"/> instance for mocking. </returns>
        public static StringEndsWithAdvancedFilter StringEndsWithAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringEndsWithAdvancedFilter("StringEndsWith", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringContainsAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringContainsAdvancedFilter"/> instance for mocking. </returns>
        public static StringContainsAdvancedFilter StringContainsAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringContainsAdvancedFilter("StringContains", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of NumberInRangeAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.NumberInRangeAdvancedFilter"/> instance for mocking. </returns>
        public static NumberInRangeAdvancedFilter NumberInRangeAdvancedFilter(string key = null, IEnumerable<IList<double>> values = null)
        {
            values ??= new List<IList<double>>();

            return new NumberInRangeAdvancedFilter("NumberInRange", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of NumberNotInRangeAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.NumberNotInRangeAdvancedFilter"/> instance for mocking. </returns>
        public static NumberNotInRangeAdvancedFilter NumberNotInRangeAdvancedFilter(string key = null, IEnumerable<IList<double>> values = null)
        {
            values ??= new List<IList<double>>();

            return new NumberNotInRangeAdvancedFilter("NumberNotInRange", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringNotBeginsWithAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringNotBeginsWithAdvancedFilter"/> instance for mocking. </returns>
        public static StringNotBeginsWithAdvancedFilter StringNotBeginsWithAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringNotBeginsWithAdvancedFilter("StringNotBeginsWith", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringNotEndsWithAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringNotEndsWithAdvancedFilter"/> instance for mocking. </returns>
        public static StringNotEndsWithAdvancedFilter StringNotEndsWithAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringNotEndsWithAdvancedFilter("StringNotEndsWith", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of StringNotContainsAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <param name="values"> The set of filter values. </param>
        /// <returns> A new <see cref="Models.StringNotContainsAdvancedFilter"/> instance for mocking. </returns>
        public static StringNotContainsAdvancedFilter StringNotContainsAdvancedFilter(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new StringNotContainsAdvancedFilter("StringNotContains", key, values?.ToList());
        }

        /// <summary> Initializes a new instance of IsNullOrUndefinedAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <returns> A new <see cref="Models.IsNullOrUndefinedAdvancedFilter"/> instance for mocking. </returns>
        public static IsNullOrUndefinedAdvancedFilter IsNullOrUndefinedAdvancedFilter(string key = null)
        {
            return new IsNullOrUndefinedAdvancedFilter("IsNullOrUndefined", key);
        }

        /// <summary> Initializes a new instance of IsNotNullAdvancedFilter. </summary>
        /// <param name="key"> The field/property in the event based on which you want to filter. </param>
        /// <returns> A new <see cref="Models.IsNotNullAdvancedFilter"/> instance for mocking. </returns>
        public static IsNotNullAdvancedFilter IsNotNullAdvancedFilter(string key = null)
        {
            return new IsNotNullAdvancedFilter("IsNotNull", key);
        }

        /// <summary> Initializes a new instance of WebHookEventSubscriptionDestination. </summary>
        /// <param name="endpoint"> The URL that represents the endpoint of the destination of an event subscription. </param>
        /// <param name="baseEndpoint"> The base URL that represents the endpoint of the destination of an event subscription. </param>
        /// <param name="maxEventsPerBatch"> Maximum number of events per batch. </param>
        /// <param name="preferredBatchSizeInKilobytes"> Preferred batch size in Kilobytes. </param>
        /// <param name="azureActiveDirectoryTenantId"> The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests. </param>
        /// <param name="uriOrAzureActiveDirectoryApplicationId"> The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests. </param>
        /// <param name="deliveryAttributeMappings">
        /// Delivery attribute details.
        /// Please note <see cref="DeliveryAttributeMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DynamicDeliveryAttributeMapping"/> and <see cref="StaticDeliveryAttributeMapping"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebHookEventSubscriptionDestination"/> instance for mocking. </returns>
        public static WebHookEventSubscriptionDestination WebHookEventSubscriptionDestination(Uri endpoint = null, Uri baseEndpoint = null, int? maxEventsPerBatch = null, int? preferredBatchSizeInKilobytes = null, Guid? azureActiveDirectoryTenantId = null, string uriOrAzureActiveDirectoryApplicationId = null, IEnumerable<DeliveryAttributeMapping> deliveryAttributeMappings = null)
        {
            deliveryAttributeMappings ??= new List<DeliveryAttributeMapping>();

            return new WebHookEventSubscriptionDestination("WebHook", endpoint, baseEndpoint, maxEventsPerBatch, preferredBatchSizeInKilobytes, azureActiveDirectoryTenantId, uriOrAzureActiveDirectoryApplicationId, deliveryAttributeMappings?.ToList());
        }

        /// <summary> Initializes a new instance of EventHubEventSubscriptionDestination. </summary>
        /// <param name="resourceId"> The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription. </param>
        /// <param name="deliveryAttributeMappings">
        /// Delivery attribute details.
        /// Please note <see cref="DeliveryAttributeMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DynamicDeliveryAttributeMapping"/> and <see cref="StaticDeliveryAttributeMapping"/>.
        /// </param>
        /// <returns> A new <see cref="Models.EventHubEventSubscriptionDestination"/> instance for mocking. </returns>
        public static EventHubEventSubscriptionDestination EventHubEventSubscriptionDestination(ResourceIdentifier resourceId = null, IEnumerable<DeliveryAttributeMapping> deliveryAttributeMappings = null)
        {
            deliveryAttributeMappings ??= new List<DeliveryAttributeMapping>();

            return new EventHubEventSubscriptionDestination("EventHub", resourceId, deliveryAttributeMappings?.ToList());
        }

        /// <summary> Initializes a new instance of StorageQueueEventSubscriptionDestination. </summary>
        /// <param name="resourceId"> The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription. </param>
        /// <param name="queueName"> The name of the Storage queue under a storage account that is the destination of an event subscription. </param>
        /// <param name="queueMessageTimeToLiveInSeconds"> Storage queue message time to live in seconds. </param>
        /// <returns> A new <see cref="Models.StorageQueueEventSubscriptionDestination"/> instance for mocking. </returns>
        public static StorageQueueEventSubscriptionDestination StorageQueueEventSubscriptionDestination(ResourceIdentifier resourceId = null, string queueName = null, long? queueMessageTimeToLiveInSeconds = null)
        {
            return new StorageQueueEventSubscriptionDestination("StorageQueue", resourceId, queueName, queueMessageTimeToLiveInSeconds);
        }

        /// <summary> Initializes a new instance of HybridConnectionEventSubscriptionDestination. </summary>
        /// <param name="resourceId"> The Azure Resource ID of an hybrid connection that is the destination of an event subscription. </param>
        /// <param name="deliveryAttributeMappings">
        /// Delivery attribute details.
        /// Please note <see cref="DeliveryAttributeMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DynamicDeliveryAttributeMapping"/> and <see cref="StaticDeliveryAttributeMapping"/>.
        /// </param>
        /// <returns> A new <see cref="Models.HybridConnectionEventSubscriptionDestination"/> instance for mocking. </returns>
        public static HybridConnectionEventSubscriptionDestination HybridConnectionEventSubscriptionDestination(ResourceIdentifier resourceId = null, IEnumerable<DeliveryAttributeMapping> deliveryAttributeMappings = null)
        {
            deliveryAttributeMappings ??= new List<DeliveryAttributeMapping>();

            return new HybridConnectionEventSubscriptionDestination("HybridConnection", resourceId, deliveryAttributeMappings?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceBusQueueEventSubscriptionDestination. </summary>
        /// <param name="resourceId"> The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription. </param>
        /// <param name="deliveryAttributeMappings">
        /// Delivery attribute details.
        /// Please note <see cref="DeliveryAttributeMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DynamicDeliveryAttributeMapping"/> and <see cref="StaticDeliveryAttributeMapping"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ServiceBusQueueEventSubscriptionDestination"/> instance for mocking. </returns>
        public static ServiceBusQueueEventSubscriptionDestination ServiceBusQueueEventSubscriptionDestination(ResourceIdentifier resourceId = null, IEnumerable<DeliveryAttributeMapping> deliveryAttributeMappings = null)
        {
            deliveryAttributeMappings ??= new List<DeliveryAttributeMapping>();

            return new ServiceBusQueueEventSubscriptionDestination("ServiceBusQueue", resourceId, deliveryAttributeMappings?.ToList());
        }

        /// <summary> Initializes a new instance of ServiceBusTopicEventSubscriptionDestination. </summary>
        /// <param name="resourceId"> The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription. </param>
        /// <param name="deliveryAttributeMappings">
        /// Delivery attribute details.
        /// Please note <see cref="DeliveryAttributeMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DynamicDeliveryAttributeMapping"/> and <see cref="StaticDeliveryAttributeMapping"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ServiceBusTopicEventSubscriptionDestination"/> instance for mocking. </returns>
        public static ServiceBusTopicEventSubscriptionDestination ServiceBusTopicEventSubscriptionDestination(ResourceIdentifier resourceId = null, IEnumerable<DeliveryAttributeMapping> deliveryAttributeMappings = null)
        {
            deliveryAttributeMappings ??= new List<DeliveryAttributeMapping>();

            return new ServiceBusTopicEventSubscriptionDestination("ServiceBusTopic", resourceId, deliveryAttributeMappings?.ToList());
        }

        /// <summary> Initializes a new instance of AzureFunctionEventSubscriptionDestination. </summary>
        /// <param name="resourceId"> The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription. </param>
        /// <param name="maxEventsPerBatch"> Maximum number of events per batch. </param>
        /// <param name="preferredBatchSizeInKilobytes"> Preferred batch size in Kilobytes. </param>
        /// <param name="deliveryAttributeMappings">
        /// Delivery attribute details.
        /// Please note <see cref="DeliveryAttributeMapping"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DynamicDeliveryAttributeMapping"/> and <see cref="StaticDeliveryAttributeMapping"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AzureFunctionEventSubscriptionDestination"/> instance for mocking. </returns>
        public static AzureFunctionEventSubscriptionDestination AzureFunctionEventSubscriptionDestination(ResourceIdentifier resourceId = null, int? maxEventsPerBatch = null, int? preferredBatchSizeInKilobytes = null, IEnumerable<DeliveryAttributeMapping> deliveryAttributeMappings = null)
        {
            deliveryAttributeMappings ??= new List<DeliveryAttributeMapping>();

            return new AzureFunctionEventSubscriptionDestination("AzureFunction", resourceId, maxEventsPerBatch, preferredBatchSizeInKilobytes, deliveryAttributeMappings?.ToList());
        }
    }
}
