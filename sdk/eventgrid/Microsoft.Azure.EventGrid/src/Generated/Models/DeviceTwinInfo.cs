// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.EventGrid.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about the device twin, which is the cloud representation of
    /// application device metadata.
    /// </summary>
    public partial class DeviceTwinInfo
    {
        /// <summary>
        /// Initializes a new instance of the DeviceTwinInfo class.
        /// </summary>
        public DeviceTwinInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeviceTwinInfo class.
        /// </summary>
        /// <param name="authenticationType">Authentication type used for this
        /// device: either SAS, SelfSigned, or CertificateAuthority.</param>
        /// <param name="cloudToDeviceMessageCount">Count of cloud to device
        /// messages sent to this device.</param>
        /// <param name="connectionState">Whether the device is connected or
        /// disconnected.</param>
        /// <param name="deviceId">The unique identifier of the device
        /// twin.</param>
        /// <param name="etag">A piece of information that describes the
        /// content of the device twin. Each etag is guaranteed to be unique
        /// per device twin.</param>
        /// <param name="lastActivityTime">The ISO8601 timestamp of the last
        /// activity.</param>
        /// <param name="properties">Properties JSON element.</param>
        /// <param name="status">Whether the device twin is enabled or
        /// disabled.</param>
        /// <param name="statusUpdateTime">The ISO8601 timestamp of the last
        /// device twin status update.</param>
        /// <param name="version">An integer that is incremented by one each
        /// time the device twin is updated.</param>
        /// <param name="x509Thumbprint">The thumbprint is a unique value for
        /// the x509 certificate, commonly used to find a particular
        /// certificate in a certificate store. The thumbprint is dynamically
        /// generated using the SHA1 algorithm, and does not physically exist
        /// in the certificate.</param>
        public DeviceTwinInfo(string authenticationType = default(string), double? cloudToDeviceMessageCount = default(double?), string connectionState = default(string), string deviceId = default(string), string etag = default(string), string lastActivityTime = default(string), DeviceTwinInfoProperties properties = default(DeviceTwinInfoProperties), string status = default(string), string statusUpdateTime = default(string), double? version = default(double?), DeviceTwinInfoX509Thumbprint x509Thumbprint = default(DeviceTwinInfoX509Thumbprint))
        {
            AuthenticationType = authenticationType;
            CloudToDeviceMessageCount = cloudToDeviceMessageCount;
            ConnectionState = connectionState;
            DeviceId = deviceId;
            Etag = etag;
            LastActivityTime = lastActivityTime;
            Properties = properties;
            Status = status;
            StatusUpdateTime = statusUpdateTime;
            Version = version;
            X509Thumbprint = x509Thumbprint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets authentication type used for this device: either SAS,
        /// SelfSigned, or CertificateAuthority.
        /// </summary>
        [JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets count of cloud to device messages sent to this device.
        /// </summary>
        [JsonProperty(PropertyName = "cloudToDeviceMessageCount")]
        public double? CloudToDeviceMessageCount { get; set; }

        /// <summary>
        /// Gets or sets whether the device is connected or disconnected.
        /// </summary>
        [JsonProperty(PropertyName = "connectionState")]
        public string ConnectionState { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the device twin.
        /// </summary>
        [JsonProperty(PropertyName = "deviceId")]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets a piece of information that describes the content of
        /// the device twin. Each etag is guaranteed to be unique per device
        /// twin.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the ISO8601 timestamp of the last activity.
        /// </summary>
        [JsonProperty(PropertyName = "lastActivityTime")]
        public string LastActivityTime { get; set; }

        /// <summary>
        /// Gets or sets properties JSON element.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public DeviceTwinInfoProperties Properties { get; set; }

        /// <summary>
        /// Gets or sets whether the device twin is enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the ISO8601 timestamp of the last device twin status
        /// update.
        /// </summary>
        [JsonProperty(PropertyName = "statusUpdateTime")]
        public string StatusUpdateTime { get; set; }

        /// <summary>
        /// Gets or sets an integer that is incremented by one each time the
        /// device twin is updated.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public double? Version { get; set; }

        /// <summary>
        /// Gets or sets the thumbprint is a unique value for the x509
        /// certificate, commonly used to find a particular certificate in a
        /// certificate store. The thumbprint is dynamically generated using
        /// the SHA1 algorithm, and does not physically exist in the
        /// certificate.
        /// </summary>
        [JsonProperty(PropertyName = "x509Thumbprint")]
        public DeviceTwinInfoX509Thumbprint X509Thumbprint { get; set; }

    }
}
