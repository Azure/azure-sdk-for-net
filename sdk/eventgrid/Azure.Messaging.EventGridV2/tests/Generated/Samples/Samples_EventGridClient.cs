// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.Messaging.EventGrid.Namespaces;
using NUnit.Framework;

namespace Azure.Messaging.EventGrid.Namespaces.Samples
{
    public partial class Samples_EventGridClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvent_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                source = "<source>",
                type = "<type>",
                specversion = "<specversion>",
            });
            Response response = client.PublishCloudEvent("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvent_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                source = "<source>",
                type = "<type>",
                specversion = "<specversion>",
            });
            Response response = await client.PublishCloudEventAsync("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvent_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                source = "<source>",
                data = new object(),
                data_base64 = new object(),
                type = "<type>",
                time = "2022-05-10T14:57:31.2311892-04:00",
                specversion = "<specversion>",
                dataschema = "<dataschema>",
                datacontenttype = "<datacontenttype>",
                subject = "<subject>",
            });
            Response response = client.PublishCloudEvent("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvent_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                source = "<source>",
                data = new object(),
                data_base64 = new object(),
                type = "<type>",
                time = "2022-05-10T14:57:31.2311892-04:00",
                specversion = "<specversion>",
                dataschema = "<dataschema>",
                datacontenttype = "<datacontenttype>",
                subject = "<subject>",
            });
            Response response = await client.PublishCloudEventAsync("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvents_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object[]
            {
new
{
id = "<id>",
source = "<source>",
type = "<type>",
specversion = "<specversion>",
}
            });
            Response response = client.PublishCloudEvents("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvents_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object[]
            {
new
{
id = "<id>",
source = "<source>",
type = "<type>",
specversion = "<specversion>",
}
            });
            Response response = await client.PublishCloudEventsAsync("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvents_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object[]
            {
new
{
id = "<id>",
source = "<source>",
data = new object(),
data_base64 = new object(),
type = "<type>",
time = "2022-05-10T14:57:31.2311892-04:00",
specversion = "<specversion>",
dataschema = "<dataschema>",
datacontenttype = "<datacontenttype>",
subject = "<subject>",
}
            });
            Response response = client.PublishCloudEvents("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvents_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object[]
            {
new
{
id = "<id>",
source = "<source>",
data = new object(),
data_base64 = new object(),
type = "<type>",
time = "2022-05-10T14:57:31.2311892-04:00",
specversion = "<specversion>",
dataschema = "<dataschema>",
datacontenttype = "<datacontenttype>",
subject = "<subject>",
}
            });
            Response response = await client.PublishCloudEventsAsync("<topicName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReceiveCloudEvents_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReceiveCloudEvents_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReceiveCloudEvents_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", 1234, TimeSpan.FromSeconds(10), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReceiveCloudEvents_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", 1234, TimeSpan.FromSeconds(10), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcknowledgeCloudEvents_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcknowledgeCloudEvents_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcknowledgeCloudEvents_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcknowledgeCloudEvents_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReleaseCloudEvents_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReleaseCloudEvents_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReleaseCloudEvents_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReleaseCloudEvents_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RejectCloudEvents_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RejectCloudEvents_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RejectCloudEvents_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RejectCloudEvents_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            EventGridClient client = new EventGridClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                lockTokens = new object[]
            {
"<lockTokens>"
            },
            });
            Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }
    }
}
