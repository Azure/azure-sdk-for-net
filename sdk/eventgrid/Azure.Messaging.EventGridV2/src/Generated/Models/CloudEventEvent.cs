// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace AzureMessagingEventGrid.Models
{
    /// <summary> Properties of an event published to an Azure Messaging EventGrid Namespace topic using the CloudEvent 1.0 Schema. </summary>
    public partial class CloudEventEvent
    {
        /// <summary> Initializes a new instance of CloudEventEvent. </summary>
        /// <param name="id"> An identifier for the event. The combination of id and source must be unique for each distinct event. </param>
        /// <param name="source"> Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event. </param>
        /// <param name="type"> Type of event related to the originating occurrence. </param>
        /// <param name="specVersion"> The version of the CloudEvents specification which the event uses. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="source"/>, <paramref name="type"/> or <paramref name="specVersion"/> is null. </exception>
        public CloudEventEvent(string id, string source, string type, string specVersion)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(source, nameof(source));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(specVersion, nameof(specVersion));

            Id = id;
            Source = source;
            Type = type;
            SpecVersion = specVersion;
        }

        /// <summary> Initializes a new instance of CloudEventEvent. </summary>
        /// <param name="id"> An identifier for the event. The combination of id and source must be unique for each distinct event. </param>
        /// <param name="source"> Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event. </param>
        /// <param name="data"> Event data specific to the event type. </param>
        /// <param name="type"> Type of event related to the originating occurrence. </param>
        /// <param name="time"> The time (in UTC) the event was generated, in RFC3339 format. </param>
        /// <param name="specVersion"> The version of the CloudEvents specification which the event uses. </param>
        /// <param name="dataSchema"> Identifies the schema that data adheres to. </param>
        /// <param name="dataContentType"> Content type of data value. </param>
        /// <param name="subject"> This describes the subject of the event in the context of the event producer (identified by source). </param>
        internal CloudEventEvent(string id, string source, Models.object data, string type, DateTimeOffset? time, string specVersion, string dataSchema, string dataContentType, string subject)
        {
            Id = id;
            Source = source;
            Data = data;
            Type = type;
            Time = time;
            SpecVersion = specVersion;
            DataSchema = dataSchema;
            DataContentType = dataContentType;
            Subject = subject;
        }

        /// <summary> An identifier for the event. The combination of id and source must be unique for each distinct event. </summary>
        public string Id { get; set; }
        /// <summary> Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event. </summary>
        public string Source { get; set; }
        /// <summary> Event data specific to the event type. </summary>
        public Models.object Data { get; set; }
        /// <summary> Type of event related to the originating occurrence. </summary>
        public string Type { get; set; }
        /// <summary> The time (in UTC) the event was generated, in RFC3339 format. </summary>
        public DateTimeOffset? Time { get; set; }
        /// <summary> The version of the CloudEvents specification which the event uses. </summary>
        public string SpecVersion { get; set; }
        /// <summary> Identifies the schema that data adheres to. </summary>
        public string DataSchema { get; set; }
        /// <summary> Content type of data value. </summary>
        public string DataContentType { get; set; }
        /// <summary> This describes the subject of the event in the context of the event producer (identified by source). </summary>
        public string Subject { get; set; }
    }
}
