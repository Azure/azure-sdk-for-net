<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="PublishCloudEventAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEventAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
});
Response response = await client.PublishCloudEventAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEventAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    data = new object(),
    data_base64 = new object(),
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
});
Response response = await client.PublishCloudEventAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="PublishCloudEvent(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEvent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
});
Response response = client.PublishCloudEvent("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEvent with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    data = new object(),
    data_base64 = new object(),
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
});
Response response = client.PublishCloudEvent("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="PublishCloudEventsAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        type = "<type>",
        specversion = "<specversion>",
    }
});
Response response = await client.PublishCloudEventsAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        data = new object(),
        data_base64 = new object(),
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
});
Response response = await client.PublishCloudEventsAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="PublishCloudEvents(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        type = "<type>",
        specversion = "<specversion>",
    }
});
Response response = client.PublishCloudEvents("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        data = new object(),
        data_base64 = new object(),
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
});
Response response = client.PublishCloudEvents("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReceiveCloudEventsAsync(string,string,int?,TimeSpan?,RequestContext)">
      <example>
This sample shows how to call ReceiveCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveCloudEventsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", 1234, TimeSpan.FromSeconds(10), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code></example>
    </member>
    <member name="ReceiveCloudEvents(string,string,int?,TimeSpan?,RequestContext)">
      <example>
This sample shows how to call ReceiveCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveCloudEvents with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", 1234, TimeSpan.FromSeconds(10), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code></example>
    </member>
    <member name="AcknowledgeCloudEventsAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AcknowledgeCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call AcknowledgeCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="AcknowledgeCloudEvents(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AcknowledgeCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call AcknowledgeCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="ReleaseCloudEventsAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ReleaseCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call ReleaseCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="ReleaseCloudEvents(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call ReleaseCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call ReleaseCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="RejectCloudEventsAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RejectCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RejectCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="RejectCloudEvents(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RejectCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RejectCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
  </members>
</doc>