<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="PublishCloudEventAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishCloudEventAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
};

Response response = await client.PublishCloudEventAsync("<topicName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PublishCloudEventAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    data = new {},
    data_base64 = new {},
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
};

Response response = await client.PublishCloudEventAsync("<topicName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>CloudEventEvent</c>:
<code>{
  id: string, # Required. An identifier for the event. The combination of id and source must be unique for each distinct event.
  source: string, # Required. Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
  data: any, # Optional. Event data specific to the event type.
  data_base64: BinaryData, # Optional. Event data specific to the event type, encoded as a base64 string.
  type: string, # Required. Type of event related to the originating occurrence.
  time: string (date &amp; time), # Optional. The time (in UTC) the event was generated, in RFC3339 format.
  specversion: string, # Required. The version of the CloudEvents specification which the event uses.
  dataschema: string, # Optional. Identifies the schema that data adheres to.
  datacontenttype: string, # Optional. Content type of data value.
  subject: string, # Optional. This describes the subject of the event in the context of the event producer (identified by source).
}
</code>

</remarks>
    </member>
    <member name="PublishCloudEvent(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishCloudEvent with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
};

Response response = client.PublishCloudEvent("<topicName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PublishCloudEvent with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    data = new {},
    data_base64 = new {},
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
};

Response response = client.PublishCloudEvent("<topicName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>CloudEventEvent</c>:
<code>{
  id: string, # Required. An identifier for the event. The combination of id and source must be unique for each distinct event.
  source: string, # Required. Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
  data: any, # Optional. Event data specific to the event type.
  data_base64: BinaryData, # Optional. Event data specific to the event type, encoded as a base64 string.
  type: string, # Required. Type of event related to the originating occurrence.
  time: string (date &amp; time), # Optional. The time (in UTC) the event was generated, in RFC3339 format.
  specversion: string, # Required. The version of the CloudEvents specification which the event uses.
  dataschema: string, # Optional. Identifies the schema that data adheres to.
  datacontenttype: string, # Optional. Content type of data value.
  subject: string, # Optional. This describes the subject of the event in the context of the event producer (identified by source).
}
</code>

</remarks>
    </member>
    <member name="PublishBatchOfCloudEventsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishBatchOfCloudEventsAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        data = new {},
        data_base64 = new {},
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
};

Response response = await client.PublishBatchOfCloudEventsAsync("<topicName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>CloudEventEvent</c>:
<code>{
  id: string, # Required. An identifier for the event. The combination of id and source must be unique for each distinct event.
  source: string, # Required. Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
  data: any, # Optional. Event data specific to the event type.
  data_base64: BinaryData, # Optional. Event data specific to the event type, encoded as a base64 string.
  type: string, # Required. Type of event related to the originating occurrence.
  time: string (date &amp; time), # Optional. The time (in UTC) the event was generated, in RFC3339 format.
  specversion: string, # Required. The version of the CloudEvents specification which the event uses.
  dataschema: string, # Optional. Identifies the schema that data adheres to.
  datacontenttype: string, # Optional. Content type of data value.
  subject: string, # Optional. This describes the subject of the event in the context of the event producer (identified by source).
}
</code>

</remarks>
    </member>
    <member name="PublishBatchOfCloudEvents(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishBatchOfCloudEvents with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        data = new {},
        data_base64 = new {},
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
};

Response response = client.PublishBatchOfCloudEvents("<topicName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>CloudEventEvent</c>:
<code>{
  id: string, # Required. An identifier for the event. The combination of id and source must be unique for each distinct event.
  source: string, # Required. Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
  data: any, # Optional. Event data specific to the event type.
  data_base64: BinaryData, # Optional. Event data specific to the event type, encoded as a base64 string.
  type: string, # Required. Type of event related to the originating occurrence.
  time: string (date &amp; time), # Optional. The time (in UTC) the event was generated, in RFC3339 format.
  specversion: string, # Required. The version of the CloudEvents specification which the event uses.
  dataschema: string, # Optional. Identifies the schema that data adheres to.
  datacontenttype: string, # Optional. Content type of data value.
  subject: string, # Optional. This describes the subject of the event in the context of the event producer (identified by source).
}
</code>

</remarks>
    </member>
    <member name="ReceiveBatchOfCloudEventsAsync(String,String,Int32,Int32,RequestContext)">
<example>
This sample shows how to call ReceiveBatchOfCloudEventsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveBatchOfCloudEventsAsync("<topicName>", "<eventSubscriptionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveBatchOfCloudEventsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveBatchOfCloudEventsAsync("<topicName>", "<eventSubscriptionName>", 1234, 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ReceiveResponse</c>:
<code>{
  value: [
    {
      brokerProperties: {
        lockToken: {
          lockToken: string, # Required. The token used to lock the event.
        }, # Required. The token used to lock the event.
      }, # Required. The Event Broker details.
      event: {
        id: string, # Required. An identifier for the event. The combination of id and source must be unique for each distinct event.
        source: string, # Required. Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
        data: any, # Optional. Event data specific to the event type.
        data_base64: BinaryData, # Optional. Event data specific to the event type, encoded as a base64 string.
        type: string, # Required. Type of event related to the originating occurrence.
        time: string (date &amp; time), # Optional. The time (in UTC) the event was generated, in RFC3339 format.
        specversion: string, # Required. The version of the CloudEvents specification which the event uses.
        dataschema: string, # Optional. Identifies the schema that data adheres to.
        datacontenttype: string, # Optional. Content type of data value.
        subject: string, # Optional. This describes the subject of the event in the context of the event producer (identified by source).
      }, # Required. Cloud Event details.
    }
  ], # Required. Array of receive responses, one per cloud event.
}
</code>

</remarks>
    </member>
    <member name="ReceiveBatchOfCloudEvents(String,String,Int32,Int32,RequestContext)">
<example>
This sample shows how to call ReceiveBatchOfCloudEvents with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveBatchOfCloudEvents("<topicName>", "<eventSubscriptionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveBatchOfCloudEvents with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveBatchOfCloudEvents("<topicName>", "<eventSubscriptionName>", 1234, 1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ReceiveResponse</c>:
<code>{
  value: [
    {
      brokerProperties: {
        lockToken: {
          lockToken: string, # Required. The token used to lock the event.
        }, # Required. The token used to lock the event.
      }, # Required. The Event Broker details.
      event: {
        id: string, # Required. An identifier for the event. The combination of id and source must be unique for each distinct event.
        source: string, # Required. Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
        data: any, # Optional. Event data specific to the event type.
        data_base64: BinaryData, # Optional. Event data specific to the event type, encoded as a base64 string.
        type: string, # Required. Type of event related to the originating occurrence.
        time: string (date &amp; time), # Optional. The time (in UTC) the event was generated, in RFC3339 format.
        specversion: string, # Required. The version of the CloudEvents specification which the event uses.
        dataschema: string, # Optional. Identifies the schema that data adheres to.
        datacontenttype: string, # Optional. Content type of data value.
        subject: string, # Optional. This describes the subject of the event in the context of the event producer (identified by source).
      }, # Required. Cloud Event details.
    }
  ], # Required. Array of receive responses, one per cloud event.
}
</code>

</remarks>
    </member>
    <member name="AcknowledgeBatchOfCloudEventsAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call AcknowledgeBatchOfCloudEventsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = await client.AcknowledgeBatchOfCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>LockTokenInput</c>:
<code>{
  lockTokens: [string], # Required. LockTokens
}
</code>

Response Body:

Schema for <c>LockTokensResponse</c>:
<code>{
  failedLockTokens: [
    {
      lockToken: {
        lockToken: string, # Required. The token used to lock the event.
      }, # Required. LockToken value
      errorCode: number, # Required. Error code
      errorDescription: string, # Required. Description of the error
    }
  ], # Required. Array of LockToken values for failed cloud events.
  succeededLockTokens: [string], # Required. Array of LockToken values for succeeded cloud events.
}
</code>

</remarks>
    </member>
    <member name="AcknowledgeBatchOfCloudEvents(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call AcknowledgeBatchOfCloudEvents with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = client.AcknowledgeBatchOfCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>LockTokenInput</c>:
<code>{
  lockTokens: [string], # Required. LockTokens
}
</code>

Response Body:

Schema for <c>LockTokensResponse</c>:
<code>{
  failedLockTokens: [
    {
      lockToken: {
        lockToken: string, # Required. The token used to lock the event.
      }, # Required. LockToken value
      errorCode: number, # Required. Error code
      errorDescription: string, # Required. Description of the error
    }
  ], # Required. Array of LockToken values for failed cloud events.
  succeededLockTokens: [string], # Required. Array of LockToken values for succeeded cloud events.
}
</code>

</remarks>
    </member>
    <member name="ReleaseBatchOfCloudEventsAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call ReleaseBatchOfCloudEventsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new[] {
    new {
        lockToken = "<lockToken>",
    }
};

Response response = await client.ReleaseBatchOfCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>LockToken</c>:
<code>{
  lockToken: string, # Required. The token used to lock the event.
}
</code>

Response Body:

Schema for <c>LockTokensResponse</c>:
<code>{
  failedLockTokens: [
    {
      lockToken: {
        lockToken: string, # Required. The token used to lock the event.
      }, # Required. LockToken value
      errorCode: number, # Required. Error code
      errorDescription: string, # Required. Description of the error
    }
  ], # Required. Array of LockToken values for failed cloud events.
  succeededLockTokens: [string], # Required. Array of LockToken values for succeeded cloud events.
}
</code>

</remarks>
    </member>
    <member name="ReleaseBatchOfCloudEvents(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call ReleaseBatchOfCloudEvents with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new[] {
    new {
        lockToken = "<lockToken>",
    }
};

Response response = client.ReleaseBatchOfCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>LockToken</c>:
<code>{
  lockToken: string, # Required. The token used to lock the event.
}
</code>

Response Body:

Schema for <c>LockTokensResponse</c>:
<code>{
  failedLockTokens: [
    {
      lockToken: {
        lockToken: string, # Required. The token used to lock the event.
      }, # Required. LockToken value
      errorCode: number, # Required. Error code
      errorDescription: string, # Required. Description of the error
    }
  ], # Required. Array of LockToken values for failed cloud events.
  succeededLockTokens: [string], # Required. Array of LockToken values for succeeded cloud events.
}
</code>

</remarks>
    </member>
  </members>
</doc>