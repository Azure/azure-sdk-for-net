// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(AcsRecordingFileStatusUpdatedEventDataConverter))]
    public partial class AcsRecordingFileStatusUpdatedEventData
    {
        internal static AcsRecordingFileStatusUpdatedEventData DeserializeAcsRecordingFileStatusUpdatedEventData(JsonElement element)
        {
            Optional<AcsRecordingStorageInfoProperties> recordingStorageInfo = default;
            Optional<DateTimeOffset> recordingStartTime = default;
            Optional<long> recordingDurationMs = default;
            Optional<AcsRecordingContentType> recordingContentType = default;
            Optional<AcsRecordingChannelType> recordingChannelType = default;
            Optional<AcsRecordingFormatType> recordingFormatType = default;
            Optional<string> sessionEndReason = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recordingStorageInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recordingStorageInfo = AcsRecordingStorageInfoProperties.DeserializeAcsRecordingStorageInfoProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("recordingStartTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recordingStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recordingDurationMs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recordingDurationMs = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("recordingContentType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recordingContentType = new AcsRecordingContentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recordingChannelType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recordingChannelType = new AcsRecordingChannelType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recordingFormatType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recordingFormatType = new AcsRecordingFormatType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sessionEndReason"u8))
                {
                    sessionEndReason = property.Value.GetString();
                    continue;
                }
            }
            return new AcsRecordingFileStatusUpdatedEventData(recordingStorageInfo.Value, Optional.ToNullable(recordingStartTime), Optional.ToNullable(recordingDurationMs), Optional.ToNullable(recordingContentType), Optional.ToNullable(recordingChannelType), Optional.ToNullable(recordingFormatType), sessionEndReason.Value);
        }

        internal partial class AcsRecordingFileStatusUpdatedEventDataConverter : JsonConverter<AcsRecordingFileStatusUpdatedEventData>
        {
            public override void Write(Utf8JsonWriter writer, AcsRecordingFileStatusUpdatedEventData model, JsonSerializerOptions options)
            {
                throw new NotImplementedException();
            }
            public override AcsRecordingFileStatusUpdatedEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAcsRecordingFileStatusUpdatedEventData(document.RootElement);
            }
        }
    }
}
