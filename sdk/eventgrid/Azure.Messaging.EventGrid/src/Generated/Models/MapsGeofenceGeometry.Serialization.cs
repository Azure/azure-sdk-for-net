// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    public partial class MapsGeofenceGeometry
    {
        internal static MapsGeofenceGeometry DeserializeMapsGeofenceGeometry(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> deviceId = default;
            Optional<float> distance = default;
            Optional<string> geometryId = default;
            Optional<float> nearestLat = default;
            Optional<float> nearestLon = default;
            Optional<string> udId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceId"u8))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("distance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    distance = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("geometryId"u8))
                {
                    geometryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nearestLat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nearestLat = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("nearestLon"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nearestLon = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("udId"u8))
                {
                    udId = property.Value.GetString();
                    continue;
                }
            }
            return new MapsGeofenceGeometry(deviceId.Value, Optional.ToNullable(distance), geometryId.Value, Optional.ToNullable(nearestLat), Optional.ToNullable(nearestLon), udId.Value);
        }
    }
}
