// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(MapsGeofenceGeometryConverter))]
    public partial class MapsGeofenceGeometry
    {
        internal static MapsGeofenceGeometry DeserializeMapsGeofenceGeometry(JsonElement element)
        {
            Optional<string> deviceId = default;
            Optional<float> distance = default;
            Optional<string> geometryId = default;
            Optional<float> nearestLat = default;
            Optional<float> nearestLon = default;
            Optional<string> udId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceId"))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("distance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    distance = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("geometryId"))
                {
                    geometryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nearestLat"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nearestLat = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("nearestLon"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nearestLon = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("udId"))
                {
                    udId = property.Value.GetString();
                    continue;
                }
            }
            return new MapsGeofenceGeometry(deviceId.Value, Optional.ToNullable(distance), geometryId.Value, Optional.ToNullable(nearestLat), Optional.ToNullable(nearestLon), udId.Value);
        }

        internal partial class MapsGeofenceGeometryConverter : JsonConverter<MapsGeofenceGeometry>
        {
            public override void Write(Utf8JsonWriter writer, MapsGeofenceGeometry model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override MapsGeofenceGeometry Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeMapsGeofenceGeometry(document.RootElement);
            }
        }
    }
}
