// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of common properties of all calling events. </summary>
    public partial class AcsCallingEventProperties
    {
        /// <summary> Initializes a new instance of <see cref="AcsCallingEventProperties"/>. </summary>
        /// <param name="startedBy"> The call participant who initiated the call. </param>
        /// <param name="serverCallId"> The callId of the server. </param>
        /// <param name="correlationId"> The correlation ID of the calling event. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="startedBy"/>, <paramref name="serverCallId"/> or <paramref name="correlationId"/> is null. </exception>
        internal AcsCallingEventProperties(AcsCallParticipantProperties startedBy, string serverCallId, string correlationId)
        {
            Argument.AssertNotNull(startedBy, nameof(startedBy));
            Argument.AssertNotNull(serverCallId, nameof(serverCallId));
            Argument.AssertNotNull(correlationId, nameof(correlationId));

            StartedBy = startedBy;
            ServerCallId = serverCallId;
            CorrelationId = correlationId;
        }

        /// <summary> Initializes a new instance of <see cref="AcsCallingEventProperties"/>. </summary>
        /// <param name="startedBy"> The call participant who initiated the call. </param>
        /// <param name="serverCallId"> The callId of the server. </param>
        /// <param name="group"> The group metadata. </param>
        /// <param name="room"> The group metadata. </param>
        /// <param name="isTwoParty"> Is two-party in calling event. </param>
        /// <param name="correlationId"> The correlation ID of the calling event. </param>
        /// <param name="isRoomsCall"> Is the calling event a room call. </param>
        internal AcsCallingEventProperties(AcsCallParticipantProperties startedBy, string serverCallId, AcsCallGroupProperties group, AcsCallRoomProperties room, bool? isTwoParty, string correlationId, bool? isRoomsCall)
        {
            StartedBy = startedBy;
            ServerCallId = serverCallId;
            Group = group;
            Room = room;
            IsTwoParty = isTwoParty;
            CorrelationId = correlationId;
            IsRoomsCall = isRoomsCall;
        }

        /// <summary> The call participant who initiated the call. </summary>
        public AcsCallParticipantProperties StartedBy { get; }
        /// <summary> The callId of the server. </summary>
        public string ServerCallId { get; }
        /// <summary> The group metadata. </summary>
        public AcsCallGroupProperties Group { get; }
        /// <summary> The group metadata. </summary>
        public AcsCallRoomProperties Room { get; }
        /// <summary> Is two-party in calling event. </summary>
        public bool? IsTwoParty { get; }
        /// <summary> The correlation ID of the calling event. </summary>
        public string CorrelationId { get; }
        /// <summary> Is the calling event a room call. </summary>
        public bool? IsRoomsCall { get; }
    }
}
