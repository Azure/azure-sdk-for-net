// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(DeviceTwinInfoConverter))]
    public partial class DeviceTwinInfo
    {
        internal static DeviceTwinInfo DeserializeDeviceTwinInfo(JsonElement element)
        {
            Optional<string> authenticationType = default;
            Optional<float> cloudToDeviceMessageCount = default;
            Optional<string> connectionState = default;
            Optional<string> deviceId = default;
            Optional<string> etag = default;
            Optional<string> lastActivityTime = default;
            Optional<DeviceTwinInfoProperties> properties = default;
            Optional<string> status = default;
            Optional<string> statusUpdateTime = default;
            Optional<float> version = default;
            Optional<DeviceTwinInfoX509Thumbprint> x509Thumbprint = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("authenticationType"))
                {
                    authenticationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloudToDeviceMessageCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudToDeviceMessageCount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("connectionState"))
                {
                    connectionState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceId"))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastActivityTime"))
                {
                    lastActivityTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    properties = DeviceTwinInfoProperties.DeserializeDeviceTwinInfoProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("statusUpdateTime"))
                {
                    statusUpdateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    version = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("x509Thumbprint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    x509Thumbprint = DeviceTwinInfoX509Thumbprint.DeserializeDeviceTwinInfoX509Thumbprint(property.Value);
                    continue;
                }
            }
            return new DeviceTwinInfo(authenticationType.Value, Optional.ToNullable(cloudToDeviceMessageCount), connectionState.Value, deviceId.Value, etag.Value, lastActivityTime.Value, properties.Value, status.Value, statusUpdateTime.Value, Optional.ToNullable(version), x509Thumbprint.Value);
        }

        internal partial class DeviceTwinInfoConverter : JsonConverter<DeviceTwinInfo>
        {
            public override void Write(Utf8JsonWriter writer, DeviceTwinInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override DeviceTwinInfo Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeDeviceTwinInfo(document.RootElement);
            }
        }
    }
}
