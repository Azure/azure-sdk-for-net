// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Various states a job can be in. </summary>
    public readonly partial struct AgriFoodFarmingJobStatus : IEquatable<AgriFoodFarmingJobStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AgriFoodFarmingJobStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgriFoodFarmingJobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WaitingValue = "Waiting";
        private const string RunningValue = "Running";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CancelledValue = "Cancelled";

        /// <summary> Waiting. </summary>
        public static AgriFoodFarmingJobStatus Waiting { get; } = new AgriFoodFarmingJobStatus(WaitingValue);
        /// <summary> Running. </summary>
        public static AgriFoodFarmingJobStatus Running { get; } = new AgriFoodFarmingJobStatus(RunningValue);
        /// <summary> Succeeded. </summary>
        public static AgriFoodFarmingJobStatus Succeeded { get; } = new AgriFoodFarmingJobStatus(SucceededValue);
        /// <summary> Failed. </summary>
        public static AgriFoodFarmingJobStatus Failed { get; } = new AgriFoodFarmingJobStatus(FailedValue);
        /// <summary> Cancelled. </summary>
        public static AgriFoodFarmingJobStatus Cancelled { get; } = new AgriFoodFarmingJobStatus(CancelledValue);
        /// <summary> Determines if two <see cref="AgriFoodFarmingJobStatus"/> values are the same. </summary>
        public static bool operator ==(AgriFoodFarmingJobStatus left, AgriFoodFarmingJobStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgriFoodFarmingJobStatus"/> values are not the same. </summary>
        public static bool operator !=(AgriFoodFarmingJobStatus left, AgriFoodFarmingJobStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AgriFoodFarmingJobStatus"/>. </summary>
        public static implicit operator AgriFoodFarmingJobStatus(string value) => new AgriFoodFarmingJobStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgriFoodFarmingJobStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgriFoodFarmingJobStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
