// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(MediaLiveEventIncomingVideoStreamsOutOfSyncEventDataConverter))]
    public partial class MediaLiveEventIncomingVideoStreamsOutOfSyncEventData : IUtf8JsonSerializable, IJsonModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(MediaLiveEventIncomingVideoStreamsOutOfSyncEventData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(FirstTimestamp))
            {
                writer.WritePropertyName("firstTimestamp"u8);
                writer.WriteStringValue(FirstTimestamp);
            }
            if (options.Format != "W" && Optional.IsDefined(FirstDuration))
            {
                writer.WritePropertyName("firstDuration"u8);
                writer.WriteStringValue(FirstDuration);
            }
            if (options.Format != "W" && Optional.IsDefined(SecondTimestamp))
            {
                writer.WritePropertyName("secondTimestamp"u8);
                writer.WriteStringValue(SecondTimestamp);
            }
            if (options.Format != "W" && Optional.IsDefined(SecondDuration))
            {
                writer.WritePropertyName("secondDuration"u8);
                writer.WriteStringValue(SecondDuration);
            }
            if (options.Format != "W" && Optional.IsDefined(Timescale))
            {
                writer.WritePropertyName("timescale"u8);
                writer.WriteStringValue(Timescale);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MediaLiveEventIncomingVideoStreamsOutOfSyncEventData IJsonModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(MediaLiveEventIncomingVideoStreamsOutOfSyncEventData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMediaLiveEventIncomingVideoStreamsOutOfSyncEventData(document.RootElement, options);
        }

        internal static MediaLiveEventIncomingVideoStreamsOutOfSyncEventData DeserializeMediaLiveEventIncomingVideoStreamsOutOfSyncEventData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> firstTimestamp = default;
            Optional<string> firstDuration = default;
            Optional<string> secondTimestamp = default;
            Optional<string> secondDuration = default;
            Optional<string> timescale = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("firstTimestamp"u8))
                {
                    firstTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firstDuration"u8))
                {
                    firstDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secondTimestamp"u8))
                {
                    secondTimestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secondDuration"u8))
                {
                    secondDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timescale"u8))
                {
                    timescale = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MediaLiveEventIncomingVideoStreamsOutOfSyncEventData(firstTimestamp.Value, firstDuration.Value, secondTimestamp.Value, secondDuration.Value, timescale.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(MediaLiveEventIncomingVideoStreamsOutOfSyncEventData)} does not support '{options.Format}' format.");
            }
        }

        MediaLiveEventIncomingVideoStreamsOutOfSyncEventData IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMediaLiveEventIncomingVideoStreamsOutOfSyncEventData(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(MediaLiveEventIncomingVideoStreamsOutOfSyncEventData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class MediaLiveEventIncomingVideoStreamsOutOfSyncEventDataConverter : JsonConverter<MediaLiveEventIncomingVideoStreamsOutOfSyncEventData>
        {
            public override void Write(Utf8JsonWriter writer, MediaLiveEventIncomingVideoStreamsOutOfSyncEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override MediaLiveEventIncomingVideoStreamsOutOfSyncEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeMediaLiveEventIncomingVideoStreamsOutOfSyncEventData(document.RootElement);
            }
        }
    }
}
