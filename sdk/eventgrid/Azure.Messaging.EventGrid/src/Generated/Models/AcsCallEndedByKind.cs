// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> The type of the call ended by. </summary>
    public readonly partial struct AcsCallEndedByKind : IEquatable<AcsCallEndedByKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AcsCallEndedByKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AcsCallEndedByKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ParticipantValue = "Participant";
        private const string MicrosoftInternalValue = "MicrosoftInternal";

        /// <summary> Call end initiator is a participant. </summary>
        public static AcsCallEndedByKind Participant { get; } = new AcsCallEndedByKind(ParticipantValue);
        /// <summary> Call end initiator is the local participant. </summary>
        public static AcsCallEndedByKind MicrosoftInternal { get; } = new AcsCallEndedByKind(MicrosoftInternalValue);
        /// <summary> Determines if two <see cref="AcsCallEndedByKind"/> values are the same. </summary>
        public static bool operator ==(AcsCallEndedByKind left, AcsCallEndedByKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AcsCallEndedByKind"/> values are not the same. </summary>
        public static bool operator !=(AcsCallEndedByKind left, AcsCallEndedByKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AcsCallEndedByKind"/>. </summary>
        public static implicit operator AcsCallEndedByKind(string value) => new AcsCallEndedByKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AcsCallEndedByKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AcsCallEndedByKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
