// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(AcsSmsDeliveryReportReceivedEventDataConverter))]
    public partial class AcsSmsDeliveryReportReceivedEventData : IUtf8JsonSerializable, IModelJsonSerializable<AcsSmsDeliveryReportReceivedEventData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<AcsSmsDeliveryReportReceivedEventData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<AcsSmsDeliveryReportReceivedEventData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AcsSmsDeliveryReportReceivedEventData>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(DeliveryStatus))
            {
                writer.WritePropertyName("deliveryStatus"u8);
                writer.WriteStringValue(DeliveryStatus);
            }
            if (Optional.IsDefined(DeliveryStatusDetails))
            {
                writer.WritePropertyName("deliveryStatusDetails"u8);
                writer.WriteStringValue(DeliveryStatusDetails);
            }
            if (Optional.IsCollectionDefined(DeliveryAttempts))
            {
                writer.WritePropertyName("deliveryAttempts"u8);
                writer.WriteStartArray();
                foreach (var item in DeliveryAttempts)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<AcsSmsDeliveryAttemptProperties>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ReceivedTimestamp))
            {
                writer.WritePropertyName("receivedTimestamp"u8);
                writer.WriteStringValue(ReceivedTimestamp.Value, "O");
            }
            if (Optional.IsDefined(Tag))
            {
                writer.WritePropertyName("tag"u8);
                writer.WriteStringValue(Tag);
            }
            if (Optional.IsDefined(MessageId))
            {
                writer.WritePropertyName("messageId"u8);
                writer.WriteStringValue(MessageId);
            }
            if (Optional.IsDefined(From))
            {
                writer.WritePropertyName("from"u8);
                writer.WriteStringValue(From);
            }
            if (Optional.IsDefined(To))
            {
                writer.WritePropertyName("to"u8);
                writer.WriteStringValue(To);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static AcsSmsDeliveryReportReceivedEventData DeserializeAcsSmsDeliveryReportReceivedEventData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> deliveryStatus = default;
            Optional<string> deliveryStatusDetails = default;
            Optional<IReadOnlyList<AcsSmsDeliveryAttemptProperties>> deliveryAttempts = default;
            Optional<DateTimeOffset> receivedTimestamp = default;
            Optional<string> tag = default;
            Optional<string> messageId = default;
            Optional<string> @from = default;
            Optional<string> to = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deliveryStatus"u8))
                {
                    deliveryStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deliveryStatusDetails"u8))
                {
                    deliveryStatusDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deliveryAttempts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AcsSmsDeliveryAttemptProperties> array = new List<AcsSmsDeliveryAttemptProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AcsSmsDeliveryAttemptProperties.DeserializeAcsSmsDeliveryAttemptProperties(item));
                    }
                    deliveryAttempts = array;
                    continue;
                }
                if (property.NameEquals("receivedTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    receivedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("tag"u8))
                {
                    tag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageId"u8))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("from"u8))
                {
                    @from = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("to"u8))
                {
                    to = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new AcsSmsDeliveryReportReceivedEventData(messageId.Value, @from.Value, to.Value, deliveryStatus.Value, deliveryStatusDetails.Value, Optional.ToList(deliveryAttempts), Optional.ToNullable(receivedTimestamp), tag.Value, rawData);
        }

        AcsSmsDeliveryReportReceivedEventData IModelJsonSerializable<AcsSmsDeliveryReportReceivedEventData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AcsSmsDeliveryReportReceivedEventData>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeAcsSmsDeliveryReportReceivedEventData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<AcsSmsDeliveryReportReceivedEventData>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AcsSmsDeliveryReportReceivedEventData>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        AcsSmsDeliveryReportReceivedEventData IModelSerializable<AcsSmsDeliveryReportReceivedEventData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<AcsSmsDeliveryReportReceivedEventData>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeAcsSmsDeliveryReportReceivedEventData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="AcsSmsDeliveryReportReceivedEventData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="AcsSmsDeliveryReportReceivedEventData"/> to convert. </param>
        public static implicit operator RequestContent(AcsSmsDeliveryReportReceivedEventData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="AcsSmsDeliveryReportReceivedEventData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator AcsSmsDeliveryReportReceivedEventData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeAcsSmsDeliveryReportReceivedEventData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }

        internal partial class AcsSmsDeliveryReportReceivedEventDataConverter : JsonConverter<AcsSmsDeliveryReportReceivedEventData>
        {
            public override void Write(Utf8JsonWriter writer, AcsSmsDeliveryReportReceivedEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override AcsSmsDeliveryReportReceivedEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAcsSmsDeliveryReportReceivedEventData(document.RootElement);
            }
        }
    }
}
