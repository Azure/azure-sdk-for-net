// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(EdgeSolutionVersionPublishedEventDataConverter))]
    public partial class EdgeSolutionVersionPublishedEventData
    {
        internal static EdgeSolutionVersionPublishedEventData DeserializeEdgeSolutionVersionPublishedEventData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string externalValidationId = default;
            string targetId = default;
            string solutionTemplateId = default;
            string solutionTemplateVersionId = default;
            string solutionVersionId = default;
            string apiVersion = default;
            Uri callbackUrl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("externalValidationId"u8))
                {
                    externalValidationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetId"u8))
                {
                    targetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionTemplateId"u8))
                {
                    solutionTemplateId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionTemplateVersionId"u8))
                {
                    solutionTemplateVersionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiVersion"u8))
                {
                    apiVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("callbackUrl"u8))
                {
                    callbackUrl = new Uri(property.Value.GetString());
                    continue;
                }
            }
            return new EdgeSolutionVersionPublishedEventData(
                externalValidationId,
                targetId,
                solutionTemplateId,
                solutionTemplateVersionId,
                solutionVersionId,
                apiVersion,
                callbackUrl);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static EdgeSolutionVersionPublishedEventData FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeEdgeSolutionVersionPublishedEventData(document.RootElement);
        }

        internal partial class EdgeSolutionVersionPublishedEventDataConverter : JsonConverter<EdgeSolutionVersionPublishedEventData>
        {
            public override void Write(Utf8JsonWriter writer, EdgeSolutionVersionPublishedEventData model, JsonSerializerOptions options)
            {
                throw new NotImplementedException();
            }

            public override EdgeSolutionVersionPublishedEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeEdgeSolutionVersionPublishedEventData(document.RootElement);
            }
        }
    }
}
