// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Messaging.EventGrid.Models
{
    /// <summary> Properties of an event published to an Event Grid topic using the EventGrid Schema. </summary>
    internal partial class EventGridEventInternal
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EventGridEventInternal"/>. </summary>
        /// <param name="id"> An unique identifier for the event. </param>
        /// <param name="subject"> A resource path relative to the topic path. </param>
        /// <param name="data"> Event data specific to the event type. </param>
        /// <param name="eventType"> The type of the event that occurred. </param>
        /// <param name="eventTime"> The time (in UTC) the event was generated. </param>
        /// <param name="dataVersion"> The schema version of the data object. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="subject"/>, <paramref name="eventType"/> or <paramref name="dataVersion"/> is null. </exception>
        public EventGridEventInternal(string id, string subject, JsonElement data, string eventType, DateTimeOffset eventTime, string dataVersion)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(subject, nameof(subject));
            Argument.AssertNotNull(eventType, nameof(eventType));
            Argument.AssertNotNull(dataVersion, nameof(dataVersion));

            Id = id;
            Subject = subject;
            Data = data;
            EventType = eventType;
            EventTime = eventTime;
            DataVersion = dataVersion;
        }

        /// <summary> Initializes a new instance of <see cref="EventGridEventInternal"/>. </summary>
        /// <param name="id"> An unique identifier for the event. </param>
        /// <param name="topic"> The resource path of the event source. </param>
        /// <param name="subject"> A resource path relative to the topic path. </param>
        /// <param name="data"> Event data specific to the event type. </param>
        /// <param name="eventType"> The type of the event that occurred. </param>
        /// <param name="eventTime"> The time (in UTC) the event was generated. </param>
        /// <param name="metadataVersion"> The schema version of the event metadata. </param>
        /// <param name="dataVersion"> The schema version of the data object. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EventGridEventInternal(string id, string topic, string subject, JsonElement data, string eventType, DateTimeOffset eventTime, string metadataVersion, string dataVersion, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Topic = topic;
            Subject = subject;
            Data = data;
            EventType = eventType;
            EventTime = eventTime;
            MetadataVersion = metadataVersion;
            DataVersion = dataVersion;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="EventGridEventInternal"/> for deserialization. </summary>
        internal EventGridEventInternal()
        {
        }

        /// <summary> An unique identifier for the event. </summary>
        public string Id { get; set; }
        /// <summary> The resource path of the event source. </summary>
        public string Topic { get; set; }
        /// <summary> A resource path relative to the topic path. </summary>
        public string Subject { get; set; }
        /// <summary> The type of the event that occurred. </summary>
        public string EventType { get; set; }
        /// <summary> The time (in UTC) the event was generated. </summary>
        public DateTimeOffset EventTime { get; set; }
        /// <summary> The schema version of the event metadata. </summary>
        public string MetadataVersion { get; }
        /// <summary> The schema version of the data object. </summary>
        public string DataVersion { get; set; }
    }
}
