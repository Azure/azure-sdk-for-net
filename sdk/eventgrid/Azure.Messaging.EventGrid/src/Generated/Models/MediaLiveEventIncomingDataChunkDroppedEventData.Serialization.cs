// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    [JsonConverter(typeof(MediaLiveEventIncomingDataChunkDroppedEventDataConverter))]
    public partial class MediaLiveEventIncomingDataChunkDroppedEventData : IUtf8JsonSerializable, IJsonModel<MediaLiveEventIncomingDataChunkDroppedEventData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MediaLiveEventIncomingDataChunkDroppedEventData>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<MediaLiveEventIncomingDataChunkDroppedEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<MediaLiveEventIncomingDataChunkDroppedEventData>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<MediaLiveEventIncomingDataChunkDroppedEventData>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Timestamp))
                {
                    writer.WritePropertyName("timestamp"u8);
                    writer.WriteStringValue(Timestamp);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TrackType))
                {
                    writer.WritePropertyName("trackType"u8);
                    writer.WriteStringValue(TrackType);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Bitrate))
                {
                    writer.WritePropertyName("bitrate"u8);
                    writer.WriteNumberValue(Bitrate.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Timescale))
                {
                    writer.WritePropertyName("timescale"u8);
                    writer.WriteStringValue(Timescale);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ResultCode))
                {
                    writer.WritePropertyName("resultCode"u8);
                    writer.WriteStringValue(ResultCode);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TrackName))
                {
                    writer.WritePropertyName("trackName"u8);
                    writer.WriteStringValue(TrackName);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MediaLiveEventIncomingDataChunkDroppedEventData IJsonModel<MediaLiveEventIncomingDataChunkDroppedEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(MediaLiveEventIncomingDataChunkDroppedEventData)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMediaLiveEventIncomingDataChunkDroppedEventData(document.RootElement, options);
        }

        internal static MediaLiveEventIncomingDataChunkDroppedEventData DeserializeMediaLiveEventIncomingDataChunkDroppedEventData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> timestamp = default;
            Optional<string> trackType = default;
            Optional<long> bitrate = default;
            Optional<string> timescale = default;
            Optional<string> resultCode = default;
            Optional<string> trackName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trackType"u8))
                {
                    trackType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bitrate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bitrate = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("timescale"u8))
                {
                    timescale = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resultCode"u8))
                {
                    resultCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trackName"u8))
                {
                    trackName = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MediaLiveEventIncomingDataChunkDroppedEventData(timestamp.Value, trackType.Value, Optional.ToNullable(bitrate), timescale.Value, resultCode.Value, trackName.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MediaLiveEventIncomingDataChunkDroppedEventData>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(MediaLiveEventIncomingDataChunkDroppedEventData)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        MediaLiveEventIncomingDataChunkDroppedEventData IPersistableModel<MediaLiveEventIncomingDataChunkDroppedEventData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(MediaLiveEventIncomingDataChunkDroppedEventData)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeMediaLiveEventIncomingDataChunkDroppedEventData(document.RootElement, options);
        }

        string IPersistableModel<MediaLiveEventIncomingDataChunkDroppedEventData>.GetWireFormat(ModelReaderWriterOptions options) => "J";

        internal partial class MediaLiveEventIncomingDataChunkDroppedEventDataConverter : JsonConverter<MediaLiveEventIncomingDataChunkDroppedEventData>
        {
            public override void Write(Utf8JsonWriter writer, MediaLiveEventIncomingDataChunkDroppedEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override MediaLiveEventIncomingDataChunkDroppedEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeMediaLiveEventIncomingDataChunkDroppedEventData(document.RootElement);
            }
        }
    }
}
