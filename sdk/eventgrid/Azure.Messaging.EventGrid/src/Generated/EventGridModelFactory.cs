// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Messaging.EventGrid.SystemEvents;

namespace Azure.Messaging.EventGrid
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class EventGridModelFactory
    {
        /// <summary> Initializes new instance of StorageBlobCreatedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the Storage service for the storage API operation that triggered this event. </param>
        /// <param name="eTag"> The etag of the blob at the time this event was triggered. </param>
        /// <param name="contentType"> The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. </param>
        /// <param name="contentLength"> The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. </param>
        /// <param name="contentOffset"> The offset of the blob in bytes. </param>
        /// <param name="blobType"> The type of blob. </param>
        /// <param name="url"> The path to the blob. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageBlobCreatedEventData"/> instance for mocking. </returns>
        public static StorageBlobCreatedEventData StorageBlobCreatedEventData(string api = default, string clientRequestId = default, string requestId = default, string eTag = default, string contentType = default, long? contentLength = default, long? contentOffset = default, string blobType = default, string url = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageBlobCreatedEventData(api, clientRequestId, requestId, eTag, contentType, contentLength, contentOffset, blobType, url, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageBlobDeletedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the Storage service for the storage API operation that triggered this event. </param>
        /// <param name="contentType"> The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. </param>
        /// <param name="blobType"> The type of blob. </param>
        /// <param name="url"> The path to the blob. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageBlobDeletedEventData"/> instance for mocking. </returns>
        public static StorageBlobDeletedEventData StorageBlobDeletedEventData(string api = default, string clientRequestId = default, string requestId = default, string contentType = default, string blobType = default, string url = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageBlobDeletedEventData(api, clientRequestId, requestId, contentType, blobType, url, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageDirectoryCreatedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the storage service for the storage API operation that triggered this event. </param>
        /// <param name="eTag"> The etag of the directory at the time this event was triggered. </param>
        /// <param name="url"> The path to the directory. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageDirectoryCreatedEventData"/> instance for mocking. </returns>
        public static StorageDirectoryCreatedEventData StorageDirectoryCreatedEventData(string api = default, string clientRequestId = default, string requestId = default, string eTag = default, string url = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageDirectoryCreatedEventData(api, clientRequestId, requestId, eTag, url, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageDirectoryDeletedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the storage service for the storage API operation that triggered this event. </param>
        /// <param name="url"> The path to the deleted directory. </param>
        /// <param name="recursive"> Is this event for a recursive delete operation. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageDirectoryDeletedEventData"/> instance for mocking. </returns>
        public static StorageDirectoryDeletedEventData StorageDirectoryDeletedEventData(string api = default, string clientRequestId = default, string requestId = default, string url = default, bool? recursive = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageDirectoryDeletedEventData(api, clientRequestId, requestId, url, recursive, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageBlobRenamedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the storage service for the storage API operation that triggered this event. </param>
        /// <param name="sourceUrl"> The path to the blob that was renamed. </param>
        /// <param name="destinationUrl"> The new path to the blob after the rename operation. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageBlobRenamedEventData"/> instance for mocking. </returns>
        public static StorageBlobRenamedEventData StorageBlobRenamedEventData(string api = default, string clientRequestId = default, string requestId = default, string sourceUrl = default, string destinationUrl = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageBlobRenamedEventData(api, clientRequestId, requestId, sourceUrl, destinationUrl, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageDirectoryRenamedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the storage service for the storage API operation that triggered this event. </param>
        /// <param name="sourceUrl"> The path to the directory that was renamed. </param>
        /// <param name="destinationUrl"> The new path to the directory after the rename operation. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageDirectoryRenamedEventData"/> instance for mocking. </returns>
        public static StorageDirectoryRenamedEventData StorageDirectoryRenamedEventData(string api = default, string clientRequestId = default, string requestId = default, string sourceUrl = default, string destinationUrl = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageDirectoryRenamedEventData(api, clientRequestId, requestId, sourceUrl, destinationUrl, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageLifecyclePolicyCompletedEventData class. </summary>
        /// <param name="scheduleTime"> The time the policy task was scheduled. </param>
        /// <param name="deleteSummary"> Execution statistics of a specific policy action in a Blob Management cycle. </param>
        /// <param name="tierToCoolSummary"> Execution statistics of a specific policy action in a Blob Management cycle. </param>
        /// <param name="tierToArchiveSummary"> Execution statistics of a specific policy action in a Blob Management cycle. </param>
        /// <returns> A new <see cref="SystemEvents.StorageLifecyclePolicyCompletedEventData"/> instance for mocking. </returns>
        public static StorageLifecyclePolicyCompletedEventData StorageLifecyclePolicyCompletedEventData(string scheduleTime = default, StorageLifecyclePolicyActionSummaryDetail deleteSummary = default, StorageLifecyclePolicyActionSummaryDetail tierToCoolSummary = default, StorageLifecyclePolicyActionSummaryDetail tierToArchiveSummary = default)
        {
            return new StorageLifecyclePolicyCompletedEventData(scheduleTime, deleteSummary, tierToCoolSummary, tierToArchiveSummary);
        }

        /// <summary> Initializes new instance of StorageLifecyclePolicyActionSummaryDetail class. </summary>
        /// <param name="totalObjectsCount"> Total number of objects to be acted on by this action. </param>
        /// <param name="successCount"> Number of success operations of this action. </param>
        /// <param name="errorList"> Error messages of this action if any. </param>
        /// <returns> A new <see cref="SystemEvents.StorageLifecyclePolicyActionSummaryDetail"/> instance for mocking. </returns>
        public static StorageLifecyclePolicyActionSummaryDetail StorageLifecyclePolicyActionSummaryDetail(long? totalObjectsCount = default, long? successCount = default, string errorList = default)
        {
            return new StorageLifecyclePolicyActionSummaryDetail(totalObjectsCount, successCount, errorList);
        }

        /// <summary> Initializes new instance of StorageBlobTierChangedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the Storage service for the storage API operation that triggered this event. </param>
        /// <param name="contentType"> The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. </param>
        /// <param name="contentLength"> The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. </param>
        /// <param name="blobType"> The type of blob. </param>
        /// <param name="url"> The path to the blob. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageBlobTierChangedEventData"/> instance for mocking. </returns>
        public static StorageBlobTierChangedEventData StorageBlobTierChangedEventData(string api = default, string clientRequestId = default, string requestId = default, string contentType = default, long? contentLength = default, string blobType = default, string url = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageBlobTierChangedEventData(api, clientRequestId, requestId, contentType, contentLength, blobType, url, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageAsyncOperationInitiatedEventData class. </summary>
        /// <param name="api"> The name of the API/operation that triggered this event. </param>
        /// <param name="clientRequestId"> A request id provided by the client of the storage API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the Storage service for the storage API operation that triggered this event. </param>
        /// <param name="contentType"> The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob. </param>
        /// <param name="contentLength"> The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob. </param>
        /// <param name="blobType"> The type of blob. </param>
        /// <param name="url"> The path to the blob. </param>
        /// <param name="sequencer"> An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name. </param>
        /// <param name="identity"> The identity of the requester that triggered this event. </param>
        /// <param name="storageDiagnostics"> For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers. </param>
        /// <returns> A new <see cref="SystemEvents.StorageAsyncOperationInitiatedEventData"/> instance for mocking. </returns>
        public static StorageAsyncOperationInitiatedEventData StorageAsyncOperationInitiatedEventData(string api = default, string clientRequestId = default, string requestId = default, string contentType = default, long? contentLength = default, string blobType = default, string url = default, string sequencer = default, string identity = default, object storageDiagnostics = default)
        {
            return new StorageAsyncOperationInitiatedEventData(api, clientRequestId, requestId, contentType, contentLength, blobType, url, sequencer, identity, storageDiagnostics);
        }

        /// <summary> Initializes new instance of StorageBlobInventoryPolicyCompletedEventData class. </summary>
        /// <param name="scheduleDateTime"> The time at which inventory policy was scheduled. </param>
        /// <param name="accountName"> The account name for which inventory policy is registered. </param>
        /// <param name="ruleName"> The rule name for inventory policy. </param>
        /// <param name="policyRunStatus"> The status of inventory run, it can be Succeeded/PartiallySucceeded/Failed. </param>
        /// <param name="policyRunStatusMessage"> The status message for inventory run. </param>
        /// <param name="policyRunId"> The policy run id for inventory run. </param>
        /// <param name="manifestBlobUrl"> The blob URL for manifest file for inventory run. </param>
        /// <returns> A new <see cref="SystemEvents.StorageBlobInventoryPolicyCompletedEventData"/> instance for mocking. </returns>
        public static StorageBlobInventoryPolicyCompletedEventData StorageBlobInventoryPolicyCompletedEventData(DateTimeOffset? scheduleDateTime = default, string accountName = default, string ruleName = default, string policyRunStatus = default, string policyRunStatusMessage = default, string policyRunId = default, string manifestBlobUrl = default)
        {
            return new StorageBlobInventoryPolicyCompletedEventData(scheduleDateTime, accountName, ruleName, policyRunStatus, policyRunStatusMessage, policyRunId, manifestBlobUrl);
        }

        /// <summary> Initializes new instance of EventHubCaptureFileCreatedEventData class. </summary>
        /// <param name="fileurl"> The path to the capture file. </param>
        /// <param name="fileType"> The file type of the capture file. </param>
        /// <param name="partitionId"> The shard ID. </param>
        /// <param name="sizeInBytes"> The file size. </param>
        /// <param name="eventCount"> The number of events in the file. </param>
        /// <param name="firstSequenceNumber"> The smallest sequence number from the queue. </param>
        /// <param name="lastSequenceNumber"> The last sequence number from the queue. </param>
        /// <param name="firstEnqueueTime"> The first time from the queue. </param>
        /// <param name="lastEnqueueTime"> The last time from the queue. </param>
        /// <returns> A new <see cref="SystemEvents.EventHubCaptureFileCreatedEventData"/> instance for mocking. </returns>
        public static EventHubCaptureFileCreatedEventData EventHubCaptureFileCreatedEventData(string fileurl = default, string fileType = default, string partitionId = default, int? sizeInBytes = default, int? eventCount = default, int? firstSequenceNumber = default, int? lastSequenceNumber = default, DateTimeOffset? firstEnqueueTime = default, DateTimeOffset? lastEnqueueTime = default)
        {
            return new EventHubCaptureFileCreatedEventData(fileurl, fileType, partitionId, sizeInBytes, eventCount, firstSequenceNumber, lastSequenceNumber, firstEnqueueTime, lastEnqueueTime);
        }

        /// <summary> Initializes new instance of ResourceWriteSuccessEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceWriteSuccessEventData"/> instance for mocking. </returns>
        public static ResourceWriteSuccessEventData ResourceWriteSuccessEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceWriteSuccessEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceWriteFailureEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceWriteFailureEventData"/> instance for mocking. </returns>
        public static ResourceWriteFailureEventData ResourceWriteFailureEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceWriteFailureEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceWriteCancelEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceWriteCancelEventData"/> instance for mocking. </returns>
        public static ResourceWriteCancelEventData ResourceWriteCancelEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceWriteCancelEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceDeleteSuccessEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceDeleteSuccessEventData"/> instance for mocking. </returns>
        public static ResourceDeleteSuccessEventData ResourceDeleteSuccessEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceDeleteSuccessEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceDeleteFailureEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceDeleteFailureEventData"/> instance for mocking. </returns>
        public static ResourceDeleteFailureEventData ResourceDeleteFailureEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceDeleteFailureEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceDeleteCancelEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceDeleteCancelEventData"/> instance for mocking. </returns>
        public static ResourceDeleteCancelEventData ResourceDeleteCancelEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceDeleteCancelEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceActionSuccessEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceActionSuccessEventData"/> instance for mocking. </returns>
        public static ResourceActionSuccessEventData ResourceActionSuccessEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceActionSuccessEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceActionFailureEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceActionFailureEventData"/> instance for mocking. </returns>
        public static ResourceActionFailureEventData ResourceActionFailureEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceActionFailureEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of ResourceActionCancelEventData class. </summary>
        /// <param name="tenantId"> The tenant ID of the resource. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="resourceGroup"> The resource group of the resource. </param>
        /// <param name="resourceProvider"> The resource provider performing the operation. </param>
        /// <param name="resourceUri"> The URI of the resource in the operation. </param>
        /// <param name="operationName"> The operation that was performed. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="authorization"> The requested authorization for the operation. </param>
        /// <param name="claims"> The properties of the claims. </param>
        /// <param name="correlationId"> An operation ID used for troubleshooting. </param>
        /// <param name="httpRequest"> The details of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.ResourceActionCancelEventData"/> instance for mocking. </returns>
        public static ResourceActionCancelEventData ResourceActionCancelEventData(string tenantId = default, string subscriptionId = default, string resourceGroup = default, string resourceProvider = default, string resourceUri = default, string operationName = default, string status = default, string authorization = default, string claims = default, string correlationId = default, string httpRequest = default)
        {
            return new ResourceActionCancelEventData(tenantId, subscriptionId, resourceGroup, resourceProvider, resourceUri, operationName, status, authorization, claims, correlationId, httpRequest);
        }

        /// <summary> Initializes new instance of SubscriptionValidationEventData class. </summary>
        /// <param name="validationCode"> The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, the subscriber must either respond with this validation code as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview). </param>
        /// <param name="validationUrl"> The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation handshake, the subscriber must either respond with the validationCode as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview). </param>
        /// <returns> A new <see cref="SystemEvents.SubscriptionValidationEventData"/> instance for mocking. </returns>
        public static SubscriptionValidationEventData SubscriptionValidationEventData(string validationCode = default, string validationUrl = default)
        {
            return new SubscriptionValidationEventData(validationCode, validationUrl);
        }

        /// <summary> Initializes new instance of SubscriptionValidationResponse class. </summary>
        /// <param name="validationResponse"> The validation response sent by the subscriber to Azure Event Grid to complete the validation of an event subscription. </param>
        /// <returns> A new <see cref="SystemEvents.SubscriptionValidationResponse"/> instance for mocking. </returns>
        public static SubscriptionValidationResponse SubscriptionValidationResponse(string validationResponse = default)
        {
            return new SubscriptionValidationResponse(validationResponse);
        }

        /// <summary> Initializes new instance of SubscriptionDeletedEventData class. </summary>
        /// <param name="eventSubscriptionId"> The Azure resource ID of the deleted event subscription. </param>
        /// <returns> A new <see cref="SystemEvents.SubscriptionDeletedEventData"/> instance for mocking. </returns>
        public static SubscriptionDeletedEventData SubscriptionDeletedEventData(string eventSubscriptionId = default)
        {
            return new SubscriptionDeletedEventData(eventSubscriptionId);
        }

        /// <summary> Initializes new instance of DeviceLifeCycleEventProperties class. </summary>
        /// <param name="deviceId"> The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &amp;#35; * ? ! ( ) , = @ ; $ &apos;. </param>
        /// <param name="hubName"> Name of the IoT Hub where the device was created or deleted. </param>
        /// <param name="twin"> Information about the device twin, which is the cloud representation of application device metadata. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceLifeCycleEventProperties"/> instance for mocking. </returns>
        public static DeviceLifeCycleEventProperties DeviceLifeCycleEventProperties(string deviceId = default, string hubName = default, DeviceTwinInfo twin = default)
        {
            return new DeviceLifeCycleEventProperties(deviceId, hubName, twin);
        }

        /// <summary> Initializes new instance of DeviceTwinInfo class. </summary>
        /// <param name="authenticationType"> Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority. </param>
        /// <param name="cloudToDeviceMessageCount"> Count of cloud to device messages sent to this device. </param>
        /// <param name="connectionState"> Whether the device is connected or disconnected. </param>
        /// <param name="deviceId"> The unique identifier of the device twin. </param>
        /// <param name="etag"> A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin. </param>
        /// <param name="lastActivityTime"> The ISO8601 timestamp of the last activity. </param>
        /// <param name="properties"> Properties JSON element. </param>
        /// <param name="status"> Whether the device twin is enabled or disabled. </param>
        /// <param name="statusUpdateTime"> The ISO8601 timestamp of the last device twin status update. </param>
        /// <param name="version"> An integer that is incremented by one each time the device twin is updated. </param>
        /// <param name="x509Thumbprint"> The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceTwinInfo"/> instance for mocking. </returns>
        public static DeviceTwinInfo DeviceTwinInfo(string authenticationType = default, float? cloudToDeviceMessageCount = default, string connectionState = default, string deviceId = default, string etag = default, string lastActivityTime = default, DeviceTwinInfoProperties properties = default, string status = default, string statusUpdateTime = default, float? version = default, DeviceTwinInfoX509Thumbprint x509Thumbprint = default)
        {
            return new DeviceTwinInfo(authenticationType, cloudToDeviceMessageCount, connectionState, deviceId, etag, lastActivityTime, properties, status, statusUpdateTime, version, x509Thumbprint);
        }

        /// <summary> Initializes new instance of DeviceTwinInfoProperties class. </summary>
        /// <param name="desired"> A portion of the properties that can be written only by the application back-end, and read by the device. </param>
        /// <param name="reported"> A portion of the properties that can be written only by the device, and read by the application back-end. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceTwinInfoProperties"/> instance for mocking. </returns>
        public static DeviceTwinInfoProperties DeviceTwinInfoProperties(DeviceTwinProperties desired = default, DeviceTwinProperties reported = default)
        {
            return new DeviceTwinInfoProperties(desired, reported);
        }

        /// <summary> Initializes new instance of DeviceTwinProperties class. </summary>
        /// <param name="metadata"> Metadata information for the properties JSON document. </param>
        /// <param name="version"> Version of device twin properties. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceTwinProperties"/> instance for mocking. </returns>
        public static DeviceTwinProperties DeviceTwinProperties(DeviceTwinMetadata metadata = default, float? version = default)
        {
            return new DeviceTwinProperties(metadata, version);
        }

        /// <summary> Initializes new instance of DeviceTwinMetadata class. </summary>
        /// <param name="lastUpdated"> The ISO8601 timestamp of the last time the properties were updated. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceTwinMetadata"/> instance for mocking. </returns>
        public static DeviceTwinMetadata DeviceTwinMetadata(string lastUpdated = default)
        {
            return new DeviceTwinMetadata(lastUpdated);
        }

        /// <summary> Initializes new instance of DeviceTwinInfoX509Thumbprint class. </summary>
        /// <param name="primaryThumbprint"> Primary thumbprint for the x509 certificate. </param>
        /// <param name="secondaryThumbprint"> Secondary thumbprint for the x509 certificate. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceTwinInfoX509Thumbprint"/> instance for mocking. </returns>
        public static DeviceTwinInfoX509Thumbprint DeviceTwinInfoX509Thumbprint(string primaryThumbprint = default, string secondaryThumbprint = default)
        {
            return new DeviceTwinInfoX509Thumbprint(primaryThumbprint, secondaryThumbprint);
        }

        /// <summary> Initializes new instance of DeviceConnectionStateEventProperties class. </summary>
        /// <param name="deviceId"> The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &amp;#35; * ? ! ( ) , = @ ; $ &apos;. </param>
        /// <param name="moduleId"> The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &amp;#35; * ? ! ( ) , = @ ; $ &apos;. </param>
        /// <param name="hubName"> Name of the IoT Hub where the device was created or deleted. </param>
        /// <param name="deviceConnectionStateEventInfo"> Information about the device connection state event. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceConnectionStateEventProperties"/> instance for mocking. </returns>
        public static DeviceConnectionStateEventProperties DeviceConnectionStateEventProperties(string deviceId = default, string moduleId = default, string hubName = default, DeviceConnectionStateEventInfo deviceConnectionStateEventInfo = default)
        {
            return new DeviceConnectionStateEventProperties(deviceId, moduleId, hubName, deviceConnectionStateEventInfo);
        }

        /// <summary> Initializes new instance of DeviceConnectionStateEventInfo class. </summary>
        /// <param name="sequenceNumber"> Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both in ASCII and HEX numbers come after alphabets. If you are converting the string to hex, then the number is a 256 bit number. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceConnectionStateEventInfo"/> instance for mocking. </returns>
        public static DeviceConnectionStateEventInfo DeviceConnectionStateEventInfo(string sequenceNumber = default)
        {
            return new DeviceConnectionStateEventInfo(sequenceNumber);
        }

        /// <summary> Initializes new instance of DeviceTelemetryEventProperties class. </summary>
        /// <param name="body"> The content of the message from the device. </param>
        /// <param name="properties"> Application properties are user-defined strings that can be added to the message. These fields are optional. </param>
        /// <param name="systemProperties"> System properties help identify contents and source of the messages. </param>
        /// <returns> A new <see cref="SystemEvents.DeviceTelemetryEventProperties"/> instance for mocking. </returns>
        public static DeviceTelemetryEventProperties DeviceTelemetryEventProperties(object body = default, IReadOnlyDictionary<string, string> properties = default, IReadOnlyDictionary<string, string> systemProperties = default)
        {
            properties ??= new Dictionary<string, string>();
            systemProperties ??= new Dictionary<string, string>();
            return new DeviceTelemetryEventProperties(body, properties, systemProperties);
        }

        /// <summary> Initializes new instance of ContainerRegistryEventData class. </summary>
        /// <param name="id"> The event ID. </param>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="action"> The action that encompasses the provided event. </param>
        /// <param name="target"> The target of the event. </param>
        /// <param name="request"> The request that generated the event. </param>
        /// <param name="actor"> The agent that initiated the event. For most situations, this could be from the authorization context of the request. </param>
        /// <param name="source"> The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryEventData"/> instance for mocking. </returns>
        public static ContainerRegistryEventData ContainerRegistryEventData(string id = default, DateTimeOffset? timestamp = default, string action = default, ContainerRegistryEventTarget target = default, ContainerRegistryEventRequest request = default, ContainerRegistryEventActor actor = default, ContainerRegistryEventSource source = default)
        {
            return new ContainerRegistryEventData(id, timestamp, action, target, request, actor, source);
        }

        /// <summary> Initializes new instance of ContainerRegistryEventTarget class. </summary>
        /// <param name="mediaType"> The MIME type of the referenced object. </param>
        /// <param name="size"> The number of bytes of the content. Same as Length field. </param>
        /// <param name="digest"> The digest of the content, as defined by the Registry V2 HTTP API Specification. </param>
        /// <param name="length"> The number of bytes of the content. Same as Size field. </param>
        /// <param name="repository"> The repository name. </param>
        /// <param name="url"> The direct URL to the content. </param>
        /// <param name="tag"> The tag name. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryEventTarget"/> instance for mocking. </returns>
        public static ContainerRegistryEventTarget ContainerRegistryEventTarget(string mediaType = default, long? size = default, string digest = default, long? length = default, string repository = default, string url = default, string tag = default)
        {
            return new ContainerRegistryEventTarget(mediaType, size, digest, length, repository, url, tag);
        }

        /// <summary> Initializes new instance of ContainerRegistryEventRequest class. </summary>
        /// <param name="id"> The ID of the request that initiated the event. </param>
        /// <param name="addr"> The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request. </param>
        /// <param name="host"> The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests. </param>
        /// <param name="method"> The request method that generated the event. </param>
        /// <param name="useragent"> The user agent header of the request. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryEventRequest"/> instance for mocking. </returns>
        public static ContainerRegistryEventRequest ContainerRegistryEventRequest(string id = default, string addr = default, string host = default, string method = default, string useragent = default)
        {
            return new ContainerRegistryEventRequest(id, addr, host, method, useragent);
        }

        /// <summary> Initializes new instance of ContainerRegistryEventActor class. </summary>
        /// <param name="name"> The subject or username associated with the request context that generated the event. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryEventActor"/> instance for mocking. </returns>
        public static ContainerRegistryEventActor ContainerRegistryEventActor(string name = default)
        {
            return new ContainerRegistryEventActor(name);
        }

        /// <summary> Initializes new instance of ContainerRegistryEventSource class. </summary>
        /// <param name="addr"> The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port. </param>
        /// <param name="instanceID"> The running instance of an application. Changes after each restart. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryEventSource"/> instance for mocking. </returns>
        public static ContainerRegistryEventSource ContainerRegistryEventSource(string addr = default, string instanceID = default)
        {
            return new ContainerRegistryEventSource(addr, instanceID);
        }

        /// <summary> Initializes new instance of ContainerRegistryArtifactEventData class. </summary>
        /// <param name="id"> The event ID. </param>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="action"> The action that encompasses the provided event. </param>
        /// <param name="target"> The target of the event. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryArtifactEventData"/> instance for mocking. </returns>
        public static ContainerRegistryArtifactEventData ContainerRegistryArtifactEventData(string id = default, DateTimeOffset? timestamp = default, string action = default, ContainerRegistryArtifactEventTarget target = default)
        {
            return new ContainerRegistryArtifactEventData(id, timestamp, action, target);
        }

        /// <summary> Initializes new instance of ContainerRegistryArtifactEventTarget class. </summary>
        /// <param name="mediaType"> The MIME type of the artifact. </param>
        /// <param name="size"> The size in bytes of the artifact. </param>
        /// <param name="digest"> The digest of the artifact. </param>
        /// <param name="repository"> The repository name of the artifact. </param>
        /// <param name="tag"> The tag of the artifact. </param>
        /// <param name="name"> The name of the artifact. </param>
        /// <param name="version"> The version of the artifact. </param>
        /// <returns> A new <see cref="SystemEvents.ContainerRegistryArtifactEventTarget"/> instance for mocking. </returns>
        public static ContainerRegistryArtifactEventTarget ContainerRegistryArtifactEventTarget(string mediaType = default, long? size = default, string digest = default, string repository = default, string tag = default, string name = default, string version = default)
        {
            return new ContainerRegistryArtifactEventTarget(mediaType, size, digest, repository, tag, name, version);
        }

        /// <summary> Initializes new instance of ServiceBusActiveMessagesAvailableWithNoListenersEventData class. </summary>
        /// <param name="namespaceName"> The namespace name of the Microsoft.ServiceBus resource. </param>
        /// <param name="requestUri"> The endpoint of the Microsoft.ServiceBus resource. </param>
        /// <param name="entityType"> The entity type of the Microsoft.ServiceBus resource. Could be one of &apos;queue&apos; or &apos;subscriber&apos;. </param>
        /// <param name="queueName"> The name of the Microsoft.ServiceBus queue. If the entity type is of type &apos;subscriber&apos;, then this value will be null. </param>
        /// <param name="topicName"> The name of the Microsoft.ServiceBus topic. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <param name="subscriptionName"> The name of the Microsoft.ServiceBus topic&apos;s subscription. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <returns> A new <see cref="SystemEvents.ServiceBusActiveMessagesAvailableWithNoListenersEventData"/> instance for mocking. </returns>
        public static ServiceBusActiveMessagesAvailableWithNoListenersEventData ServiceBusActiveMessagesAvailableWithNoListenersEventData(string namespaceName = default, string requestUri = default, string entityType = default, string queueName = default, string topicName = default, string subscriptionName = default)
        {
            return new ServiceBusActiveMessagesAvailableWithNoListenersEventData(namespaceName, requestUri, entityType, queueName, topicName, subscriptionName);
        }

        /// <summary> Initializes new instance of ServiceBusDeadletterMessagesAvailableWithNoListenersEventData class. </summary>
        /// <param name="namespaceName"> The namespace name of the Microsoft.ServiceBus resource. </param>
        /// <param name="requestUri"> The endpoint of the Microsoft.ServiceBus resource. </param>
        /// <param name="entityType"> The entity type of the Microsoft.ServiceBus resource. Could be one of &apos;queue&apos; or &apos;subscriber&apos;. </param>
        /// <param name="queueName"> The name of the Microsoft.ServiceBus queue. If the entity type is of type &apos;subscriber&apos;, then this value will be null. </param>
        /// <param name="topicName"> The name of the Microsoft.ServiceBus topic. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <param name="subscriptionName"> The name of the Microsoft.ServiceBus topic&apos;s subscription. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <returns> A new <see cref="SystemEvents.ServiceBusDeadletterMessagesAvailableWithNoListenersEventData"/> instance for mocking. </returns>
        public static ServiceBusDeadletterMessagesAvailableWithNoListenersEventData ServiceBusDeadletterMessagesAvailableWithNoListenersEventData(string namespaceName = default, string requestUri = default, string entityType = default, string queueName = default, string topicName = default, string subscriptionName = default)
        {
            return new ServiceBusDeadletterMessagesAvailableWithNoListenersEventData(namespaceName, requestUri, entityType, queueName, topicName, subscriptionName);
        }

        /// <summary> Initializes new instance of ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData class. </summary>
        /// <param name="namespaceName"> The namespace name of the Microsoft.ServiceBus resource. </param>
        /// <param name="requestUri"> The endpoint of the Microsoft.ServiceBus resource. </param>
        /// <param name="entityType"> The entity type of the Microsoft.ServiceBus resource. Could be one of &apos;queue&apos; or &apos;subscriber&apos;. </param>
        /// <param name="queueName"> The name of the Microsoft.ServiceBus queue. If the entity type is of type &apos;subscriber&apos;, then this value will be null. </param>
        /// <param name="topicName"> The name of the Microsoft.ServiceBus topic. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <param name="subscriptionName"> The name of the Microsoft.ServiceBus topic&apos;s subscription. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <returns> A new <see cref="SystemEvents.ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData"/> instance for mocking. </returns>
        public static ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData(string namespaceName = default, string requestUri = default, string entityType = default, string queueName = default, string topicName = default, string subscriptionName = default)
        {
            return new ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData(namespaceName, requestUri, entityType, queueName, topicName, subscriptionName);
        }

        /// <summary> Initializes new instance of ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData class. </summary>
        /// <param name="namespaceName"> The namespace name of the Microsoft.ServiceBus resource. </param>
        /// <param name="requestUri"> The endpoint of the Microsoft.ServiceBus resource. </param>
        /// <param name="entityType"> The entity type of the Microsoft.ServiceBus resource. Could be one of &apos;queue&apos; or &apos;subscriber&apos;. </param>
        /// <param name="queueName"> The name of the Microsoft.ServiceBus queue. If the entity type is of type &apos;subscriber&apos;, then this value will be null. </param>
        /// <param name="topicName"> The name of the Microsoft.ServiceBus topic. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <param name="subscriptionName"> The name of the Microsoft.ServiceBus topic&apos;s subscription. If the entity type is of type &apos;queue&apos;, then this value will be null. </param>
        /// <returns> A new <see cref="SystemEvents.ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData"/> instance for mocking. </returns>
        public static ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData(string namespaceName = default, string requestUri = default, string entityType = default, string queueName = default, string topicName = default, string subscriptionName = default)
        {
            return new ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData(namespaceName, requestUri, entityType, queueName, topicName, subscriptionName);
        }

        /// <summary> Initializes new instance of MediaJobStateChangeEventData class. </summary>
        /// <param name="previousState"> The previous state of the Job. </param>
        /// <param name="state"> The new state of the Job. </param>
        /// <param name="correlationData"> Gets the Job correlation data. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobStateChangeEventData"/> instance for mocking. </returns>
        public static MediaJobStateChangeEventData MediaJobStateChangeEventData(MediaJobState? previousState = default, MediaJobState? state = default, IReadOnlyDictionary<string, string> correlationData = default)
        {
            correlationData ??= new Dictionary<string, string>();
            return new MediaJobStateChangeEventData(previousState, state, correlationData);
        }

        /// <summary> Initializes new instance of MediaJobError class. </summary>
        /// <param name="code"> Error code describing the error. </param>
        /// <param name="message"> A human-readable language-dependent representation of the error. </param>
        /// <param name="category"> Helps with categorization of errors. </param>
        /// <param name="retry"> Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobError"/> instance for mocking. </returns>
        public static MediaJobError MediaJobError(MediaJobErrorCode? code = default, string message = default, MediaJobErrorCategory? category = default, MediaJobRetry? retry = default, IReadOnlyList<MediaJobErrorDetail> details = default)
        {
            details ??= new List<MediaJobErrorDetail>();
            return new MediaJobError(code, message, category, retry, details);
        }

        /// <summary> Initializes new instance of MediaJobErrorDetail class. </summary>
        /// <param name="code"> Code describing the error detail. </param>
        /// <param name="message"> A human-readable representation of the error. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobErrorDetail"/> instance for mocking. </returns>
        public static MediaJobErrorDetail MediaJobErrorDetail(string code = default, string message = default)
        {
            return new MediaJobErrorDetail(code, message);
        }

        /// <summary> Initializes new instance of MediaJobOutput class. </summary>
        /// <param name="odataType"> The discriminator for derived types. </param>
        /// <param name="error"> Gets the Job output error. </param>
        /// <param name="label"> Gets the Job output label. </param>
        /// <param name="progress"> Gets the Job output progress. </param>
        /// <param name="state"> Gets the Job output state. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobOutput"/> instance for mocking. </returns>
        public static MediaJobOutput MediaJobOutput(string odataType = default, MediaJobError error = default, string label = default, long progress = default, MediaJobState state = default)
        {
            return new MediaJobOutput(odataType, error, label, progress, state);
        }

        /// <summary> Initializes new instance of MediaJobOutputAsset class. </summary>
        /// <param name="odataType"> The discriminator for derived types. </param>
        /// <param name="error"> Gets the Job output error. </param>
        /// <param name="label"> Gets the Job output label. </param>
        /// <param name="progress"> Gets the Job output progress. </param>
        /// <param name="state"> Gets the Job output state. </param>
        /// <param name="assetName"> Gets the Job output asset name. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobOutputAsset"/> instance for mocking. </returns>
        public static MediaJobOutputAsset MediaJobOutputAsset(string odataType = default, MediaJobError error = default, string label = default, long progress = default, MediaJobState state = default, string assetName = default)
        {
            return new MediaJobOutputAsset(odataType, error, label, progress, state, assetName);
        }

        /// <summary> Initializes new instance of MediaJobOutputProgressEventData class. </summary>
        /// <param name="label"> Gets the Job output label. </param>
        /// <param name="progress"> Gets the Job output progress. </param>
        /// <param name="jobCorrelationData"> Gets the Job correlation data. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobOutputProgressEventData"/> instance for mocking. </returns>
        public static MediaJobOutputProgressEventData MediaJobOutputProgressEventData(string label = default, long? progress = default, IReadOnlyDictionary<string, string> jobCorrelationData = default)
        {
            jobCorrelationData ??= new Dictionary<string, string>();
            return new MediaJobOutputProgressEventData(label, progress, jobCorrelationData);
        }

        /// <summary> Initializes new instance of MediaJobOutputStateChangeEventData class. </summary>
        /// <param name="previousState"> The previous state of the Job. </param>
        /// <param name="output"> Gets the output. </param>
        /// <param name="jobCorrelationData"> Gets the Job correlation data. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobOutputStateChangeEventData"/> instance for mocking. </returns>
        public static MediaJobOutputStateChangeEventData MediaJobOutputStateChangeEventData(MediaJobState? previousState = default, MediaJobOutput output = default, IReadOnlyDictionary<string, string> jobCorrelationData = default)
        {
            jobCorrelationData ??= new Dictionary<string, string>();
            return new MediaJobOutputStateChangeEventData(previousState, output, jobCorrelationData);
        }

        /// <summary> Initializes new instance of MediaJobFinishedEventData class. </summary>
        /// <param name="previousState"> The previous state of the Job. </param>
        /// <param name="state"> The new state of the Job. </param>
        /// <param name="correlationData"> Gets the Job correlation data. </param>
        /// <param name="outputs"> Gets the Job outputs. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobFinishedEventData"/> instance for mocking. </returns>
        public static MediaJobFinishedEventData MediaJobFinishedEventData(MediaJobState? previousState = default, MediaJobState? state = default, IReadOnlyDictionary<string, string> correlationData = default, IReadOnlyList<MediaJobOutput> outputs = default)
        {
            correlationData ??= new Dictionary<string, string>();
            outputs ??= new List<MediaJobOutput>();
            return new MediaJobFinishedEventData(previousState, state, correlationData, outputs);
        }

        /// <summary> Initializes new instance of MediaJobCanceledEventData class. </summary>
        /// <param name="previousState"> The previous state of the Job. </param>
        /// <param name="state"> The new state of the Job. </param>
        /// <param name="correlationData"> Gets the Job correlation data. </param>
        /// <param name="outputs"> Gets the Job outputs. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobCanceledEventData"/> instance for mocking. </returns>
        public static MediaJobCanceledEventData MediaJobCanceledEventData(MediaJobState? previousState = default, MediaJobState? state = default, IReadOnlyDictionary<string, string> correlationData = default, IReadOnlyList<MediaJobOutput> outputs = default)
        {
            correlationData ??= new Dictionary<string, string>();
            outputs ??= new List<MediaJobOutput>();
            return new MediaJobCanceledEventData(previousState, state, correlationData, outputs);
        }

        /// <summary> Initializes new instance of MediaJobErroredEventData class. </summary>
        /// <param name="previousState"> The previous state of the Job. </param>
        /// <param name="state"> The new state of the Job. </param>
        /// <param name="correlationData"> Gets the Job correlation data. </param>
        /// <param name="outputs"> Gets the Job outputs. </param>
        /// <returns> A new <see cref="SystemEvents.MediaJobErroredEventData"/> instance for mocking. </returns>
        public static MediaJobErroredEventData MediaJobErroredEventData(MediaJobState? previousState = default, MediaJobState? state = default, IReadOnlyDictionary<string, string> correlationData = default, IReadOnlyList<MediaJobOutput> outputs = default)
        {
            correlationData ??= new Dictionary<string, string>();
            outputs ??= new List<MediaJobOutput>();
            return new MediaJobErroredEventData(previousState, state, correlationData, outputs);
        }

        /// <summary> Initializes new instance of MediaLiveEventEncoderConnectedEventData class. </summary>
        /// <param name="ingestUrl"> Gets the ingest URL provided by the live event. </param>
        /// <param name="streamId"> Gets the stream Id. </param>
        /// <param name="encoderIp"> Gets the remote IP. </param>
        /// <param name="encoderPort"> Gets the remote port. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventEncoderConnectedEventData"/> instance for mocking. </returns>
        public static MediaLiveEventEncoderConnectedEventData MediaLiveEventEncoderConnectedEventData(string ingestUrl = default, string streamId = default, string encoderIp = default, string encoderPort = default)
        {
            return new MediaLiveEventEncoderConnectedEventData(ingestUrl, streamId, encoderIp, encoderPort);
        }

        /// <summary> Initializes new instance of MediaLiveEventConnectionRejectedEventData class. </summary>
        /// <param name="ingestUrl"> Gets the ingest URL provided by the live event. </param>
        /// <param name="streamId"> Gets the stream Id. </param>
        /// <param name="encoderIp"> Gets the remote IP. </param>
        /// <param name="encoderPort"> Gets the remote port. </param>
        /// <param name="resultCode"> Gets the result code. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventConnectionRejectedEventData"/> instance for mocking. </returns>
        public static MediaLiveEventConnectionRejectedEventData MediaLiveEventConnectionRejectedEventData(string ingestUrl = default, string streamId = default, string encoderIp = default, string encoderPort = default, string resultCode = default)
        {
            return new MediaLiveEventConnectionRejectedEventData(ingestUrl, streamId, encoderIp, encoderPort, resultCode);
        }

        /// <summary> Initializes new instance of MediaLiveEventEncoderDisconnectedEventData class. </summary>
        /// <param name="ingestUrl"> Gets the ingest URL provided by the live event. </param>
        /// <param name="streamId"> Gets the stream Id. </param>
        /// <param name="encoderIp"> Gets the remote IP. </param>
        /// <param name="encoderPort"> Gets the remote port. </param>
        /// <param name="resultCode"> Gets the result code. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventEncoderDisconnectedEventData"/> instance for mocking. </returns>
        public static MediaLiveEventEncoderDisconnectedEventData MediaLiveEventEncoderDisconnectedEventData(string ingestUrl = default, string streamId = default, string encoderIp = default, string encoderPort = default, string resultCode = default)
        {
            return new MediaLiveEventEncoderDisconnectedEventData(ingestUrl, streamId, encoderIp, encoderPort, resultCode);
        }

        /// <summary> Initializes new instance of MediaLiveEventIncomingStreamReceivedEventData class. </summary>
        /// <param name="ingestUrl"> Gets the ingest URL provided by the live event. </param>
        /// <param name="trackType"> Gets the type of the track (Audio / Video). </param>
        /// <param name="trackName"> Gets the track name. </param>
        /// <param name="bitrate"> Gets the bitrate of the track. </param>
        /// <param name="encoderIp"> Gets the remote IP. </param>
        /// <param name="encoderPort"> Gets the remote port. </param>
        /// <param name="timestamp"> Gets the first timestamp of the data chunk received. </param>
        /// <param name="duration"> Gets the duration of the first data chunk. </param>
        /// <param name="timescale"> Gets the timescale in which timestamp is represented. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventIncomingStreamReceivedEventData"/> instance for mocking. </returns>
        public static MediaLiveEventIncomingStreamReceivedEventData MediaLiveEventIncomingStreamReceivedEventData(string ingestUrl = default, string trackType = default, string trackName = default, long? bitrate = default, string encoderIp = default, string encoderPort = default, string timestamp = default, string duration = default, string timescale = default)
        {
            return new MediaLiveEventIncomingStreamReceivedEventData(ingestUrl, trackType, trackName, bitrate, encoderIp, encoderPort, timestamp, duration, timescale);
        }

        /// <summary> Initializes new instance of MediaLiveEventIncomingStreamsOutOfSyncEventData class. </summary>
        /// <param name="minLastTimestamp"> Gets the minimum last timestamp received. </param>
        /// <param name="typeOfStreamWithMinLastTimestamp"> Gets the type of stream with minimum last timestamp. </param>
        /// <param name="maxLastTimestamp"> Gets the maximum timestamp among all the tracks (audio or video). </param>
        /// <param name="typeOfStreamWithMaxLastTimestamp"> Gets the type of stream with maximum last timestamp. </param>
        /// <param name="timescaleOfMinLastTimestamp"> Gets the timescale in which &quot;MinLastTimestamp&quot; is represented. </param>
        /// <param name="timescaleOfMaxLastTimestamp"> Gets the timescale in which &quot;MaxLastTimestamp&quot; is represented. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventIncomingStreamsOutOfSyncEventData"/> instance for mocking. </returns>
        public static MediaLiveEventIncomingStreamsOutOfSyncEventData MediaLiveEventIncomingStreamsOutOfSyncEventData(string minLastTimestamp = default, string typeOfStreamWithMinLastTimestamp = default, string maxLastTimestamp = default, string typeOfStreamWithMaxLastTimestamp = default, string timescaleOfMinLastTimestamp = default, string timescaleOfMaxLastTimestamp = default)
        {
            return new MediaLiveEventIncomingStreamsOutOfSyncEventData(minLastTimestamp, typeOfStreamWithMinLastTimestamp, maxLastTimestamp, typeOfStreamWithMaxLastTimestamp, timescaleOfMinLastTimestamp, timescaleOfMaxLastTimestamp);
        }

        /// <summary> Initializes new instance of MediaLiveEventIncomingVideoStreamsOutOfSyncEventData class. </summary>
        /// <param name="firstTimestamp"> Gets the first timestamp received for one of the quality levels. </param>
        /// <param name="firstDuration"> Gets the duration of the data chunk with first timestamp. </param>
        /// <param name="secondTimestamp"> Gets the timestamp received for some other quality levels. </param>
        /// <param name="secondDuration"> Gets the duration of the data chunk with second timestamp. </param>
        /// <param name="timescale"> Gets the timescale in which both the timestamps and durations are represented. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventIncomingVideoStreamsOutOfSyncEventData"/> instance for mocking. </returns>
        public static MediaLiveEventIncomingVideoStreamsOutOfSyncEventData MediaLiveEventIncomingVideoStreamsOutOfSyncEventData(string firstTimestamp = default, string firstDuration = default, string secondTimestamp = default, string secondDuration = default, string timescale = default)
        {
            return new MediaLiveEventIncomingVideoStreamsOutOfSyncEventData(firstTimestamp, firstDuration, secondTimestamp, secondDuration, timescale);
        }

        /// <summary> Initializes new instance of MediaLiveEventIncomingDataChunkDroppedEventData class. </summary>
        /// <param name="timestamp"> Gets the timestamp of the data chunk dropped. </param>
        /// <param name="trackType"> Gets the type of the track (Audio / Video). </param>
        /// <param name="bitrate"> Gets the bitrate of the track. </param>
        /// <param name="timescale"> Gets the timescale of the Timestamp. </param>
        /// <param name="resultCode"> Gets the result code for fragment drop operation. </param>
        /// <param name="trackName"> Gets the name of the track for which fragment is dropped. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventIncomingDataChunkDroppedEventData"/> instance for mocking. </returns>
        public static MediaLiveEventIncomingDataChunkDroppedEventData MediaLiveEventIncomingDataChunkDroppedEventData(string timestamp = default, string trackType = default, long? bitrate = default, string timescale = default, string resultCode = default, string trackName = default)
        {
            return new MediaLiveEventIncomingDataChunkDroppedEventData(timestamp, trackType, bitrate, timescale, resultCode, trackName);
        }

        /// <summary> Initializes new instance of MediaLiveEventIngestHeartbeatEventData class. </summary>
        /// <param name="trackType"> Gets the type of the track (Audio / Video). </param>
        /// <param name="trackName"> Gets the track name. </param>
        /// <param name="bitrate"> Gets the bitrate of the track. </param>
        /// <param name="incomingBitrate"> Gets the incoming bitrate. </param>
        /// <param name="lastTimestamp"> Gets the last timestamp. </param>
        /// <param name="timescale"> Gets the timescale of the last timestamp. </param>
        /// <param name="overlapCount"> Gets the fragment Overlap count. </param>
        /// <param name="discontinuityCount"> Gets the fragment Discontinuity count. </param>
        /// <param name="nonincreasingCount"> Gets Non increasing count. </param>
        /// <param name="unexpectedBitrate"> Gets a value indicating whether unexpected bitrate is present or not. </param>
        /// <param name="state"> Gets the state of the live event. </param>
        /// <param name="healthy"> Gets a value indicating whether preview is healthy or not. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventIngestHeartbeatEventData"/> instance for mocking. </returns>
        public static MediaLiveEventIngestHeartbeatEventData MediaLiveEventIngestHeartbeatEventData(string trackType = default, string trackName = default, long? bitrate = default, long? incomingBitrate = default, string lastTimestamp = default, string timescale = default, long? overlapCount = default, long? discontinuityCount = default, long? nonincreasingCount = default, bool? unexpectedBitrate = default, string state = default, bool? healthy = default)
        {
            return new MediaLiveEventIngestHeartbeatEventData(trackType, trackName, bitrate, incomingBitrate, lastTimestamp, timescale, overlapCount, discontinuityCount, nonincreasingCount, unexpectedBitrate, state, healthy);
        }

        /// <summary> Initializes new instance of MediaLiveEventTrackDiscontinuityDetectedEventData class. </summary>
        /// <param name="trackType"> Gets the type of the track (Audio / Video). </param>
        /// <param name="trackName"> Gets the track name. </param>
        /// <param name="bitrate"> Gets the bitrate. </param>
        /// <param name="previousTimestamp"> Gets the timestamp of the previous fragment. </param>
        /// <param name="newTimestamp"> Gets the timestamp of the current fragment. </param>
        /// <param name="timescale"> Gets the timescale in which both timestamps and discontinuity gap are represented. </param>
        /// <param name="discontinuityGap"> Gets the discontinuity gap between PreviousTimestamp and NewTimestamp. </param>
        /// <returns> A new <see cref="SystemEvents.MediaLiveEventTrackDiscontinuityDetectedEventData"/> instance for mocking. </returns>
        public static MediaLiveEventTrackDiscontinuityDetectedEventData MediaLiveEventTrackDiscontinuityDetectedEventData(string trackType = default, string trackName = default, long? bitrate = default, string previousTimestamp = default, string newTimestamp = default, string timescale = default, string discontinuityGap = default)
        {
            return new MediaLiveEventTrackDiscontinuityDetectedEventData(trackType, trackName, bitrate, previousTimestamp, newTimestamp, timescale, discontinuityGap);
        }

        /// <summary> Initializes new instance of MapsGeofenceEventProperties class. </summary>
        /// <param name="expiredGeofenceGeometryId"> Lists of the geometry ID of the geofence which is expired relative to the user time in the request. </param>
        /// <param name="geometries"> Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence. </param>
        /// <param name="invalidPeriodGeofenceGeometryId"> Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request. </param>
        /// <param name="isEventPublished"> True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. </param>
        /// <returns> A new <see cref="SystemEvents.MapsGeofenceEventProperties"/> instance for mocking. </returns>
        public static MapsGeofenceEventProperties MapsGeofenceEventProperties(IReadOnlyList<string> expiredGeofenceGeometryId = default, IReadOnlyList<MapsGeofenceGeometry> geometries = default, IReadOnlyList<string> invalidPeriodGeofenceGeometryId = default, bool? isEventPublished = default)
        {
            expiredGeofenceGeometryId ??= new List<string>();
            geometries ??= new List<MapsGeofenceGeometry>();
            invalidPeriodGeofenceGeometryId ??= new List<string>();
            return new MapsGeofenceEventProperties(expiredGeofenceGeometryId, geometries, invalidPeriodGeofenceGeometryId, isEventPublished);
        }

        /// <summary> Initializes new instance of MapsGeofenceGeometry class. </summary>
        /// <param name="deviceId"> ID of the device. </param>
        /// <param name="distance"> Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. </param>
        /// <param name="geometryId"> The unique ID for the geofence geometry. </param>
        /// <param name="nearestLat"> Latitude of the nearest point of the geometry. </param>
        /// <param name="nearestLon"> Longitude of the nearest point of the geometry. </param>
        /// <param name="udId"> The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing post API. </param>
        /// <returns> A new <see cref="SystemEvents.MapsGeofenceGeometry"/> instance for mocking. </returns>
        public static MapsGeofenceGeometry MapsGeofenceGeometry(string deviceId = default, float? distance = default, string geometryId = default, float? nearestLat = default, float? nearestLon = default, string udId = default)
        {
            return new MapsGeofenceGeometry(deviceId, distance, geometryId, nearestLat, nearestLon, udId);
        }

        /// <summary> Initializes new instance of AppConfigurationKeyValueModifiedEventData class. </summary>
        /// <param name="key"> The key used to identify the key-value that was modified. </param>
        /// <param name="label"> The label, if any, used to identify the key-value that was modified. </param>
        /// <param name="etag"> The etag representing the new state of the key-value. </param>
        /// <param name="syncToken"> The sync token representing the server state after the event. </param>
        /// <returns> A new <see cref="SystemEvents.AppConfigurationKeyValueModifiedEventData"/> instance for mocking. </returns>
        public static AppConfigurationKeyValueModifiedEventData AppConfigurationKeyValueModifiedEventData(string key = default, string label = default, string etag = default, string syncToken = default)
        {
            return new AppConfigurationKeyValueModifiedEventData(key, label, etag, syncToken);
        }

        /// <summary> Initializes new instance of AppConfigurationKeyValueDeletedEventData class. </summary>
        /// <param name="key"> The key used to identify the key-value that was deleted. </param>
        /// <param name="label"> The label, if any, used to identify the key-value that was deleted. </param>
        /// <param name="etag"> The etag representing the key-value that was deleted. </param>
        /// <param name="syncToken"> The sync token representing the server state after the event. </param>
        /// <returns> A new <see cref="SystemEvents.AppConfigurationKeyValueDeletedEventData"/> instance for mocking. </returns>
        public static AppConfigurationKeyValueDeletedEventData AppConfigurationKeyValueDeletedEventData(string key = default, string label = default, string etag = default, string syncToken = default)
        {
            return new AppConfigurationKeyValueDeletedEventData(key, label, etag, syncToken);
        }

        /// <summary> Initializes new instance of SignalRServiceClientConnectionConnectedEventData class. </summary>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="hubName"> The hub of connected client connection. </param>
        /// <param name="connectionId"> The connection Id of connected client connection. </param>
        /// <param name="userId"> The user Id of connected client connection. </param>
        /// <returns> A new <see cref="SystemEvents.SignalRServiceClientConnectionConnectedEventData"/> instance for mocking. </returns>
        public static SignalRServiceClientConnectionConnectedEventData SignalRServiceClientConnectionConnectedEventData(DateTimeOffset? timestamp = default, string hubName = default, string connectionId = default, string userId = default)
        {
            return new SignalRServiceClientConnectionConnectedEventData(timestamp, hubName, connectionId, userId);
        }

        /// <summary> Initializes new instance of SignalRServiceClientConnectionDisconnectedEventData class. </summary>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="hubName"> The hub of connected client connection. </param>
        /// <param name="connectionId"> The connection Id of connected client connection. </param>
        /// <param name="userId"> The user Id of connected client connection. </param>
        /// <param name="errorMessage"> The message of error that cause the client connection disconnected. </param>
        /// <returns> A new <see cref="SystemEvents.SignalRServiceClientConnectionDisconnectedEventData"/> instance for mocking. </returns>
        public static SignalRServiceClientConnectionDisconnectedEventData SignalRServiceClientConnectionDisconnectedEventData(DateTimeOffset? timestamp = default, string hubName = default, string connectionId = default, string userId = default, string errorMessage = default)
        {
            return new SignalRServiceClientConnectionDisconnectedEventData(timestamp, hubName, connectionId, userId, errorMessage);
        }

        /// <summary> Initializes new instance of KeyVaultCertificateNewVersionCreatedEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultCertificateNewVersionCreatedEventData"/> instance for mocking. </returns>
        public static KeyVaultCertificateNewVersionCreatedEventData KeyVaultCertificateNewVersionCreatedEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultCertificateNewVersionCreatedEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultCertificateNearExpiryEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultCertificateNearExpiryEventData"/> instance for mocking. </returns>
        public static KeyVaultCertificateNearExpiryEventData KeyVaultCertificateNearExpiryEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultCertificateNearExpiryEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultCertificateExpiredEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultCertificateExpiredEventData"/> instance for mocking. </returns>
        public static KeyVaultCertificateExpiredEventData KeyVaultCertificateExpiredEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultCertificateExpiredEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultKeyNewVersionCreatedEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultKeyNewVersionCreatedEventData"/> instance for mocking. </returns>
        public static KeyVaultKeyNewVersionCreatedEventData KeyVaultKeyNewVersionCreatedEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultKeyNewVersionCreatedEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultKeyNearExpiryEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultKeyNearExpiryEventData"/> instance for mocking. </returns>
        public static KeyVaultKeyNearExpiryEventData KeyVaultKeyNearExpiryEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultKeyNearExpiryEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultKeyExpiredEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultKeyExpiredEventData"/> instance for mocking. </returns>
        public static KeyVaultKeyExpiredEventData KeyVaultKeyExpiredEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultKeyExpiredEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultSecretNewVersionCreatedEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultSecretNewVersionCreatedEventData"/> instance for mocking. </returns>
        public static KeyVaultSecretNewVersionCreatedEventData KeyVaultSecretNewVersionCreatedEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultSecretNewVersionCreatedEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultSecretNearExpiryEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultSecretNearExpiryEventData"/> instance for mocking. </returns>
        public static KeyVaultSecretNearExpiryEventData KeyVaultSecretNearExpiryEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultSecretNearExpiryEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultSecretExpiredEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultSecretExpiredEventData"/> instance for mocking. </returns>
        public static KeyVaultSecretExpiredEventData KeyVaultSecretExpiredEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultSecretExpiredEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of KeyVaultAccessPolicyChangedEventData class. </summary>
        /// <param name="id"> The id of the object that triggered this event. </param>
        /// <param name="vaultName"> Key vault name of the object that triggered this event. </param>
        /// <param name="objectType"> The type of the object that triggered this event. </param>
        /// <param name="objectName"> The name of the object that triggered this event. </param>
        /// <param name="version"> The version of the object that triggered this event. </param>
        /// <param name="nbf"> Not before date of the object that triggered this event. </param>
        /// <param name="exp"> The expiration date of the object that triggered this event. </param>
        /// <returns> A new <see cref="SystemEvents.KeyVaultAccessPolicyChangedEventData"/> instance for mocking. </returns>
        public static KeyVaultAccessPolicyChangedEventData KeyVaultAccessPolicyChangedEventData(string id = default, string vaultName = default, string objectType = default, string objectName = default, string version = default, float? nbf = default, float? exp = default)
        {
            return new KeyVaultAccessPolicyChangedEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        }

        /// <summary> Initializes new instance of MachineLearningServicesModelRegisteredEventData class. </summary>
        /// <param name="modelName"> The name of the model that was registered. </param>
        /// <param name="modelVersion"> The version of the model that was registered. </param>
        /// <param name="modelTags"> The tags of the model that was registered. </param>
        /// <param name="modelProperties"> The properties of the model that was registered. </param>
        /// <returns> A new <see cref="SystemEvents.MachineLearningServicesModelRegisteredEventData"/> instance for mocking. </returns>
        public static MachineLearningServicesModelRegisteredEventData MachineLearningServicesModelRegisteredEventData(string modelName = default, string modelVersion = default, object modelTags = default, object modelProperties = default)
        {
            return new MachineLearningServicesModelRegisteredEventData(modelName, modelVersion, modelTags, modelProperties);
        }

        /// <summary> Initializes new instance of MachineLearningServicesModelDeployedEventData class. </summary>
        /// <param name="serviceName"> The name of the deployed service. </param>
        /// <param name="serviceComputeType"> The compute type (e.g. ACI, AKS) of the deployed service. </param>
        /// <param name="modelIds"> A common separated list of model IDs. The IDs of the models deployed in the service. </param>
        /// <param name="serviceTags"> The tags of the deployed service. </param>
        /// <param name="serviceProperties"> The properties of the deployed service. </param>
        /// <returns> A new <see cref="SystemEvents.MachineLearningServicesModelDeployedEventData"/> instance for mocking. </returns>
        public static MachineLearningServicesModelDeployedEventData MachineLearningServicesModelDeployedEventData(string serviceName = default, string serviceComputeType = default, string modelIds = default, object serviceTags = default, object serviceProperties = default)
        {
            return new MachineLearningServicesModelDeployedEventData(serviceName, serviceComputeType, modelIds, serviceTags, serviceProperties);
        }

        /// <summary> Initializes new instance of MachineLearningServicesRunCompletedEventData class. </summary>
        /// <param name="experimentId"> The ID of the experiment that the run belongs to. </param>
        /// <param name="experimentName"> The name of the experiment that the run belongs to. </param>
        /// <param name="runId"> The ID of the Run that was completed. </param>
        /// <param name="runType"> The Run Type of the completed Run. </param>
        /// <param name="runTags"> The tags of the completed Run. </param>
        /// <param name="runProperties"> The properties of the completed Run. </param>
        /// <returns> A new <see cref="SystemEvents.MachineLearningServicesRunCompletedEventData"/> instance for mocking. </returns>
        public static MachineLearningServicesRunCompletedEventData MachineLearningServicesRunCompletedEventData(string experimentId = default, string experimentName = default, string runId = default, string runType = default, object runTags = default, object runProperties = default)
        {
            return new MachineLearningServicesRunCompletedEventData(experimentId, experimentName, runId, runType, runTags, runProperties);
        }

        /// <summary> Initializes new instance of MachineLearningServicesDatasetDriftDetectedEventData class. </summary>
        /// <param name="dataDriftId"> The ID of the data drift monitor that triggered the event. </param>
        /// <param name="dataDriftName"> The name of the data drift monitor that triggered the event. </param>
        /// <param name="runId"> The ID of the Run that detected data drift. </param>
        /// <param name="baseDatasetId"> The ID of the base Dataset used to detect drift. </param>
        /// <param name="targetDatasetId"> The ID of the target Dataset used to detect drift. </param>
        /// <param name="driftCoefficient"> The coefficient result that triggered the event. </param>
        /// <param name="startTime"> The start time of the target dataset time series that resulted in drift detection. </param>
        /// <param name="endTime"> The end time of the target dataset time series that resulted in drift detection. </param>
        /// <returns> A new <see cref="SystemEvents.MachineLearningServicesDatasetDriftDetectedEventData"/> instance for mocking. </returns>
        public static MachineLearningServicesDatasetDriftDetectedEventData MachineLearningServicesDatasetDriftDetectedEventData(string dataDriftId = default, string dataDriftName = default, string runId = default, string baseDatasetId = default, string targetDatasetId = default, double? driftCoefficient = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default)
        {
            return new MachineLearningServicesDatasetDriftDetectedEventData(dataDriftId, dataDriftName, runId, baseDatasetId, targetDatasetId, driftCoefficient, startTime, endTime);
        }

        /// <summary> Initializes new instance of MachineLearningServicesRunStatusChangedEventData class. </summary>
        /// <param name="experimentId"> The ID of the experiment that the Machine Learning Run belongs to. </param>
        /// <param name="experimentName"> The name of the experiment that the Machine Learning Run belongs to. </param>
        /// <param name="runId"> The ID of the Machine Learning Run. </param>
        /// <param name="runType"> The Run Type of the Machine Learning Run. </param>
        /// <param name="runTags"> The tags of the Machine Learning Run. </param>
        /// <param name="runProperties"> The properties of the Machine Learning Run. </param>
        /// <param name="runStatus"> The status of the Machine Learning Run. </param>
        /// <returns> A new <see cref="SystemEvents.MachineLearningServicesRunStatusChangedEventData"/> instance for mocking. </returns>
        public static MachineLearningServicesRunStatusChangedEventData MachineLearningServicesRunStatusChangedEventData(string experimentId = default, string experimentName = default, string runId = default, string runType = default, object runTags = default, object runProperties = default, string runStatus = default)
        {
            return new MachineLearningServicesRunStatusChangedEventData(experimentId, experimentName, runId, runType, runTags, runProperties, runStatus);
        }

        /// <summary> Initializes new instance of RedisPatchingCompletedEventData class. </summary>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="name"> The name of this event. </param>
        /// <param name="status"> The status of this event. Failed or  succeeded. </param>
        /// <returns> A new <see cref="SystemEvents.RedisPatchingCompletedEventData"/> instance for mocking. </returns>
        public static RedisPatchingCompletedEventData RedisPatchingCompletedEventData(DateTimeOffset? timestamp = default, string name = default, string status = default)
        {
            return new RedisPatchingCompletedEventData(timestamp, name, status);
        }

        /// <summary> Initializes new instance of RedisScalingCompletedEventData class. </summary>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="name"> The name of this event. </param>
        /// <param name="status"> The status of this event. Failed or  succeeded. </param>
        /// <returns> A new <see cref="SystemEvents.RedisScalingCompletedEventData"/> instance for mocking. </returns>
        public static RedisScalingCompletedEventData RedisScalingCompletedEventData(DateTimeOffset? timestamp = default, string name = default, string status = default)
        {
            return new RedisScalingCompletedEventData(timestamp, name, status);
        }

        /// <summary> Initializes new instance of RedisExportRdbCompletedEventData class. </summary>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="name"> The name of this event. </param>
        /// <param name="status"> The status of this event. Failed or  succeeded. </param>
        /// <returns> A new <see cref="SystemEvents.RedisExportRdbCompletedEventData"/> instance for mocking. </returns>
        public static RedisExportRdbCompletedEventData RedisExportRdbCompletedEventData(DateTimeOffset? timestamp = default, string name = default, string status = default)
        {
            return new RedisExportRdbCompletedEventData(timestamp, name, status);
        }

        /// <summary> Initializes new instance of RedisImportRdbCompletedEventData class. </summary>
        /// <param name="timestamp"> The time at which the event occurred. </param>
        /// <param name="name"> The name of this event. </param>
        /// <param name="status"> The status of this event. Failed or  succeeded. </param>
        /// <returns> A new <see cref="SystemEvents.RedisImportRdbCompletedEventData"/> instance for mocking. </returns>
        public static RedisImportRdbCompletedEventData RedisImportRdbCompletedEventData(DateTimeOffset? timestamp = default, string name = default, string status = default)
        {
            return new RedisImportRdbCompletedEventData(timestamp, name, status);
        }

        /// <summary> Initializes new instance of WebAppUpdatedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebAppUpdatedEventData"/> instance for mocking. </returns>
        public static WebAppUpdatedEventData WebAppUpdatedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebAppUpdatedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of AppEventTypeDetail class. </summary>
        /// <param name="action"> Type of action of the operation. </param>
        /// <returns> A new <see cref="SystemEvents.AppEventTypeDetail"/> instance for mocking. </returns>
        public static AppEventTypeDetail AppEventTypeDetail(AppAction? action = default)
        {
            return new AppEventTypeDetail(action);
        }

        /// <summary> Initializes new instance of WebBackupOperationStartedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebBackupOperationStartedEventData"/> instance for mocking. </returns>
        public static WebBackupOperationStartedEventData WebBackupOperationStartedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebBackupOperationStartedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebBackupOperationCompletedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebBackupOperationCompletedEventData"/> instance for mocking. </returns>
        public static WebBackupOperationCompletedEventData WebBackupOperationCompletedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebBackupOperationCompletedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebBackupOperationFailedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebBackupOperationFailedEventData"/> instance for mocking. </returns>
        public static WebBackupOperationFailedEventData WebBackupOperationFailedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebBackupOperationFailedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebRestoreOperationStartedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebRestoreOperationStartedEventData"/> instance for mocking. </returns>
        public static WebRestoreOperationStartedEventData WebRestoreOperationStartedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebRestoreOperationStartedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebRestoreOperationCompletedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebRestoreOperationCompletedEventData"/> instance for mocking. </returns>
        public static WebRestoreOperationCompletedEventData WebRestoreOperationCompletedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebRestoreOperationCompletedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebRestoreOperationFailedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebRestoreOperationFailedEventData"/> instance for mocking. </returns>
        public static WebRestoreOperationFailedEventData WebRestoreOperationFailedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebRestoreOperationFailedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebSlotSwapStartedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebSlotSwapStartedEventData"/> instance for mocking. </returns>
        public static WebSlotSwapStartedEventData WebSlotSwapStartedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebSlotSwapStartedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebSlotSwapCompletedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebSlotSwapCompletedEventData"/> instance for mocking. </returns>
        public static WebSlotSwapCompletedEventData WebSlotSwapCompletedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebSlotSwapCompletedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebSlotSwapFailedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebSlotSwapFailedEventData"/> instance for mocking. </returns>
        public static WebSlotSwapFailedEventData WebSlotSwapFailedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebSlotSwapFailedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebSlotSwapWithPreviewStartedEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebSlotSwapWithPreviewStartedEventData"/> instance for mocking. </returns>
        public static WebSlotSwapWithPreviewStartedEventData WebSlotSwapWithPreviewStartedEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebSlotSwapWithPreviewStartedEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebSlotSwapWithPreviewCancelledEventData class. </summary>
        /// <param name="appEventTypeDetail"> Detail of action on the app. </param>
        /// <param name="name"> name of the web site that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the site API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebSlotSwapWithPreviewCancelledEventData"/> instance for mocking. </returns>
        public static WebSlotSwapWithPreviewCancelledEventData WebSlotSwapWithPreviewCancelledEventData(AppEventTypeDetail appEventTypeDetail = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebSlotSwapWithPreviewCancelledEventData(appEventTypeDetail, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of WebAppServicePlanUpdatedEventData class. </summary>
        /// <param name="appServicePlanEventTypeDetail"> Detail of action on the app service plan. </param>
        /// <param name="sku"> sku of app service plan. </param>
        /// <param name="name"> name of the app service plan that had this event. </param>
        /// <param name="clientRequestId"> The client request id generated by the app service for the app service plan API operation that triggered this event. </param>
        /// <param name="correlationRequestId"> The correlation request id generated by the app service for the app service plan API operation that triggered this event. </param>
        /// <param name="requestId"> The request id generated by the app service for the app service plan API operation that triggered this event. </param>
        /// <param name="address"> HTTP request URL of this operation. </param>
        /// <param name="verb"> HTTP verb of this operation. </param>
        /// <returns> A new <see cref="SystemEvents.WebAppServicePlanUpdatedEventData"/> instance for mocking. </returns>
        public static WebAppServicePlanUpdatedEventData WebAppServicePlanUpdatedEventData(AppServicePlanEventTypeDetail appServicePlanEventTypeDetail = default, WebAppServicePlanUpdatedEventDataSku sku = default, string name = default, string clientRequestId = default, string correlationRequestId = default, string requestId = default, string address = default, string verb = default)
        {
            return new WebAppServicePlanUpdatedEventData(appServicePlanEventTypeDetail, sku, name, clientRequestId, correlationRequestId, requestId, address, verb);
        }

        /// <summary> Initializes new instance of AppServicePlanEventTypeDetail class. </summary>
        /// <param name="stampKind"> Kind of environment where app service plan is. </param>
        /// <param name="action"> Type of action on the app service plan. </param>
        /// <param name="status"> Asynchronous operation status of the operation on the app service plan. </param>
        /// <returns> A new <see cref="SystemEvents.AppServicePlanEventTypeDetail"/> instance for mocking. </returns>
        public static AppServicePlanEventTypeDetail AppServicePlanEventTypeDetail(StampKind? stampKind = default, AppServicePlanAction? action = default, AsyncStatus? status = default)
        {
            return new AppServicePlanEventTypeDetail(stampKind, action, status);
        }

        /// <summary> Initializes new instance of WebAppServicePlanUpdatedEventDataSku class. </summary>
        /// <param name="name"> name of app service plan sku. </param>
        /// <param name="tier"> tier of app service plan sku. </param>
        /// <param name="size"> size of app service plan sku. </param>
        /// <param name="family"> family of app service plan sku. </param>
        /// <param name="capacity"> capacity of app service plan sku. </param>
        /// <returns> A new <see cref="SystemEvents.WebAppServicePlanUpdatedEventDataSku"/> instance for mocking. </returns>
        public static WebAppServicePlanUpdatedEventDataSku WebAppServicePlanUpdatedEventDataSku(string name = default, string tier = default, string size = default, string family = default, string capacity = default)
        {
            return new WebAppServicePlanUpdatedEventDataSku(name, tier, size, family, capacity);
        }

        /// <summary> Initializes new instance of AcsChatEventBaseProperties class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatEventBaseProperties"/> instance for mocking. </returns>
        public static AcsChatEventBaseProperties AcsChatEventBaseProperties(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default)
        {
            return new AcsChatEventBaseProperties(recipientCommunicationIdentifier, transactionId, threadId);
        }

        /// <summary> Initializes new instance of CommunicationIdentifierModel class. </summary>
        /// <param name="rawId"> Raw Id of the identifier. Optional in requests, required in responses. </param>
        /// <param name="communicationUser"> The communication user. </param>
        /// <param name="phoneNumber"> The phone number. </param>
        /// <param name="microsoftTeamsUser"> The Microsoft Teams user. </param>
        /// <returns> A new <see cref="SystemEvents.CommunicationIdentifierModel"/> instance for mocking. </returns>
        public static CommunicationIdentifierModel CommunicationIdentifierModel(string rawId = default, CommunicationUserIdentifierModel communicationUser = default, PhoneNumberIdentifierModel phoneNumber = default, MicrosoftTeamsUserIdentifierModel microsoftTeamsUser = default)
        {
            return new CommunicationIdentifierModel(rawId, communicationUser, phoneNumber, microsoftTeamsUser);
        }

        /// <summary> Initializes new instance of CommunicationUserIdentifierModel class. </summary>
        /// <param name="id"> The Id of the communication user. </param>
        /// <returns> A new <see cref="SystemEvents.CommunicationUserIdentifierModel"/> instance for mocking. </returns>
        public static CommunicationUserIdentifierModel CommunicationUserIdentifierModel(string id = default)
        {
            return new CommunicationUserIdentifierModel(id);
        }

        /// <summary> Initializes new instance of PhoneNumberIdentifierModel class. </summary>
        /// <param name="value"> The phone number in E.164 format. </param>
        /// <returns> A new <see cref="SystemEvents.PhoneNumberIdentifierModel"/> instance for mocking. </returns>
        public static PhoneNumberIdentifierModel PhoneNumberIdentifierModel(string value = default)
        {
            return new PhoneNumberIdentifierModel(value);
        }

        /// <summary> Initializes new instance of MicrosoftTeamsUserIdentifierModel class. </summary>
        /// <param name="userId"> The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. </param>
        /// <param name="isAnonymous"> True if the Microsoft Teams user is anonymous. By default false if missing. </param>
        /// <param name="cloud"> The cloud that the Microsoft Teams user belongs to. By default &apos;public&apos; if missing. </param>
        /// <returns> A new <see cref="SystemEvents.MicrosoftTeamsUserIdentifierModel"/> instance for mocking. </returns>
        public static MicrosoftTeamsUserIdentifierModel MicrosoftTeamsUserIdentifierModel(string userId = default, bool? isAnonymous = default, CommunicationCloudEnvironmentModel? cloud = default)
        {
            return new MicrosoftTeamsUserIdentifierModel(userId, isAnonymous, cloud);
        }

        /// <summary> Initializes new instance of AcsChatMessageEventBaseProperties class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageEventBaseProperties"/> instance for mocking. </returns>
        public static AcsChatMessageEventBaseProperties AcsChatMessageEventBaseProperties(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default)
        {
            return new AcsChatMessageEventBaseProperties(recipientCommunicationIdentifier, transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version);
        }

        /// <summary> Initializes new instance of AcsChatMessageReceivedEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <param name="messageBody"> The body of the chat message. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageReceivedEventData"/> instance for mocking. </returns>
        public static AcsChatMessageReceivedEventData AcsChatMessageReceivedEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default, string messageBody = default)
        {
            return new AcsChatMessageReceivedEventData(recipientCommunicationIdentifier, transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version, messageBody);
        }

        /// <summary> Initializes new instance of AcsChatEventInThreadBaseProperties class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatEventInThreadBaseProperties"/> instance for mocking. </returns>
        public static AcsChatEventInThreadBaseProperties AcsChatEventInThreadBaseProperties(string transactionId = default, string threadId = default)
        {
            return new AcsChatEventInThreadBaseProperties(transactionId, threadId);
        }

        /// <summary> Initializes new instance of AcsChatMessageEventInThreadBaseProperties class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageEventInThreadBaseProperties"/> instance for mocking. </returns>
        public static AcsChatMessageEventInThreadBaseProperties AcsChatMessageEventInThreadBaseProperties(string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default)
        {
            return new AcsChatMessageEventInThreadBaseProperties(transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version);
        }

        /// <summary> Initializes new instance of AcsChatMessageReceivedInThreadEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <param name="messageBody"> The body of the chat message. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageReceivedInThreadEventData"/> instance for mocking. </returns>
        public static AcsChatMessageReceivedInThreadEventData AcsChatMessageReceivedInThreadEventData(string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default, string messageBody = default)
        {
            return new AcsChatMessageReceivedInThreadEventData(transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version, messageBody);
        }

        /// <summary> Initializes new instance of AcsChatMessageEditedEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <param name="messageBody"> The body of the chat message. </param>
        /// <param name="editTime"> The time at which the message was edited. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageEditedEventData"/> instance for mocking. </returns>
        public static AcsChatMessageEditedEventData AcsChatMessageEditedEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default, string messageBody = default, DateTimeOffset? editTime = default)
        {
            return new AcsChatMessageEditedEventData(recipientCommunicationIdentifier, transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version, messageBody, editTime);
        }

        /// <summary> Initializes new instance of AcsChatMessageEditedInThreadEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <param name="messageBody"> The body of the chat message. </param>
        /// <param name="editTime"> The time at which the message was edited. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageEditedInThreadEventData"/> instance for mocking. </returns>
        public static AcsChatMessageEditedInThreadEventData AcsChatMessageEditedInThreadEventData(string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default, string messageBody = default, DateTimeOffset? editTime = default)
        {
            return new AcsChatMessageEditedInThreadEventData(transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version, messageBody, editTime);
        }

        /// <summary> Initializes new instance of AcsChatMessageDeletedEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <param name="deleteTime"> The time at which the message was deleted. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageDeletedEventData"/> instance for mocking. </returns>
        public static AcsChatMessageDeletedEventData AcsChatMessageDeletedEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default, DateTimeOffset? deleteTime = default)
        {
            return new AcsChatMessageDeletedEventData(recipientCommunicationIdentifier, transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version, deleteTime);
        }

        /// <summary> Initializes new instance of AcsChatMessageDeletedInThreadEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="messageId"> The chat message id. </param>
        /// <param name="senderCommunicationIdentifier"> The communication identifier of the sender. </param>
        /// <param name="senderDisplayName"> The display name of the sender. </param>
        /// <param name="composeTime"> The original compose time of the message. </param>
        /// <param name="type"> The type of the message. </param>
        /// <param name="version"> The version of the message. </param>
        /// <param name="deleteTime"> The time at which the message was deleted. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatMessageDeletedInThreadEventData"/> instance for mocking. </returns>
        public static AcsChatMessageDeletedInThreadEventData AcsChatMessageDeletedInThreadEventData(string transactionId = default, string threadId = default, string messageId = default, CommunicationIdentifierModel senderCommunicationIdentifier = default, string senderDisplayName = default, DateTimeOffset? composeTime = default, string type = default, long? version = default, DateTimeOffset? deleteTime = default)
        {
            return new AcsChatMessageDeletedInThreadEventData(transactionId, threadId, messageId, senderCommunicationIdentifier, senderDisplayName, composeTime, type, version, deleteTime);
        }

        /// <summary> Initializes new instance of AcsChatThreadEventBaseProperties class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadEventBaseProperties"/> instance for mocking. </returns>
        public static AcsChatThreadEventBaseProperties AcsChatThreadEventBaseProperties(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default)
        {
            return new AcsChatThreadEventBaseProperties(recipientCommunicationIdentifier, transactionId, threadId, createTime, version);
        }

        /// <summary> Initializes new instance of AcsChatThreadCreatedWithUserEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="createdByCommunicationIdentifier"> The communication identifier of the user who created the thread. </param>
        /// <param name="properties"> The thread properties. </param>
        /// <param name="participants"> The list of properties of participants who are part of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadCreatedWithUserEventData"/> instance for mocking. </returns>
        public static AcsChatThreadCreatedWithUserEventData AcsChatThreadCreatedWithUserEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, CommunicationIdentifierModel createdByCommunicationIdentifier = default, IReadOnlyDictionary<string, object> properties = default, IReadOnlyList<AcsChatThreadParticipantProperties> participants = default)
        {
            properties ??= new Dictionary<string, object>();
            participants ??= new List<AcsChatThreadParticipantProperties>();
            return new AcsChatThreadCreatedWithUserEventData(recipientCommunicationIdentifier, transactionId, threadId, createTime, version, createdByCommunicationIdentifier, properties, participants);
        }

        /// <summary> Initializes new instance of AcsChatThreadParticipantProperties class. </summary>
        /// <param name="displayName"> The name of the user. </param>
        /// <param name="participantCommunicationIdentifier"> The communication identifier of the user. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadParticipantProperties"/> instance for mocking. </returns>
        public static AcsChatThreadParticipantProperties AcsChatThreadParticipantProperties(string displayName = default, CommunicationIdentifierModel participantCommunicationIdentifier = default)
        {
            return new AcsChatThreadParticipantProperties(displayName, participantCommunicationIdentifier);
        }

        /// <summary> Initializes new instance of AcsChatThreadEventInThreadBaseProperties class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadEventInThreadBaseProperties"/> instance for mocking. </returns>
        public static AcsChatThreadEventInThreadBaseProperties AcsChatThreadEventInThreadBaseProperties(string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default)
        {
            return new AcsChatThreadEventInThreadBaseProperties(transactionId, threadId, createTime, version);
        }

        /// <summary> Initializes new instance of AcsChatThreadCreatedEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="createdByCommunicationIdentifier"> The communication identifier of the user who created the thread. </param>
        /// <param name="properties"> The thread properties. </param>
        /// <param name="participants"> The list of properties of participants who are part of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadCreatedEventData"/> instance for mocking. </returns>
        public static AcsChatThreadCreatedEventData AcsChatThreadCreatedEventData(string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, CommunicationIdentifierModel createdByCommunicationIdentifier = default, IReadOnlyDictionary<string, object> properties = default, IReadOnlyList<AcsChatThreadParticipantProperties> participants = default)
        {
            properties ??= new Dictionary<string, object>();
            participants ??= new List<AcsChatThreadParticipantProperties>();
            return new AcsChatThreadCreatedEventData(transactionId, threadId, createTime, version, createdByCommunicationIdentifier, properties, participants);
        }

        /// <summary> Initializes new instance of AcsChatThreadWithUserDeletedEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="deletedByCommunicationIdentifier"> The communication identifier of the user who deleted the thread. </param>
        /// <param name="deleteTime"> The deletion time of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadWithUserDeletedEventData"/> instance for mocking. </returns>
        public static AcsChatThreadWithUserDeletedEventData AcsChatThreadWithUserDeletedEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, CommunicationIdentifierModel deletedByCommunicationIdentifier = default, DateTimeOffset? deleteTime = default)
        {
            return new AcsChatThreadWithUserDeletedEventData(recipientCommunicationIdentifier, transactionId, threadId, createTime, version, deletedByCommunicationIdentifier, deleteTime);
        }

        /// <summary> Initializes new instance of AcsChatThreadDeletedEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="deletedByCommunicationIdentifier"> The communication identifier of the user who deleted the thread. </param>
        /// <param name="deleteTime"> The deletion time of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadDeletedEventData"/> instance for mocking. </returns>
        public static AcsChatThreadDeletedEventData AcsChatThreadDeletedEventData(string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, CommunicationIdentifierModel deletedByCommunicationIdentifier = default, DateTimeOffset? deleteTime = default)
        {
            return new AcsChatThreadDeletedEventData(transactionId, threadId, createTime, version, deletedByCommunicationIdentifier, deleteTime);
        }

        /// <summary> Initializes new instance of AcsChatThreadPropertiesUpdatedPerUserEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="editedByCommunicationIdentifier"> The communication identifier of the user who updated the thread properties. </param>
        /// <param name="editTime"> The time at which the properties of the thread were updated. </param>
        /// <param name="properties"> The updated thread properties. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadPropertiesUpdatedPerUserEventData"/> instance for mocking. </returns>
        public static AcsChatThreadPropertiesUpdatedPerUserEventData AcsChatThreadPropertiesUpdatedPerUserEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, CommunicationIdentifierModel editedByCommunicationIdentifier = default, DateTimeOffset? editTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AcsChatThreadPropertiesUpdatedPerUserEventData(recipientCommunicationIdentifier, transactionId, threadId, createTime, version, editedByCommunicationIdentifier, editTime, properties);
        }

        /// <summary> Initializes new instance of AcsChatThreadPropertiesUpdatedEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="editedByCommunicationIdentifier"> The communication identifier of the user who updated the thread properties. </param>
        /// <param name="editTime"> The time at which the properties of the thread were updated. </param>
        /// <param name="properties"> The updated thread properties. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatThreadPropertiesUpdatedEventData"/> instance for mocking. </returns>
        public static AcsChatThreadPropertiesUpdatedEventData AcsChatThreadPropertiesUpdatedEventData(string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, CommunicationIdentifierModel editedByCommunicationIdentifier = default, DateTimeOffset? editTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AcsChatThreadPropertiesUpdatedEventData(transactionId, threadId, createTime, version, editedByCommunicationIdentifier, editTime, properties);
        }

        /// <summary> Initializes new instance of AcsChatParticipantAddedToThreadWithUserEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="time"> The time at which the user was added to the thread. </param>
        /// <param name="addedByCommunicationIdentifier"> The communication identifier of the user who added the user. </param>
        /// <param name="participantAdded"> The details of the user who was added. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatParticipantAddedToThreadWithUserEventData"/> instance for mocking. </returns>
        public static AcsChatParticipantAddedToThreadWithUserEventData AcsChatParticipantAddedToThreadWithUserEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, DateTimeOffset? time = default, CommunicationIdentifierModel addedByCommunicationIdentifier = default, AcsChatThreadParticipantProperties participantAdded = default)
        {
            return new AcsChatParticipantAddedToThreadWithUserEventData(recipientCommunicationIdentifier, transactionId, threadId, createTime, version, time, addedByCommunicationIdentifier, participantAdded);
        }

        /// <summary> Initializes new instance of AcsChatParticipantRemovedFromThreadWithUserEventData class. </summary>
        /// <param name="recipientCommunicationIdentifier"> The communication identifier of the target user. </param>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="createTime"> The original creation time of the thread. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <param name="time"> The time at which the user was removed to the thread. </param>
        /// <param name="removedByCommunicationIdentifier"> The communication identifier of the user who removed the user. </param>
        /// <param name="participantRemoved"> The details of the user who was removed. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatParticipantRemovedFromThreadWithUserEventData"/> instance for mocking. </returns>
        public static AcsChatParticipantRemovedFromThreadWithUserEventData AcsChatParticipantRemovedFromThreadWithUserEventData(CommunicationIdentifierModel recipientCommunicationIdentifier = default, string transactionId = default, string threadId = default, DateTimeOffset? createTime = default, long? version = default, DateTimeOffset? time = default, CommunicationIdentifierModel removedByCommunicationIdentifier = default, AcsChatThreadParticipantProperties participantRemoved = default)
        {
            return new AcsChatParticipantRemovedFromThreadWithUserEventData(recipientCommunicationIdentifier, transactionId, threadId, createTime, version, time, removedByCommunicationIdentifier, participantRemoved);
        }

        /// <summary> Initializes new instance of AcsChatParticipantAddedToThreadEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="time"> The time at which the user was added to the thread. </param>
        /// <param name="addedByCommunicationIdentifier"> The communication identifier of the user who added the user. </param>
        /// <param name="participantAdded"> The details of the user who was added. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatParticipantAddedToThreadEventData"/> instance for mocking. </returns>
        public static AcsChatParticipantAddedToThreadEventData AcsChatParticipantAddedToThreadEventData(string transactionId = default, string threadId = default, DateTimeOffset? time = default, CommunicationIdentifierModel addedByCommunicationIdentifier = default, AcsChatThreadParticipantProperties participantAdded = default, long? version = default)
        {
            return new AcsChatParticipantAddedToThreadEventData(transactionId, threadId, time, addedByCommunicationIdentifier, participantAdded, version);
        }

        /// <summary> Initializes new instance of AcsChatParticipantRemovedFromThreadEventData class. </summary>
        /// <param name="transactionId"> The transaction id will be used as co-relation vector. </param>
        /// <param name="threadId"> The chat thread id. </param>
        /// <param name="time"> The time at which the user was removed to the thread. </param>
        /// <param name="removedByCommunicationIdentifier"> The communication identifier of the user who removed the user. </param>
        /// <param name="participantRemoved"> The details of the user who was removed. </param>
        /// <param name="version"> The version of the thread. </param>
        /// <returns> A new <see cref="SystemEvents.AcsChatParticipantRemovedFromThreadEventData"/> instance for mocking. </returns>
        public static AcsChatParticipantRemovedFromThreadEventData AcsChatParticipantRemovedFromThreadEventData(string transactionId = default, string threadId = default, DateTimeOffset? time = default, CommunicationIdentifierModel removedByCommunicationIdentifier = default, AcsChatThreadParticipantProperties participantRemoved = default, long? version = default)
        {
            return new AcsChatParticipantRemovedFromThreadEventData(transactionId, threadId, time, removedByCommunicationIdentifier, participantRemoved, version);
        }

        /// <summary> Initializes new instance of AcsSmsEventBaseProperties class. </summary>
        /// <param name="messageId"> The identity of the SMS message. </param>
        /// <param name="from"> The identity of SMS message sender. </param>
        /// <param name="to"> The identity of SMS message receiver. </param>
        /// <returns> A new <see cref="SystemEvents.AcsSmsEventBaseProperties"/> instance for mocking. </returns>
        public static AcsSmsEventBaseProperties AcsSmsEventBaseProperties(string messageId = default, string @from = default, string to = default)
        {
            return new AcsSmsEventBaseProperties(messageId, @from, to);
        }

        /// <summary> Initializes new instance of AcsSmsDeliveryReportReceivedEventData class. </summary>
        /// <param name="messageId"> The identity of the SMS message. </param>
        /// <param name="from"> The identity of SMS message sender. </param>
        /// <param name="to"> The identity of SMS message receiver. </param>
        /// <param name="deliveryStatus"> Status of Delivery. </param>
        /// <param name="deliveryStatusDetails"> Details about Delivery Status. </param>
        /// <param name="deliveryAttempts"> List of details of delivery attempts made. </param>
        /// <param name="receivedTimestamp"> The time at which the SMS delivery report was received. </param>
        /// <param name="tag"> Customer Content. </param>
        /// <returns> A new <see cref="SystemEvents.AcsSmsDeliveryReportReceivedEventData"/> instance for mocking. </returns>
        public static AcsSmsDeliveryReportReceivedEventData AcsSmsDeliveryReportReceivedEventData(string messageId = default, string @from = default, string to = default, string deliveryStatus = default, string deliveryStatusDetails = default, IReadOnlyList<AcsSmsDeliveryAttemptProperties> deliveryAttempts = default, DateTimeOffset? receivedTimestamp = default, string tag = default)
        {
            deliveryAttempts ??= new List<AcsSmsDeliveryAttemptProperties>();
            return new AcsSmsDeliveryReportReceivedEventData(messageId, @from, to, deliveryStatus, deliveryStatusDetails, deliveryAttempts, receivedTimestamp, tag);
        }

        /// <summary> Initializes new instance of AcsSmsDeliveryAttemptProperties class. </summary>
        /// <param name="timestamp"> TimeStamp when delivery was attempted. </param>
        /// <param name="segmentsSucceeded"> Number of segments that were successfully delivered. </param>
        /// <param name="segmentsFailed"> Number of segments whose delivery failed. </param>
        /// <returns> A new <see cref="SystemEvents.AcsSmsDeliveryAttemptProperties"/> instance for mocking. </returns>
        public static AcsSmsDeliveryAttemptProperties AcsSmsDeliveryAttemptProperties(DateTimeOffset? timestamp = default, int? segmentsSucceeded = default, int? segmentsFailed = default)
        {
            return new AcsSmsDeliveryAttemptProperties(timestamp, segmentsSucceeded, segmentsFailed);
        }

        /// <summary> Initializes new instance of AcsSmsReceivedEventData class. </summary>
        /// <param name="messageId"> The identity of the SMS message. </param>
        /// <param name="from"> The identity of SMS message sender. </param>
        /// <param name="to"> The identity of SMS message receiver. </param>
        /// <param name="message"> The SMS content. </param>
        /// <param name="receivedTimestamp"> The time at which the SMS was received. </param>
        /// <returns> A new <see cref="SystemEvents.AcsSmsReceivedEventData"/> instance for mocking. </returns>
        public static AcsSmsReceivedEventData AcsSmsReceivedEventData(string messageId = default, string @from = default, string to = default, string message = default, DateTimeOffset? receivedTimestamp = default)
        {
            return new AcsSmsReceivedEventData(messageId, @from, to, message, receivedTimestamp);
        }

        /// <summary> Initializes new instance of AcsRecordingFileStatusUpdatedEventData class. </summary>
        /// <param name="recordingStorageInfo"> The details of recording storage information. </param>
        /// <param name="recordingStartTime"> The time at which the recording started. </param>
        /// <param name="recordingDurationMs"> The recording duration in milliseconds. </param>
        /// <param name="sessionEndReason"> The reason for ending recording session. </param>
        /// <returns> A new <see cref="SystemEvents.AcsRecordingFileStatusUpdatedEventData"/> instance for mocking. </returns>
        public static AcsRecordingFileStatusUpdatedEventData AcsRecordingFileStatusUpdatedEventData(AcsRecordingStorageInfoProperties recordingStorageInfo = default, DateTimeOffset? recordingStartTime = default, long? recordingDurationMs = default, string sessionEndReason = default)
        {
            return new AcsRecordingFileStatusUpdatedEventData(recordingStorageInfo, recordingStartTime, recordingDurationMs, sessionEndReason);
        }

        /// <summary> Initializes new instance of AcsRecordingStorageInfoProperties class. </summary>
        /// <param name="recordingChunks"> List of details of recording chunks information. </param>
        /// <returns> A new <see cref="SystemEvents.AcsRecordingStorageInfoProperties"/> instance for mocking. </returns>
        public static AcsRecordingStorageInfoProperties AcsRecordingStorageInfoProperties(IReadOnlyList<AcsRecordingChunkInfoProperties> recordingChunks = default)
        {
            recordingChunks ??= new List<AcsRecordingChunkInfoProperties>();
            return new AcsRecordingStorageInfoProperties(recordingChunks);
        }

        /// <summary> Initializes new instance of AcsRecordingChunkInfoProperties class. </summary>
        /// <param name="documentId"> The documentId of the recording chunk. </param>
        /// <param name="index"> The index of the recording chunk. </param>
        /// <param name="endReason"> The reason for ending the recording chunk. </param>
        /// <param name="metadataLocation"> The location of the metadata for this chunk. </param>
        /// <param name="contentLocation"> The location of the content for this chunk. </param>
        /// <returns> A new <see cref="SystemEvents.AcsRecordingChunkInfoProperties"/> instance for mocking. </returns>
        public static AcsRecordingChunkInfoProperties AcsRecordingChunkInfoProperties(string documentId = default, long? index = default, string endReason = default, string metadataLocation = default, string contentLocation = default)
        {
            return new AcsRecordingChunkInfoProperties(documentId, index, endReason, metadataLocation, contentLocation);
        }

        /// <summary> Initializes new instance of PolicyInsightsPolicyStateCreatedEventData class. </summary>
        /// <param name="timestamp"> The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. </param>
        /// <param name="policyAssignmentId"> The resource ID of the policy assignment. </param>
        /// <param name="policyDefinitionId"> The resource ID of the policy definition. </param>
        /// <param name="policyDefinitionReferenceId"> The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. </param>
        /// <param name="complianceState"> The compliance state of the resource with respect to the policy assignment. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="complianceReasonCode"> The compliance reason code. May be empty. </param>
        /// <returns> A new <see cref="SystemEvents.PolicyInsightsPolicyStateCreatedEventData"/> instance for mocking. </returns>
        public static PolicyInsightsPolicyStateCreatedEventData PolicyInsightsPolicyStateCreatedEventData(DateTimeOffset? timestamp = default, string policyAssignmentId = default, string policyDefinitionId = default, string policyDefinitionReferenceId = default, string complianceState = default, string subscriptionId = default, string complianceReasonCode = default)
        {
            return new PolicyInsightsPolicyStateCreatedEventData(timestamp, policyAssignmentId, policyDefinitionId, policyDefinitionReferenceId, complianceState, subscriptionId, complianceReasonCode);
        }

        /// <summary> Initializes new instance of PolicyInsightsPolicyStateChangedEventData class. </summary>
        /// <param name="timestamp"> The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. </param>
        /// <param name="policyAssignmentId"> The resource ID of the policy assignment. </param>
        /// <param name="policyDefinitionId"> The resource ID of the policy definition. </param>
        /// <param name="policyDefinitionReferenceId"> The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. </param>
        /// <param name="complianceState"> The compliance state of the resource with respect to the policy assignment. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="complianceReasonCode"> The compliance reason code. May be empty. </param>
        /// <returns> A new <see cref="SystemEvents.PolicyInsightsPolicyStateChangedEventData"/> instance for mocking. </returns>
        public static PolicyInsightsPolicyStateChangedEventData PolicyInsightsPolicyStateChangedEventData(DateTimeOffset? timestamp = default, string policyAssignmentId = default, string policyDefinitionId = default, string policyDefinitionReferenceId = default, string complianceState = default, string subscriptionId = default, string complianceReasonCode = default)
        {
            return new PolicyInsightsPolicyStateChangedEventData(timestamp, policyAssignmentId, policyDefinitionId, policyDefinitionReferenceId, complianceState, subscriptionId, complianceReasonCode);
        }

        /// <summary> Initializes new instance of PolicyInsightsPolicyStateDeletedEventData class. </summary>
        /// <param name="timestamp"> The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ. </param>
        /// <param name="policyAssignmentId"> The resource ID of the policy assignment. </param>
        /// <param name="policyDefinitionId"> The resource ID of the policy definition. </param>
        /// <param name="policyDefinitionReferenceId"> The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty. </param>
        /// <param name="complianceState"> The compliance state of the resource with respect to the policy assignment. </param>
        /// <param name="subscriptionId"> The subscription ID of the resource. </param>
        /// <param name="complianceReasonCode"> The compliance reason code. May be empty. </param>
        /// <returns> A new <see cref="SystemEvents.PolicyInsightsPolicyStateDeletedEventData"/> instance for mocking. </returns>
        public static PolicyInsightsPolicyStateDeletedEventData PolicyInsightsPolicyStateDeletedEventData(DateTimeOffset? timestamp = default, string policyAssignmentId = default, string policyDefinitionId = default, string policyDefinitionReferenceId = default, string complianceState = default, string subscriptionId = default, string complianceReasonCode = default)
        {
            return new PolicyInsightsPolicyStateDeletedEventData(timestamp, policyAssignmentId, policyDefinitionId, policyDefinitionReferenceId, complianceState, subscriptionId, complianceReasonCode);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingBoundaryChangedEventData class. </summary>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="parentId"> Id of the parent(field or seasonalField) it belongs to. </param>
        /// <param name="parentType"> Type of the parent it belongs to. </param>
        /// <param name="isPrimary"> A boolean flag indicating whether the boundary is primary or not. </param>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingBoundaryChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingBoundaryChangedEventData AgriFoodFarmingBoundaryChangedEventData(string farmerId = default, string parentId = default, string parentType = default, bool? isPrimary = default, AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingBoundaryChangedEventData(farmerId, parentId, parentType, isPrimary, actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingCropChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingCropChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingCropChangedEventData AgriFoodFarmingCropChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingCropChangedEventData(actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingCropVarietyChangedEventData class. </summary>
        /// <param name="cropId"> Id of the crop it belongs to. </param>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingCropVarietyChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingCropVarietyChangedEventData AgriFoodFarmingCropVarietyChangedEventData(string cropId = default, AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingCropVarietyChangedEventData(cropId, actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingFarmChangedEventData class. </summary>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingFarmChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingFarmChangedEventData AgriFoodFarmingFarmChangedEventData(string farmerId = default, AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingFarmChangedEventData(farmerId, actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingFarmerChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingFarmerChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingFarmerChangedEventData AgriFoodFarmingFarmerChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingFarmerChangedEventData(actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingFieldChangedEventData class. </summary>
        /// <param name="farmerId"> Farmer Id. </param>
        /// <param name="farmId"> Id of the associated Farm. </param>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingFieldChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingFieldChangedEventData AgriFoodFarmingFieldChangedEventData(string farmerId = default, string farmId = default, AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingFieldChangedEventData(farmerId, farmId, actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingSeasonalFieldChangedEventData class. </summary>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="seasonId"> Id of the season it belongs to. </param>
        /// <param name="fieldId"> Id of the field it belongs to. </param>
        /// <param name="farmId"> Id of the associated Farm. </param>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingSeasonalFieldChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingSeasonalFieldChangedEventData AgriFoodFarmingSeasonalFieldChangedEventData(string farmerId = default, string seasonId = default, string fieldId = default, string farmId = default, AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingSeasonalFieldChangedEventData(farmerId, seasonId, fieldId, farmId, actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingSeasonChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingSeasonChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingSeasonChangedEventData AgriFoodFarmingSeasonChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string status = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingSeasonChangedEventData(actionType, status, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingApplicationDataChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="source"> Source of the farm operation data. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingApplicationDataChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingApplicationDataChangedEventData AgriFoodFarmingApplicationDataChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string farmerId = default, string status = default, string source = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingApplicationDataChangedEventData(actionType, farmerId, status, source, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingPlantingDataChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="source"> Source of the farm operation data. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingPlantingDataChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingPlantingDataChangedEventData AgriFoodFarmingPlantingDataChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string farmerId = default, string status = default, string source = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingPlantingDataChangedEventData(actionType, farmerId, status, source, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingHarvestDataChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="source"> Source of the farm operation data. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingHarvestDataChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingHarvestDataChangedEventData AgriFoodFarmingHarvestDataChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string farmerId = default, string status = default, string source = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingHarvestDataChangedEventData(actionType, farmerId, status, source, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingTillageDataChangedEventData class. </summary>
        /// <param name="actionType"> Action occurred on a resource. </param>
        /// <param name="farmerId"> Id of the farmer it belongs to. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="source"> Source of the farm operation data. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingTillageDataChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingTillageDataChangedEventData AgriFoodFarmingTillageDataChangedEventData(AgriFoodFarmingResourceActionType? actionType = default, string farmerId = default, string status = default, string source = default, DateTimeOffset? modifiedDateTime = default, string eTag = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingTillageDataChangedEventData(actionType, farmerId, status, source, modifiedDateTime, eTag, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingSatelliteDataIngestionJobStatusChangedEventData class. </summary>
        /// <param name="farmerId"> Farmer id for which job was created. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="status"> Various states a job can be in. </param>
        /// <param name="lastActionDateTime"> Date-time when last action was taken on job, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="isCancellationRequested"> Flag that gets set when job cancellation is requested. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingSatelliteDataIngestionJobStatusChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingSatelliteDataIngestionJobStatusChangedEventData AgriFoodFarmingSatelliteDataIngestionJobStatusChangedEventData(string farmerId = default, string message = default, AgriFoodFarmingJobStatus? status = default, DateTimeOffset? lastActionDateTime = default, bool? isCancellationRequested = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingSatelliteDataIngestionJobStatusChangedEventData(farmerId, message, status, lastActionDateTime, isCancellationRequested, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingWeatherDataIngestionJobStatusChangedEventData class. </summary>
        /// <param name="farmerId"> Farmer id for which job was created. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="status"> Various states a job can be in. </param>
        /// <param name="lastActionDateTime"> Date-time when last action was taken on job, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="isCancellationRequested"> Flag that gets set when job cancellation is requested. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingWeatherDataIngestionJobStatusChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingWeatherDataIngestionJobStatusChangedEventData AgriFoodFarmingWeatherDataIngestionJobStatusChangedEventData(string farmerId = default, string message = default, AgriFoodFarmingJobStatus? status = default, DateTimeOffset? lastActionDateTime = default, bool? isCancellationRequested = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingWeatherDataIngestionJobStatusChangedEventData(farmerId, message, status, lastActionDateTime, isCancellationRequested, id, name, description, createdDateTime, properties);
        }

        /// <summary> Initializes new instance of AgriFoodFarmingFarmOperationDataIngestionJobStatusChangedEventData class. </summary>
        /// <param name="farmerId"> Farmer id for which job was created. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="status"> Various states a job can be in. </param>
        /// <param name="lastActionDateTime"> Date-time when last action was taken on job, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="isCancellationRequested"> Flag that gets set when job cancellation is requested. </param>
        /// <param name="id"> Unique id of resource. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A list of key value pairs that describe the resource.
        /// 
        /// Only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="SystemEvents.AgriFoodFarmingFarmOperationDataIngestionJobStatusChangedEventData"/> instance for mocking. </returns>
        public static AgriFoodFarmingFarmOperationDataIngestionJobStatusChangedEventData AgriFoodFarmingFarmOperationDataIngestionJobStatusChangedEventData(string farmerId = default, string message = default, AgriFoodFarmingJobStatus? status = default, DateTimeOffset? lastActionDateTime = default, bool? isCancellationRequested = default, string id = default, string name = default, string description = default, DateTimeOffset? createdDateTime = default, IReadOnlyDictionary<string, object> properties = default)
        {
            properties ??= new Dictionary<string, object>();
            return new AgriFoodFarmingFarmOperationDataIngestionJobStatusChangedEventData(farmerId, message, status, lastActionDateTime, isCancellationRequested, id, name, description, createdDateTime, properties);
        }
    }
}
