// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Azure.EventGrid.Messaging.SourceGeneration
{
    /// <summary>
    /// This class generates the SystemEventNames constant values as well as the SystemEventExtensions which contains a mapping
    /// from constant values to deserialization method for each system event.
    /// </summary>
    [Generator]
    internal class EventGridSourceGenerator : ISourceGenerator
    {
        private SourceVisitor _visitor;
        private bool _isSystemEventsLibrary;
        private const string Indent = "    ";

        public void Execute(GeneratorExecutionContext context)
        {
            _visitor = new SourceVisitor();
            _isSystemEventsLibrary = context.Compilation.AssemblyName == "Azure.Messaging.EventGrid.SystemEvents";
            var root = context.Compilation.GetSymbolsWithName(
                "SystemEvents",
                SymbolFilter.Namespace)
                .Single();
            _visitor.Visit(root);

            context.AddSource("SystemEventNames.cs", SourceText.From(ConstructSystemEventNames(), Encoding.UTF8));
            context.AddSource("SystemEventExtensions.cs", SourceText.From(ConstructSystemEventExtensions(), Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // Uncomment to debug
            //if (!Debugger.IsAttached)
            //{
            //    Debugger.Launch();
            //}
        }

        private string ConstructSystemEventNames()
        {
            string ns = _isSystemEventsLibrary ? "Azure.Messaging.EventGrid.SystemEvents" : "Azure.Messaging.EventGrid";
            var sourceBuilder = new StringBuilder(
$@"// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using Azure.Messaging.EventGrid.SystemEvents;

namespace {ns}
{{
    /// <summary>
    ///  Represents the names of the various event types for the system events published to
    ///  Azure Event Grid.
    /// </summary>
    public static class SystemEventNames
    {{
");
            for (int i = 0; i < _visitor.SystemEvents.Count; i++)
            {
                if (i > 0)
                {
                    sourceBuilder.AppendLine();
                }
                SystemEventNode sysEvent = _visitor.SystemEvents[i];

                // Add the ref docs for each constant
                sourceBuilder.AppendLine($"{Indent}{Indent}/// <summary>");
                sourceBuilder.AppendLine(
                    !_isSystemEventsLibrary
                        ? $"{Indent}{Indent}/// The value of the Event Type stored in <see cref=\"EventGridEvent.EventType\"/> and <see cref=\"CloudEvent.Type\"/> "
                        : $"{Indent}{Indent}/// The value of the Event Type stored in <see cref=\"CloudEvent.Type\"/> ");

                sourceBuilder.AppendLine($"{Indent}{Indent}/// for the <see cref=\"{sysEvent.EventName}\"/> system event.");
                sourceBuilder.AppendLine($"{Indent}{Indent}/// </summary>");

                // Add the constant
                sourceBuilder.AppendLine($"{Indent}{Indent}public const string {sysEvent.EventConstantName} = {sysEvent.EventType};");
            }

            sourceBuilder.Append($@"{Indent}}}
}}");
            return sourceBuilder.ToString();
        }

        private string ConstructSystemEventExtensions()
        {
            var sourceBuilder = new StringBuilder(
                $@"// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Messaging.EventGrid.SystemEvents;
{(_isSystemEventsLibrary ? "using System.ClientModel.Primitives;" : string.Empty)}

namespace Azure.Messaging.EventGrid
{{
    internal class SystemEventExtensions
    {{
        public static object AsSystemEventData(string eventType, JsonElement data)
        {{
            var eventTypeSpan = eventType.AsSpan();
");
            foreach (SystemEventNode sysEvent in _visitor.SystemEvents)
            {
                // Add each an entry for each system event to the dictionary containing a mapping from constant name to deserialization method.
                sourceBuilder.AppendLine(
                    $"{Indent}{Indent}{Indent}if (eventTypeSpan.Equals(SystemEventNames.{sysEvent.EventConstantName}.AsSpan(), StringComparison.OrdinalIgnoreCase))");
                sourceBuilder.AppendLine(
                    $"{Indent}{Indent}{Indent}{Indent}return {sysEvent.EventName}.{sysEvent.DeserializeMethod}(data{(_isSystemEventsLibrary ? ", null" : string.Empty)});");
            }
            sourceBuilder.AppendLine($"{Indent}{Indent}{Indent}return null;");
            sourceBuilder.AppendLine($"{Indent}{Indent}}}");
            sourceBuilder.AppendLine($"{Indent}}}");
            sourceBuilder.AppendLine("}");

            return sourceBuilder.ToString();
        }
    }
}
