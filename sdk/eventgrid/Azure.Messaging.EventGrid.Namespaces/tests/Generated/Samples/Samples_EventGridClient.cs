// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Messaging.EventGrid.Namespaces.Samples
{
    public class Samples_EventGridClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvent()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                id = "<id>",
                source = "<source>",
                type = "<type>",
                specversion = "<specversion>",
            };

            Response response = client.PublishCloudEvent("<topicName>", RequestContent.Create(data));

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvent_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                id = "<id>",
                source = "<source>",
                data = new { },
                data_base64 = new { },
                type = "<type>",
                time = "2022-05-10T14:57:31.2311892-04:00",
                specversion = "<specversion>",
                dataschema = "<dataschema>",
                datacontenttype = "<datacontenttype>",
                subject = "<subject>",
            };

            Response response = client.PublishCloudEvent("<topicName>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvent_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                id = "<id>",
                source = "<source>",
                type = "<type>",
                specversion = "<specversion>",
            };

            Response response = await client.PublishCloudEventAsync("<topicName>", RequestContent.Create(data));

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvent_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                id = "<id>",
                source = "<source>",
                data = new { },
                data_base64 = new { },
                type = "<type>",
                time = "2022-05-10T14:57:31.2311892-04:00",
                specversion = "<specversion>",
                dataschema = "<dataschema>",
                datacontenttype = "<datacontenttype>",
                subject = "<subject>",
            };

            Response response = await client.PublishCloudEventAsync("<topicName>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvents()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        type = "<type>",
        specversion = "<specversion>",
    }
};

            Response response = client.PublishCloudEvents("<topicName>", RequestContent.Create(data));

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublishCloudEvents_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        data = new {},
        data_base64 = new {},
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
};

            Response response = client.PublishCloudEvents("<topicName>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvents_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        type = "<type>",
        specversion = "<specversion>",
    }
};

            Response response = await client.PublishCloudEventsAsync("<topicName>", RequestContent.Create(data));

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublishCloudEvents_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        data = new {},
        data_base64 = new {},
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
};

            Response response = await client.PublishCloudEventsAsync("<topicName>", RequestContent.Create(data), new RequestContext());

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReceiveCloudEvents()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReceiveCloudEvents_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", 1234, new TimeSpan(1, 2, 3), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReceiveCloudEvents_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReceiveCloudEvents_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", 1234, new TimeSpan(1, 2, 3), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcknowledgeCloudEvents()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AcknowledgeCloudEvents_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcknowledgeCloudEvents_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AcknowledgeCloudEvents_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReleaseCloudEvents()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReleaseCloudEvents_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReleaseCloudEvents_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReleaseCloudEvents_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RejectCloudEvents()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RejectCloudEvents_AllParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RejectCloudEvents_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RejectCloudEvents_AllParameters_Async()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new EventGridClient(endpoint, credential);

            var data = new
            {
                lockTokens = new[] {
        "<String>"
    },
            };

            Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
            Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
        }
    }
}
