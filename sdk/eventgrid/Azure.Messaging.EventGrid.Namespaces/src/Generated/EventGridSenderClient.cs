// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Messaging.EventGrid.Namespaces
{
    /// <summary></summary>
    public partial class EventGridSenderClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly AzureKeyCredential _keyCredential;
        private const string AuthorizationHeader = "Authorization";
        private const string AuthorizationApiKeyPrefix = "SharedAccessKey";
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://eventgrid.azure.net/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of EventGridSenderClient for mocking. </summary>
        protected EventGridSenderClient()
        {
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public HttpPipeline Pipeline { get; }

        internal virtual Response Send(string topicName, RequestContent content, RequestContext context = null)
        {
            using HttpMessage message = CreateSendRequest(topicName, content, context);
            return Pipeline.ProcessMessage(message, context);
        }

        internal virtual async Task<Response> SendAsync(string topicName, RequestContent content, RequestContext context = null)
        {
            using HttpMessage message = CreateSendRequest(topicName, content, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        internal virtual Response<PublishResult> Send(string topicName, CloudEvent @event, CancellationToken cancellationToken = default)
        {
            Response result = Send(topicName, @event, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PublishResult)result, result);
        }

        internal virtual async Task<Response<PublishResult>> SendAsync(string topicName, CloudEvent @event, CancellationToken cancellationToken = default)
        {
            Response result = await SendAsync(topicName, @event, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PublishResult)result, result);
        }

        internal virtual Response SendEvents(string topicName, RequestContent content, RequestContext context = null)
        {
            using HttpMessage message = CreateSendEventsRequest(topicName, content, context);
            return Pipeline.ProcessMessage(message, context);
        }

        internal virtual async Task<Response> SendEventsAsync(string topicName, RequestContent content, RequestContext context = null)
        {
            using HttpMessage message = CreateSendEventsRequest(topicName, content, context);
            return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
        }

        internal virtual Response<PublishResult> SendEvents(string topicName, IEnumerable<CloudEvent> events, CancellationToken cancellationToken = default)
        {
            using BinaryContent content = BinaryContentHelper.FromEnumerable(events);
            Response result = this.SendEvents(topicName, content, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((PublishResult)result, result);
        }

        internal virtual async Task<Response<PublishResult>> SendEventsAsync(string topicName, IEnumerable<CloudEvent> events, CancellationToken cancellationToken = default)
        {
            using BinaryContent content = BinaryContentHelper.FromEnumerable(events);
            Response result = await this.SendEventsAsync(topicName, content, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((PublishResult)result, result);
        }
    }
}
