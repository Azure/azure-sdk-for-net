<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="PublishCloudEventAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishCloudEventAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
};

Response response = await client.PublishCloudEventAsync("<topicName>", RequestContent.Create(data));

Console.WriteLine(response.ToString());
]]></code>
This sample shows how to call PublishCloudEventAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    data = new {},
    data_base64 = new {},
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
};

Response response = await client.PublishCloudEventAsync("<topicName>", RequestContent.Create(data), new RequestContext());

Console.WriteLine(response.ToString());
]]></code>
</example>
    </member>
    <member name="PublishCloudEvent(string,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishCloudEvent with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
};

Response response = client.PublishCloudEvent("<topicName>", RequestContent.Create(data));

Console.WriteLine(response.ToString());
]]></code>
This sample shows how to call PublishCloudEvent with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    id = "<id>",
    source = "<source>",
    data = new {},
    data_base64 = new {},
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
};

Response response = client.PublishCloudEvent("<topicName>", RequestContent.Create(data), new RequestContext());

Console.WriteLine(response.ToString());
]]></code>
</example>
    </member>
    <member name="PublishCloudEventsAsync(string,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishCloudEventsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        data = new {},
        data_base64 = new {},
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
};

Response response = await client.PublishCloudEventsAsync("<topicName>", RequestContent.Create(data), new RequestContext());

Console.WriteLine(response.ToString());
]]></code>
</example>
    </member>
    <member name="PublishCloudEvents(string,RequestContent,RequestContext)">
<example>
This sample shows how to call PublishCloudEvents with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new[] {
    new {
        id = "<id>",
        source = "<source>",
        data = new {},
        data_base64 = new {},
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
};

Response response = client.PublishCloudEvents("<topicName>", RequestContent.Create(data), new RequestContext());

Console.WriteLine(response.ToString());
]]></code>
</example>
    </member>
    <member name="ReceiveCloudEventsAsync(string,string,int?,TimeSpan?,RequestContext)">
<example>
This sample shows how to call ReceiveCloudEventsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveCloudEventsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", 1234, new TimeSpan(1, 2, 3), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code>
</example>
    </member>
    <member name="ReceiveCloudEvents(string,string,int?,TimeSpan?,RequestContext)">
<example>
This sample shows how to call ReceiveCloudEvents with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveCloudEvents with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", 1234, new TimeSpan(1, 2, 3), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code>
</example>
    </member>
    <member name="AcknowledgeCloudEventsAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call AcknowledgeCloudEventsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
    </member>
    <member name="AcknowledgeCloudEvents(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call AcknowledgeCloudEvents with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
    </member>
    <member name="ReleaseCloudEventsAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call ReleaseCloudEventsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
    </member>
    <member name="ReleaseCloudEvents(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call ReleaseCloudEvents with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
    </member>
    <member name="RejectCloudEventsAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call RejectCloudEventsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
    </member>
    <member name="RejectCloudEvents(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call RejectCloudEvents with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new EventGridClient(endpoint, credential);

var data = new {
    lockTokens = new[] {
        "<String>"
    },
};

Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("errorDescription").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
</example>
    </member>
  </members>
</doc>