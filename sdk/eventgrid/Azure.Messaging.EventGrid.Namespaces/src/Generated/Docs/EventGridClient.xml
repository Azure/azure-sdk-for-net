<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="PublishCloudEventAsync(string,CloudEvent,CancellationToken)">
      <example>
This sample shows how to call PublishCloudEventAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

CloudEvent @event = new CloudEvent("<id>", "<source>", "<type>", "<specversion>");
Response<PublishResult> response = await client.PublishCloudEventAsync("<topicName>", @event);
]]></code>
This sample shows how to call PublishCloudEventAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

CloudEvent @event = new CloudEvent("<id>", "<source>", "<type>", "<specversion>")
{
    Data = BinaryData.FromObjectAsJson(new object()),
    DataBase64 = BinaryData.FromObjectAsJson(new object()),
    Time = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    Dataschema = "<dataschema>",
    Datacontenttype = "<datacontenttype>",
    Subject = "<subject>",
};
Response<PublishResult> response = await client.PublishCloudEventAsync("<topicName>", @event);
]]></code></example>
    </member>
    <member name="PublishCloudEvent(string,CloudEvent,CancellationToken)">
      <example>
This sample shows how to call PublishCloudEvent.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

CloudEvent @event = new CloudEvent("<id>", "<source>", "<type>", "<specversion>");
Response<PublishResult> response = client.PublishCloudEvent("<topicName>", @event);
]]></code>
This sample shows how to call PublishCloudEvent with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

CloudEvent @event = new CloudEvent("<id>", "<source>", "<type>", "<specversion>")
{
    Data = BinaryData.FromObjectAsJson(new object()),
    DataBase64 = BinaryData.FromObjectAsJson(new object()),
    Time = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    Dataschema = "<dataschema>",
    Datacontenttype = "<datacontenttype>",
    Subject = "<subject>",
};
Response<PublishResult> response = client.PublishCloudEvent("<topicName>", @event);
]]></code></example>
    </member>
    <member name="PublishCloudEventAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEventAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
});
Response response = await client.PublishCloudEventAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEventAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    data = new object(),
    data_base64 = new object(),
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
});
Response response = await client.PublishCloudEventAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="PublishCloudEvent(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEvent and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    type = "<type>",
    specversion = "<specversion>",
});
Response response = client.PublishCloudEvent("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEvent with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "<id>",
    source = "<source>",
    data = new object(),
    data_base64 = new object(),
    type = "<type>",
    time = "2022-05-10T14:57:31.2311892-04:00",
    specversion = "<specversion>",
    dataschema = "<dataschema>",
    datacontenttype = "<datacontenttype>",
    subject = "<subject>",
});
Response response = client.PublishCloudEvent("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="PublishCloudEventsAsync(string,IEnumerable{CloudEvent},CancellationToken)">
      <example>
This sample shows how to call PublishCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<PublishResult> response = await client.PublishCloudEventsAsync("<topicName>", new CloudEvent[]
{
    new CloudEvent("<id>", "<source>", "<type>", "<specversion>")
});
]]></code>
This sample shows how to call PublishCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<PublishResult> response = await client.PublishCloudEventsAsync("<topicName>", new CloudEvent[]
{
    new CloudEvent("<id>", "<source>", "<type>", "<specversion>")
    {
        Data = BinaryData.FromObjectAsJson(new object()),
        DataBase64 = BinaryData.FromObjectAsJson(new object()),
        Time = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
        Dataschema = "<dataschema>",
        Datacontenttype = "<datacontenttype>",
        Subject = "<subject>",
    }
});
]]></code></example>
    </member>
    <member name="PublishCloudEvents(string,IEnumerable{CloudEvent},CancellationToken)">
      <example>
This sample shows how to call PublishCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<PublishResult> response = client.PublishCloudEvents("<topicName>", new CloudEvent[]
{
    new CloudEvent("<id>", "<source>", "<type>", "<specversion>")
});
]]></code>
This sample shows how to call PublishCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<PublishResult> response = client.PublishCloudEvents("<topicName>", new CloudEvent[]
{
    new CloudEvent("<id>", "<source>", "<type>", "<specversion>")
    {
        Data = BinaryData.FromObjectAsJson(new object()),
        DataBase64 = BinaryData.FromObjectAsJson(new object()),
        Time = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
        Dataschema = "<dataschema>",
        Datacontenttype = "<datacontenttype>",
        Subject = "<subject>",
    }
});
]]></code></example>
    </member>
    <member name="PublishCloudEventsAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        type = "<type>",
        specversion = "<specversion>",
    }
});
Response response = await client.PublishCloudEventsAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        data = new object(),
        data_base64 = new object(),
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
});
Response response = await client.PublishCloudEventsAsync("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="PublishCloudEvents(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call PublishCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        type = "<type>",
        specversion = "<specversion>",
    }
});
Response response = client.PublishCloudEvents("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PublishCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        id = "<id>",
        source = "<source>",
        data = new object(),
        data_base64 = new object(),
        type = "<type>",
        time = "2022-05-10T14:57:31.2311892-04:00",
        specversion = "<specversion>",
        dataschema = "<dataschema>",
        datacontenttype = "<datacontenttype>",
        subject = "<subject>",
    }
});
Response response = client.PublishCloudEvents("<topicName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReceiveCloudEventsAsync(string,string,int?,TimeSpan?,CancellationToken)">
      <example>
This sample shows how to call ReceiveCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<ReceiveResult> response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>");
]]></code>
This sample shows how to call ReceiveCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<ReceiveResult> response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", maxEvents: 1234, maxWaitTime: TimeSpan.FromSeconds(10));
]]></code></example>
    </member>
    <member name="ReceiveCloudEvents(string,string,int?,TimeSpan?,CancellationToken)">
      <example>
This sample shows how to call ReceiveCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<ReceiveResult> response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>");
]]></code>
This sample shows how to call ReceiveCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response<ReceiveResult> response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", maxEvents: 1234, maxWaitTime: TimeSpan.FromSeconds(10));
]]></code></example>
    </member>
    <member name="ReceiveCloudEventsAsync(string,string,int?,TimeSpan?,RequestContext)">
      <example>
This sample shows how to call ReceiveCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", (int?)null, (TimeSpan?)null, (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveCloudEventsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = await client.ReceiveCloudEventsAsync("<topicName>", "<eventSubscriptionName>", 1234, TimeSpan.FromSeconds(10), (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code></example>
    </member>
    <member name="ReceiveCloudEvents(string,string,int?,TimeSpan?,RequestContext)">
      <example>
This sample shows how to call ReceiveCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", (int?)null, (TimeSpan?)null, (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
]]></code>
This sample shows how to call ReceiveCloudEvents with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

Response response = client.ReceiveCloudEvents("<topicName>", "<eventSubscriptionName>", 1234, TimeSpan.FromSeconds(10), (RequestContext)null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("brokerProperties").GetProperty("deliveryCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("data_base64").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("specversion").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("dataschema").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("datacontenttype").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("event").GetProperty("subject").ToString());
]]></code></example>
    </member>
    <member name="AcknowledgeCloudEventsAsync(string,string,AcknowledgeOptions,CancellationToken)">
      <example>
This sample shows how to call AcknowledgeCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code>
This sample shows how to call AcknowledgeCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code></example>
    </member>
    <member name="AcknowledgeCloudEvents(string,string,AcknowledgeOptions,CancellationToken)">
      <example>
This sample shows how to call AcknowledgeCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code>
This sample shows how to call AcknowledgeCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code></example>
    </member>
    <member name="AcknowledgeCloudEventsAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AcknowledgeCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call AcknowledgeCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="AcknowledgeCloudEvents(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call AcknowledgeCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call AcknowledgeCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="ReleaseCloudEventsAsync(string,string,ReleaseOptions,ReleaseDelay?,CancellationToken)">
      <example>
This sample shows how to call ReleaseCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", releaseOptions);
]]></code>
This sample shows how to call ReleaseCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", releaseOptions, releaseDelayInSeconds: ReleaseDelay.By0Seconds);
]]></code></example>
    </member>
    <member name="ReleaseCloudEvents(string,string,ReleaseOptions,ReleaseDelay?,CancellationToken)">
      <example>
This sample shows how to call ReleaseCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", releaseOptions);
]]></code>
This sample shows how to call ReleaseCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", releaseOptions, releaseDelayInSeconds: ReleaseDelay.By0Seconds);
]]></code></example>
    </member>
    <member name="ReleaseCloudEventsAsync(string,string,RequestContent,int?,RequestContext)">
      <example>
This sample shows how to call ReleaseCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call ReleaseCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content, releaseDelayInSeconds: 0);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="ReleaseCloudEvents(string,string,RequestContent,int?,RequestContext)">
      <example>
This sample shows how to call ReleaseCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call ReleaseCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content, releaseDelayInSeconds: 0);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="RejectCloudEventsAsync(string,string,RejectOptions,CancellationToken)">
      <example>
This sample shows how to call RejectCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code>
This sample shows how to call RejectCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code></example>
    </member>
    <member name="RejectCloudEvents(string,string,RejectOptions,CancellationToken)">
      <example>
This sample shows how to call RejectCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code>
This sample shows how to call RejectCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code></example>
    </member>
    <member name="RejectCloudEventsAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RejectCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RejectCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="RejectCloudEvents(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RejectCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RejectCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="RenewCloudEventLocksAsync(string,string,RenewLockOptions,CancellationToken)">
      <example>
This sample shows how to call RenewCloudEventLocksAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code>
This sample shows how to call RenewCloudEventLocksAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code></example>
    </member>
    <member name="RenewCloudEventLocks(string,string,RenewLockOptions,CancellationToken)">
      <example>
This sample shows how to call RenewCloudEventLocks.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code>
This sample shows how to call RenewCloudEventLocks with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code></example>
    </member>
    <member name="RenewCloudEventLocksAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RenewCloudEventLocksAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RenewCloudEventLocksAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
    <member name="RenewCloudEventLocks(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call RenewCloudEventLocks and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RenewCloudEventLocks with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
    </member>
  </members>
</doc>