// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ChannelsOperations.
    /// </summary>
    public static partial class ChannelsOperationsExtensions
    {
            /// <summary>
            /// Get a channel.
            /// </summary>
            /// <remarks>
            /// Get properties of a channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            public static Channel Get(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName)
            {
                return operations.GetAsync(resourceGroupName, partnerNamespaceName, channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a channel.
            /// </summary>
            /// <remarks>
            /// Get properties of a channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Channel> GetAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, channelName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a channel.
            /// </summary>
            /// <remarks>
            /// Synchronously creates or updates a new channel with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='channelInfo'>
            /// Channel information.
            /// </param>
            public static Channel CreateOrUpdate(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, Channel channelInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, partnerNamespaceName, channelName, channelInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a channel.
            /// </summary>
            /// <remarks>
            /// Synchronously creates or updates a new channel with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='channelInfo'>
            /// Channel information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Channel> CreateOrUpdateAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, Channel channelInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, channelName, channelInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a channel.
            /// </summary>
            /// <remarks>
            /// Delete an existing channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            public static void Delete(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName)
            {
                operations.DeleteAsync(resourceGroupName, partnerNamespaceName, channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a channel.
            /// </summary>
            /// <remarks>
            /// Delete an existing channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, channelName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a Channel.
            /// </summary>
            /// <remarks>
            /// Synchronously updates a channel with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='channelUpdateParameters'>
            /// Channel update information.
            /// </param>
            public static void Update(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, ChannelUpdateParameters channelUpdateParameters)
            {
                operations.UpdateAsync(resourceGroupName, partnerNamespaceName, channelName, channelUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Channel.
            /// </summary>
            /// <remarks>
            /// Synchronously updates a channel with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='channelUpdateParameters'>
            /// Channel update information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, ChannelUpdateParameters channelUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, channelName, channelUpdateParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List channels.
            /// </summary>
            /// <remarks>
            /// List all the channels in a partner namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<Channel> ListByPartnerNamespace(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByPartnerNamespaceAsync(resourceGroupName, partnerNamespaceName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List channels.
            /// </summary>
            /// <remarks>
            /// List all the channels in a partner namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Channel>> ListByPartnerNamespaceAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPartnerNamespaceWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get full URL of partner destination channel.
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL of a partner destination channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the Channel.
            /// </param>
            public static EventSubscriptionFullUrl GetFullUrl(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName)
            {
                return operations.GetFullUrlAsync(resourceGroupName, partnerNamespaceName, channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get full URL of partner destination channel.
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL of a partner destination channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the Channel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscriptionFullUrl> GetFullUrlAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFullUrlWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, channelName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a channel.
            /// </summary>
            /// <remarks>
            /// Delete an existing channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            public static void BeginDelete(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName)
            {
                operations.BeginDeleteAsync(resourceGroupName, partnerNamespaceName, channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a channel.
            /// </summary>
            /// <remarks>
            /// Delete an existing channel.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the partners subscription.
            /// </param>
            /// <param name='partnerNamespaceName'>
            /// Name of the partner namespace.
            /// </param>
            /// <param name='channelName'>
            /// Name of the channel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IChannelsOperations operations, string resourceGroupName, string partnerNamespaceName, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, partnerNamespaceName, channelName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List channels.
            /// </summary>
            /// <remarks>
            /// List all the channels in a partner namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Channel> ListByPartnerNamespaceNext(this IChannelsOperations operations, string nextPageLink)
            {
                return operations.ListByPartnerNamespaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List channels.
            /// </summary>
            /// <remarks>
            /// List all the channels in a partner namespace.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Channel>> ListByPartnerNamespaceNextAsync(this IChannelsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPartnerNamespaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
