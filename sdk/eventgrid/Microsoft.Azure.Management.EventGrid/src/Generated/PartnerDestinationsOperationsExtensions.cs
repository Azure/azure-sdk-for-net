// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PartnerDestinationsOperations.
    /// </summary>
    public static partial class PartnerDestinationsOperationsExtensions
    {
            /// <summary>
            /// Get a partner destination.
            /// </summary>
            /// <remarks>
            /// Get properties of a partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            public static PartnerDestination Get(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName)
            {
                return operations.GetAsync(resourceGroupName, partnerDestinationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a partner destination.
            /// </summary>
            /// <remarks>
            /// Get properties of a partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerDestination> GetAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, partnerDestinationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a partner destination.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new partner destination with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='partnerDestination'>
            /// Partner destination create information.
            /// </param>
            public static PartnerDestination CreateOrUpdate(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, PartnerDestination partnerDestination)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, partnerDestinationName, partnerDestination).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a partner destination.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new partner destination with the specified
            /// parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='partnerDestination'>
            /// Partner destination create information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerDestination> CreateOrUpdateAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, PartnerDestination partnerDestination, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, partnerDestinationName, partnerDestination, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a partner destination.
            /// </summary>
            /// <remarks>
            /// Delete existing partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            public static void Delete(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName)
            {
                operations.DeleteAsync(resourceGroupName, partnerDestinationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a partner destination.
            /// </summary>
            /// <remarks>
            /// Delete existing partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, partnerDestinationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a partner destination.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a partner destination with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='tags'>
            /// Tags of the Partner Destination resource.
            /// </param>
            public static PartnerDestination Update(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, partnerDestinationName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a partner destination.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates a partner destination with the specified parameters.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='tags'>
            /// Tags of the Partner Destination resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerDestination> UpdateAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, partnerDestinationName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List partner destinations under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<PartnerDestination> ListBySubscription(this IPartnerDestinationsOperations operations, string filter = default(string), int? top = default(int?))
            {
                return operations.ListBySubscriptionAsync(filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List partner destinations under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PartnerDestination>> ListBySubscriptionAsync(this IPartnerDestinationsOperations operations, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List partner destinations under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<PartnerDestination> ListByResourceGroup(this IPartnerDestinationsOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List partner destinations under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PartnerDestination>> ListByResourceGroupAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activate a partner destination.
            /// </summary>
            /// <remarks>
            /// Activate a newly created partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            public static PartnerDestination Activate(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName)
            {
                return operations.ActivateAsync(resourceGroupName, partnerDestinationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate a partner destination.
            /// </summary>
            /// <remarks>
            /// Activate a newly created partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PartnerDestination> ActivateAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivateWithHttpMessagesAsync(resourceGroupName, partnerDestinationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a partner destination.
            /// </summary>
            /// <remarks>
            /// Delete existing partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            public static void BeginDelete(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, partnerDestinationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a partner destination.
            /// </summary>
            /// <remarks>
            /// Delete existing partner destination.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='partnerDestinationName'>
            /// Name of the partner destination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IPartnerDestinationsOperations operations, string resourceGroupName, string partnerDestinationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, partnerDestinationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List partner destinations under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PartnerDestination> ListBySubscriptionNext(this IPartnerDestinationsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List partner destinations under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under an Azure subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PartnerDestination>> ListBySubscriptionNextAsync(this IPartnerDestinationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List partner destinations under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PartnerDestination> ListByResourceGroupNext(this IPartnerDestinationsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List partner destinations under a resource group.
            /// </summary>
            /// <remarks>
            /// List all the partner destinations under a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PartnerDestination>> ListByResourceGroupNextAsync(this IPartnerDestinationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
