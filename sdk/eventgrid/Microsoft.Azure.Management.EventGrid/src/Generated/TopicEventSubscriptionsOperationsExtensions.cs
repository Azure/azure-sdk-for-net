// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TopicEventSubscriptionsOperations.
    /// </summary>
    public static partial class TopicEventSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Get delivery attributes for an event subscription for topic.
            /// </summary>
            /// <remarks>
            /// Get all delivery attributes for an event subscription for topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static DeliveryAttributeListResult GetDeliveryAttributes(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName)
            {
                return operations.GetDeliveryAttributesAsync(resourceGroupName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get delivery attributes for an event subscription for topic.
            /// </summary>
            /// <remarks>
            /// Get all delivery attributes for an event subscription for topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeliveryAttributeListResult> GetDeliveryAttributesAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeliveryAttributesWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an event subscription of a topic.
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription of a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the partner topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be found. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            public static EventSubscription Get(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName)
            {
                return operations.GetAsync(resourceGroupName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event subscription of a topic.
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription of a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the partner topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be found. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> GetAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an event subscription to a topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            public static EventSubscription CreateOrUpdate(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscription eventSubscriptionInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an event subscription to a topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> CreateOrUpdateAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be deleted. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            public static void Delete(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName)
            {
                operations.DeleteAsync(resourceGroupName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be deleted. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            public static EventSubscription Update(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> UpdateAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get full URL of an event subscription for topic.
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL for an event subscription for topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static EventSubscriptionFullUrl GetFullUrl(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName)
            {
                return operations.GetFullUrlAsync(resourceGroupName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get full URL of an event subscription for topic.
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL for an event subscription for topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscriptionFullUrl> GetFullUrlAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFullUrlWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> List(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListAsync(resourceGroupName, topicName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, topicName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an event subscription to a topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            public static EventSubscription BeginCreateOrUpdate(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscription eventSubscriptionInfo)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an event subscription to a topic.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be created. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> BeginCreateOrUpdateAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be deleted. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            public static void BeginDelete(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, topicName, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be deleted. Event subscription names must
            /// be between 3 and 100 characters in length and use alphanumeric letters
            /// only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            public static EventSubscription BeginUpdate(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an event subscription for a topic.
            /// </summary>
            /// <remarks>
            /// Update an existing event subscription for a topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> BeginUpdateAsync(this ITopicEventSubscriptionsOperations operations, string resourceGroupName, string topicName, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, topicName, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListNext(this ITopicEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListNextAsync(this ITopicEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
