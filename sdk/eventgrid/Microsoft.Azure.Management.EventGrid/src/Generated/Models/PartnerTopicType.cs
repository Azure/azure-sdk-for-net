// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of a partner topic type.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PartnerTopicType : Resource
    {
        /// <summary>
        /// Initializes a new instance of the PartnerTopicType class.
        /// </summary>
        public PartnerTopicType()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartnerTopicType class.
        /// </summary>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of the resource.</param>
        /// <param name="partnerName">Official name of the partner.</param>
        /// <param name="topicTypeName">Name of the partner topic type. This
        /// name should be unique among all partner topic types names.</param>
        /// <param name="displayName">Display Name for the partner topic
        /// type.</param>
        /// <param name="description">Description of the partner topic
        /// type.</param>
        /// <param name="setupUri">URI of the partner website that can be used
        /// by Azure customers to setup Event Grid
        /// integration on an event source.</param>
        /// <param name="authorizationState">Status of whether the customer has
        /// authorized a partner to create partner topics
        /// in the customer's subscription. Possible values include:
        /// 'NotApplicable', 'NotAuthorized', 'Authorized'</param>
        public PartnerTopicType(string id = default(string), string name = default(string), string type = default(string), string partnerName = default(string), string topicTypeName = default(string), string displayName = default(string), string description = default(string), string setupUri = default(string), string authorizationState = default(string))
            : base(id, name, type)
        {
            PartnerName = partnerName;
            TopicTypeName = topicTypeName;
            DisplayName = displayName;
            Description = description;
            SetupUri = setupUri;
            AuthorizationState = authorizationState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets official name of the partner.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerName")]
        public string PartnerName { get; set; }

        /// <summary>
        /// Gets or sets name of the partner topic type. This name should be
        /// unique among all partner topic types names.
        /// </summary>
        [JsonProperty(PropertyName = "properties.topicTypeName")]
        public string TopicTypeName { get; set; }

        /// <summary>
        /// Gets or sets display Name for the partner topic type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets description of the partner topic type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets URI of the partner website that can be used by Azure
        /// customers to setup Event Grid
        /// integration on an event source.
        /// </summary>
        [JsonProperty(PropertyName = "properties.setupUri")]
        public string SetupUri { get; set; }

        /// <summary>
        /// Gets or sets status of whether the customer has authorized a
        /// partner to create partner topics
        /// in the customer's subscription. Possible values include:
        /// 'NotApplicable', 'NotAuthorized', 'Authorized'
        /// </summary>
        [JsonProperty(PropertyName = "properties.authorizationState")]
        public string AuthorizationState { get; set; }

    }
}
