// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of the corresponding partner topic of a Channel.
    /// </summary>
    public partial class PartnerTopicInfo
    {
        /// <summary>
        /// Initializes a new instance of the PartnerTopicInfo class.
        /// </summary>
        public PartnerTopicInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartnerTopicInfo class.
        /// </summary>
        /// <param name="azureSubscriptionId">Azure subscription ID of the
        /// subscriber. The partner topic associated with the channel will be
        /// created under this Azure subscription.</param>
        /// <param name="resourceGroupName">Azure Resource Group of the
        /// subscriber. The partner topic associated with the channel will be
        /// created under this resource group.</param>
        /// <param name="name">Name of the partner topic associated with the
        /// channel.</param>
        /// <param name="eventTypeInfo">Event Type Information for the partner
        /// topic. This information is provided by the publisher and can be
        /// used by the
        /// subscriber to view different types of events that are
        /// published.</param>
        /// <param name="source">The source information is provided by the
        /// publisher to determine the scope or context from which the events
        /// are originating. This information can be used by the subscriber
        /// during the approval process of the
        /// created partner topic.</param>
        public PartnerTopicInfo(string azureSubscriptionId = default(string), string resourceGroupName = default(string), string name = default(string), EventTypeInfo eventTypeInfo = default(EventTypeInfo), string source = default(string))
        {
            AzureSubscriptionId = azureSubscriptionId;
            ResourceGroupName = resourceGroupName;
            Name = name;
            EventTypeInfo = eventTypeInfo;
            Source = source;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure subscription ID of the subscriber. The partner
        /// topic associated with the channel will be
        /// created under this Azure subscription.
        /// </summary>
        [JsonProperty(PropertyName = "azureSubscriptionId")]
        public string AzureSubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets azure Resource Group of the subscriber. The partner
        /// topic associated with the channel will be
        /// created under this resource group.
        /// </summary>
        [JsonProperty(PropertyName = "resourceGroupName")]
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets name of the partner topic associated with the channel.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets event Type Information for the partner topic. This
        /// information is provided by the publisher and can be used by the
        /// subscriber to view different types of events that are published.
        /// </summary>
        [JsonProperty(PropertyName = "eventTypeInfo")]
        public EventTypeInfo EventTypeInfo { get; set; }

        /// <summary>
        /// Gets or sets the source information is provided by the publisher to
        /// determine the scope or context from which the events
        /// are originating. This information can be used by the subscriber
        /// during the approval process of the
        /// created partner topic.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

    }
}
