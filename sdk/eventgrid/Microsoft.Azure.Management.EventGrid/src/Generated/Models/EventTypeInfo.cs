// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The event type information for Channels.
    /// </summary>
    public partial class EventTypeInfo
    {
        /// <summary>
        /// Initializes a new instance of the EventTypeInfo class.
        /// </summary>
        public EventTypeInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventTypeInfo class.
        /// </summary>
        /// <param name="kind">The kind of event type used. Possible values
        /// include: 'Inline'</param>
        /// <param name="inlineEventTypes">A collection of inline event types
        /// for the resource. The inline event type keys are of type string
        /// which represents the name of the event.
        /// An example of a valid inline event name is "Contoso.OrderCreated".
        /// The inline event type values are of type InlineEventProperties and
        /// will contain additional information for every inline event
        /// type.</param>
        public EventTypeInfo(string kind = default(string), IDictionary<string, InlineEventProperties> inlineEventTypes = default(IDictionary<string, InlineEventProperties>))
        {
            Kind = kind;
            InlineEventTypes = inlineEventTypes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of event type used. Possible values include:
        /// 'Inline'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets a collection of inline event types for the resource.
        /// The inline event type keys are of type string which represents the
        /// name of the event.
        /// An example of a valid inline event name is "Contoso.OrderCreated".
        /// The inline event type values are of type InlineEventProperties and
        /// will contain additional information for every inline event type.
        /// </summary>
        [JsonProperty(PropertyName = "inlineEventTypes")]
        public IDictionary<string, InlineEventProperties> InlineEventTypes { get; set; }

    }
}
