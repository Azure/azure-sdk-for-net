// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about a partner registration.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PartnerRegistration : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the PartnerRegistration class.
        /// </summary>
        public PartnerRegistration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartnerRegistration class.
        /// </summary>
        /// <param name="location">Location of the resource.</param>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of the resource.</param>
        /// <param name="tags">Tags of the resource.</param>
        /// <param name="provisioningState">Provisioning state of the partner
        /// registration. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Canceled', 'Failed'</param>
        /// <param name="partnerRegistrationImmutableId">The immutableId of the
        /// corresponding partner registration.
        /// Note: This property is marked for deprecation and is not supported
        /// in any future GA API version</param>
        /// <param name="systemData">The system metadata relating to Partner
        /// Registration resource.</param>
        public PartnerRegistration(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string provisioningState = default(string), System.Guid? partnerRegistrationImmutableId = default(System.Guid?), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            ProvisioningState = provisioningState;
            PartnerRegistrationImmutableId = partnerRegistrationImmutableId;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the partner registration. Possible
        /// values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Canceled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the immutableId of the corresponding partner
        /// registration.
        /// Note: This property is marked for deprecation and is not supported
        /// in any future GA API version
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerRegistrationImmutableId")]
        public System.Guid? PartnerRegistrationImmutableId { get; set; }

        /// <summary>
        /// Gets the system metadata relating to Partner Registration resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
