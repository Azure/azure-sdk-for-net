// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Channel info.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Channel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Channel class.
        /// </summary>
        public Channel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Channel class.
        /// </summary>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of the resource.</param>
        /// <param name="channelType">The type of the event channel which
        /// represents the direction flow of events. Possible values include:
        /// 'PartnerTopic'</param>
        /// <param name="partnerTopicInfo">This property should be populated
        /// when channelType is PartnerTopic and represents information about
        /// the partner topic resource corresponding to the channel.</param>
        /// <param name="messageForActivation">Context or helpful message that
        /// can be used during the approval process by the subscriber.</param>
        /// <param name="provisioningState">Provisioning state of the channel.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Canceled', 'Failed',
        /// 'IdleDueToMirroredPartnerTopicDeletion'</param>
        /// <param name="readinessState">The readiness state of the
        /// corresponding partner topic. Possible values include:
        /// 'NeverActivated', 'Activated'</param>
        /// <param name="expirationTimeIfNotActivatedUtc">Expiration time of
        /// the channel. If this timer expires while the corresponding partner
        /// topic is never activated,
        /// the channel and corresponding partner topic are deleted.</param>
        /// <param name="systemData">The system metadata relating to Channel
        /// resource.</param>
        public Channel(string id = default(string), string name = default(string), string type = default(string), string channelType = default(string), PartnerTopicInfo partnerTopicInfo = default(PartnerTopicInfo), string messageForActivation = default(string), string provisioningState = default(string), string readinessState = default(string), System.DateTime? expirationTimeIfNotActivatedUtc = default(System.DateTime?), SystemData systemData = default(SystemData))
            : base(id, name, type)
        {
            ChannelType = channelType;
            PartnerTopicInfo = partnerTopicInfo;
            MessageForActivation = messageForActivation;
            ProvisioningState = provisioningState;
            ReadinessState = readinessState;
            ExpirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the event channel which represents the
        /// direction flow of events. Possible values include: 'PartnerTopic'
        /// </summary>
        [JsonProperty(PropertyName = "properties.channelType")]
        public string ChannelType { get; set; }

        /// <summary>
        /// Gets or sets this property should be populated when channelType is
        /// PartnerTopic and represents information about the partner topic
        /// resource corresponding to the channel.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerTopicInfo")]
        public PartnerTopicInfo PartnerTopicInfo { get; set; }

        /// <summary>
        /// Gets or sets context or helpful message that can be used during the
        /// approval process by the subscriber.
        /// </summary>
        [JsonProperty(PropertyName = "properties.messageForActivation")]
        public string MessageForActivation { get; set; }

        /// <summary>
        /// Gets or sets provisioning state of the channel. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Canceled', 'Failed', 'IdleDueToMirroredPartnerTopicDeletion'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the readiness state of the corresponding partner
        /// topic. Possible values include: 'NeverActivated', 'Activated'
        /// </summary>
        [JsonProperty(PropertyName = "properties.readinessState")]
        public string ReadinessState { get; set; }

        /// <summary>
        /// Gets or sets expiration time of the channel. If this timer expires
        /// while the corresponding partner topic is never activated,
        /// the channel and corresponding partner topic are deleted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationTimeIfNotActivatedUtc")]
        public System.DateTime? ExpirationTimeIfNotActivatedUtc { get; set; }

        /// <summary>
        /// Gets the system metadata relating to Channel resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

    }
}
