// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Event Grid Partner Destination.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PartnerDestination : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the PartnerDestination class.
        /// </summary>
        public PartnerDestination()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartnerDestination class.
        /// </summary>
        /// <param name="location">Location of the resource.</param>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of the resource.</param>
        /// <param name="tags">Tags of the resource.</param>
        /// <param name="partnerRegistrationImmutableId">The immutable Id of
        /// the corresponding partner registration.</param>
        /// <param name="endpointServiceContext">Endpoint context associated
        /// with this partner destination.</param>
        /// <param name="expirationTimeIfNotActivatedUtc">Expiration time of
        /// the partner destination. If this timer expires and the partner
        /// destination was never activated,
        /// the partner destination and corresponding channel are
        /// deleted.</param>
        /// <param name="provisioningState">Provisioning state of the partner
        /// destination. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Canceled', 'Failed'</param>
        /// <param name="activationState">Activation state of the partner
        /// destination. Possible values include: 'NeverActivated',
        /// 'Activated'</param>
        /// <param name="endpointBaseUrl">Endpoint Base URL of the partner
        /// destination</param>
        /// <param name="messageForActivation">Context or helpful message that
        /// can be used during the approval process.</param>
        /// <param name="systemData">The system metadata relating to Partner
        /// Destination resource.</param>
        public PartnerDestination(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), System.Guid? partnerRegistrationImmutableId = default(System.Guid?), string endpointServiceContext = default(string), System.DateTime? expirationTimeIfNotActivatedUtc = default(System.DateTime?), string provisioningState = default(string), string activationState = default(string), string endpointBaseUrl = default(string), string messageForActivation = default(string), SystemData systemData = default(SystemData))
            : base(location, id, name, type, tags)
        {
            PartnerRegistrationImmutableId = partnerRegistrationImmutableId;
            EndpointServiceContext = endpointServiceContext;
            ExpirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            ProvisioningState = provisioningState;
            ActivationState = activationState;
            EndpointBaseUrl = endpointBaseUrl;
            MessageForActivation = messageForActivation;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the immutable Id of the corresponding partner
        /// registration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerRegistrationImmutableId")]
        public System.Guid? PartnerRegistrationImmutableId { get; set; }

        /// <summary>
        /// Gets or sets endpoint context associated with this partner
        /// destination.
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointServiceContext")]
        public string EndpointServiceContext { get; set; }

        /// <summary>
        /// Gets or sets expiration time of the partner destination. If this
        /// timer expires and the partner destination was never activated,
        /// the partner destination and corresponding channel are deleted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationTimeIfNotActivatedUtc")]
        public System.DateTime? ExpirationTimeIfNotActivatedUtc { get; set; }

        /// <summary>
        /// Gets or sets provisioning state of the partner destination.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Canceled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets activation state of the partner destination. Possible
        /// values include: 'NeverActivated', 'Activated'
        /// </summary>
        [JsonProperty(PropertyName = "properties.activationState")]
        public string ActivationState { get; set; }

        /// <summary>
        /// Gets or sets endpoint Base URL of the partner destination
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpointBaseUrl")]
        public string EndpointBaseUrl { get; set; }

        /// <summary>
        /// Gets or sets context or helpful message that can be used during the
        /// approval process.
        /// </summary>
        [JsonProperty(PropertyName = "properties.messageForActivation")]
        public string MessageForActivation { get; set; }

        /// <summary>
        /// Gets the system metadata relating to Partner Destination resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
