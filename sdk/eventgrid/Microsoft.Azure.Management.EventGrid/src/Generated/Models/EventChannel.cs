// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Event Channel.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class EventChannel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the EventChannel class.
        /// </summary>
        public EventChannel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventChannel class.
        /// </summary>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource</param>
        /// <param name="type">Type of the resource</param>
        /// <param name="source">Source of the event channel. This represents a
        /// unique resource in the partner's resource model.</param>
        /// <param name="destination">Represents the destination of an event
        /// channel.</param>
        /// <param name="provisioningState">Provisioning state of the event
        /// channel. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Canceled', 'Failed'</param>
        /// <param name="filter">Information about the filter for the event
        /// channel.</param>
        public EventChannel(string id = default(string), string name = default(string), string type = default(string), EventChannelSource source = default(EventChannelSource), EventChannelDestination destination = default(EventChannelDestination), string provisioningState = default(string), EventChannelFilter filter = default(EventChannelFilter))
            : base(id, name, type)
        {
            Source = source;
            Destination = destination;
            ProvisioningState = provisioningState;
            Filter = filter;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets source of the event channel. This represents a unique
        /// resource in the partner's resource model.
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public EventChannelSource Source { get; set; }

        /// <summary>
        /// Gets or sets represents the destination of an event channel.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destination")]
        public EventChannelDestination Destination { get; set; }

        /// <summary>
        /// Gets provisioning state of the event channel. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Canceled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets information about the filter for the event channel.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filter")]
        public EventChannelFilter Filter { get; set; }

    }
}
