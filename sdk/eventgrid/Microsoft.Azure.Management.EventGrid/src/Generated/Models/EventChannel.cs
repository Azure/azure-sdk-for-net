// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Event Channel.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class EventChannel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the EventChannel class.
        /// </summary>
        public EventChannel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventChannel class.
        /// </summary>
        /// <param name="id">Fully qualified identifier of the
        /// resource.</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="type">Type of the resource.</param>
        /// <param name="source">Source of the event channel. This represents a
        /// unique resource in the partner's resource model.</param>
        /// <param name="destination">Represents the destination of an event
        /// channel.</param>
        /// <param name="provisioningState">Provisioning state of the event
        /// channel. Possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Canceled', 'Failed'</param>
        /// <param name="partnerTopicReadinessState">The readiness state of the
        /// corresponding partner topic. Possible values include:
        /// 'NotActivatedByUserYet', 'ActivatedByUser', 'DeactivatedByUser',
        /// 'DeletedByUser'</param>
        /// <param name="expirationTimeIfNotActivatedUtc">Expiration time of
        /// the event channel. If this timer expires while the corresponding
        /// partner topic is never activated,
        /// the event channel and corresponding partner topic are
        /// deleted.</param>
        /// <param name="filter">Information about the filter for the event
        /// channel.</param>
        /// <param name="partnerTopicFriendlyDescription">Friendly description
        /// about the topic. This can be set by the publisher/partner to show
        /// custom description for the customer partner topic.
        /// This will be helpful to remove any ambiguity of the origin of
        /// creation of the partner topic for the customer.</param>
        /// <param name="systemData">The system metadata relating to this
        /// resource.</param>
        public EventChannel(string id = default(string), string name = default(string), string type = default(string), EventChannelSource source = default(EventChannelSource), EventChannelDestination destination = default(EventChannelDestination), string provisioningState = default(string), string partnerTopicReadinessState = default(string), System.DateTime? expirationTimeIfNotActivatedUtc = default(System.DateTime?), EventChannelFilter filter = default(EventChannelFilter), string partnerTopicFriendlyDescription = default(string), SystemData systemData = default(SystemData))
            : base(id, name, type)
        {
            Source = source;
            Destination = destination;
            ProvisioningState = provisioningState;
            PartnerTopicReadinessState = partnerTopicReadinessState;
            ExpirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            Filter = filter;
            PartnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets source of the event channel. This represents a unique
        /// resource in the partner's resource model.
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public EventChannelSource Source { get; set; }

        /// <summary>
        /// Gets or sets represents the destination of an event channel.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destination")]
        public EventChannelDestination Destination { get; set; }

        /// <summary>
        /// Gets provisioning state of the event channel. Possible values
        /// include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
        /// 'Canceled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the readiness state of the corresponding partner topic.
        /// Possible values include: 'NotActivatedByUserYet',
        /// 'ActivatedByUser', 'DeactivatedByUser', 'DeletedByUser'
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerTopicReadinessState")]
        public string PartnerTopicReadinessState { get; private set; }

        /// <summary>
        /// Gets or sets expiration time of the event channel. If this timer
        /// expires while the corresponding partner topic is never activated,
        /// the event channel and corresponding partner topic are deleted.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationTimeIfNotActivatedUtc")]
        public System.DateTime? ExpirationTimeIfNotActivatedUtc { get; set; }

        /// <summary>
        /// Gets or sets information about the filter for the event channel.
        /// </summary>
        [JsonProperty(PropertyName = "properties.filter")]
        public EventChannelFilter Filter { get; set; }

        /// <summary>
        /// Gets or sets friendly description about the topic. This can be set
        /// by the publisher/partner to show custom description for the
        /// customer partner topic.
        /// This will be helpful to remove any ambiguity of the origin of
        /// creation of the partner topic for the customer.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerTopicFriendlyDescription")]
        public string PartnerTopicFriendlyDescription { get; set; }

        /// <summary>
        /// Gets the system metadata relating to this resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

    }
}
