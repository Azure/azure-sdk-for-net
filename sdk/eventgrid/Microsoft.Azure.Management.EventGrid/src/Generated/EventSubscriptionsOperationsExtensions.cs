// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.EventGrid
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EventSubscriptionsOperations.
    /// </summary>
    public static partial class EventSubscriptionsOperationsExtensions
    {
            /// <summary>
            /// Get an event subscription.
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static EventSubscription Get(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                return operations.GetAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event subscription.
            /// </summary>
            /// <remarks>
            /// Get properties of an event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> GetAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription based on the specified scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The identifier of the resource to which the event subscription needs to be
            /// created or updated. The scope can be a subscription, or a resource group,
            /// or a top level resource belonging to a resource provider namespace, or an
            /// EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription. Event subscription names must be between 3
            /// and 64 characters in length and should use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            public static EventSubscription CreateOrUpdate(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo)
            {
                return operations.CreateOrUpdateAsync(scope, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription based on the specified scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The identifier of the resource to which the event subscription needs to be
            /// created or updated. The scope can be a subscription, or a resource group,
            /// or a top level resource belonging to a resource provider namespace, or an
            /// EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription. Event subscription names must be between 3
            /// and 64 characters in length and should use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> CreateOrUpdateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static void Delete(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                operations.DeleteAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            public static EventSubscription Update(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.UpdateAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> UpdateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get full URL of an event subscription.
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL for an event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static EventSubscriptionFullUrl GetFullUrl(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                return operations.GetFullUrlAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get full URL of an event subscription.
            /// </summary>
            /// <remarks>
            /// Get the full endpoint URL for an event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscriptionFullUrl> GetFullUrlAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFullUrlWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an aggregated list of all global event subscriptions under an Azure
            /// subscription.
            /// </summary>
            /// <remarks>
            /// List all aggregated global event subscriptions under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListGlobalBySubscription(this IEventSubscriptionsOperations operations, string filter = default(string), int? top = default(int?))
            {
                return operations.ListGlobalBySubscriptionAsync(filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an aggregated list of all global event subscriptions under an Azure
            /// subscription.
            /// </summary>
            /// <remarks>
            /// List all aggregated global event subscriptions under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalBySubscriptionAsync(this IEventSubscriptionsOperations operations, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalBySubscriptionWithHttpMessagesAsync(filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions for a topic type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under an Azure subscription for a topic
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListGlobalBySubscriptionForTopicType(this IEventSubscriptionsOperations operations, string topicTypeName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListGlobalBySubscriptionForTopicTypeAsync(topicTypeName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions for a topic type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under an Azure subscription for a topic
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalBySubscriptionForTopicTypeAsync(this IEventSubscriptionsOperations operations, string topicTypeName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalBySubscriptionForTopicTypeWithHttpMessagesAsync(topicTypeName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a specific Azure subscription and
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListGlobalByResourceGroup(this IEventSubscriptionsOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListGlobalByResourceGroupAsync(resourceGroupName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a specific Azure subscription and
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalByResourceGroupAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions under a resource group for a topic
            /// type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a resource group for a specific
            /// topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListGlobalByResourceGroupForTopicType(this IEventSubscriptionsOperations operations, string resourceGroupName, string topicTypeName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListGlobalByResourceGroupForTopicTypeAsync(resourceGroupName, topicTypeName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions under a resource group for a topic
            /// type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a resource group for a specific
            /// topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalByResourceGroupForTopicTypeAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string topicTypeName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalByResourceGroupForTopicTypeWithHttpMessagesAsync(resourceGroupName, topicTypeName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListRegionalBySubscription(this IEventSubscriptionsOperations operations, string location, string filter = default(string), int? top = default(int?))
            {
                return operations.ListRegionalBySubscriptionAsync(location, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalBySubscriptionAsync(this IEventSubscriptionsOperations operations, string location, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalBySubscriptionWithHttpMessagesAsync(location, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListRegionalByResourceGroup(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, string filter = default(string), int? top = default(int?))
            {
                return operations.ListRegionalByResourceGroupAsync(resourceGroupName, location, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalByResourceGroupAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalByResourceGroupWithHttpMessagesAsync(resourceGroupName, location, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription for a
            /// topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListRegionalBySubscriptionForTopicType(this IEventSubscriptionsOperations operations, string location, string topicTypeName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListRegionalBySubscriptionForTopicTypeAsync(location, topicTypeName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription for a
            /// topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalBySubscriptionForTopicTypeAsync(this IEventSubscriptionsOperations operations, string location, string topicTypeName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalBySubscriptionForTopicTypeWithHttpMessagesAsync(location, topicTypeName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group for a topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListRegionalByResourceGroupForTopicType(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, string topicTypeName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListRegionalByResourceGroupForTopicTypeAsync(resourceGroupName, location, topicTypeName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group for a topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='location'>
            /// Name of the location.
            /// </param>
            /// <param name='topicTypeName'>
            /// Name of the topic type.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalByResourceGroupForTopicTypeAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string location, string topicTypeName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalByResourceGroupForTopicTypeWithHttpMessagesAsync(resourceGroupName, location, topicTypeName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='providerNamespace'>
            /// Namespace of the provider of the topic.
            /// </param>
            /// <param name='resourceTypeName'>
            /// Name of the resource type.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListByResource(this IEventSubscriptionsOperations operations, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByResourceAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='providerNamespace'>
            /// Namespace of the provider of the topic.
            /// </param>
            /// <param name='resourceTypeName'>
            /// Name of the resource type.
            /// </param>
            /// <param name='resourceName'>
            /// Name of the resource.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListByResourceAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string providerNamespace, string resourceTypeName, string resourceName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceWithHttpMessagesAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific domain topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific domain
            /// topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='domainName'>
            /// Name of the top level domain.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            public static IPage<EventSubscription> ListByDomainTopic(this IEventSubscriptionsOperations operations, string resourceGroupName, string domainName, string topicName, string filter = default(string), int? top = default(int?))
            {
                return operations.ListByDomainTopicAsync(resourceGroupName, domainName, topicName, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific domain topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific domain
            /// topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='domainName'>
            /// Name of the top level domain.
            /// </param>
            /// <param name='topicName'>
            /// Name of the domain topic.
            /// </param>
            /// <param name='filter'>
            /// The query used to filter the search results using OData syntax. Filtering
            /// is permitted on the 'name' property only and with limited number of OData
            /// operations. These operations are: the 'contains' function as well as the
            /// following logical operations: not, and, or, eq (for equal), and ne (for not
            /// equal). No arithmetic operations are supported. The following is a valid
            /// filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'.
            /// The following is not a valid filter example: $filter=location eq 'westus'.
            /// </param>
            /// <param name='top'>
            /// The number of results to return per page for the list operation. Valid
            /// range for top parameter is 1 to 100. If not specified, the default number
            /// of results to be returned is 20 items per page.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListByDomainTopicAsync(this IEventSubscriptionsOperations operations, string resourceGroupName, string domainName, string topicName, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDomainTopicWithHttpMessagesAsync(resourceGroupName, domainName, topicName, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get delivery attributes for an event subscription.
            /// </summary>
            /// <remarks>
            /// Get all delivery attributes for an event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static DeliveryAttributeListResult GetDeliveryAttributes(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                return operations.GetDeliveryAttributesAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get delivery attributes for an event subscription.
            /// </summary>
            /// <remarks>
            /// Get all delivery attributes for an event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeliveryAttributeListResult> GetDeliveryAttributesAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeliveryAttributesWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription based on the specified scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The identifier of the resource to which the event subscription needs to be
            /// created or updated. The scope can be a subscription, or a resource group,
            /// or a top level resource belonging to a resource provider namespace, or an
            /// EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription. Event subscription names must be between 3
            /// and 64 characters in length and should use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            public static EventSubscription BeginCreateOrUpdate(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo)
            {
                return operations.BeginCreateOrUpdateAsync(scope, eventSubscriptionName, eventSubscriptionInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new event subscription or updates an existing
            /// event subscription based on the specified scope.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The identifier of the resource to which the event subscription needs to be
            /// created or updated. The scope can be a subscription, or a resource group,
            /// or a top level resource belonging to a resource provider namespace, or an
            /// EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a
            /// subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription. Event subscription names must be between 3
            /// and 64 characters in length and should use alphanumeric letters only.
            /// </param>
            /// <param name='eventSubscriptionInfo'>
            /// Event subscription properties containing the destination and filter
            /// information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> BeginCreateOrUpdateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscription eventSubscriptionInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event subscription.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            public static void BeginDelete(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName)
            {
                operations.BeginDeleteAsync(scope, eventSubscriptionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event subscription.
            /// </summary>
            /// <remarks>
            /// Delete an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the event subscription. The scope can be a subscription, or a
            /// resource group, or a top level resource belonging to a resource provider
            /// namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(scope, eventSubscriptionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            public static EventSubscription BeginUpdate(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters)
            {
                return operations.BeginUpdateAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an event subscription.
            /// </summary>
            /// <remarks>
            /// Asynchronously updates an existing event subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of existing event subscription. The scope can be a subscription,
            /// or a resource group, or a top level resource belonging to a resource
            /// provider namespace, or an EventGrid topic. For example, use
            /// '/subscriptions/{subscriptionId}/' for a subscription,
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a
            /// resource group, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
            /// for a resource, and
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
            /// for an EventGrid topic.
            /// </param>
            /// <param name='eventSubscriptionName'>
            /// Name of the event subscription to be updated.
            /// </param>
            /// <param name='eventSubscriptionUpdateParameters'>
            /// Updated event subscription information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSubscription> BeginUpdateAsync(this IEventSubscriptionsOperations operations, string scope, string eventSubscriptionName, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an aggregated list of all global event subscriptions under an Azure
            /// subscription.
            /// </summary>
            /// <remarks>
            /// List all aggregated global event subscriptions under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListGlobalBySubscriptionNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListGlobalBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an aggregated list of all global event subscriptions under an Azure
            /// subscription.
            /// </summary>
            /// <remarks>
            /// List all aggregated global event subscriptions under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalBySubscriptionNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions for a topic type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under an Azure subscription for a topic
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListGlobalBySubscriptionForTopicTypeNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListGlobalBySubscriptionForTopicTypeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions for a topic type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under an Azure subscription for a topic
            /// type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalBySubscriptionForTopicTypeNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalBySubscriptionForTopicTypeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a specific Azure subscription and
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListGlobalByResourceGroupNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListGlobalByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a specific Azure subscription and
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalByResourceGroupNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all global event subscriptions under a resource group for a topic
            /// type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a resource group for a specific
            /// topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListGlobalByResourceGroupForTopicTypeNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListGlobalByResourceGroupForTopicTypeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all global event subscriptions under a resource group for a topic
            /// type.
            /// </summary>
            /// <remarks>
            /// List all global event subscriptions under a resource group for a specific
            /// topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListGlobalByResourceGroupForTopicTypeNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListGlobalByResourceGroupForTopicTypeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListRegionalBySubscriptionNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListRegionalBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalBySubscriptionNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListRegionalByResourceGroupNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListRegionalByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalByResourceGroupNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription for a
            /// topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListRegionalBySubscriptionForTopicTypeNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListRegionalBySubscriptionForTopicTypeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription for a
            /// topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalBySubscriptionForTopicTypeNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalBySubscriptionForTopicTypeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group for a topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListRegionalByResourceGroupForTopicTypeNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListRegionalByResourceGroupForTopicTypeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all regional event subscriptions under an Azure subscription and
            /// resource group for a topic type.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions from the given location under a specific Azure
            /// subscription and resource group and topic type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListRegionalByResourceGroupForTopicTypeNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRegionalByResourceGroupForTopicTypeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListByResourceNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListByResourceNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all event subscriptions for a specific domain topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific domain
            /// topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EventSubscription> ListByDomainTopicNext(this IEventSubscriptionsOperations operations, string nextPageLink)
            {
                return operations.ListByDomainTopicNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all event subscriptions for a specific domain topic.
            /// </summary>
            /// <remarks>
            /// List all event subscriptions that have been created for a specific domain
            /// topic.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventSubscription>> ListByDomainTopicNextAsync(this IEventSubscriptionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDomainTopicNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
