// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobWaitingForActivation event. </summary>
    [JsonConverter(typeof(AcsRouterJobWaitingForActivationEventDataConverter))]
    public partial class AcsRouterJobWaitingForActivationEventData : IJsonModel<AcsRouterJobWaitingForActivationEventData>
    {
        /// <summary> Initializes a new instance of <see cref="AcsRouterJobWaitingForActivationEventData"/> for deserialization. </summary>
        internal AcsRouterJobWaitingForActivationEventData()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AcsRouterJobWaitingForActivationEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsRouterJobWaitingForActivationEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsRouterJobWaitingForActivationEventData)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(Priority))
            {
                writer.WritePropertyName("priority"u8);
                writer.WriteNumberValue(Priority.Value);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("expiredAttachedWorkerSelectors"u8);
                writer.WriteStartArray();
                foreach (AcsRouterWorkerSelector item in ExpiredAttachedWorkerSelectors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("expiredRequestedWorkerSelectors"u8);
                writer.WriteStartArray();
                foreach (AcsRouterWorkerSelector item in ExpiredRequestedWorkerSelectors)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ScheduledOn))
            {
                writer.WritePropertyName("scheduledOn"u8);
                writer.WriteStringValue(ScheduledOn.Value, "O");
            }
            writer.WritePropertyName("unavailableForMatching"u8);
            writer.WriteBooleanValue(UnavailableForMatching);
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsRouterJobWaitingForActivationEventData IJsonModel<AcsRouterJobWaitingForActivationEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AcsRouterJobWaitingForActivationEventData)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AcsRouterEventData JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsRouterJobWaitingForActivationEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsRouterJobWaitingForActivationEventData)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAcsRouterJobWaitingForActivationEventData(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AcsRouterJobWaitingForActivationEventData DeserializeAcsRouterJobWaitingForActivationEventData(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string jobId = default;
            string channelReference = default;
            string channelId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string queueId = default;
            IReadOnlyDictionary<string, string> labels = default;
            IReadOnlyDictionary<string, string> tags = default;
            int? priority = default;
            IReadOnlyList<AcsRouterWorkerSelector> expiredAttachedWorkerSelectors = default;
            IReadOnlyList<AcsRouterWorkerSelector> expiredRequestedWorkerSelectors = default;
            DateTimeOffset? scheduledOn = default;
            bool unavailableForMatching = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("jobId"u8))
                {
                    jobId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("channelReference"u8))
                {
                    channelReference = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("channelId"u8))
                {
                    channelId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("queueId"u8))
                {
                    queueId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("labels"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    labels = dictionary;
                    continue;
                }
                if (prop.NameEquals("tags"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    tags = dictionary;
                    continue;
                }
                if (prop.NameEquals("priority"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    priority = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("expiredAttachedWorkerSelectors"u8))
                {
                    List<AcsRouterWorkerSelector> array = new List<AcsRouterWorkerSelector>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AcsRouterWorkerSelector.DeserializeAcsRouterWorkerSelector(item, options));
                    }
                    expiredAttachedWorkerSelectors = array;
                    continue;
                }
                if (prop.NameEquals("expiredRequestedWorkerSelectors"u8))
                {
                    List<AcsRouterWorkerSelector> array = new List<AcsRouterWorkerSelector>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AcsRouterWorkerSelector.DeserializeAcsRouterWorkerSelector(item, options));
                    }
                    expiredRequestedWorkerSelectors = array;
                    continue;
                }
                if (prop.NameEquals("scheduledOn"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduledOn = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("unavailableForMatching"u8))
                {
                    unavailableForMatching = prop.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AcsRouterJobWaitingForActivationEventData(
                jobId,
                channelReference,
                channelId,
                additionalBinaryDataProperties,
                queueId,
                labels,
                tags,
                priority,
                expiredAttachedWorkerSelectors,
                expiredRequestedWorkerSelectors,
                scheduledOn,
                unavailableForMatching);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AcsRouterJobWaitingForActivationEventData>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsRouterJobWaitingForActivationEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMessagingEventGridSystemEventsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AcsRouterJobWaitingForActivationEventData)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsRouterJobWaitingForActivationEventData IPersistableModel<AcsRouterJobWaitingForActivationEventData>.Create(BinaryData data, ModelReaderWriterOptions options) => (AcsRouterJobWaitingForActivationEventData)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AcsRouterEventData PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsRouterJobWaitingForActivationEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAcsRouterJobWaitingForActivationEventData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AcsRouterJobWaitingForActivationEventData)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AcsRouterJobWaitingForActivationEventData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class AcsRouterJobWaitingForActivationEventDataConverter : JsonConverter<AcsRouterJobWaitingForActivationEventData>
        {
            /// <summary> Writes the JSON representation of the model. </summary>
            /// <param name="writer"> The writer. </param>
            /// <param name="model"> The model to write. </param>
            /// <param name="options"> The serialization options. </param>
            public override void Write(Utf8JsonWriter writer, AcsRouterJobWaitingForActivationEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue<IJsonModel<AcsRouterJobWaitingForActivationEventData>>(model, ModelSerializationExtensions.WireOptions);
            }

            /// <summary> Reads the JSON representation and converts into the model. </summary>
            /// <param name="reader"> The reader. </param>
            /// <param name="typeToConvert"> The type to convert. </param>
            /// <param name="options"> The serialization options. </param>
            public override AcsRouterJobWaitingForActivationEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using JsonDocument document = JsonDocument.ParseValue(ref reader);
                return DeserializeAcsRouterJobWaitingForActivationEventData(document.RootElement, ModelSerializationExtensions.WireOptions);
            }
        }
    }
}
