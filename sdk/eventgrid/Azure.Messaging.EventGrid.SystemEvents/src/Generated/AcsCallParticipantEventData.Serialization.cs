// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of common properties of all participant events. </summary>
    [JsonConverter(typeof(AcsCallParticipantEventDataConverter))]
    public partial class AcsCallParticipantEventData : IJsonModel<AcsCallParticipantEventData>
    {
        /// <summary> Initializes a new instance of <see cref="AcsCallParticipantEventData"/> for deserialization. </summary>
        internal AcsCallParticipantEventData()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AcsCallParticipantEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsCallParticipantEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsCallParticipantEventData)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(User))
            {
                writer.WritePropertyName("user"u8);
                writer.WriteObjectValue(User, options);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(ParticipantId))
            {
                writer.WritePropertyName("participantId"u8);
                writer.WriteStringValue(ParticipantId);
            }
            if (Optional.IsDefined(UserAgent))
            {
                writer.WritePropertyName("userAgent"u8);
                writer.WriteStringValue(UserAgent);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsCallParticipantEventData IJsonModel<AcsCallParticipantEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AcsCallParticipantEventData)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AcsCallingEventProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsCallParticipantEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsCallParticipantEventData)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAcsCallParticipantEventData(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AcsCallParticipantEventData DeserializeAcsCallParticipantEventData(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AcsCallParticipantProperties startedBy = default;
            string serverCallId = default;
            AcsCallGroupProperties @group = default;
            AcsCallRoomProperties room = default;
            bool? isTwoParty = default;
            string correlationId = default;
            bool? isRoomsCall = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            AcsCallParticipantProperties user = default;
            string displayName = default;
            string participantId = default;
            string userAgent = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("startedBy"u8))
                {
                    startedBy = AcsCallParticipantProperties.DeserializeAcsCallParticipantProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("serverCallId"u8))
                {
                    serverCallId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("group"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    @group = AcsCallGroupProperties.DeserializeAcsCallGroupProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("room"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    room = AcsCallRoomProperties.DeserializeAcsCallRoomProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("isTwoParty"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isTwoParty = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("correlationId"u8))
                {
                    correlationId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("isRoomsCall"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isRoomsCall = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("user"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    user = AcsCallParticipantProperties.DeserializeAcsCallParticipantProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("participantId"u8))
                {
                    participantId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("userAgent"u8))
                {
                    userAgent = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AcsCallParticipantEventData(
                startedBy,
                serverCallId,
                @group,
                room,
                isTwoParty,
                correlationId,
                isRoomsCall,
                additionalBinaryDataProperties,
                user,
                displayName,
                participantId,
                userAgent);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AcsCallParticipantEventData>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsCallParticipantEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMessagingEventGridSystemEventsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AcsCallParticipantEventData)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsCallParticipantEventData IPersistableModel<AcsCallParticipantEventData>.Create(BinaryData data, ModelReaderWriterOptions options) => (AcsCallParticipantEventData)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AcsCallingEventProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsCallParticipantEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAcsCallParticipantEventData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AcsCallParticipantEventData)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AcsCallParticipantEventData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class AcsCallParticipantEventDataConverter : JsonConverter<AcsCallParticipantEventData>
        {
            /// <summary> Writes the JSON representation of the model. </summary>
            /// <param name="writer"> The writer. </param>
            /// <param name="model"> The model to write. </param>
            /// <param name="options"> The serialization options. </param>
            public override void Write(Utf8JsonWriter writer, AcsCallParticipantEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue<IJsonModel<AcsCallParticipantEventData>>(model, ModelSerializationExtensions.WireOptions);
            }

            /// <summary> Reads the JSON representation and converts into the model. </summary>
            /// <param name="reader"> The reader. </param>
            /// <param name="typeToConvert"> The type to convert. </param>
            /// <param name="options"> The serialization options. </param>
            public override AcsCallParticipantEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using JsonDocument document = JsonDocument.ParseValue(ref reader);
                return DeserializeAcsCallParticipantEventData(document.RootElement, ModelSerializationExtensions.WireOptions);
            }
        }
    }
}
