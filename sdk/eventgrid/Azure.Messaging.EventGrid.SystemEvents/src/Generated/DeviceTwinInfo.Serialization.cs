// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Information about the device twin, which is the cloud representation of application device metadata. </summary>
    public partial class DeviceTwinInfo : IJsonModel<DeviceTwinInfo>
    {
        /// <summary> Initializes a new instance of <see cref="DeviceTwinInfo"/> for deserialization. </summary>
        internal DeviceTwinInfo()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DeviceTwinInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceTwinInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeviceTwinInfo)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("authenticationType"u8);
            writer.WriteStringValue(AuthenticationType);
            if (Optional.IsDefined(CloudToDeviceMessageCount))
            {
                writer.WritePropertyName("cloudToDeviceMessageCount"u8);
                writer.WriteNumberValue(CloudToDeviceMessageCount.Value);
            }
            writer.WritePropertyName("connectionState"u8);
            writer.WriteStringValue(ConnectionState);
            writer.WritePropertyName("deviceId"u8);
            writer.WriteStringValue(DeviceId);
            writer.WritePropertyName("etag"u8);
            writer.WriteStringValue(Etag);
            writer.WritePropertyName("lastActivityTime"u8);
            writer.WriteStringValue(LastActivityTime);
            writer.WritePropertyName("properties"u8);
            writer.WriteObjectValue(Properties, options);
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status);
            writer.WritePropertyName("statusUpdateTime"u8);
            writer.WriteStringValue(StatusUpdateTime);
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteNumberValue(Version.Value);
            }
            writer.WritePropertyName("x509Thumbprint"u8);
            writer.WriteObjectValue(X509Thumbprint, options);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DeviceTwinInfo IJsonModel<DeviceTwinInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DeviceTwinInfo JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceTwinInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeviceTwinInfo)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeviceTwinInfo(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DeviceTwinInfo DeserializeDeviceTwinInfo(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string authenticationType = default;
            float? cloudToDeviceMessageCount = default;
            string connectionState = default;
            string deviceId = default;
            string etag = default;
            string lastActivityTime = default;
            DeviceTwinInfoProperties properties = default;
            string status = default;
            string statusUpdateTime = default;
            float? version = default;
            DeviceTwinInfoX509Thumbprint x509Thumbprint = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("authenticationType"u8))
                {
                    authenticationType = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("cloudToDeviceMessageCount"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudToDeviceMessageCount = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("connectionState"u8))
                {
                    connectionState = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("deviceId"u8))
                {
                    deviceId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("etag"u8))
                {
                    etag = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("lastActivityTime"u8))
                {
                    lastActivityTime = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("properties"u8))
                {
                    properties = DeviceTwinInfoProperties.DeserializeDeviceTwinInfoProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    status = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("statusUpdateTime"u8))
                {
                    statusUpdateTime = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("version"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    version = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("x509Thumbprint"u8))
                {
                    x509Thumbprint = DeviceTwinInfoX509Thumbprint.DeserializeDeviceTwinInfoX509Thumbprint(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DeviceTwinInfo(
                authenticationType,
                cloudToDeviceMessageCount,
                connectionState,
                deviceId,
                etag,
                lastActivityTime,
                properties,
                status,
                statusUpdateTime,
                version,
                x509Thumbprint,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DeviceTwinInfo>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceTwinInfo>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMessagingEventGridSystemEventsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DeviceTwinInfo)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DeviceTwinInfo IPersistableModel<DeviceTwinInfo>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual DeviceTwinInfo PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DeviceTwinInfo>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDeviceTwinInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeviceTwinInfo)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DeviceTwinInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
