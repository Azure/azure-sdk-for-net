// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of the Data property of an EventGridEvent for a Microsoft.ApiManagement.CircuitBreaker.Opened event. </summary>
    public partial class ApiManagementCircuitBreakerOpenedEventData
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ApiManagementCircuitBreakerOpenedEventData"/>. </summary>
        /// <param name="backendName"> Name of the backend for which the circuit has opened. </param>
        /// <param name="circuitBreaker"> Information related to the circuit breaker configured on the backend. </param>
        internal ApiManagementCircuitBreakerOpenedEventData(string backendName, ApiManagementCircuitBreakerProperties circuitBreaker)
        {
            BackendName = backendName;
            CircuitBreaker = circuitBreaker;
        }

        /// <summary> Initializes a new instance of <see cref="ApiManagementCircuitBreakerOpenedEventData"/>. </summary>
        /// <param name="backendName"> Name of the backend for which the circuit has opened. </param>
        /// <param name="circuitBreaker"> Information related to the circuit breaker configured on the backend. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ApiManagementCircuitBreakerOpenedEventData(string backendName, ApiManagementCircuitBreakerProperties circuitBreaker, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            BackendName = backendName;
            CircuitBreaker = circuitBreaker;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Name of the backend for which the circuit has opened. </summary>
        public string BackendName { get; }

        /// <summary> Information related to the circuit breaker configured on the backend. </summary>
        public ApiManagementCircuitBreakerProperties CircuitBreaker { get; }
    }
}
