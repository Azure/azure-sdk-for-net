// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadCreated event. </summary>
    [JsonConverter(typeof(AcsChatThreadCreatedEventDataConverter))]
    public partial class AcsChatThreadCreatedEventData : IJsonModel<AcsChatThreadCreatedEventData>
    {
        /// <summary> Initializes a new instance of <see cref="AcsChatThreadCreatedEventData"/> for deserialization. </summary>
        internal AcsChatThreadCreatedEventData()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AcsChatThreadCreatedEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsChatThreadCreatedEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsChatThreadCreatedEventData)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("createdByCommunicationIdentifier"u8);
            writer.WriteObjectValue(CreatedByCommunicationIdentifier, options);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            foreach (var item in Properties)
            {
                writer.WritePropertyName(item.Key);
                if (item.Value == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteObjectValue<object>(item.Value, options);
            }
            writer.WriteEndObject();
            if (options.Format != "W" && Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartObject();
                foreach (var item in Metadata)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("participants"u8);
                writer.WriteStartArray();
                foreach (AcsChatThreadParticipantProperties item in Participants)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsChatThreadCreatedEventData IJsonModel<AcsChatThreadCreatedEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (AcsChatThreadCreatedEventData)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AcsChatEventInThreadBaseProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsChatThreadCreatedEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsChatThreadCreatedEventData)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAcsChatThreadCreatedEventData(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AcsChatThreadCreatedEventData DeserializeAcsChatThreadCreatedEventData(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string transactionId = default;
            string threadId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            DateTimeOffset? createTime = default;
            long? version = default;
            CommunicationIdentifierModel createdByCommunicationIdentifier = default;
            IReadOnlyDictionary<string, object> properties = default;
            IReadOnlyDictionary<string, string> metadata = default;
            IReadOnlyList<AcsChatThreadParticipantProperties> participants = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("transactionId"u8))
                {
                    transactionId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("threadId"u8))
                {
                    threadId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("createTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("version"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    version = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("createdByCommunicationIdentifier"u8))
                {
                    createdByCommunicationIdentifier = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("properties"u8))
                {
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetObject());
                        }
                    }
                    properties = dictionary;
                    continue;
                }
                if (prop.NameEquals("metadata"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, prop0.Value.GetString());
                        }
                    }
                    metadata = dictionary;
                    continue;
                }
                if (prop.NameEquals("participants"u8))
                {
                    List<AcsChatThreadParticipantProperties> array = new List<AcsChatThreadParticipantProperties>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(AcsChatThreadParticipantProperties.DeserializeAcsChatThreadParticipantProperties(item, options));
                    }
                    participants = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AcsChatThreadCreatedEventData(
                transactionId,
                threadId,
                additionalBinaryDataProperties,
                createTime,
                version,
                createdByCommunicationIdentifier,
                properties,
                metadata ?? new ChangeTrackingDictionary<string, string>(),
                participants);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AcsChatThreadCreatedEventData>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsChatThreadCreatedEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMessagingEventGridSystemEventsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AcsChatThreadCreatedEventData)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsChatThreadCreatedEventData IPersistableModel<AcsChatThreadCreatedEventData>.Create(BinaryData data, ModelReaderWriterOptions options) => (AcsChatThreadCreatedEventData)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override AcsChatEventInThreadBaseProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsChatThreadCreatedEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAcsChatThreadCreatedEventData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AcsChatThreadCreatedEventData)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AcsChatThreadCreatedEventData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class AcsChatThreadCreatedEventDataConverter : JsonConverter<AcsChatThreadCreatedEventData>
        {
            /// <summary> Writes the JSON representation of the model. </summary>
            /// <param name="writer"> The writer. </param>
            /// <param name="model"> The model to write. </param>
            /// <param name="options"> The serialization options. </param>
            public override void Write(Utf8JsonWriter writer, AcsChatThreadCreatedEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue<IJsonModel<AcsChatThreadCreatedEventData>>(model, ModelSerializationExtensions.WireOptions);
            }

            /// <summary> Reads the JSON representation and converts into the model. </summary>
            /// <param name="reader"> The reader. </param>
            /// <param name="typeToConvert"> The type to convert. </param>
            /// <param name="options"> The serialization options. </param>
            public override AcsChatThreadCreatedEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using JsonDocument document = JsonDocument.ParseValue(ref reader);
                return DeserializeAcsChatThreadCreatedEventData(document.RootElement, ModelSerializationExtensions.WireOptions);
            }
        }
    }
}
