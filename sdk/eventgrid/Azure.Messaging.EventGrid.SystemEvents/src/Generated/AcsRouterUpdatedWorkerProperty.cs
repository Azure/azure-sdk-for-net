// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Worker properties that can be updated. </summary>
    public readonly partial struct AcsRouterUpdatedWorkerProperty : IEquatable<AcsRouterUpdatedWorkerProperty>
    {
        private readonly string _value;
        /// <summary> AvailableForOffers. </summary>
        private const string AvailableForOffersValue = "AvailableForOffers";
        /// <summary> TotalCapacity. </summary>
        private const string TotalCapacityValue = "TotalCapacity";
        /// <summary> QueueAssignments. </summary>
        private const string QueueAssignmentsValue = "QueueAssignments";
        /// <summary> Labels. </summary>
        private const string LabelsValue = "Labels";
        /// <summary> Tags. </summary>
        private const string TagsValue = "Tags";
        /// <summary> ChannelConfigurations. </summary>
        private const string ChannelConfigurationsValue = "ChannelConfigurations";

        /// <summary> Initializes a new instance of <see cref="AcsRouterUpdatedWorkerProperty"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AcsRouterUpdatedWorkerProperty(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> AvailableForOffers. </summary>
        public static AcsRouterUpdatedWorkerProperty AvailableForOffers { get; } = new AcsRouterUpdatedWorkerProperty(AvailableForOffersValue);

        /// <summary> TotalCapacity. </summary>
        public static AcsRouterUpdatedWorkerProperty TotalCapacity { get; } = new AcsRouterUpdatedWorkerProperty(TotalCapacityValue);

        /// <summary> QueueAssignments. </summary>
        public static AcsRouterUpdatedWorkerProperty QueueAssignments { get; } = new AcsRouterUpdatedWorkerProperty(QueueAssignmentsValue);

        /// <summary> Labels. </summary>
        public static AcsRouterUpdatedWorkerProperty Labels { get; } = new AcsRouterUpdatedWorkerProperty(LabelsValue);

        /// <summary> Tags. </summary>
        public static AcsRouterUpdatedWorkerProperty Tags { get; } = new AcsRouterUpdatedWorkerProperty(TagsValue);

        /// <summary> ChannelConfigurations. </summary>
        public static AcsRouterUpdatedWorkerProperty ChannelConfigurations { get; } = new AcsRouterUpdatedWorkerProperty(ChannelConfigurationsValue);

        /// <summary> Determines if two <see cref="AcsRouterUpdatedWorkerProperty"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(AcsRouterUpdatedWorkerProperty left, AcsRouterUpdatedWorkerProperty right) => left.Equals(right);

        /// <summary> Determines if two <see cref="AcsRouterUpdatedWorkerProperty"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(AcsRouterUpdatedWorkerProperty left, AcsRouterUpdatedWorkerProperty right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="AcsRouterUpdatedWorkerProperty"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AcsRouterUpdatedWorkerProperty(string value) => new AcsRouterUpdatedWorkerProperty(value);

        /// <summary> Converts a string to a <see cref="AcsRouterUpdatedWorkerProperty"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator AcsRouterUpdatedWorkerProperty?(string value) => value == null ? null : new AcsRouterUpdatedWorkerProperty(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AcsRouterUpdatedWorkerProperty other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(AcsRouterUpdatedWorkerProperty other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
