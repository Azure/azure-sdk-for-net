// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of the Data property of an EventGridEvent for a Microsoft.Edge.SolutionVersionPublished event. </summary>
    [JsonConverter(typeof(EdgeSolutionVersionPublishedEventDataConverter))]
    public partial class EdgeSolutionVersionPublishedEventData : IJsonModel<EdgeSolutionVersionPublishedEventData>
    {
        /// <summary> Initializes a new instance of <see cref="EdgeSolutionVersionPublishedEventData"/> for deserialization. </summary>
        internal EdgeSolutionVersionPublishedEventData()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<EdgeSolutionVersionPublishedEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionPublishedEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionPublishedEventData)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("externalValidationId"u8);
            writer.WriteStringValue(ExternalValidationId);
            writer.WritePropertyName("targetId"u8);
            writer.WriteStringValue(TargetId);
            writer.WritePropertyName("solutionTemplateId"u8);
            writer.WriteStringValue(SolutionTemplateId);
            writer.WritePropertyName("solutionTemplateVersionId"u8);
            writer.WriteStringValue(SolutionTemplateVersionId);
            writer.WritePropertyName("solutionVersionId"u8);
            writer.WriteStringValue(SolutionVersionId);
            writer.WritePropertyName("apiVersion"u8);
            writer.WriteStringValue(ApiVersion);
            writer.WritePropertyName("callbackUrl"u8);
            writer.WriteStringValue(CallbackUrl.AbsoluteUri);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        EdgeSolutionVersionPublishedEventData IJsonModel<EdgeSolutionVersionPublishedEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual EdgeSolutionVersionPublishedEventData JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionPublishedEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(EdgeSolutionVersionPublishedEventData)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeEdgeSolutionVersionPublishedEventData(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static EdgeSolutionVersionPublishedEventData DeserializeEdgeSolutionVersionPublishedEventData(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string externalValidationId = default;
            string targetId = default;
            string solutionTemplateId = default;
            string solutionTemplateVersionId = default;
            string solutionVersionId = default;
            string apiVersion = default;
            Uri callbackUrl = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("externalValidationId"u8))
                {
                    externalValidationId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetId"u8))
                {
                    targetId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("solutionTemplateId"u8))
                {
                    solutionTemplateId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("solutionTemplateVersionId"u8))
                {
                    solutionTemplateVersionId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("solutionVersionId"u8))
                {
                    solutionVersionId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("apiVersion"u8))
                {
                    apiVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("callbackUrl"u8))
                {
                    callbackUrl = new Uri(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new EdgeSolutionVersionPublishedEventData(
                externalValidationId,
                targetId,
                solutionTemplateId,
                solutionTemplateVersionId,
                solutionVersionId,
                apiVersion,
                callbackUrl,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<EdgeSolutionVersionPublishedEventData>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionPublishedEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMessagingEventGridSystemEventsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionPublishedEventData)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        EdgeSolutionVersionPublishedEventData IPersistableModel<EdgeSolutionVersionPublishedEventData>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual EdgeSolutionVersionPublishedEventData PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<EdgeSolutionVersionPublishedEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeEdgeSolutionVersionPublishedEventData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(EdgeSolutionVersionPublishedEventData)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<EdgeSolutionVersionPublishedEventData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class EdgeSolutionVersionPublishedEventDataConverter : JsonConverter<EdgeSolutionVersionPublishedEventData>
        {
            /// <summary> Writes the JSON representation of the model. </summary>
            /// <param name="writer"> The writer. </param>
            /// <param name="model"> The model to write. </param>
            /// <param name="options"> The serialization options. </param>
            public override void Write(Utf8JsonWriter writer, EdgeSolutionVersionPublishedEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue<IJsonModel<EdgeSolutionVersionPublishedEventData>>(model, ModelSerializationExtensions.WireOptions);
            }

            /// <summary> Reads the JSON representation and converts into the model. </summary>
            /// <param name="reader"> The reader. </param>
            /// <param name="typeToConvert"> The type to convert. </param>
            /// <param name="options"> The serialization options. </param>
            public override EdgeSolutionVersionPublishedEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using JsonDocument document = JsonDocument.ParseValue(ref reader);
                return DeserializeEdgeSolutionVersionPublishedEventData(document.RootElement, ModelSerializationExtensions.WireOptions);
            }
        }
    }
}
