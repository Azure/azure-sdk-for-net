// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Azure.Messaging.EventGrid.SystemEvents
{
    /// <summary> Schema of the Data property of an EventGridEvent for an Microsoft.Communication.IncomingCall event. </summary>
    [JsonConverter(typeof(AcsIncomingCallEventDataConverter))]
    public partial class AcsIncomingCallEventData : IJsonModel<AcsIncomingCallEventData>
    {
        /// <summary> Initializes a new instance of <see cref="AcsIncomingCallEventData"/> for deserialization. </summary>
        internal AcsIncomingCallEventData()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<AcsIncomingCallEventData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsIncomingCallEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsIncomingCallEventData)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("to"u8);
            writer.WriteObjectValue(ToCommunicationIdentifier, options);
            writer.WritePropertyName("from"u8);
            writer.WriteObjectValue(FromCommunicationIdentifier, options);
            if (Optional.IsDefined(ServerCallId))
            {
                writer.WritePropertyName("serverCallId"u8);
                writer.WriteStringValue(ServerCallId);
            }
            if (Optional.IsDefined(CallerDisplayName))
            {
                writer.WritePropertyName("callerDisplayName"u8);
                writer.WriteStringValue(CallerDisplayName);
            }
            writer.WritePropertyName("customContext"u8);
            writer.WriteObjectValue(CustomContext, options);
            if (Optional.IsDefined(IncomingCallContext))
            {
                writer.WritePropertyName("incomingCallContext"u8);
                writer.WriteStringValue(IncomingCallContext);
            }
            if (Optional.IsDefined(OnBehalfOfCallee))
            {
                writer.WritePropertyName("onBehalfOfCallee"u8);
                writer.WriteObjectValue(OnBehalfOfCallee, options);
            }
            if (Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId"u8);
                writer.WriteStringValue(CorrelationId);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsIncomingCallEventData IJsonModel<AcsIncomingCallEventData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AcsIncomingCallEventData JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsIncomingCallEventData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AcsIncomingCallEventData)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAcsIncomingCallEventData(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static AcsIncomingCallEventData DeserializeAcsIncomingCallEventData(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CommunicationIdentifierModel toCommunicationIdentifier = default;
            CommunicationIdentifierModel fromCommunicationIdentifier = default;
            string serverCallId = default;
            string callerDisplayName = default;
            AcsIncomingCallCustomContext customContext = default;
            string incomingCallContext = default;
            CommunicationIdentifierModel onBehalfOfCallee = default;
            string correlationId = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("to"u8))
                {
                    toCommunicationIdentifier = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("from"u8))
                {
                    fromCommunicationIdentifier = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("serverCallId"u8))
                {
                    serverCallId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("callerDisplayName"u8))
                {
                    callerDisplayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("customContext"u8))
                {
                    customContext = AcsIncomingCallCustomContext.DeserializeAcsIncomingCallCustomContext(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("incomingCallContext"u8))
                {
                    incomingCallContext = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("onBehalfOfCallee"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onBehalfOfCallee = CommunicationIdentifierModel.DeserializeCommunicationIdentifierModel(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("correlationId"u8))
                {
                    correlationId = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new AcsIncomingCallEventData(
                toCommunicationIdentifier,
                fromCommunicationIdentifier,
                serverCallId,
                callerDisplayName,
                customContext,
                incomingCallContext,
                onBehalfOfCallee,
                correlationId,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<AcsIncomingCallEventData>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsIncomingCallEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMessagingEventGridSystemEventsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AcsIncomingCallEventData)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        AcsIncomingCallEventData IPersistableModel<AcsIncomingCallEventData>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual AcsIncomingCallEventData PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<AcsIncomingCallEventData>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeAcsIncomingCallEventData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AcsIncomingCallEventData)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<AcsIncomingCallEventData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class AcsIncomingCallEventDataConverter : JsonConverter<AcsIncomingCallEventData>
        {
            /// <summary> Writes the JSON representation of the model. </summary>
            /// <param name="writer"> The writer. </param>
            /// <param name="model"> The model to write. </param>
            /// <param name="options"> The serialization options. </param>
            public override void Write(Utf8JsonWriter writer, AcsIncomingCallEventData model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue<IJsonModel<AcsIncomingCallEventData>>(model, ModelSerializationExtensions.WireOptions);
            }

            /// <summary> Reads the JSON representation and converts into the model. </summary>
            /// <param name="reader"> The reader. </param>
            /// <param name="typeToConvert"> The type to convert. </param>
            /// <param name="options"> The serialization options. </param>
            public override AcsIncomingCallEventData Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using JsonDocument document = JsonDocument.ParseValue(ref reader);
                return DeserializeAcsIncomingCallEventData(document.RootElement, ModelSerializationExtensions.WireOptions);
            }
        }
    }
}
