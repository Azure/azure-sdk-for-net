// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataLakeStore.Models
{
    public partial class DataLakeStoreAccountEncryptionConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(ConfigType.ToSerialString());
            if (Optional.IsDefined(KeyVaultMetaInfo))
            {
                writer.WritePropertyName("keyVaultMetaInfo"u8);
                writer.WriteObjectValue(KeyVaultMetaInfo);
            }
            writer.WriteEndObject();
        }

        internal static DataLakeStoreAccountEncryptionConfig DeserializeDataLakeStoreAccountEncryptionConfig(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DataLakeStoreAccountEncryptionConfigType type = default;
            Optional<DataLakeStoreAccountKeyVaultMetaInfo> keyVaultMetaInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString().ToDataLakeStoreAccountEncryptionConfigType();
                    continue;
                }
                if (property.NameEquals("keyVaultMetaInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyVaultMetaInfo = DataLakeStoreAccountKeyVaultMetaInfo.DeserializeDataLakeStoreAccountKeyVaultMetaInfo(property.Value);
                    continue;
                }
            }
            return new DataLakeStoreAccountEncryptionConfig(type, keyVaultMetaInfo.Value);
        }
    }
}
