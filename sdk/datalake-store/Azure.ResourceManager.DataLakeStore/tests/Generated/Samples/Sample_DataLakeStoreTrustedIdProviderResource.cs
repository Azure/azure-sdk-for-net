// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataLakeStore.Models;

namespace Azure.ResourceManager.DataLakeStore
{
    public partial class Sample_DataLakeStoreTrustedIdProviderResource
    {
        // Gets the specified Data Lake Store trusted identity provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSpecifiedDataLakeStoreTrustedIdentityProvider()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Get.json
            // this example is just showing the usage of "TrustedIdProviders_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreTrustedIdProviderResource created on azure
            // for more information of creating DataLakeStoreTrustedIdProviderResource, please refer to the document of DataLakeStoreTrustedIdProviderResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string trustedIdProviderName = "test_trusted_id_provider_name";
            ResourceIdentifier dataLakeStoreTrustedIdProviderResourceId = DataLakeStoreTrustedIdProviderResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, trustedIdProviderName);
            DataLakeStoreTrustedIdProviderResource dataLakeStoreTrustedIdProvider = client.GetDataLakeStoreTrustedIdProviderResource(dataLakeStoreTrustedIdProviderResourceId);

            // invoke the operation
            DataLakeStoreTrustedIdProviderResource result = await dataLakeStoreTrustedIdProvider.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreTrustedIdProviderData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Updates the specified trusted identity provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdatesTheSpecifiedTrustedIdentityProvider()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Update.json
            // this example is just showing the usage of "TrustedIdProviders_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreTrustedIdProviderResource created on azure
            // for more information of creating DataLakeStoreTrustedIdProviderResource, please refer to the document of DataLakeStoreTrustedIdProviderResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string trustedIdProviderName = "test_trusted_id_provider_name";
            ResourceIdentifier dataLakeStoreTrustedIdProviderResourceId = DataLakeStoreTrustedIdProviderResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, trustedIdProviderName);
            DataLakeStoreTrustedIdProviderResource dataLakeStoreTrustedIdProvider = client.GetDataLakeStoreTrustedIdProviderResource(dataLakeStoreTrustedIdProviderResourceId);

            // invoke the operation
            DataLakeStoreTrustedIdProviderPatch patch = new DataLakeStoreTrustedIdProviderPatch()
            {
                IdProvider = new Uri("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1"),
            };
            DataLakeStoreTrustedIdProviderResource result = await dataLakeStoreTrustedIdProvider.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreTrustedIdProviderData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deletes the specified trusted identity provider from the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeletesTheSpecifiedTrustedIdentityProviderFromTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Delete.json
            // this example is just showing the usage of "TrustedIdProviders_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreTrustedIdProviderResource created on azure
            // for more information of creating DataLakeStoreTrustedIdProviderResource, please refer to the document of DataLakeStoreTrustedIdProviderResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string trustedIdProviderName = "test_trusted_id_provider_name";
            ResourceIdentifier dataLakeStoreTrustedIdProviderResourceId = DataLakeStoreTrustedIdProviderResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, trustedIdProviderName);
            DataLakeStoreTrustedIdProviderResource dataLakeStoreTrustedIdProvider = client.GetDataLakeStoreTrustedIdProviderResource(dataLakeStoreTrustedIdProviderResourceId);

            // invoke the operation
            await dataLakeStoreTrustedIdProvider.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
