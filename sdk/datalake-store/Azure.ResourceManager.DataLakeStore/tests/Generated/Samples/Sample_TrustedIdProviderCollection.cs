// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataLakeStore.Models;

namespace Azure.ResourceManager.DataLakeStore
{
    public partial class Sample_TrustedIdProviderCollection
    {
        // Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListsTheDataLakeStoreTrustedIdentityProvidersWithinTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_ListByAccount.json
            // this example is just showing the usage of "TrustedIdProviders_ListByAccount" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // get the collection of this TrustedIdProviderResource
            TrustedIdProviderCollection collection = dataLakeStoreAccount.GetTrustedIdProviders();

            // invoke the operation and iterate over the result
            await foreach (TrustedIdProviderResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                TrustedIdProviderData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesOrUpdatesTheSpecifiedTrustedIdentityProviderDuringUpdateTheTrustedIdentityProviderWithTheSpecifiedNameWillBeReplacedWithThisNewProvider()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_CreateOrUpdate.json
            // this example is just showing the usage of "TrustedIdProviders_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // get the collection of this TrustedIdProviderResource
            TrustedIdProviderCollection collection = dataLakeStoreAccount.GetTrustedIdProviders();

            // invoke the operation
            string trustedIdProviderName = "test_trusted_id_provider_name";
            TrustedIdProviderCreateOrUpdateContent content = new TrustedIdProviderCreateOrUpdateContent("https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1");
            ArmOperation<TrustedIdProviderResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, trustedIdProviderName, content);
            TrustedIdProviderResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrustedIdProviderData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the specified Data Lake Store trusted identity provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSpecifiedDataLakeStoreTrustedIdentityProvider()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Get.json
            // this example is just showing the usage of "TrustedIdProviders_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // get the collection of this TrustedIdProviderResource
            TrustedIdProviderCollection collection = dataLakeStoreAccount.GetTrustedIdProviders();

            // invoke the operation
            string trustedIdProviderName = "test_trusted_id_provider_name";
            TrustedIdProviderResource result = await collection.GetAsync(trustedIdProviderName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrustedIdProviderData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the specified Data Lake Store trusted identity provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetsTheSpecifiedDataLakeStoreTrustedIdentityProvider()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/TrustedIdProviders_Get.json
            // this example is just showing the usage of "TrustedIdProviders_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // get the collection of this TrustedIdProviderResource
            TrustedIdProviderCollection collection = dataLakeStoreAccount.GetTrustedIdProviders();

            // invoke the operation
            string trustedIdProviderName = "test_trusted_id_provider_name";
            bool result = await collection.ExistsAsync(trustedIdProviderName);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
