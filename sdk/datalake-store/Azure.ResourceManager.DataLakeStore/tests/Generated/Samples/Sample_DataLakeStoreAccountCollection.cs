// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataLakeStore.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataLakeStore
{
    public partial class Sample_DataLakeStoreAccountCollection
    {
        // Lists the Data Lake Store accounts within a specific resource group
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListsTheDataLakeStoreAccountsWithinASpecificResourceGroup()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_ListByResourceGroup.json
            // this example is just showing the usage of "Accounts_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this DataLakeStoreAccountResource
            DataLakeStoreAccountCollection collection = resourceGroupResource.GetDataLakeStoreAccounts();

            // invoke the operation and iterate over the result
            string filter = "test_filter";
            int? top = 1;
            int? skip = 1;
            string select = "test_select";
            string orderby = "test_orderby";
            bool? count = false;
            await foreach (DataLakeStoreAccountBasic item in collection.GetAllAsync(filter: filter, top: top, skip: skip, select: select, orderby: orderby, count: count))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Creates the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreatesTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Create.json
            // this example is just showing the usage of "Accounts_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this DataLakeStoreAccountResource
            DataLakeStoreAccountCollection collection = resourceGroupResource.GetDataLakeStoreAccounts();

            // invoke the operation
            string accountName = "contosoadla";
            DataLakeStoreAccountCreateOrUpdateContent content = new DataLakeStoreAccountCreateOrUpdateContent(new AzureLocation("eastus2"))
            {
                Tags =
{
["test_key"] = "test_value",
},
                Identity = new ManagedServiceIdentity("SystemAssigned"),
                DefaultGroup = "test_default_group",
                EncryptionConfig = new EncryptionConfig(EncryptionConfigType.UserManaged)
                {
                    KeyVaultMetaInfo = new KeyVaultMetaInfo("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", "test_encryption_key_name", "encryption_key_version"),
                },
                EncryptionState = EncryptionState.Enabled,
                FirewallRules =
{
new CreateFirewallRuleWithAccountParameters("test_rule","1.1.1.1","2.2.2.2")
},
                FirewallState = FirewallState.Enabled,
                FirewallAllowAzureIPs = FirewallAllowAzureIPsState.Enabled,
                TrustedIdProviders =
{
new CreateTrustedIdProviderWithAccountParameters("test_trusted_id_provider_name","https://sts.windows.net/ea9ec534-a3e3-4e45-ad36-3afc5bb291c1")
},
                TrustedIdProviderState = TrustedIdProviderState.Enabled,
                NewTier = TierType.Consumption,
            };
            ArmOperation<DataLakeStoreAccountResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, accountName, content);
            DataLakeStoreAccountResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreAccountData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Get.json
            // this example is just showing the usage of "Accounts_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this DataLakeStoreAccountResource
            DataLakeStoreAccountCollection collection = resourceGroupResource.GetDataLakeStoreAccounts();

            // invoke the operation
            string accountName = "contosoadla";
            DataLakeStoreAccountResource result = await collection.GetAsync(accountName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreAccountData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetsTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Get.json
            // this example is just showing the usage of "Accounts_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this DataLakeStoreAccountResource
            DataLakeStoreAccountCollection collection = resourceGroupResource.GetDataLakeStoreAccounts();

            // invoke the operation
            string accountName = "contosoadla";
            bool result = await collection.ExistsAsync(accountName);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
