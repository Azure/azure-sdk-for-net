// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataLakeStore.Models;

namespace Azure.ResourceManager.DataLakeStore
{
    public partial class Sample_DataLakeStoreFirewallRuleResource
    {
        // Gets the specified Data Lake Store firewall rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSpecifiedDataLakeStoreFirewallRule()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Get.json
            // this example is just showing the usage of "FirewallRules_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreFirewallRuleResource created on azure
            // for more information of creating DataLakeStoreFirewallRuleResource, please refer to the document of DataLakeStoreFirewallRuleResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string firewallRuleName = "test_rule";
            ResourceIdentifier dataLakeStoreFirewallRuleResourceId = DataLakeStoreFirewallRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, firewallRuleName);
            DataLakeStoreFirewallRuleResource dataLakeStoreFirewallRule = client.GetDataLakeStoreFirewallRuleResource(dataLakeStoreFirewallRuleResourceId);

            // invoke the operation
            DataLakeStoreFirewallRuleResource result = await dataLakeStoreFirewallRule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreFirewallRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Updates the specified firewall rule.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdatesTheSpecifiedFirewallRule()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Update.json
            // this example is just showing the usage of "FirewallRules_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreFirewallRuleResource created on azure
            // for more information of creating DataLakeStoreFirewallRuleResource, please refer to the document of DataLakeStoreFirewallRuleResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string firewallRuleName = "test_rule";
            ResourceIdentifier dataLakeStoreFirewallRuleResourceId = DataLakeStoreFirewallRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, firewallRuleName);
            DataLakeStoreFirewallRuleResource dataLakeStoreFirewallRule = client.GetDataLakeStoreFirewallRuleResource(dataLakeStoreFirewallRuleResourceId);

            // invoke the operation
            DataLakeStoreFirewallRulePatch patch = new DataLakeStoreFirewallRulePatch()
            {
                StartIPAddress = "1.1.1.1",
                EndIPAddress = "2.2.2.2",
            };
            DataLakeStoreFirewallRuleResource result = await dataLakeStoreFirewallRule.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreFirewallRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deletes the specified firewall rule from the specified Data Lake Store account.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeletesTheSpecifiedFirewallRuleFromTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/FirewallRules_Delete.json
            // this example is just showing the usage of "FirewallRules_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreFirewallRuleResource created on azure
            // for more information of creating DataLakeStoreFirewallRuleResource, please refer to the document of DataLakeStoreFirewallRuleResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            string firewallRuleName = "test_rule";
            ResourceIdentifier dataLakeStoreFirewallRuleResourceId = DataLakeStoreFirewallRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName, firewallRuleName);
            DataLakeStoreFirewallRuleResource dataLakeStoreFirewallRule = client.GetDataLakeStoreFirewallRuleResource(dataLakeStoreFirewallRuleResourceId);

            // invoke the operation
            await dataLakeStoreFirewallRule.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
