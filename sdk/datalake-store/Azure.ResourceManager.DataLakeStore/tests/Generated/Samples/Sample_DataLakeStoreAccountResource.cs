// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.DataLakeStore.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataLakeStore
{
    public partial class Sample_DataLakeStoreAccountResource
    {
        // Lists the Data Lake Store accounts within the subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAccounts_ListsTheDataLakeStoreAccountsWithinTheSubscription()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_List.json
            // this example is just showing the usage of "Accounts_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            string filter = "test_filter";
            int? top = 1;
            int? skip = 1;
            string select = "test_select";
            string orderby = "test_orderby";
            bool? count = false;
            await foreach (DataLakeStoreAccountBasic item in subscriptionResource.GetAccountsAsync(filter: filter, top: top, skip: skip, select: select, orderby: orderby, count: count))
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Gets the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Get.json
            // this example is just showing the usage of "Accounts_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // invoke the operation
            DataLakeStoreAccountResource result = await dataLakeStoreAccount.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreAccountData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Updates the specified Data Lake Store account information
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdatesTheSpecifiedDataLakeStoreAccountInformation()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Update.json
            // this example is just showing the usage of "Accounts_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // invoke the operation
            DataLakeStoreAccountPatch patch = new DataLakeStoreAccountPatch()
            {
                Tags =
{
["test_key"] = "test_value",
},
                DefaultGroup = "test_default_group",
                EncryptionKeyVersion = "encryption_key_version",
                FirewallState = FirewallState.Enabled,
                FirewallAllowAzureIPs = FirewallAllowAzureIPsState.Enabled,
                TrustedIdProviderState = TrustedIdProviderState.Enabled,
                NewTier = TierType.Consumption,
            };
            ArmOperation<DataLakeStoreAccountResource> lro = await dataLakeStoreAccount.UpdateAsync(WaitUntil.Completed, patch);
            DataLakeStoreAccountResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataLakeStoreAccountData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deletes the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeletesTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_Delete.json
            // this example is just showing the usage of "Accounts_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // invoke the operation
            await dataLakeStoreAccount.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task EnableKeyVault_AttemptsToEnableAUserManagedKeyVaultForEncryptionOfTheSpecifiedDataLakeStoreAccount()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_EnableKeyVault.json
            // this example is just showing the usage of "Accounts_EnableKeyVault" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataLakeStoreAccountResource created on azure
            // for more information of creating DataLakeStoreAccountResource, please refer to the document of DataLakeStoreAccountResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "contosorg";
            string accountName = "contosoadla";
            ResourceIdentifier dataLakeStoreAccountResourceId = DataLakeStoreAccountResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accountName);
            DataLakeStoreAccountResource dataLakeStoreAccount = client.GetDataLakeStoreAccountResource(dataLakeStoreAccountResourceId);

            // invoke the operation
            await dataLakeStoreAccount.EnableKeyVaultAsync();

            Console.WriteLine($"Succeeded");
        }

        // Checks whether the specified account name is available or taken
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckNameAvailabilityAccount_ChecksWhetherTheSpecifiedAccountNameIsAvailableOrTaken()
        {
            // Generated from example definition: specification/datalake-store/resource-manager/Microsoft.DataLakeStore/stable/2016-11-01/examples/Accounts_CheckNameAvailability.json
            // this example is just showing the usage of "Accounts_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation
            AzureLocation location = new AzureLocation("EastUS2");
            CheckNameAvailabilityContent content = new CheckNameAvailabilityContent("contosoadla", CheckNameAvailabilityParametersType.MicrosoftDataLakeStoreAccounts);
            NameAvailabilityInformation result = await subscriptionResource.CheckNameAvailabilityAccountAsync(location, content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
