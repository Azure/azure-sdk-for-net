// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Iot.Hub.Service.Models
{
    public partial class ConfigurationContent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(DeviceContent))
            {
                writer.WritePropertyName("deviceContent");
                writer.WriteStartObject();
                foreach (var item in DeviceContent)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(ModulesContent))
            {
                writer.WritePropertyName("modulesContent");
                writer.WriteStartObject();
                foreach (var item in ModulesContent)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStartObject();
                    foreach (var item0 in item.Value)
                    {
                        writer.WritePropertyName(item0.Key);
                        writer.WriteObjectValue(item0.Value);
                    }
                    writer.WriteEndObject();
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(ModuleContent))
            {
                writer.WritePropertyName("moduleContent");
                writer.WriteStartObject();
                foreach (var item in ModuleContent)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static ConfigurationContent DeserializeConfigurationContent(JsonElement element)
        {
            Optional<IDictionary<string, object>> deviceContent = default;
            Optional<IDictionary<string, IDictionary<string, object>>> modulesContent = default;
            Optional<IDictionary<string, object>> moduleContent = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceContent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    deviceContent = dictionary;
                    continue;
                }
                if (property.NameEquals("modulesContent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, IDictionary<string, object>> dictionary = new Dictionary<string, IDictionary<string, object>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        Dictionary<string, object> dictionary0 = new Dictionary<string, object>();
                        foreach (var property1 in property0.Value.EnumerateObject())
                        {
                            dictionary0.Add(property1.Name, property1.Value.GetObject());
                        }
                        dictionary.Add(property0.Name, dictionary0);
                    }
                    modulesContent = dictionary;
                    continue;
                }
                if (property.NameEquals("moduleContent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    moduleContent = dictionary;
                    continue;
                }
            }
            return new ConfigurationContent(Optional.ToDictionary(deviceContent), Optional.ToDictionary(modulesContent), Optional.ToDictionary(moduleContent));
        }
    }
}
