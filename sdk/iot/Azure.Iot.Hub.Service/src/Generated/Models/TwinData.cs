// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Iot.Hub.Service.Models
{
    /// <summary> Twin Representation. </summary>
    public partial class TwinData
    {
        /// <summary> Initializes a new instance of TwinData. </summary>
        public TwinData()
        {
        }

        /// <summary> Initializes a new instance of TwinData. </summary>
        /// <param name="deviceId"> The deviceId uniquely identifies the device in the IoT hub&apos;s identity registry. A case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars + {&apos;-&apos;, &apos;:&apos;, &apos;.&apos;, &apos;+&apos;, &apos;%&apos;, &apos;_&apos;, &apos;#&apos;, &apos;*&apos;, &apos;?&apos;, &apos;!&apos;, &apos;(&apos;, &apos;)&apos;, &apos;,&apos;, &apos;=&apos;, &apos;@&apos;, &apos;;&apos;, &apos;$&apos;, &apos;&apos;&apos;}. </param>
        /// <param name="moduleId"> Gets and sets the Module Id. </param>
        /// <param name="tags"> A JSON document read and written by the solution back end. Tags are not visible to device apps. </param>
        /// <param name="properties"> Gets and sets the Twin properties. </param>
        /// <param name="etag"> Twin&apos;s ETag. </param>
        /// <param name="version"> Version for device twin, including tags and desired properties. </param>
        /// <param name="deviceEtag"> Device&apos;s ETag. </param>
        /// <param name="status"> Gets the corresponding Device&apos;s Status. </param>
        /// <param name="statusReason"> Reason, if any, for the corresponding Device to be in specified Status. </param>
        /// <param name="statusUpdateTime"> Time when the corresponding Device&apos;s Status was last updated. </param>
        /// <param name="connectionState"> Corresponding Device&apos;s ConnectionState. </param>
        /// <param name="lastActivityTime"> The last time the device connected, received or sent a message. In ISO8601 datetime format in UTC, for example, 2015-01-28T16:24:48.789Z. This does not update if the device uses the HTTP/1 protocol to perform messaging operations. </param>
        /// <param name="cloudToDeviceMessageCount"> Number of messages sent to the corresponding Device from the Cloud. </param>
        /// <param name="authenticationType"> Corresponding Device&apos;s authentication type. </param>
        /// <param name="x509Thumbprint"> Corresponding Device&apos;s X509 thumbprint. </param>
        /// <param name="capabilities"> Status of Capabilities enabled on the device. </param>
        /// <param name="deviceScope"> . </param>
        /// <param name="parentScopes"> . </param>
        internal TwinData(string deviceId, string moduleId, IDictionary<string, object> tags, TwinProperties properties, string etag, long? version, string deviceEtag, TwinStatus? status, string statusReason, DateTimeOffset? statusUpdateTime, TwinConnectionState? connectionState, DateTimeOffset? lastActivityTime, int? cloudToDeviceMessageCount, TwinAuthenticationType? authenticationType, X509Thumbprint x509Thumbprint, DeviceCapabilities capabilities, string deviceScope, IList<string> parentScopes)
        {
            DeviceId = deviceId;
            ModuleId = moduleId;
            Tags = tags;
            Properties = properties;
            Etag = etag;
            Version = version;
            DeviceEtag = deviceEtag;
            Status = status;
            StatusReason = statusReason;
            StatusUpdateTime = statusUpdateTime;
            ConnectionState = connectionState;
            LastActivityTime = lastActivityTime;
            CloudToDeviceMessageCount = cloudToDeviceMessageCount;
            AuthenticationType = authenticationType;
            X509Thumbprint = x509Thumbprint;
            Capabilities = capabilities;
            DeviceScope = deviceScope;
            ParentScopes = parentScopes;
        }

        /// <summary> The deviceId uniquely identifies the device in the IoT hub&apos;s identity registry. A case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars + {&apos;-&apos;, &apos;:&apos;, &apos;.&apos;, &apos;+&apos;, &apos;%&apos;, &apos;_&apos;, &apos;#&apos;, &apos;*&apos;, &apos;?&apos;, &apos;!&apos;, &apos;(&apos;, &apos;)&apos;, &apos;,&apos;, &apos;=&apos;, &apos;@&apos;, &apos;;&apos;, &apos;$&apos;, &apos;&apos;&apos;}. </summary>
        public string DeviceId { get; set; }
        /// <summary> Gets and sets the Module Id. </summary>
        public string ModuleId { get; set; }
        /// <summary> A JSON document read and written by the solution back end. Tags are not visible to device apps. </summary>
        public IDictionary<string, object> Tags { get; set; }
        /// <summary> Gets and sets the Twin properties. </summary>
        public TwinProperties Properties { get; set; }
        /// <summary> Twin&apos;s ETag. </summary>
        public string Etag { get; set; }
        /// <summary> Version for device twin, including tags and desired properties. </summary>
        public long? Version { get; set; }
        /// <summary> Device&apos;s ETag. </summary>
        public string DeviceEtag { get; set; }
        /// <summary> Gets the corresponding Device&apos;s Status. </summary>
        public TwinStatus? Status { get; set; }
        /// <summary> Reason, if any, for the corresponding Device to be in specified Status. </summary>
        public string StatusReason { get; set; }
        /// <summary> Time when the corresponding Device&apos;s Status was last updated. </summary>
        public DateTimeOffset? StatusUpdateTime { get; set; }
        /// <summary> Corresponding Device&apos;s ConnectionState. </summary>
        public TwinConnectionState? ConnectionState { get; set; }
        /// <summary> The last time the device connected, received or sent a message. In ISO8601 datetime format in UTC, for example, 2015-01-28T16:24:48.789Z. This does not update if the device uses the HTTP/1 protocol to perform messaging operations. </summary>
        public DateTimeOffset? LastActivityTime { get; set; }
        /// <summary> Number of messages sent to the corresponding Device from the Cloud. </summary>
        public int? CloudToDeviceMessageCount { get; set; }
        /// <summary> Corresponding Device&apos;s authentication type. </summary>
        public TwinAuthenticationType? AuthenticationType { get; set; }
        /// <summary> Corresponding Device&apos;s X509 thumbprint. </summary>
        public X509Thumbprint X509Thumbprint { get; set; }
        /// <summary> Status of Capabilities enabled on the device. </summary>
        public DeviceCapabilities Capabilities { get; set; }
        public string DeviceScope { get; set; }
        public IList<string> ParentScopes { get; set; }
    }
}
