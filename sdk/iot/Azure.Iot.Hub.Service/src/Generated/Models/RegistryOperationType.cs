// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Iot.Hub.Service.Models
{
    /// <summary> The type of registry operation and if ETag should be ignored or not. </summary>
    public readonly partial struct RegistryOperationType : IEquatable<RegistryOperationType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RegistryOperationType"/> values are the same. </summary>
        public RegistryOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreateValue = "create";
        private const string UpdateValue = "update";
        private const string UpdateIfMatchETagValue = "updateIfMatchETag";
        private const string DeleteValue = "delete";
        private const string DeleteIfMatchETagValue = "deleteIfMatchETag";
        private const string UpdateTwinValue = "updateTwin";
        private const string UpdateTwinIfMatchETagValue = "updateTwinIfMatchETag";

        /// <summary> create. </summary>
        public static RegistryOperationType Create { get; } = new RegistryOperationType(CreateValue);
        /// <summary> update. </summary>
        public static RegistryOperationType Update { get; } = new RegistryOperationType(UpdateValue);
        /// <summary> updateIfMatchETag. </summary>
        public static RegistryOperationType UpdateIfMatchETag { get; } = new RegistryOperationType(UpdateIfMatchETagValue);
        /// <summary> delete. </summary>
        public static RegistryOperationType Delete { get; } = new RegistryOperationType(DeleteValue);
        /// <summary> deleteIfMatchETag. </summary>
        public static RegistryOperationType DeleteIfMatchETag { get; } = new RegistryOperationType(DeleteIfMatchETagValue);
        /// <summary> updateTwin. </summary>
        public static RegistryOperationType UpdateTwin { get; } = new RegistryOperationType(UpdateTwinValue);
        /// <summary> updateTwinIfMatchETag. </summary>
        public static RegistryOperationType UpdateTwinIfMatchETag { get; } = new RegistryOperationType(UpdateTwinIfMatchETagValue);
        /// <summary> Determines if two <see cref="RegistryOperationType"/> values are the same. </summary>
        public static bool operator ==(RegistryOperationType left, RegistryOperationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RegistryOperationType"/> values are not the same. </summary>
        public static bool operator !=(RegistryOperationType left, RegistryOperationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RegistryOperationType"/>. </summary>
        public static implicit operator RegistryOperationType(string value) => new RegistryOperationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RegistryOperationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RegistryOperationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
