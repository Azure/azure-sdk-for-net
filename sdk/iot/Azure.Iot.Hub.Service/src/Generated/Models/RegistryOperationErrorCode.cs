// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Iot.Hub.Service.Models
{
    /// <summary> ErrorCode associated with the error. </summary>
    public readonly partial struct RegistryOperationErrorCode : IEquatable<RegistryOperationErrorCode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="RegistryOperationErrorCode"/> values are the same. </summary>
        public RegistryOperationErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidErrorCodeValue = "InvalidErrorCode";
        private const string GenericBadRequestValue = "GenericBadRequest";
        private const string InvalidProtocolVersionValue = "InvalidProtocolVersion";
        private const string DeviceInvalidResultCountValue = "DeviceInvalidResultCount";
        private const string InvalidOperationValue = "InvalidOperation";
        private const string ArgumentInvalidValue = "ArgumentInvalid";
        private const string ArgumentNullValue = "ArgumentNull";
        private const string IotHubFormatErrorValue = "IotHubFormatError";
        private const string DeviceStorageEntitySerializationErrorValue = "DeviceStorageEntitySerializationError";
        private const string BlobContainerValidationErrorValue = "BlobContainerValidationError";
        private const string ImportWarningExistsErrorValue = "ImportWarningExistsError";
        private const string InvalidSchemaVersionValue = "InvalidSchemaVersion";
        private const string DeviceDefinedMultipleTimesValue = "DeviceDefinedMultipleTimes";
        private const string DeserializationErrorValue = "DeserializationError";
        private const string BulkRegistryOperationFailureValue = "BulkRegistryOperationFailure";
        private const string DefaultStorageEndpointNotConfiguredValue = "DefaultStorageEndpointNotConfigured";
        private const string InvalidFileUploadCorrelationIdValue = "InvalidFileUploadCorrelationId";
        private const string ExpiredFileUploadCorrelationIdValue = "ExpiredFileUploadCorrelationId";
        private const string InvalidStorageEndpointValue = "InvalidStorageEndpoint";
        private const string InvalidMessagingEndpointValue = "InvalidMessagingEndpoint";
        private const string InvalidFileUploadCompletionStatusValue = "InvalidFileUploadCompletionStatus";
        private const string InvalidStorageEndpointOrBlobValue = "InvalidStorageEndpointOrBlob";
        private const string RequestCanceledValue = "RequestCanceled";
        private const string InvalidStorageEndpointPropertyValue = "InvalidStorageEndpointProperty";
        private const string EtagDoesNotMatchValue = "EtagDoesNotMatch";
        private const string RequestTimedOutValue = "RequestTimedOut";
        private const string UnsupportedOperationOnReplicaValue = "UnsupportedOperationOnReplica";
        private const string NullMessageValue = "NullMessage";
        private const string ConnectionForcefullyClosedOnNewConnectionValue = "ConnectionForcefullyClosedOnNewConnection";
        private const string InvalidDeviceScopeValue = "InvalidDeviceScope";
        private const string ConnectionForcefullyClosedOnFaultInjectionValue = "ConnectionForcefullyClosedOnFaultInjection";
        private const string ConnectionRejectedOnFaultInjectionValue = "ConnectionRejectedOnFaultInjection";
        private const string InvalidEndpointAuthenticationTypeValue = "InvalidEndpointAuthenticationType";
        private const string ManagedIdentityNotEnabledValue = "ManagedIdentityNotEnabled";
        private const string InvalidRouteTestInputValue = "InvalidRouteTestInput";
        private const string InvalidSourceOnRouteValue = "InvalidSourceOnRoute";
        private const string RoutingNotEnabledValue = "RoutingNotEnabled";
        private const string InvalidContentEncodingOrTypeValue = "InvalidContentEncodingOrType";
        private const string InvalidEndorsementKeyValue = "InvalidEndorsementKey";
        private const string InvalidRegistrationIdValue = "InvalidRegistrationId";
        private const string InvalidStorageRootKeyValue = "InvalidStorageRootKey";
        private const string InvalidEnrollmentGroupIdValue = "InvalidEnrollmentGroupId";
        private const string TooManyEnrollmentsValue = "TooManyEnrollments";
        private const string RegistrationIdDefinedMultipleTimesValue = "RegistrationIdDefinedMultipleTimes";
        private const string CustomAllocationFailedValue = "CustomAllocationFailed";
        private const string CustomAllocationIotHubNotSpecifiedValue = "CustomAllocationIotHubNotSpecified";
        private const string CustomAllocationUnauthorizedAccessValue = "CustomAllocationUnauthorizedAccess";
        private const string CannotRegisterModuleToModuleValue = "CannotRegisterModuleToModule";
        private const string TenantHubRoutingNotEnabledValue = "TenantHubRoutingNotEnabled";
        private const string InvalidConfigurationTargetConditionValue = "InvalidConfigurationTargetCondition";
        private const string InvalidConfigurationContentValue = "InvalidConfigurationContent";
        private const string CannotModifyImmutableConfigurationContentValue = "CannotModifyImmutableConfigurationContent";
        private const string InvalidConfigurationCustomMetricsQueryValue = "InvalidConfigurationCustomMetricsQuery";
        private const string InvalidPnPInterfaceDefinitionValue = "InvalidPnPInterfaceDefinition";
        private const string InvalidPnPDesiredPropertiesValue = "InvalidPnPDesiredProperties";
        private const string InvalidPnPReportedPropertiesValue = "InvalidPnPReportedProperties";
        private const string InvalidPnPWritableReportedPropertiesValue = "InvalidPnPWritableReportedProperties";
        private const string InvalidDigitalTwinJsonPatchValue = "InvalidDigitalTwinJsonPatch";
        private const string InvalidDigitalTwinPayloadValue = "InvalidDigitalTwinPayload";
        private const string InvalidDigitalTwinPatchValue = "InvalidDigitalTwinPatch";
        private const string InvalidDigitalTwinPatchPathValue = "InvalidDigitalTwinPatchPath";
        private const string GenericUnauthorizedValue = "GenericUnauthorized";
        private const string IotHubNotFoundValue = "IotHubNotFound";
        private const string IotHubUnauthorizedAccessValue = "IotHubUnauthorizedAccess";
        private const string IotHubUnauthorizedValue = "IotHubUnauthorized";
        private const string ElasticPoolNotFoundValue = "ElasticPoolNotFound";
        private const string SystemModuleModifyUnauthorizedAccessValue = "SystemModuleModifyUnauthorizedAccess";
        private const string GenericForbiddenValue = "GenericForbidden";
        private const string IotHubSuspendedValue = "IotHubSuspended";
        private const string IotHubQuotaExceededValue = "IotHubQuotaExceeded";
        private const string JobQuotaExceededValue = "JobQuotaExceeded";
        private const string DeviceMaximumQueueDepthExceededValue = "DeviceMaximumQueueDepthExceeded";
        private const string IotHubMaxCbsTokenExceededValue = "IotHubMaxCbsTokenExceeded";
        private const string DeviceMaximumActiveFileUploadLimitExceededValue = "DeviceMaximumActiveFileUploadLimitExceeded";
        private const string DeviceMaximumQueueSizeExceededValue = "DeviceMaximumQueueSizeExceeded";
        private const string RoutingEndpointResponseForbiddenValue = "RoutingEndpointResponseForbidden";
        private const string InvalidMessageExpiryTimeValue = "InvalidMessageExpiryTime";
        private const string OperationNotAvailableInCurrentTierValue = "OperationNotAvailableInCurrentTier";
        private const string KeyEncryptionKeyRevokedValue = "KeyEncryptionKeyRevoked";
        private const string DeviceModelMaxPropertiesExceededValue = "DeviceModelMaxPropertiesExceeded";
        private const string DeviceModelMaxIndexablePropertiesExceededValue = "DeviceModelMaxIndexablePropertiesExceeded";
        private const string IotDpsSuspendedValue = "IotDpsSuspended";
        private const string IotDpsSuspendingValue = "IotDpsSuspending";
        private const string GenericNotFoundValue = "GenericNotFound";
        private const string DeviceNotFoundValue = "DeviceNotFound";
        private const string JobNotFoundValue = "JobNotFound";
        private const string QuotaMetricNotFoundValue = "QuotaMetricNotFound";
        private const string SystemPropertyNotFoundValue = "SystemPropertyNotFound";
        private const string AmqpAddressNotFoundValue = "AmqpAddressNotFound";
        private const string RoutingEndpointResponseNotFoundValue = "RoutingEndpointResponseNotFound";
        private const string CertificateNotFoundValue = "CertificateNotFound";
        private const string ElasticPoolTenantHubNotFoundValue = "ElasticPoolTenantHubNotFound";
        private const string ModuleNotFoundValue = "ModuleNotFound";
        private const string AzureTableStoreNotFoundValue = "AzureTableStoreNotFound";
        private const string IotHubFailingOverValue = "IotHubFailingOver";
        private const string FeatureNotSupportedValue = "FeatureNotSupported";
        private const string DigitalTwinInterfaceNotFoundValue = "DigitalTwinInterfaceNotFound";
        private const string QueryStoreClusterNotFoundValue = "QueryStoreClusterNotFound";
        private const string DeviceNotOnlineValue = "DeviceNotOnline";
        private const string DeviceConnectionClosedRemotelyValue = "DeviceConnectionClosedRemotely";
        private const string EnrollmentNotFoundValue = "EnrollmentNotFound";
        private const string DeviceRegistrationNotFoundValue = "DeviceRegistrationNotFound";
        private const string AsyncOperationNotFoundValue = "AsyncOperationNotFound";
        private const string EnrollmentGroupNotFoundValue = "EnrollmentGroupNotFound";
        private const string DeviceRecordNotFoundValue = "DeviceRecordNotFound";
        private const string GroupRecordNotFoundValue = "GroupRecordNotFound";
        private const string DeviceGroupNotFoundValue = "DeviceGroupNotFound";
        private const string ProvisioningSettingsNotFoundValue = "ProvisioningSettingsNotFound";
        private const string ProvisioningRecordNotFoundValue = "ProvisioningRecordNotFound";
        private const string LinkedHubNotFoundValue = "LinkedHubNotFound";
        private const string CertificateAuthorityNotFoundValue = "CertificateAuthorityNotFound";
        private const string ConfigurationNotFoundValue = "ConfigurationNotFound";
        private const string GroupNotFoundValue = "GroupNotFound";
        private const string DigitalTwinModelNotFoundValue = "DigitalTwinModelNotFound";
        private const string InterfaceNameModelNotFoundValue = "InterfaceNameModelNotFound";
        private const string GenericMethodNotAllowedValue = "GenericMethodNotAllowed";
        private const string OperationNotAllowedInCurrentStateValue = "OperationNotAllowedInCurrentState";
        private const string ImportDevicesNotSupportedValue = "ImportDevicesNotSupported";
        private const string BulkAddDevicesNotSupportedValue = "BulkAddDevicesNotSupported";
        private const string GenericConflictValue = "GenericConflict";
        private const string DeviceAlreadyExistsValue = "DeviceAlreadyExists";
        private const string LinkCreationConflictValue = "LinkCreationConflict";
        private const string CallbackSubscriptionConflictValue = "CallbackSubscriptionConflict";
        private const string ModelAlreadyExistsValue = "ModelAlreadyExists";
        private const string DeviceLockedValue = "DeviceLocked";
        private const string DeviceJobAlreadyExistsValue = "DeviceJobAlreadyExists";
        private const string JobAlreadyExistsValue = "JobAlreadyExists";
        private const string EnrollmentConflictValue = "EnrollmentConflict";
        private const string EnrollmentGroupConflictValue = "EnrollmentGroupConflict";
        private const string RegistrationStatusConflictValue = "RegistrationStatusConflict";
        private const string DeviceRecordConflictValue = "DeviceRecordConflict";
        private const string GroupRecordConflictValue = "GroupRecordConflict";
        private const string DeviceGroupConflictValue = "DeviceGroupConflict";
        private const string ProvisioningSettingsConflictValue = "ProvisioningSettingsConflict";
        private const string ProvisioningRecordConflictValue = "ProvisioningRecordConflict";
        private const string LinkedHubConflictValue = "LinkedHubConflict";
        private const string CertificateAuthorityConflictValue = "CertificateAuthorityConflict";
        private const string ModuleAlreadyExistsOnDeviceValue = "ModuleAlreadyExistsOnDevice";
        private const string ConfigurationAlreadyExistsValue = "ConfigurationAlreadyExists";
        private const string ApplyConfigurationAlreadyInProgressOnDeviceValue = "ApplyConfigurationAlreadyInProgressOnDevice";
        private const string DigitalTwinModelAlreadyExistsValue = "DigitalTwinModelAlreadyExists";
        private const string DigitalTwinModelExistsWithOtherModelTypeValue = "DigitalTwinModelExistsWithOtherModelType";
        private const string InterfaceNameModelAlreadyExistsValue = "InterfaceNameModelAlreadyExists";
        private const string GenericPreconditionFailedValue = "GenericPreconditionFailed";
        private const string PreconditionFailedValue = "PreconditionFailed";
        private const string DeviceMessageLockLostValue = "DeviceMessageLockLost";
        private const string JobRunPreconditionFailedValue = "JobRunPreconditionFailed";
        private const string InflightMessagesInLinkValue = "InflightMessagesInLink";
        private const string GenericRequestEntityTooLargeValue = "GenericRequestEntityTooLarge";
        private const string MessageTooLargeValue = "MessageTooLarge";
        private const string TooManyDevicesValue = "TooManyDevices";
        private const string TooManyModulesOnDeviceValue = "TooManyModulesOnDevice";
        private const string ConfigurationCountLimitExceededValue = "ConfigurationCountLimitExceeded";
        private const string DigitalTwinModelCountLimitExceededValue = "DigitalTwinModelCountLimitExceeded";
        private const string InterfaceNameCompressionModelCountLimitExceededValue = "InterfaceNameCompressionModelCountLimitExceeded";
        private const string GenericUnsupportedMediaTypeValue = "GenericUnsupportedMediaType";
        private const string IncompatibleDataTypeValue = "IncompatibleDataType";
        private const string GenericTooManyRequestsValue = "GenericTooManyRequests";
        private const string ThrottlingExceptionValue = "ThrottlingException";
        private const string ThrottleBacklogLimitExceededValue = "ThrottleBacklogLimitExceeded";
        private const string ThrottlingBacklogTimeoutValue = "ThrottlingBacklogTimeout";
        private const string ThrottlingMaxActiveJobCountExceededValue = "ThrottlingMaxActiveJobCountExceeded";
        private const string DeviceThrottlingLimitExceededValue = "DeviceThrottlingLimitExceeded";
        private const string ClientClosedRequestValue = "ClientClosedRequest";
        private const string GenericServerErrorValue = "GenericServerError";
        private const string ServerErrorValue = "ServerError";
        private const string JobCancelledValue = "JobCancelled";
        private const string StatisticsRetrievalErrorValue = "StatisticsRetrievalError";
        private const string ConnectionForcefullyClosedValue = "ConnectionForcefullyClosed";
        private const string InvalidBlobStateValue = "InvalidBlobState";
        private const string BackupTimedOutValue = "BackupTimedOut";
        private const string AzureStorageTimeoutValue = "AzureStorageTimeout";
        private const string GenericTimeoutValue = "GenericTimeout";
        private const string InvalidThrottleParameterValue = "InvalidThrottleParameter";
        private const string EventHubLinkAlreadyClosedValue = "EventHubLinkAlreadyClosed";
        private const string ReliableBlobStoreErrorValue = "ReliableBlobStoreError";
        private const string RetryAttemptsExhaustedValue = "RetryAttemptsExhausted";
        private const string AzureTableStoreErrorValue = "AzureTableStoreError";
        private const string CheckpointStoreNotFoundValue = "CheckpointStoreNotFound";
        private const string DocumentDbInvalidReturnValueValue = "DocumentDbInvalidReturnValue";
        private const string ReliableDocDbStoreErrorValue = "ReliableDocDbStoreStoreError";
        private const string ReliableBlobStoreTimeoutErrorValue = "ReliableBlobStoreTimeoutError";
        private const string ConfigReadFailedValue = "ConfigReadFailed";
        private const string InvalidContainerReceiveLinkValue = "InvalidContainerReceiveLink";
        private const string InvalidPartitionEpochValue = "InvalidPartitionEpoch";
        private const string RestoreTimedOutValue = "RestoreTimedOut";
        private const string StreamReservationFailureValue = "StreamReservationFailure";
        private const string SerializationErrorValue = "SerializationError";
        private const string UnexpectedPropertyValueValue = "UnexpectedPropertyValue";
        private const string OrchestrationOperationFailedValue = "OrchestrationOperationFailed";
        private const string ModelRepoEndpointErrorValue = "ModelRepoEndpointError";
        private const string ResolutionErrorValue = "ResolutionError";
        private const string UnableToFetchCredentialsValue = "UnableToFetchCredentials";
        private const string UnableToFetchTenantInfoValue = "UnableToFetchTenantInfo";
        private const string UnableToShareIdentityValue = "UnableToShareIdentity";
        private const string UnableToExpandDiscoveryInfoValue = "UnableToExpandDiscoveryInfo";
        private const string UnableToExpandComponentInfoValue = "UnableToExpandComponentInfo";
        private const string UnableToCompressDiscoveryInfoValue = "UnableToCompressDiscoveryInfo";
        private const string UnableToCompressComponentInfoValue = "UnableToCompressComponentInfo";
        private const string GenericBadGatewayValue = "GenericBadGateway";
        private const string InvalidResponseWhileProxyingValue = "InvalidResponseWhileProxying";
        private const string GenericServiceUnavailableValue = "GenericServiceUnavailable";
        private const string ServiceUnavailableValue = "ServiceUnavailable";
        private const string PartitionNotFoundValue = "PartitionNotFound";
        private const string IotHubActivationFailedValue = "IotHubActivationFailed";
        private const string ServerBusyValue = "ServerBusy";
        private const string IotHubRestoringValue = "IotHubRestoring";
        private const string ReceiveLinkOpensThrottledValue = "ReceiveLinkOpensThrottled";
        private const string ConnectionUnavailableValue = "ConnectionUnavailable";
        private const string DeviceUnavailableValue = "DeviceUnavailable";
        private const string ConfigurationNotAvailableValue = "ConfigurationNotAvailable";
        private const string GroupNotAvailableValue = "GroupNotAvailable";
        private const string HostingServiceNotAvailableValue = "HostingServiceNotAvailable";
        private const string GenericGatewayTimeoutValue = "GenericGatewayTimeout";
        private const string GatewayTimeoutValue = "GatewayTimeout";

        /// <summary> InvalidErrorCode. </summary>
        public static RegistryOperationErrorCode InvalidErrorCode { get; } = new RegistryOperationErrorCode(InvalidErrorCodeValue);
        /// <summary> GenericBadRequest. </summary>
        public static RegistryOperationErrorCode GenericBadRequest { get; } = new RegistryOperationErrorCode(GenericBadRequestValue);
        /// <summary> InvalidProtocolVersion. </summary>
        public static RegistryOperationErrorCode InvalidProtocolVersion { get; } = new RegistryOperationErrorCode(InvalidProtocolVersionValue);
        /// <summary> DeviceInvalidResultCount. </summary>
        public static RegistryOperationErrorCode DeviceInvalidResultCount { get; } = new RegistryOperationErrorCode(DeviceInvalidResultCountValue);
        /// <summary> InvalidOperation. </summary>
        public static RegistryOperationErrorCode InvalidOperation { get; } = new RegistryOperationErrorCode(InvalidOperationValue);
        /// <summary> ArgumentInvalid. </summary>
        public static RegistryOperationErrorCode ArgumentInvalid { get; } = new RegistryOperationErrorCode(ArgumentInvalidValue);
        /// <summary> ArgumentNull. </summary>
        public static RegistryOperationErrorCode ArgumentNull { get; } = new RegistryOperationErrorCode(ArgumentNullValue);
        /// <summary> IotHubFormatError. </summary>
        public static RegistryOperationErrorCode IotHubFormatError { get; } = new RegistryOperationErrorCode(IotHubFormatErrorValue);
        /// <summary> DeviceStorageEntitySerializationError. </summary>
        public static RegistryOperationErrorCode DeviceStorageEntitySerializationError { get; } = new RegistryOperationErrorCode(DeviceStorageEntitySerializationErrorValue);
        /// <summary> BlobContainerValidationError. </summary>
        public static RegistryOperationErrorCode BlobContainerValidationError { get; } = new RegistryOperationErrorCode(BlobContainerValidationErrorValue);
        /// <summary> ImportWarningExistsError. </summary>
        public static RegistryOperationErrorCode ImportWarningExistsError { get; } = new RegistryOperationErrorCode(ImportWarningExistsErrorValue);
        /// <summary> InvalidSchemaVersion. </summary>
        public static RegistryOperationErrorCode InvalidSchemaVersion { get; } = new RegistryOperationErrorCode(InvalidSchemaVersionValue);
        /// <summary> DeviceDefinedMultipleTimes. </summary>
        public static RegistryOperationErrorCode DeviceDefinedMultipleTimes { get; } = new RegistryOperationErrorCode(DeviceDefinedMultipleTimesValue);
        /// <summary> DeserializationError. </summary>
        public static RegistryOperationErrorCode DeserializationError { get; } = new RegistryOperationErrorCode(DeserializationErrorValue);
        /// <summary> BulkRegistryOperationFailure. </summary>
        public static RegistryOperationErrorCode BulkRegistryOperationFailure { get; } = new RegistryOperationErrorCode(BulkRegistryOperationFailureValue);
        /// <summary> DefaultStorageEndpointNotConfigured. </summary>
        public static RegistryOperationErrorCode DefaultStorageEndpointNotConfigured { get; } = new RegistryOperationErrorCode(DefaultStorageEndpointNotConfiguredValue);
        /// <summary> InvalidFileUploadCorrelationId. </summary>
        public static RegistryOperationErrorCode InvalidFileUploadCorrelationId { get; } = new RegistryOperationErrorCode(InvalidFileUploadCorrelationIdValue);
        /// <summary> ExpiredFileUploadCorrelationId. </summary>
        public static RegistryOperationErrorCode ExpiredFileUploadCorrelationId { get; } = new RegistryOperationErrorCode(ExpiredFileUploadCorrelationIdValue);
        /// <summary> InvalidStorageEndpoint. </summary>
        public static RegistryOperationErrorCode InvalidStorageEndpoint { get; } = new RegistryOperationErrorCode(InvalidStorageEndpointValue);
        /// <summary> InvalidMessagingEndpoint. </summary>
        public static RegistryOperationErrorCode InvalidMessagingEndpoint { get; } = new RegistryOperationErrorCode(InvalidMessagingEndpointValue);
        /// <summary> InvalidFileUploadCompletionStatus. </summary>
        public static RegistryOperationErrorCode InvalidFileUploadCompletionStatus { get; } = new RegistryOperationErrorCode(InvalidFileUploadCompletionStatusValue);
        /// <summary> InvalidStorageEndpointOrBlob. </summary>
        public static RegistryOperationErrorCode InvalidStorageEndpointOrBlob { get; } = new RegistryOperationErrorCode(InvalidStorageEndpointOrBlobValue);
        /// <summary> RequestCanceled. </summary>
        public static RegistryOperationErrorCode RequestCanceled { get; } = new RegistryOperationErrorCode(RequestCanceledValue);
        /// <summary> InvalidStorageEndpointProperty. </summary>
        public static RegistryOperationErrorCode InvalidStorageEndpointProperty { get; } = new RegistryOperationErrorCode(InvalidStorageEndpointPropertyValue);
        /// <summary> EtagDoesNotMatch. </summary>
        public static RegistryOperationErrorCode EtagDoesNotMatch { get; } = new RegistryOperationErrorCode(EtagDoesNotMatchValue);
        /// <summary> RequestTimedOut. </summary>
        public static RegistryOperationErrorCode RequestTimedOut { get; } = new RegistryOperationErrorCode(RequestTimedOutValue);
        /// <summary> UnsupportedOperationOnReplica. </summary>
        public static RegistryOperationErrorCode UnsupportedOperationOnReplica { get; } = new RegistryOperationErrorCode(UnsupportedOperationOnReplicaValue);
        /// <summary> NullMessage. </summary>
        public static RegistryOperationErrorCode NullMessage { get; } = new RegistryOperationErrorCode(NullMessageValue);
        /// <summary> ConnectionForcefullyClosedOnNewConnection. </summary>
        public static RegistryOperationErrorCode ConnectionForcefullyClosedOnNewConnection { get; } = new RegistryOperationErrorCode(ConnectionForcefullyClosedOnNewConnectionValue);
        /// <summary> InvalidDeviceScope. </summary>
        public static RegistryOperationErrorCode InvalidDeviceScope { get; } = new RegistryOperationErrorCode(InvalidDeviceScopeValue);
        /// <summary> ConnectionForcefullyClosedOnFaultInjection. </summary>
        public static RegistryOperationErrorCode ConnectionForcefullyClosedOnFaultInjection { get; } = new RegistryOperationErrorCode(ConnectionForcefullyClosedOnFaultInjectionValue);
        /// <summary> ConnectionRejectedOnFaultInjection. </summary>
        public static RegistryOperationErrorCode ConnectionRejectedOnFaultInjection { get; } = new RegistryOperationErrorCode(ConnectionRejectedOnFaultInjectionValue);
        /// <summary> InvalidEndpointAuthenticationType. </summary>
        public static RegistryOperationErrorCode InvalidEndpointAuthenticationType { get; } = new RegistryOperationErrorCode(InvalidEndpointAuthenticationTypeValue);
        /// <summary> ManagedIdentityNotEnabled. </summary>
        public static RegistryOperationErrorCode ManagedIdentityNotEnabled { get; } = new RegistryOperationErrorCode(ManagedIdentityNotEnabledValue);
        /// <summary> InvalidRouteTestInput. </summary>
        public static RegistryOperationErrorCode InvalidRouteTestInput { get; } = new RegistryOperationErrorCode(InvalidRouteTestInputValue);
        /// <summary> InvalidSourceOnRoute. </summary>
        public static RegistryOperationErrorCode InvalidSourceOnRoute { get; } = new RegistryOperationErrorCode(InvalidSourceOnRouteValue);
        /// <summary> RoutingNotEnabled. </summary>
        public static RegistryOperationErrorCode RoutingNotEnabled { get; } = new RegistryOperationErrorCode(RoutingNotEnabledValue);
        /// <summary> InvalidContentEncodingOrType. </summary>
        public static RegistryOperationErrorCode InvalidContentEncodingOrType { get; } = new RegistryOperationErrorCode(InvalidContentEncodingOrTypeValue);
        /// <summary> InvalidEndorsementKey. </summary>
        public static RegistryOperationErrorCode InvalidEndorsementKey { get; } = new RegistryOperationErrorCode(InvalidEndorsementKeyValue);
        /// <summary> InvalidRegistrationId. </summary>
        public static RegistryOperationErrorCode InvalidRegistrationId { get; } = new RegistryOperationErrorCode(InvalidRegistrationIdValue);
        /// <summary> InvalidStorageRootKey. </summary>
        public static RegistryOperationErrorCode InvalidStorageRootKey { get; } = new RegistryOperationErrorCode(InvalidStorageRootKeyValue);
        /// <summary> InvalidEnrollmentGroupId. </summary>
        public static RegistryOperationErrorCode InvalidEnrollmentGroupId { get; } = new RegistryOperationErrorCode(InvalidEnrollmentGroupIdValue);
        /// <summary> TooManyEnrollments. </summary>
        public static RegistryOperationErrorCode TooManyEnrollments { get; } = new RegistryOperationErrorCode(TooManyEnrollmentsValue);
        /// <summary> RegistrationIdDefinedMultipleTimes. </summary>
        public static RegistryOperationErrorCode RegistrationIdDefinedMultipleTimes { get; } = new RegistryOperationErrorCode(RegistrationIdDefinedMultipleTimesValue);
        /// <summary> CustomAllocationFailed. </summary>
        public static RegistryOperationErrorCode CustomAllocationFailed { get; } = new RegistryOperationErrorCode(CustomAllocationFailedValue);
        /// <summary> CustomAllocationIotHubNotSpecified. </summary>
        public static RegistryOperationErrorCode CustomAllocationIotHubNotSpecified { get; } = new RegistryOperationErrorCode(CustomAllocationIotHubNotSpecifiedValue);
        /// <summary> CustomAllocationUnauthorizedAccess. </summary>
        public static RegistryOperationErrorCode CustomAllocationUnauthorizedAccess { get; } = new RegistryOperationErrorCode(CustomAllocationUnauthorizedAccessValue);
        /// <summary> CannotRegisterModuleToModule. </summary>
        public static RegistryOperationErrorCode CannotRegisterModuleToModule { get; } = new RegistryOperationErrorCode(CannotRegisterModuleToModuleValue);
        /// <summary> TenantHubRoutingNotEnabled. </summary>
        public static RegistryOperationErrorCode TenantHubRoutingNotEnabled { get; } = new RegistryOperationErrorCode(TenantHubRoutingNotEnabledValue);
        /// <summary> InvalidConfigurationTargetCondition. </summary>
        public static RegistryOperationErrorCode InvalidConfigurationTargetCondition { get; } = new RegistryOperationErrorCode(InvalidConfigurationTargetConditionValue);
        /// <summary> InvalidConfigurationContent. </summary>
        public static RegistryOperationErrorCode InvalidConfigurationContent { get; } = new RegistryOperationErrorCode(InvalidConfigurationContentValue);
        /// <summary> CannotModifyImmutableConfigurationContent. </summary>
        public static RegistryOperationErrorCode CannotModifyImmutableConfigurationContent { get; } = new RegistryOperationErrorCode(CannotModifyImmutableConfigurationContentValue);
        /// <summary> InvalidConfigurationCustomMetricsQuery. </summary>
        public static RegistryOperationErrorCode InvalidConfigurationCustomMetricsQuery { get; } = new RegistryOperationErrorCode(InvalidConfigurationCustomMetricsQueryValue);
        /// <summary> InvalidPnPInterfaceDefinition. </summary>
        public static RegistryOperationErrorCode InvalidPnPInterfaceDefinition { get; } = new RegistryOperationErrorCode(InvalidPnPInterfaceDefinitionValue);
        /// <summary> InvalidPnPDesiredProperties. </summary>
        public static RegistryOperationErrorCode InvalidPnPDesiredProperties { get; } = new RegistryOperationErrorCode(InvalidPnPDesiredPropertiesValue);
        /// <summary> InvalidPnPReportedProperties. </summary>
        public static RegistryOperationErrorCode InvalidPnPReportedProperties { get; } = new RegistryOperationErrorCode(InvalidPnPReportedPropertiesValue);
        /// <summary> InvalidPnPWritableReportedProperties. </summary>
        public static RegistryOperationErrorCode InvalidPnPWritableReportedProperties { get; } = new RegistryOperationErrorCode(InvalidPnPWritableReportedPropertiesValue);
        /// <summary> InvalidDigitalTwinJsonPatch. </summary>
        public static RegistryOperationErrorCode InvalidDigitalTwinJsonPatch { get; } = new RegistryOperationErrorCode(InvalidDigitalTwinJsonPatchValue);
        /// <summary> InvalidDigitalTwinPayload. </summary>
        public static RegistryOperationErrorCode InvalidDigitalTwinPayload { get; } = new RegistryOperationErrorCode(InvalidDigitalTwinPayloadValue);
        /// <summary> InvalidDigitalTwinPatch. </summary>
        public static RegistryOperationErrorCode InvalidDigitalTwinPatch { get; } = new RegistryOperationErrorCode(InvalidDigitalTwinPatchValue);
        /// <summary> InvalidDigitalTwinPatchPath. </summary>
        public static RegistryOperationErrorCode InvalidDigitalTwinPatchPath { get; } = new RegistryOperationErrorCode(InvalidDigitalTwinPatchPathValue);
        /// <summary> GenericUnauthorized. </summary>
        public static RegistryOperationErrorCode GenericUnauthorized { get; } = new RegistryOperationErrorCode(GenericUnauthorizedValue);
        /// <summary> IotHubNotFound. </summary>
        public static RegistryOperationErrorCode IotHubNotFound { get; } = new RegistryOperationErrorCode(IotHubNotFoundValue);
        /// <summary> IotHubUnauthorizedAccess. </summary>
        public static RegistryOperationErrorCode IotHubUnauthorizedAccess { get; } = new RegistryOperationErrorCode(IotHubUnauthorizedAccessValue);
        /// <summary> IotHubUnauthorized. </summary>
        public static RegistryOperationErrorCode IotHubUnauthorized { get; } = new RegistryOperationErrorCode(IotHubUnauthorizedValue);
        /// <summary> ElasticPoolNotFound. </summary>
        public static RegistryOperationErrorCode ElasticPoolNotFound { get; } = new RegistryOperationErrorCode(ElasticPoolNotFoundValue);
        /// <summary> SystemModuleModifyUnauthorizedAccess. </summary>
        public static RegistryOperationErrorCode SystemModuleModifyUnauthorizedAccess { get; } = new RegistryOperationErrorCode(SystemModuleModifyUnauthorizedAccessValue);
        /// <summary> GenericForbidden. </summary>
        public static RegistryOperationErrorCode GenericForbidden { get; } = new RegistryOperationErrorCode(GenericForbiddenValue);
        /// <summary> IotHubSuspended. </summary>
        public static RegistryOperationErrorCode IotHubSuspended { get; } = new RegistryOperationErrorCode(IotHubSuspendedValue);
        /// <summary> IotHubQuotaExceeded. </summary>
        public static RegistryOperationErrorCode IotHubQuotaExceeded { get; } = new RegistryOperationErrorCode(IotHubQuotaExceededValue);
        /// <summary> JobQuotaExceeded. </summary>
        public static RegistryOperationErrorCode JobQuotaExceeded { get; } = new RegistryOperationErrorCode(JobQuotaExceededValue);
        /// <summary> DeviceMaximumQueueDepthExceeded. </summary>
        public static RegistryOperationErrorCode DeviceMaximumQueueDepthExceeded { get; } = new RegistryOperationErrorCode(DeviceMaximumQueueDepthExceededValue);
        /// <summary> IotHubMaxCbsTokenExceeded. </summary>
        public static RegistryOperationErrorCode IotHubMaxCbsTokenExceeded { get; } = new RegistryOperationErrorCode(IotHubMaxCbsTokenExceededValue);
        /// <summary> DeviceMaximumActiveFileUploadLimitExceeded. </summary>
        public static RegistryOperationErrorCode DeviceMaximumActiveFileUploadLimitExceeded { get; } = new RegistryOperationErrorCode(DeviceMaximumActiveFileUploadLimitExceededValue);
        /// <summary> DeviceMaximumQueueSizeExceeded. </summary>
        public static RegistryOperationErrorCode DeviceMaximumQueueSizeExceeded { get; } = new RegistryOperationErrorCode(DeviceMaximumQueueSizeExceededValue);
        /// <summary> RoutingEndpointResponseForbidden. </summary>
        public static RegistryOperationErrorCode RoutingEndpointResponseForbidden { get; } = new RegistryOperationErrorCode(RoutingEndpointResponseForbiddenValue);
        /// <summary> InvalidMessageExpiryTime. </summary>
        public static RegistryOperationErrorCode InvalidMessageExpiryTime { get; } = new RegistryOperationErrorCode(InvalidMessageExpiryTimeValue);
        /// <summary> OperationNotAvailableInCurrentTier. </summary>
        public static RegistryOperationErrorCode OperationNotAvailableInCurrentTier { get; } = new RegistryOperationErrorCode(OperationNotAvailableInCurrentTierValue);
        /// <summary> KeyEncryptionKeyRevoked. </summary>
        public static RegistryOperationErrorCode KeyEncryptionKeyRevoked { get; } = new RegistryOperationErrorCode(KeyEncryptionKeyRevokedValue);
        /// <summary> DeviceModelMaxPropertiesExceeded. </summary>
        public static RegistryOperationErrorCode DeviceModelMaxPropertiesExceeded { get; } = new RegistryOperationErrorCode(DeviceModelMaxPropertiesExceededValue);
        /// <summary> DeviceModelMaxIndexablePropertiesExceeded. </summary>
        public static RegistryOperationErrorCode DeviceModelMaxIndexablePropertiesExceeded { get; } = new RegistryOperationErrorCode(DeviceModelMaxIndexablePropertiesExceededValue);
        /// <summary> IotDpsSuspended. </summary>
        public static RegistryOperationErrorCode IotDpsSuspended { get; } = new RegistryOperationErrorCode(IotDpsSuspendedValue);
        /// <summary> IotDpsSuspending. </summary>
        public static RegistryOperationErrorCode IotDpsSuspending { get; } = new RegistryOperationErrorCode(IotDpsSuspendingValue);
        /// <summary> GenericNotFound. </summary>
        public static RegistryOperationErrorCode GenericNotFound { get; } = new RegistryOperationErrorCode(GenericNotFoundValue);
        /// <summary> DeviceNotFound. </summary>
        public static RegistryOperationErrorCode DeviceNotFound { get; } = new RegistryOperationErrorCode(DeviceNotFoundValue);
        /// <summary> JobNotFound. </summary>
        public static RegistryOperationErrorCode JobNotFound { get; } = new RegistryOperationErrorCode(JobNotFoundValue);
        /// <summary> QuotaMetricNotFound. </summary>
        public static RegistryOperationErrorCode QuotaMetricNotFound { get; } = new RegistryOperationErrorCode(QuotaMetricNotFoundValue);
        /// <summary> SystemPropertyNotFound. </summary>
        public static RegistryOperationErrorCode SystemPropertyNotFound { get; } = new RegistryOperationErrorCode(SystemPropertyNotFoundValue);
        /// <summary> AmqpAddressNotFound. </summary>
        public static RegistryOperationErrorCode AmqpAddressNotFound { get; } = new RegistryOperationErrorCode(AmqpAddressNotFoundValue);
        /// <summary> RoutingEndpointResponseNotFound. </summary>
        public static RegistryOperationErrorCode RoutingEndpointResponseNotFound { get; } = new RegistryOperationErrorCode(RoutingEndpointResponseNotFoundValue);
        /// <summary> CertificateNotFound. </summary>
        public static RegistryOperationErrorCode CertificateNotFound { get; } = new RegistryOperationErrorCode(CertificateNotFoundValue);
        /// <summary> ElasticPoolTenantHubNotFound. </summary>
        public static RegistryOperationErrorCode ElasticPoolTenantHubNotFound { get; } = new RegistryOperationErrorCode(ElasticPoolTenantHubNotFoundValue);
        /// <summary> ModuleNotFound. </summary>
        public static RegistryOperationErrorCode ModuleNotFound { get; } = new RegistryOperationErrorCode(ModuleNotFoundValue);
        /// <summary> AzureTableStoreNotFound. </summary>
        public static RegistryOperationErrorCode AzureTableStoreNotFound { get; } = new RegistryOperationErrorCode(AzureTableStoreNotFoundValue);
        /// <summary> IotHubFailingOver. </summary>
        public static RegistryOperationErrorCode IotHubFailingOver { get; } = new RegistryOperationErrorCode(IotHubFailingOverValue);
        /// <summary> FeatureNotSupported. </summary>
        public static RegistryOperationErrorCode FeatureNotSupported { get; } = new RegistryOperationErrorCode(FeatureNotSupportedValue);
        /// <summary> DigitalTwinInterfaceNotFound. </summary>
        public static RegistryOperationErrorCode DigitalTwinInterfaceNotFound { get; } = new RegistryOperationErrorCode(DigitalTwinInterfaceNotFoundValue);
        /// <summary> QueryStoreClusterNotFound. </summary>
        public static RegistryOperationErrorCode QueryStoreClusterNotFound { get; } = new RegistryOperationErrorCode(QueryStoreClusterNotFoundValue);
        /// <summary> DeviceNotOnline. </summary>
        public static RegistryOperationErrorCode DeviceNotOnline { get; } = new RegistryOperationErrorCode(DeviceNotOnlineValue);
        /// <summary> DeviceConnectionClosedRemotely. </summary>
        public static RegistryOperationErrorCode DeviceConnectionClosedRemotely { get; } = new RegistryOperationErrorCode(DeviceConnectionClosedRemotelyValue);
        /// <summary> EnrollmentNotFound. </summary>
        public static RegistryOperationErrorCode EnrollmentNotFound { get; } = new RegistryOperationErrorCode(EnrollmentNotFoundValue);
        /// <summary> DeviceRegistrationNotFound. </summary>
        public static RegistryOperationErrorCode DeviceRegistrationNotFound { get; } = new RegistryOperationErrorCode(DeviceRegistrationNotFoundValue);
        /// <summary> AsyncOperationNotFound. </summary>
        public static RegistryOperationErrorCode AsyncOperationNotFound { get; } = new RegistryOperationErrorCode(AsyncOperationNotFoundValue);
        /// <summary> EnrollmentGroupNotFound. </summary>
        public static RegistryOperationErrorCode EnrollmentGroupNotFound { get; } = new RegistryOperationErrorCode(EnrollmentGroupNotFoundValue);
        /// <summary> DeviceRecordNotFound. </summary>
        public static RegistryOperationErrorCode DeviceRecordNotFound { get; } = new RegistryOperationErrorCode(DeviceRecordNotFoundValue);
        /// <summary> GroupRecordNotFound. </summary>
        public static RegistryOperationErrorCode GroupRecordNotFound { get; } = new RegistryOperationErrorCode(GroupRecordNotFoundValue);
        /// <summary> DeviceGroupNotFound. </summary>
        public static RegistryOperationErrorCode DeviceGroupNotFound { get; } = new RegistryOperationErrorCode(DeviceGroupNotFoundValue);
        /// <summary> ProvisioningSettingsNotFound. </summary>
        public static RegistryOperationErrorCode ProvisioningSettingsNotFound { get; } = new RegistryOperationErrorCode(ProvisioningSettingsNotFoundValue);
        /// <summary> ProvisioningRecordNotFound. </summary>
        public static RegistryOperationErrorCode ProvisioningRecordNotFound { get; } = new RegistryOperationErrorCode(ProvisioningRecordNotFoundValue);
        /// <summary> LinkedHubNotFound. </summary>
        public static RegistryOperationErrorCode LinkedHubNotFound { get; } = new RegistryOperationErrorCode(LinkedHubNotFoundValue);
        /// <summary> CertificateAuthorityNotFound. </summary>
        public static RegistryOperationErrorCode CertificateAuthorityNotFound { get; } = new RegistryOperationErrorCode(CertificateAuthorityNotFoundValue);
        /// <summary> ConfigurationNotFound. </summary>
        public static RegistryOperationErrorCode ConfigurationNotFound { get; } = new RegistryOperationErrorCode(ConfigurationNotFoundValue);
        /// <summary> GroupNotFound. </summary>
        public static RegistryOperationErrorCode GroupNotFound { get; } = new RegistryOperationErrorCode(GroupNotFoundValue);
        /// <summary> DigitalTwinModelNotFound. </summary>
        public static RegistryOperationErrorCode DigitalTwinModelNotFound { get; } = new RegistryOperationErrorCode(DigitalTwinModelNotFoundValue);
        /// <summary> InterfaceNameModelNotFound. </summary>
        public static RegistryOperationErrorCode InterfaceNameModelNotFound { get; } = new RegistryOperationErrorCode(InterfaceNameModelNotFoundValue);
        /// <summary> GenericMethodNotAllowed. </summary>
        public static RegistryOperationErrorCode GenericMethodNotAllowed { get; } = new RegistryOperationErrorCode(GenericMethodNotAllowedValue);
        /// <summary> OperationNotAllowedInCurrentState. </summary>
        public static RegistryOperationErrorCode OperationNotAllowedInCurrentState { get; } = new RegistryOperationErrorCode(OperationNotAllowedInCurrentStateValue);
        /// <summary> ImportDevicesNotSupported. </summary>
        public static RegistryOperationErrorCode ImportDevicesNotSupported { get; } = new RegistryOperationErrorCode(ImportDevicesNotSupportedValue);
        /// <summary> BulkAddDevicesNotSupported. </summary>
        public static RegistryOperationErrorCode BulkAddDevicesNotSupported { get; } = new RegistryOperationErrorCode(BulkAddDevicesNotSupportedValue);
        /// <summary> GenericConflict. </summary>
        public static RegistryOperationErrorCode GenericConflict { get; } = new RegistryOperationErrorCode(GenericConflictValue);
        /// <summary> DeviceAlreadyExists. </summary>
        public static RegistryOperationErrorCode DeviceAlreadyExists { get; } = new RegistryOperationErrorCode(DeviceAlreadyExistsValue);
        /// <summary> LinkCreationConflict. </summary>
        public static RegistryOperationErrorCode LinkCreationConflict { get; } = new RegistryOperationErrorCode(LinkCreationConflictValue);
        /// <summary> CallbackSubscriptionConflict. </summary>
        public static RegistryOperationErrorCode CallbackSubscriptionConflict { get; } = new RegistryOperationErrorCode(CallbackSubscriptionConflictValue);
        /// <summary> ModelAlreadyExists. </summary>
        public static RegistryOperationErrorCode ModelAlreadyExists { get; } = new RegistryOperationErrorCode(ModelAlreadyExistsValue);
        /// <summary> DeviceLocked. </summary>
        public static RegistryOperationErrorCode DeviceLocked { get; } = new RegistryOperationErrorCode(DeviceLockedValue);
        /// <summary> DeviceJobAlreadyExists. </summary>
        public static RegistryOperationErrorCode DeviceJobAlreadyExists { get; } = new RegistryOperationErrorCode(DeviceJobAlreadyExistsValue);
        /// <summary> JobAlreadyExists. </summary>
        public static RegistryOperationErrorCode JobAlreadyExists { get; } = new RegistryOperationErrorCode(JobAlreadyExistsValue);
        /// <summary> EnrollmentConflict. </summary>
        public static RegistryOperationErrorCode EnrollmentConflict { get; } = new RegistryOperationErrorCode(EnrollmentConflictValue);
        /// <summary> EnrollmentGroupConflict. </summary>
        public static RegistryOperationErrorCode EnrollmentGroupConflict { get; } = new RegistryOperationErrorCode(EnrollmentGroupConflictValue);
        /// <summary> RegistrationStatusConflict. </summary>
        public static RegistryOperationErrorCode RegistrationStatusConflict { get; } = new RegistryOperationErrorCode(RegistrationStatusConflictValue);
        /// <summary> DeviceRecordConflict. </summary>
        public static RegistryOperationErrorCode DeviceRecordConflict { get; } = new RegistryOperationErrorCode(DeviceRecordConflictValue);
        /// <summary> GroupRecordConflict. </summary>
        public static RegistryOperationErrorCode GroupRecordConflict { get; } = new RegistryOperationErrorCode(GroupRecordConflictValue);
        /// <summary> DeviceGroupConflict. </summary>
        public static RegistryOperationErrorCode DeviceGroupConflict { get; } = new RegistryOperationErrorCode(DeviceGroupConflictValue);
        /// <summary> ProvisioningSettingsConflict. </summary>
        public static RegistryOperationErrorCode ProvisioningSettingsConflict { get; } = new RegistryOperationErrorCode(ProvisioningSettingsConflictValue);
        /// <summary> ProvisioningRecordConflict. </summary>
        public static RegistryOperationErrorCode ProvisioningRecordConflict { get; } = new RegistryOperationErrorCode(ProvisioningRecordConflictValue);
        /// <summary> LinkedHubConflict. </summary>
        public static RegistryOperationErrorCode LinkedHubConflict { get; } = new RegistryOperationErrorCode(LinkedHubConflictValue);
        /// <summary> CertificateAuthorityConflict. </summary>
        public static RegistryOperationErrorCode CertificateAuthorityConflict { get; } = new RegistryOperationErrorCode(CertificateAuthorityConflictValue);
        /// <summary> ModuleAlreadyExistsOnDevice. </summary>
        public static RegistryOperationErrorCode ModuleAlreadyExistsOnDevice { get; } = new RegistryOperationErrorCode(ModuleAlreadyExistsOnDeviceValue);
        /// <summary> ConfigurationAlreadyExists. </summary>
        public static RegistryOperationErrorCode ConfigurationAlreadyExists { get; } = new RegistryOperationErrorCode(ConfigurationAlreadyExistsValue);
        /// <summary> ApplyConfigurationAlreadyInProgressOnDevice. </summary>
        public static RegistryOperationErrorCode ApplyConfigurationAlreadyInProgressOnDevice { get; } = new RegistryOperationErrorCode(ApplyConfigurationAlreadyInProgressOnDeviceValue);
        /// <summary> DigitalTwinModelAlreadyExists. </summary>
        public static RegistryOperationErrorCode DigitalTwinModelAlreadyExists { get; } = new RegistryOperationErrorCode(DigitalTwinModelAlreadyExistsValue);
        /// <summary> DigitalTwinModelExistsWithOtherModelType. </summary>
        public static RegistryOperationErrorCode DigitalTwinModelExistsWithOtherModelType { get; } = new RegistryOperationErrorCode(DigitalTwinModelExistsWithOtherModelTypeValue);
        /// <summary> InterfaceNameModelAlreadyExists. </summary>
        public static RegistryOperationErrorCode InterfaceNameModelAlreadyExists { get; } = new RegistryOperationErrorCode(InterfaceNameModelAlreadyExistsValue);
        /// <summary> GenericPreconditionFailed. </summary>
        public static RegistryOperationErrorCode GenericPreconditionFailed { get; } = new RegistryOperationErrorCode(GenericPreconditionFailedValue);
        /// <summary> PreconditionFailed. </summary>
        public static RegistryOperationErrorCode PreconditionFailed { get; } = new RegistryOperationErrorCode(PreconditionFailedValue);
        /// <summary> DeviceMessageLockLost. </summary>
        public static RegistryOperationErrorCode DeviceMessageLockLost { get; } = new RegistryOperationErrorCode(DeviceMessageLockLostValue);
        /// <summary> JobRunPreconditionFailed. </summary>
        public static RegistryOperationErrorCode JobRunPreconditionFailed { get; } = new RegistryOperationErrorCode(JobRunPreconditionFailedValue);
        /// <summary> InflightMessagesInLink. </summary>
        public static RegistryOperationErrorCode InflightMessagesInLink { get; } = new RegistryOperationErrorCode(InflightMessagesInLinkValue);
        /// <summary> GenericRequestEntityTooLarge. </summary>
        public static RegistryOperationErrorCode GenericRequestEntityTooLarge { get; } = new RegistryOperationErrorCode(GenericRequestEntityTooLargeValue);
        /// <summary> MessageTooLarge. </summary>
        public static RegistryOperationErrorCode MessageTooLarge { get; } = new RegistryOperationErrorCode(MessageTooLargeValue);
        /// <summary> TooManyDevices. </summary>
        public static RegistryOperationErrorCode TooManyDevices { get; } = new RegistryOperationErrorCode(TooManyDevicesValue);
        /// <summary> TooManyModulesOnDevice. </summary>
        public static RegistryOperationErrorCode TooManyModulesOnDevice { get; } = new RegistryOperationErrorCode(TooManyModulesOnDeviceValue);
        /// <summary> ConfigurationCountLimitExceeded. </summary>
        public static RegistryOperationErrorCode ConfigurationCountLimitExceeded { get; } = new RegistryOperationErrorCode(ConfigurationCountLimitExceededValue);
        /// <summary> DigitalTwinModelCountLimitExceeded. </summary>
        public static RegistryOperationErrorCode DigitalTwinModelCountLimitExceeded { get; } = new RegistryOperationErrorCode(DigitalTwinModelCountLimitExceededValue);
        /// <summary> InterfaceNameCompressionModelCountLimitExceeded. </summary>
        public static RegistryOperationErrorCode InterfaceNameCompressionModelCountLimitExceeded { get; } = new RegistryOperationErrorCode(InterfaceNameCompressionModelCountLimitExceededValue);
        /// <summary> GenericUnsupportedMediaType. </summary>
        public static RegistryOperationErrorCode GenericUnsupportedMediaType { get; } = new RegistryOperationErrorCode(GenericUnsupportedMediaTypeValue);
        /// <summary> IncompatibleDataType. </summary>
        public static RegistryOperationErrorCode IncompatibleDataType { get; } = new RegistryOperationErrorCode(IncompatibleDataTypeValue);
        /// <summary> GenericTooManyRequests. </summary>
        public static RegistryOperationErrorCode GenericTooManyRequests { get; } = new RegistryOperationErrorCode(GenericTooManyRequestsValue);
        /// <summary> ThrottlingException. </summary>
        public static RegistryOperationErrorCode ThrottlingException { get; } = new RegistryOperationErrorCode(ThrottlingExceptionValue);
        /// <summary> ThrottleBacklogLimitExceeded. </summary>
        public static RegistryOperationErrorCode ThrottleBacklogLimitExceeded { get; } = new RegistryOperationErrorCode(ThrottleBacklogLimitExceededValue);
        /// <summary> ThrottlingBacklogTimeout. </summary>
        public static RegistryOperationErrorCode ThrottlingBacklogTimeout { get; } = new RegistryOperationErrorCode(ThrottlingBacklogTimeoutValue);
        /// <summary> ThrottlingMaxActiveJobCountExceeded. </summary>
        public static RegistryOperationErrorCode ThrottlingMaxActiveJobCountExceeded { get; } = new RegistryOperationErrorCode(ThrottlingMaxActiveJobCountExceededValue);
        /// <summary> DeviceThrottlingLimitExceeded. </summary>
        public static RegistryOperationErrorCode DeviceThrottlingLimitExceeded { get; } = new RegistryOperationErrorCode(DeviceThrottlingLimitExceededValue);
        /// <summary> ClientClosedRequest. </summary>
        public static RegistryOperationErrorCode ClientClosedRequest { get; } = new RegistryOperationErrorCode(ClientClosedRequestValue);
        /// <summary> GenericServerError. </summary>
        public static RegistryOperationErrorCode GenericServerError { get; } = new RegistryOperationErrorCode(GenericServerErrorValue);
        /// <summary> ServerError. </summary>
        public static RegistryOperationErrorCode ServerError { get; } = new RegistryOperationErrorCode(ServerErrorValue);
        /// <summary> JobCancelled. </summary>
        public static RegistryOperationErrorCode JobCancelled { get; } = new RegistryOperationErrorCode(JobCancelledValue);
        /// <summary> StatisticsRetrievalError. </summary>
        public static RegistryOperationErrorCode StatisticsRetrievalError { get; } = new RegistryOperationErrorCode(StatisticsRetrievalErrorValue);
        /// <summary> ConnectionForcefullyClosed. </summary>
        public static RegistryOperationErrorCode ConnectionForcefullyClosed { get; } = new RegistryOperationErrorCode(ConnectionForcefullyClosedValue);
        /// <summary> InvalidBlobState. </summary>
        public static RegistryOperationErrorCode InvalidBlobState { get; } = new RegistryOperationErrorCode(InvalidBlobStateValue);
        /// <summary> BackupTimedOut. </summary>
        public static RegistryOperationErrorCode BackupTimedOut { get; } = new RegistryOperationErrorCode(BackupTimedOutValue);
        /// <summary> AzureStorageTimeout. </summary>
        public static RegistryOperationErrorCode AzureStorageTimeout { get; } = new RegistryOperationErrorCode(AzureStorageTimeoutValue);
        /// <summary> GenericTimeout. </summary>
        public static RegistryOperationErrorCode GenericTimeout { get; } = new RegistryOperationErrorCode(GenericTimeoutValue);
        /// <summary> InvalidThrottleParameter. </summary>
        public static RegistryOperationErrorCode InvalidThrottleParameter { get; } = new RegistryOperationErrorCode(InvalidThrottleParameterValue);
        /// <summary> EventHubLinkAlreadyClosed. </summary>
        public static RegistryOperationErrorCode EventHubLinkAlreadyClosed { get; } = new RegistryOperationErrorCode(EventHubLinkAlreadyClosedValue);
        /// <summary> ReliableBlobStoreError. </summary>
        public static RegistryOperationErrorCode ReliableBlobStoreError { get; } = new RegistryOperationErrorCode(ReliableBlobStoreErrorValue);
        /// <summary> RetryAttemptsExhausted. </summary>
        public static RegistryOperationErrorCode RetryAttemptsExhausted { get; } = new RegistryOperationErrorCode(RetryAttemptsExhaustedValue);
        /// <summary> AzureTableStoreError. </summary>
        public static RegistryOperationErrorCode AzureTableStoreError { get; } = new RegistryOperationErrorCode(AzureTableStoreErrorValue);
        /// <summary> CheckpointStoreNotFound. </summary>
        public static RegistryOperationErrorCode CheckpointStoreNotFound { get; } = new RegistryOperationErrorCode(CheckpointStoreNotFoundValue);
        /// <summary> DocumentDbInvalidReturnValue. </summary>
        public static RegistryOperationErrorCode DocumentDbInvalidReturnValue { get; } = new RegistryOperationErrorCode(DocumentDbInvalidReturnValueValue);
        /// <summary> ReliableDocDbStoreStoreError. </summary>
        public static RegistryOperationErrorCode ReliableDocDbStoreError { get; } = new RegistryOperationErrorCode(ReliableDocDbStoreErrorValue);
        /// <summary> ReliableBlobStoreTimeoutError. </summary>
        public static RegistryOperationErrorCode ReliableBlobStoreTimeoutError { get; } = new RegistryOperationErrorCode(ReliableBlobStoreTimeoutErrorValue);
        /// <summary> ConfigReadFailed. </summary>
        public static RegistryOperationErrorCode ConfigReadFailed { get; } = new RegistryOperationErrorCode(ConfigReadFailedValue);
        /// <summary> InvalidContainerReceiveLink. </summary>
        public static RegistryOperationErrorCode InvalidContainerReceiveLink { get; } = new RegistryOperationErrorCode(InvalidContainerReceiveLinkValue);
        /// <summary> InvalidPartitionEpoch. </summary>
        public static RegistryOperationErrorCode InvalidPartitionEpoch { get; } = new RegistryOperationErrorCode(InvalidPartitionEpochValue);
        /// <summary> RestoreTimedOut. </summary>
        public static RegistryOperationErrorCode RestoreTimedOut { get; } = new RegistryOperationErrorCode(RestoreTimedOutValue);
        /// <summary> StreamReservationFailure. </summary>
        public static RegistryOperationErrorCode StreamReservationFailure { get; } = new RegistryOperationErrorCode(StreamReservationFailureValue);
        /// <summary> SerializationError. </summary>
        public static RegistryOperationErrorCode SerializationError { get; } = new RegistryOperationErrorCode(SerializationErrorValue);
        /// <summary> UnexpectedPropertyValue. </summary>
        public static RegistryOperationErrorCode UnexpectedPropertyValue { get; } = new RegistryOperationErrorCode(UnexpectedPropertyValueValue);
        /// <summary> OrchestrationOperationFailed. </summary>
        public static RegistryOperationErrorCode OrchestrationOperationFailed { get; } = new RegistryOperationErrorCode(OrchestrationOperationFailedValue);
        /// <summary> ModelRepoEndpointError. </summary>
        public static RegistryOperationErrorCode ModelRepoEndpointError { get; } = new RegistryOperationErrorCode(ModelRepoEndpointErrorValue);
        /// <summary> ResolutionError. </summary>
        public static RegistryOperationErrorCode ResolutionError { get; } = new RegistryOperationErrorCode(ResolutionErrorValue);
        /// <summary> UnableToFetchCredentials. </summary>
        public static RegistryOperationErrorCode UnableToFetchCredentials { get; } = new RegistryOperationErrorCode(UnableToFetchCredentialsValue);
        /// <summary> UnableToFetchTenantInfo. </summary>
        public static RegistryOperationErrorCode UnableToFetchTenantInfo { get; } = new RegistryOperationErrorCode(UnableToFetchTenantInfoValue);
        /// <summary> UnableToShareIdentity. </summary>
        public static RegistryOperationErrorCode UnableToShareIdentity { get; } = new RegistryOperationErrorCode(UnableToShareIdentityValue);
        /// <summary> UnableToExpandDiscoveryInfo. </summary>
        public static RegistryOperationErrorCode UnableToExpandDiscoveryInfo { get; } = new RegistryOperationErrorCode(UnableToExpandDiscoveryInfoValue);
        /// <summary> UnableToExpandComponentInfo. </summary>
        public static RegistryOperationErrorCode UnableToExpandComponentInfo { get; } = new RegistryOperationErrorCode(UnableToExpandComponentInfoValue);
        /// <summary> UnableToCompressDiscoveryInfo. </summary>
        public static RegistryOperationErrorCode UnableToCompressDiscoveryInfo { get; } = new RegistryOperationErrorCode(UnableToCompressDiscoveryInfoValue);
        /// <summary> UnableToCompressComponentInfo. </summary>
        public static RegistryOperationErrorCode UnableToCompressComponentInfo { get; } = new RegistryOperationErrorCode(UnableToCompressComponentInfoValue);
        /// <summary> GenericBadGateway. </summary>
        public static RegistryOperationErrorCode GenericBadGateway { get; } = new RegistryOperationErrorCode(GenericBadGatewayValue);
        /// <summary> InvalidResponseWhileProxying. </summary>
        public static RegistryOperationErrorCode InvalidResponseWhileProxying { get; } = new RegistryOperationErrorCode(InvalidResponseWhileProxyingValue);
        /// <summary> GenericServiceUnavailable. </summary>
        public static RegistryOperationErrorCode GenericServiceUnavailable { get; } = new RegistryOperationErrorCode(GenericServiceUnavailableValue);
        /// <summary> ServiceUnavailable. </summary>
        public static RegistryOperationErrorCode ServiceUnavailable { get; } = new RegistryOperationErrorCode(ServiceUnavailableValue);
        /// <summary> PartitionNotFound. </summary>
        public static RegistryOperationErrorCode PartitionNotFound { get; } = new RegistryOperationErrorCode(PartitionNotFoundValue);
        /// <summary> IotHubActivationFailed. </summary>
        public static RegistryOperationErrorCode IotHubActivationFailed { get; } = new RegistryOperationErrorCode(IotHubActivationFailedValue);
        /// <summary> ServerBusy. </summary>
        public static RegistryOperationErrorCode ServerBusy { get; } = new RegistryOperationErrorCode(ServerBusyValue);
        /// <summary> IotHubRestoring. </summary>
        public static RegistryOperationErrorCode IotHubRestoring { get; } = new RegistryOperationErrorCode(IotHubRestoringValue);
        /// <summary> ReceiveLinkOpensThrottled. </summary>
        public static RegistryOperationErrorCode ReceiveLinkOpensThrottled { get; } = new RegistryOperationErrorCode(ReceiveLinkOpensThrottledValue);
        /// <summary> ConnectionUnavailable. </summary>
        public static RegistryOperationErrorCode ConnectionUnavailable { get; } = new RegistryOperationErrorCode(ConnectionUnavailableValue);
        /// <summary> DeviceUnavailable. </summary>
        public static RegistryOperationErrorCode DeviceUnavailable { get; } = new RegistryOperationErrorCode(DeviceUnavailableValue);
        /// <summary> ConfigurationNotAvailable. </summary>
        public static RegistryOperationErrorCode ConfigurationNotAvailable { get; } = new RegistryOperationErrorCode(ConfigurationNotAvailableValue);
        /// <summary> GroupNotAvailable. </summary>
        public static RegistryOperationErrorCode GroupNotAvailable { get; } = new RegistryOperationErrorCode(GroupNotAvailableValue);
        /// <summary> HostingServiceNotAvailable. </summary>
        public static RegistryOperationErrorCode HostingServiceNotAvailable { get; } = new RegistryOperationErrorCode(HostingServiceNotAvailableValue);
        /// <summary> GenericGatewayTimeout. </summary>
        public static RegistryOperationErrorCode GenericGatewayTimeout { get; } = new RegistryOperationErrorCode(GenericGatewayTimeoutValue);
        /// <summary> GatewayTimeout. </summary>
        public static RegistryOperationErrorCode GatewayTimeout { get; } = new RegistryOperationErrorCode(GatewayTimeoutValue);
        /// <summary> Determines if two <see cref="RegistryOperationErrorCode"/> values are the same. </summary>
        public static bool operator ==(RegistryOperationErrorCode left, RegistryOperationErrorCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RegistryOperationErrorCode"/> values are not the same. </summary>
        public static bool operator !=(RegistryOperationErrorCode left, RegistryOperationErrorCode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RegistryOperationErrorCode"/>. </summary>
        public static implicit operator RegistryOperationErrorCode(string value) => new RegistryOperationErrorCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RegistryOperationErrorCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RegistryOperationErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
