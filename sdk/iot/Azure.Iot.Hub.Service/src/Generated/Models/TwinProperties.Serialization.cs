// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Iot.Hub.Service.Models
{
    public partial class TwinProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Desired))
            {
                writer.WritePropertyName("desired");
                writer.WriteStartObject();
                foreach (var item in Desired)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Reported))
            {
                writer.WritePropertyName("reported");
                writer.WriteStartObject();
                foreach (var item in Reported)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static TwinProperties DeserializeTwinProperties(JsonElement element)
        {
            Optional<IDictionary<string, object>> desired = default;
            Optional<IDictionary<string, object>> reported = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("desired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    desired = dictionary;
                    continue;
                }
                if (property.NameEquals("reported"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    reported = dictionary;
                    continue;
                }
            }
            return new TwinProperties(Optional.ToDictionary(desired), Optional.ToDictionary(reported));
        }
    }
}
