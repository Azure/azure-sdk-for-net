// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Iot.Hub.Service.Models
{
    public partial class FaultInjectionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (IotHubName != null)
            {
                writer.WritePropertyName("IotHubName");
                writer.WriteStringValue(IotHubName);
            }
            if (Connection != null)
            {
                writer.WritePropertyName("connection");
                writer.WriteObjectValue(Connection);
            }
            if (LastUpdatedTimeUtc != null)
            {
                writer.WritePropertyName("lastUpdatedTimeUtc");
                writer.WriteStringValue(LastUpdatedTimeUtc.Value, "S");
            }
            writer.WriteEndObject();
        }

        internal static FaultInjectionProperties DeserializeFaultInjectionProperties(JsonElement element)
        {
            string iotHubName = default;
            FaultInjectionConnectionProperties connection = default;
            DateTimeOffset? lastUpdatedTimeUtc = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("IotHubName"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    iotHubName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connection = FaultInjectionConnectionProperties.DeserializeFaultInjectionConnectionProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("lastUpdatedTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastUpdatedTimeUtc = property.Value.GetDateTimeOffset("S");
                    continue;
                }
            }
            return new FaultInjectionProperties(iotHubName, connection, lastUpdatedTimeUtc);
        }
    }
}
