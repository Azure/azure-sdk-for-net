// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.Iot.Hub.Service.Models;

namespace Azure.Iot.Hub.Service
{
    /// <summary> The DigitalTwin service client. </summary>
    public partial class DigitalTwinClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DigitalTwinRestClient RestClient { get; }
        /// <summary> Initializes a new instance of DigitalTwinClient for mocking. </summary>
        protected DigitalTwinClient()
        {
        }
        /// <summary> Initializes a new instance of DigitalTwinClient. </summary>
        internal DigitalTwinClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "https://fully-qualified-iothubname.azure-devices.net", string apiVersion = "2020-03-13")
        {
            RestClient = new DigitalTwinRestClient(clientDiagnostics, pipeline, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="digitalTwinId"> Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DigitalTwinInterfaces>> GetComponentsAsync(string digitalTwinId, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetComponentsAsync(digitalTwinId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="digitalTwinId"> Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DigitalTwinInterfaces> GetComponents(string digitalTwinId, CancellationToken cancellationToken = default)
        {
            return RestClient.GetComponents(digitalTwinId, cancellationToken);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="digitalTwinId"> Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfacesPatchInfo"> Multiple interfaces desired properties to update. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DigitalTwinInterfaces>> UpdateComponentAsync(string digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.UpdateComponentAsync(digitalTwinId, interfacesPatchInfo, ifMatch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="digitalTwinId"> Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfacesPatchInfo"> Multiple interfaces desired properties to update. </param>
        /// <param name="ifMatch"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DigitalTwinInterfaces> UpdateComponent(string digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            return RestClient.UpdateComponent(digitalTwinId, interfacesPatchInfo, ifMatch, cancellationToken);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="digitalTwinId"> Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfaceName"> The interface name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DigitalTwinInterfaces>> GetComponentAsync(string digitalTwinId, string interfaceName, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetComponentAsync(digitalTwinId, interfaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="digitalTwinId"> Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfaceName"> The interface name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DigitalTwinInterfaces> GetComponent(string digitalTwinId, string interfaceName, CancellationToken cancellationToken = default)
        {
            return RestClient.GetComponent(digitalTwinId, interfaceName, cancellationToken);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="modelId"> Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;. </param>
        /// <param name="expand">
        /// Indicates whether to expand the device capability model&apos;s interface definitions inline or not.
        /// 
        /// This query parameter ONLY applies to Capability model.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetDigitalTwinModelAsync(string modelId, bool? expand = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetDigitalTwinModelAsync(modelId, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>  For IoT Hub VNET related features(https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support) please use API version &apos;2020-03-13&apos;.These features are currently in general availability in the East US, West US 2, and Southcentral US regions only. We are actively working to expand the availability of these features to all regions by end of month May. For rest of the APIs please continue using API version &apos;2019-10-01&apos;. </summary>
        /// <param name="modelId"> Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;. </param>
        /// <param name="expand">
        /// Indicates whether to expand the device capability model&apos;s interface definitions inline or not.
        /// 
        /// This query parameter ONLY applies to Capability model.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetDigitalTwinModel(string modelId, bool? expand = null, CancellationToken cancellationToken = default)
        {
            return RestClient.GetDigitalTwinModel(modelId, expand, cancellationToken);
        }

        /// <summary> Invoke a digital twin interface command. </summary>
        /// <param name="digitalTwinId"> The String to use. </param>
        /// <param name="interfaceName"> The String to use. </param>
        /// <param name="commandName"> The String to use. </param>
        /// <param name="payload"> The any to use. </param>
        /// <param name="connectTimeoutInSeconds"> Connect timeout in seconds. </param>
        /// <param name="responseTimeoutInSeconds"> Response timeout in seconds. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> InvokeComponentCommandAsync(string digitalTwinId, string interfaceName, string commandName, object payload, int? connectTimeoutInSeconds = null, int? responseTimeoutInSeconds = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.InvokeComponentCommandAsync(digitalTwinId, interfaceName, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Invoke a digital twin interface command. </summary>
        /// <param name="digitalTwinId"> The String to use. </param>
        /// <param name="interfaceName"> The String to use. </param>
        /// <param name="commandName"> The String to use. </param>
        /// <param name="payload"> The any to use. </param>
        /// <param name="connectTimeoutInSeconds"> Connect timeout in seconds. </param>
        /// <param name="responseTimeoutInSeconds"> Response timeout in seconds. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> InvokeComponentCommand(string digitalTwinId, string interfaceName, string commandName, object payload, int? connectTimeoutInSeconds = null, int? responseTimeoutInSeconds = null, CancellationToken cancellationToken = default)
        {
            return RestClient.InvokeComponentCommand(digitalTwinId, interfaceName, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, cancellationToken);
        }
    }
}
