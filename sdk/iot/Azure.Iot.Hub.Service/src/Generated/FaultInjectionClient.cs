// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.Iot.Hub.Service.Models;

namespace Azure.Iot.Hub.Service
{
    /// <summary> The FaultInjection service client. </summary>
    public partial class FaultInjectionClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal FaultInjectionRestClient RestClient { get; }
        /// <summary> Initializes a new instance of FaultInjectionClient for mocking. </summary>
        protected FaultInjectionClient()
        {
        }
        /// <summary> Initializes a new instance of FaultInjectionClient. </summary>
        internal FaultInjectionClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "https://fully-qualified-iothubname.azure-devices.net", string apiVersion = "2020-03-13")
        {
            RestClient = new FaultInjectionRestClient(clientDiagnostics, pipeline, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get FaultInjection entity. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FaultInjectionProperties>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FaultInjectionClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get FaultInjection entity. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FaultInjectionProperties> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FaultInjectionClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update FaultInjection entity. </summary>
        /// <param name="value"> The FaultInjectionProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SetAsync(FaultInjectionProperties value, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FaultInjectionClient.Set");
            scope.Start();
            try
            {
                return await RestClient.SetAsync(value, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update FaultInjection entity. </summary>
        /// <param name="value"> The FaultInjectionProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Set(FaultInjectionProperties value, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FaultInjectionClient.Set");
            scope.Start();
            try
            {
                return RestClient.Set(value, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
