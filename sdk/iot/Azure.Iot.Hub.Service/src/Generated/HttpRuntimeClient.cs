// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace Azure.Iot.Hub.Service
{
    /// <summary> The HttpRuntime service client. </summary>
    public partial class HttpRuntimeClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal HttpRuntimeRestClient RestClient { get; }
        /// <summary> Initializes a new instance of HttpRuntimeClient for mocking. </summary>
        protected HttpRuntimeClient()
        {
        }
        /// <summary> Initializes a new instance of HttpRuntimeClient. </summary>
        internal HttpRuntimeClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "https://fully-qualified-iothubname.azure-devices.net", string apiVersion = "2020-03-13")
        {
            RestClient = new HttpRuntimeRestClient(clientDiagnostics, pipeline, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> This method is used to retrieve feedback for cloud-to-device messages. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. This capability is only available in the standard tier IoT Hub. For more information, see [Choose the right IoT Hub tier](https://aka.ms/scaleyouriotsolution). </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ReceiveFeedbackNotificationAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HttpRuntimeClient.ReceiveFeedbackNotification");
            scope.Start();
            try
            {
                return await RestClient.ReceiveFeedbackNotificationAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method is used to retrieve feedback for cloud-to-device messages. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. This capability is only available in the standard tier IoT Hub. For more information, see [Choose the right IoT Hub tier](https://aka.ms/scaleyouriotsolution). </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ReceiveFeedbackNotification(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HttpRuntimeClient.ReceiveFeedbackNotification");
            scope.Start();
            try
            {
                return RestClient.ReceiveFeedbackNotification(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method completes a cloud-to-device feedback message. A completed message is deleted from the service&apos;s feedback queue. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. </summary>
        /// <param name="lockToken"> The lock token obtained when the C2D message was received, and provided to resolve race conditions when completing a feedback message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CompleteFeedbackNotificationAsync(string lockToken, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HttpRuntimeClient.CompleteFeedbackNotification");
            scope.Start();
            try
            {
                return await RestClient.CompleteFeedbackNotificationAsync(lockToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method completes a cloud-to-device feedback message. A completed message is deleted from the service&apos;s feedback queue. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. </summary>
        /// <param name="lockToken"> The lock token obtained when the C2D message was received, and provided to resolve race conditions when completing a feedback message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CompleteFeedbackNotification(string lockToken, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HttpRuntimeClient.CompleteFeedbackNotification");
            scope.Start();
            try
            {
                return RestClient.CompleteFeedbackNotification(lockToken, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method abandons a cloud-to-device feedback message. An abandoned message is deleted from the service&apos;s feedback queue. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. </summary>
        /// <param name="lockToken"> The lock token obtained when the C2D message was received, and provided to resolve race conditions when abandoning a feedback message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AbandonFeedbackNotificationAsync(string lockToken, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HttpRuntimeClient.AbandonFeedbackNotification");
            scope.Start();
            try
            {
                return await RestClient.AbandonFeedbackNotificationAsync(lockToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This method abandons a cloud-to-device feedback message. An abandoned message is deleted from the service&apos;s feedback queue. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. </summary>
        /// <param name="lockToken"> The lock token obtained when the C2D message was received, and provided to resolve race conditions when abandoning a feedback message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AbandonFeedbackNotification(string lockToken, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HttpRuntimeClient.AbandonFeedbackNotification");
            scope.Start();
            try
            {
                return RestClient.AbandonFeedbackNotification(lockToken, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
