// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.Iot.Hub.Service.Models;

namespace Azure.Iot.Hub.Service
{
    /// <summary> The RegistryManager service client. </summary>
    public partial class RegistryManagerClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal RegistryManagerRestClient RestClient { get; }
        /// <summary> Initializes a new instance of RegistryManagerClient for mocking. </summary>
        protected RegistryManagerClient()
        {
        }
        /// <summary> Initializes a new instance of RegistryManagerClient. </summary>
        internal RegistryManagerClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "https://fully-qualified-iothubname.azure-devices.net", string apiVersion = "2020-03-13")
        {
            RestClient = new RegistryManagerRestClient(clientDiagnostics, pipeline, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get statistics about device identities in the IoT hub’s identity registry, such as total device count. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RegistryStatistics>> GetDeviceStatisticsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetDeviceStatistics");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceStatisticsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get statistics about device identities in the IoT hub’s identity registry, such as total device count. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RegistryStatistics> GetDeviceStatistics(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetDeviceStatistics");
            scope.Start();
            try
            {
                return RestClient.GetDeviceStatistics(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves device statistics for this IoT hub, such as connected device count. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServiceStatistics>> GetServiceStatisticsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetServiceStatistics");
            scope.Start();
            try
            {
                return await RestClient.GetServiceStatisticsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves device statistics for this IoT hub, such as connected device count. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServiceStatistics> GetServiceStatistics(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetServiceStatistics");
            scope.Start();
            try
            {
                return RestClient.GetServiceStatistics(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the identities of multiple devices from the IoT hub identity registry. Not recommended. Use the IoT Hub query API to retrieve device twin and device identity information. See https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more information. </summary>
        /// <param name="top"> This parameter when specified, defines the maximum number of device identities that are returned. Any value outside the range of 1-1000 is considered to be 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<DeviceIdentity>>> GetDevicesAsync(int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetDevices");
            scope.Start();
            try
            {
                return await RestClient.GetDevicesAsync(top, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the identities of multiple devices from the IoT hub identity registry. Not recommended. Use the IoT Hub query API to retrieve device twin and device identity information. See https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more information. </summary>
        /// <param name="top"> This parameter when specified, defines the maximum number of device identities that are returned. Any value outside the range of 1-1000 is considered to be 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<DeviceIdentity>> GetDevices(int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetDevices");
            scope.Start();
            try
            {
                return RestClient.GetDevices(top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create, update, or delete the identiies of multiple devices from the IoT hub identity registry. A device identity can be specified only once in the list. Different operations (create, update, delete) on different devices are allowed. A maximum of 100 devices can be specified per invocation. For large scale operations, consider using the import feature using blob storage(https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities). </summary>
        /// <param name="devices"> The ArrayOfExportImportDevice to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BulkRegistryOperationResult>> BulkDeviceCrudAsync(IEnumerable<ExportImportDevice> devices, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.BulkDeviceCrud");
            scope.Start();
            try
            {
                return await RestClient.BulkDeviceCrudAsync(devices, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create, update, or delete the identiies of multiple devices from the IoT hub identity registry. A device identity can be specified only once in the list. Different operations (create, update, delete) on different devices are allowed. A maximum of 100 devices can be specified per invocation. For large scale operations, consider using the import feature using blob storage(https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities). </summary>
        /// <param name="devices"> The ArrayOfExportImportDevice to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BulkRegistryOperationResult> BulkDeviceCrud(IEnumerable<ExportImportDevice> devices, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.BulkDeviceCrud");
            scope.Start();
            try
            {
                return RestClient.BulkDeviceCrud(devices, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query an IoT hub to retrieve information regarding device twins using a SQL-like language. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information. Pagination is supported. This returns information about device twins only. </summary>
        /// <param name="querySpecification"> The query string to run. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information. </param>
        /// <param name="xMsContinuation"> The continuation token to get the next page of results. </param>
        /// <param name="xMsMaxItemCount"> The maximum number of items to return per page. The service may use a different value if the value specified is not acceptable. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<TwinData>>> QueryIotHubAsync(QuerySpecification querySpecification, string xMsContinuation = null, string xMsMaxItemCount = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.QueryIotHub");
            scope.Start();
            try
            {
                return await RestClient.QueryIotHubAsync(querySpecification, xMsContinuation, xMsMaxItemCount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query an IoT hub to retrieve information regarding device twins using a SQL-like language. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information. Pagination is supported. This returns information about device twins only. </summary>
        /// <param name="querySpecification"> The query string to run. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information. </param>
        /// <param name="xMsContinuation"> The continuation token to get the next page of results. </param>
        /// <param name="xMsMaxItemCount"> The maximum number of items to return per page. The service may use a different value if the value specified is not acceptable. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<TwinData>> QueryIotHub(QuerySpecification querySpecification, string xMsContinuation = null, string xMsMaxItemCount = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.QueryIotHub");
            scope.Start();
            try
            {
                return RestClient.QueryIotHub(querySpecification, xMsContinuation, xMsMaxItemCount, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a device from the identity registry of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceIdentity>> GetDeviceAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetDevice");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a device from the identity registry of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceIdentity> GetDevice(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetDevice");
            scope.Start();
            try
            {
                return RestClient.GetDevice(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update the identity of a device in the identity registry of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device to create. </param>
        /// <param name="device"> The contents of the device to create. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device identity, as per RFC7232. Should not be set when creating a device, but may be set when updating a device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceIdentity>> CreateOrUpdateDeviceAsync(string id, DeviceIdentity device, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.CreateOrUpdateDevice");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateDeviceAsync(id, device, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update the identity of a device in the identity registry of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device to create. </param>
        /// <param name="device"> The contents of the device to create. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device identity, as per RFC7232. Should not be set when creating a device, but may be set when updating a device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceIdentity> CreateOrUpdateDevice(string id, DeviceIdentity device, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.CreateOrUpdateDevice");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateDevice(id, device, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the identity of a device from the identity registry of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device to delete. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device identity, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the device identity has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteDeviceAsync(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.DeleteDevice");
            scope.Start();
            try
            {
                return await RestClient.DeleteDeviceAsync(id, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the identity of a device from the identity registry of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device to delete. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device identity, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the device identity has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteDevice(string id, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.DeleteDevice");
            scope.Start();
            try
            {
                return RestClient.DeleteDevice(id, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes all the pending commands for this device from the IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PurgeMessageQueueResult>> PurgeCommandQueueAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.PurgeCommandQueue");
            scope.Start();
            try
            {
                return await RestClient.PurgeCommandQueueAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes all the pending commands for this device from the IoT hub. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PurgeMessageQueueResult> PurgeCommandQueue(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.PurgeCommandQueue");
            scope.Start();
            try
            {
                return RestClient.PurgeCommandQueue(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all the module identities of the device. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<ModuleIdentity>>> GetModulesOnDeviceAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetModulesOnDevice");
            scope.Start();
            try
            {
                return await RestClient.GetModulesOnDeviceAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all the module identities of the device. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<ModuleIdentity>> GetModulesOnDevice(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetModulesOnDevice");
            scope.Start();
            try
            {
                return RestClient.GetModulesOnDevice(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified module identity of the device. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ModuleIdentity>> GetModuleAsync(string id, string mid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetModule");
            scope.Start();
            try
            {
                return await RestClient.GetModuleAsync(id, mid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the specified module identity of the device. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ModuleIdentity> GetModule(string id, string mid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.GetModule");
            scope.Start();
            try
            {
                return RestClient.GetModule(id, mid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update the module identity for device in IoT hub. The moduleId and generation cannot be updated by the user. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="module"> The module identity. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the module, as per RFC7232. Should not be set when creating module, but may be set when updating a module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ModuleIdentity>> CreateOrUpdateModuleAsync(string id, string mid, ModuleIdentity module, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.CreateOrUpdateModule");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateModuleAsync(id, mid, module, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update the module identity for device in IoT hub. The moduleId and generation cannot be updated by the user. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="module"> The module identity. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the module, as per RFC7232. Should not be set when creating module, but may be set when updating a module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ModuleIdentity> CreateOrUpdateModule(string id, string mid, ModuleIdentity module, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.CreateOrUpdateModule");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateModule(id, mid, module, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the module identity for device of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the deivce. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="ifMatch">  A string representing a weak ETag for the module, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the module has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteModuleAsync(string id, string mid, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.DeleteModule");
            scope.Start();
            try
            {
                return await RestClient.DeleteModuleAsync(id, mid, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the module identity for device of an IoT hub. </summary>
        /// <param name="id"> The unique identifier of the deivce. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="ifMatch">  A string representing a weak ETag for the module, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the module has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteModule(string id, string mid, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RegistryManagerClient.DeleteModule");
            scope.Start();
            try
            {
                return RestClient.DeleteModule(id, mid, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
