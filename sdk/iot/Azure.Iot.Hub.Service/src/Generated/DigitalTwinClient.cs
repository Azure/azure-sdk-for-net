// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.Iot.Hub.Service.Models;

namespace Azure.Iot.Hub.Service
{
    /// <summary> The DigitalTwin service client. </summary>
    internal partial class DigitalTwinClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DigitalTwinRestClient RestClient { get; }
        /// <summary> Initializes a new instance of DigitalTwinClient for mocking. </summary>
        protected DigitalTwinClient()
        {
        }
        /// <summary> Initializes a new instance of DigitalTwinClient. </summary>
        internal DigitalTwinClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "https://fully-qualified-iothubname.azure-devices.net", string apiVersion = "2020-03-13")
        {
            RestClient = new DigitalTwinRestClient(clientDiagnostics, pipeline, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get the list of interfaces. </summary>
        /// <param name="digitalTwinId"> The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DigitalTwinInterfaces>> GetComponentsAsync(string digitalTwinId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.GetComponents");
            scope.Start();
            try
            {
                return await RestClient.GetComponentsAsync(digitalTwinId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the list of interfaces. </summary>
        /// <param name="digitalTwinId"> The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DigitalTwinInterfaces> GetComponents(string digitalTwinId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.GetComponents");
            scope.Start();
            try
            {
                return RestClient.GetComponents(digitalTwinId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates desired properties of multiple interfaces. </summary>
        /// <param name="digitalTwinId"> The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfacesPatchInfo"> The JSON representation of the update patch. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for digital twin, as per RFC7232. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DigitalTwinInterfaces>> UpdateComponentAsync(string digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.UpdateComponent");
            scope.Start();
            try
            {
                return await RestClient.UpdateComponentAsync(digitalTwinId, interfacesPatchInfo, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates desired properties of multiple interfaces. </summary>
        /// <param name="digitalTwinId"> The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfacesPatchInfo"> The JSON representation of the update patch. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for digital twin, as per RFC7232. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DigitalTwinInterfaces> UpdateComponent(string digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.UpdateComponent");
            scope.Start();
            try
            {
                return RestClient.UpdateComponent(digitalTwinId, interfacesPatchInfo, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the interface. </summary>
        /// <param name="digitalTwinId"> The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfaceName"> The interface name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DigitalTwinInterfaces>> GetComponentAsync(string digitalTwinId, string interfaceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.GetComponent");
            scope.Start();
            try
            {
                return await RestClient.GetComponentAsync(digitalTwinId, interfaceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the interface. </summary>
        /// <param name="digitalTwinId"> The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional. </param>
        /// <param name="interfaceName"> The interface name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DigitalTwinInterfaces> GetComponent(string digitalTwinId, string interfaceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.GetComponent");
            scope.Start();
            try
            {
                return RestClient.GetComponent(digitalTwinId, interfaceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns a DigitalTwin model definition for the given id.
        /// 
        /// If &quot;expand&quot; is present in the query parameters and id is for a device capability model then it returns
        /// 
        /// the capability metamodel with expanded interface definitions.
        /// </summary>
        /// <param name="modelId"> Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;. </param>
        /// <param name="expand">
        /// Indicates whether to expand the device capability model&apos;s interface definitions inline or not.
        /// 
        /// This query parameter ONLY applies to Capability model.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> GetDigitalTwinModelAsync(string modelId, bool? expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.GetDigitalTwinModel");
            scope.Start();
            try
            {
                return await RestClient.GetDigitalTwinModelAsync(modelId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns a DigitalTwin model definition for the given id.
        /// 
        /// If &quot;expand&quot; is present in the query parameters and id is for a device capability model then it returns
        /// 
        /// the capability metamodel with expanded interface definitions.
        /// </summary>
        /// <param name="modelId"> Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;. </param>
        /// <param name="expand">
        /// Indicates whether to expand the device capability model&apos;s interface definitions inline or not.
        /// 
        /// This query parameter ONLY applies to Capability model.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> GetDigitalTwinModel(string modelId, bool? expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.GetDigitalTwinModel");
            scope.Start();
            try
            {
                return RestClient.GetDigitalTwinModel(modelId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Invoke a digital twin interface command. </summary>
        /// <param name="digitalTwinId"> The String to use. </param>
        /// <param name="interfaceName"> The String to use. </param>
        /// <param name="commandName"> The String to use. </param>
        /// <param name="payload"> The any to use. </param>
        /// <param name="connectTimeoutInSeconds"> Connect timeout in seconds. </param>
        /// <param name="responseTimeoutInSeconds"> Response timeout in seconds. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<object>> InvokeComponentCommandAsync(string digitalTwinId, string interfaceName, string commandName, object payload, int? connectTimeoutInSeconds = null, int? responseTimeoutInSeconds = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.InvokeComponentCommand");
            scope.Start();
            try
            {
                return await RestClient.InvokeComponentCommandAsync(digitalTwinId, interfaceName, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Invoke a digital twin interface command. </summary>
        /// <param name="digitalTwinId"> The String to use. </param>
        /// <param name="interfaceName"> The String to use. </param>
        /// <param name="commandName"> The String to use. </param>
        /// <param name="payload"> The any to use. </param>
        /// <param name="connectTimeoutInSeconds"> Connect timeout in seconds. </param>
        /// <param name="responseTimeoutInSeconds"> Response timeout in seconds. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<object> InvokeComponentCommand(string digitalTwinId, string interfaceName, string commandName, object payload, int? connectTimeoutInSeconds = null, int? responseTimeoutInSeconds = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DigitalTwinClient.InvokeComponentCommand");
            scope.Start();
            try
            {
                return RestClient.InvokeComponentCommand(digitalTwinId, interfaceName, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
