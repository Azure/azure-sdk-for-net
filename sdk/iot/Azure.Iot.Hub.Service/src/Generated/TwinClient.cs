// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.Iot.Hub.Service.Models;

namespace Azure.Iot.Hub.Service
{
    /// <summary> The Twin service client. </summary>
    public partial class TwinClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal TwinRestClient RestClient { get; }
        /// <summary> Initializes a new instance of TwinClient for mocking. </summary>
        protected TwinClient()
        {
        }
        /// <summary> Initializes a new instance of TwinClient. </summary>
        internal TwinClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "https://fully-qualified-iothubname.azure-devices.net", string apiVersion = "2020-03-13")
        {
            RestClient = new TwinRestClient(clientDiagnostics, pipeline, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the device twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TwinData>> GetDeviceTwinAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.GetDeviceTwin");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceTwinAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TwinData> GetDeviceTwin(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.GetDeviceTwin");
            scope.Start();
            try
            {
                return RestClient.GetDeviceTwin(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replaces the tags and desired properties of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="deviceTwinInfo"> The twin object that will replace the current device twin. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the replace operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TwinData>> ReplaceDeviceTwinAsync(string id, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.ReplaceDeviceTwin");
            scope.Start();
            try
            {
                return await RestClient.ReplaceDeviceTwinAsync(id, deviceTwinInfo, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replaces the tags and desired properties of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="deviceTwinInfo"> The twin object that will replace the current device twin. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the replace operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TwinData> ReplaceDeviceTwin(string id, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.ReplaceDeviceTwin");
            scope.Start();
            try
            {
                return RestClient.ReplaceDeviceTwin(id, deviceTwinInfo, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the tags and desired properties of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="deviceTwinInfo"> The twin object containing the tags and desired properties to be updated. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the update operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TwinData>> UpdateDeviceTwinAsync(string id, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.UpdateDeviceTwin");
            scope.Start();
            try
            {
                return await RestClient.UpdateDeviceTwinAsync(id, deviceTwinInfo, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the tags and desired properties of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="deviceTwinInfo"> The twin object containing the tags and desired properties to be updated. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the update operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TwinData> UpdateDeviceTwin(string id, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.UpdateDeviceTwin");
            scope.Start();
            try
            {
                return RestClient.UpdateDeviceTwin(id, deviceTwinInfo, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the module twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TwinData>> GetModuleTwinAsync(string id, string mid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.GetModuleTwin");
            scope.Start();
            try
            {
                return await RestClient.GetModuleTwinAsync(id, mid, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the module twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TwinData> GetModuleTwin(string id, string mid, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.GetModuleTwin");
            scope.Start();
            try
            {
                return RestClient.GetModuleTwin(id, mid, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replaces the tags and desired properties of a module. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="deviceTwinInfo"> The twin object that will replace the current module twin. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the replace operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TwinData>> ReplaceModuleTwinAsync(string id, string mid, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.ReplaceModuleTwin");
            scope.Start();
            try
            {
                return await RestClient.ReplaceModuleTwinAsync(id, mid, deviceTwinInfo, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replaces the tags and desired properties of a module. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="deviceTwinInfo"> The twin object that will replace the current module twin. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the replace operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TwinData> ReplaceModuleTwin(string id, string mid, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.ReplaceModuleTwin");
            scope.Start();
            try
            {
                return RestClient.ReplaceModuleTwin(id, mid, deviceTwinInfo, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the tags and desired properties of a module. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="deviceTwinInfo"> The twin object containing the tags and desired properties to be updated. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the update operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TwinData>> UpdateModuleTwinAsync(string id, string mid, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.UpdateModuleTwin");
            scope.Start();
            try
            {
                return await RestClient.UpdateModuleTwinAsync(id, mid, deviceTwinInfo, ifMatch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the tags and desired properties of a module. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information. </summary>
        /// <param name="id"> The unique identifier of the device. </param>
        /// <param name="mid"> The unique identifier of the module. </param>
        /// <param name="deviceTwinInfo"> The twin object containing the tags and desired properties to be updated. </param>
        /// <param name="ifMatch"> A string representing a weak ETag for the device twin, as per RFC7232. It determines if the update operation should be carried out. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TwinData> UpdateModuleTwin(string id, string mid, TwinData deviceTwinInfo, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TwinClient.UpdateModuleTwin");
            scope.Start();
            try
            {
                return RestClient.UpdateModuleTwin(id, mid, deviceTwinInfo, ifMatch, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
