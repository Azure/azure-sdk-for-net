{
  "swagger": "2.0",
  "info": {
    "version": "2020-03-13",
    "title": "IotHub Gateway Service APIs"
  },
  "host": "fully-qualified-iothubname.azure-devices.net",
  "schemes": [
    "https"
  ],
  "paths": {
    "/configurations/{id}": {
      "get": {
        "summary": "Retrieve a configuration for Iot Hub devices and modules by its identifier.",
        "description": "Get a configuration on IoT Hub for automatic device/module management.",
        "operationId": "Configuration_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the configuration."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Configuration.",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          }
        }
      },
      "put": {
        "summary": "Create or update the configuration for devices or modules of an IoT hub. An ETag must not be specified for the create operation. An ETag must be specified for the update operation. Note that configuration Id and Content cannot be updated by the user.",
        "description": "Create or update a configuration on IoT Hub for automatic device/module management. Configuration Id and Content cannot be updated.",
        "operationId": "Configuration_CreateOrUpdate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the configuration."
          },
          {
            "name": "configuration",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Configuration"
            },
            "description": "The configuration to be created or updated."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for configuration, as per RFC7232. Should not be set when creating a configuration, but may be set when updating a configuration."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated configuration",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "201": {
            "description": "Returns the created configuration",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the configuration for devices or modules of an IoT hub. This request requires the If-Match header. The client may specify the ETag for the device identity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The delete operation is performed only if the ETag sent by the client matches the value maintained by the server, indicating that the device identity has not been modified since it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard character (*).",
        "description": "Delete a configuration on IoT Hub for automatic device/module management",
        "operationId": "Configuration_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the configuration."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for configuration, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the configuration has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*)."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/configurations": {
      "get": {
        "summary": "Get multiple configurations for devices or modules of an IoT Hub. Returns the specified number of configurations for Iot Hub. Pagination is not supported.",
        "description": "Get multiple configurations on IoT Hub for automatic device/module management",
        "operationId": "Configuration_GetConfigurations",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "top",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of configurations to retrieve. TODO: Ask service team if this value can be overriden if too large"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of configurations. Pagination is not supported.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Configuration"
              }
            }
          }
        }
      }
    },
    "/configurations/testQueries": {
      "post": {
        "summary": "Validates the target condition query and custom metric queries for a configuration.",
        "description": "Validate the target condition and custom metric queries for a configuration on IoT Hub.",
        "operationId": "Configuration_TestQueries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationQueriesTestInput"
            },
            "description": "Configuration query for target condition or custom metrics."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the configuration queries test response.",
            "schema": {
              "$ref": "#/definitions/ConfigurationQueriesTestResponse"
            }
          }
        }
      }
    },
    "/statistics/devices": {
      "get": {
        "summary": "Retrieves statistics about device identities in the IoT hub's identity registry.",
        "description": "Get statistics about device identities in the IoT hub's identity registry, such as total device count.",
        "operationId": "RegistryManager_GetDeviceStatistics",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegistryStatistics"
            }
          }
        }
      }
    },
    "/statistics/service": {
      "get": {
        "summary": "Retrieves service statistics for this IoT hub's identity registry.",
        "description": "Retrieves device statistics for this IoT hub, such as connected device count.",
        "operationId": "RegistryManager_GetServiceStatistics",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServiceStatistics"
            }
          }
        }
      }
    },
    "/devices": {
      "get": {
        "summary": "Get the identities of multiple devices from the IoT hub identity registry. Not recommended. Use the IoT Hub query language to retrieve device twin and device identity information. See https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more information.",
        "description": "Get the identities of multiple devices from the IoT hub identity registry. Not recommended. Use the IoT Hub query API to retrieve device twin and device identity information. See https://docs.microsoft.com/en-us/rest/api/iothub/service/queryiothub and https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language for more information.",
        "operationId": "RegistryManager_GetDevices",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "top",
            "in": "query",
            "description": "This parameter when specified, defines the maximum number of device identities that are returned. Any value outside the range of 1-1000 is considered to be 1000.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Device"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create, update, or delete the identities of multiple devices from the IoT hub identity registry.",
        "description": "Create, update, or delete the identiies of multiple devices from the IoT hub identity registry. A device identity can be specified only once in the list. Different operations (create, update, delete) on different devices are allowed. A maximum of 100 devices can be specified per invocation. For large scale operations, consider using the import feature using blob storage(https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities).",
        "operationId": "RegistryManager_BulkDeviceCRUD",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "devices",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExportImportDevice"
              },
              "description": "The set of registry operations to perform."
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkRegistryOperationResult"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/BulkRegistryOperationResult"
            }
          }
        }
      }
    },
    "/devices/query": {
      "post": {
        "summary": "Query an IoT hub to retrieve information regarding device twins using a SQL-like language.",
        "description": "Query an IoT hub to retrieve information regarding device twins using a SQL-like language. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information. Pagination is supported. This returns information about device twins only.",
        "operationId": "RegistryManager_QueryIotHub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "querySpecification",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuerySpecification"
            },
            "description": "The query string to run. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information."
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "x-ms-continuation",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "The continuation token to get the next page of results."
          },
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "The maximum number of items to return per page. The service may use a different value if the value specified is not acceptable."
          }
        ],
        "responses": {
          "200": {
            "description": "Query result with continuation token, if applicable.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Twin"
              }
            },
            "headers": {
              "x-ms-item-type": {
                "description": "Type of the list of items.",
                "type": "string"
              },
              "x-ms-continuation": {
                "description": "Continuation token",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/devices/{id}": {
      "get": {
        "summary": "Retrieve a device from the identity registry of an IoT hub.",
        "description": "Get a device from the identity registry of an IoT hub.",
        "operationId": "RegistryManager_GetDevice",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Device.",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      },
      "put": {
        "summary": "Create or update the identity of a device in the identity registry of an IoT hub.",
        "description": "Create or update the identity of a device in the identity registry of an IoT hub.",
        "operationId": "RegistryManager_CreateOrUpdateDevice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device to create",
            "required": true,
            "type": "string"
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Device"
            },
            "description": "The contents of the device to create."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the device identity, as per RFC7232. Should not be set when creating a device, but may be set when updating a device."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Device",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the identity of a device from the identity registry of an IoT hub.",
        "description": "Delete the identity of a device from the identity registry of an IoT hub.",
        "operationId": "RegistryManager_DeleteDevice",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the device identity, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the device identity has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*)."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/devices/{id}/applyConfigurationContent": {
      "post": {
        "summary": "Applies the provided configuration content to the specified edge device.",
        "description": "Apply the provided configuration content to the specified edge device.",
        "operationId": "Configuration_ApplyOnEdgeDevice",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "content",
            "in": "body",
            "description": "Configuration Content.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationContent"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/jobs/create": {
      "post": {
        "summary": "Create a new import/export job on an IoT hub.",
        "description": "Create a new import or export job on IoT Hub. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities for more information.",
        "operationId": "JobClient_CreateImportExportJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobProperties",
            "in": "body",
            "description": "Specifies the job specification.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobProperties"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the JobProperties",
            "schema": {
              "$ref": "#/definitions/JobProperties"
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "Gets the status of all import/export jobs in an iot hub",
        "description": "Get the status of all import and export jobs in IoT Hub. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities for more information.",
        "operationId": "JobClient_GetImportExportJobs",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of JobProperties",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobProperties"
              }
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "summary": "Gets the status of an import or export job in an iot hub",
        "description": "Get the status of an import or export job in IoT Hub. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities for more information.",
        "operationId": "JobClient_GetImportExportJob",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the JobProperties",
            "schema": {
              "$ref": "#/definitions/JobProperties"
            }
          }
        }
      },
      "delete": {
        "summary": "Cancels an import or export job in an IoT hub.",
        "description": "Cancels an import or export job in IoT Hub.",
        "operationId": "JobClient_CancelImportExportJob",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/devices/{id}/commands": {
      "delete": {
        "summary": "Deletes all the pending commands for this device from the IoT hub.",
        "description": "Deletes all the pending commands for this device from the IoT hub.",
        "operationId": "RegistryManager_PurgeCommandQueue",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PurgeMessageQueueResult"
            }
          }
        }
      }
    },
    "/faultInjection": {
      "get": {
        "summary": "Get FaultInjection entity",
        "description": "Get FaultInjection entity.",
        "operationId": "FaultInjection_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FaultInjectionProperties"
            }
          }
        }
      },
      "put": {
        "summary": "Create or update FaultInjection entity",
        "description": "Create or update FaultInjection entity.",
        "operationId": "FaultInjection_Set",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaultInjectionProperties"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/twins/{id}": {
      "get": {
        "summary": "Gets a device twin.",
        "description": "Gets the device twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.",
        "operationId": "Twin_GetDeviceTwin",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          }
        }
      },
      "put": {
        "summary": "Replaces tags and desired properties of a device twin.",
        "description": "Replaces the tags and desired properties of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.",
        "operationId": "Twin_ReplaceDeviceTwin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceTwinInfo",
            "in": "body",
            "description": "The twin object that will replace the current device twin.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the device twin, as per RFC7232. It determines if the replace operation should be carried out."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated device twin.",
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates tags and desired properties of a device twin.",
        "description": "Updates the tags and desired properties of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.",
        "operationId": "Twin_UpdateDeviceTwin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceTwinInfo",
            "in": "body",
            "description": "The twin object containing the tags and desired properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the device twin, as per RFC7232. It determines if the update operation should be carried out."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated device twin.",
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          }
        }
      }
    },
    "/twins/{id}/modules/{mid}": {
      "get": {
        "summary": "Gets a module twin.",
        "description": "Gets the module twin. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.",
        "operationId": "Twin_GetModuleTwin",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device",
            "required": true,
            "type": "string"
          },
          {
            "name": "mid",
            "in": "path",
            "description": "The unique identifier of the module",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The module state information.",
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          }
        }
      },
      "put": {
        "summary": "Replaces tags and desired properties of a module twin.",
        "description": "Replaces the tags and desired properties of a module. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.",
        "operationId": "Twin_ReplaceModuleTwin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mid",
            "in": "path",
            "description": "The unique identifier of the module.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceTwinInfo",
            "in": "body",
            "description": "The twin object that will replace the current module twin.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the device twin, as per RFC7232. It determines if the replace operation should be carried out."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated module twin.",
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates tags and desired properties of a module twin.",
        "description": "Updates the tags and desired properties of a module. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins for more information.",
        "operationId": "Twin_UpdateModuleTwin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mid",
            "in": "path",
            "description": "The unique identifier of the module.",
            "required": true,
            "type": "string"
          },
          {
            "name": "deviceTwinInfo",
            "in": "body",
            "description": "The twin object containing the tags and desired properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the device twin, as per RFC7232. It determines if the update operation should be carried out."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated module twin.",
            "schema": {
              "$ref": "#/definitions/Twin"
            }
          }
        }
      }
    },
    "/digitalTwins/{digitalTwinId}/interfaces": {
      "get": {
        "summary": "Gets the list of interfaces.",
        "description": "Get the list of interfaces.",
        "operationId": "DigitalTwin_GetComponents",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "digitalTwinId",
            "in": "path",
            "description": "The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of interfaces",
            "schema": {
              "$ref": "#/definitions/DigitalTwinInterfaces"
            },
            "headers": {
              "ETag": {
                "description": "ETag of the digital twin.",
                "type": "string"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Updates desired properties of multiple interfaces.\r\n            Example URI: \"digitalTwins/{digitalTwinId}/interfaces\"",
        "description": "Updates desired properties of multiple interfaces.",
        "operationId": "DigitalTwin_UpdateComponent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "digitalTwinId",
            "in": "path",
            "description": "The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.",
            "required": true,
            "type": "string"
          },
          {
            "name": "interfacesPatchInfo",
            "in": "body",
            "description": "The JSON representation of the update patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DigitalTwinInterfacesPatch"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for digital twin, as per RFC7232"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns multiple interfaces",
            "schema": {
              "$ref": "#/definitions/DigitalTwinInterfaces"
            },
            "headers": {
              "ETag": {
                "description": "ETag of the digital twin.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/digitalTwins/{digitalTwinId}/interfaces/{interfaceName}": {
      "get": {
        "summary": "Gets the interface of given interfaceId.\r\n            Example URI: \"digitalTwins/{digitalTwinId}/interfaces/{interfaceName}\"",
        "description": "Get the interface.",
        "operationId": "DigitalTwin_GetComponent",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "digitalTwinId",
            "in": "path",
            "description": "The unique identifier of the digital twin. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.",
            "required": true,
            "type": "string"
          },
          {
            "name": "interfaceName",
            "in": "path",
            "description": "The interface name.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the interface",
            "schema": {
              "$ref": "#/definitions/DigitalTwinInterfaces"
            },
            "headers": {
              "ETag": {
                "description": "ETag of the digital twin.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/messages/serviceBound/feedback": {
      "get": {
        "summary": "This method is used to retrieve feedback of a cloud-to-device message.",
        "description": "This method is used to retrieve feedback for cloud-to-device messages. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information. This capability is only available in the standard tier IoT Hub. For more information, see [Choose the right IoT Hub tier](https://aka.ms/scaleyouriotsolution).",
        "operationId": "HttpRuntime_ReceiveFeedbackNotification",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The feedback response of a cloud-to-device message"
          },
          "204": {
            "description": "No Content Sent if feedback queue is empty"
          }
        }
      }
    },
    "/messages/serviceBound/feedback/{lockToken}": {
      "delete": {
        "summary": "This method completes a feedback message.",
        "description": "This method completes a cloud-to-device feedback message. A completed message is deleted from the service's feedback queue. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information.",
        "operationId": "HttpRuntime_CompleteFeedbackNotification",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "lockToken",
            "in": "path",
            "description": "The lock token obtained when the C2D message was received, and provided to resolve race conditions when completing a feedback message.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/messages/serviceBound/feedback/{lockToken}/abandon": {
      "post": {
        "summary": "This method abandons a feedback message.",
        "description": "This method abandons a cloud-to-device feedback message. An abandoned message is deleted from the service's feedback queue. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging for more information.",
        "operationId": "HttpRuntime_AbandonFeedbackNotification",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "lockToken",
            "in": "path",
            "description": "The lock token obtained when the C2D message was received, and provided to resolve race conditions when abandoning a feedback message.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/jobs/v2/{id}": {
      "get": {
        "summary": "Retrieves details of a scheduled job from an IoT hub.",
        "description": "Retrieves details of a scheduled job from IoT hub. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs for more information.",
        "operationId": "JobClient_GetJob",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the job details.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Creates a new job to schedule update twins or device direct methods on an IoT hub at a scheduled time.",
        "description": "Creates a new job to schedule twin updates or direct methods on IoT Hub at a scheduled time. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs for more information.",
        "operationId": "JobClient_CreateJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the job.",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobRequest"
            },
            "description": "The job to be created."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the job response.",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          }
        }
      }
    },
    "/jobs/v2/{id}/cancel": {
      "post": {
        "summary": "Cancels a scheduled job on an IoT hub.",
        "description": "Cancels a scheduled job on IoT Hub. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs for more information.",
        "operationId": "JobClient_CancelJob",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the job.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the job response",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            }
          }
        }
      }
    },
    "/jobs/v2/query": {
      "get": {
        "summary": "Query an IoT hub to retrieve information regarding jobs using the IoT Hub query language",
        "description": "Query IoT hub to retrieve information regarding jobs using the IoT Hub query language. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language for more information.",
        "operationId": "JobClient_QueryJobs",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobType",
            "in": "query",
            "description": "The job type. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs#querying-for-progress-on-jobs for a list of possible job types.",
            "required": false,
            "type": "string"
          },
          {
            "name": "jobStatus",
            "in": "query",
            "description": "The job status. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-jobs#querying-for-progress-on-jobs for a list of possible statuses.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Query Result.",
            "schema": {
              "$ref": "#/definitions/QueryResult"
            }
          }
        }
      }
    },
    "/devices/{id}/modules": {
      "get": {
        "summary": "Retrieve all the module identities on the device.",
        "description": "Get all the module identities of the device.",
        "operationId": "RegistryManager_GetModulesOnDevice",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all the modules of the device.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Module"
              }
            }
          }
        }
      }
    },
    "/devices/{id}/modules/{mid}": {
      "get": {
        "summary": "Retrieve the specified module identity on the device.",
        "description": "Get the specified module identity of the device.",
        "operationId": "RegistryManager_GetModule",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mid",
            "in": "path",
            "description": "The unique identifier of the module.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the module.",
            "schema": {
              "$ref": "#/definitions/Module"
            }
          }
        }
      },
      "put": {
        "summary": "Create or update the module identity for device in IoT hub. An ETag must not be specified for the create operation. An ETag must be specified for the update operation. Note that moduleId and generation cannot be updated by the user.",
        "description": "Create or update the module identity for device in IoT hub. The moduleId and generation cannot be updated by the user.",
        "operationId": "RegistryManager_CreateOrUpdateModule",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the device.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mid",
            "in": "path",
            "description": "The unique identifier of the module.",
            "required": true,
            "type": "string"
          },
          {
            "name": "module",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Module"
            },
            "description": "The module identity."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "A string representing a weak ETag for the module, as per RFC7232. Should not be set when creating module, but may be set when updating a module"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated module.",
            "schema": {
              "$ref": "#/definitions/Module"
            }
          },
          "201": {
            "description": "Returns the created module.",
            "schema": {
              "$ref": "#/definitions/Module"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the module identity for device of an IoT hub. This request requires the If-Match header. The client may specify the ETag for the device identity on the request in order to compare to the ETag maintained by the service for the purpose of optimistic concurrency. The delete operation is performed only if the ETag sent by the client matches the value maintained by the server, indicating that the device identity has not been modified since it was retrieved by the client. To force an unconditional delete, set If-Match to the wildcard character (*).",
        "description": "Delete the module identity for device of an IoT hub.",
        "operationId": "RegistryManager_DeleteModule",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the deivce.",
            "required": true,
            "type": "string"
          },
          {
            "name": "mid",
            "in": "path",
            "description": "The unique identifier of the module.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": " A string representing a weak ETag for the module, as per RFC7232. The delete operation is performed only if this ETag matches the value maintained by the server, indicating that the module has not been modified since it was last retrieved. To force an unconditional delete, set If-Match to the wildcard character (*)."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/digitalTwins/models/{modelId}": {
      "get": {
        "summary": "Returns a DigitalTwin model definition for the given id.\r\nIf \"expand\" is present in the query parameters and id is for a device capability model then it returns\r\nthe capability metamodel with expanded interface definitions.",
        "description": "Returns a DigitalTwin model definition for the given id.\r\nIf \"expand\" is present in the query parameters and id is for a device capability model then it returns\r\nthe capability metamodel with expanded interface definitions.",
        "operationId": "DigitalTwin_GetDigitalTwinModel",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Model id Ex: <example>urn:contoso:TemperatureSensor:1</example>",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Indicates whether to expand the device capability model's interface definitions inline or not.\r\nThis query parameter ONLY applies to Capability model.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the digital twin model",
            "schema": {
              "type": "object"
            },
            "headers": {
              "ETag": {
                "description": "ETag of the digital twin.",
                "type": "string"
              },
              "x-ms-model-id": {
                "description": "Digital twin model id.",
                "type": "string"
              },
              "x-ms-model-resolution-status": {
                "description": "Digital twin model resolution status: enum [Pending, Success, NotFound, Failed, Resolved, Deleted]",
                "type": "string"
              },
              "x-ms-model-resolution-description": {
                "description": "Digital twin model resolution status description.",
                "type": "string"
              }
            }
          },
          "204": {
            "description": "Model is not resolved, See the 'x-ms-model-resolution-description' and 'x-ms-model-resolution-status' for the resolution status code and description.",
            "headers": {
              "ETag": {
                "description": "ETag of the digital twin.",
                "type": "string"
              },
              "x-ms-model-id": {
                "description": "Digital twin model id.",
                "type": "string"
              },
              "x-ms-model-resolution-status": {
                "description": "Digital twin model resolution status: enum [Pending, Success, NotFound, Failed, Resolved, Deleted]",
                "type": "string"
              },
              "x-ms-model-resolution-description": {
                "description": "Digital twin model resolution status description.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/twins/{deviceId}/methods": {
      "post": {
        "summary": "Invoke a direct method on a device.",
        "description": "Invoke a direct method on a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information.",
        "operationId": "DeviceMethod_InvokeDeviceMethod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the device."
          },
          {
            "name": "directMethodRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudToDeviceMethod"
            },
            "description": "Parameters to execute a direct method on the device."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The direct method response payload.",
            "schema": {
              "$ref": "#/definitions/CloudToDeviceMethodResult"
            }
          }
        }
      }
    },
    "/twins/{deviceId}/modules/{moduleId}/methods": {
      "post": {
        "summary": "Invoke a direct method on a module of a device.",
        "description": "Invoke a direct method on a module of a device. See https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods for more information.",
        "operationId": "DeviceMethod_InvokeModuleMethod",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the device."
          },
          {
            "name": "moduleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the module."
          },
          {
            "name": "directMethodRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudToDeviceMethod"
            },
            "description": "Parameters to execute a direct method on the module."
          },
          {
            "$ref": "#/parameters/api-version"
          }
        ],
        "responses": {
          "200": {
            "description": "The direct method response payload.",
            "schema": {
              "$ref": "#/definitions/CloudToDeviceMethodResult"
            }
          }
        }
      }
    },
    "/digitalTwins/{digitalTwinId}/interfaces/{interfaceName}/commands/{commandName}": {
      "post": {
        "summary": "Invoke a digital twin interface command.",
        "description": "Invoke a digital twin interface command.",
        "operationId": "DigitalTwin_InvokeComponentCommand",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "digitalTwinId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "interfaceName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commandName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "description": "The Request Payload",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/api-version"
          },
          {
            "name": "connectTimeoutInSeconds",
            "in": "query",
            "description": "Connect timeout in seconds.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "responseTimeoutInSeconds",
            "in": "query",
            "description": "Response timeout in seconds.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the digital twin command response payload",
            "schema": {
              "description": "The Response Payload",
              "type": "object"
            },
            "headers": {
              "x-ms-command-statuscode": {
                "description": "Device Generated Status Code for this Operation",
                "type": "integer",
                "format": "int32"
              },
              "x-ms-request-id": {
                "description": "Server Generated Request Id (GUID), to uniquely identify this request in the service",
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ConfigurationMetrics": {
      "description": "Configuration Metrics for IotHub devices and modules.",
      "type": "object",
      "properties": {
        "results": {
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          },
          "description": "TODO: Service to fill in"
        },
        "queries": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "TODO: Service to fill in"
        }
      }
    },
    "Configuration": {
      "description": "Configuration for IotHub devices and modules.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique identifier of the configuration.",
          "type": "string"
        },
        "schemaVersion": {
          "description": "Schema version of the configuration",
          "type": "string"
        },
        "labels": {
          "description": "Key-value pairs used to describe a configuration",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "content": {
          "$ref": "#/definitions/ConfigurationContent",
          "description": "Content of the configuration."
        },
        "targetCondition": {
          "description": "The query used to define targeted devices or modules. The query is based on twin tags and/or reported properties",
          "type": "string"
        },
        "createdTimeUtc": {
          "format": "date-time",
          "description": "Creation time of the configuration.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedTimeUtc": {
          "format": "date-time",
          "description": "Update time of the configuration.",
          "type": "string",
          "readOnly": true
        },
        "priority": {
          "format": "int32",
          "description": "The priority number assigned to the configuration.",
          "type": "integer"
        },
        "systemMetrics": {
          "$ref": "#/definitions/ConfigurationMetrics",
          "description": "Metrics calculated by IoT Hub that cannot be customized."
        },
        "metrics": {
          "$ref": "#/definitions/ConfigurationMetrics",
          "description": "Custom metrics specified by developer as queries against twin reported properties"
        },
        "etag": {
          "description": "ETag of the configuration",
          "type": "string"
        }
      }
    },
    "ConfigurationContent": {
      "description": "Configuration Content for Devices or Modules on Edge Devices.",
      "type": "object",
      "properties": {
        "deviceContent": {
          "description": "Device Configurations",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "modulesContent": {
          "description": "Modules configuration content",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "moduleContent": {
          "description": "Module configuration content",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ConfigurationQueriesTestInput": {
      "type": "object",
      "properties": {
        "targetCondition": {
          "type": "string",
          "description": "The query used to define targeted devices or modules. The query is based on twin tags and/or reported properties"
        },
        "customMetricQueries": {
          "type": "string",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Queries on twin reported properties"
        }
      }
    },
    "ConfigurationQueriesTestResponse": {
      "type": "object",
      "properties": {
        "targetConditionError": {
          "type": "string",
          "description": "Errors running the target condition query."
        },
        "customMetricQueryErrors": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "description": "Errors running the custom metric query."
          }
        }
      }
    },
    "RegistryStatistics": {
      "type": "object",
      "properties": {
        "totalDeviceCount": {
          "format": "int64",
          "type": "integer",
          "readOnly": true,
          "description": "The total number of devices registered for this hub."
        },
        "enabledDeviceCount": {
          "format": "int64",
          "type": "integer",
          "readOnly": true,
          "description": "The number of currently enabled devices."
        },
        "disabledDeviceCount": {
          "format": "int64",
          "type": "integer",
          "readOnly": true,
          "description": "The number of currently disabled devices."
        }
      }
    },
    "ServiceStatistics": {
      "type": "object",
      "properties": {
        "connectedDeviceCount": {
          "format": "int64",
          "type": "integer",
          "readOnly": true,
          "description": "The number of currently connected devices."
        }
      }
    },
    "Device": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "description": "The unique identifier of this device."
        },
        "generationId": {
          "type": "string",
          "readOnly": true,
          "description": "An IoT hub-generated, case-sensitive string up to 128 characters long. This value is used to distinguish devices with the same deviceId, when they have been deleted and re-created."
        },
        "etag": {
          "type": "string",
          "description": "A string representing a weak ETag for the device identity, as per RFC7232."
        },
        "connectionState": {
          "enum": [
            "Disconnected",
            "Connected"
          ],
          "type": "string",
          "readOnly": true,
          "description": "Tells whether the device is connected or not."
        },
        "status": {
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "description": "Flags whether a device is enabled or not. If disabled, a device cannot connect to the service."
        },
        "statusReason": {
          "type": "string",
          "description": "A 128 character-long string that stores the reason for the device identity status. All UTF-8 characters are allowed."
        },
        "connectionStateUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "description": "A temporal indicator, showing the date and last time the connection state was updated."
        },
        "statusUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "description": "The last timestamp of when the status field was updated."
        },
        "lastActivityTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "description": "A temporal indicator, showing the date and last time the device connected, received, or sent a message."
        },
        "cloudToDeviceMessageCount": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "description": "The number of cloud to device messages currently queued to be sent to the device."
        },
        "authentication": {
          "$ref": "#/definitions/AuthenticationMechanism",
          "description": "The details on what authentication mechanisms are used by this device."
        },
        "capabilities": {
          "$ref": "#/definitions/DeviceCapabilities",
          "description": "The set of capabilities that this device has. For example, if this device is an edge device or not."
        },
        "deviceScope": {
          "type": "string",
          "description": "The scope that this device belongs to."
        },
        "parentScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "TODO: service team needs to explain this"
        }
      },
      "required": [
        "id"
      ]
    },
    "AuthenticationMechanism": {
      "type": "object",
      "properties": {
        "symmetricKey": {
          "$ref": "#/definitions/SymmetricKey",
          "description": "The primary and secondary keys used for SAS based authentication."
        },
        "x509Thumbprint": {
          "$ref": "#/definitions/X509Thumbprint",
          "description": "The primary and secondary x509 thumbprints used for x509 based authentication."
        },
        "type": {
          "enum": [
            "sas",
            "selfSigned",
            "certificateAuthority",
            "none"
          ],
          "type": "string",
          "description": "The type of authentication used when connecting to the service."
        }
      }
    },
    "DeviceCapabilities": {
      "description": "Status of Capabilities enabled on the device",
      "type": "object",
      "properties": {
        "iotEdge": {
          "type": "boolean",
          "description": "Whether or not this device is an edge device."
        }
      }
    },
    "SymmetricKey": {
      "type": "object",
      "properties": {
        "primaryKey": {
          "type": "string",
          "description": "The base 64 encoded primary key of your device."
        },
        "secondaryKey": {
          "type": "string",
          "description": "The base 64 encoded secondary key of your device."
        }
      }
    },
    "X509Thumbprint": {
      "type": "object",
      "properties": {
        "primaryThumbprint": {
          "type": "string",
          "description": "Gets and sets the X509 client certificate primary thumbprint."
        },
        "secondaryThumbprint": {
          "type": "string",
          "description": "Gets and sets the X509 client certificate secondary thumbprint."
        }
      }
    },
    "ExportImportDevice": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the device to perform this operation on.",
          "type": "string"
        },
        "moduleId": {
          "description": "Identifier of the module to perform this operation on, if applicable.",
          "type": "string"
        },
        "eTag": {
          "description": "ETag parameter is only used for pre-conditioning the update when importMode is updateIfMatchETag",
          "type": "string"
        },
        "importMode": {
          "enum": [
            "create",
            "update",
            "updateIfMatchETag",
            "delete",
            "deleteIfMatchETag",
            "updateTwin",
            "updateTwinIfMatchETag"
          ],
          "type": "string",
          "description": "The type of registry operation and if ETag should be ignored or not."
        },
        "status": {
          "description": "Flags whether a module is enabled or not. If disabled, a module cannot connect to the service.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string"
        },
        "statusReason": {
          "type": "string",
          "description": "A 128 character-long string that stores the reason for the device identity status. All UTF-8 characters are allowed."
        },
        "authentication": {
          "$ref": "#/definitions/AuthenticationMechanism",
          "description": "Authentication parameter is optional and defaults to SAS if not provided. In that case, we auto-generate primary/secondary access keys."
        },
        "twinETag": {
          "description": "twinETag parameter is only used for pre-conditioning the update when importMode is updateTwinIfMatchETag.",
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "A JSON document read and written by the solution back end. Tags are not visible to device apps."
          }
        },
        "properties": {
          "$ref": "#/definitions/PropertyContainer",
          "description": "TODO need service folks to explain this."
        },
        "capabilities": {
          "$ref": "#/definitions/DeviceCapabilities",
          "description": "Status of capabilities enabled on the device."
        },
        "deviceScope": {
          "type": "string",
          "description": "The scope that this identity belongs to."
        },
        "parentScopes": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "TODO service folks need to explain this."
          },
          "description": "TODO: service team needs to explain this"
        }
      },
      "required": [
        "id"
      ]
    },
    "PropertyContainer": {
      "description": "Represents Twin properties",
      "type": "object",
      "properties": {
        "desired": {
          "description": "Used in conjunction with reported properties to synchronize device configuration or condition. Desired properties can only be set by the solution back end and can be read by the device app. The device app can also be notified in real time of changes on the desired properties.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "reported": {
          "description": "Used in conjunction with desired properties to synchronize device configuration or condition. Reported properties can only be set by the device app and can be read and queried by the solution back end.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "BulkRegistryOperationResult": {
      "description": "Encapsulates the result of a bulk registry operation.",
      "type": "object",
      "properties": {
        "isSuccessful": {
          "description": "Whether or not the operation was successful.",
          "type": "boolean",
          "readOnly": true
        },
        "errors": {
          "description": "If the operation was not successful, this contains an array of DeviceRegistryOperationError objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceRegistryOperationError"
          },
          "readOnly": true
        },
        "warnings": {
          "description": "If the operation was partially successful, this contains an array of DeviceRegistryOperationWarning objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceRegistryOperationWarning"
          },
          "readOnly": true
        }
      }
    },
    "DeviceRegistryOperationError": {
      "description": "Encapsulates device registry operation error details.",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Identifier of the device that indicated the error.",
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "description": "ErrorCode associated with the error.",
          "enum": [
            "InvalidErrorCode",
            "GenericBadRequest",
            "InvalidProtocolVersion",
            "DeviceInvalidResultCount",
            "InvalidOperation",
            "ArgumentInvalid",
            "ArgumentNull",
            "IotHubFormatError",
            "DeviceStorageEntitySerializationError",
            "BlobContainerValidationError",
            "ImportWarningExistsError",
            "InvalidSchemaVersion",
            "DeviceDefinedMultipleTimes",
            "DeserializationError",
            "BulkRegistryOperationFailure",
            "DefaultStorageEndpointNotConfigured",
            "InvalidFileUploadCorrelationId",
            "ExpiredFileUploadCorrelationId",
            "InvalidStorageEndpoint",
            "InvalidMessagingEndpoint",
            "InvalidFileUploadCompletionStatus",
            "InvalidStorageEndpointOrBlob",
            "RequestCanceled",
            "InvalidStorageEndpointProperty",
            "EtagDoesNotMatch",
            "RequestTimedOut",
            "UnsupportedOperationOnReplica",
            "NullMessage",
            "ConnectionForcefullyClosedOnNewConnection",
            "InvalidDeviceScope",
            "ConnectionForcefullyClosedOnFaultInjection",
            "ConnectionRejectedOnFaultInjection",
            "InvalidEndpointAuthenticationType",
            "ManagedIdentityNotEnabled",
            "InvalidRouteTestInput",
            "InvalidSourceOnRoute",
            "RoutingNotEnabled",
            "InvalidContentEncodingOrType",
            "InvalidEndorsementKey",
            "InvalidRegistrationId",
            "InvalidStorageRootKey",
            "InvalidEnrollmentGroupId",
            "TooManyEnrollments",
            "RegistrationIdDefinedMultipleTimes",
            "CustomAllocationFailed",
            "CustomAllocationIotHubNotSpecified",
            "CustomAllocationUnauthorizedAccess",
            "CannotRegisterModuleToModule",
            "TenantHubRoutingNotEnabled",
            "InvalidConfigurationTargetCondition",
            "InvalidConfigurationContent",
            "CannotModifyImmutableConfigurationContent",
            "InvalidConfigurationCustomMetricsQuery",
            "InvalidPnPInterfaceDefinition",
            "InvalidPnPDesiredProperties",
            "InvalidPnPReportedProperties",
            "InvalidPnPWritableReportedProperties",
            "InvalidDigitalTwinJsonPatch",
            "InvalidDigitalTwinPayload",
            "InvalidDigitalTwinPatch",
            "InvalidDigitalTwinPatchPath",
            "GenericUnauthorized",
            "IotHubNotFound",
            "IotHubUnauthorizedAccess",
            "IotHubUnauthorized",
            "ElasticPoolNotFound",
            "SystemModuleModifyUnauthorizedAccess",
            "GenericForbidden",
            "IotHubSuspended",
            "IotHubQuotaExceeded",
            "JobQuotaExceeded",
            "DeviceMaximumQueueDepthExceeded",
            "IotHubMaxCbsTokenExceeded",
            "DeviceMaximumActiveFileUploadLimitExceeded",
            "DeviceMaximumQueueSizeExceeded",
            "RoutingEndpointResponseForbidden",
            "InvalidMessageExpiryTime",
            "OperationNotAvailableInCurrentTier",
            "KeyEncryptionKeyRevoked",
            "DeviceModelMaxPropertiesExceeded",
            "DeviceModelMaxIndexablePropertiesExceeded",
            "IotDpsSuspended",
            "IotDpsSuspending",
            "GenericNotFound",
            "DeviceNotFound",
            "JobNotFound",
            "QuotaMetricNotFound",
            "SystemPropertyNotFound",
            "AmqpAddressNotFound",
            "RoutingEndpointResponseNotFound",
            "CertificateNotFound",
            "ElasticPoolTenantHubNotFound",
            "ModuleNotFound",
            "AzureTableStoreNotFound",
            "IotHubFailingOver",
            "FeatureNotSupported",
            "DigitalTwinInterfaceNotFound",
            "QueryStoreClusterNotFound",
            "DeviceNotOnline",
            "DeviceConnectionClosedRemotely",
            "EnrollmentNotFound",
            "DeviceRegistrationNotFound",
            "AsyncOperationNotFound",
            "EnrollmentGroupNotFound",
            "DeviceRecordNotFound",
            "GroupRecordNotFound",
            "DeviceGroupNotFound",
            "ProvisioningSettingsNotFound",
            "ProvisioningRecordNotFound",
            "LinkedHubNotFound",
            "CertificateAuthorityNotFound",
            "ConfigurationNotFound",
            "GroupNotFound",
            "DigitalTwinModelNotFound",
            "InterfaceNameModelNotFound",
            "GenericMethodNotAllowed",
            "OperationNotAllowedInCurrentState",
            "ImportDevicesNotSupported",
            "BulkAddDevicesNotSupported",
            "GenericConflict",
            "DeviceAlreadyExists",
            "LinkCreationConflict",
            "CallbackSubscriptionConflict",
            "ModelAlreadyExists",
            "DeviceLocked",
            "DeviceJobAlreadyExists",
            "JobAlreadyExists",
            "EnrollmentConflict",
            "EnrollmentGroupConflict",
            "RegistrationStatusConflict",
            "DeviceRecordConflict",
            "GroupRecordConflict",
            "DeviceGroupConflict",
            "ProvisioningSettingsConflict",
            "ProvisioningRecordConflict",
            "LinkedHubConflict",
            "CertificateAuthorityConflict",
            "ModuleAlreadyExistsOnDevice",
            "ConfigurationAlreadyExists",
            "ApplyConfigurationAlreadyInProgressOnDevice",
            "DigitalTwinModelAlreadyExists",
            "DigitalTwinModelExistsWithOtherModelType",
            "InterfaceNameModelAlreadyExists",
            "GenericPreconditionFailed",
            "PreconditionFailed",
            "DeviceMessageLockLost",
            "JobRunPreconditionFailed",
            "InflightMessagesInLink",
            "GenericRequestEntityTooLarge",
            "MessageTooLarge",
            "TooManyDevices",
            "TooManyModulesOnDevice",
            "ConfigurationCountLimitExceeded",
            "DigitalTwinModelCountLimitExceeded",
            "InterfaceNameCompressionModelCountLimitExceeded",
            "GenericUnsupportedMediaType",
            "IncompatibleDataType",
            "GenericTooManyRequests",
            "ThrottlingException",
            "ThrottleBacklogLimitExceeded",
            "ThrottlingBacklogTimeout",
            "ThrottlingMaxActiveJobCountExceeded",
            "DeviceThrottlingLimitExceeded",
            "ClientClosedRequest",
            "GenericServerError",
            "ServerError",
            "JobCancelled",
            "StatisticsRetrievalError",
            "ConnectionForcefullyClosed",
            "InvalidBlobState",
            "BackupTimedOut",
            "AzureStorageTimeout",
            "GenericTimeout",
            "InvalidThrottleParameter",
            "EventHubLinkAlreadyClosed",
            "ReliableBlobStoreError",
            "RetryAttemptsExhausted",
            "AzureTableStoreError",
            "CheckpointStoreNotFound",
            "DocumentDbInvalidReturnValue",
            "ReliableDocDbStoreStoreError",
            "ReliableBlobStoreTimeoutError",
            "ConfigReadFailed",
            "InvalidContainerReceiveLink",
            "InvalidPartitionEpoch",
            "RestoreTimedOut",
            "StreamReservationFailure",
            "SerializationError",
            "UnexpectedPropertyValue",
            "OrchestrationOperationFailed",
            "ModelRepoEndpointError",
            "ResolutionError",
            "UnableToFetchCredentials",
            "UnableToFetchTenantInfo",
            "UnableToShareIdentity",
            "UnableToExpandDiscoveryInfo",
            "UnableToExpandComponentInfo",
            "UnableToCompressDiscoveryInfo",
            "UnableToCompressComponentInfo",
            "GenericBadGateway",
            "InvalidResponseWhileProxying",
            "GenericServiceUnavailable",
            "ServiceUnavailable",
            "PartitionNotFound",
            "IotHubActivationFailed",
            "ServerBusy",
            "IotHubRestoring",
            "ReceiveLinkOpensThrottled",
            "ConnectionUnavailable",
            "DeviceUnavailable",
            "ConfigurationNotAvailable",
            "GroupNotAvailable",
            "HostingServiceNotAvailable",
            "GenericGatewayTimeout",
            "GatewayTimeout"
          ],
          "type": "string",
          "readOnly": true
        },
        "errorStatus": {
          "description": "Additional details associated with the error.",
          "type": "string",
          "readOnly": true
        },
        "moduleId": {
          "type": "string",
          "readOnly": true,
          "description": "Identifier of the module associated with the error, if applicable."
        },
        "operation": {
          "type": "string",
          "readOnly": true,
          "description": "The type of the operation that failed."
        }
      }
    },
    "DeviceRegistryOperationWarning": {
      "description": "Encapsulates device registry operation error details.",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "Identifier of the device that indicated the warning.",
          "type": "string",
          "readOnly": true
        },
        "warningCode": {
          "enum": [
            "DeviceRegisteredWithoutTwin"
          ],
          "type": "string",
          "readOnly": true,
          "description": "The code associated with the warning."
        },
        "warningStatus": {
          "description": "Additional details associated with the warning.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "QuerySpecification": {
      "description": "A Json query request",
      "type": "object",
      "properties": {
        "query": {
          "description": "The query.",
          "type": "string"
        }
      }
    },
    "Twin": {
      "description": "The state information for a device or module. Implicitly created and deleted when the corresponding device/ module identity is created or deleted in IoT Hub.",
      "type": "object",
      "properties": {
        "deviceId": {
          "description": "The unique identifier of the device in the IoT hub's identity registry. It is a case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars, and the following special characters {'-', ':', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}.",
          "type": "string"
        },
        "moduleId": {
          "description": "The unique identifier of the module in the IoT hub's identity registry. It is a case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars, and the following special characters {'-', ':', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}.",
          "type": "string"
        },
        "tags": {
          "description": "A collection of key-value pairs read and written by the solution back end. They are not visible to device apps.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "The collection of the twin's tags as key-value pairs. They keys are UTF-8 encoded, case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control characters (segments C0 and C1), '.', '$' and space. The values are JSON objects, up-to 4KB in length."
          }
        },
        "properties": {
          "$ref": "#/definitions/TwinProperties",
          "description": "The twin's desired and reported properties."
        },
        "etag": {
          "description": "TODO - which operation does this affect - update tags/ properties etc?",
          "type": "string",
          "readOnly": true
        },
        "version": {
          "format": "int64",
          "description": "Version for device twin, including tags and desired properties",
          "type": "integer",
          "readOnly": true
        },
        "deviceEtag": {
          "description": "TODO - which operation does this affect?",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Flags whether a device is enabled or not. If disabled, a device cannot connect to the service.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string"
        },
        "statusReason": {
          "description": "Reason, if any, for the device's current status.",
          "type": "string"
        },
        "statusUpdateTime": {
          "format": "date-time",
          "description": "Time when the corresponding device's status was last updated.",
          "type": "string",
          "readOnly": true
        },
        "connectionState": {
          "description": "The device's connection state.",
          "enum": [
            "Disconnected",
            "Connected"
          ],
          "type": "string",
          "readOnly": true
        },
        "lastActivityTime": {
          "format": "date-time",
          "description": "The last time the device connected, received or sent a message. In ISO8601 datetime format in UTC, for example, 2015-01-28T16:24:48.789Z. This does not update if the device uses the HTTP/1 protocol to perform messaging operations.",
          "type": "string",
          "readOnly": true
        },
        "cloudToDeviceMessageCount": {
          "format": "int32",
          "description": "Number of messages sent to the corresponding Device from the Cloud",
          "type": "integer",
          "readOnly": true
        },
        "authenticationType": {
          "description": "Corresponding Device's authentication type",
          "enum": [
            "sas",
            "selfSigned",
            "certificateAuthority",
            "none"
          ],
          "type": "string"
        },
        "x509Thumbprint": {
          "$ref": "#/definitions/X509Thumbprint",
          "description": "Corresponding Device's X509 thumbprint"
        },
        "capabilities": {
          "$ref": "#/definitions/DeviceCapabilities"
        },
        "deviceScope": {
          "type": "string",
          "description": "Scope to which this device instance belongs to"
        },
        "parentScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "TODO: new property added - need explanation"
        }
      },
      "required": [
        "deviceId"
      ]
    },
    "TwinProperties": {
      "description": "The twin's desired and reported properties. The maximum depth of twin property objects is 10.",
      "type": "object",
      "properties": {
        "desired": {
          "description": "Properties that are set by the solution back end and read by the device.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "description": "The collection of desired property key-value pairs. The keys are UTF-8 encoded, case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control characters (segments C0 and C1), '.', '$' and space. The desired porperty values are JSON objects, up-to 4KB in length."
          }
        },
        "reported": {
          "description": "Properties that are set by the device, and read and queried by the solution back end.",
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "object",
            "description": "The collection of reported property key-value pairs. The keys are UTF-8 encoded, case-sensitive and up-to 1KB in length. Allowed characters exclude UNICODE control characters (segments C0 and C1), '.', '$' and space. The reported property values are JSON objects, up-to 4KB in length."
          }
        }
      }
    },
    "JobProperties": {
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The unique identifier of the job.",
          "type": "string",
          "readOnly": true
        },
        "startTimeUtc": {
          "format": "date-time",
          "description": "The start time of the job in UTC.",
          "type": "string",
          "readOnly": true
        },
        "endTimeUtc": {
          "format": "date-time",
          "description": "The time the job stopped.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The type of job to execute.",
          "enum": [
            "unknown",
            "export",
            "import",
            "backup",
            "readDeviceProperties",
            "writeDeviceProperties",
            "updateDeviceConfiguration",
            "rebootDevice",
            "factoryResetDevice",
            "firmwareUpdate",
            "scheduleDeviceMethod",
            "scheduleUpdateTwin",
            "restoreFromBackup",
            "failoverDataCopy"
          ],
          "type": "string"
        },
        "status": {
          "description": "The status of the job.",
          "enum": [
            "unknown",
            "enqueued",
            "running",
            "completed",
            "failed",
            "cancelled",
            "scheduled",
            "queued"
          ],
          "type": "string",
          "readOnly": true
        },
        "progress": {
          "format": "int32",
          "description": "Represents the percentage of completion.",
          "type": "integer",
          "readOnly": true
        },
        "inputBlobContainerUri": {
          "description": "URI containing SAS token to a blob container that contains registry data to sync.",
          "type": "string"
        },
        "inputBlobName": {
          "description": "The blob name to be used when importing from the provided input blob container.",
          "type": "string"
        },
        "outputBlobContainerUri": {
          "description": "SAS token to access a blob container. This is used to output the status of the job and the results.",
          "type": "string"
        },
        "outputBlobName": {
          "description": "The name of the blob that will be created in the provided output blob container. This blob will contain the exported device registry information for the IoT Hub.",
          "type": "string"
        },
        "excludeKeysInExport": {
          "description": "Optional for export jobs; ignored for other jobs. If not specified, the service defaults to false. If false, authorization keys are included in export output. Keys are exported as null otherwise.",
          "type": "boolean"
        },
        "storageAuthenticationType": {
          "description": "Specifies authentication type being used for connecting to storage account.",
          "enum": [
            "keyBased",
            "identityBased"
          ],
          "type": "string"
        },
        "failureReason": {
          "description": "Contains the reason for the failure, if a failure occurred.",
          "type": "string",
          "readOnly": true
        }
      },
      "required": [
        "type"
      ]
    },
    "PurgeMessageQueueResult": {
      "description": "Result of a device message queue purge operation.",
      "type": "object",
      "properties": {
        "totalMessagesPurged": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "description": "The total number of messages purged."
        },
        "deviceId": {
          "description": "The ID of the device whose messages are being purged.",
          "type": "string",
          "readOnly": true
        },
        "moduleId": {
          "description": "The ID of the device whose messages are being purged.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FaultInjectionProperties": {
      "type": "object",
      "properties": {
        "IotHubName": {
          "type": "string",
          "description": "Name of the IotHub."
        },
        "connection": {
          "$ref": "#/definitions/FaultInjectionConnectionProperties",
          "description": "TODO: to be filled by the service team."
        },
        "lastUpdatedTimeUtc": {
          "format": "date-time",
          "description": "Service generated.",
          "type": "string"
        }
      }
    },
    "FaultInjectionConnectionProperties": {
      "type": "object",
      "properties": {
        "action": {
          "enum": [
            "None",
            "CloseAll",
            "Periodic"
          ],
          "type": "string",
          "description": "Action to perform"
        },
        "blockDurationInMinutes": {
          "format": "int32",
          "type": "integer",
          "description": "TODO: to be filled by the service team"
        }
      }
    },
    "DigitalTwinInterfaces": {
      "type": "object",
      "properties": {
        "interfaces": {
          "description": "Interface(s) data on the digital twin.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Interface"
          }
        },
        "version": {
          "format": "int64",
          "description": "Version of digital twin.",
          "type": "integer"
        }
      }
    },
    "Interface": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Full name of digital twin interface.",
          "type": "string"
        },
        "properties": {
          "description": "List of all properties in an interface.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Property"
          }
        }
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "reported": {
          "$ref": "#/definitions/Reported"
        },
        "desired": {
          "$ref": "#/definitions/Desired"
        }
      }
    },
    "Reported": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The current interface property value in a digitalTwin.",
          "type": "object"
        },
        "desiredState": {
          "$ref": "#/definitions/DesiredState"
        }
      }
    },
    "Desired": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The desired value of the interface property to set in a digitalTwin.",
          "type": "object"
        }
      }
    },
    "DesiredState": {
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "description": "Status code for the operation.",
          "type": "integer"
        },
        "version": {
          "format": "int64",
          "description": "Version of the desired value received.",
          "type": "integer"
        },
        "description": {
          "description": "Description of the status.",
          "type": "string"
        }
      }
    },
    "JobRequest": {
      "type": "object",
      "properties": {
        "jobId": {
          "description": "Job identifier",
          "type": "string"
        },
        "type": {
          "description": "The type of job to execute.",
          "enum": [
            "unknown",
            "export",
            "import",
            "backup",
            "readDeviceProperties",
            "writeDeviceProperties",
            "updateDeviceConfiguration",
            "rebootDevice",
            "factoryResetDevice",
            "firmwareUpdate",
            "scheduleDeviceMethod",
            "scheduleUpdateTwin",
            "restoreFromBackup",
            "failoverDataCopy"
          ],
          "type": "string"
        },
        "cloudToDeviceMethod": {
          "$ref": "#/definitions/CloudToDeviceMethod",
          "description": "Required if jobType is cloudToDeviceMethod. The method type and parameters."
        },
        "updateTwin": {
          "$ref": "#/definitions/Twin"
        },
        "queryCondition": {
          "description": "Required if jobType is updateTwin or cloudToDeviceMethod. Condition for device query to get devices to execute the job on.",
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "description": "ISO 8601 date time to start the job",
          "type": "string"
        },
        "maxExecutionTimeInSeconds": {
          "format": "int64",
          "description": "Max execution time in secounds (ttl duration)",
          "type": "integer"
        }
      },
      "required": [
        "type"
      ]
    },
    "CloudToDeviceMethod": {
      "description": "Parameters to execute a direct method on the device.",
      "type": "object",
      "properties": {
        "methodName": {
          "description": "Name of the method to be executed.",
          "type": "string"
        },
        "payload": {
          "description": "The JSON-formatted direct method payload, up to 128kb in size.",
          "type": "object"
        },
        "responseTimeoutInSeconds": {
          "format": "int32",
          "type": "integer",
          "description": "Time (in seconds) that the service waits for the method invocation to return a response. It defaults to 30 seconds. Minimum allowed value is 5 seconds, maximum allowed value is 300 seconds."
        },
        "connectTimeoutInSeconds": {
          "format": "int32",
          "type": "integer",
          "description": "Time (in seconds) that the service waits for the device to come online. It defaults to 0, meaning the device must already be online. Maximum allowed value is 300 seconds."
        }
      },
      "required": [
        "methodName"
      ]
    },
    "JobResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The unique identifier of the job.",
          "type": "string",
          "readOnly": true
        },
        "queryCondition": {
          "description": "Device query condition.",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "format": "date-time",
          "description": "The creation time of the job.",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Scheduled job start time in UTC.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "The time the job stopped.",
          "type": "string",
          "readOnly": true
        },
        "maxExecutionTimeInSeconds": {
          "format": "int64",
          "description": "Max execution time in secounds (ttl duration)",
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "description": "The type of job to execute.",
          "enum": [
            "unknown",
            "export",
            "import",
            "backup",
            "readDeviceProperties",
            "writeDeviceProperties",
            "updateDeviceConfiguration",
            "rebootDevice",
            "factoryResetDevice",
            "firmwareUpdate",
            "scheduleDeviceMethod",
            "scheduleUpdateTwin",
            "restoreFromBackup",
            "failoverDataCopy"
          ],
          "type": "string"
        },
        "cloudToDeviceMethod": {
          "$ref": "#/definitions/CloudToDeviceMethod",
          "description": "Required if jobType is cloudToDeviceMethod. The method type and parameters.",
          "readOnly": true
        },
        "updateTwin": {
          "$ref": "#/definitions/Twin",
          "readOnly": true
        },
        "status": {
          "description": "The status of the job.",
          "enum": [
            "unknown",
            "enqueued",
            "running",
            "completed",
            "failed",
            "cancelled",
            "scheduled",
            "queued"
          ],
          "type": "string",
          "readOnly": true
        },
        "failureReason": {
          "description": "Contains the reason for the failure, if a failure occurred.",
          "type": "string",
          "readOnly": true
        },
        "statusMessage": {
          "description": "Status message for the job",
          "type": "string",
          "readOnly": true
        },
        "deviceJobStatistics": {
          "$ref": "#/definitions/DeviceJobStatistics",
          "description": "Job details",
          "readOnly": true
        }
      },
      "required": [
        "type"
      ]
    },
    "DeviceJobStatistics": {
      "description": "The job counts, e.g., number of failed/succeeded devices",
      "type": "object",
      "properties": {
        "deviceCount": {
          "format": "int32",
          "description": "Number of devices in the job",
          "type": "integer"
        },
        "failedCount": {
          "format": "int32",
          "description": "The number of failed jobs",
          "type": "integer"
        },
        "succeededCount": {
          "format": "int32",
          "description": "The number of Successed jobs",
          "type": "integer"
        },
        "runningCount": {
          "format": "int32",
          "description": "The number of running jobs",
          "type": "integer"
        },
        "pendingCount": {
          "format": "int32",
          "description": "The number of pending (scheduled) jobs",
          "type": "integer"
        }
      }
    },
    "QueryResult": {
      "description": "The query result.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The query result type.",
          "enum": [
            "unknown",
            "twin",
            "deviceJob",
            "jobResponse",
            "raw",
            "enrollment",
            "enrollmentGroup",
            "deviceRegistration"
          ],
          "type": "string"
        },
        "items": {
          "description": "The query result items, as a collection.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "continuationToken": {
          "description": "Request continuation token.",
          "type": "string"
        }
      }
    },
    "Module": {
      "description": "Module identity on a device.",
      "type": "object",
      "properties": {
        "moduleId": {
          "type": "string",
          "description": "The unique identifier of this module."
        },
        "managedBy": {
          "type": "string",
          "description": "Identifies who manages this module. For instance, this value is \"IotEdge\" if the edge runtime owns this module."
        },
        "deviceId": {
          "type": "string",
          "description": "The unique identifier of the device that has this module."
        },
        "generationId": {
          "type": "string",
          "readOnly": true,
          "description": "An IoT hub-generated, case-sensitive string up to 128 characters long. This value is used to distinguish modules with the same moduleId, when they have been deleted and re-created."
        },
        "etag": {
          "type": "string",
          "description": "A string representing a weak ETag for the module identity, as per RFC7232."
        },
        "connectionState": {
          "enum": [
            "Disconnected",
            "Connected"
          ],
          "type": "string",
          "readOnly": true,
          "description": "Tells whether the module is connected or not."
        },
        "connectionStateUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "description": "A temporal indicator, showing the date and last time the connection state was updated."
        },
        "lastActivityTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "description": "A temporal indicator, showing the date and last time the device connected, received, or sent a message."
        },
        "cloudToDeviceMessageCount": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "description": "The number of cloud to module messages currently queued to be sent to the module."
        },
        "authentication": {
          "$ref": "#/definitions/AuthenticationMechanism",
          "description": "The details on what authentication mechanisms are used by this module when connecting to the service and edgehub."
        }
      },
      "required": [
        "moduleId",
        "deviceId"
      ]
    },
    "CloudToDeviceMethodResult": {
      "description": "Represents the Device Method Invocation Results.",
      "type": "object",
      "properties": {
        "status": {
          "format": "int32",
          "description": "Method invocation result status, provided by the device.",
          "type": "integer",
          "readOnly": true
        },
        "payload": {
          "description": "The JSON-formatted direct method result payload, up to 128kb in size; provided by the device.",
          "type": "object",
          "readOnly": true
        }
      }
    },
    "DigitalTwinInterfacesPatch": {
      "type": "object",
      "properties": {
        "interfaces": {
          "description": "Interface(s) data to patch in the digital twin.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "properties": {
                "description": "List of properties to update in an interface.",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "desired": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "description": "The desired value of the interface property to set in a digitalTwin.",
                          "type": "object"
                        }
                      },
                      "description": "The desired property of the interface"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "api-version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the Api.",
      "required": true,
      "type": "string",
      "default": "2020-03-13"
    }
  }
}