// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.IotFirmwareDefense.Models;

namespace Azure.ResourceManager.IotFirmwareDefense
{
    /// <summary>
    /// A Class representing a Firmware along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="FirmwareResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetFirmwareResource method.
    /// Otherwise you can get one from its parent resource <see cref="WorkspaceResource" /> using the GetFirmware method.
    /// </summary>
    public partial class FirmwareResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="FirmwareResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName, string firmwareId)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _firmwareClientDiagnostics;
        private readonly FirmwareRestOperations _firmwareRestClient;
        private readonly FirmwareData _data;

        /// <summary> Initializes a new instance of the <see cref="FirmwareResource"/> class for mocking. </summary>
        protected FirmwareResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "FirmwareResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal FirmwareResource(ArmClient client, FirmwareData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="FirmwareResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal FirmwareResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _firmwareClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.IotFirmwareDefense", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string firmwareApiVersion);
            _firmwareRestClient = new FirmwareRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, firmwareApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.IoTFirmwareDefense/workspaces/firmwares";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual FirmwareData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Get firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FirmwareResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.Get");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FirmwareResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FirmwareResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.Get");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FirmwareResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to delete a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.Delete");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new IotFirmwareDefenseArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to delete a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_Delete</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.Delete");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new IotFirmwareDefenseArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to update firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> Details of the firmware being created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<FirmwareResource>> UpdateAsync(FirmwarePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.Update");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new FirmwareResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to update firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_Update</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="patch"> Details of the firmware being created or updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<FirmwareResource> Update(FirmwarePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.Update");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, patch, cancellationToken);
                return Response.FromValue(new FirmwareResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to a url for file download.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateDownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateDownloadUrl</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UrlToken>> GenerateDownloadUrlAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateDownloadUrl");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateDownloadUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to a url for file download.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateDownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateDownloadUrl</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UrlToken> GenerateDownloadUrl(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateDownloadUrl");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateDownloadUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to a url for tar file download.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateFilesystemDownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateFilesystemDownloadUrl</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UrlToken>> GenerateFilesystemDownloadUrlAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateFilesystemDownloadUrl");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateFilesystemDownloadUrlAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to a url for tar file download.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateFilesystemDownloadUrl</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateFilesystemDownloadUrl</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UrlToken> GenerateFilesystemDownloadUrl(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateFilesystemDownloadUrl");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateFilesystemDownloadUrl(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to get a scan summary.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FirmwareSummary>> GenerateSummaryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateSummary");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateSummaryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to get a scan summary.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FirmwareSummary> GenerateSummary(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateSummary");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateSummary(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to list all components result for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateComponentList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateComponentList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Component" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Component> GetGenerateComponentListAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateComponentListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateComponentListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Component.DeserializeComponent, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateComponentList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all components result for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateComponentList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateComponentList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Component" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Component> GetGenerateComponentList(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateComponentListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateComponentListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Component.DeserializeComponent, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateComponentList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to get component details for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateComponentDetails</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateComponentDetails</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Component>> GenerateComponentDetailsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateComponentDetails");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateComponentDetailsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to get component details for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateComponentDetails</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateComponentDetails</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Component> GenerateComponentDetails(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateComponentDetails");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateComponentDetails(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to list all binary hardening result for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateBinaryHardeningList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BinaryHardening" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BinaryHardening> GetGenerateBinaryHardeningListAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateBinaryHardeningListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateBinaryHardeningListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, BinaryHardening.DeserializeBinaryHardening, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateBinaryHardeningList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all binary hardening result for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateBinaryHardeningList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BinaryHardening" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BinaryHardening> GetGenerateBinaryHardeningList(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateBinaryHardeningListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateBinaryHardeningListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, BinaryHardening.DeserializeBinaryHardening, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateBinaryHardeningList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list the binary hardening summary percentages for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateBinaryHardeningSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BinaryHardeningSummary>> GenerateBinaryHardeningSummaryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateBinaryHardeningSummary");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateBinaryHardeningSummaryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to list the binary hardening summary percentages for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateBinaryHardeningSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BinaryHardeningSummary> GenerateBinaryHardeningSummary(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateBinaryHardeningSummary");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateBinaryHardeningSummary(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to get binary hardening details for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningDetails</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateBinaryHardeningDetails</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BinaryHardening>> GenerateBinaryHardeningDetailsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateBinaryHardeningDetails");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateBinaryHardeningDetailsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to get binary hardening details for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateBinaryHardeningDetails</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateBinaryHardeningDetails</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BinaryHardening> GenerateBinaryHardeningDetails(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateBinaryHardeningDetails");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateBinaryHardeningDetails(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to list all password hashes for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generatePasswordHashList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGeneratePasswordHashList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PasswordHash" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PasswordHash> GetGeneratePasswordHashListAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGeneratePasswordHashListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGeneratePasswordHashListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, PasswordHash.DeserializePasswordHash, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGeneratePasswordHashList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all password hashes for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generatePasswordHashList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGeneratePasswordHashList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PasswordHash" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PasswordHash> GetGeneratePasswordHashList(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGeneratePasswordHashListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGeneratePasswordHashListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, PasswordHash.DeserializePasswordHash, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGeneratePasswordHashList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all cve results for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCveList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateCveList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Cve" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Cve> GetGenerateCveListAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateCveListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateCveListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, Cve.DeserializeCve, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateCveList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all cve results for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCveList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateCveList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Cve" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Cve> GetGenerateCveList(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateCveListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateCveListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, Cve.DeserializeCve, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateCveList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to provide a high level summary of the CVEs reported for the firmware image.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCveSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateCveSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CveSummary>> GenerateCveSummaryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateCveSummary");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateCveSummaryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to provide a high level summary of the CVEs reported for the firmware image.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCveSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateCveSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CveSummary> GenerateCveSummary(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateCveSummary");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateCveSummary(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to provide a high level summary of the discovered cryptographic certificates reported for the firmware image.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoCertificateSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateCryptoCertificateSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CryptoCertificateSummary>> GenerateCryptoCertificateSummaryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateCryptoCertificateSummary");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateCryptoCertificateSummaryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to provide a high level summary of the discovered cryptographic certificates reported for the firmware image.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoCertificateSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateCryptoCertificateSummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CryptoCertificateSummary> GenerateCryptoCertificateSummary(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateCryptoCertificateSummary");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateCryptoCertificateSummary(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to provide a high level summary of the discovered cryptographic keys reported for the firmware image.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoKeySummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateCryptoKeySummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CryptoKeySummary>> GenerateCryptoKeySummaryAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateCryptoKeySummary");
            scope.Start();
            try
            {
                var response = await _firmwareRestClient.GenerateCryptoKeySummaryAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to provide a high level summary of the discovered cryptographic keys reported for the firmware image.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoKeySummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_GenerateCryptoKeySummary</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CryptoKeySummary> GenerateCryptoKeySummary(CancellationToken cancellationToken = default)
        {
            using var scope = _firmwareClientDiagnostics.CreateScope("FirmwareResource.GenerateCryptoKeySummary");
            scope.Start();
            try
            {
                var response = _firmwareRestClient.GenerateCryptoKeySummary(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The operation to list all crypto certificates for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoCertificateList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateCryptoCertificateList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CryptoCertificate" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CryptoCertificate> GetGenerateCryptoCertificateListAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateCryptoCertificateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateCryptoCertificateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CryptoCertificate.DeserializeCryptoCertificate, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateCryptoCertificateList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all crypto certificates for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoCertificateList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateCryptoCertificateList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CryptoCertificate" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CryptoCertificate> GetGenerateCryptoCertificateList(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateCryptoCertificateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateCryptoCertificateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CryptoCertificate.DeserializeCryptoCertificate, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateCryptoCertificateList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all crypto keys for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoKeyList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateCryptoKeyList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CryptoKey" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CryptoKey> GetGenerateCryptoKeyListAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateCryptoKeyListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateCryptoKeyListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, CryptoKey.DeserializeCryptoKey, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateCryptoKeyList", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// The operation to list all crypto keys for a firmware.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/generateCryptoKeyList</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Firmware_ListGenerateCryptoKeyList</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CryptoKey" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CryptoKey> GetGenerateCryptoKeyList(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _firmwareRestClient.CreateListGenerateCryptoKeyListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _firmwareRestClient.CreateListGenerateCryptoKeyListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, CryptoKey.DeserializeCryptoKey, _firmwareClientDiagnostics, Pipeline, "FirmwareResource.GetGenerateCryptoKeyList", "value", "nextLink", cancellationToken);
        }
    }
}
