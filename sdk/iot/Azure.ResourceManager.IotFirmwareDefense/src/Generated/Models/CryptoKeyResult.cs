// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// The object representing a firmware analysis crypto key resource
    /// Serialized Name: CryptoKeyResource
    /// </summary>
    public partial class CryptoKeyResult : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CryptoKeyResult"/>. </summary>
        public CryptoKeyResult()
        {
            CryptoKeyUsage = new ChangeTrackingList<string>();
            FilePaths = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="CryptoKeyResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="cryptoKeyId">
        /// ID for the key result.
        /// Serialized Name: CryptoKeyResource.properties.cryptoKeyId
        /// </param>
        /// <param name="cryptoKeyType">
        /// Type of the key (public or private).
        /// Serialized Name: CryptoKeyResource.properties.keyType
        /// </param>
        /// <param name="cryptoKeySize">
        /// Size of the key in bits.
        /// Serialized Name: CryptoKeyResource.properties.cryptoKeySize
        /// </param>
        /// <param name="keyAlgorithm">
        /// Key algorithm name.
        /// Serialized Name: CryptoKeyResource.properties.keyAlgorithm
        /// </param>
        /// <param name="cryptoKeyUsage">
        /// Functions the key can fulfill.
        /// Serialized Name: CryptoKeyResource.properties.usage
        /// </param>
        /// <param name="filePaths">
        /// List of files where this key was found.
        /// Serialized Name: CryptoKeyResource.properties.filePaths
        /// </param>
        /// <param name="pairedKey">
        /// A matching paired key or certificate.
        /// Serialized Name: CryptoKeyResource.properties.pairedKey
        /// </param>
        /// <param name="isShortKeySize">
        /// Indicates the key size is considered too small to be secure for the algorithm according to NIST guidance.
        /// Serialized Name: CryptoKeyResource.properties.isShortKeySize
        /// </param>
        /// <param name="provisioningState">
        /// The status of the last operation.
        /// Serialized Name: CryptoKeyResource.properties.provisioningState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CryptoKeyResult(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string cryptoKeyId, CryptoKeyType? cryptoKeyType, long? cryptoKeySize, string keyAlgorithm, IList<string> cryptoKeyUsage, IReadOnlyList<string> filePaths, CryptoPairedKey pairedKey, bool? isShortKeySize, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            CryptoKeyId = cryptoKeyId;
            CryptoKeyType = cryptoKeyType;
            CryptoKeySize = cryptoKeySize;
            KeyAlgorithm = keyAlgorithm;
            CryptoKeyUsage = cryptoKeyUsage;
            FilePaths = filePaths;
            PairedKey = pairedKey;
            IsShortKeySize = isShortKeySize;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// ID for the key result.
        /// Serialized Name: CryptoKeyResource.properties.cryptoKeyId
        /// </summary>
        public string CryptoKeyId { get; set; }
        /// <summary>
        /// Type of the key (public or private).
        /// Serialized Name: CryptoKeyResource.properties.keyType
        /// </summary>
        public CryptoKeyType? CryptoKeyType { get; set; }
        /// <summary>
        /// Size of the key in bits.
        /// Serialized Name: CryptoKeyResource.properties.cryptoKeySize
        /// </summary>
        public long? CryptoKeySize { get; set; }
        /// <summary>
        /// Key algorithm name.
        /// Serialized Name: CryptoKeyResource.properties.keyAlgorithm
        /// </summary>
        public string KeyAlgorithm { get; set; }
        /// <summary>
        /// Functions the key can fulfill.
        /// Serialized Name: CryptoKeyResource.properties.usage
        /// </summary>
        public IList<string> CryptoKeyUsage { get; }
        /// <summary>
        /// List of files where this key was found.
        /// Serialized Name: CryptoKeyResource.properties.filePaths
        /// </summary>
        public IReadOnlyList<string> FilePaths { get; }
        /// <summary>
        /// A matching paired key or certificate.
        /// Serialized Name: CryptoKeyResource.properties.pairedKey
        /// </summary>
        public CryptoPairedKey PairedKey { get; set; }
        /// <summary>
        /// Indicates the key size is considered too small to be secure for the algorithm according to NIST guidance.
        /// Serialized Name: CryptoKeyResource.properties.isShortKeySize
        /// </summary>
        public bool? IsShortKeySize { get; set; }
        /// <summary>
        /// The status of the last operation.
        /// Serialized Name: CryptoKeyResource.properties.provisioningState
        /// </summary>
        public FirmwareProvisioningState? ProvisioningState { get; }
    }
}
