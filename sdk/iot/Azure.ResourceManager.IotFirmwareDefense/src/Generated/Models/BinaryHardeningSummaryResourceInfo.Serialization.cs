// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class BinaryHardeningSummaryResourceInfo : IUtf8JsonSerializable, IJsonModel<BinaryHardeningSummaryResourceInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BinaryHardeningSummaryResourceInfo>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<BinaryHardeningSummaryResourceInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BinaryHardeningSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BinaryHardeningSummaryResourceInfo)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (TotalFiles.HasValue)
            {
                writer.WritePropertyName("totalFiles"u8);
                writer.WriteNumberValue(TotalFiles.Value);
            }
            if (Nx.HasValue)
            {
                if (Nx != null)
                {
                    writer.WritePropertyName("nx"u8);
                    writer.WriteNumberValue(Nx.Value);
                }
                else
                {
                    writer.WriteNull("nx");
                }
            }
            if (Pie.HasValue)
            {
                if (Pie != null)
                {
                    writer.WritePropertyName("pie"u8);
                    writer.WriteNumberValue(Pie.Value);
                }
                else
                {
                    writer.WriteNull("pie");
                }
            }
            if (Relro.HasValue)
            {
                if (Relro != null)
                {
                    writer.WritePropertyName("relro"u8);
                    writer.WriteNumberValue(Relro.Value);
                }
                else
                {
                    writer.WriteNull("relro");
                }
            }
            if (Canary.HasValue)
            {
                if (Canary != null)
                {
                    writer.WritePropertyName("canary"u8);
                    writer.WriteNumberValue(Canary.Value);
                }
                else
                {
                    writer.WriteNull("canary");
                }
            }
            if (Stripped.HasValue)
            {
                if (Stripped != null)
                {
                    writer.WritePropertyName("stripped"u8);
                    writer.WriteNumberValue(Stripped.Value);
                }
                else
                {
                    writer.WriteNull("stripped");
                }
            }
            writer.WritePropertyName("summaryType"u8);
            writer.WriteStringValue(SummaryType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BinaryHardeningSummaryResourceInfo IJsonModel<BinaryHardeningSummaryResourceInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BinaryHardeningSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BinaryHardeningSummaryResourceInfo)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBinaryHardeningSummaryResourceInfo(document.RootElement, options);
        }

        internal static BinaryHardeningSummaryResourceInfo DeserializeBinaryHardeningSummaryResourceInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? totalFiles = default;
            int? nx = default;
            int? pie = default;
            int? relro = default;
            int? canary = default;
            int? stripped = default;
            SummaryType summaryType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalFiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalFiles = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("nx"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nx = null;
                        continue;
                    }
                    nx = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("pie"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pie = null;
                        continue;
                    }
                    pie = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("relro"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        relro = null;
                        continue;
                    }
                    relro = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("canary"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        canary = null;
                        continue;
                    }
                    canary = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stripped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stripped = null;
                        continue;
                    }
                    stripped = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("summaryType"u8))
                {
                    summaryType = new SummaryType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new BinaryHardeningSummaryResourceInfo(
                summaryType,
                serializedAdditionalRawData,
                totalFiles,
                nx,
                pie,
                relro,
                canary,
                stripped);
        }

        BinaryData IPersistableModel<BinaryHardeningSummaryResourceInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BinaryHardeningSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BinaryHardeningSummaryResourceInfo)} does not support '{options.Format}' format.");
            }
        }

        BinaryHardeningSummaryResourceInfo IPersistableModel<BinaryHardeningSummaryResourceInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BinaryHardeningSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBinaryHardeningSummaryResourceInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BinaryHardeningSummaryResourceInfo)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<BinaryHardeningSummaryResourceInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
