// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class FirmwareFirmwareCryptoCertificateSummaryResourceInfo : IUtf8JsonSerializable, IJsonModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FirmwareFirmwareCryptoCertificateSummaryResourceInfo)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (TotalCertificates.HasValue)
            {
                writer.WritePropertyName("totalCertificates"u8);
                writer.WriteNumberValue(TotalCertificates.Value);
            }
            if (PairedKeys.HasValue)
            {
                writer.WritePropertyName("pairedKeys"u8);
                writer.WriteNumberValue(PairedKeys.Value);
            }
            if (Expired.HasValue)
            {
                writer.WritePropertyName("expired"u8);
                writer.WriteNumberValue(Expired.Value);
            }
            if (ExpiringSoon.HasValue)
            {
                writer.WritePropertyName("expiringSoon"u8);
                writer.WriteNumberValue(ExpiringSoon.Value);
            }
            if (WeakSignature.HasValue)
            {
                writer.WritePropertyName("weakSignature"u8);
                writer.WriteNumberValue(WeakSignature.Value);
            }
            if (SelfSigned.HasValue)
            {
                writer.WritePropertyName("selfSigned"u8);
                writer.WriteNumberValue(SelfSigned.Value);
            }
            if (ShortKeySize.HasValue)
            {
                writer.WritePropertyName("shortKeySize"u8);
                writer.WriteNumberValue(ShortKeySize.Value);
            }
            writer.WritePropertyName("summaryType"u8);
            writer.WriteStringValue(SummaryType.ToString());
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        FirmwareFirmwareCryptoCertificateSummaryResourceInfo IJsonModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FirmwareFirmwareCryptoCertificateSummaryResourceInfo)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFirmwareFirmwareCryptoCertificateSummaryResourceInfo(document.RootElement, options);
        }

        internal static FirmwareFirmwareCryptoCertificateSummaryResourceInfo DeserializeFirmwareFirmwareCryptoCertificateSummaryResourceInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? totalCertificates = default;
            long? pairedKeys = default;
            long? expired = default;
            long? expiringSoon = default;
            long? weakSignature = default;
            long? selfSigned = default;
            long? shortKeySize = default;
            SummaryType summaryType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCertificates = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("pairedKeys"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pairedKeys = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("expired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expired = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("expiringSoon"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expiringSoon = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("weakSignature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    weakSignature = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("selfSigned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfSigned = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("shortKeySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shortKeySize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("summaryType"u8))
                {
                    summaryType = new SummaryType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new FirmwareFirmwareCryptoCertificateSummaryResourceInfo(
                summaryType,
                serializedAdditionalRawData,
                totalCertificates,
                pairedKeys,
                expired,
                expiringSoon,
                weakSignature,
                selfSigned,
                shortKeySize);
        }

        BinaryData IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FirmwareFirmwareCryptoCertificateSummaryResourceInfo)} does not support '{options.Format}' format.");
            }
        }

        FirmwareFirmwareCryptoCertificateSummaryResourceInfo IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFirmwareFirmwareCryptoCertificateSummaryResourceInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FirmwareFirmwareCryptoCertificateSummaryResourceInfo)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<FirmwareFirmwareCryptoCertificateSummaryResourceInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
