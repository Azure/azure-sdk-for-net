// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class CryptoCertificateResult : IUtf8JsonSerializable, IJsonModel<CryptoCertificateResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CryptoCertificateResult>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CryptoCertificateResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CryptoCertificateResult)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(CryptoCertId))
            {
                writer.WritePropertyName("cryptoCertId"u8);
                writer.WriteStringValue(CryptoCertId);
            }
            if (Optional.IsDefined(CertificateName))
            {
                writer.WritePropertyName("certificateName"u8);
                writer.WriteStringValue(CertificateName);
            }
            if (Optional.IsDefined(Subject))
            {
                writer.WritePropertyName("subject"u8);
                writer.WriteObjectValue(Subject, options);
            }
            if (Optional.IsDefined(Issuer))
            {
                writer.WritePropertyName("issuer"u8);
                writer.WriteObjectValue(Issuer, options);
            }
            if (Optional.IsDefined(IssuedOn))
            {
                writer.WritePropertyName("issuedDate"u8);
                writer.WriteStringValue(IssuedOn.Value, "O");
            }
            if (Optional.IsDefined(ExpireOn))
            {
                writer.WritePropertyName("expirationDate"u8);
                writer.WriteStringValue(ExpireOn.Value, "O");
            }
            if (Optional.IsDefined(CertificateRole))
            {
                writer.WritePropertyName("certificateRole"u8);
                writer.WriteStringValue(CertificateRole);
            }
            if (Optional.IsDefined(SignatureAlgorithm))
            {
                writer.WritePropertyName("signatureAlgorithm"u8);
                writer.WriteStringValue(SignatureAlgorithm);
            }
            if (Optional.IsDefined(CertificateKeySize))
            {
                writer.WritePropertyName("certificateKeySize"u8);
                writer.WriteNumberValue(CertificateKeySize.Value);
            }
            if (Optional.IsDefined(CertificateKeyAlgorithm))
            {
                writer.WritePropertyName("certificateKeyAlgorithm"u8);
                writer.WriteStringValue(CertificateKeyAlgorithm);
            }
            if (Optional.IsDefined(Encoding))
            {
                writer.WritePropertyName("encoding"u8);
                writer.WriteStringValue(Encoding);
            }
            if (Optional.IsDefined(SerialNumber))
            {
                writer.WritePropertyName("serialNumber"u8);
                writer.WriteStringValue(SerialNumber);
            }
            if (Optional.IsDefined(Fingerprint))
            {
                writer.WritePropertyName("fingerprint"u8);
                writer.WriteStringValue(Fingerprint);
            }
            if (Optional.IsCollectionDefined(CertificateUsage))
            {
                writer.WritePropertyName("certificateUsage"u8);
                writer.WriteStartArray();
                foreach (var item in CertificateUsage)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(FilePaths))
            {
                writer.WritePropertyName("filePaths"u8);
                writer.WriteStartArray();
                foreach (var item in FilePaths)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PairedKey))
            {
                writer.WritePropertyName("pairedKey"u8);
                writer.WriteObjectValue(PairedKey, options);
            }
            if (Optional.IsDefined(IsExpired))
            {
                writer.WritePropertyName("isExpired"u8);
                writer.WriteBooleanValue(IsExpired.Value);
            }
            if (Optional.IsDefined(IsSelfSigned))
            {
                writer.WritePropertyName("isSelfSigned"u8);
                writer.WriteBooleanValue(IsSelfSigned.Value);
            }
            if (Optional.IsDefined(IsWeakSignature))
            {
                writer.WritePropertyName("isWeakSignature"u8);
                writer.WriteBooleanValue(IsWeakSignature.Value);
            }
            if (Optional.IsDefined(IsShortKeySize))
            {
                writer.WritePropertyName("isShortKeySize"u8);
                writer.WriteBooleanValue(IsShortKeySize.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        CryptoCertificateResult IJsonModel<CryptoCertificateResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CryptoCertificateResult)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCryptoCertificateResult(document.RootElement, options);
        }

        internal static CryptoCertificateResult DeserializeCryptoCertificateResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string cryptoCertId = default;
            string certificateName = default;
            CryptoCertificateEntity subject = default;
            CryptoCertificateEntity issuer = default;
            DateTimeOffset? issuedDate = default;
            DateTimeOffset? expirationDate = default;
            string certificateRole = default;
            string signatureAlgorithm = default;
            long? certificateKeySize = default;
            string certificateKeyAlgorithm = default;
            string encoding = default;
            string serialNumber = default;
            string fingerprint = default;
            IList<CertificateUsage> certificateUsage = default;
            IReadOnlyList<string> filePaths = default;
            CryptoPairedKey pairedKey = default;
            bool? isExpired = default;
            bool? isSelfSigned = default;
            bool? isWeakSignature = default;
            bool? isShortKeySize = default;
            FirmwareProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cryptoCertId"u8))
                {
                    cryptoCertId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificateName"u8))
                {
                    certificateName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subject"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subject = CryptoCertificateEntity.DeserializeCryptoCertificateEntity(property.Value, options);
                    continue;
                }
                if (property.NameEquals("issuer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    issuer = CryptoCertificateEntity.DeserializeCryptoCertificateEntity(property.Value, options);
                    continue;
                }
                if (property.NameEquals("issuedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    issuedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("expirationDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expirationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("certificateRole"u8))
                {
                    certificateRole = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signatureAlgorithm"u8))
                {
                    signatureAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificateKeySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificateKeySize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("certificateKeyAlgorithm"u8))
                {
                    certificateKeyAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encoding"u8))
                {
                    encoding = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fingerprint"u8))
                {
                    fingerprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificateUsage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CertificateUsage> array = new List<CertificateUsage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new CertificateUsage(item.GetString()));
                    }
                    certificateUsage = array;
                    continue;
                }
                if (property.NameEquals("filePaths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    filePaths = array;
                    continue;
                }
                if (property.NameEquals("pairedKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pairedKey = CryptoPairedKey.DeserializeCryptoPairedKey(property.Value, options);
                    continue;
                }
                if (property.NameEquals("isExpired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isExpired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isSelfSigned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSelfSigned = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isWeakSignature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isWeakSignature = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isShortKeySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isShortKeySize = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new FirmwareProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CryptoCertificateResult(
                cryptoCertId,
                certificateName,
                subject,
                issuer,
                issuedDate,
                expirationDate,
                certificateRole,
                signatureAlgorithm,
                certificateKeySize,
                certificateKeyAlgorithm,
                encoding,
                serialNumber,
                fingerprint,
                certificateUsage ?? new ChangeTrackingList<CertificateUsage>(),
                filePaths ?? new ChangeTrackingList<string>(),
                pairedKey,
                isExpired,
                isSelfSigned,
                isWeakSignature,
                isShortKeySize,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CryptoCertificateResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CryptoCertificateResult)} does not support writing '{options.Format}' format.");
            }
        }

        CryptoCertificateResult IPersistableModel<CryptoCertificateResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCryptoCertificateResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CryptoCertificateResult)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CryptoCertificateResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
