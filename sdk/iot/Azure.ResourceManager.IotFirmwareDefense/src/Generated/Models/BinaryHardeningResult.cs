// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// The object representing a firmware analysis binary hardening result resource
    /// Serialized Name: BinaryHardeningResource
    /// </summary>
    public partial class BinaryHardeningResult : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BinaryHardeningResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="binaryHardeningId">
        /// ID for the binary hardening result.
        /// Serialized Name: BinaryHardeningResource.properties.binaryHardeningId
        /// </param>
        /// <param name="securityHardeningFeatures">
        /// The security hardening features of the binary.
        /// Serialized Name: BinaryHardeningResource.properties.securityHardeningFeatures
        /// </param>
        /// <param name="executableArchitecture">
        /// The architecture of the binary being reported on.
        /// Serialized Name: BinaryHardeningResource.properties.executableArchitecture
        /// </param>
        /// <param name="filePath">
        /// The path to the binary in the firmware.
        /// Serialized Name: BinaryHardeningResource.properties.filePath
        /// </param>
        /// <param name="executableClass">
        /// The executable class to indicate 32 or 64 bit.
        /// Serialized Name: BinaryHardeningResource.properties.executableClass
        /// </param>
        /// <param name="runpath">
        /// The runpath property of the uploaded binary, which is a method of specifying additional paths to load objects at runtime.
        /// Serialized Name: BinaryHardeningResource.properties.runpath
        /// </param>
        /// <param name="rpath">
        /// The rpath property of the uploaded binary, which is a deprecated method of specifying additional paths to load objects at runtime.
        /// Serialized Name: BinaryHardeningResource.properties.rpath
        /// </param>
        /// <param name="provisioningState">
        /// The status of the last operation.
        /// Serialized Name: BinaryHardeningResource.properties.provisioningState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BinaryHardeningResult(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string binaryHardeningId, BinaryHardeningFeatures securityHardeningFeatures, string executableArchitecture, string filePath, ExecutableClass? executableClass, string runpath, string rpath, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            BinaryHardeningId = binaryHardeningId;
            SecurityHardeningFeatures = securityHardeningFeatures;
            ExecutableArchitecture = executableArchitecture;
            FilePath = filePath;
            ExecutableClass = executableClass;
            Runpath = runpath;
            Rpath = rpath;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// ID for the binary hardening result.
        /// Serialized Name: BinaryHardeningResource.properties.binaryHardeningId
        /// </summary>
        public string BinaryHardeningId { get; set; }
        /// <summary>
        /// The security hardening features of the binary.
        /// Serialized Name: BinaryHardeningResource.properties.securityHardeningFeatures
        /// </summary>
        public BinaryHardeningFeatures SecurityHardeningFeatures { get; set; }
        /// <summary>
        /// The architecture of the binary being reported on.
        /// Serialized Name: BinaryHardeningResource.properties.executableArchitecture
        /// </summary>
        public string ExecutableArchitecture { get; set; }
        /// <summary>
        /// The path to the binary in the firmware.
        /// Serialized Name: BinaryHardeningResource.properties.filePath
        /// </summary>
        public string FilePath { get; set; }
        /// <summary>
        /// The executable class to indicate 32 or 64 bit.
        /// Serialized Name: BinaryHardeningResource.properties.executableClass
        /// </summary>
        public ExecutableClass? ExecutableClass { get; set; }
        /// <summary>
        /// The runpath property of the uploaded binary, which is a method of specifying additional paths to load objects at runtime.
        /// Serialized Name: BinaryHardeningResource.properties.runpath
        /// </summary>
        public string Runpath { get; set; }
        /// <summary>
        /// The rpath property of the uploaded binary, which is a deprecated method of specifying additional paths to load objects at runtime.
        /// Serialized Name: BinaryHardeningResource.properties.rpath
        /// </summary>
        public string Rpath { get; set; }
        /// <summary>
        /// The status of the last operation.
        /// Serialized Name: BinaryHardeningResource.properties.provisioningState
        /// </summary>
        public FirmwareProvisioningState? ProvisioningState { get; }
    }
}
