// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary> The object representing a firmware analysis CVE result resource. </summary>
    public partial class CveResult : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CveResult"/>. </summary>
        public CveResult()
        {
            CvssScores = new ChangeTrackingList<CvssScore>();
            Links = new ChangeTrackingList<CveLink>();
        }

        /// <summary> Initializes a new instance of <see cref="CveResult"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="cveId"> ID of the CVE result. </param>
        /// <param name="componentId"> ID of the affected SBOM component. </param>
        /// <param name="componentName"> Name of the affected SBOM component. </param>
        /// <param name="componentVersion"> Version of the affected SBOM component. </param>
        /// <param name="severity"> Severity of the CVE. </param>
        /// <param name="cveName"> Name of the CVE. </param>
        /// <param name="effectiveCvssScore"> The most recent CVSS score of the CVE. </param>
        /// <param name="effectiveCvssVersion"> The version of the effectiveCvssScore property. </param>
        /// <param name="cvssScores"> All known CVSS scores for the CVE. </param>
        /// <param name="links"> The list of reference links for the CVE. </param>
        /// <param name="description"> The CVE description. </param>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CveResult(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string cveId, string componentId, string componentName, string componentVersion, string severity, string cveName, float? effectiveCvssScore, int? effectiveCvssVersion, IList<CvssScore> cvssScores, IReadOnlyList<CveLink> links, string description, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            CveId = cveId;
            ComponentId = componentId;
            ComponentName = componentName;
            ComponentVersion = componentVersion;
            Severity = severity;
            CveName = cveName;
            EffectiveCvssScore = effectiveCvssScore;
            EffectiveCvssVersion = effectiveCvssVersion;
            CvssScores = cvssScores;
            Links = links;
            Description = description;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> ID of the CVE result. </summary>
        public string CveId { get; set; }
        /// <summary> ID of the affected SBOM component. </summary>
        public string ComponentId { get; set; }
        /// <summary> Name of the affected SBOM component. </summary>
        public string ComponentName { get; set; }
        /// <summary> Version of the affected SBOM component. </summary>
        public string ComponentVersion { get; set; }
        /// <summary> Severity of the CVE. </summary>
        public string Severity { get; set; }
        /// <summary> Name of the CVE. </summary>
        public string CveName { get; set; }
        /// <summary> The most recent CVSS score of the CVE. </summary>
        public float? EffectiveCvssScore { get; set; }
        /// <summary> The version of the effectiveCvssScore property. </summary>
        public int? EffectiveCvssVersion { get; set; }
        /// <summary> All known CVSS scores for the CVE. </summary>
        public IList<CvssScore> CvssScores { get; }
        /// <summary> The list of reference links for the CVE. </summary>
        public IReadOnlyList<CveLink> Links { get; }
        /// <summary> The CVE description. </summary>
        public string Description { get; set; }
        /// <summary> The status of the last operation. </summary>
        public FirmwareProvisioningState? ProvisioningState { get; }
    }
}
