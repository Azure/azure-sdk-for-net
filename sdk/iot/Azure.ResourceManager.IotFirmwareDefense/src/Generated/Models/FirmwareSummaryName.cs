// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary> The FirmwareSummaryName. </summary>
    public readonly partial struct FirmwareSummaryName : IEquatable<FirmwareSummaryName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FirmwareSummaryName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FirmwareSummaryName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FirmwareValue = "Firmware";
        private const string CveValue = "CVE";
        private const string BinaryHardeningValue = "BinaryHardening";
        private const string FirmwareCryptoCertificateValue = "CryptoCertificate";
        private const string FirmwareCryptoKeyValue = "CryptoKey";

        /// <summary> Firmware. </summary>
        public static FirmwareSummaryName Firmware { get; } = new FirmwareSummaryName(FirmwareValue);
        /// <summary> CVE. </summary>
        public static FirmwareSummaryName Cve { get; } = new FirmwareSummaryName(CveValue);
        /// <summary> BinaryHardening. </summary>
        public static FirmwareSummaryName BinaryHardening { get; } = new FirmwareSummaryName(BinaryHardeningValue);
        /// <summary> CryptoCertificate. </summary>
        public static FirmwareSummaryName FirmwareCryptoCertificate { get; } = new FirmwareSummaryName(FirmwareCryptoCertificateValue);
        /// <summary> CryptoKey. </summary>
        public static FirmwareSummaryName FirmwareCryptoKey { get; } = new FirmwareSummaryName(FirmwareCryptoKeyValue);
        /// <summary> Determines if two <see cref="FirmwareSummaryName"/> values are the same. </summary>
        public static bool operator ==(FirmwareSummaryName left, FirmwareSummaryName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FirmwareSummaryName"/> values are not the same. </summary>
        public static bool operator !=(FirmwareSummaryName left, FirmwareSummaryName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FirmwareSummaryName"/>. </summary>
        public static implicit operator FirmwareSummaryName(string value) => new FirmwareSummaryName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FirmwareSummaryName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FirmwareSummaryName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
