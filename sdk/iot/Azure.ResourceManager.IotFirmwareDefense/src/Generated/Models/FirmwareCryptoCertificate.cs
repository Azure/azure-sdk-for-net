// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary> Crypto certificate properties. </summary>
    public partial class FirmwareCryptoCertificate
    {
        /// <summary> Initializes a new instance of <see cref="FirmwareCryptoCertificate"/>. </summary>
        internal FirmwareCryptoCertificate()
        {
            Usage = new ChangeTrackingList<string>();
            FilePaths = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="FirmwareCryptoCertificate"/>. </summary>
        /// <param name="cryptoCertId"> ID for the certificate. </param>
        /// <param name="name"> Name of the certificate. </param>
        /// <param name="subject"> Subject information of the certificate. </param>
        /// <param name="issuer"> Issuer information of the certificate. </param>
        /// <param name="issuedOn"> Issue date for the certificate. </param>
        /// <param name="expireOn"> Expiration date for the certificate. </param>
        /// <param name="role"> Role of the certificate (Root CA, etc). </param>
        /// <param name="signatureAlgorithm"> The signature algorithm used in the certificate. </param>
        /// <param name="keySize"> Size of the certificate's key in bits. </param>
        /// <param name="keyAlgorithm"> Key algorithm used in the certificate. </param>
        /// <param name="encoding"> Encoding used for the certificate. </param>
        /// <param name="serialNumber"> Serial number of the certificate. </param>
        /// <param name="fingerprint"> Fingerprint of the certificate. </param>
        /// <param name="usage"> List of functions the certificate can fulfill. </param>
        /// <param name="filePaths"> List of files paths for this certificate. </param>
        /// <param name="pairedKey"> A matching paired private key. </param>
        /// <param name="isExpired"> Indicates if the certificate is expired. </param>
        /// <param name="isSelfSigned"> Indicates if the certificate was self-signed. </param>
        /// <param name="isWeakSignature"> Indicates the signature algorithm used is insecure. </param>
        /// <param name="isShortKeySize"> Indicates the certificate's key size is considered too small to be secure for the key algorithm. </param>
        internal FirmwareCryptoCertificate(string cryptoCertId, string name, FirmwareCryptoCertificateEntity subject, FirmwareCryptoCertificateEntity issuer, DateTimeOffset? issuedOn, DateTimeOffset? expireOn, string role, string signatureAlgorithm, long? keySize, string keyAlgorithm, string encoding, string serialNumber, string fingerprint, IReadOnlyList<string> usage, IReadOnlyList<string> filePaths, PairedKey pairedKey, IsExpired? isExpired, IsSelfSigned? isSelfSigned, IsWeakSignature? isWeakSignature, IsShortKeySize? isShortKeySize)
        {
            CryptoCertId = cryptoCertId;
            Name = name;
            Subject = subject;
            Issuer = issuer;
            IssuedOn = issuedOn;
            ExpireOn = expireOn;
            Role = role;
            SignatureAlgorithm = signatureAlgorithm;
            KeySize = keySize;
            KeyAlgorithm = keyAlgorithm;
            Encoding = encoding;
            SerialNumber = serialNumber;
            Fingerprint = fingerprint;
            Usage = usage;
            FilePaths = filePaths;
            PairedKey = pairedKey;
            IsExpired = isExpired;
            IsSelfSigned = isSelfSigned;
            IsWeakSignature = isWeakSignature;
            IsShortKeySize = isShortKeySize;
        }

        /// <summary> ID for the certificate. </summary>
        public string CryptoCertId { get; }
        /// <summary> Name of the certificate. </summary>
        public string Name { get; }
        /// <summary> Subject information of the certificate. </summary>
        public FirmwareCryptoCertificateEntity Subject { get; }
        /// <summary> Issuer information of the certificate. </summary>
        public FirmwareCryptoCertificateEntity Issuer { get; }
        /// <summary> Issue date for the certificate. </summary>
        public DateTimeOffset? IssuedOn { get; }
        /// <summary> Expiration date for the certificate. </summary>
        public DateTimeOffset? ExpireOn { get; }
        /// <summary> Role of the certificate (Root CA, etc). </summary>
        public string Role { get; }
        /// <summary> The signature algorithm used in the certificate. </summary>
        public string SignatureAlgorithm { get; }
        /// <summary> Size of the certificate's key in bits. </summary>
        public long? KeySize { get; }
        /// <summary> Key algorithm used in the certificate. </summary>
        public string KeyAlgorithm { get; }
        /// <summary> Encoding used for the certificate. </summary>
        public string Encoding { get; }
        /// <summary> Serial number of the certificate. </summary>
        public string SerialNumber { get; }
        /// <summary> Fingerprint of the certificate. </summary>
        public string Fingerprint { get; }
        /// <summary> List of functions the certificate can fulfill. </summary>
        public IReadOnlyList<string> Usage { get; }
        /// <summary> List of files paths for this certificate. </summary>
        public IReadOnlyList<string> FilePaths { get; }
        /// <summary> A matching paired private key. </summary>
        public PairedKey PairedKey { get; }
        /// <summary> Indicates if the certificate is expired. </summary>
        public IsExpired? IsExpired { get; }
        /// <summary> Indicates if the certificate was self-signed. </summary>
        public IsSelfSigned? IsSelfSigned { get; }
        /// <summary> Indicates the signature algorithm used is insecure. </summary>
        public IsWeakSignature? IsWeakSignature { get; }
        /// <summary> Indicates the certificate's key size is considered too small to be secure for the key algorithm. </summary>
        public IsShortKeySize? IsShortKeySize { get; }
    }
}
