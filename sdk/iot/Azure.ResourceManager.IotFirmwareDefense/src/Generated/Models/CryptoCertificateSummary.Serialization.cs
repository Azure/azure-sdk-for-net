// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class CryptoCertificateSummary : IUtf8JsonSerializable, IJsonModel<CryptoCertificateSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CryptoCertificateSummary>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CryptoCertificateSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CryptoCertificateSummary)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(TotalCertificateCount))
            {
                writer.WritePropertyName("totalCertificateCount"u8);
                writer.WriteNumberValue(TotalCertificateCount.Value);
            }
            if (Optional.IsDefined(PairedKeyCount))
            {
                writer.WritePropertyName("pairedKeyCount"u8);
                writer.WriteNumberValue(PairedKeyCount.Value);
            }
            if (Optional.IsDefined(ExpiredCertificateCount))
            {
                writer.WritePropertyName("expiredCertificateCount"u8);
                writer.WriteNumberValue(ExpiredCertificateCount.Value);
            }
            if (Optional.IsDefined(ExpiringSoonCertificateCount))
            {
                writer.WritePropertyName("expiringSoonCertificateCount"u8);
                writer.WriteNumberValue(ExpiringSoonCertificateCount.Value);
            }
            if (Optional.IsDefined(WeakSignatureCount))
            {
                writer.WritePropertyName("weakSignatureCount"u8);
                writer.WriteNumberValue(WeakSignatureCount.Value);
            }
            if (Optional.IsDefined(SelfSignedCertificateCount))
            {
                writer.WritePropertyName("selfSignedCertificateCount"u8);
                writer.WriteNumberValue(SelfSignedCertificateCount.Value);
            }
            if (Optional.IsDefined(ShortKeySizeCount))
            {
                writer.WritePropertyName("shortKeySizeCount"u8);
                writer.WriteNumberValue(ShortKeySizeCount.Value);
            }
        }

        CryptoCertificateSummary IJsonModel<CryptoCertificateSummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CryptoCertificateSummary)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCryptoCertificateSummary(document.RootElement, options);
        }

        internal static CryptoCertificateSummary DeserializeCryptoCertificateSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? totalCertificateCount = default;
            long? pairedKeyCount = default;
            long? expiredCertificateCount = default;
            long? expiringSoonCertificateCount = default;
            long? weakSignatureCount = default;
            long? selfSignedCertificateCount = default;
            long? shortKeySizeCount = default;
            FirmwareAnalysisSummaryType summaryType = default;
            FirmwareProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalCertificateCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalCertificateCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("pairedKeyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pairedKeyCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("expiredCertificateCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expiredCertificateCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("expiringSoonCertificateCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expiringSoonCertificateCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("weakSignatureCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    weakSignatureCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("selfSignedCertificateCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selfSignedCertificateCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("shortKeySizeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shortKeySizeCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("summaryType"u8))
                {
                    summaryType = new FirmwareAnalysisSummaryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new FirmwareProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CryptoCertificateSummary(
                summaryType,
                provisioningState,
                serializedAdditionalRawData,
                totalCertificateCount,
                pairedKeyCount,
                expiredCertificateCount,
                expiringSoonCertificateCount,
                weakSignatureCount,
                selfSignedCertificateCount,
                shortKeySizeCount);
        }

        BinaryData IPersistableModel<CryptoCertificateSummary>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateSummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CryptoCertificateSummary)} does not support writing '{options.Format}' format.");
            }
        }

        CryptoCertificateSummary IPersistableModel<CryptoCertificateSummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoCertificateSummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCryptoCertificateSummary(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CryptoCertificateSummary)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CryptoCertificateSummary>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
