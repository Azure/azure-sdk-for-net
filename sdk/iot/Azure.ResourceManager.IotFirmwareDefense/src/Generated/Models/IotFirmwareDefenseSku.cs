// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// The resource model definition representing SKU
    /// Serialized Name: Sku
    /// </summary>
    public partial class IotFirmwareDefenseSku
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IotFirmwareDefenseSku"/>. </summary>
        /// <param name="name">
        /// The name of the SKU. E.g. P3. It is typically a letter+number code
        /// Serialized Name: Sku.name
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        public IotFirmwareDefenseSku(string name)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
        }

        /// <summary> Initializes a new instance of <see cref="IotFirmwareDefenseSku"/>. </summary>
        /// <param name="name">
        /// The name of the SKU. E.g. P3. It is typically a letter+number code
        /// Serialized Name: Sku.name
        /// </param>
        /// <param name="tier">
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        /// Serialized Name: Sku.tier
        /// </param>
        /// <param name="size">
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// Serialized Name: Sku.size
        /// </param>
        /// <param name="family">
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// Serialized Name: Sku.family
        /// </param>
        /// <param name="capacity">
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        /// Serialized Name: Sku.capacity
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IotFirmwareDefenseSku(string name, IotFirmwareDefenseSkuTier? tier, string size, string family, int? capacity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Tier = tier;
            Size = size;
            Family = family;
            Capacity = capacity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="IotFirmwareDefenseSku"/> for deserialization. </summary>
        internal IotFirmwareDefenseSku()
        {
        }

        /// <summary>
        /// The name of the SKU. E.g. P3. It is typically a letter+number code
        /// Serialized Name: Sku.name
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        /// Serialized Name: Sku.tier
        /// </summary>
        public IotFirmwareDefenseSkuTier? Tier { get; set; }
        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// Serialized Name: Sku.size
        /// </summary>
        public string Size { get; set; }
        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// Serialized Name: Sku.family
        /// </summary>
        public string Family { get; set; }
        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
        /// Serialized Name: Sku.capacity
        /// </summary>
        public int? Capacity { get; set; }
    }
}
