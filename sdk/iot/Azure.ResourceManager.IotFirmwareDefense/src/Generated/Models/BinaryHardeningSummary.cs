// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// Properties for a binary hardening analysis summary.
    /// Serialized Name: BinaryHardeningSummaryResource
    /// </summary>
    public partial class BinaryHardeningSummary : FirmwareAnalysisSummaryProperties
    {
        /// <summary> Initializes a new instance of <see cref="BinaryHardeningSummary"/>. </summary>
        public BinaryHardeningSummary()
        {
            SummaryType = FirmwareAnalysisSummaryType.BinaryHardening;
        }

        /// <summary> Initializes a new instance of <see cref="BinaryHardeningSummary"/>. </summary>
        /// <param name="summaryType">
        /// The type of summary.
        /// Serialized Name: SummaryResourceProperties.summaryType
        /// </param>
        /// <param name="provisioningState">
        /// The status of the last operation.
        /// Serialized Name: SummaryResourceProperties.provisioningState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="totalFiles">
        /// Total number of binaries that were analyzed
        /// Serialized Name: BinaryHardeningSummaryResource.totalFiles
        /// </param>
        /// <param name="notExecutableStackCount">
        /// Total number of analyzed files that were found to have a nonexecutable stack
        /// Serialized Name: BinaryHardeningSummaryResource.notExecutableStackCount
        /// </param>
        /// <param name="positionIndependentExecutableCount">
        /// Total number of analyzed files that were compiled to be a position independent executable
        /// Serialized Name: BinaryHardeningSummaryResource.positionIndependentExecutableCount
        /// </param>
        /// <param name="relocationReadOnlyCount">
        /// Total number of analyzed files that have enabled relocation read-only protections
        /// Serialized Name: BinaryHardeningSummaryResource.relocationReadOnlyCount
        /// </param>
        /// <param name="stackCanaryCount">
        /// Total number of analyzed files that have stack canaries enabled
        /// Serialized Name: BinaryHardeningSummaryResource.stackCanaryCount
        /// </param>
        /// <param name="strippedBinaryCount">
        /// Total number of analyzed files that have debug symbols stripped
        /// Serialized Name: BinaryHardeningSummaryResource.strippedBinaryCount
        /// </param>
        internal BinaryHardeningSummary(FirmwareAnalysisSummaryType summaryType, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData, long? totalFiles, long? notExecutableStackCount, long? positionIndependentExecutableCount, long? relocationReadOnlyCount, long? stackCanaryCount, long? strippedBinaryCount) : base(summaryType, provisioningState, serializedAdditionalRawData)
        {
            TotalFiles = totalFiles;
            NotExecutableStackCount = notExecutableStackCount;
            PositionIndependentExecutableCount = positionIndependentExecutableCount;
            RelocationReadOnlyCount = relocationReadOnlyCount;
            StackCanaryCount = stackCanaryCount;
            StrippedBinaryCount = strippedBinaryCount;
            SummaryType = summaryType;
        }

        /// <summary>
        /// Total number of binaries that were analyzed
        /// Serialized Name: BinaryHardeningSummaryResource.totalFiles
        /// </summary>
        public long? TotalFiles { get; set; }
        /// <summary>
        /// Total number of analyzed files that were found to have a nonexecutable stack
        /// Serialized Name: BinaryHardeningSummaryResource.notExecutableStackCount
        /// </summary>
        public long? NotExecutableStackCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that were compiled to be a position independent executable
        /// Serialized Name: BinaryHardeningSummaryResource.positionIndependentExecutableCount
        /// </summary>
        public long? PositionIndependentExecutableCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that have enabled relocation read-only protections
        /// Serialized Name: BinaryHardeningSummaryResource.relocationReadOnlyCount
        /// </summary>
        public long? RelocationReadOnlyCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that have stack canaries enabled
        /// Serialized Name: BinaryHardeningSummaryResource.stackCanaryCount
        /// </summary>
        public long? StackCanaryCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that have debug symbols stripped
        /// Serialized Name: BinaryHardeningSummaryResource.strippedBinaryCount
        /// </summary>
        public long? StrippedBinaryCount { get; set; }
    }
}
