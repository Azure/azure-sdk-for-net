// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class FirmwareCryptoKey : IUtf8JsonSerializable, IModelJsonSerializable<FirmwareCryptoKey>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FirmwareCryptoKey>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FirmwareCryptoKey>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FirmwareCryptoKey>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(FirmwareCryptoKeyId))
            {
                if (FirmwareCryptoKeyId != null)
                {
                    writer.WritePropertyName("cryptoKeyId"u8);
                    writer.WriteStringValue(FirmwareCryptoKeyId);
                }
                else
                {
                    writer.WriteNull("cryptoKeyId");
                }
            }
            if (Optional.IsDefined(KeyType))
            {
                if (KeyType != null)
                {
                    writer.WritePropertyName("keyType"u8);
                    writer.WriteStringValue(KeyType);
                }
                else
                {
                    writer.WriteNull("keyType");
                }
            }
            if (Optional.IsDefined(KeySize))
            {
                if (KeySize != null)
                {
                    writer.WritePropertyName("keySize"u8);
                    writer.WriteNumberValue(KeySize.Value);
                }
                else
                {
                    writer.WriteNull("keySize");
                }
            }
            if (Optional.IsDefined(KeyAlgorithm))
            {
                if (KeyAlgorithm != null)
                {
                    writer.WritePropertyName("keyAlgorithm"u8);
                    writer.WriteStringValue(KeyAlgorithm);
                }
                else
                {
                    writer.WriteNull("keyAlgorithm");
                }
            }
            if (Optional.IsCollectionDefined(Usage))
            {
                if (Usage != null)
                {
                    writer.WritePropertyName("usage"u8);
                    writer.WriteStartArray();
                    foreach (var item in Usage)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("usage");
                }
            }
            if (Optional.IsDefined(PairedKey))
            {
                if (PairedKey != null)
                {
                    writer.WritePropertyName("pairedKey"u8);
                    if (PairedKey is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<PairedKey>)PairedKey).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("pairedKey");
                }
            }
            if (Optional.IsDefined(IsShortKeySize))
            {
                if (IsShortKeySize != null)
                {
                    writer.WritePropertyName("isShortKeySize"u8);
                    writer.WriteStringValue(IsShortKeySize.Value.ToString());
                }
                else
                {
                    writer.WriteNull("isShortKeySize");
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static FirmwareCryptoKey DeserializeFirmwareCryptoKey(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> firmwareCryptoKeyId = default;
            Optional<string> keyType = default;
            Optional<long?> keySize = default;
            Optional<string> keyAlgorithm = default;
            Optional<IReadOnlyList<string>> usage = default;
            Optional<IReadOnlyList<string>> filePaths = default;
            Optional<PairedKey> pairedKey = default;
            Optional<IsShortKeySize?> isShortKeySize = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cryptoKeyId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        firmwareCryptoKeyId = null;
                        continue;
                    }
                    firmwareCryptoKeyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyType = null;
                        continue;
                    }
                    keyType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keySize = null;
                        continue;
                    }
                    keySize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("keyAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyAlgorithm = null;
                        continue;
                    }
                    keyAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    usage = array;
                    continue;
                }
                if (property.NameEquals("filePaths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    filePaths = array;
                    continue;
                }
                if (property.NameEquals("pairedKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pairedKey = null;
                        continue;
                    }
                    pairedKey = PairedKey.DeserializePairedKey(property.Value);
                    continue;
                }
                if (property.NameEquals("isShortKeySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isShortKeySize = null;
                        continue;
                    }
                    isShortKeySize = new IsShortKeySize(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new FirmwareCryptoKey(firmwareCryptoKeyId.Value, keyType.Value, Optional.ToNullable(keySize), keyAlgorithm.Value, Optional.ToList(usage), Optional.ToList(filePaths), pairedKey.Value, Optional.ToNullable(isShortKeySize), serializedAdditionalRawData);
        }

        FirmwareCryptoKey IModelJsonSerializable<FirmwareCryptoKey>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FirmwareCryptoKey>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeFirmwareCryptoKey(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FirmwareCryptoKey>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FirmwareCryptoKey>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FirmwareCryptoKey IModelSerializable<FirmwareCryptoKey>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<FirmwareCryptoKey>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFirmwareCryptoKey(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="FirmwareCryptoKey"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="FirmwareCryptoKey"/> to convert. </param>
        public static implicit operator RequestContent(FirmwareCryptoKey model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="FirmwareCryptoKey"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator FirmwareCryptoKey(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeFirmwareCryptoKey(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
