// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class CryptoKeySummary : IUtf8JsonSerializable, IJsonModel<CryptoKeySummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CryptoKeySummary>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<CryptoKeySummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoKeySummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CryptoKeySummary)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(TotalKeyCount))
            {
                writer.WritePropertyName("totalKeyCount"u8);
                writer.WriteNumberValue(TotalKeyCount.Value);
            }
            if (Optional.IsDefined(PublicKeyCount))
            {
                writer.WritePropertyName("publicKeyCount"u8);
                writer.WriteNumberValue(PublicKeyCount.Value);
            }
            if (Optional.IsDefined(PrivateKeyCount))
            {
                writer.WritePropertyName("privateKeyCount"u8);
                writer.WriteNumberValue(PrivateKeyCount.Value);
            }
            if (Optional.IsDefined(PairedKeyCount))
            {
                writer.WritePropertyName("pairedKeyCount"u8);
                writer.WriteNumberValue(PairedKeyCount.Value);
            }
            if (Optional.IsDefined(ShortKeySizeCount))
            {
                writer.WritePropertyName("shortKeySizeCount"u8);
                writer.WriteNumberValue(ShortKeySizeCount.Value);
            }
        }

        CryptoKeySummary IJsonModel<CryptoKeySummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoKeySummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CryptoKeySummary)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCryptoKeySummary(document.RootElement, options);
        }

        internal static CryptoKeySummary DeserializeCryptoKeySummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? totalKeyCount = default;
            long? publicKeyCount = default;
            long? privateKeyCount = default;
            long? pairedKeyCount = default;
            long? shortKeySizeCount = default;
            FirmwareAnalysisSummaryType summaryType = default;
            FirmwareProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalKeyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalKeyCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("publicKeyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicKeyCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("privateKeyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    privateKeyCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("pairedKeyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pairedKeyCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("shortKeySizeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shortKeySizeCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("summaryType"u8))
                {
                    summaryType = new FirmwareAnalysisSummaryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new FirmwareProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new CryptoKeySummary(
                summaryType,
                provisioningState,
                serializedAdditionalRawData,
                totalKeyCount,
                publicKeyCount,
                privateKeyCount,
                pairedKeyCount,
                shortKeySizeCount);
        }

        BinaryData IPersistableModel<CryptoKeySummary>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoKeySummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CryptoKeySummary)} does not support writing '{options.Format}' format.");
            }
        }

        CryptoKeySummary IPersistableModel<CryptoKeySummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CryptoKeySummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeCryptoKeySummary(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CryptoKeySummary)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<CryptoKeySummary>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
