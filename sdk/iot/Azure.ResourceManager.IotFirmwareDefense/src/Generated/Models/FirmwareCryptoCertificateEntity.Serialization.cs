// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class FirmwareCryptoCertificateEntity : IUtf8JsonSerializable, IJsonModel<FirmwareCryptoCertificateEntity>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<FirmwareCryptoCertificateEntity>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<FirmwareCryptoCertificateEntity>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareCryptoCertificateEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FirmwareCryptoCertificateEntity)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(CommonName))
            {
                if (CommonName != null)
                {
                    writer.WritePropertyName("commonName"u8);
                    writer.WriteStringValue(CommonName);
                }
                else
                {
                    writer.WriteNull("commonName");
                }
            }
            if (Optional.IsDefined(Organization))
            {
                if (Organization != null)
                {
                    writer.WritePropertyName("organization"u8);
                    writer.WriteStringValue(Organization);
                }
                else
                {
                    writer.WriteNull("organization");
                }
            }
            if (Optional.IsDefined(OrganizationalUnit))
            {
                if (OrganizationalUnit != null)
                {
                    writer.WritePropertyName("organizationalUnit"u8);
                    writer.WriteStringValue(OrganizationalUnit);
                }
                else
                {
                    writer.WriteNull("organizationalUnit");
                }
            }
            if (Optional.IsDefined(State))
            {
                if (State != null)
                {
                    writer.WritePropertyName("state"u8);
                    writer.WriteStringValue(State);
                }
                else
                {
                    writer.WriteNull("state");
                }
            }
            if (Optional.IsDefined(Country))
            {
                if (Country != null)
                {
                    writer.WritePropertyName("country"u8);
                    writer.WriteStringValue(Country);
                }
                else
                {
                    writer.WriteNull("country");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        FirmwareCryptoCertificateEntity IJsonModel<FirmwareCryptoCertificateEntity>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareCryptoCertificateEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FirmwareCryptoCertificateEntity)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFirmwareCryptoCertificateEntity(document.RootElement, options);
        }

        internal static FirmwareCryptoCertificateEntity DeserializeFirmwareCryptoCertificateEntity(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> commonName = default;
            Optional<string> organization = default;
            Optional<string> organizationalUnit = default;
            Optional<string> state = default;
            Optional<string> country = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("commonName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        commonName = null;
                        continue;
                    }
                    commonName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organization = null;
                        continue;
                    }
                    organization = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationalUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organizationalUnit = null;
                        continue;
                    }
                    organizationalUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        state = null;
                        continue;
                    }
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        country = null;
                        continue;
                    }
                    country = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new FirmwareCryptoCertificateEntity(commonName.Value, organization.Value, organizationalUnit.Value, state.Value, country.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<FirmwareCryptoCertificateEntity>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareCryptoCertificateEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FirmwareCryptoCertificateEntity)} does not support '{options.Format}' format.");
            }
        }

        FirmwareCryptoCertificateEntity IPersistableModel<FirmwareCryptoCertificateEntity>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FirmwareCryptoCertificateEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFirmwareCryptoCertificateEntity(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FirmwareCryptoCertificateEntity)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<FirmwareCryptoCertificateEntity>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
