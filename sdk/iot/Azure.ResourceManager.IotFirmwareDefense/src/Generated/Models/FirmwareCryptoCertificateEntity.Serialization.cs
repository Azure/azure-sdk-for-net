// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class FirmwareCryptoCertificateEntity
    {
        internal static FirmwareCryptoCertificateEntity DeserializeFirmwareCryptoCertificateEntity(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> commonName = default;
            Core.Optional<string> organization = default;
            Core.Optional<string> organizationalUnit = default;
            Core.Optional<string> state = default;
            Core.Optional<string> country = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("commonName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        commonName = null;
                        continue;
                    }
                    commonName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organization = null;
                        continue;
                    }
                    organization = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("organizationalUnit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        organizationalUnit = null;
                        continue;
                    }
                    organizationalUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        state = null;
                        continue;
                    }
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        country = null;
                        continue;
                    }
                    country = property.Value.GetString();
                    continue;
                }
            }
            return new FirmwareCryptoCertificateEntity(commonName.Value, organization.Value, organizationalUnit.Value, state.Value, country.Value);
        }
    }
}
