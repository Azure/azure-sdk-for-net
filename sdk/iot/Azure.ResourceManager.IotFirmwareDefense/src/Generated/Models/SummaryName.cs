// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary> The SummaryName. </summary>
    public readonly partial struct SummaryName : IEquatable<SummaryName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SummaryName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SummaryName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FirmwareValue = "Firmware";
        private const string CVEValue = "CVE";
        private const string BinaryHardeningValue = "BinaryHardening";
        private const string FirmwareCryptoCertificateValue = "CryptoCertificate";
        private const string FirmwareCryptoKeyValue = "CryptoKey";

        /// <summary> Firmware. </summary>
        public static SummaryName Firmware { get; } = new SummaryName(FirmwareValue);
        /// <summary> CVE. </summary>
        public static SummaryName CVE { get; } = new SummaryName(CVEValue);
        /// <summary> BinaryHardening. </summary>
        public static SummaryName BinaryHardening { get; } = new SummaryName(BinaryHardeningValue);
        /// <summary> CryptoCertificate. </summary>
        public static SummaryName FirmwareCryptoCertificate { get; } = new SummaryName(FirmwareCryptoCertificateValue);
        /// <summary> CryptoKey. </summary>
        public static SummaryName FirmwareCryptoKey { get; } = new SummaryName(FirmwareCryptoKeyValue);
        /// <summary> Determines if two <see cref="SummaryName"/> values are the same. </summary>
        public static bool operator ==(SummaryName left, SummaryName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SummaryName"/> values are not the same. </summary>
        public static bool operator !=(SummaryName left, SummaryName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SummaryName"/>. </summary>
        public static implicit operator SummaryName(string value) => new SummaryName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SummaryName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SummaryName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
