// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// String to indicate if the executable is 32 or 64 bit.
    /// Serialized Name: ExecutableClass
    /// </summary>
    public readonly partial struct ExecutableClass : IEquatable<ExecutableClass>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExecutableClass"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExecutableClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string X86Value = "x86";
        private const string X64Value = "x64";

        /// <summary>
        /// The binary is 32-bit.
        /// Serialized Name: ExecutableClass.x86
        /// </summary>
        public static ExecutableClass X86 { get; } = new ExecutableClass(X86Value);
        /// <summary>
        /// The binary is 64-bit.
        /// Serialized Name: ExecutableClass.x64
        /// </summary>
        public static ExecutableClass X64 { get; } = new ExecutableClass(X64Value);
        /// <summary> Determines if two <see cref="ExecutableClass"/> values are the same. </summary>
        public static bool operator ==(ExecutableClass left, ExecutableClass right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExecutableClass"/> values are not the same. </summary>
        public static bool operator !=(ExecutableClass left, ExecutableClass right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ExecutableClass"/>. </summary>
        public static implicit operator ExecutableClass(string value) => new ExecutableClass(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExecutableClass other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExecutableClass other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
