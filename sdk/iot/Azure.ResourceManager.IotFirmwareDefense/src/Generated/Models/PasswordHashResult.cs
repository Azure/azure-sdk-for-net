// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// Password hash properties
    /// Serialized Name: PasswordHash
    /// </summary>
    public partial class PasswordHashResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PasswordHashResult"/>. </summary>
        public PasswordHashResult()
        {
        }

        /// <summary> Initializes a new instance of <see cref="PasswordHashResult"/>. </summary>
        /// <param name="passwordHashId">
        /// ID for password hash
        /// Serialized Name: PasswordHash.passwordHashId
        /// </param>
        /// <param name="filePath">
        /// File path of the password hash
        /// Serialized Name: PasswordHash.filePath
        /// </param>
        /// <param name="salt">
        /// Salt of the password hash
        /// Serialized Name: PasswordHash.salt
        /// </param>
        /// <param name="hash">
        /// Hash of the password
        /// Serialized Name: PasswordHash.hash
        /// </param>
        /// <param name="context">
        /// Context of password hash
        /// Serialized Name: PasswordHash.context
        /// </param>
        /// <param name="username">
        /// User name of password hash
        /// Serialized Name: PasswordHash.username
        /// </param>
        /// <param name="algorithm">
        /// Algorithm of the password hash
        /// Serialized Name: PasswordHash.algorithm
        /// </param>
        /// <param name="provisioningState">
        /// The status of the last operation.
        /// Serialized Name: PasswordHash.provisioningState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PasswordHashResult(string passwordHashId, string filePath, string salt, string hash, string context, string username, string algorithm, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PasswordHashId = passwordHashId;
            FilePath = filePath;
            Salt = salt;
            Hash = hash;
            Context = context;
            Username = username;
            Algorithm = algorithm;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// ID for password hash
        /// Serialized Name: PasswordHash.passwordHashId
        /// </summary>
        public string PasswordHashId { get; set; }
        /// <summary>
        /// File path of the password hash
        /// Serialized Name: PasswordHash.filePath
        /// </summary>
        public string FilePath { get; set; }
        /// <summary>
        /// Salt of the password hash
        /// Serialized Name: PasswordHash.salt
        /// </summary>
        public string Salt { get; set; }
        /// <summary>
        /// Hash of the password
        /// Serialized Name: PasswordHash.hash
        /// </summary>
        public string Hash { get; set; }
        /// <summary>
        /// Context of password hash
        /// Serialized Name: PasswordHash.context
        /// </summary>
        public string Context { get; set; }
        /// <summary>
        /// User name of password hash
        /// Serialized Name: PasswordHash.username
        /// </summary>
        public string Username { get; set; }
        /// <summary>
        /// Algorithm of the password hash
        /// Serialized Name: PasswordHash.algorithm
        /// </summary>
        public string Algorithm { get; set; }
        /// <summary>
        /// The status of the last operation.
        /// Serialized Name: PasswordHash.provisioningState
        /// </summary>
        public FirmwareProvisioningState? ProvisioningState { get; }
    }
}
