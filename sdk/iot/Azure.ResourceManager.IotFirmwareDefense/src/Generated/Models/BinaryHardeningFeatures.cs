// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// Binary hardening features.
    /// Serialized Name: BinaryHardeningFeatures
    /// </summary>
    public partial class BinaryHardeningFeatures
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BinaryHardeningFeatures"/>. </summary>
        public BinaryHardeningFeatures()
        {
        }

        /// <summary> Initializes a new instance of <see cref="BinaryHardeningFeatures"/>. </summary>
        /// <param name="noExecute">
        /// Flag indicating the binary's stack is set to NX (no-execute).
        /// Serialized Name: BinaryHardeningFeatures.noExecute
        /// </param>
        /// <param name="positionIndependentExecutable">
        /// Flag indicating the binary was compiled to be a position independent executable.
        /// Serialized Name: BinaryHardeningFeatures.positionIndependentExecutable
        /// </param>
        /// <param name="relocationReadOnly">
        /// Flag indicating the binary has enabled relocation read-only protections.
        /// Serialized Name: BinaryHardeningFeatures.relocationReadOnly
        /// </param>
        /// <param name="canary">
        /// Flag indicating if the binary was compiled with stack canaries enabled.
        /// Serialized Name: BinaryHardeningFeatures.canary
        /// </param>
        /// <param name="stripped">
        /// Flag indicating if debug symbols have been stripped from the binary.
        /// Serialized Name: BinaryHardeningFeatures.stripped
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BinaryHardeningFeatures(bool? noExecute, bool? positionIndependentExecutable, bool? relocationReadOnly, bool? canary, bool? stripped, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NoExecute = noExecute;
            PositionIndependentExecutable = positionIndependentExecutable;
            RelocationReadOnly = relocationReadOnly;
            Canary = canary;
            Stripped = stripped;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Flag indicating the binary's stack is set to NX (no-execute).
        /// Serialized Name: BinaryHardeningFeatures.noExecute
        /// </summary>
        public bool? NoExecute { get; set; }
        /// <summary>
        /// Flag indicating the binary was compiled to be a position independent executable.
        /// Serialized Name: BinaryHardeningFeatures.positionIndependentExecutable
        /// </summary>
        public bool? PositionIndependentExecutable { get; set; }
        /// <summary>
        /// Flag indicating the binary has enabled relocation read-only protections.
        /// Serialized Name: BinaryHardeningFeatures.relocationReadOnly
        /// </summary>
        public bool? RelocationReadOnly { get; set; }
        /// <summary>
        /// Flag indicating if the binary was compiled with stack canaries enabled.
        /// Serialized Name: BinaryHardeningFeatures.canary
        /// </summary>
        public bool? Canary { get; set; }
        /// <summary>
        /// Flag indicating if debug symbols have been stripped from the binary.
        /// Serialized Name: BinaryHardeningFeatures.stripped
        /// </summary>
        public bool? Stripped { get; set; }
    }
}
