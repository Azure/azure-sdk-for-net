// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    /// <summary>
    /// Crypto certificate properties
    /// Serialized Name: CryptoCertificate
    /// </summary>
    public partial class CryptoCertificateResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CryptoCertificateResult"/>. </summary>
        public CryptoCertificateResult()
        {
            CertificateUsage = new ChangeTrackingList<CertificateUsage>();
            FilePaths = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="CryptoCertificateResult"/>. </summary>
        /// <param name="cryptoCertId">
        /// ID for the certificate result.
        /// Serialized Name: CryptoCertificate.cryptoCertId
        /// </param>
        /// <param name="certificateName">
        /// Name of the certificate.
        /// Serialized Name: CryptoCertificate.certificateName
        /// </param>
        /// <param name="subject">
        /// Subject information of the certificate.
        /// Serialized Name: CryptoCertificate.subject
        /// </param>
        /// <param name="issuer">
        /// Issuer information of the certificate.
        /// Serialized Name: CryptoCertificate.issuer
        /// </param>
        /// <param name="issuedOn">
        /// Issue date for the certificate.
        /// Serialized Name: CryptoCertificate.issuedDate
        /// </param>
        /// <param name="expireOn">
        /// Expiration date for the certificate.
        /// Serialized Name: CryptoCertificate.expirationDate
        /// </param>
        /// <param name="certificateRole">
        /// Role of the certificate (Root CA, etc)
        /// Serialized Name: CryptoCertificate.certificateRole
        /// </param>
        /// <param name="signatureAlgorithm">
        /// The signature algorithm used in the certificate.
        /// Serialized Name: CryptoCertificate.signatureAlgorithm
        /// </param>
        /// <param name="certificateKeySize">
        /// Size of the certificate's key in bits
        /// Serialized Name: CryptoCertificate.certificateKeySize
        /// </param>
        /// <param name="certificateKeyAlgorithm">
        /// Key algorithm used in the certificate.
        /// Serialized Name: CryptoCertificate.certificateKeyAlgorithm
        /// </param>
        /// <param name="encoding">
        /// Encoding used for the certificate.
        /// Serialized Name: CryptoCertificate.encoding
        /// </param>
        /// <param name="serialNumber">
        /// Serial number of the certificate.
        /// Serialized Name: CryptoCertificate.serialNumber
        /// </param>
        /// <param name="fingerprint">
        /// Fingerprint of the certificate.
        /// Serialized Name: CryptoCertificate.fingerprint
        /// </param>
        /// <param name="certificateUsage">
        /// List of functions the certificate can fulfill.
        /// Serialized Name: CryptoCertificate.certificateUsage
        /// </param>
        /// <param name="filePaths">
        /// List of files where this certificate was found.
        /// Serialized Name: CryptoCertificate.filePaths
        /// </param>
        /// <param name="pairedKey">
        /// A matching paired private key.
        /// Serialized Name: CryptoCertificate.pairedKey
        /// </param>
        /// <param name="isExpired">
        /// Indicates if the certificate is expired.
        /// Serialized Name: CryptoCertificate.isExpired
        /// </param>
        /// <param name="isSelfSigned">
        /// Indicates if the certificate is self-signed.
        /// Serialized Name: CryptoCertificate.isSelfSigned
        /// </param>
        /// <param name="isWeakSignature">
        /// Indicates the signature algorithm used is insecure according to NIST guidance.
        /// Serialized Name: CryptoCertificate.isWeakSignature
        /// </param>
        /// <param name="isShortKeySize">
        /// Indicates the certificate's key size is considered too small to be secure for the key algorithm according to NIST guidance.
        /// Serialized Name: CryptoCertificate.isShortKeySize
        /// </param>
        /// <param name="provisioningState">
        /// The status of the last operation.
        /// Serialized Name: CryptoCertificate.provisioningState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CryptoCertificateResult(string cryptoCertId, string certificateName, CryptoCertificateEntity subject, CryptoCertificateEntity issuer, DateTimeOffset? issuedOn, DateTimeOffset? expireOn, string certificateRole, string signatureAlgorithm, long? certificateKeySize, string certificateKeyAlgorithm, string encoding, string serialNumber, string fingerprint, IList<CertificateUsage> certificateUsage, IReadOnlyList<string> filePaths, CryptoPairedKey pairedKey, bool? isExpired, bool? isSelfSigned, bool? isWeakSignature, bool? isShortKeySize, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CryptoCertId = cryptoCertId;
            CertificateName = certificateName;
            Subject = subject;
            Issuer = issuer;
            IssuedOn = issuedOn;
            ExpireOn = expireOn;
            CertificateRole = certificateRole;
            SignatureAlgorithm = signatureAlgorithm;
            CertificateKeySize = certificateKeySize;
            CertificateKeyAlgorithm = certificateKeyAlgorithm;
            Encoding = encoding;
            SerialNumber = serialNumber;
            Fingerprint = fingerprint;
            CertificateUsage = certificateUsage;
            FilePaths = filePaths;
            PairedKey = pairedKey;
            IsExpired = isExpired;
            IsSelfSigned = isSelfSigned;
            IsWeakSignature = isWeakSignature;
            IsShortKeySize = isShortKeySize;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// ID for the certificate result.
        /// Serialized Name: CryptoCertificate.cryptoCertId
        /// </summary>
        public string CryptoCertId { get; set; }
        /// <summary>
        /// Name of the certificate.
        /// Serialized Name: CryptoCertificate.certificateName
        /// </summary>
        public string CertificateName { get; set; }
        /// <summary>
        /// Subject information of the certificate.
        /// Serialized Name: CryptoCertificate.subject
        /// </summary>
        public CryptoCertificateEntity Subject { get; set; }
        /// <summary>
        /// Issuer information of the certificate.
        /// Serialized Name: CryptoCertificate.issuer
        /// </summary>
        public CryptoCertificateEntity Issuer { get; set; }
        /// <summary>
        /// Issue date for the certificate.
        /// Serialized Name: CryptoCertificate.issuedDate
        /// </summary>
        public DateTimeOffset? IssuedOn { get; set; }
        /// <summary>
        /// Expiration date for the certificate.
        /// Serialized Name: CryptoCertificate.expirationDate
        /// </summary>
        public DateTimeOffset? ExpireOn { get; set; }
        /// <summary>
        /// Role of the certificate (Root CA, etc)
        /// Serialized Name: CryptoCertificate.certificateRole
        /// </summary>
        public string CertificateRole { get; set; }
        /// <summary>
        /// The signature algorithm used in the certificate.
        /// Serialized Name: CryptoCertificate.signatureAlgorithm
        /// </summary>
        public string SignatureAlgorithm { get; set; }
        /// <summary>
        /// Size of the certificate's key in bits
        /// Serialized Name: CryptoCertificate.certificateKeySize
        /// </summary>
        public long? CertificateKeySize { get; set; }
        /// <summary>
        /// Key algorithm used in the certificate.
        /// Serialized Name: CryptoCertificate.certificateKeyAlgorithm
        /// </summary>
        public string CertificateKeyAlgorithm { get; set; }
        /// <summary>
        /// Encoding used for the certificate.
        /// Serialized Name: CryptoCertificate.encoding
        /// </summary>
        public string Encoding { get; set; }
        /// <summary>
        /// Serial number of the certificate.
        /// Serialized Name: CryptoCertificate.serialNumber
        /// </summary>
        public string SerialNumber { get; set; }
        /// <summary>
        /// Fingerprint of the certificate.
        /// Serialized Name: CryptoCertificate.fingerprint
        /// </summary>
        public string Fingerprint { get; set; }
        /// <summary>
        /// List of functions the certificate can fulfill.
        /// Serialized Name: CryptoCertificate.certificateUsage
        /// </summary>
        public IList<CertificateUsage> CertificateUsage { get; }
        /// <summary>
        /// List of files where this certificate was found.
        /// Serialized Name: CryptoCertificate.filePaths
        /// </summary>
        public IReadOnlyList<string> FilePaths { get; }
        /// <summary>
        /// A matching paired private key.
        /// Serialized Name: CryptoCertificate.pairedKey
        /// </summary>
        public CryptoPairedKey PairedKey { get; set; }
        /// <summary>
        /// Indicates if the certificate is expired.
        /// Serialized Name: CryptoCertificate.isExpired
        /// </summary>
        public bool? IsExpired { get; set; }
        /// <summary>
        /// Indicates if the certificate is self-signed.
        /// Serialized Name: CryptoCertificate.isSelfSigned
        /// </summary>
        public bool? IsSelfSigned { get; set; }
        /// <summary>
        /// Indicates the signature algorithm used is insecure according to NIST guidance.
        /// Serialized Name: CryptoCertificate.isWeakSignature
        /// </summary>
        public bool? IsWeakSignature { get; set; }
        /// <summary>
        /// Indicates the certificate's key size is considered too small to be secure for the key algorithm according to NIST guidance.
        /// Serialized Name: CryptoCertificate.isShortKeySize
        /// </summary>
        public bool? IsShortKeySize { get; set; }
        /// <summary>
        /// The status of the last operation.
        /// Serialized Name: CryptoCertificate.provisioningState
        /// </summary>
        public FirmwareProvisioningState? ProvisioningState { get; }
    }
}
