// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class BinaryHardeningSummary : IUtf8JsonSerializable, IModelJsonSerializable<BinaryHardeningSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BinaryHardeningSummary>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BinaryHardeningSummary>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(TotalFiles))
            {
                writer.WritePropertyName("totalFiles"u8);
                writer.WriteNumberValue(TotalFiles.Value);
            }
            if (Optional.IsDefined(Nx))
            {
                if (Nx != null)
                {
                    writer.WritePropertyName("nx"u8);
                    writer.WriteNumberValue(Nx.Value);
                }
                else
                {
                    writer.WriteNull("nx");
                }
            }
            if (Optional.IsDefined(Pie))
            {
                if (Pie != null)
                {
                    writer.WritePropertyName("pie"u8);
                    writer.WriteNumberValue(Pie.Value);
                }
                else
                {
                    writer.WriteNull("pie");
                }
            }
            if (Optional.IsDefined(Relro))
            {
                if (Relro != null)
                {
                    writer.WritePropertyName("relro"u8);
                    writer.WriteNumberValue(Relro.Value);
                }
                else
                {
                    writer.WriteNull("relro");
                }
            }
            if (Optional.IsDefined(Canary))
            {
                if (Canary != null)
                {
                    writer.WritePropertyName("canary"u8);
                    writer.WriteNumberValue(Canary.Value);
                }
                else
                {
                    writer.WriteNull("canary");
                }
            }
            if (Optional.IsDefined(Stripped))
            {
                if (Stripped != null)
                {
                    writer.WritePropertyName("stripped"u8);
                    writer.WriteNumberValue(Stripped.Value);
                }
                else
                {
                    writer.WriteNull("stripped");
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BinaryHardeningSummary DeserializeBinaryHardeningSummary(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> totalFiles = default;
            Optional<int?> nx = default;
            Optional<int?> pie = default;
            Optional<int?> relro = default;
            Optional<int?> canary = default;
            Optional<int?> stripped = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("totalFiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalFiles = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("nx"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        nx = null;
                        continue;
                    }
                    nx = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("pie"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pie = null;
                        continue;
                    }
                    pie = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("relro"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        relro = null;
                        continue;
                    }
                    relro = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("canary"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        canary = null;
                        continue;
                    }
                    canary = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stripped"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stripped = null;
                        continue;
                    }
                    stripped = property.Value.GetInt32();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new BinaryHardeningSummary(Optional.ToNullable(totalFiles), Optional.ToNullable(nx), Optional.ToNullable(pie), Optional.ToNullable(relro), Optional.ToNullable(canary), Optional.ToNullable(stripped), rawData);
        }

        BinaryHardeningSummary IModelJsonSerializable<BinaryHardeningSummary>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBinaryHardeningSummary(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BinaryHardeningSummary>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BinaryHardeningSummary IModelSerializable<BinaryHardeningSummary>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBinaryHardeningSummary(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BinaryHardeningSummary"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BinaryHardeningSummary"/> to convert. </param>
        public static implicit operator RequestContent(BinaryHardeningSummary model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BinaryHardeningSummary"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BinaryHardeningSummary(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBinaryHardeningSummary(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
