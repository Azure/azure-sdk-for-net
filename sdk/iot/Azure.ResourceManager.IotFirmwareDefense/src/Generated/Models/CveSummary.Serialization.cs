// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class CveSummary : IUtf8JsonSerializable, IJsonModel<CveSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CveSummary>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<CveSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CveSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CveSummary)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Critical.HasValue)
            {
                if (Critical != null)
                {
                    writer.WritePropertyName("critical"u8);
                    writer.WriteNumberValue(Critical.Value);
                }
                else
                {
                    writer.WriteNull("critical");
                }
            }
            if (High.HasValue)
            {
                if (High != null)
                {
                    writer.WritePropertyName("high"u8);
                    writer.WriteNumberValue(High.Value);
                }
                else
                {
                    writer.WriteNull("high");
                }
            }
            if (Medium.HasValue)
            {
                if (Medium != null)
                {
                    writer.WritePropertyName("medium"u8);
                    writer.WriteNumberValue(Medium.Value);
                }
                else
                {
                    writer.WriteNull("medium");
                }
            }
            if (Low.HasValue)
            {
                if (Low != null)
                {
                    writer.WritePropertyName("low"u8);
                    writer.WriteNumberValue(Low.Value);
                }
                else
                {
                    writer.WriteNull("low");
                }
            }
            if (Unknown.HasValue)
            {
                if (Unknown != null)
                {
                    writer.WritePropertyName("unknown"u8);
                    writer.WriteNumberValue(Unknown.Value);
                }
                else
                {
                    writer.WriteNull("unknown");
                }
            }
            if (Undefined.HasValue)
            {
                if (Undefined != null)
                {
                    writer.WritePropertyName("undefined"u8);
                    writer.WriteNumberValue(Undefined.Value);
                }
                else
                {
                    writer.WriteNull("undefined");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CveSummary IJsonModel<CveSummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CveSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CveSummary)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCveSummary(document.RootElement, options);
        }

        internal static CveSummary DeserializeCveSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long?> critical = default;
            Optional<long?> high = default;
            Optional<long?> medium = default;
            Optional<long?> low = default;
            Optional<long?> unknown = default;
            Optional<long?> undefined = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("critical"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        critical = null;
                        continue;
                    }
                    critical = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("high"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        high = null;
                        continue;
                    }
                    high = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("medium"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        medium = null;
                        continue;
                    }
                    medium = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("low"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        low = null;
                        continue;
                    }
                    low = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("unknown"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        unknown = null;
                        continue;
                    }
                    unknown = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("undefined"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        undefined = null;
                        continue;
                    }
                    undefined = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new CveSummary(
                Optional.ToNullable(critical),
                Optional.ToNullable(high),
                Optional.ToNullable(medium),
                Optional.ToNullable(low),
                Optional.ToNullable(unknown),
                Optional.ToNullable(undefined),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CveSummary>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CveSummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CveSummary)} does not support '{options.Format}' format.");
            }
        }

        CveSummary IPersistableModel<CveSummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CveSummary>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCveSummary(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CveSummary)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<CveSummary>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
