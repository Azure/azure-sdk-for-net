// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class BinaryHardening
    {
        internal static BinaryHardening DeserializeBinaryHardening(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> binaryHardeningId = default;
            Optional<string> architecture = default;
            Optional<string> path = default;
            Optional<string> @class = default;
            Optional<string> runpath = default;
            Optional<string> rpath = default;
            Optional<NxFlag> nx = default;
            Optional<PieFlag> pie = default;
            Optional<RelroFlag> relro = default;
            Optional<CanaryFlag> canary = default;
            Optional<StrippedFlag> stripped = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("binaryHardeningId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        binaryHardeningId = null;
                        continue;
                    }
                    binaryHardeningId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("architecture"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        architecture = null;
                        continue;
                    }
                    architecture = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        path = null;
                        continue;
                    }
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("class"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        @class = null;
                        continue;
                    }
                    @class = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runpath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        runpath = null;
                        continue;
                    }
                    runpath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rpath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rpath = null;
                        continue;
                    }
                    rpath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("features"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("nx"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nx = new NxFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("pie"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pie = new PieFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("relro"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            relro = new RelroFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("canary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            canary = new CanaryFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("stripped"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            stripped = new StrippedFlag(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BinaryHardening(binaryHardeningId.Value, architecture.Value, path.Value, @class.Value, runpath.Value, rpath.Value, Optional.ToNullable(nx), Optional.ToNullable(pie), Optional.ToNullable(relro), Optional.ToNullable(canary), Optional.ToNullable(stripped));
        }
    }
}
