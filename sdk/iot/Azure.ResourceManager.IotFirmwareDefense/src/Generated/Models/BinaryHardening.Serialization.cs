// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class BinaryHardening : IUtf8JsonSerializable, IModelJsonSerializable<BinaryHardening>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BinaryHardening>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BinaryHardening>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BinaryHardening>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(BinaryHardeningId))
            {
                if (BinaryHardeningId != null)
                {
                    writer.WritePropertyName("binaryHardeningId"u8);
                    writer.WriteStringValue(BinaryHardeningId);
                }
                else
                {
                    writer.WriteNull("binaryHardeningId");
                }
            }
            if (Optional.IsDefined(Architecture))
            {
                if (Architecture != null)
                {
                    writer.WritePropertyName("architecture"u8);
                    writer.WriteStringValue(Architecture);
                }
                else
                {
                    writer.WriteNull("architecture");
                }
            }
            if (Optional.IsDefined(Path))
            {
                if (Path != null)
                {
                    writer.WritePropertyName("path"u8);
                    writer.WriteStringValue(Path);
                }
                else
                {
                    writer.WriteNull("path");
                }
            }
            if (Optional.IsDefined(Class))
            {
                if (Class != null)
                {
                    writer.WritePropertyName("class"u8);
                    writer.WriteStringValue(Class);
                }
                else
                {
                    writer.WriteNull("class");
                }
            }
            if (Optional.IsDefined(Runpath))
            {
                if (Runpath != null)
                {
                    writer.WritePropertyName("runpath"u8);
                    writer.WriteStringValue(Runpath);
                }
                else
                {
                    writer.WriteNull("runpath");
                }
            }
            if (Optional.IsDefined(Rpath))
            {
                if (Rpath != null)
                {
                    writer.WritePropertyName("rpath"u8);
                    writer.WriteStringValue(Rpath);
                }
                else
                {
                    writer.WriteNull("rpath");
                }
            }
            writer.WritePropertyName("features"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Nx))
            {
                writer.WritePropertyName("nx"u8);
                writer.WriteStringValue(Nx.Value.ToString());
            }
            if (Optional.IsDefined(Pie))
            {
                writer.WritePropertyName("pie"u8);
                writer.WriteStringValue(Pie.Value.ToString());
            }
            if (Optional.IsDefined(Relro))
            {
                writer.WritePropertyName("relro"u8);
                writer.WriteStringValue(Relro.Value.ToString());
            }
            if (Optional.IsDefined(Canary))
            {
                writer.WritePropertyName("canary"u8);
                writer.WriteStringValue(Canary.Value.ToString());
            }
            if (Optional.IsDefined(Stripped))
            {
                writer.WritePropertyName("stripped"u8);
                writer.WriteStringValue(Stripped.Value.ToString());
            }
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BinaryHardening DeserializeBinaryHardening(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> binaryHardeningId = default;
            Optional<string> architecture = default;
            Optional<string> path = default;
            Optional<string> @class = default;
            Optional<string> runpath = default;
            Optional<string> rpath = default;
            Optional<NxFlag> nx = default;
            Optional<PieFlag> pie = default;
            Optional<RelroFlag> relro = default;
            Optional<CanaryFlag> canary = default;
            Optional<StrippedFlag> stripped = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("binaryHardeningId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        binaryHardeningId = null;
                        continue;
                    }
                    binaryHardeningId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("architecture"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        architecture = null;
                        continue;
                    }
                    architecture = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        path = null;
                        continue;
                    }
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("class"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        @class = null;
                        continue;
                    }
                    @class = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runpath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        runpath = null;
                        continue;
                    }
                    runpath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rpath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        rpath = null;
                        continue;
                    }
                    rpath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("features"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("nx"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nx = new NxFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("pie"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            pie = new PieFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("relro"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            relro = new RelroFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("canary"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            canary = new CanaryFlag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("stripped"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            stripped = new StrippedFlag(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new BinaryHardening(binaryHardeningId.Value, architecture.Value, path.Value, @class.Value, runpath.Value, rpath.Value, Optional.ToNullable(nx), Optional.ToNullable(pie), Optional.ToNullable(relro), Optional.ToNullable(canary), Optional.ToNullable(stripped), rawData);
        }

        BinaryHardening IModelJsonSerializable<BinaryHardening>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BinaryHardening>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBinaryHardening(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BinaryHardening>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BinaryHardening>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BinaryHardening IModelSerializable<BinaryHardening>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BinaryHardening>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBinaryHardening(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BinaryHardening"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BinaryHardening"/> to convert. </param>
        public static implicit operator RequestContent(BinaryHardening model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BinaryHardening"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BinaryHardening(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBinaryHardening(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
