// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class FirmwareCryptoCertificate : IUtf8JsonSerializable, IModelJsonSerializable<FirmwareCryptoCertificate>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<FirmwareCryptoCertificate>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<FirmwareCryptoCertificate>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(CryptoCertId))
            {
                if (CryptoCertId != null)
                {
                    writer.WritePropertyName("cryptoCertId"u8);
                    writer.WriteStringValue(CryptoCertId);
                }
                else
                {
                    writer.WriteNull("cryptoCertId");
                }
            }
            if (Optional.IsDefined(Name))
            {
                if (Name != null)
                {
                    writer.WritePropertyName("name"u8);
                    writer.WriteStringValue(Name);
                }
                else
                {
                    writer.WriteNull("name");
                }
            }
            if (Optional.IsDefined(Subject))
            {
                if (Subject != null)
                {
                    writer.WritePropertyName("subject"u8);
                    writer.WriteObjectValue(Subject);
                }
                else
                {
                    writer.WriteNull("subject");
                }
            }
            if (Optional.IsDefined(Issuer))
            {
                if (Issuer != null)
                {
                    writer.WritePropertyName("issuer"u8);
                    writer.WriteObjectValue(Issuer);
                }
                else
                {
                    writer.WriteNull("issuer");
                }
            }
            if (Optional.IsDefined(IssuedOn))
            {
                if (IssuedOn != null)
                {
                    writer.WritePropertyName("issuedDate"u8);
                    writer.WriteStringValue(IssuedOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("issuedDate");
                }
            }
            if (Optional.IsDefined(ExpireOn))
            {
                if (ExpireOn != null)
                {
                    writer.WritePropertyName("expirationDate"u8);
                    writer.WriteStringValue(ExpireOn.Value, "O");
                }
                else
                {
                    writer.WriteNull("expirationDate");
                }
            }
            if (Optional.IsDefined(Role))
            {
                if (Role != null)
                {
                    writer.WritePropertyName("role"u8);
                    writer.WriteStringValue(Role);
                }
                else
                {
                    writer.WriteNull("role");
                }
            }
            if (Optional.IsDefined(SignatureAlgorithm))
            {
                if (SignatureAlgorithm != null)
                {
                    writer.WritePropertyName("signatureAlgorithm"u8);
                    writer.WriteStringValue(SignatureAlgorithm);
                }
                else
                {
                    writer.WriteNull("signatureAlgorithm");
                }
            }
            if (Optional.IsDefined(KeySize))
            {
                if (KeySize != null)
                {
                    writer.WritePropertyName("keySize"u8);
                    writer.WriteNumberValue(KeySize.Value);
                }
                else
                {
                    writer.WriteNull("keySize");
                }
            }
            if (Optional.IsDefined(KeyAlgorithm))
            {
                if (KeyAlgorithm != null)
                {
                    writer.WritePropertyName("keyAlgorithm"u8);
                    writer.WriteStringValue(KeyAlgorithm);
                }
                else
                {
                    writer.WriteNull("keyAlgorithm");
                }
            }
            if (Optional.IsDefined(Encoding))
            {
                if (Encoding != null)
                {
                    writer.WritePropertyName("encoding"u8);
                    writer.WriteStringValue(Encoding);
                }
                else
                {
                    writer.WriteNull("encoding");
                }
            }
            if (Optional.IsDefined(SerialNumber))
            {
                if (SerialNumber != null)
                {
                    writer.WritePropertyName("serialNumber"u8);
                    writer.WriteStringValue(SerialNumber);
                }
                else
                {
                    writer.WriteNull("serialNumber");
                }
            }
            if (Optional.IsDefined(Fingerprint))
            {
                if (Fingerprint != null)
                {
                    writer.WritePropertyName("fingerprint"u8);
                    writer.WriteStringValue(Fingerprint);
                }
                else
                {
                    writer.WriteNull("fingerprint");
                }
            }
            if (Optional.IsCollectionDefined(Usage))
            {
                if (Usage != null)
                {
                    writer.WritePropertyName("usage"u8);
                    writer.WriteStartArray();
                    foreach (var item in Usage)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("usage");
                }
            }
            if (Optional.IsDefined(PairedKey))
            {
                if (PairedKey != null)
                {
                    writer.WritePropertyName("pairedKey"u8);
                    writer.WriteObjectValue(PairedKey);
                }
                else
                {
                    writer.WriteNull("pairedKey");
                }
            }
            if (Optional.IsDefined(IsExpired))
            {
                if (IsExpired != null)
                {
                    writer.WritePropertyName("isExpired"u8);
                    writer.WriteStringValue(IsExpired.Value.ToString());
                }
                else
                {
                    writer.WriteNull("isExpired");
                }
            }
            if (Optional.IsDefined(IsSelfSigned))
            {
                if (IsSelfSigned != null)
                {
                    writer.WritePropertyName("isSelfSigned"u8);
                    writer.WriteStringValue(IsSelfSigned.Value.ToString());
                }
                else
                {
                    writer.WriteNull("isSelfSigned");
                }
            }
            if (Optional.IsDefined(IsWeakSignature))
            {
                if (IsWeakSignature != null)
                {
                    writer.WritePropertyName("isWeakSignature"u8);
                    writer.WriteStringValue(IsWeakSignature.Value.ToString());
                }
                else
                {
                    writer.WriteNull("isWeakSignature");
                }
            }
            if (Optional.IsDefined(IsShortKeySize))
            {
                if (IsShortKeySize != null)
                {
                    writer.WritePropertyName("isShortKeySize"u8);
                    writer.WriteStringValue(IsShortKeySize.Value.ToString());
                }
                else
                {
                    writer.WriteNull("isShortKeySize");
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static FirmwareCryptoCertificate DeserializeFirmwareCryptoCertificate(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> cryptoCertId = default;
            Optional<string> name = default;
            Optional<FirmwareCryptoCertificateEntity> subject = default;
            Optional<FirmwareCryptoCertificateEntity> issuer = default;
            Optional<DateTimeOffset?> issuedDate = default;
            Optional<DateTimeOffset?> expirationDate = default;
            Optional<string> role = default;
            Optional<string> signatureAlgorithm = default;
            Optional<long?> keySize = default;
            Optional<string> keyAlgorithm = default;
            Optional<string> encoding = default;
            Optional<string> serialNumber = default;
            Optional<string> fingerprint = default;
            Optional<IReadOnlyList<string>> usage = default;
            Optional<IReadOnlyList<string>> filePaths = default;
            Optional<PairedKey> pairedKey = default;
            Optional<IsExpired?> isExpired = default;
            Optional<IsSelfSigned?> isSelfSigned = default;
            Optional<IsWeakSignature?> isWeakSignature = default;
            Optional<IsShortKeySize?> isShortKeySize = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cryptoCertId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cryptoCertId = null;
                        continue;
                    }
                    cryptoCertId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subject"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subject = null;
                        continue;
                    }
                    subject = FirmwareCryptoCertificateEntity.DeserializeFirmwareCryptoCertificateEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("issuer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        issuer = null;
                        continue;
                    }
                    issuer = FirmwareCryptoCertificateEntity.DeserializeFirmwareCryptoCertificateEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("issuedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        issuedDate = null;
                        continue;
                    }
                    issuedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("expirationDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        expirationDate = null;
                        continue;
                    }
                    expirationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("role"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        role = null;
                        continue;
                    }
                    role = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signatureAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        signatureAlgorithm = null;
                        continue;
                    }
                    signatureAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keySize = null;
                        continue;
                    }
                    keySize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("keyAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyAlgorithm = null;
                        continue;
                    }
                    keyAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encoding"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        encoding = null;
                        continue;
                    }
                    encoding = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        serialNumber = null;
                        continue;
                    }
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fingerprint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fingerprint = null;
                        continue;
                    }
                    fingerprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    usage = array;
                    continue;
                }
                if (property.NameEquals("filePaths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    filePaths = array;
                    continue;
                }
                if (property.NameEquals("pairedKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pairedKey = null;
                        continue;
                    }
                    pairedKey = PairedKey.DeserializePairedKey(property.Value);
                    continue;
                }
                if (property.NameEquals("isExpired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isExpired = null;
                        continue;
                    }
                    isExpired = new IsExpired(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isSelfSigned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isSelfSigned = null;
                        continue;
                    }
                    isSelfSigned = new IsSelfSigned(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isWeakSignature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isWeakSignature = null;
                        continue;
                    }
                    isWeakSignature = new IsWeakSignature(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isShortKeySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isShortKeySize = null;
                        continue;
                    }
                    isShortKeySize = new IsShortKeySize(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new FirmwareCryptoCertificate(cryptoCertId.Value, name.Value, subject.Value, issuer.Value, Optional.ToNullable(issuedDate), Optional.ToNullable(expirationDate), role.Value, signatureAlgorithm.Value, Optional.ToNullable(keySize), keyAlgorithm.Value, encoding.Value, serialNumber.Value, fingerprint.Value, Optional.ToList(usage), Optional.ToList(filePaths), pairedKey.Value, Optional.ToNullable(isExpired), Optional.ToNullable(isSelfSigned), Optional.ToNullable(isWeakSignature), Optional.ToNullable(isShortKeySize), rawData);
        }

        FirmwareCryptoCertificate IModelJsonSerializable<FirmwareCryptoCertificate>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeFirmwareCryptoCertificate(doc.RootElement, options);
        }

        BinaryData IModelSerializable<FirmwareCryptoCertificate>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        FirmwareCryptoCertificate IModelSerializable<FirmwareCryptoCertificate>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeFirmwareCryptoCertificate(doc.RootElement, options);
        }

        public static implicit operator RequestContent(FirmwareCryptoCertificate model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator FirmwareCryptoCertificate(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeFirmwareCryptoCertificate(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
