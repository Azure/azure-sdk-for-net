// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.IotFirmwareDefense.Models
{
    public partial class FirmwareCryptoCertificate
    {
        internal static FirmwareCryptoCertificate DeserializeFirmwareCryptoCertificate(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> cryptoCertId = default;
            Optional<string> name = default;
            Optional<FirmwareCryptoCertificateEntity> subject = default;
            Optional<FirmwareCryptoCertificateEntity> issuer = default;
            Optional<DateTimeOffset?> issuedDate = default;
            Optional<DateTimeOffset?> expirationDate = default;
            Optional<string> role = default;
            Optional<string> signatureAlgorithm = default;
            Optional<long?> keySize = default;
            Optional<string> keyAlgorithm = default;
            Optional<string> encoding = default;
            Optional<string> serialNumber = default;
            Optional<string> fingerprint = default;
            Optional<IReadOnlyList<string>> usage = default;
            Optional<IReadOnlyList<string>> filePaths = default;
            Optional<PairedKey> pairedKey = default;
            Optional<IsExpired?> isExpired = default;
            Optional<IsSelfSigned?> isSelfSigned = default;
            Optional<IsWeakSignature?> isWeakSignature = default;
            Optional<IsShortKeySize?> isShortKeySize = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cryptoCertId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cryptoCertId = null;
                        continue;
                    }
                    cryptoCertId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        name = null;
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subject"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        subject = null;
                        continue;
                    }
                    subject = FirmwareCryptoCertificateEntity.DeserializeFirmwareCryptoCertificateEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("issuer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        issuer = null;
                        continue;
                    }
                    issuer = FirmwareCryptoCertificateEntity.DeserializeFirmwareCryptoCertificateEntity(property.Value);
                    continue;
                }
                if (property.NameEquals("issuedDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        issuedDate = null;
                        continue;
                    }
                    issuedDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("expirationDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        expirationDate = null;
                        continue;
                    }
                    expirationDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("role"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        role = null;
                        continue;
                    }
                    role = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signatureAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        signatureAlgorithm = null;
                        continue;
                    }
                    signatureAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keySize = null;
                        continue;
                    }
                    keySize = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("keyAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyAlgorithm = null;
                        continue;
                    }
                    keyAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encoding"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        encoding = null;
                        continue;
                    }
                    encoding = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        serialNumber = null;
                        continue;
                    }
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fingerprint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        fingerprint = null;
                        continue;
                    }
                    fingerprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    usage = array;
                    continue;
                }
                if (property.NameEquals("filePaths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    filePaths = array;
                    continue;
                }
                if (property.NameEquals("pairedKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        pairedKey = null;
                        continue;
                    }
                    pairedKey = PairedKey.DeserializePairedKey(property.Value);
                    continue;
                }
                if (property.NameEquals("isExpired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isExpired = null;
                        continue;
                    }
                    isExpired = new IsExpired(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isSelfSigned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isSelfSigned = null;
                        continue;
                    }
                    isSelfSigned = new IsSelfSigned(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isWeakSignature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isWeakSignature = null;
                        continue;
                    }
                    isWeakSignature = new IsWeakSignature(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isShortKeySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        isShortKeySize = null;
                        continue;
                    }
                    isShortKeySize = new IsShortKeySize(property.Value.GetString());
                    continue;
                }
            }
            return new FirmwareCryptoCertificate(cryptoCertId.Value, name.Value, subject.Value, issuer.Value, Optional.ToNullable(issuedDate), Optional.ToNullable(expirationDate), role.Value, signatureAlgorithm.Value, Optional.ToNullable(keySize), keyAlgorithm.Value, encoding.Value, serialNumber.Value, fingerprint.Value, Optional.ToList(usage), Optional.ToList(filePaths), pairedKey.Value, Optional.ToNullable(isExpired), Optional.ToNullable(isSelfSigned), Optional.ToNullable(isWeakSignature), Optional.ToNullable(isShortKeySize));
        }
    }
}
