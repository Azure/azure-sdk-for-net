// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.IotFirmwareDefense.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.IotFirmwareDefense
{
    /// <summary>
    /// A class representing the IotFirmware data model.
    /// Firmware definition
    /// Serialized Name: Firmware
    /// </summary>
    public partial class IotFirmwareData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IotFirmwareData"/>. </summary>
        public IotFirmwareData()
        {
            StatusMessages = new ChangeTrackingList<FirmwareAnalysisStatusMessage>();
        }

        /// <summary> Initializes a new instance of <see cref="IotFirmwareData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="fileName">
        /// File name for a firmware that user uploaded.
        /// Serialized Name: Firmware.properties.fileName
        /// </param>
        /// <param name="vendor">
        /// Firmware vendor.
        /// Serialized Name: Firmware.properties.vendor
        /// </param>
        /// <param name="model">
        /// Firmware model.
        /// Serialized Name: Firmware.properties.model
        /// </param>
        /// <param name="version">
        /// Firmware version.
        /// Serialized Name: Firmware.properties.version
        /// </param>
        /// <param name="description">
        /// User-specified description of the firmware.
        /// Serialized Name: Firmware.properties.description
        /// </param>
        /// <param name="fileSize">
        /// File size of the uploaded firmware image.
        /// Serialized Name: Firmware.properties.fileSize
        /// </param>
        /// <param name="status">
        /// The status of firmware scan.
        /// Serialized Name: Firmware.properties.status
        /// </param>
        /// <param name="statusMessages">
        /// A list of errors or other messages generated during firmware analysis
        /// Serialized Name: Firmware.properties.statusMessages
        /// </param>
        /// <param name="provisioningState">
        /// Provisioning state of the resource.
        /// Serialized Name: Firmware.properties.provisioningState
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IotFirmwareData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string fileName, string vendor, string model, string version, string description, long? fileSize, FirmwareAnalysisStatus? status, IList<FirmwareAnalysisStatusMessage> statusMessages, FirmwareProvisioningState? provisioningState, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            FileName = fileName;
            Vendor = vendor;
            Model = model;
            Version = version;
            Description = description;
            FileSize = fileSize;
            Status = status;
            StatusMessages = statusMessages;
            ProvisioningState = provisioningState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// File name for a firmware that user uploaded.
        /// Serialized Name: Firmware.properties.fileName
        /// </summary>
        public string FileName { get; set; }
        /// <summary>
        /// Firmware vendor.
        /// Serialized Name: Firmware.properties.vendor
        /// </summary>
        public string Vendor { get; set; }
        /// <summary>
        /// Firmware model.
        /// Serialized Name: Firmware.properties.model
        /// </summary>
        public string Model { get; set; }
        /// <summary>
        /// Firmware version.
        /// Serialized Name: Firmware.properties.version
        /// </summary>
        public string Version { get; set; }
        /// <summary>
        /// User-specified description of the firmware.
        /// Serialized Name: Firmware.properties.description
        /// </summary>
        public string Description { get; set; }
        /// <summary>
        /// File size of the uploaded firmware image.
        /// Serialized Name: Firmware.properties.fileSize
        /// </summary>
        public long? FileSize { get; set; }
        /// <summary>
        /// The status of firmware scan.
        /// Serialized Name: Firmware.properties.status
        /// </summary>
        public FirmwareAnalysisStatus? Status { get; set; }
        /// <summary>
        /// A list of errors or other messages generated during firmware analysis
        /// Serialized Name: Firmware.properties.statusMessages
        /// </summary>
        public IList<FirmwareAnalysisStatusMessage> StatusMessages { get; }
        /// <summary>
        /// Provisioning state of the resource.
        /// Serialized Name: Firmware.properties.provisioningState
        /// </summary>
        public FirmwareProvisioningState? ProvisioningState { get; }
    }
}
