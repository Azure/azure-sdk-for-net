// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.IotFirmwareDefense.Models;

namespace Azure.ResourceManager.IotFirmwareDefense
{
    internal partial class SummariesRestOperations
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string workspaceName, string firmwareId, FirmwareAnalysisSummaryName summaryName) =>
            CreateGetRequestUri(subscriptionId, resourceGroupName, workspaceName, firmwareId, new FirmwareAnalysisSummaryType(summaryName.ToString()));

        [EditorBrowsable(EditorBrowsableState.Never)]
        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string workspaceName, string firmwareId, FirmwareAnalysisSummaryName summaryName) =>
            CreateGetRequest(subscriptionId, resourceGroupName, workspaceName, firmwareId, new FirmwareAnalysisSummaryType(summaryName.ToString()));

        [EditorBrowsable(EditorBrowsableState.Never)]
        public async Task<Response<FirmwareAnalysisSummaryData>> GetAsync(string subscriptionId, string resourceGroupName, string workspaceName, string firmwareId, FirmwareAnalysisSummaryName summaryName, CancellationToken cancellationToken = default)
        {
            return await GetAsync(subscriptionId, resourceGroupName, workspaceName, firmwareId, new FirmwareAnalysisSummaryType(summaryName.ToString()), cancellationToken).ConfigureAwait(false);   
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        public Response<FirmwareAnalysisSummaryData> Get(string subscriptionId, string resourceGroupName, string workspaceName, string firmwareId, FirmwareAnalysisSummaryName summaryName, CancellationToken cancellationToken = default) =>
            Get(subscriptionId, resourceGroupName, workspaceName, firmwareId, new FirmwareAnalysisSummaryType(summaryName.ToString()), cancellationToken);
    }
}