// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.IotFirmwareDefense.Samples
{
    public partial class Sample_UsageMetricCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_UsageMetricsGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2025-04-01-preview/examples/UsageMetrics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "UsageMetrics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareAnalysisWorkspaceResource created on azure
            // for more information of creating FirmwareAnalysisWorkspaceResource, please refer to the document of FirmwareAnalysisWorkspaceResource
            string subscriptionId = "5C707B5F-6130-4F71-819E-953A28942E88";
            string resourceGroupName = "rgiotfirmwaredefense";
            string workspaceName = "exampleWorkspaceName";
            ResourceIdentifier firmwareAnalysisWorkspaceResourceId = FirmwareAnalysisWorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            FirmwareAnalysisWorkspaceResource firmwareAnalysisWorkspace = client.GetFirmwareAnalysisWorkspaceResource(firmwareAnalysisWorkspaceResourceId);

            // get the collection of this UsageMetricResource
            UsageMetricCollection collection = firmwareAnalysisWorkspace.GetUsageMetrics();

            // invoke the operation
            string name = "default";
            UsageMetricResource result = await collection.GetAsync(name);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            UsageMetricData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_UsageMetricsListByWorkspaceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2025-04-01-preview/examples/UsageMetrics_ListByWorkspace_MaximumSet_Gen.json
            // this example is just showing the usage of "UsageMetrics_ListByWorkspace" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareAnalysisWorkspaceResource created on azure
            // for more information of creating FirmwareAnalysisWorkspaceResource, please refer to the document of FirmwareAnalysisWorkspaceResource
            string subscriptionId = "5C707B5F-6130-4F71-819E-953A28942E88";
            string resourceGroupName = "rgiotfirmwaredefense";
            string workspaceName = "exampleWorkspaceName";
            ResourceIdentifier firmwareAnalysisWorkspaceResourceId = FirmwareAnalysisWorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            FirmwareAnalysisWorkspaceResource firmwareAnalysisWorkspace = client.GetFirmwareAnalysisWorkspaceResource(firmwareAnalysisWorkspaceResourceId);

            // get the collection of this UsageMetricResource
            UsageMetricCollection collection = firmwareAnalysisWorkspace.GetUsageMetrics();

            // invoke the operation and iterate over the result
            await foreach (UsageMetricResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                UsageMetricData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_UsageMetricsGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2025-04-01-preview/examples/UsageMetrics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "UsageMetrics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareAnalysisWorkspaceResource created on azure
            // for more information of creating FirmwareAnalysisWorkspaceResource, please refer to the document of FirmwareAnalysisWorkspaceResource
            string subscriptionId = "5C707B5F-6130-4F71-819E-953A28942E88";
            string resourceGroupName = "rgiotfirmwaredefense";
            string workspaceName = "exampleWorkspaceName";
            ResourceIdentifier firmwareAnalysisWorkspaceResourceId = FirmwareAnalysisWorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            FirmwareAnalysisWorkspaceResource firmwareAnalysisWorkspace = client.GetFirmwareAnalysisWorkspaceResource(firmwareAnalysisWorkspaceResourceId);

            // get the collection of this UsageMetricResource
            UsageMetricCollection collection = firmwareAnalysisWorkspace.GetUsageMetrics();

            // invoke the operation
            string name = "default";
            bool result = await collection.ExistsAsync(name);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_UsageMetricsGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2025-04-01-preview/examples/UsageMetrics_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "UsageMetrics_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareAnalysisWorkspaceResource created on azure
            // for more information of creating FirmwareAnalysisWorkspaceResource, please refer to the document of FirmwareAnalysisWorkspaceResource
            string subscriptionId = "5C707B5F-6130-4F71-819E-953A28942E88";
            string resourceGroupName = "rgiotfirmwaredefense";
            string workspaceName = "exampleWorkspaceName";
            ResourceIdentifier firmwareAnalysisWorkspaceResourceId = FirmwareAnalysisWorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            FirmwareAnalysisWorkspaceResource firmwareAnalysisWorkspace = client.GetFirmwareAnalysisWorkspaceResource(firmwareAnalysisWorkspaceResourceId);

            // get the collection of this UsageMetricResource
            UsageMetricCollection collection = firmwareAnalysisWorkspace.GetUsageMetrics();

            // invoke the operation
            string name = "default";
            NullableResponse<UsageMetricResource> response = await collection.GetIfExistsAsync(name);
            UsageMetricResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                UsageMetricData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
