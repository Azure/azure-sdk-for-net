// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.IotFirmwareDefense;
using Azure.ResourceManager.IotFirmwareDefense.Models;

namespace Azure.ResourceManager.IotFirmwareDefense.Samples
{
    public partial class Sample_FirmwareResource
    {
        // Firmware_Update_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_FirmwareUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwarePatch patch = new FirmwarePatch()
            {
                FileName = "wresexxulcdsdd",
                Vendor = "vycmdhgtmepcptyoubztiuudpkcpd",
                Model = "f",
                Version = "s",
                Description = "uz",
                FileSize = 17,
                Status = Status.Pending,
                StatusMessages =
{
BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
["message"] = "ulvhmhokezathzzauiitu"})
},
            };
            FirmwareResource result = await firmware.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FirmwareData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Firmware_Update_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_FirmwareUpdateMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_Update_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwarePatch patch = new FirmwarePatch();
            FirmwareResource result = await firmware.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FirmwareData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Firmware_Delete_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_FirmwareDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            await firmware.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Firmware_Delete_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_FirmwareDeleteMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_Delete_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            await firmware.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Firmware_Get_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FirmwareGetMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareResource result = await firmware.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FirmwareData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Firmware_Get_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FirmwareGetMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_Get_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareResource result = await firmware.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FirmwareData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Firmware_GenerateDownloadUrl_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateDownloadUrl_FirmwareGenerateDownloadUrlMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateDownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateDownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            UriToken result = await firmware.GenerateDownloadUrlAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateDownloadUrl_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateDownloadUrl_FirmwareGenerateDownloadUrlMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateDownloadUrl_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateDownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            UriToken result = await firmware.GenerateDownloadUrlAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateFilesystemDownloadUrl_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateFilesystemDownloadUrl_FirmwareGenerateFilesystemDownloadUrlMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateFilesystemDownloadUrl_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateFilesystemDownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            UriToken result = await firmware.GenerateFilesystemDownloadUrlAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateFilesystemDownloadUrl_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GenerateFilesystemDownloadUrl_FirmwareGenerateFilesystemDownloadUrlMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateFilesystemDownloadUrl_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateFilesystemDownloadUrl" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            UriToken result = await firmware.GenerateFilesystemDownloadUrlAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateSummary_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetFirmwareSummary_FirmwareGenerateSummaryMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateSummary_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareSummary result = await firmware.GetFirmwareSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateSummary_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetFirmwareSummary_FirmwareGenerateSummaryMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateSummary_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareSummary result = await firmware.GetFirmwareSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_ListGenerateComponentList_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSbomComponents_FirmwareListGenerateComponentListMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateComponentList_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateComponentList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (SbomComponent item in firmware.GetSbomComponentsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateComponentList_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSbomComponents_FirmwareListGenerateComponentListMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateComponentList_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateComponentList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (SbomComponent item in firmware.GetSbomComponentsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_GenerateComponentDetails_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetComponentDetails_FirmwareGenerateComponentDetailsMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateComponentDetails_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateComponentDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            SbomComponent result = await firmware.GetComponentDetailsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateComponentDetails_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetComponentDetails_FirmwareGenerateComponentDetailsMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateComponentDetails_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateComponentDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            SbomComponent result = await firmware.GetComponentDetailsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_ListGenerateBinaryHardeningList_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBinaryHardeningResults_FirmwareListGenerateBinaryHardeningListMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateBinaryHardeningList_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateBinaryHardeningList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (BinaryHardening item in firmware.GetBinaryHardeningResultsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateBinaryHardeningList_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBinaryHardeningResults_FirmwareListGenerateBinaryHardeningListMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateBinaryHardeningList_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateBinaryHardeningList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (BinaryHardening item in firmware.GetBinaryHardeningResultsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_GenerateBinaryHardeningSummary_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBinaryHardeningSummary_FirmwareGenerateBinaryHardeningSummaryMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateBinaryHardeningSummary_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateBinaryHardeningSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            BinaryHardeningSummary result = await firmware.GetBinaryHardeningSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateBinaryHardeningSummary_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBinaryHardeningSummary_FirmwareGenerateBinaryHardeningSummaryMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateBinaryHardeningSummary_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateBinaryHardeningSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            BinaryHardeningSummary result = await firmware.GetBinaryHardeningSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateBinaryHardeningDetails_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBinaryHardeningDetails_FirmwareGenerateBinaryHardeningDetailsMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateBinaryHardeningDetails_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateBinaryHardeningDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            BinaryHardening result = await firmware.GetBinaryHardeningDetailsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateBinaryHardeningDetails_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetBinaryHardeningDetails_FirmwareGenerateBinaryHardeningDetailsMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateBinaryHardeningDetails_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateBinaryHardeningDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            BinaryHardening result = await firmware.GetBinaryHardeningDetailsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_ListGeneratePasswordHashList_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetPasswordHashes_FirmwareListGeneratePasswordHashListMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGeneratePasswordHashList_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGeneratePasswordHashList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (PasswordHash item in firmware.GetPasswordHashesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGeneratePasswordHashList_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetPasswordHashes_FirmwareListGeneratePasswordHashListMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGeneratePasswordHashList_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGeneratePasswordHashList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (PasswordHash item in firmware.GetPasswordHashesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateCveList_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCves_FirmwareListGenerateCveListMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateCveList_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateCveList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (FirmwareCve item in firmware.GetCvesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateCveList_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCves_FirmwareListGenerateCveListMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateCveList_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateCveList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (FirmwareCve item in firmware.GetCvesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_GenerateCveSummary_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCveSummary_FirmwareGenerateCveSummaryMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateCveSummary_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateCveSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            CveSummary result = await firmware.GetCveSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateCveSummary_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCveSummary_FirmwareGenerateCveSummaryMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateCveSummary_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateCveSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "685C0C6F-9867-4B1C-A534-AA3A05B54BCE";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "A7";
            string firmwareName = "umrkdttp";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            CveSummary result = await firmware.GetCveSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateCryptoCertificateSummary_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoCertificateSummary_FirmwareGenerateCryptoCertificateSummaryMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateCryptoCertificateSummary_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateCryptoCertificateSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "FirmwareAnalysisRG";
            string workspaceName = "default";
            string firmwareName = "DECAFBAD-0000-0000-0000-BADBADBADBAD";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareCryptoCertificateSummary result = await firmware.GetCryptoCertificateSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateCryptoCertificateSummary_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoCertificateSummary_FirmwareGenerateCryptoCertificateSummaryMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateCryptoCertificateSummary_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateCryptoCertificateSummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "j5QE_";
            string firmwareName = "wujtpcgypfpqseyrsebolarkspy";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareCryptoCertificateSummary result = await firmware.GetCryptoCertificateSummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateCryptoKeySummary_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoKeySummary_FirmwareGenerateCryptoKeySummaryMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateCryptoKeySummary_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateCryptoKeySummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "FirmwareAnalysisRG";
            string workspaceName = "default";
            string firmwareName = "DECAFBAD-0000-0000-0000-BADBADBADBAD";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareCryptoKeySummary result = await firmware.GetCryptoKeySummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_GenerateCryptoKeySummary_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoKeySummary_FirmwareGenerateCryptoKeySummaryMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_GenerateCryptoKeySummary_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_GenerateCryptoKeySummary" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "j5QE_";
            string firmwareName = "wujtpcgypfpqseyrsebolarkspy";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation
            FirmwareCryptoKeySummary result = await firmware.GetCryptoKeySummaryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Firmware_ListGenerateCryptoCertificateList_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoCertificates_FirmwareListGenerateCryptoCertificateListMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateCryptoCertificateList_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateCryptoCertificateList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "FirmwareAnalysisRG";
            string workspaceName = "default";
            string firmwareName = "DECAFBAD-0000-0000-0000-BADBADBADBAD";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (FirmwareCryptoCertificate item in firmware.GetCryptoCertificatesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateCryptoCertificateList_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoCertificates_FirmwareListGenerateCryptoCertificateListMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateCryptoCertificateList_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateCryptoCertificateList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "j5QE_";
            string firmwareName = "wujtpcgypfpqseyrsebolarkspy";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (FirmwareCryptoCertificate item in firmware.GetCryptoCertificatesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateCryptoKeyList_MaximumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoKeys_FirmwareListGenerateCryptoKeyListMaximumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateCryptoKeyList_MaximumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateCryptoKeyList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "FirmwareAnalysisRG";
            string workspaceName = "default";
            string firmwareName = "DECAFBAD-0000-0000-0000-BADBADBADBAD";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (FirmwareCryptoKey item in firmware.GetCryptoKeysAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Firmware_ListGenerateCryptoKeyList_MinimumSet_Gen
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCryptoKeys_FirmwareListGenerateCryptoKeyListMinimumSetGen()
        {
            // Generated from example definition: specification/fist/resource-manager/Microsoft.IoTFirmwareDefense/preview/2023-02-08-preview/examples/Firmware_ListGenerateCryptoKeyList_MinimumSet_Gen.json
            // this example is just showing the usage of "Firmware_ListGenerateCryptoKeyList" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FirmwareResource created on azure
            // for more information of creating FirmwareResource, please refer to the document of FirmwareResource
            string subscriptionId = "C589E84A-5C11-4A25-9CF9-4E9C2F1EBFCA";
            string resourceGroupName = "rgworkspaces-firmwares";
            string workspaceName = "j5QE_";
            string firmwareName = "wujtpcgypfpqseyrsebolarkspy";
            ResourceIdentifier firmwareResourceId = FirmwareResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, firmwareName);
            FirmwareResource firmware = client.GetFirmwareResource(firmwareResourceId);

            // invoke the operation and iterate over the result
            await foreach (FirmwareCryptoKey item in firmware.GetCryptoKeysAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
