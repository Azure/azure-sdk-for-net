// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.OperationalInsights.Models;

namespace Azure.ResourceManager.OperationalInsights
{
    /// <summary>
    /// A class representing the OperationalInsightsDataSource data model.
    /// Datasources under OMS Workspace.
    /// </summary>
    public partial class OperationalInsightsDataSourceData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="OperationalInsightsDataSourceData"/>. </summary>
        /// <param name="properties"> The data source properties in raw json format, each kind of data source have it's own schema. </param>
        /// <param name="kind"> The kind of the DataSource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="properties"/> is null. </exception>
        public OperationalInsightsDataSourceData(BinaryData properties, OperationalInsightsDataSourceKind kind)
        {
            Argument.AssertNotNull(properties, nameof(properties));

            Properties = properties;
            Kind = kind;
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="OperationalInsightsDataSourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The data source properties in raw json format, each kind of data source have it's own schema. </param>
        /// <param name="etag"> The ETag of the data source. </param>
        /// <param name="kind"> The kind of the DataSource. </param>
        /// <param name="tags"> Resource tags. </param>
        internal OperationalInsightsDataSourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, BinaryData properties, ETag? etag, OperationalInsightsDataSourceKind kind, IDictionary<string, string> tags) : base(id, name, resourceType, systemData)
        {
            Properties = properties;
            ETag = etag;
            Kind = kind;
            Tags = tags;
        }

        /// <summary>
        /// The data source properties in raw json format, each kind of data source have it's own schema.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Properties { get; set; }
        /// <summary> The ETag of the data source. </summary>
        public ETag? ETag { get; set; }
        /// <summary> The kind of the DataSource. </summary>
        public OperationalInsightsDataSourceKind Kind { get; set; }
        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}
