// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.OperationalInsights
{
    /// <summary>
    /// A class representing a collection of <see cref="LogAnalyticsQueryPackQueryResource" /> and their operations.
    /// Each <see cref="LogAnalyticsQueryPackQueryResource" /> in the collection will belong to the same instance of <see cref="LogAnalyticsQueryPackResource" />.
    /// To get a <see cref="LogAnalyticsQueryPackQueryCollection" /> instance call the GetLogAnalyticsQueryPackQueries method from an instance of <see cref="LogAnalyticsQueryPackResource" />.
    /// </summary>
    public partial class LogAnalyticsQueryPackQueryCollection : ArmCollection, IEnumerable<LogAnalyticsQueryPackQueryResource>, IAsyncEnumerable<LogAnalyticsQueryPackQueryResource>
    {
        private readonly ClientDiagnostics _logAnalyticsQueryPackQueryQueriesClientDiagnostics;
        private readonly QueriesRestOperations _logAnalyticsQueryPackQueryQueriesRestClient;

        /// <summary> Initializes a new instance of the <see cref="LogAnalyticsQueryPackQueryCollection"/> class for mocking. </summary>
        protected LogAnalyticsQueryPackQueryCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LogAnalyticsQueryPackQueryCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal LogAnalyticsQueryPackQueryCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _logAnalyticsQueryPackQueryQueriesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", LogAnalyticsQueryPackQueryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(LogAnalyticsQueryPackQueryResource.ResourceType, out string logAnalyticsQueryPackQueryQueriesApiVersion);
            _logAnalyticsQueryPackQueryQueriesRestClient = new QueriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, logAnalyticsQueryPackQueryQueriesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != LogAnalyticsQueryPackResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, LogAnalyticsQueryPackResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Adds or Updates a specific Query within a Log Analytics QueryPack.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}
        /// Operation Id: Queries_Put
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="id"> The id of a specific query defined in the Log Analytics QueryPack. </param>
        /// <param name="data"> Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<LogAnalyticsQueryPackQueryResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string id, LogAnalyticsQueryPackQueryData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _logAnalyticsQueryPackQueryQueriesRestClient.PutAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, id, data, cancellationToken).ConfigureAwait(false);
                var operation = new OperationalInsightsArmOperation<LogAnalyticsQueryPackQueryResource>(Response.FromValue(new LogAnalyticsQueryPackQueryResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Adds or Updates a specific Query within a Log Analytics QueryPack.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}
        /// Operation Id: Queries_Put
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="id"> The id of a specific query defined in the Log Analytics QueryPack. </param>
        /// <param name="data"> Properties that need to be specified to create a new query and add it to a Log Analytics QueryPack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<LogAnalyticsQueryPackQueryResource> CreateOrUpdate(WaitUntil waitUntil, string id, LogAnalyticsQueryPackQueryData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _logAnalyticsQueryPackQueryQueriesRestClient.Put(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, id, data, cancellationToken);
                var operation = new OperationalInsightsArmOperation<LogAnalyticsQueryPackQueryResource>(Response.FromValue(new LogAnalyticsQueryPackQueryResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}
        /// Operation Id: Queries_Get
        /// </summary>
        /// <param name="id"> The id of a specific query defined in the Log Analytics QueryPack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public virtual async Task<Response<LogAnalyticsQueryPackQueryResource>> GetAsync(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.Get");
            scope.Start();
            try
            {
                var response = await _logAnalyticsQueryPackQueryQueriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, id, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogAnalyticsQueryPackQueryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}
        /// Operation Id: Queries_Get
        /// </summary>
        /// <param name="id"> The id of a specific query defined in the Log Analytics QueryPack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public virtual Response<LogAnalyticsQueryPackQueryResource> Get(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.Get");
            scope.Start();
            try
            {
                var response = _logAnalyticsQueryPackQueryQueriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, id, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LogAnalyticsQueryPackQueryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of Queries defined within a Log Analytics QueryPack.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries
        /// Operation Id: Queries_List
        /// </summary>
        /// <param name="top"> Maximum items returned in page. </param>
        /// <param name="includeBody"> Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. </param>
        /// <param name="skipToken"> Base64 encoded token used to fetch the next page of items. Default is null. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LogAnalyticsQueryPackQueryResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LogAnalyticsQueryPackQueryResource> GetAllAsync(long? top = null, bool? includeBody = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<LogAnalyticsQueryPackQueryResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _logAnalyticsQueryPackQueryQueriesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, includeBody, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackQueryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LogAnalyticsQueryPackQueryResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _logAnalyticsQueryPackQueryQueriesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, includeBody, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackQueryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of Queries defined within a Log Analytics QueryPack.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries
        /// Operation Id: Queries_List
        /// </summary>
        /// <param name="top"> Maximum items returned in page. </param>
        /// <param name="includeBody"> Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. </param>
        /// <param name="skipToken"> Base64 encoded token used to fetch the next page of items. Default is null. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LogAnalyticsQueryPackQueryResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LogAnalyticsQueryPackQueryResource> GetAll(long? top = null, bool? includeBody = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<LogAnalyticsQueryPackQueryResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _logAnalyticsQueryPackQueryQueriesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, includeBody, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackQueryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LogAnalyticsQueryPackQueryResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _logAnalyticsQueryPackQueryQueriesRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, top, includeBody, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackQueryResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}
        /// Operation Id: Queries_Get
        /// </summary>
        /// <param name="id"> The id of a specific query defined in the Log Analytics QueryPack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.Exists");
            scope.Start();
            try
            {
                var response = await _logAnalyticsQueryPackQueryQueriesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, id, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}
        /// Operation Id: Queries_Get
        /// </summary>
        /// <param name="id"> The id of a specific query defined in the Log Analytics QueryPack. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public virtual Response<bool> Exists(string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = _logAnalyticsQueryPackQueryQueriesClientDiagnostics.CreateScope("LogAnalyticsQueryPackQueryCollection.Exists");
            scope.Start();
            try
            {
                var response = _logAnalyticsQueryPackQueryQueriesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, id, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<LogAnalyticsQueryPackQueryResource> IEnumerable<LogAnalyticsQueryPackQueryResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<LogAnalyticsQueryPackQueryResource> IAsyncEnumerable<LogAnalyticsQueryPackQueryResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
