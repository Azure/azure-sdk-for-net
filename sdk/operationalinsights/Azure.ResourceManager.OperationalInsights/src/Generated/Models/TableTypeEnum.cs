// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    /// <summary> Table&apos;s creator. </summary>
    public readonly partial struct TableTypeEnum : IEquatable<TableTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TableTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TableTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftValue = "Microsoft";
        private const string CustomLogValue = "CustomLog";
        private const string RestoredLogsValue = "RestoredLogs";
        private const string SearchResultsValue = "SearchResults";

        /// <summary> Standard data collected by Azure Monitor. </summary>
        public static TableTypeEnum Microsoft { get; } = new TableTypeEnum(MicrosoftValue);
        /// <summary> Custom log table. </summary>
        public static TableTypeEnum CustomLog { get; } = new TableTypeEnum(CustomLogValue);
        /// <summary> Restored data. </summary>
        public static TableTypeEnum RestoredLogs { get; } = new TableTypeEnum(RestoredLogsValue);
        /// <summary> Data collected by a search job. </summary>
        public static TableTypeEnum SearchResults { get; } = new TableTypeEnum(SearchResultsValue);
        /// <summary> Determines if two <see cref="TableTypeEnum"/> values are the same. </summary>
        public static bool operator ==(TableTypeEnum left, TableTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TableTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(TableTypeEnum left, TableTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TableTypeEnum"/>. </summary>
        public static implicit operator TableTypeEnum(string value) => new TableTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TableTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TableTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
