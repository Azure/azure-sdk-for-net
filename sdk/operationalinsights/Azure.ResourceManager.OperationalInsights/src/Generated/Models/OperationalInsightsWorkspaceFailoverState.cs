// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    /// <summary> The failover state of the replication. </summary>
    public readonly partial struct OperationalInsightsWorkspaceFailoverState : IEquatable<OperationalInsightsWorkspaceFailoverState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OperationalInsightsWorkspaceFailoverState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationalInsightsWorkspaceFailoverState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InactiveValue = "Inactive";
        private const string ActivatingValue = "Activating";
        private const string ActiveValue = "Active";
        private const string DeactivatingValue = "Deactivating";
        private const string FailedValue = "Failed";

        /// <summary> Inactive. </summary>
        public static OperationalInsightsWorkspaceFailoverState Inactive { get; } = new OperationalInsightsWorkspaceFailoverState(InactiveValue);
        /// <summary> Activating. </summary>
        public static OperationalInsightsWorkspaceFailoverState Activating { get; } = new OperationalInsightsWorkspaceFailoverState(ActivatingValue);
        /// <summary> Active. </summary>
        public static OperationalInsightsWorkspaceFailoverState Active { get; } = new OperationalInsightsWorkspaceFailoverState(ActiveValue);
        /// <summary> Deactivating. </summary>
        public static OperationalInsightsWorkspaceFailoverState Deactivating { get; } = new OperationalInsightsWorkspaceFailoverState(DeactivatingValue);
        /// <summary> Failed. </summary>
        public static OperationalInsightsWorkspaceFailoverState Failed { get; } = new OperationalInsightsWorkspaceFailoverState(FailedValue);
        /// <summary> Determines if two <see cref="OperationalInsightsWorkspaceFailoverState"/> values are the same. </summary>
        public static bool operator ==(OperationalInsightsWorkspaceFailoverState left, OperationalInsightsWorkspaceFailoverState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperationalInsightsWorkspaceFailoverState"/> values are not the same. </summary>
        public static bool operator !=(OperationalInsightsWorkspaceFailoverState left, OperationalInsightsWorkspaceFailoverState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="OperationalInsightsWorkspaceFailoverState"/>. </summary>
        public static implicit operator OperationalInsightsWorkspaceFailoverState(string value) => new OperationalInsightsWorkspaceFailoverState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationalInsightsWorkspaceFailoverState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperationalInsightsWorkspaceFailoverState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
