// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    public partial class WorkspaceFeatures : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EnableDataExport))
            {
                if (EnableDataExport != null)
                {
                    writer.WritePropertyName("enableDataExport");
                    writer.WriteBooleanValue(EnableDataExport.Value);
                }
                else
                {
                    writer.WriteNull("enableDataExport");
                }
            }
            if (Optional.IsDefined(ImmediatePurgeDataOn30Days))
            {
                if (ImmediatePurgeDataOn30Days != null)
                {
                    writer.WritePropertyName("immediatePurgeDataOn30Days");
                    writer.WriteBooleanValue(ImmediatePurgeDataOn30Days.Value);
                }
                else
                {
                    writer.WriteNull("immediatePurgeDataOn30Days");
                }
            }
            if (Optional.IsDefined(EnableLogAccessUsingOnlyResourcePermissions))
            {
                if (EnableLogAccessUsingOnlyResourcePermissions != null)
                {
                    writer.WritePropertyName("enableLogAccessUsingOnlyResourcePermissions");
                    writer.WriteBooleanValue(EnableLogAccessUsingOnlyResourcePermissions.Value);
                }
                else
                {
                    writer.WriteNull("enableLogAccessUsingOnlyResourcePermissions");
                }
            }
            if (Optional.IsDefined(ClusterResourceId))
            {
                if (ClusterResourceId != null)
                {
                    writer.WritePropertyName("clusterResourceId");
                    writer.WriteStringValue(ClusterResourceId);
                }
                else
                {
                    writer.WriteNull("clusterResourceId");
                }
            }
            if (Optional.IsDefined(DisableLocalAuth))
            {
                if (DisableLocalAuth != null)
                {
                    writer.WritePropertyName("disableLocalAuth");
                    writer.WriteBooleanValue(DisableLocalAuth.Value);
                }
                else
                {
                    writer.WriteNull("disableLocalAuth");
                }
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static WorkspaceFeatures DeserializeWorkspaceFeatures(JsonElement element)
        {
            Optional<bool?> enableDataExport = default;
            Optional<bool?> immediatePurgeDataOn30Days = default;
            Optional<bool?> enableLogAccessUsingOnlyResourcePermissions = default;
            Optional<string> clusterResourceId = default;
            Optional<bool?> disableLocalAuth = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("enableDataExport"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableDataExport = null;
                        continue;
                    }
                    enableDataExport = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("immediatePurgeDataOn30Days"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        immediatePurgeDataOn30Days = null;
                        continue;
                    }
                    immediatePurgeDataOn30Days = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableLogAccessUsingOnlyResourcePermissions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableLogAccessUsingOnlyResourcePermissions = null;
                        continue;
                    }
                    enableLogAccessUsingOnlyResourcePermissions = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("clusterResourceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        clusterResourceId = null;
                        continue;
                    }
                    clusterResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disableLocalAuth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        disableLocalAuth = null;
                        continue;
                    }
                    disableLocalAuth = property.Value.GetBoolean();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new WorkspaceFeatures(Optional.ToNullable(enableDataExport), Optional.ToNullable(immediatePurgeDataOn30Days), Optional.ToNullable(enableLogAccessUsingOnlyResourcePermissions), clusterResourceId.Value, Optional.ToNullable(disableLocalAuth), additionalProperties);
        }
    }
}
