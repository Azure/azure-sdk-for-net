// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    public partial class OperationalInsightsTableSearchResults : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Query))
            {
                writer.WritePropertyName("query"u8);
                writer.WriteStringValue(Query);
            }
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Core.Optional.IsDefined(Limit))
            {
                writer.WritePropertyName("limit"u8);
                writer.WriteNumberValue(Limit.Value);
            }
            if (Core.Optional.IsDefined(StartSearchOn))
            {
                writer.WritePropertyName("startSearchTime"u8);
                writer.WriteStringValue(StartSearchOn.Value, "O");
            }
            if (Core.Optional.IsDefined(EndSearchOn))
            {
                writer.WritePropertyName("endSearchTime"u8);
                writer.WriteStringValue(EndSearchOn.Value, "O");
            }
            writer.WriteEndObject();
        }

        internal static OperationalInsightsTableSearchResults DeserializeOperationalInsightsTableSearchResults(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> query = default;
            Core.Optional<string> description = default;
            Core.Optional<int> limit = default;
            Core.Optional<DateTimeOffset> startSearchTime = default;
            Core.Optional<DateTimeOffset> endSearchTime = default;
            Core.Optional<string> sourceTable = default;
            Core.Optional<Guid> azureAsyncOperationId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("query"u8))
                {
                    query = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("limit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    limit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("startSearchTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startSearchTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endSearchTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endSearchTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sourceTable"u8))
                {
                    sourceTable = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("azureAsyncOperationId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureAsyncOperationId = property.Value.GetGuid();
                    continue;
                }
            }
            return new OperationalInsightsTableSearchResults(query.Value, description.Value, Core.Optional.ToNullable(limit), Core.Optional.ToNullable(startSearchTime), Core.Optional.ToNullable(endSearchTime), sourceTable.Value, Core.Optional.ToNullable(azureAsyncOperationId));
        }
    }
}
