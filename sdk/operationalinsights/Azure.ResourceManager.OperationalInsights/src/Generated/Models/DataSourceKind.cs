// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    /// <summary> The kind of the DataSource. </summary>
    public readonly partial struct DataSourceKind : IEquatable<DataSourceKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataSourceKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataSourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WindowsEventValue = "WindowsEvent";
        private const string WindowsPerformanceCounterValue = "WindowsPerformanceCounter";
        private const string IISLogsValue = "IISLogs";
        private const string LinuxSyslogValue = "LinuxSyslog";
        private const string LinuxSyslogCollectionValue = "LinuxSyslogCollection";
        private const string LinuxPerformanceObjectValue = "LinuxPerformanceObject";
        private const string LinuxPerformanceCollectionValue = "LinuxPerformanceCollection";
        private const string CustomLogValue = "CustomLog";
        private const string CustomLogCollectionValue = "CustomLogCollection";
        private const string AzureAuditLogValue = "AzureAuditLog";
        private const string AzureActivityLogValue = "AzureActivityLog";
        private const string GenericDataSourceValue = "GenericDataSource";
        private const string ChangeTrackingCustomPathValue = "ChangeTrackingCustomPath";
        private const string ChangeTrackingPathValue = "ChangeTrackingPath";
        private const string ChangeTrackingServicesValue = "ChangeTrackingServices";
        private const string ChangeTrackingDataTypeConfigurationValue = "ChangeTrackingDataTypeConfiguration";
        private const string ChangeTrackingDefaultRegistryValue = "ChangeTrackingDefaultRegistry";
        private const string ChangeTrackingRegistryValue = "ChangeTrackingRegistry";
        private const string ChangeTrackingLinuxPathValue = "ChangeTrackingLinuxPath";
        private const string LinuxChangeTrackingPathValue = "LinuxChangeTrackingPath";
        private const string ChangeTrackingContentLocationValue = "ChangeTrackingContentLocation";
        private const string WindowsTelemetryValue = "WindowsTelemetry";
        private const string Office365Value = "Office365";
        private const string SecurityWindowsBaselineConfigurationValue = "SecurityWindowsBaselineConfiguration";
        private const string SecurityCenterSecurityWindowsBaselineConfigurationValue = "SecurityCenterSecurityWindowsBaselineConfiguration";
        private const string SecurityEventCollectionConfigurationValue = "SecurityEventCollectionConfiguration";
        private const string SecurityInsightsSecurityEventCollectionConfigurationValue = "SecurityInsightsSecurityEventCollectionConfiguration";
        private const string ImportComputerGroupValue = "ImportComputerGroup";
        private const string NetworkMonitoringValue = "NetworkMonitoring";
        private const string ItsmValue = "Itsm";
        private const string DnsAnalyticsValue = "DnsAnalytics";
        private const string ApplicationInsightsValue = "ApplicationInsights";
        private const string SqlDataClassificationValue = "SqlDataClassification";

        /// <summary> WindowsEvent. </summary>
        public static DataSourceKind WindowsEvent { get; } = new DataSourceKind(WindowsEventValue);
        /// <summary> WindowsPerformanceCounter. </summary>
        public static DataSourceKind WindowsPerformanceCounter { get; } = new DataSourceKind(WindowsPerformanceCounterValue);
        /// <summary> IISLogs. </summary>
        public static DataSourceKind IISLogs { get; } = new DataSourceKind(IISLogsValue);
        /// <summary> LinuxSyslog. </summary>
        public static DataSourceKind LinuxSyslog { get; } = new DataSourceKind(LinuxSyslogValue);
        /// <summary> LinuxSyslogCollection. </summary>
        public static DataSourceKind LinuxSyslogCollection { get; } = new DataSourceKind(LinuxSyslogCollectionValue);
        /// <summary> LinuxPerformanceObject. </summary>
        public static DataSourceKind LinuxPerformanceObject { get; } = new DataSourceKind(LinuxPerformanceObjectValue);
        /// <summary> LinuxPerformanceCollection. </summary>
        public static DataSourceKind LinuxPerformanceCollection { get; } = new DataSourceKind(LinuxPerformanceCollectionValue);
        /// <summary> CustomLog. </summary>
        public static DataSourceKind CustomLog { get; } = new DataSourceKind(CustomLogValue);
        /// <summary> CustomLogCollection. </summary>
        public static DataSourceKind CustomLogCollection { get; } = new DataSourceKind(CustomLogCollectionValue);
        /// <summary> AzureAuditLog. </summary>
        public static DataSourceKind AzureAuditLog { get; } = new DataSourceKind(AzureAuditLogValue);
        /// <summary> AzureActivityLog. </summary>
        public static DataSourceKind AzureActivityLog { get; } = new DataSourceKind(AzureActivityLogValue);
        /// <summary> GenericDataSource. </summary>
        public static DataSourceKind GenericDataSource { get; } = new DataSourceKind(GenericDataSourceValue);
        /// <summary> ChangeTrackingCustomPath. </summary>
        public static DataSourceKind ChangeTrackingCustomPath { get; } = new DataSourceKind(ChangeTrackingCustomPathValue);
        /// <summary> ChangeTrackingPath. </summary>
        public static DataSourceKind ChangeTrackingPath { get; } = new DataSourceKind(ChangeTrackingPathValue);
        /// <summary> ChangeTrackingServices. </summary>
        public static DataSourceKind ChangeTrackingServices { get; } = new DataSourceKind(ChangeTrackingServicesValue);
        /// <summary> ChangeTrackingDataTypeConfiguration. </summary>
        public static DataSourceKind ChangeTrackingDataTypeConfiguration { get; } = new DataSourceKind(ChangeTrackingDataTypeConfigurationValue);
        /// <summary> ChangeTrackingDefaultRegistry. </summary>
        public static DataSourceKind ChangeTrackingDefaultRegistry { get; } = new DataSourceKind(ChangeTrackingDefaultRegistryValue);
        /// <summary> ChangeTrackingRegistry. </summary>
        public static DataSourceKind ChangeTrackingRegistry { get; } = new DataSourceKind(ChangeTrackingRegistryValue);
        /// <summary> ChangeTrackingLinuxPath. </summary>
        public static DataSourceKind ChangeTrackingLinuxPath { get; } = new DataSourceKind(ChangeTrackingLinuxPathValue);
        /// <summary> LinuxChangeTrackingPath. </summary>
        public static DataSourceKind LinuxChangeTrackingPath { get; } = new DataSourceKind(LinuxChangeTrackingPathValue);
        /// <summary> ChangeTrackingContentLocation. </summary>
        public static DataSourceKind ChangeTrackingContentLocation { get; } = new DataSourceKind(ChangeTrackingContentLocationValue);
        /// <summary> WindowsTelemetry. </summary>
        public static DataSourceKind WindowsTelemetry { get; } = new DataSourceKind(WindowsTelemetryValue);
        /// <summary> Office365. </summary>
        public static DataSourceKind Office365 { get; } = new DataSourceKind(Office365Value);
        /// <summary> SecurityWindowsBaselineConfiguration. </summary>
        public static DataSourceKind SecurityWindowsBaselineConfiguration { get; } = new DataSourceKind(SecurityWindowsBaselineConfigurationValue);
        /// <summary> SecurityCenterSecurityWindowsBaselineConfiguration. </summary>
        public static DataSourceKind SecurityCenterSecurityWindowsBaselineConfiguration { get; } = new DataSourceKind(SecurityCenterSecurityWindowsBaselineConfigurationValue);
        /// <summary> SecurityEventCollectionConfiguration. </summary>
        public static DataSourceKind SecurityEventCollectionConfiguration { get; } = new DataSourceKind(SecurityEventCollectionConfigurationValue);
        /// <summary> SecurityInsightsSecurityEventCollectionConfiguration. </summary>
        public static DataSourceKind SecurityInsightsSecurityEventCollectionConfiguration { get; } = new DataSourceKind(SecurityInsightsSecurityEventCollectionConfigurationValue);
        /// <summary> ImportComputerGroup. </summary>
        public static DataSourceKind ImportComputerGroup { get; } = new DataSourceKind(ImportComputerGroupValue);
        /// <summary> NetworkMonitoring. </summary>
        public static DataSourceKind NetworkMonitoring { get; } = new DataSourceKind(NetworkMonitoringValue);
        /// <summary> Itsm. </summary>
        public static DataSourceKind Itsm { get; } = new DataSourceKind(ItsmValue);
        /// <summary> DnsAnalytics. </summary>
        public static DataSourceKind DnsAnalytics { get; } = new DataSourceKind(DnsAnalyticsValue);
        /// <summary> ApplicationInsights. </summary>
        public static DataSourceKind ApplicationInsights { get; } = new DataSourceKind(ApplicationInsightsValue);
        /// <summary> SqlDataClassification. </summary>
        public static DataSourceKind SqlDataClassification { get; } = new DataSourceKind(SqlDataClassificationValue);
        /// <summary> Determines if two <see cref="DataSourceKind"/> values are the same. </summary>
        public static bool operator ==(DataSourceKind left, DataSourceKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataSourceKind"/> values are not the same. </summary>
        public static bool operator !=(DataSourceKind left, DataSourceKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataSourceKind"/>. </summary>
        public static implicit operator DataSourceKind(string value) => new DataSourceKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataSourceKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataSourceKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
