// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    /// <summary> Instruct the system how to handle and charge the logs ingested to this table. </summary>
    public readonly partial struct TablePlanEnum : IEquatable<TablePlanEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TablePlanEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TablePlanEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BasicValue = "Basic";
        private const string AnalyticsValue = "Analytics";

        /// <summary> Logs  that are adjusted to support high volume low value verbose logs. </summary>
        public static TablePlanEnum Basic { get; } = new TablePlanEnum(BasicValue);
        /// <summary> Logs  that allow monitoring and analytics. </summary>
        public static TablePlanEnum Analytics { get; } = new TablePlanEnum(AnalyticsValue);
        /// <summary> Determines if two <see cref="TablePlanEnum"/> values are the same. </summary>
        public static bool operator ==(TablePlanEnum left, TablePlanEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TablePlanEnum"/> values are not the same. </summary>
        public static bool operator !=(TablePlanEnum left, TablePlanEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TablePlanEnum"/>. </summary>
        public static implicit operator TablePlanEnum(string value) => new TablePlanEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TablePlanEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TablePlanEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
