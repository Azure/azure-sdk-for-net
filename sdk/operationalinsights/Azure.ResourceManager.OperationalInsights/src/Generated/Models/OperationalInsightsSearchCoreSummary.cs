// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.OperationalInsights.Models
{
    /// <summary> The core summary of a search. </summary>
    internal partial class OperationalInsightsSearchCoreSummary
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OperationalInsightsSearchCoreSummary"/>. </summary>
        /// <param name="numberOfDocuments"> The number of documents of a core summary. </param>
        internal OperationalInsightsSearchCoreSummary(long numberOfDocuments)
        {
            NumberOfDocuments = numberOfDocuments;
        }

        /// <summary> Initializes a new instance of <see cref="OperationalInsightsSearchCoreSummary"/>. </summary>
        /// <param name="status"> The status of a core summary. </param>
        /// <param name="numberOfDocuments"> The number of documents of a core summary. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OperationalInsightsSearchCoreSummary(string status, long numberOfDocuments, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Status = status;
            NumberOfDocuments = numberOfDocuments;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="OperationalInsightsSearchCoreSummary"/> for deserialization. </summary>
        internal OperationalInsightsSearchCoreSummary()
        {
        }

        /// <summary> The status of a core summary. </summary>
        public string Status { get; }
        /// <summary> The number of documents of a core summary. </summary>
        public long NumberOfDocuments { get; }
    }
}
