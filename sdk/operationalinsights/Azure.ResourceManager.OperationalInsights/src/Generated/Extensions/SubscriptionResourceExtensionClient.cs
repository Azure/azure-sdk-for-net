// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.OperationalInsights
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _logAnalyticsQueryPackQueryPacksClientDiagnostics;
        private QueryPacksRestOperations _logAnalyticsQueryPackQueryPacksRestClient;
        private ClientDiagnostics _operationalInsightsClusterClustersClientDiagnostics;
        private ClustersRestOperations _operationalInsightsClusterClustersRestClient;
        private ClientDiagnostics _operationalInsightsWorkspaceWorkspacesClientDiagnostics;
        private WorkspacesRestOperations _operationalInsightsWorkspaceWorkspacesRestClient;
        private ClientDiagnostics _deletedWorkspacesClientDiagnostics;
        private DeletedWorkspacesRestOperations _deletedWorkspacesRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics LogAnalyticsQueryPackQueryPacksClientDiagnostics => _logAnalyticsQueryPackQueryPacksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", LogAnalyticsQueryPackResource.ResourceType.Namespace, Diagnostics);
        private QueryPacksRestOperations LogAnalyticsQueryPackQueryPacksRestClient => _logAnalyticsQueryPackQueryPacksRestClient ??= new QueryPacksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(LogAnalyticsQueryPackResource.ResourceType));
        private ClientDiagnostics OperationalInsightsClusterClustersClientDiagnostics => _operationalInsightsClusterClustersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", OperationalInsightsClusterResource.ResourceType.Namespace, Diagnostics);
        private ClustersRestOperations OperationalInsightsClusterClustersRestClient => _operationalInsightsClusterClustersRestClient ??= new ClustersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(OperationalInsightsClusterResource.ResourceType));
        private ClientDiagnostics OperationalInsightsWorkspaceWorkspacesClientDiagnostics => _operationalInsightsWorkspaceWorkspacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", OperationalInsightsWorkspaceResource.ResourceType.Namespace, Diagnostics);
        private WorkspacesRestOperations OperationalInsightsWorkspaceWorkspacesRestClient => _operationalInsightsWorkspaceWorkspacesRestClient ??= new WorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(OperationalInsightsWorkspaceResource.ResourceType));
        private ClientDiagnostics DeletedWorkspacesClientDiagnostics => _deletedWorkspacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DeletedWorkspacesRestOperations DeletedWorkspacesRestClient => _deletedWorkspacesRestClient ??= new DeletedWorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets a list of all Log Analytics QueryPacks within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/queryPacks
        /// Operation Id: QueryPacks_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LogAnalyticsQueryPackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LogAnalyticsQueryPackResource> GetLogAnalyticsQueryPacksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LogAnalyticsQueryPackResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LogAnalyticsQueryPackQueryPacksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLogAnalyticsQueryPacks");
                scope.Start();
                try
                {
                    var response = await LogAnalyticsQueryPackQueryPacksRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LogAnalyticsQueryPackResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LogAnalyticsQueryPackQueryPacksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLogAnalyticsQueryPacks");
                scope.Start();
                try
                {
                    var response = await LogAnalyticsQueryPackQueryPacksRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of all Log Analytics QueryPacks within a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/queryPacks
        /// Operation Id: QueryPacks_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LogAnalyticsQueryPackResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LogAnalyticsQueryPackResource> GetLogAnalyticsQueryPacks(CancellationToken cancellationToken = default)
        {
            Page<LogAnalyticsQueryPackResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LogAnalyticsQueryPackQueryPacksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLogAnalyticsQueryPacks");
                scope.Start();
                try
                {
                    var response = LogAnalyticsQueryPackQueryPacksRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LogAnalyticsQueryPackResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LogAnalyticsQueryPackQueryPacksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetLogAnalyticsQueryPacks");
                scope.Start();
                try
                {
                    var response = LogAnalyticsQueryPackQueryPacksRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new LogAnalyticsQueryPackResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the Log Analytics clusters in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/clusters
        /// Operation Id: Clusters_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperationalInsightsClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OperationalInsightsClusterResource> GetOperationalInsightsClustersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OperationalInsightsClusterResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OperationalInsightsClusterClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationalInsightsClusters");
                scope.Start();
                try
                {
                    var response = await OperationalInsightsClusterClustersRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsClusterResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OperationalInsightsClusterResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OperationalInsightsClusterClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationalInsightsClusters");
                scope.Start();
                try
                {
                    var response = await OperationalInsightsClusterClustersRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsClusterResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the Log Analytics clusters in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/clusters
        /// Operation Id: Clusters_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperationalInsightsClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OperationalInsightsClusterResource> GetOperationalInsightsClusters(CancellationToken cancellationToken = default)
        {
            Page<OperationalInsightsClusterResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OperationalInsightsClusterClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationalInsightsClusters");
                scope.Start();
                try
                {
                    var response = OperationalInsightsClusterClustersRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsClusterResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OperationalInsightsClusterResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OperationalInsightsClusterClustersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationalInsightsClusters");
                scope.Start();
                try
                {
                    var response = OperationalInsightsClusterClustersRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsClusterResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the workspaces in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/workspaces
        /// Operation Id: Workspaces_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperationalInsightsWorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OperationalInsightsWorkspaceResource> GetOperationalInsightsWorkspacesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OperationalInsightsWorkspaceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OperationalInsightsWorkspaceWorkspacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationalInsightsWorkspaces");
                scope.Start();
                try
                {
                    var response = await OperationalInsightsWorkspaceWorkspacesRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsWorkspaceResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the workspaces in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/workspaces
        /// Operation Id: Workspaces_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperationalInsightsWorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OperationalInsightsWorkspaceResource> GetOperationalInsightsWorkspaces(CancellationToken cancellationToken = default)
        {
            Page<OperationalInsightsWorkspaceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OperationalInsightsWorkspaceWorkspacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationalInsightsWorkspaces");
                scope.Start();
                try
                {
                    var response = OperationalInsightsWorkspaceWorkspacesRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsWorkspaceResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets recently deleted workspaces in a subscription, available for recovery.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/deletedWorkspaces
        /// Operation Id: DeletedWorkspaces_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperationalInsightsWorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OperationalInsightsWorkspaceResource> GetDeletedWorkspacesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OperationalInsightsWorkspaceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DeletedWorkspacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDeletedWorkspaces");
                scope.Start();
                try
                {
                    var response = await DeletedWorkspacesRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsWorkspaceResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets recently deleted workspaces in a subscription, available for recovery.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/deletedWorkspaces
        /// Operation Id: DeletedWorkspaces_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperationalInsightsWorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OperationalInsightsWorkspaceResource> GetDeletedWorkspaces(CancellationToken cancellationToken = default)
        {
            Page<OperationalInsightsWorkspaceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DeletedWorkspacesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDeletedWorkspaces");
                scope.Start();
                try
                {
                    var response = DeletedWorkspacesRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OperationalInsightsWorkspaceResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }
    }
}
