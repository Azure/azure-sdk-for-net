// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.OperationalInsights.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OperationalInsights
{
    /// <summary>
    /// A Class representing a Workspace along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="WorkspaceResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetWorkspaceResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetWorkspace method.
    /// </summary>
    public partial class WorkspaceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="WorkspaceResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _workspaceClientDiagnostics;
        private readonly WorkspacesRestOperations _workspaceRestClient;
        private readonly ClientDiagnostics _intelligencePacksClientDiagnostics;
        private readonly IntelligencePacksRestOperations _intelligencePacksRestClient;
        private readonly ClientDiagnostics _managementGroupsClientDiagnostics;
        private readonly ManagementGroupsRestOperations _managementGroupsRestClient;
        private readonly ClientDiagnostics _sharedKeysClientDiagnostics;
        private readonly SharedKeysRestOperations _sharedKeysRestClient;
        private readonly ClientDiagnostics _usagesClientDiagnostics;
        private readonly UsagesRestOperations _usagesRestClient;
        private readonly ClientDiagnostics _availableServiceTiersClientDiagnostics;
        private readonly AvailableServiceTiersRestOperations _availableServiceTiersRestClient;
        private readonly ClientDiagnostics _gatewaysClientDiagnostics;
        private readonly GatewaysRestOperations _gatewaysRestClient;
        private readonly ClientDiagnostics _schemaClientDiagnostics;
        private readonly SchemaRestOperations _schemaRestClient;
        private readonly ClientDiagnostics _workspacePurgeClientDiagnostics;
        private readonly WorkspacePurgeRestOperations _workspacePurgeRestClient;
        private readonly WorkspaceData _data;

        /// <summary> Initializes a new instance of the <see cref="WorkspaceResource"/> class for mocking. </summary>
        protected WorkspaceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "WorkspaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal WorkspaceResource(ArmClient client, WorkspaceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="WorkspaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal WorkspaceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _workspaceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string workspaceApiVersion);
            _workspaceRestClient = new WorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, workspaceApiVersion);
            _intelligencePacksClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _intelligencePacksRestClient = new IntelligencePacksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _managementGroupsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _managementGroupsRestClient = new ManagementGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _sharedKeysClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _sharedKeysRestClient = new SharedKeysRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _usagesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _usagesRestClient = new UsagesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _availableServiceTiersClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _availableServiceTiersRestClient = new AvailableServiceTiersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _gatewaysClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _gatewaysRestClient = new GatewaysRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _schemaClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _schemaRestClient = new SchemaRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _workspacePurgeClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OperationalInsights", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _workspacePurgeRestClient = new WorkspacePurgeRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.OperationalInsights/workspaces";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WorkspaceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of DataExportResources in the Workspace. </summary>
        /// <returns> An object representing collection of DataExportResources and their operations over a DataExportResource. </returns>
        public virtual DataExportCollection GetDataExports()
        {
            return GetCachedClient(Client => new DataExportCollection(Client, Id));
        }

        /// <summary>
        /// Gets a data export instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}
        /// Operation Id: DataExports_Get
        /// </summary>
        /// <param name="dataExportName"> The data export rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataExportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataExportName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataExportResource>> GetDataExportAsync(string dataExportName, CancellationToken cancellationToken = default)
        {
            return await GetDataExports().GetAsync(dataExportName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a data export instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}
        /// Operation Id: DataExports_Get
        /// </summary>
        /// <param name="dataExportName"> The data export rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataExportName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataExportName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataExportResource> GetDataExport(string dataExportName, CancellationToken cancellationToken = default)
        {
            return GetDataExports().Get(dataExportName, cancellationToken);
        }

        /// <summary> Gets a collection of DataSourceResources in the Workspace. </summary>
        /// <returns> An object representing collection of DataSourceResources and their operations over a DataSourceResource. </returns>
        public virtual DataSourceCollection GetDataSources()
        {
            return GetCachedClient(Client => new DataSourceCollection(Client, Id));
        }

        /// <summary>
        /// Gets a datasource instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}
        /// Operation Id: DataSources_Get
        /// </summary>
        /// <param name="dataSourceName"> Name of the datasource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataSourceResource>> GetDataSourceAsync(string dataSourceName, CancellationToken cancellationToken = default)
        {
            return await GetDataSources().GetAsync(dataSourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a datasource instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}
        /// Operation Id: DataSources_Get
        /// </summary>
        /// <param name="dataSourceName"> Name of the datasource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataSourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataSourceResource> GetDataSource(string dataSourceName, CancellationToken cancellationToken = default)
        {
            return GetDataSources().Get(dataSourceName, cancellationToken);
        }

        /// <summary> Gets a collection of LinkedServiceResources in the Workspace. </summary>
        /// <returns> An object representing collection of LinkedServiceResources and their operations over a LinkedServiceResource. </returns>
        public virtual LinkedServiceCollection GetLinkedServices()
        {
            return GetCachedClient(Client => new LinkedServiceCollection(Client, Id));
        }

        /// <summary>
        /// Gets a linked service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}
        /// Operation Id: LinkedServices_Get
        /// </summary>
        /// <param name="linkedServiceName"> Name of the linked service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="linkedServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="linkedServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LinkedServiceResource>> GetLinkedServiceAsync(string linkedServiceName, CancellationToken cancellationToken = default)
        {
            return await GetLinkedServices().GetAsync(linkedServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a linked service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}
        /// Operation Id: LinkedServices_Get
        /// </summary>
        /// <param name="linkedServiceName"> Name of the linked service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="linkedServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="linkedServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LinkedServiceResource> GetLinkedService(string linkedServiceName, CancellationToken cancellationToken = default)
        {
            return GetLinkedServices().Get(linkedServiceName, cancellationToken);
        }

        /// <summary> Gets a collection of LinkedStorageAccountsResources in the Workspace. </summary>
        /// <returns> An object representing collection of LinkedStorageAccountsResources and their operations over a LinkedStorageAccountsResource. </returns>
        public virtual LinkedStorageAccountsResourceCollection GetLinkedStorageAccountsResources()
        {
            return GetCachedClient(Client => new LinkedStorageAccountsResourceCollection(Client, Id));
        }

        /// <summary>
        /// Gets all linked storage account of a specific data source type associated with the specified workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}
        /// Operation Id: LinkedStorageAccounts_Get
        /// </summary>
        /// <param name="dataSourceType"> Linked storage accounts type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<LinkedStorageAccountsResource>> GetLinkedStorageAccountsResourceAsync(DataSourceType dataSourceType, CancellationToken cancellationToken = default)
        {
            return await GetLinkedStorageAccountsResources().GetAsync(dataSourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets all linked storage account of a specific data source type associated with the specified workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}
        /// Operation Id: LinkedStorageAccounts_Get
        /// </summary>
        /// <param name="dataSourceType"> Linked storage accounts type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<LinkedStorageAccountsResource> GetLinkedStorageAccountsResource(DataSourceType dataSourceType, CancellationToken cancellationToken = default)
        {
            return GetLinkedStorageAccountsResources().Get(dataSourceType, cancellationToken);
        }

        /// <summary> Gets a collection of StorageInsightResources in the Workspace. </summary>
        /// <returns> An object representing collection of StorageInsightResources and their operations over a StorageInsightResource. </returns>
        public virtual StorageInsightCollection GetStorageInsights()
        {
            return GetCachedClient(Client => new StorageInsightCollection(Client, Id));
        }

        /// <summary>
        /// Gets a storage insight instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}
        /// Operation Id: StorageInsightConfigs_Get
        /// </summary>
        /// <param name="storageInsightName"> Name of the storageInsightsConfigs resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="storageInsightName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="storageInsightName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<StorageInsightResource>> GetStorageInsightAsync(string storageInsightName, CancellationToken cancellationToken = default)
        {
            return await GetStorageInsights().GetAsync(storageInsightName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a storage insight instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}
        /// Operation Id: StorageInsightConfigs_Get
        /// </summary>
        /// <param name="storageInsightName"> Name of the storageInsightsConfigs resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="storageInsightName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="storageInsightName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<StorageInsightResource> GetStorageInsight(string storageInsightName, CancellationToken cancellationToken = default)
        {
            return GetStorageInsights().Get(storageInsightName, cancellationToken);
        }

        /// <summary> Gets a collection of SavedSearchResources in the Workspace. </summary>
        /// <returns> An object representing collection of SavedSearchResources and their operations over a SavedSearchResource. </returns>
        public virtual SavedSearchCollection GetSavedSearches()
        {
            return GetCachedClient(Client => new SavedSearchCollection(Client, Id));
        }

        /// <summary>
        /// Gets the specified saved search for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}
        /// Operation Id: SavedSearches_Get
        /// </summary>
        /// <param name="savedSearchId"> The id of the saved search. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="savedSearchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="savedSearchId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SavedSearchResource>> GetSavedSearchAsync(string savedSearchId, CancellationToken cancellationToken = default)
        {
            return await GetSavedSearches().GetAsync(savedSearchId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified saved search for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}
        /// Operation Id: SavedSearches_Get
        /// </summary>
        /// <param name="savedSearchId"> The id of the saved search. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="savedSearchId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="savedSearchId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SavedSearchResource> GetSavedSearch(string savedSearchId, CancellationToken cancellationToken = default)
        {
            return GetSavedSearches().Get(savedSearchId, cancellationToken);
        }

        /// <summary> Gets a collection of TableResources in the Workspace. </summary>
        /// <returns> An object representing collection of TableResources and their operations over a TableResource. </returns>
        public virtual TableCollection GetTables()
        {
            return GetCachedClient(Client => new TableCollection(Client, Id));
        }

        /// <summary>
        /// Gets a Log Analytics workspace table.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}
        /// Operation Id: Tables_Get
        /// </summary>
        /// <param name="tableName"> The name of the table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tableName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tableName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<TableResource>> GetTableAsync(string tableName, CancellationToken cancellationToken = default)
        {
            return await GetTables().GetAsync(tableName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a Log Analytics workspace table.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}
        /// Operation Id: Tables_Get
        /// </summary>
        /// <param name="tableName"> The name of the table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tableName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tableName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<TableResource> GetTable(string tableName, CancellationToken cancellationToken = default)
        {
            return GetTables().Get(tableName, cancellationToken);
        }

        /// <summary>
        /// Gets a workspace instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkspaceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Get");
            scope.Start();
            try
            {
                var response = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a workspace instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkspaceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Get");
            scope.Start();
            try
            {
                var response = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a workspace resource. To recover the workspace, create it again with the same name, in the same subscription, resource group and location. The name is kept for 14 days and cannot be used for another workspace. To remove the workspace completely and release the name, use the force flag.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="force"> Deletes the workspace without the recovery option. A workspace that was deleted with this flag cannot be recovered. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Delete");
            scope.Start();
            try
            {
                var response = await _workspaceRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force, cancellationToken).ConfigureAwait(false);
                var operation = new OperationalInsightsArmOperation(_workspaceClientDiagnostics, Pipeline, _workspaceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a workspace resource. To recover the workspace, create it again with the same name, in the same subscription, resource group and location. The name is kept for 14 days and cannot be used for another workspace. To remove the workspace completely and release the name, use the force flag.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="force"> Deletes the workspace without the recovery option. A workspace that was deleted with this flag cannot be recovered. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, bool? force = null, CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Delete");
            scope.Start();
            try
            {
                var response = _workspaceRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force, cancellationToken);
                var operation = new OperationalInsightsArmOperation(_workspaceClientDiagnostics, Pipeline, _workspaceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, force).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Update
        /// </summary>
        /// <param name="patch"> The parameters required to patch a workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> UpdateAsync(WorkspacePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Update");
            scope.Start();
            try
            {
                var response = await _workspaceRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new WorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Update
        /// </summary>
        /// <param name="patch"> The parameters required to patch a workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<WorkspaceResource> Update(WorkspacePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Update");
            scope.Start();
            try
            {
                var response = _workspaceRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                return Response.FromValue(new WorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Disables an intelligence pack for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Disable
        /// Operation Id: IntelligencePacks_Disable
        /// </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be disabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="intelligencePackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public virtual async Task<Response> DisableIntelligencePackAsync(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(intelligencePackName, nameof(intelligencePackName));

            using var scope = _intelligencePacksClientDiagnostics.CreateScope("WorkspaceResource.DisableIntelligencePack");
            scope.Start();
            try
            {
                var response = await _intelligencePacksRestClient.DisableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Disables an intelligence pack for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Disable
        /// Operation Id: IntelligencePacks_Disable
        /// </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be disabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="intelligencePackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public virtual Response DisableIntelligencePack(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(intelligencePackName, nameof(intelligencePackName));

            using var scope = _intelligencePacksClientDiagnostics.CreateScope("WorkspaceResource.DisableIntelligencePack");
            scope.Start();
            try
            {
                var response = _intelligencePacksRestClient.Disable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables an intelligence pack for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Enable
        /// Operation Id: IntelligencePacks_Enable
        /// </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be enabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="intelligencePackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public virtual async Task<Response> EnableIntelligencePackAsync(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(intelligencePackName, nameof(intelligencePackName));

            using var scope = _intelligencePacksClientDiagnostics.CreateScope("WorkspaceResource.EnableIntelligencePack");
            scope.Start();
            try
            {
                var response = await _intelligencePacksRestClient.EnableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enables an intelligence pack for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Enable
        /// Operation Id: IntelligencePacks_Enable
        /// </summary>
        /// <param name="intelligencePackName"> The name of the intelligence pack to be enabled. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="intelligencePackName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="intelligencePackName"/> is null. </exception>
        public virtual Response EnableIntelligencePack(string intelligencePackName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(intelligencePackName, nameof(intelligencePackName));

            using var scope = _intelligencePacksClientDiagnostics.CreateScope("WorkspaceResource.EnableIntelligencePack");
            scope.Start();
            try
            {
                var response = _intelligencePacksRestClient.Enable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, intelligencePackName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks
        /// Operation Id: IntelligencePacks_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IntelligencePack" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IntelligencePack> GetIntelligencePacksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IntelligencePack>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _intelligencePacksClientDiagnostics.CreateScope("WorkspaceResource.GetIntelligencePacks");
                scope.Start();
                try
                {
                    var response = await _intelligencePacksRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists all the intelligence packs possible and whether they are enabled or disabled for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks
        /// Operation Id: IntelligencePacks_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IntelligencePack" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IntelligencePack> GetIntelligencePacks(CancellationToken cancellationToken = default)
        {
            Page<IntelligencePack> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _intelligencePacksClientDiagnostics.CreateScope("WorkspaceResource.GetIntelligencePacks");
                scope.Start();
                try
                {
                    var response = _intelligencePacksRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of management groups connected to a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/managementGroups
        /// Operation Id: ManagementGroups_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagementGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagementGroup> GetManagementGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagementGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _managementGroupsClientDiagnostics.CreateScope("WorkspaceResource.GetManagementGroups");
                scope.Start();
                try
                {
                    var response = await _managementGroupsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of management groups connected to a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/managementGroups
        /// Operation Id: ManagementGroups_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagementGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagementGroup> GetManagementGroups(CancellationToken cancellationToken = default)
        {
            Page<ManagementGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _managementGroupsClientDiagnostics.CreateScope("WorkspaceResource.GetManagementGroups");
                scope.Start();
                try
                {
                    var response = _managementGroupsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the shared keys for a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/sharedKeys
        /// Operation Id: SharedKeys_GetSharedKeys
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SharedKeys>> GetSharedKeysSharedKeyAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _sharedKeysClientDiagnostics.CreateScope("WorkspaceResource.GetSharedKeysSharedKey");
            scope.Start();
            try
            {
                var response = await _sharedKeysRestClient.GetSharedKeysAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the shared keys for a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/sharedKeys
        /// Operation Id: SharedKeys_GetSharedKeys
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SharedKeys> GetSharedKeysSharedKey(CancellationToken cancellationToken = default)
        {
            using var scope = _sharedKeysClientDiagnostics.CreateScope("WorkspaceResource.GetSharedKeysSharedKey");
            scope.Start();
            try
            {
                var response = _sharedKeysRestClient.GetSharedKeys(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/regenerateSharedKey
        /// Operation Id: SharedKeys_Regenerate
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SharedKeys>> RegenerateSharedKeyAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _sharedKeysClientDiagnostics.CreateScope("WorkspaceResource.RegenerateSharedKey");
            scope.Start();
            try
            {
                var response = await _sharedKeysRestClient.RegenerateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/regenerateSharedKey
        /// Operation Id: SharedKeys_Regenerate
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SharedKeys> RegenerateSharedKey(CancellationToken cancellationToken = default)
        {
            using var scope = _sharedKeysClientDiagnostics.CreateScope("WorkspaceResource.RegenerateSharedKey");
            scope.Start();
            try
            {
                var response = _sharedKeysRestClient.Regenerate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of usage metrics for a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/usages
        /// Operation Id: Usages_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="UsageMetric" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<UsageMetric> GetUsagesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<UsageMetric>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _usagesClientDiagnostics.CreateScope("WorkspaceResource.GetUsages");
                scope.Start();
                try
                {
                    var response = await _usagesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets a list of usage metrics for a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/usages
        /// Operation Id: Usages_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="UsageMetric" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<UsageMetric> GetUsages(CancellationToken cancellationToken = default)
        {
            Page<UsageMetric> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _usagesClientDiagnostics.CreateScope("WorkspaceResource.GetUsages");
                scope.Start();
                try
                {
                    var response = _usagesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the available service tiers for the workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/availableServiceTiers
        /// Operation Id: AvailableServiceTiers_ListByWorkspace
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AvailableServiceTier" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AvailableServiceTier> GetAvailableServiceTiersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AvailableServiceTier>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _availableServiceTiersClientDiagnostics.CreateScope("WorkspaceResource.GetAvailableServiceTiers");
                scope.Start();
                try
                {
                    var response = await _availableServiceTiersRestClient.ListByWorkspaceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the available service tiers for the workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/availableServiceTiers
        /// Operation Id: AvailableServiceTiers_ListByWorkspace
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AvailableServiceTier" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AvailableServiceTier> GetAvailableServiceTiers(CancellationToken cancellationToken = default)
        {
            Page<AvailableServiceTier> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _availableServiceTiersClientDiagnostics.CreateScope("WorkspaceResource.GetAvailableServiceTiers");
                scope.Start();
                try
                {
                    var response = _availableServiceTiersRestClient.ListByWorkspace(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Delete a Log Analytics gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/gateways/{gatewayId}
        /// Operation Id: Gateways_Delete
        /// </summary>
        /// <param name="gatewayId"> The Log Analytics gateway Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="gatewayId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public virtual async Task<Response> DeleteGatewayAsync(string gatewayId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(gatewayId, nameof(gatewayId));

            using var scope = _gatewaysClientDiagnostics.CreateScope("WorkspaceResource.DeleteGateway");
            scope.Start();
            try
            {
                var response = await _gatewaysRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete a Log Analytics gateway.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/gateways/{gatewayId}
        /// Operation Id: Gateways_Delete
        /// </summary>
        /// <param name="gatewayId"> The Log Analytics gateway Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="gatewayId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="gatewayId"/> is null. </exception>
        public virtual Response DeleteGateway(string gatewayId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(gatewayId, nameof(gatewayId));

            using var scope = _gatewaysClientDiagnostics.CreateScope("WorkspaceResource.DeleteGateway");
            scope.Start();
            try
            {
                var response = _gatewaysRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, gatewayId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the schema for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema
        /// Operation Id: Schema_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SearchSchemaValue" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SearchSchemaValue> GetSchemasAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SearchSchemaValue>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _schemaClientDiagnostics.CreateScope("WorkspaceResource.GetSchemas");
                scope.Start();
                try
                {
                    var response = await _schemaRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Gets the schema for a given workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema
        /// Operation Id: Schema_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SearchSchemaValue" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SearchSchemaValue> GetSchemas(CancellationToken cancellationToken = default)
        {
            Page<SearchSchemaValue> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _schemaClientDiagnostics.CreateScope("WorkspaceResource.GetSchemas");
                scope.Start();
                try
                {
                    var response = _schemaRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// 
        /// In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
        /// Log Analytics only supports purge operations required for compliance with GDPR. The Log Analytics product team reserves the right to reject requests for purge operations that are not for the purpose of GDPR compliance. In the event of a dispute, please create a support ticket
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge
        /// Operation Id: WorkspacePurge_Purge
        /// </summary>
        /// <param name="body"> Describes the body of a request to purge data in a single table of an Log Analytics Workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual async Task<Response<WorkspacePurgeResponse>> PurgeWorkspacePurgeAsync(WorkspacePurgeBody body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _workspacePurgeClientDiagnostics.CreateScope("WorkspaceResource.PurgeWorkspacePurge");
            scope.Start();
            try
            {
                var response = await _workspacePurgeRestClient.PurgeAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Purges data in an Log Analytics workspace by a set of user-defined filters.
        /// 
        /// In order to manage system resources, purge requests are throttled at 50 requests per hour. You should batch the execution of purge requests by sending a single command whose predicate includes all user identities that require purging. Use the in operator to specify multiple identities. You should run the query prior to using for a purge request to verify that the results are expected.
        /// Log Analytics only supports purge operations required for compliance with GDPR. The Log Analytics product team reserves the right to reject requests for purge operations that are not for the purpose of GDPR compliance. In the event of a dispute, please create a support ticket
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge
        /// Operation Id: WorkspacePurge_Purge
        /// </summary>
        /// <param name="body"> Describes the body of a request to purge data in a single table of an Log Analytics Workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        public virtual Response<WorkspacePurgeResponse> PurgeWorkspacePurge(WorkspacePurgeBody body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using var scope = _workspacePurgeClientDiagnostics.CreateScope("WorkspaceResource.PurgeWorkspacePurge");
            scope.Start();
            try
            {
                var response = _workspacePurgeRestClient.Purge(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, body, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets status of an ongoing purge operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}
        /// Operation Id: WorkspacePurge_GetPurgeStatus
        /// </summary>
        /// <param name="purgeId"> In a purge status request, this is the Id of the operation the status of which is returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="purgeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="purgeId"/> is null. </exception>
        public virtual async Task<Response<WorkspacePurgeStatusResponse>> GetPurgeStatusWorkspacePurgeAsync(string purgeId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(purgeId, nameof(purgeId));

            using var scope = _workspacePurgeClientDiagnostics.CreateScope("WorkspaceResource.GetPurgeStatusWorkspacePurge");
            scope.Start();
            try
            {
                var response = await _workspacePurgeRestClient.GetPurgeStatusAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, purgeId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets status of an ongoing purge operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}
        /// Operation Id: WorkspacePurge_GetPurgeStatus
        /// </summary>
        /// <param name="purgeId"> In a purge status request, this is the Id of the operation the status of which is returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="purgeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="purgeId"/> is null. </exception>
        public virtual Response<WorkspacePurgeStatusResponse> GetPurgeStatusWorkspacePurge(string purgeId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(purgeId, nameof(purgeId));

            using var scope = _workspacePurgeClientDiagnostics.CreateScope("WorkspaceResource.GetPurgeStatusWorkspacePurge");
            scope.Start();
            try
            {
                var response = _workspacePurgeRestClient.GetPurgeStatus(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, purgeId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<WorkspaceResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new WorkspacePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<WorkspaceResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new WorkspacePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<WorkspaceResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(patch, cancellationToken: cancellationToken);
                    return result;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
