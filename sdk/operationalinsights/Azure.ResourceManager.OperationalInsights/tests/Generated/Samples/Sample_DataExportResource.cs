// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;

namespace Azure.ResourceManager.OperationalInsights
{
    public partial class Sample_DataExportResource
    {
        // DataExportCreate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DataExportCreate()
        {
            // Generated from example definition: specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportCreateOrUpdate.json
            // this example is just showing the usage of "DataExports_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataExportResource created on azure
            // for more information of creating DataExportResource, please refer to the document of DataExportResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "RgTest1";
            string workspaceName = "DeWnTest1234";
            string dataExportName = "export1";
            ResourceIdentifier dataExportResourceId = DataExportResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, dataExportName);
            DataExportResource dataExport = client.GetDataExportResource(dataExportResourceId);

            // invoke the operation
            DataExportData data = new DataExportData()
            {
                TableNames =
{
"Heartbeat"
},
                ResourceId = "/subscriptions/192b9f85-a39a-4276-b96d-d5cd351703f9/resourceGroups/OIAutoRest1234/providers/Microsoft.EventHub/namespaces/test",
            };
            ArmOperation<DataExportResource> lro = await dataExport.UpdateAsync(WaitUntil.Completed, data);
            DataExportResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataExportData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DataExportGet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_DataExportGet()
        {
            // Generated from example definition: specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportGet.json
            // this example is just showing the usage of "DataExports_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataExportResource created on azure
            // for more information of creating DataExportResource, please refer to the document of DataExportResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "RgTest1";
            string workspaceName = "DeWnTest1234";
            string dataExportName = "export1";
            ResourceIdentifier dataExportResourceId = DataExportResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, dataExportName);
            DataExportResource dataExport = client.GetDataExportResource(dataExportResourceId);

            // invoke the operation
            DataExportResource result = await dataExport.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DataExportData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DataExportDelete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DataExportDelete()
        {
            // Generated from example definition: specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportDelete.json
            // this example is just showing the usage of "DataExports_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DataExportResource created on azure
            // for more information of creating DataExportResource, please refer to the document of DataExportResource
            string subscriptionId = "00000000-0000-0000-0000-00000000000";
            string resourceGroupName = "RgTest1";
            string workspaceName = "DeWnTest1234";
            string dataExportName = "export1";
            ResourceIdentifier dataExportResourceId = DataExportResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, dataExportName);
            DataExportResource dataExport = client.GetDataExportResource(dataExportResourceId);

            // invoke the operation
            await dataExport.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
