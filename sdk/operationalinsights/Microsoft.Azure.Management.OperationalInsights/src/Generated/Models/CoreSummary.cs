// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The core summary of a search.
    /// </summary>
    public partial class CoreSummary
    {
        /// <summary>
        /// Initializes a new instance of the CoreSummary class.
        /// </summary>
        public CoreSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CoreSummary class.
        /// </summary>
        /// <param name="numberOfDocuments">The number of documents of a core
        /// summary.</param>
        /// <param name="status">The status of a core summary.</param>
        public CoreSummary(long numberOfDocuments, string status = default(string))
        {
            Status = status;
            NumberOfDocuments = numberOfDocuments;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the status of a core summary.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the number of documents of a core summary.
        /// </summary>
        [JsonProperty(PropertyName = "numberOfDocuments")]
        public long NumberOfDocuments { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
