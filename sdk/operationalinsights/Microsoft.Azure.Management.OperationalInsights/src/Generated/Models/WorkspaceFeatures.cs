// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Workspace features.
    /// </summary>
    public partial class WorkspaceFeatures
    {
        /// <summary>
        /// Initializes a new instance of the WorkspaceFeatures class.
        /// </summary>
        public WorkspaceFeatures()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkspaceFeatures class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="enableDataExport">Flag that indicate if data should be
        /// exported.</param>
        /// <param name="immediatePurgeDataOn30Days">Flag that describes if we
        /// want to remove the data after 30 days.</param>
        /// <param name="enableLogAccessUsingOnlyResourcePermissions">Flag that
        /// indicate which permission to use - resource or workspace or
        /// both.</param>
        /// <param name="clusterResourceId">Dedicated LA cluster resourceId
        /// that is linked to the workspaces.</param>
        /// <param name="disableLocalAuth">Disable Non-AAD based Auth.</param>
        public WorkspaceFeatures(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), bool? enableDataExport = default(bool?), bool? immediatePurgeDataOn30Days = default(bool?), bool? enableLogAccessUsingOnlyResourcePermissions = default(bool?), string clusterResourceId = default(string), bool? disableLocalAuth = default(bool?))
        {
            AdditionalProperties = additionalProperties;
            EnableDataExport = enableDataExport;
            ImmediatePurgeDataOn30Days = immediatePurgeDataOn30Days;
            EnableLogAccessUsingOnlyResourcePermissions = enableLogAccessUsingOnlyResourcePermissions;
            ClusterResourceId = clusterResourceId;
            DisableLocalAuth = disableLocalAuth;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets flag that indicate if data should be exported.
        /// </summary>
        [JsonProperty(PropertyName = "enableDataExport")]
        public bool? EnableDataExport { get; set; }

        /// <summary>
        /// Gets or sets flag that describes if we want to remove the data
        /// after 30 days.
        /// </summary>
        [JsonProperty(PropertyName = "immediatePurgeDataOn30Days")]
        public bool? ImmediatePurgeDataOn30Days { get; set; }

        /// <summary>
        /// Gets or sets flag that indicate which permission to use - resource
        /// or workspace or both.
        /// </summary>
        [JsonProperty(PropertyName = "enableLogAccessUsingOnlyResourcePermissions")]
        public bool? EnableLogAccessUsingOnlyResourcePermissions { get; set; }

        /// <summary>
        /// Gets or sets dedicated LA cluster resourceId that is linked to the
        /// workspaces.
        /// </summary>
        [JsonProperty(PropertyName = "clusterResourceId")]
        public string ClusterResourceId { get; set; }

        /// <summary>
        /// Gets or sets disable Non-AAD based Auth.
        /// </summary>
        [JsonProperty(PropertyName = "disableLocalAuth")]
        public bool? DisableLocalAuth { get; set; }

    }
}
