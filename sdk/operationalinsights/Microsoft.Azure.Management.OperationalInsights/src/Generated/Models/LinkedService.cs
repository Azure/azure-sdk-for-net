// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The top level Linked service resource container.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LinkedService : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the LinkedService class.
        /// </summary>
        public LinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinkedService class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="resourceId">The resource id of the resource that will
        /// be linked to the workspace. This should be used for linking
        /// resources which require read access</param>
        /// <param name="writeAccessResourceId">The resource id of the resource
        /// that will be linked to the workspace. This should be used for
        /// linking resources which require write access</param>
        /// <param name="provisioningState">The provisioning state of the
        /// linked service. Possible values include: 'Succeeded', 'Deleting',
        /// 'ProvisioningAccount', 'Updating'</param>
        /// <param name="tags">Resource tags.</param>
        public LinkedService(string id = default(string), string name = default(string), string type = default(string), string resourceId = default(string), string writeAccessResourceId = default(string), string provisioningState = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
            : base(id, name, type)
        {
            ResourceId = resourceId;
            WriteAccessResourceId = writeAccessResourceId;
            ProvisioningState = provisioningState;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource id of the resource that will be linked to
        /// the workspace. This should be used for linking resources which
        /// require read access
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the resource id of the resource that will be linked to
        /// the workspace. This should be used for linking resources which
        /// require write access
        /// </summary>
        [JsonProperty(PropertyName = "properties.writeAccessResourceId")]
        public string WriteAccessResourceId { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of the linked service. Possible
        /// values include: 'Succeeded', 'Deleting', 'ProvisioningAccount',
        /// 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
