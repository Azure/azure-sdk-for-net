// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace OperationalInsightsManagementClient.Models
{
    public partial class Workspace : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ETag))
            {
                writer.WritePropertyName("eTag");
                writer.WriteStringValue(ETag);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsDefined(RetentionInDays))
            {
                if (RetentionInDays != null)
                {
                    writer.WritePropertyName("retentionInDays");
                    writer.WriteNumberValue(RetentionInDays.Value);
                }
                else
                {
                    writer.WriteNull("retentionInDays");
                }
            }
            if (Optional.IsDefined(WorkspaceCapping))
            {
                writer.WritePropertyName("workspaceCapping");
                writer.WriteObjectValue(WorkspaceCapping);
            }
            if (Optional.IsDefined(PublicNetworkAccessForIngestion))
            {
                writer.WritePropertyName("publicNetworkAccessForIngestion");
                writer.WriteStringValue(PublicNetworkAccessForIngestion.Value.ToString());
            }
            if (Optional.IsDefined(PublicNetworkAccessForQuery))
            {
                writer.WritePropertyName("publicNetworkAccessForQuery");
                writer.WriteStringValue(PublicNetworkAccessForQuery.Value.ToString());
            }
            if (Optional.IsDefined(ForceCmkForQuery))
            {
                writer.WritePropertyName("forceCmkForQuery");
                writer.WriteBooleanValue(ForceCmkForQuery.Value);
            }
            writer.WritePropertyName("features");
            writer.WriteStartObject();
            if (Optional.IsDefined(EnableDataExport))
            {
                if (EnableDataExport != null)
                {
                    writer.WritePropertyName("enableDataExport");
                    writer.WriteBooleanValue(EnableDataExport.Value);
                }
                else
                {
                    writer.WriteNull("enableDataExport");
                }
            }
            if (Optional.IsDefined(ImmediatePurgeDataOn30Days))
            {
                if (ImmediatePurgeDataOn30Days != null)
                {
                    writer.WritePropertyName("immediatePurgeDataOn30Days");
                    writer.WriteBooleanValue(ImmediatePurgeDataOn30Days.Value);
                }
                else
                {
                    writer.WriteNull("immediatePurgeDataOn30Days");
                }
            }
            if (Optional.IsDefined(EnableLogAccessUsingOnlyResourcePermissions))
            {
                if (EnableLogAccessUsingOnlyResourcePermissions != null)
                {
                    writer.WritePropertyName("enableLogAccessUsingOnlyResourcePermissions");
                    writer.WriteBooleanValue(EnableLogAccessUsingOnlyResourcePermissions.Value);
                }
                else
                {
                    writer.WriteNull("enableLogAccessUsingOnlyResourcePermissions");
                }
            }
            if (Optional.IsDefined(ClusterResourceId))
            {
                if (ClusterResourceId != null)
                {
                    writer.WritePropertyName("clusterResourceId");
                    writer.WriteStringValue(ClusterResourceId);
                }
                else
                {
                    writer.WriteNull("clusterResourceId");
                }
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Workspace DeserializeWorkspace(JsonElement element)
        {
            Optional<string> eTag = default;
            Optional<IDictionary<string, string>> tags = default;
            string location = default;
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<WorkspaceEntityStatus> provisioningState = default;
            Optional<string> customerId = default;
            Optional<WorkspaceSku> sku = default;
            Optional<int?> retentionInDays = default;
            Optional<WorkspaceCapping> workspaceCapping = default;
            Optional<string> createdDate = default;
            Optional<string> modifiedDate = default;
            Optional<PublicNetworkAccessType> publicNetworkAccessForIngestion = default;
            Optional<PublicNetworkAccessType> publicNetworkAccessForQuery = default;
            Optional<bool> forceCmkForQuery = default;
            Optional<IReadOnlyList<PrivateLinkScopedResource>> privateLinkScopedResources = default;
            Optional<bool?> enableDataExport = default;
            Optional<bool?> immediatePurgeDataOn30Days = default;
            Optional<bool?> enableLogAccessUsingOnlyResourcePermissions = default;
            Optional<string> clusterResourceId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("eTag"))
                {
                    eTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new WorkspaceEntityStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("customerId"))
                        {
                            customerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sku"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sku = WorkspaceSku.DeserializeWorkspaceSku(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("retentionInDays"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                retentionInDays = null;
                                continue;
                            }
                            retentionInDays = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("workspaceCapping"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            workspaceCapping = WorkspaceCapping.DeserializeWorkspaceCapping(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("createdDate"))
                        {
                            createdDate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("modifiedDate"))
                        {
                            modifiedDate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccessForIngestion"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            publicNetworkAccessForIngestion = new PublicNetworkAccessType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccessForQuery"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            publicNetworkAccessForQuery = new PublicNetworkAccessType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("forceCmkForQuery"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            forceCmkForQuery = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("privateLinkScopedResources"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<PrivateLinkScopedResource> array = new List<PrivateLinkScopedResource>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(PrivateLinkScopedResource.DeserializePrivateLinkScopedResource(item));
                            }
                            privateLinkScopedResources = array;
                            continue;
                        }
                        if (property0.NameEquals("features"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("enableDataExport"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        enableDataExport = null;
                                        continue;
                                    }
                                    enableDataExport = property1.Value.GetBoolean();
                                    continue;
                                }
                                if (property1.NameEquals("immediatePurgeDataOn30Days"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        immediatePurgeDataOn30Days = null;
                                        continue;
                                    }
                                    immediatePurgeDataOn30Days = property1.Value.GetBoolean();
                                    continue;
                                }
                                if (property1.NameEquals("enableLogAccessUsingOnlyResourcePermissions"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        enableLogAccessUsingOnlyResourcePermissions = null;
                                        continue;
                                    }
                                    enableLogAccessUsingOnlyResourcePermissions = property1.Value.GetBoolean();
                                    continue;
                                }
                                if (property1.NameEquals("clusterResourceId"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        clusterResourceId = null;
                                        continue;
                                    }
                                    clusterResourceId = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Workspace(id.Value, name.Value, type.Value, Optional.ToDictionary(tags), location, eTag.Value, Optional.ToNullable(provisioningState), customerId.Value, sku.Value, Optional.ToNullable(retentionInDays), workspaceCapping.Value, createdDate.Value, modifiedDate.Value, Optional.ToNullable(publicNetworkAccessForIngestion), Optional.ToNullable(publicNetworkAccessForQuery), Optional.ToNullable(forceCmkForQuery), Optional.ToList(privateLinkScopedResources), Optional.ToNullable(enableDataExport), Optional.ToNullable(immediatePurgeDataOn30Days), Optional.ToNullable(enableLogAccessUsingOnlyResourcePermissions), clusterResourceId.Value);
        }
    }
}
