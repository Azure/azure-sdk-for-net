// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Search job execution statistics.
    /// </summary>
    public partial class ResultStatistics
    {
        /// <summary>
        /// Initializes a new instance of the ResultStatistics class.
        /// </summary>
        public ResultStatistics()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResultStatistics class.
        /// </summary>
        /// <param name="progress">Search job completion percentage.</param>
        /// <param name="ingestedRecords">The number of rows that were returned
        /// by the search job.</param>
        public ResultStatistics(double? progress = default(double?), int? ingestedRecords = default(int?))
        {
            Progress = progress;
            IngestedRecords = ingestedRecords;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets search job completion percentage.
        /// </summary>
        [JsonProperty(PropertyName = "progress")]
        public double? Progress { get; private set; }

        /// <summary>
        /// Gets the number of rows that were returned by the search job.
        /// </summary>
        [JsonProperty(PropertyName = "ingestedRecords")]
        public int? IngestedRecords { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Progress % 0.01 != 0)
            {
                throw new ValidationException(ValidationRules.MultipleOf, "Progress", 0.01);
            }
        }
    }
}
