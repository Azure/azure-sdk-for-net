// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.OperationalInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Workspace data table definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Table : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        public Table()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Table class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="retentionInDays">The table retention in days, between
        /// 4 and 730. Setting this property to -1 will default to the
        /// workspace retention.</param>
        /// <param name="totalRetentionInDays">The table total retention in
        /// days, between 4 and 2555. Setting this property to -1 will default
        /// to table retention.</param>
        /// <param name="archiveRetentionInDays">The table data archive
        /// retention in days. Calculated as
        /// (totalRetentionInDays-retentionInDays)</param>
        /// <param name="searchResults">Parameters of the search job that
        /// initiated this table.</param>
        /// <param name="restoredLogs">Parameters of the restore operation that
        /// initiated this table.</param>
        /// <param name="resultStatistics">Search job execution
        /// statistics.</param>
        /// <param name="plan">Instruct the system how to handle and charge the
        /// logs ingested to this table. Possible values include: 'Basic',
        /// 'Analytics'</param>
        /// <param name="lastPlanModifiedDate">The timestamp that table plan
        /// was last modified (UTC).</param>
        /// <param name="schema">Table schema.</param>
        /// <param name="provisioningState">Table's current provisioning state.
        /// If set to 'updating', indicates a resource lock due to ongoing
        /// operation, forbidding any update to the table until the ongoing
        /// operation is concluded. Possible values include: 'Updating',
        /// 'InProgress', 'Succeeded'</param>
        public Table(string id = default(string), string name = default(string), string type = default(string), int? retentionInDays = default(int?), int? totalRetentionInDays = default(int?), int? archiveRetentionInDays = default(int?), SearchResults searchResults = default(SearchResults), RestoredLogs restoredLogs = default(RestoredLogs), ResultStatistics resultStatistics = default(ResultStatistics), string plan = default(string), string lastPlanModifiedDate = default(string), Schema schema = default(Schema), string provisioningState = default(string), SystemData systemData = default(SystemData))
            : base(id, name, type)
        {
            RetentionInDays = retentionInDays;
            TotalRetentionInDays = totalRetentionInDays;
            ArchiveRetentionInDays = archiveRetentionInDays;
            SearchResults = searchResults;
            RestoredLogs = restoredLogs;
            ResultStatistics = resultStatistics;
            Plan = plan;
            LastPlanModifiedDate = lastPlanModifiedDate;
            Schema = schema;
            ProvisioningState = provisioningState;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the table retention in days, between 4 and 730.
        /// Setting this property to -1 will default to the workspace
        /// retention.
        /// </summary>
        [JsonProperty(PropertyName = "properties.retentionInDays")]
        public int? RetentionInDays { get; set; }

        /// <summary>
        /// Gets or sets the table total retention in days, between 4 and 2555.
        /// Setting this property to -1 will default to table retention.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalRetentionInDays")]
        public int? TotalRetentionInDays { get; set; }

        /// <summary>
        /// Gets the table data archive retention in days. Calculated as
        /// (totalRetentionInDays-retentionInDays)
        /// </summary>
        [JsonProperty(PropertyName = "properties.archiveRetentionInDays")]
        public int? ArchiveRetentionInDays { get; private set; }

        /// <summary>
        /// Gets or sets parameters of the search job that initiated this
        /// table.
        /// </summary>
        [JsonProperty(PropertyName = "properties.searchResults")]
        public SearchResults SearchResults { get; set; }

        /// <summary>
        /// Gets or sets parameters of the restore operation that initiated
        /// this table.
        /// </summary>
        [JsonProperty(PropertyName = "properties.restoredLogs")]
        public RestoredLogs RestoredLogs { get; set; }

        /// <summary>
        /// Gets or sets search job execution statistics.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resultStatistics")]
        public ResultStatistics ResultStatistics { get; set; }

        /// <summary>
        /// Gets or sets instruct the system how to handle and charge the logs
        /// ingested to this table. Possible values include: 'Basic',
        /// 'Analytics'
        /// </summary>
        [JsonProperty(PropertyName = "properties.plan")]
        public string Plan { get; set; }

        /// <summary>
        /// Gets the timestamp that table plan was last modified (UTC).
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastPlanModifiedDate")]
        public string LastPlanModifiedDate { get; private set; }

        /// <summary>
        /// Gets or sets table schema.
        /// </summary>
        [JsonProperty(PropertyName = "properties.schema")]
        public Schema Schema { get; set; }

        /// <summary>
        /// Gets table's current provisioning state. If set to 'updating',
        /// indicates a resource lock due to ongoing operation, forbidding any
        /// update to the table until the ongoing operation is concluded.
        /// Possible values include: 'Updating', 'InProgress', 'Succeeded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RetentionInDays > 730)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "RetentionInDays", 730);
            }
            if (RetentionInDays < 4)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "RetentionInDays", 4);
            }
            if (TotalRetentionInDays > 2555)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "TotalRetentionInDays", 2555);
            }
            if (TotalRetentionInDays < 4)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TotalRetentionInDays", 4);
            }
            if (ResultStatistics != null)
            {
                ResultStatistics.Validate();
            }
        }
    }
}
