<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="AnalyzeAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnalyzeAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    text = "<text>",
};

Response response = await client.AnalyzeAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AnalyzeAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    text = "<text>",
    categories = new[] {
        "Hate"
    },
    languages = new[] {
        "<String>"
    },
    blocklistIds = new[] {
        "<String>"
    },
    breakByBlocklists = true,
};

Response response = await client.AnalyzeAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("listId").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("itemId").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("itemText").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("riskLevel").ToString());
]]></code>
</example>
<remarks>
A sync API for harmful content analysis for text

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TextDetectRequest</c>:
<code>{
  text: string, # Required. The text needs to be scanned
  categories: [&quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;], # Optional. The categories will be analyzed, if not assigned, a default set of categories&apos;
analysis results will be returned.
  languages: [string], # Optional. Language hints for text analysis.  Values can contain only the language code (ex.
&quot;en&quot;, &quot;fr&quot;) of BCP 47. If no languages given, the service will detact languages.
  blocklistIds: [string], # Optional. The ids of blocklists
  breakByBlocklists: boolean, # Optional. When set to true, other analysis will be skipped once any of configured
blocklists was hit. When set to false, all the analysis will be done even when
blocklists were hit.
}
</code>

Response Body:

Schema for <c>TextDetectResponse</c>:
<code>{
  blocklistMatchResults: [
    {
      listId: string, # Required. The id of matched custom list
      itemId: string, # Required. The id of matched item
      itemText: string, # Required. The content of matched item
      offset: number, # Optional. The character offset of matched text in original input
      length: number, # Optional. The length of matched text in original input
    }
  ], # Optional. The details of list match
  hateResult: {
    category: &quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;, # Required.
    riskLevel: number, # Required. riskLevel represent the severity of the input, currently its value could be: 0,2,4,6
  }, # Optional.
  selfHarmResult: TextDetectMultiSeverityResult, # Optional.
  sexualResult: TextDetectMultiSeverityResult, # Optional.
  violenceResult: TextDetectMultiSeverityResult, # Optional.
}
</code>

</remarks>
    </member>
    <member name="Analyze(RequestContent,RequestContext)">
<example>
This sample shows how to call Analyze with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    text = "<text>",
};

Response response = client.Analyze(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Analyze with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    text = "<text>",
    categories = new[] {
        "Hate"
    },
    languages = new[] {
        "<String>"
    },
    blocklistIds = new[] {
        "<String>"
    },
    breakByBlocklists = true,
};

Response response = client.Analyze(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("listId").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("itemId").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("itemText").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("blocklistMatchResults")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("riskLevel").ToString());
]]></code>
</example>
<remarks>
A sync API for harmful content analysis for text

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TextDetectRequest</c>:
<code>{
  text: string, # Required. The text needs to be scanned
  categories: [&quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;], # Optional. The categories will be analyzed, if not assigned, a default set of categories&apos;
analysis results will be returned.
  languages: [string], # Optional. Language hints for text analysis.  Values can contain only the language code (ex.
&quot;en&quot;, &quot;fr&quot;) of BCP 47. If no languages given, the service will detact languages.
  blocklistIds: [string], # Optional. The ids of blocklists
  breakByBlocklists: boolean, # Optional. When set to true, other analysis will be skipped once any of configured
blocklists was hit. When set to false, all the analysis will be done even when
blocklists were hit.
}
</code>

Response Body:

Schema for <c>TextDetectResponse</c>:
<code>{
  blocklistMatchResults: [
    {
      listId: string, # Required. The id of matched custom list
      itemId: string, # Required. The id of matched item
      itemText: string, # Required. The content of matched item
      offset: number, # Optional. The character offset of matched text in original input
      length: number, # Optional. The length of matched text in original input
    }
  ], # Optional. The details of list match
  hateResult: {
    category: &quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;, # Required.
    riskLevel: number, # Required. riskLevel represent the severity of the input, currently its value could be: 0,2,4,6
  }, # Optional.
  selfHarmResult: TextDetectMultiSeverityResult, # Optional.
  sexualResult: TextDetectMultiSeverityResult, # Optional.
  violenceResult: TextDetectMultiSeverityResult, # Optional.
}
</code>

</remarks>
    </member>
    <member name="DetectAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call DetectAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    image = new {},
};

Response response = await client.DetectAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    image = new {
        content = new {},
        url = "<url>",
    },
    categories = new[] {
        "Hate"
    },
};

Response response = await client.DetectAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("riskLevel").ToString());
]]></code>
</example>
<remarks>
A sync API for harmful content analysis for image

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ImageDetectRequest</c>:
<code>{
  image: {
    content: BinaryData, # Optional. Base64 encoding of image
    url: string, # Optional. The blob url of image
  }, # Required. The image needs to be scanned
  categories: [&quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;], # Optional. The categories will be analyzed, if not assigned, default categories will be
analyzed
}
</code>

Response Body:

Schema for <c>ImageDetectResponse</c>:
<code>{
  hateResult: {
    category: &quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;, # Required.
    riskLevel: number, # Required. riskLevel represent the severity of the input, currently its value could be: 0,2,4,6
  }, # Optional.
  selfHarmResult: ImageDetectMultiSeverityResult, # Optional.
  sexualResult: ImageDetectMultiSeverityResult, # Optional.
  violenceResult: ImageDetectMultiSeverityResult, # Optional.
}
</code>

</remarks>
    </member>
    <member name="Detect(RequestContent,RequestContext)">
<example>
This sample shows how to call Detect with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    image = new {},
};

Response response = client.Detect(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Detect with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    image = new {
        content = new {},
        url = "<url>",
    },
    categories = new[] {
        "Hate"
    },
};

Response response = client.Detect(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("riskLevel").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("riskLevel").ToString());
]]></code>
</example>
<remarks>
A sync API for harmful content analysis for image

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ImageDetectRequest</c>:
<code>{
  image: {
    content: BinaryData, # Optional. Base64 encoding of image
    url: string, # Optional. The blob url of image
  }, # Required. The image needs to be scanned
  categories: [&quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;], # Optional. The categories will be analyzed, if not assigned, default categories will be
analyzed
}
</code>

Response Body:

Schema for <c>ImageDetectResponse</c>:
<code>{
  hateResult: {
    category: &quot;Hate&quot; | &quot;SelfHarm&quot; | &quot;Sexual&quot; | &quot;Violence&quot;, # Required.
    riskLevel: number, # Required. riskLevel represent the severity of the input, currently its value could be: 0,2,4,6
  }, # Optional.
  selfHarmResult: ImageDetectMultiSeverityResult, # Optional.
  sexualResult: ImageDetectMultiSeverityResult, # Optional.
  violenceResult: ImageDetectMultiSeverityResult, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetTextListAsync(String,RequestContext)">
<example>
This sample shows how to call GetTextListAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

Response response = await client.GetTextListAsync("<listName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("listName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
<remarks>
Returns text list details of the Text List with list Id equal to list Id passed.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TextList</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="GetTextList(String,RequestContext)">
<example>
This sample shows how to call GetTextList with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

Response response = client.GetTextList("<listName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("listName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
<remarks>
Returns text list details of the Text List with list Id equal to list Id passed.

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TextList</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateListAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateListAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    listName = "<listName>",
};

Response response = await client.CreateOrUpdateListAsync("<listName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("listName").ToString());
]]></code>
This sample shows how to call CreateOrUpdateListAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    listName = "<listName>",
    description = "<description>",
};

Response response = await client.CreateOrUpdateListAsync("<listName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("listName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
<remarks>
Updates an Text List by listId, if listId not exists, create a new Text List

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TextList</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

Response Body:

Schema for <c>TextList</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateList(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateList with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    listName = "<listName>",
};

Response response = client.CreateOrUpdateList("<listName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("listName").ToString());
]]></code>
This sample shows how to call CreateOrUpdateList with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    listName = "<listName>",
    description = "<description>",
};

Response response = client.CreateOrUpdateList("<listName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("listName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
<remarks>
Updates an Text List by listId, if listId not exists, create a new Text List

Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TextList</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

Response Body:

Schema for <c>TextList</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="DeleteTextListAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteTextListAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

Response response = await client.DeleteTextListAsync("<listName>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Deletes Text List with the list Id equal to list Id passed.
</remarks>
    </member>
    <member name="DeleteTextList(String,RequestContext)">
<example>
This sample shows how to call DeleteTextList with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

Response response = client.DeleteTextList("<listName>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Deletes Text List with the list Id equal to list Id passed.
</remarks>
    </member>
    <member name="RemoveItemsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call RemoveItemsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {};

Response response = await client.RemoveItemsAsync("<listName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RemoveItemsAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    itemsIds = new[] {
        "<String>"
    },
};

Response response = await client.RemoveItemsAsync("<listName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>BatchDeleteTextListItemsRequest</c>:
<code>{
  itemsIds: [string], # Optional.
}
</code>

</remarks>
    </member>
    <member name="RemoveItems(String,RequestContent,RequestContext)">
<example>
This sample shows how to call RemoveItems with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {};

Response response = client.RemoveItems("<listName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RemoveItems with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

var data = new {
    itemsIds = new[] {
        "<String>"
    },
};

Response response = client.RemoveItems("<listName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>BatchDeleteTextListItemsRequest</c>:
<code>{
  itemsIds: [string], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetTextListItemAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetTextListItemAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

Response response = await client.GetTextListItemAsync("<listName>", "<itemId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("itemId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TextListItem</c>:
<code>{
  itemId: string, # Required. Item id
  description: string, # Optional. Text data description
  text: string, # Required. Text list item content.
  language: string, # Required. Language of this item, Value may contain only the language code (ex. &quot;en&quot;,
&quot;fr&quot;) of BCP 47. If not assigned, &quot;en&quot; will be used
}
</code>

</remarks>
    </member>
    <member name="GetTextListItem(String,String,RequestContext)">
<example>
This sample shows how to call GetTextListItem with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

Response response = client.GetTextListItem("<listName>", "<itemId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("itemId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TextListItem</c>:
<code>{
  itemId: string, # Required. Item id
  description: string, # Optional. Text data description
  text: string, # Required. Text list item content.
  language: string, # Required. Language of this item, Value may contain only the language code (ex. &quot;en&quot;,
&quot;fr&quot;) of BCP 47. If not assigned, &quot;en&quot; will be used
}
</code>

</remarks>
    </member>
    <member name="GetTextListsAsync(RequestContext)">
<example>
This sample shows how to call GetTextListsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

await foreach (var data in client.GetTextListsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("listName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="GetTextLists(RequestContext)">
<example>
This sample shows how to call GetTextLists and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

foreach (var data in client.GetTextLists())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("listName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="GetTextListItemsAsync(String,Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetTextListItemsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

await foreach (var data in client.GetTextListItemsAsync("<listName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("listName").ToString());
}
]]></code>
This sample shows how to call GetTextListItemsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

await foreach (var data in client.GetTextListItemsAsync("<listName>", 1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("listName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
    <member name="GetTextListItems(String,Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetTextListItems with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

foreach (var data in client.GetTextListItems("<listName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("listName").ToString());
}
]]></code>
This sample shows how to call GetTextListItems with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectCarnegieClient(endpoint, credential);

foreach (var data in client.GetTextListItems("<listName>", 1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("listName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  listName: string, # Required. Text List Id.
  description: string, # Optional. Description for Text List.
}
</code>

</remarks>
    </member>
  </members>
</doc>