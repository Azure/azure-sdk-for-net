// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ProjectCarnegie.Models;

namespace ProjectCarnegie
{
    // Data plane generated client.
    /// <summary> The ProjectCarnegie service client. </summary>
    public partial class ProjectCarnegieClient
    {
        private const string AuthorizationHeader = "Ocp-Apim-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ProjectCarnegieClient for mocking. </summary>
        protected ProjectCarnegieClient()
        {
        }

        /// <summary> Initializes a new instance of ProjectCarnegieClient. </summary>
        /// <param name="endpoint">
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://&lt;resource-name&gt;.cognitiveservices.azure.com).
        /// </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ProjectCarnegieClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new ProjectCarnegieClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ProjectCarnegieClient. </summary>
        /// <param name="endpoint">
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://&lt;resource-name&gt;.cognitiveservices.azure.com).
        /// </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ProjectCarnegieClient(Uri endpoint, AzureKeyCredential credential, ProjectCarnegieClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new ProjectCarnegieClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Analyze Text. </summary>
        /// <param name="request"> The analysis request of the text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        /// <remarks> A sync API for harmful content analysis for text. </remarks>
        public virtual async Task<Response<TextDetectResponse>> AnalyzeAsync(TextDetectRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AnalyzeAsync(request.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(TextDetectResponse.FromResponse(response), response);
        }

        /// <summary> Analyze Text. </summary>
        /// <param name="request"> The analysis request of the text. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        /// <remarks> A sync API for harmful content analysis for text. </remarks>
        public virtual Response<TextDetectResponse> Analyze(TextDetectRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Analyze(request.ToRequestContent(), context);
            return Response.FromValue(TextDetectResponse.FromResponse(response), response);
        }

        /// <summary> Analyze Text. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='AnalyzeAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> AnalyzeAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.Analyze");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyze Text. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='Analyze(RequestContent,RequestContext)']/*" />
        public virtual Response Analyze(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.Analyze");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnalyzeRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyze Image. </summary>
        /// <param name="request"> The analysis request of the image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        /// <remarks> A sync API for harmful content analysis for image. </remarks>
        public virtual async Task<Response<ImageDetectResponse>> DetectAsync(ImageDetectRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await DetectAsync(request.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(ImageDetectResponse.FromResponse(response), response);
        }

        /// <summary> Analyze Image. </summary>
        /// <param name="request"> The analysis request of the image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="request"/> is null. </exception>
        /// <remarks> A sync API for harmful content analysis for image. </remarks>
        public virtual Response<ImageDetectResponse> Detect(ImageDetectRequest request, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(request, nameof(request));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Detect(request.ToRequestContent(), context);
            return Response.FromValue(ImageDetectResponse.FromResponse(response), response);
        }

        /// <summary> Analyze Image. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='DetectAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> DetectAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.Detect");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDetectRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyze Image. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='Detect(RequestContent,RequestContext)']/*" />
        public virtual Response Detect(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.Detect");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDetectRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Text List By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Returns text list details of the Text List with list Id equal to list Id passed. </remarks>
        public virtual async Task<Response<TextList>> GetTextListValueAsync(string listName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetTextListAsync(listName, context).ConfigureAwait(false);
                return Response.FromValue(TextList.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Text List By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks> Returns text list details of the Text List with list Id equal to list Id passed. </remarks>
        public virtual Response<TextList> GetTextListValue(string listName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetTextList(listName, context);
                return Response.FromValue(TextList.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Text List By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextListAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> GetTextListAsync(string listName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextList");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTextListRequest(listName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Text List By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextList(String,RequestContext)']/*" />
        public virtual Response GetTextList(string listName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextList");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTextListRequest(listName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Or Update Text List. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='CreateOrUpdateListAsync(String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrUpdateListAsync(string listName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.CreateOrUpdateList");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateListRequest(listName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Or Update Text List. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='CreateOrUpdateList(String,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrUpdateList(string listName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.CreateOrUpdateList");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateListRequest(listName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete Text List By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='DeleteTextListAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> DeleteTextListAsync(string listName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.DeleteTextList");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTextListRequest(listName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete Text List By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='DeleteTextList(String,RequestContext)']/*" />
        public virtual Response DeleteTextList(string listName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.DeleteTextList");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTextListRequest(listName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="listName"> Text List Id. </param>
        /// <param name="batchDeleteTextListItemsRequest"> The BatchDeleteTextListItemsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="batchDeleteTextListItemsRequest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> RemoveItemsAsync(string listName, BatchDeleteTextListItemsRequest batchDeleteTextListItemsRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNull(batchDeleteTextListItemsRequest, nameof(batchDeleteTextListItemsRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RemoveItemsAsync(listName, batchDeleteTextListItemsRequest.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <param name="listName"> Text List Id. </param>
        /// <param name="batchDeleteTextListItemsRequest"> The BatchDeleteTextListItemsRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="batchDeleteTextListItemsRequest"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response RemoveItems(string listName, BatchDeleteTextListItemsRequest batchDeleteTextListItemsRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNull(batchDeleteTextListItemsRequest, nameof(batchDeleteTextListItemsRequest));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RemoveItems(listName, batchDeleteTextListItemsRequest.ToRequestContent(), context);
            return response;
        }

        /// <param name="listName"> Text List Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='RemoveItemsAsync(String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RemoveItemsAsync(string listName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.RemoveItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveItemsRequest(listName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="listName"> Text List Id. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='RemoveItems(String,RequestContent,RequestContext)']/*" />
        public virtual Response RemoveItems(string listName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.RemoveItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveItemsRequest(listName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Item By itemId and listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="itemId"> Item id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<TextListItem>> GetTextListItemValueAsync(string listName, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextListItemValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetTextListItemAsync(listName, itemId, context).ConfigureAwait(false);
                return Response.FromValue(TextListItem.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Item By itemId and listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="itemId"> Item id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<TextListItem> GetTextListItemValue(string listName, string itemId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextListItemValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetTextListItem(listName, itemId, context);
                return Response.FromValue(TextListItem.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Item By itemId and listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="itemId"> Item id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextListItemAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetTextListItemAsync(string listName, string itemId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextListItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTextListItemRequest(listName, itemId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Item By itemId and listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="itemId"> Item id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> or <paramref name="itemId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> or <paramref name="itemId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextListItem(String,String,RequestContext)']/*" />
        public virtual Response GetTextListItem(string listName, string itemId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));
            Argument.AssertNotNullOrEmpty(itemId, nameof(itemId));

            using var scope = ClientDiagnostics.CreateScope("ProjectCarnegieClient.GetTextListItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTextListItemRequest(listName, itemId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get All Text Lists. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<TextList> GetTextListValuesAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListsNextPageRequest(nextLink, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, TextList.DeserializeTextList, ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextLists", "value", "nextLink", context);
        }

        /// <summary> Get All Text Lists. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<TextList> GetTextListValues(CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListsNextPageRequest(nextLink, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, TextList.DeserializeTextList, ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextLists", "value", "nextLink", context);
        }

        /// <summary> Get All Text Lists. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextListsAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetTextListsAsync(RequestContext context = null)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListsNextPageRequest(nextLink, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextLists", "value", "nextLink", context);
        }

        /// <summary> Get All Text Lists. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextLists(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetTextLists(RequestContext context = null)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListsRequest(context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListsNextPageRequest(nextLink, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextLists", "value", "nextLink", context);
        }

        /// <summary> Get All Items By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual AsyncPageable<TextList> GetTextListItemValuesAsync(string listName, int? maxCount = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListItemsRequest(listName, maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListItemsNextPageRequest(nextLink, listName, maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, TextList.DeserializeTextList, ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextListItems", "value", "nextLink", context);
        }

        /// <summary> Get All Items By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Pageable<TextList> GetTextListItemValues(string listName, int? maxCount = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListItemsRequest(listName, maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListItemsNextPageRequest(nextLink, listName, maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, TextList.DeserializeTextList, ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextListItems", "value", "nextLink", context);
        }

        /// <summary> Get All Items By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextListItemsAsync(String,Int32,Int32,Int32,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetTextListItemsAsync(string listName, int? maxCount = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListItemsRequest(listName, maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListItemsNextPageRequest(nextLink, listName, maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextListItems", "value", "nextLink", context);
        }

        /// <summary> Get All Items By listId. </summary>
        /// <param name="listName"> Text List Id. </param>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="listName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="listName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/ProjectCarnegieClient.xml" path="doc/members/member[@name='GetTextListItems(String,Int32,Int32,Int32,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetTextListItems(string listName, int? maxCount = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(listName, nameof(listName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetTextListItemsRequest(listName, maxCount, skip, maxpagesize, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetTextListItemsNextPageRequest(nextLink, listName, maxCount, skip, maxpagesize, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "ProjectCarnegieClient.GetTextListItems", "value", "nextLink", context);
        }

        internal HttpMessage CreateAnalyzeRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text:analyze", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDetectRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/image:analyze", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTextListRequest(string listName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists/", false);
            uri.AppendPath(listName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateListRequest(string listName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists/", false);
            uri.AppendPath(listName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTextListRequest(string listName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists/", false);
            uri.AppendPath(listName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTextListsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRemoveItemsRequest(string listName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists/", false);
            uri.AppendPath(listName, true);
            uri.AppendPath(":removeItems", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTextListItemRequest(string listName, string itemId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists/", false);
            uri.AppendPath(listName, true);
            uri.AppendPath("/items/", false);
            uri.AppendPath(itemId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTextListItemsRequest(string listName, int? maxCount, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendPath("/text/lists/", false);
            uri.AppendPath(listName, true);
            uri.AppendPath("/items", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTextListsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTextListItemsNextPageRequest(string nextLink, string listName, int? maxCount, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/carnegie", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
