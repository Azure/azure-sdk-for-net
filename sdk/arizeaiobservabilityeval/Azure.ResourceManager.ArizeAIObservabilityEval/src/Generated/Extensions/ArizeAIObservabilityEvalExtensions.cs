// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ArizeAIObservabilityEval.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ArizeAIObservabilityEval
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.ArizeAIObservabilityEval. </summary>
    public static partial class ArizeAIObservabilityEvalExtensions
    {
        /// <param name="client"></param>
        private static MockableArizeAIObservabilityEvalArmClient GetMockableArizeAIObservabilityEvalArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableArizeAIObservabilityEvalArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockableArizeAIObservabilityEvalResourceGroupResource GetMockableArizeAIObservabilityEvalResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockableArizeAIObservabilityEvalResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockableArizeAIObservabilityEvalSubscriptionResource GetMockableArizeAIObservabilityEvalSubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockableArizeAIObservabilityEvalSubscriptionResource(client, subscriptionResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="ArizeAIObservabilityEvalOrganizationResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="ArizeAIObservabilityEvalOrganizationResource"/> object. </returns>
        public static ArizeAIObservabilityEvalOrganizationResource GetArizeAIObservabilityEvalOrganizationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableArizeAIObservabilityEvalArmClient(client).GetArizeAIObservabilityEvalOrganizationResource(id);
        }

        /// <summary> Gets a collection of ArizeAIObservabilityEvalOrganizations in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of ArizeAIObservabilityEvalOrganizations and their operations over a ArizeAIObservabilityEvalOrganizationResource. </returns>
        public static ArizeAIObservabilityEvalOrganizationCollection GetArizeAIObservabilityEvalOrganizations(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableArizeAIObservabilityEvalResourceGroupResource(resourceGroupResource).GetArizeAIObservabilityEvalOrganizations();
        }

        /// <summary> Get a OrganizationResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="organizationname"> Name of the Organization resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ArizeAIObservabilityEvalOrganizationResource>> GetArizeAIObservabilityEvalOrganizationAsync(this ResourceGroupResource resourceGroupResource, string organizationname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableArizeAIObservabilityEvalResourceGroupResource(resourceGroupResource).GetArizeAIObservabilityEvalOrganizationAsync(organizationname, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a OrganizationResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="organizationname"> Name of the Organization resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ArizeAIObservabilityEvalOrganizationResource> GetArizeAIObservabilityEvalOrganization(this ResourceGroupResource resourceGroupResource, string organizationname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableArizeAIObservabilityEvalResourceGroupResource(resourceGroupResource).GetArizeAIObservabilityEvalOrganization(organizationname, cancellationToken);
        }

        /// <summary> List OrganizationResource resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="ArizeAIObservabilityEvalOrganizationResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ArizeAIObservabilityEvalOrganizationResource> GetArizeAIObservabilityEvalOrganizationsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableArizeAIObservabilityEvalSubscriptionResource(subscriptionResource).GetArizeAIObservabilityEvalOrganizationsAsync(cancellationToken);
        }

        /// <summary> List OrganizationResource resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="ArizeAIObservabilityEvalOrganizationResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ArizeAIObservabilityEvalOrganizationResource> GetArizeAIObservabilityEvalOrganizations(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableArizeAIObservabilityEvalSubscriptionResource(subscriptionResource).GetArizeAIObservabilityEvalOrganizations(cancellationToken);
        }
    }
}
