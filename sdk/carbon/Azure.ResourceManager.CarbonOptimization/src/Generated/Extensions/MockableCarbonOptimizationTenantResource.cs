// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.CarbonOptimization.Models;

namespace Azure.ResourceManager.CarbonOptimization.Mocking
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    public partial class MockableCarbonOptimizationTenantResource : ArmResource
    {
        private ClientDiagnostics _carbonServiceClientDiagnostics;
        private CarbonServiceRestOperations _carbonServiceRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableCarbonOptimizationTenantResource"/> class for mocking. </summary>
        protected MockableCarbonOptimizationTenantResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableCarbonOptimizationTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableCarbonOptimizationTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CarbonServiceClientDiagnostics => _carbonServiceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.CarbonOptimization", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CarbonServiceRestOperations CarbonServiceRestClient => _carbonServiceRestClient ??= new CarbonServiceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// API for Carbon Emissions Reports
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/carbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_ListCarbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="queryParameters"> Query parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryParameters"/> is null. </exception>
        /// <returns> An async collection of <see cref="CarbonEmissionData"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CarbonEmissionData> GetCarbonEmissionReportsCarbonServicesAsync(QueryFilter queryParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(queryParameters, nameof(queryParameters));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CarbonServiceRestClient.CreateListCarbonEmissionReportsRequest(queryParameters);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CarbonServiceRestClient.CreateListCarbonEmissionReportsNextPageRequest(nextLink, queryParameters);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => CarbonEmissionData.DeserializeCarbonEmissionData(e), CarbonServiceClientDiagnostics, Pipeline, "MockableCarbonOptimizationTenantResource.GetCarbonEmissionReportsCarbonServices", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// API for Carbon Emissions Reports
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/carbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_ListCarbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="queryParameters"> Query parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryParameters"/> is null. </exception>
        /// <returns> A collection of <see cref="CarbonEmissionData"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CarbonEmissionData> GetCarbonEmissionReportsCarbonServices(QueryFilter queryParameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(queryParameters, nameof(queryParameters));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CarbonServiceRestClient.CreateListCarbonEmissionReportsRequest(queryParameters);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CarbonServiceRestClient.CreateListCarbonEmissionReportsNextPageRequest(nextLink, queryParameters);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => CarbonEmissionData.DeserializeCarbonEmissionData(e), CarbonServiceClientDiagnostics, Pipeline, "MockableCarbonOptimizationTenantResource.GetCarbonEmissionReportsCarbonServices", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// API for query carbon emission data available date range
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/queryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_QueryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CarbonEmissionDataAvailableDateRange>> QueryCarbonEmissionDataAvailableDateRangeCarbonServiceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = CarbonServiceClientDiagnostics.CreateScope("MockableCarbonOptimizationTenantResource.QueryCarbonEmissionDataAvailableDateRangeCarbonService");
            scope.Start();
            try
            {
                var response = await CarbonServiceRestClient.QueryCarbonEmissionDataAvailableDateRangeAsync(cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// API for query carbon emission data available date range
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/queryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_QueryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CarbonEmissionDataAvailableDateRange> QueryCarbonEmissionDataAvailableDateRangeCarbonService(CancellationToken cancellationToken = default)
        {
            using var scope = CarbonServiceClientDiagnostics.CreateScope("MockableCarbonOptimizationTenantResource.QueryCarbonEmissionDataAvailableDateRangeCarbonService");
            scope.Start();
            try
            {
                var response = CarbonServiceRestClient.QueryCarbonEmissionDataAvailableDateRange(cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
