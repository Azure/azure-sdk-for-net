// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.ResourceManager.CarbonOptimization.Mocking;
using Azure.ResourceManager.CarbonOptimization.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.CarbonOptimization
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.CarbonOptimization. </summary>
    public static partial class CarbonOptimizationExtensions
    {
        private static MockableCarbonOptimizationTenantResource GetMockableCarbonOptimizationTenantResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableCarbonOptimizationTenantResource(client, resource.Id));
        }

        /// <summary>
        /// API for Carbon Emissions Reports
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/carbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_ListCarbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCarbonOptimizationTenantResource.GetCarbonEmissionReportsCarbonServices(CarbonEmissionQueryContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="content"> Query parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="content"/> is null. </exception>
        /// <returns> An async collection of <see cref="CarbonEmission"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CarbonEmission> GetCarbonEmissionReportsCarbonServicesAsync(this TenantResource tenantResource, CarbonEmissionQueryContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableCarbonOptimizationTenantResource(tenantResource).GetCarbonEmissionReportsCarbonServicesAsync(content, cancellationToken);
        }

        /// <summary>
        /// API for Carbon Emissions Reports
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/carbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_ListCarbonEmissionReports</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCarbonOptimizationTenantResource.GetCarbonEmissionReportsCarbonServices(CarbonEmissionQueryContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="content"> Query parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="content"/> is null. </exception>
        /// <returns> A collection of <see cref="CarbonEmission"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CarbonEmission> GetCarbonEmissionReportsCarbonServices(this TenantResource tenantResource, CarbonEmissionQueryContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableCarbonOptimizationTenantResource(tenantResource).GetCarbonEmissionReportsCarbonServices(content, cancellationToken);
        }

        /// <summary>
        /// API for query carbon emission data available date range
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/queryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_QueryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCarbonOptimizationTenantResource.QueryCarbonEmissionDataAvailableDateRangeCarbonService(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        public static async Task<Response<CarbonEmissionAvailableDateRange>> QueryCarbonEmissionDataAvailableDateRangeCarbonServiceAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return await GetMockableCarbonOptimizationTenantResource(tenantResource).QueryCarbonEmissionDataAvailableDateRangeCarbonServiceAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// API for query carbon emission data available date range
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Carbon/queryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CarbonService_QueryCarbonEmissionDataAvailableDateRange</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-02-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCarbonOptimizationTenantResource.QueryCarbonEmissionDataAvailableDateRangeCarbonService(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        public static Response<CarbonEmissionAvailableDateRange> QueryCarbonEmissionDataAvailableDateRangeCarbonService(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableCarbonOptimizationTenantResource(tenantResource).QueryCarbonEmissionDataAvailableDateRangeCarbonService(cancellationToken);
        }
    }
}
