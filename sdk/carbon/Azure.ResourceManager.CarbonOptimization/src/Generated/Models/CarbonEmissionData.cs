// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary>
    /// Response for given query parameters
    /// Please note <see cref="CarbonEmissionData"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="CarbonEmissionItemDetailData"/>, <see cref="CarbonEmissionMonthlySummaryData"/>, <see cref="CarbonEmissionOverallSummaryData"/>, <see cref="ResourceGroupCarbonEmissionItemDetailData"/>, <see cref="ResourceGroupCarbonEmissionTopItemMonthlySummaryData"/>, <see cref="ResourceGroupCarbonEmissionTopItemsSummaryData"/>, <see cref="ResourceCarbonEmissionItemDetailData"/>, <see cref="ResourceCarbonEmissionTopItemMonthlySummaryData"/>, <see cref="ResourceCarbonEmissionTopItemsSummaryData"/>, <see cref="ResourceTypeCarbonEmissionItemDetailData"/>, <see cref="CarbonEmissionTopItemMonthlySummaryData"/> and <see cref="CarbonEmissionTopItemsSummaryData"/>.
    /// </summary>
    public abstract partial class CarbonEmissionData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CarbonEmissionData"/>. </summary>
        /// <param name="totalCarbonEmission"> Total carbon emissions for given query parameters. </param>
        /// <param name="totalCarbonEmissionLastMonth"> Total carbon emission for last month for given query parameters. </param>
        /// <param name="changeRatioForLastMonth"> Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth. </param>
        /// <param name="totalCarbonEmission12MonthsAgo"> Total carbon emissions for 12 months ago for given query parameters. </param>
        /// <param name="changeRatioFor12Months"> Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo. </param>
        protected CarbonEmissionData(double totalCarbonEmission, double totalCarbonEmissionLastMonth, double changeRatioForLastMonth, double totalCarbonEmission12MonthsAgo, double changeRatioFor12Months)
        {
            TotalCarbonEmission = totalCarbonEmission;
            TotalCarbonEmissionLastMonth = totalCarbonEmissionLastMonth;
            ChangeRatioForLastMonth = changeRatioForLastMonth;
            TotalCarbonEmission12MonthsAgo = totalCarbonEmission12MonthsAgo;
            ChangeRatioFor12Months = changeRatioFor12Months;
        }

        /// <summary> Initializes a new instance of <see cref="CarbonEmissionData"/>. </summary>
        /// <param name="dataType"> Query result data type name. </param>
        /// <param name="totalCarbonEmission"> Total carbon emissions for given query parameters. </param>
        /// <param name="totalCarbonEmissionLastMonth"> Total carbon emission for last month for given query parameters. </param>
        /// <param name="changeRatioForLastMonth"> Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth. </param>
        /// <param name="totalCarbonEmission12MonthsAgo"> Total carbon emissions for 12 months ago for given query parameters. </param>
        /// <param name="changeRatioFor12Months"> Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo. </param>
        /// <param name="changeValueMonthOverMonth"> Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CarbonEmissionData(string dataType, double totalCarbonEmission, double totalCarbonEmissionLastMonth, double changeRatioForLastMonth, double totalCarbonEmission12MonthsAgo, double changeRatioFor12Months, double? changeValueMonthOverMonth, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DataType = dataType;
            TotalCarbonEmission = totalCarbonEmission;
            TotalCarbonEmissionLastMonth = totalCarbonEmissionLastMonth;
            ChangeRatioForLastMonth = changeRatioForLastMonth;
            TotalCarbonEmission12MonthsAgo = totalCarbonEmission12MonthsAgo;
            ChangeRatioFor12Months = changeRatioFor12Months;
            ChangeValueMonthOverMonth = changeValueMonthOverMonth;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CarbonEmissionData"/> for deserialization. </summary>
        internal CarbonEmissionData()
        {
        }

        /// <summary> Query result data type name. </summary>
        internal string DataType { get; set; }
        /// <summary> Total carbon emissions for given query parameters. </summary>
        public double TotalCarbonEmission { get; }
        /// <summary> Total carbon emission for last month for given query parameters. </summary>
        public double TotalCarbonEmissionLastMonth { get; }
        /// <summary> Change ratio between totalCarbonEmission and totalCarbonEmissionLastMonth. </summary>
        public double ChangeRatioForLastMonth { get; }
        /// <summary> Total carbon emissions for 12 months ago for given query parameters. </summary>
        public double TotalCarbonEmission12MonthsAgo { get; }
        /// <summary> Change ratio between totalCarbonEmission and totalCarbonEmission12MonthsAgo. </summary>
        public double ChangeRatioFor12Months { get; }
        /// <summary> Change Value between totalCarbonEmission and totalCarbonEmissionLastMonth. </summary>
        public double? ChangeValueMonthOverMonth { get; }
    }
}
