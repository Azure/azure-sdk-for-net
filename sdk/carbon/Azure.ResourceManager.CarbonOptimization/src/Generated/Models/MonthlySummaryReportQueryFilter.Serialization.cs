// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.CarbonOptimization;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Query filter parameter to configure MonthlySummaryReport queries. </summary>
    public partial class MonthlySummaryReportQueryFilter : IJsonModel<MonthlySummaryReportQueryFilter>
    {
        /// <summary> Initializes a new instance of <see cref="MonthlySummaryReportQueryFilter"/> for deserialization. </summary>
        internal MonthlySummaryReportQueryFilter()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<MonthlySummaryReportQueryFilter>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MonthlySummaryReportQueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MonthlySummaryReportQueryFilter)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        MonthlySummaryReportQueryFilter IJsonModel<MonthlySummaryReportQueryFilter>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (MonthlySummaryReportQueryFilter)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override CarbonEmissionQueryFilter JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MonthlySummaryReportQueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MonthlySummaryReportQueryFilter)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMonthlySummaryReportQueryFilter(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static MonthlySummaryReportQueryFilter DeserializeMonthlySummaryReportQueryFilter(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CarbonEmissionQueryReportType reportType = default;
            CarbonEmissionQueryDateRange dateRange = default;
            IList<string> subscriptionList = default;
            IList<string> resourceGroupUrlList = default;
            IList<ResourceType> resourceTypeList = default;
            IList<AzureLocation> locationList = default;
            IList<CarbonEmissionScope> carbonScopeList = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("reportType"u8))
                {
                    reportType = new CarbonEmissionQueryReportType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("dateRange"u8))
                {
                    dateRange = CarbonEmissionQueryDateRange.DeserializeCarbonEmissionQueryDateRange(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("subscriptionList"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    subscriptionList = array;
                    continue;
                }
                if (prop.NameEquals("resourceGroupUrlList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    resourceGroupUrlList = array;
                    continue;
                }
                if (prop.NameEquals("resourceTypeList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceType> array = new List<ResourceType>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(new ResourceType(item.GetString()));
                    }
                    resourceTypeList = array;
                    continue;
                }
                if (prop.NameEquals("locationList"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureLocation> array = new List<AzureLocation>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(new AzureLocation(item.GetString()));
                    }
                    locationList = array;
                    continue;
                }
                if (prop.NameEquals("carbonScopeList"u8))
                {
                    List<CarbonEmissionScope> array = new List<CarbonEmissionScope>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(new CarbonEmissionScope(item.GetString()));
                    }
                    carbonScopeList = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new MonthlySummaryReportQueryFilter(
                reportType,
                dateRange,
                subscriptionList,
                resourceGroupUrlList ?? new ChangeTrackingList<string>(),
                resourceTypeList ?? new ChangeTrackingList<ResourceType>(),
                locationList ?? new ChangeTrackingList<AzureLocation>(),
                carbonScopeList,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<MonthlySummaryReportQueryFilter>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MonthlySummaryReportQueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCarbonOptimizationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MonthlySummaryReportQueryFilter)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        MonthlySummaryReportQueryFilter IPersistableModel<MonthlySummaryReportQueryFilter>.Create(BinaryData data, ModelReaderWriterOptions options) => (MonthlySummaryReportQueryFilter)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override CarbonEmissionQueryFilter PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MonthlySummaryReportQueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeMonthlySummaryReportQueryFilter(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MonthlySummaryReportQueryFilter)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<MonthlySummaryReportQueryFilter>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
