// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Enum for Access Decision. </summary>
    public readonly partial struct CarbonEmissionAccessDecision : IEquatable<CarbonEmissionAccessDecision>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CarbonEmissionAccessDecision"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CarbonEmissionAccessDecision(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllowedValue = "Allowed";
        private const string DeniedValue = "Denied";

        /// <summary> Access allowed. </summary>
        public static CarbonEmissionAccessDecision Allowed { get; } = new CarbonEmissionAccessDecision(AllowedValue);
        /// <summary> Access denied. </summary>
        public static CarbonEmissionAccessDecision Denied { get; } = new CarbonEmissionAccessDecision(DeniedValue);
        /// <summary> Determines if two <see cref="CarbonEmissionAccessDecision"/> values are the same. </summary>
        public static bool operator ==(CarbonEmissionAccessDecision left, CarbonEmissionAccessDecision right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CarbonEmissionAccessDecision"/> values are not the same. </summary>
        public static bool operator !=(CarbonEmissionAccessDecision left, CarbonEmissionAccessDecision right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CarbonEmissionAccessDecision"/>. </summary>
        public static implicit operator CarbonEmissionAccessDecision(string value) => new CarbonEmissionAccessDecision(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CarbonEmissionAccessDecision other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CarbonEmissionAccessDecision other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
