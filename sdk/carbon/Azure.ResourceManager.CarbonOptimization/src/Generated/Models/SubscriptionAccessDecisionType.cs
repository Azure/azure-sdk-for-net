// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Enum for Access Decision. </summary>
    internal readonly partial struct SubscriptionAccessDecisionType : IEquatable<SubscriptionAccessDecisionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SubscriptionAccessDecisionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SubscriptionAccessDecisionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllowedValue = "Allowed";
        private const string DeniedValue = "Denied";

        /// <summary> Access allowed. </summary>
        public static SubscriptionAccessDecisionType Allowed { get; } = new SubscriptionAccessDecisionType(AllowedValue);
        /// <summary> Access denied. </summary>
        public static SubscriptionAccessDecisionType Denied { get; } = new SubscriptionAccessDecisionType(DeniedValue);
        /// <summary> Determines if two <see cref="SubscriptionAccessDecisionType"/> values are the same. </summary>
        public static bool operator ==(SubscriptionAccessDecisionType left, SubscriptionAccessDecisionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SubscriptionAccessDecisionType"/> values are not the same. </summary>
        public static bool operator !=(SubscriptionAccessDecisionType left, SubscriptionAccessDecisionType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SubscriptionAccessDecisionType"/>. </summary>
        public static implicit operator SubscriptionAccessDecisionType(string value) => new SubscriptionAccessDecisionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SubscriptionAccessDecisionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SubscriptionAccessDecisionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
