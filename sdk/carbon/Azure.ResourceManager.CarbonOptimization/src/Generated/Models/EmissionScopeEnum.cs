// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Supported carbon emission scopes to be used with QueryParameter, as defined by the GHG Protocol. At least one scope must be specified. The output will return a total of all specified scopes. </summary>
    public readonly partial struct EmissionScopeEnum : IEquatable<EmissionScopeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EmissionScopeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EmissionScopeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Scope1Value = "Scope1";
        private const string Scope2Value = "Scope2";
        private const string Scope3Value = "Scope3";

        /// <summary> Scope1 carbon emission. </summary>
        public static EmissionScopeEnum Scope1 { get; } = new EmissionScopeEnum(Scope1Value);
        /// <summary> Scope2 carbon emission. </summary>
        public static EmissionScopeEnum Scope2 { get; } = new EmissionScopeEnum(Scope2Value);
        /// <summary> Scope3 carbon emission. </summary>
        public static EmissionScopeEnum Scope3 { get; } = new EmissionScopeEnum(Scope3Value);
        /// <summary> Determines if two <see cref="EmissionScopeEnum"/> values are the same. </summary>
        public static bool operator ==(EmissionScopeEnum left, EmissionScopeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EmissionScopeEnum"/> values are not the same. </summary>
        public static bool operator !=(EmissionScopeEnum left, EmissionScopeEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EmissionScopeEnum"/>. </summary>
        public static implicit operator EmissionScopeEnum(string value) => new EmissionScopeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EmissionScopeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EmissionScopeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
