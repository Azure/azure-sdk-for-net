// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    public partial class ResourceCarbonEmissionItemDetailData : IUtf8JsonSerializable, IJsonModel<ResourceCarbonEmissionItemDetailData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResourceCarbonEmissionItemDetailData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ResourceCarbonEmissionItemDetailData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceCarbonEmissionItemDetailData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("itemName"u8);
            writer.WriteStringValue(ItemName);
            writer.WritePropertyName("groupName"u8);
            writer.WriteStringValue(GroupName);
            writer.WritePropertyName("categoryType"u8);
            writer.WriteStringValue(CategoryType.ToString());
            writer.WritePropertyName("subscriptionId"u8);
            writer.WriteStringValue(SubscriptionId);
            writer.WritePropertyName("resourceGroup"u8);
            writer.WriteStringValue(ResourceGroup);
            if (ResourceId != null)
            {
                writer.WritePropertyName("resourceId"u8);
                writer.WriteStringValue(ResourceId);
            }
            if (Location.HasValue)
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(Location.Value);
            }
            if (ResourceType != null)
            {
                writer.WritePropertyName("resourceType"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (ResourceTypeFriendlyName != null)
            {
                writer.WritePropertyName("resourceTypeFriendlyName"u8);
                writer.WriteStringValue(ResourceTypeFriendlyName);
            }
            if (ResourceProvider != null)
            {
                writer.WritePropertyName("resourceProvider"u8);
                writer.WriteStringValue(ResourceProvider);
            }
            writer.WritePropertyName("dataType"u8);
            writer.WriteStringValue(DataType);
            writer.WritePropertyName("totalCarbonEmission"u8);
            writer.WriteNumberValue(TotalCarbonEmission);
            writer.WritePropertyName("totalCarbonEmissionLastMonth"u8);
            writer.WriteNumberValue(TotalCarbonEmissionLastMonth);
            writer.WritePropertyName("changeRatioForLastMonth"u8);
            writer.WriteNumberValue(ChangeRatioForLastMonth);
            writer.WritePropertyName("totalCarbonEmission12MonthsAgo"u8);
            writer.WriteNumberValue(TotalCarbonEmission12MonthsAgo);
            writer.WritePropertyName("changeRatioFor12Months"u8);
            writer.WriteNumberValue(ChangeRatioFor12Months);
            if (ChangeValueMonthOverMonth.HasValue)
            {
                writer.WritePropertyName("changeValueMonthOverMonth"u8);
                writer.WriteNumberValue(ChangeValueMonthOverMonth.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ResourceCarbonEmissionItemDetailData IJsonModel<ResourceCarbonEmissionItemDetailData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceCarbonEmissionItemDetailData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResourceCarbonEmissionItemDetailData(document.RootElement, options);
        }

        internal static ResourceCarbonEmissionItemDetailData DeserializeResourceCarbonEmissionItemDetailData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string itemName = default;
            string groupName = default;
            CategoryTypeEnum categoryType = default;
            string subscriptionId = default;
            string resourceGroup = default;
            Optional<string> resourceId = default;
            Optional<AzureLocation> location = default;
            Optional<string> resourceType = default;
            Optional<string> resourceTypeFriendlyName = default;
            Optional<string> resourceProvider = default;
            string dataType = default;
            double totalCarbonEmission = default;
            double totalCarbonEmissionLastMonth = default;
            double changeRatioForLastMonth = default;
            double totalCarbonEmission12MonthsAgo = default;
            double changeRatioFor12Months = default;
            Optional<double> changeValueMonthOverMonth = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("itemName"u8))
                {
                    itemName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupName"u8))
                {
                    groupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("categoryType"u8))
                {
                    categoryType = new CategoryTypeEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceGroup"u8))
                {
                    resourceGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceId"u8))
                {
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceTypeFriendlyName"u8))
                {
                    resourceTypeFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceProvider"u8))
                {
                    resourceProvider = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataType"u8))
                {
                    dataType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalCarbonEmission"u8))
                {
                    totalCarbonEmission = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalCarbonEmissionLastMonth"u8))
                {
                    totalCarbonEmissionLastMonth = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("changeRatioForLastMonth"u8))
                {
                    changeRatioForLastMonth = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalCarbonEmission12MonthsAgo"u8))
                {
                    totalCarbonEmission12MonthsAgo = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("changeRatioFor12Months"u8))
                {
                    changeRatioFor12Months = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("changeValueMonthOverMonth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    changeValueMonthOverMonth = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ResourceCarbonEmissionItemDetailData(dataType, totalCarbonEmission, totalCarbonEmissionLastMonth, changeRatioForLastMonth, totalCarbonEmission12MonthsAgo, changeRatioFor12Months, Optional.ToNullable(changeValueMonthOverMonth), serializedAdditionalRawData, itemName, groupName, categoryType, subscriptionId, resourceGroup, resourceId.Value, Optional.ToNullable(location), resourceType.Value, resourceTypeFriendlyName.Value, resourceProvider.Value);
        }

        BinaryData IPersistableModel<ResourceCarbonEmissionItemDetailData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ResourceCarbonEmissionItemDetailData)} does not support '{options.Format}' format.");
            }
        }

        ResourceCarbonEmissionItemDetailData IPersistableModel<ResourceCarbonEmissionItemDetailData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeResourceCarbonEmissionItemDetailData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResourceCarbonEmissionItemDetailData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResourceCarbonEmissionItemDetailData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
