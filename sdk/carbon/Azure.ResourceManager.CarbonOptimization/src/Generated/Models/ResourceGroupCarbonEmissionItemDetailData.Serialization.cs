// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    public partial class ResourceGroupCarbonEmissionItemDetailData : IUtf8JsonSerializable, IJsonModel<ResourceGroupCarbonEmissionItemDetailData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResourceGroupCarbonEmissionItemDetailData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ResourceGroupCarbonEmissionItemDetailData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceGroupCarbonEmissionItemDetailData)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("itemName"u8);
            writer.WriteStringValue(ItemName);
            writer.WritePropertyName("groupName"u8);
            writer.WriteStringValue(GroupName);
            writer.WritePropertyName("categoryType"u8);
            writer.WriteStringValue(CategoryType.ToString());
            writer.WritePropertyName("subscriptionId"u8);
            writer.WriteStringValue(SubscriptionId);
            writer.WritePropertyName("dataType"u8);
            writer.WriteStringValue(DataType);
            writer.WritePropertyName("totalCarbonEmission"u8);
            writer.WriteNumberValue(TotalCarbonEmission);
            writer.WritePropertyName("totalCarbonEmissionLastMonth"u8);
            writer.WriteNumberValue(TotalCarbonEmissionLastMonth);
            writer.WritePropertyName("changeRatioForLastMonth"u8);
            writer.WriteNumberValue(ChangeRatioForLastMonth);
            writer.WritePropertyName("totalCarbonEmission12MonthsAgo"u8);
            writer.WriteNumberValue(TotalCarbonEmission12MonthsAgo);
            writer.WritePropertyName("changeRatioFor12Months"u8);
            writer.WriteNumberValue(ChangeRatioFor12Months);
            if (Optional.IsDefined(ChangeValueMonthOverMonth))
            {
                writer.WritePropertyName("changeValueMonthOverMonth"u8);
                writer.WriteNumberValue(ChangeValueMonthOverMonth.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ResourceGroupCarbonEmissionItemDetailData IJsonModel<ResourceGroupCarbonEmissionItemDetailData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceGroupCarbonEmissionItemDetailData)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResourceGroupCarbonEmissionItemDetailData(document.RootElement, options);
        }

        internal static ResourceGroupCarbonEmissionItemDetailData DeserializeResourceGroupCarbonEmissionItemDetailData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string itemName = default;
            string groupName = default;
            CategoryTypeEnum categoryType = default;
            string subscriptionId = default;
            string dataType = default;
            double totalCarbonEmission = default;
            double totalCarbonEmissionLastMonth = default;
            double changeRatioForLastMonth = default;
            double totalCarbonEmission12MonthsAgo = default;
            double changeRatioFor12Months = default;
            double? changeValueMonthOverMonth = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("itemName"u8))
                {
                    itemName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupName"u8))
                {
                    groupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("categoryType"u8))
                {
                    categoryType = new CategoryTypeEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataType"u8))
                {
                    dataType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalCarbonEmission"u8))
                {
                    totalCarbonEmission = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalCarbonEmissionLastMonth"u8))
                {
                    totalCarbonEmissionLastMonth = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("changeRatioForLastMonth"u8))
                {
                    changeRatioForLastMonth = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalCarbonEmission12MonthsAgo"u8))
                {
                    totalCarbonEmission12MonthsAgo = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("changeRatioFor12Months"u8))
                {
                    changeRatioFor12Months = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("changeValueMonthOverMonth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    changeValueMonthOverMonth = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ResourceGroupCarbonEmissionItemDetailData(
                dataType,
                totalCarbonEmission,
                totalCarbonEmissionLastMonth,
                changeRatioForLastMonth,
                totalCarbonEmission12MonthsAgo,
                changeRatioFor12Months,
                changeValueMonthOverMonth,
                serializedAdditionalRawData,
                itemName,
                groupName,
                categoryType,
                subscriptionId);
        }

        BinaryData IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ResourceGroupCarbonEmissionItemDetailData)} does not support writing '{options.Format}' format.");
            }
        }

        ResourceGroupCarbonEmissionItemDetailData IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeResourceGroupCarbonEmissionItemDetailData(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResourceGroupCarbonEmissionItemDetailData)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResourceGroupCarbonEmissionItemDetailData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
