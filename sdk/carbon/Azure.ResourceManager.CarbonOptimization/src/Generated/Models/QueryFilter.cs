// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary>
    /// Query filter parameter specified by users
    /// Please note <see cref="QueryFilter"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="ItemDetailsQueryFilter"/>, <see cref="MonthlySummaryReportQueryFilter"/>, <see cref="OverallSummaryReportQueryFilter"/>, <see cref="TopItemsMonthlySummaryReportQueryFilter"/> and <see cref="TopItemsSummaryReportQueryFilter"/>.
    /// </summary>
    public abstract partial class QueryFilter
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="QueryFilter"/>. </summary>
        /// <param name="dateRange"> The start date and end date for carbon emissions data. </param>
        /// <param name="subscriptionList"> SubscriptionId list for carbon emissions data. </param>
        /// <param name="carbonScopeList"> Carbon emission scope for carbon emissions data. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dateRange"/>, <paramref name="subscriptionList"/> or <paramref name="carbonScopeList"/> is null. </exception>
        protected QueryFilter(DateRange dateRange, IEnumerable<string> subscriptionList, IEnumerable<EmissionScopeEnum> carbonScopeList)
        {
            Argument.AssertNotNull(dateRange, nameof(dateRange));
            Argument.AssertNotNull(subscriptionList, nameof(subscriptionList));
            Argument.AssertNotNull(carbonScopeList, nameof(carbonScopeList));

            DateRange = dateRange;
            SubscriptionList = subscriptionList.ToList();
            ResourceGroupUrlList = new ChangeTrackingList<string>();
            ResourceTypeList = new ChangeTrackingList<string>();
            LocationList = new ChangeTrackingList<string>();
            CarbonScopeList = carbonScopeList.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="QueryFilter"/>. </summary>
        /// <param name="reportType"> Report type. </param>
        /// <param name="dateRange"> The start date and end date for carbon emissions data. </param>
        /// <param name="subscriptionList"> SubscriptionId list for carbon emissions data. </param>
        /// <param name="resourceGroupUrlList"> resourceGroupUrl list for carbon emissions data. </param>
        /// <param name="resourceTypeList"> resource type list for carbon emissions data. </param>
        /// <param name="locationList"> Location list for carbon emissions data. </param>
        /// <param name="carbonScopeList"> Carbon emission scope for carbon emissions data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal QueryFilter(string reportType, DateRange dateRange, IList<string> subscriptionList, IList<string> resourceGroupUrlList, IList<string> resourceTypeList, IList<string> locationList, IList<EmissionScopeEnum> carbonScopeList, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ReportType = reportType;
            DateRange = dateRange;
            SubscriptionList = subscriptionList;
            ResourceGroupUrlList = resourceGroupUrlList;
            ResourceTypeList = resourceTypeList;
            LocationList = locationList;
            CarbonScopeList = carbonScopeList;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="QueryFilter"/> for deserialization. </summary>
        internal QueryFilter()
        {
        }

        /// <summary> Report type. </summary>
        internal string ReportType { get; set; }
        /// <summary> The start date and end date for carbon emissions data. </summary>
        public DateRange DateRange { get; }
        /// <summary> SubscriptionId list for carbon emissions data. </summary>
        public IList<string> SubscriptionList { get; }
        /// <summary> resourceGroupUrl list for carbon emissions data. </summary>
        public IList<string> ResourceGroupUrlList { get; }
        /// <summary> resource type list for carbon emissions data. </summary>
        public IList<string> ResourceTypeList { get; }
        /// <summary> Location list for carbon emissions data. </summary>
        public IList<string> LocationList { get; }
        /// <summary> Carbon emission scope for carbon emissions data. </summary>
        public IList<EmissionScopeEnum> CarbonScopeList { get; }
    }
}
