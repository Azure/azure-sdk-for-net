// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    internal partial class UnknownQueryFilter : IUtf8JsonSerializable, IJsonModel<QueryFilter>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<QueryFilter>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<QueryFilter>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<QueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(QueryFilter)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("reportType"u8);
            writer.WriteStringValue(ReportType);
            writer.WritePropertyName("dateRange"u8);
            writer.WriteObjectValue(DateRange);
            writer.WritePropertyName("subscriptionList"u8);
            writer.WriteStartArray();
            foreach (var item in SubscriptionList)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (!(ResourceGroupUrlList is ChangeTrackingList<string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("resourceGroupUrlList"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceGroupUrlList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ResourceTypeList is ChangeTrackingList<string> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("resourceTypeList"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceTypeList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(LocationList is ChangeTrackingList<string> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("locationList"u8);
                writer.WriteStartArray();
                foreach (var item in LocationList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("carbonScopeList"u8);
            writer.WriteStartArray();
            foreach (var item in CarbonScopeList)
            {
                writer.WriteStringValue(item.ToString());
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        QueryFilter IJsonModel<QueryFilter>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<QueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(QueryFilter)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeQueryFilter(document.RootElement, options);
        }

        internal static UnknownQueryFilter DeserializeUnknownQueryFilter(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string reportType = "Unknown";
            DateRange dateRange = default;
            IList<string> subscriptionList = default;
            IList<string> resourceGroupUrlList = default;
            IList<string> resourceTypeList = default;
            IList<string> locationList = default;
            IList<EmissionScopeEnum> carbonScopeList = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("reportType"u8))
                {
                    reportType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dateRange"u8))
                {
                    dateRange = DateRange.DeserializeDateRange(property.Value, options);
                    continue;
                }
                if (property.NameEquals("subscriptionList"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subscriptionList = array;
                    continue;
                }
                if (property.NameEquals("resourceGroupUrlList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resourceGroupUrlList = array;
                    continue;
                }
                if (property.NameEquals("resourceTypeList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resourceTypeList = array;
                    continue;
                }
                if (property.NameEquals("locationList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    locationList = array;
                    continue;
                }
                if (property.NameEquals("carbonScopeList"u8))
                {
                    List<EmissionScopeEnum> array = new List<EmissionScopeEnum>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new EmissionScopeEnum(item.GetString()));
                    }
                    carbonScopeList = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new UnknownQueryFilter(reportType, dateRange, subscriptionList, resourceGroupUrlList ?? new ChangeTrackingList<string>(), resourceTypeList ?? new ChangeTrackingList<string>(), locationList ?? new ChangeTrackingList<string>(), carbonScopeList, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<QueryFilter>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<QueryFilter>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(QueryFilter)} does not support '{options.Format}' format.");
            }
        }

        QueryFilter IPersistableModel<QueryFilter>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<QueryFilter>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeQueryFilter(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(QueryFilter)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<QueryFilter>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
