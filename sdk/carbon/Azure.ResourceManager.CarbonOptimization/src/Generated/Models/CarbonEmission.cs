// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary>
    /// The basic response for different query report, all query report result will have these information
    /// Please note this is the abstract base class. The derived classes available for instantiation are: <see cref="CarbonEmissionOverallSummary"/>, <see cref="CarbonEmissionMonthlySummary"/>, <see cref="CarbonEmissionTopItemsSummary"/>, <see cref="ResourceCarbonEmissionTopItemsSummary"/>, <see cref="ResourceGroupCarbonEmissionTopItemsSummary"/>, <see cref="CarbonEmissionTopItemMonthlySummary"/>, <see cref="ResourceCarbonEmissionTopItemMonthlySummary"/>, <see cref="ResourceGroupCarbonEmissionTopItemMonthlySummary"/>, <see cref="CarbonEmissionItemDetail"/>, <see cref="ResourceCarbonEmissionItemDetail"/>, and <see cref="ResourceGroupCarbonEmissionItemDetail"/>.
    /// </summary>
    public abstract partial class CarbonEmission
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="CarbonEmission"/>. </summary>
        /// <param name="dataType"> The data type of the query result, indicating the format of the returned response. </param>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        private protected CarbonEmission(CarbonEmissionDataType dataType, double latestMonthEmissions, double previousMonthEmissions)
        {
            DataType = dataType;
            LatestMonthEmissions = latestMonthEmissions;
            PreviousMonthEmissions = previousMonthEmissions;
        }

        /// <summary> Initializes a new instance of <see cref="CarbonEmission"/>. </summary>
        /// <param name="dataType"> The data type of the query result, indicating the format of the returned response. </param>
        /// <param name="latestMonthEmissions"> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </param>
        /// <param name="previousMonthEmissions"> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </param>
        /// <param name="monthOverMonthEmissionsChangeRatio"> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </param>
        /// <param name="monthlyEmissionsChangeValue"> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal CarbonEmission(CarbonEmissionDataType dataType, double latestMonthEmissions, double previousMonthEmissions, double? monthOverMonthEmissionsChangeRatio, double? monthlyEmissionsChangeValue, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            DataType = dataType;
            LatestMonthEmissions = latestMonthEmissions;
            PreviousMonthEmissions = previousMonthEmissions;
            MonthOverMonthEmissionsChangeRatio = monthOverMonthEmissionsChangeRatio;
            MonthlyEmissionsChangeValue = monthlyEmissionsChangeValue;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The data type of the query result, indicating the format of the returned response. </summary>
        internal CarbonEmissionDataType DataType { get; set; }

        /// <summary> Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over the specified date range (e.g., March-June). </summary>
        public double LatestMonthEmissions { get; }

        /// <summary> Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value is measured in kgCO2E. </summary>
        public double PreviousMonthEmissions { get; }

        /// <summary> The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions - previousMonthEmissions) / previousMonthEmissions. </summary>
        public double? MonthOverMonthEmissionsChangeRatio { get; }

        /// <summary> The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions. </summary>
        public double? MonthlyEmissionsChangeValue { get; }
    }
}
