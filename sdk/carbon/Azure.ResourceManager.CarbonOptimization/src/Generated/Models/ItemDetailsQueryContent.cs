// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Query Parameters for Detailed carbon emissions by pageSize. </summary>
    public partial class ItemDetailsQueryContent : CarbonEmissionQueryContent
    {
        /// <summary> Initializes a new instance of <see cref="ItemDetailsQueryContent"/>. </summary>
        /// <param name="dateRange"> The start date and end date for carbon emissions data. </param>
        /// <param name="subscriptionList"> SubscriptionId list for carbon emissions data. </param>
        /// <param name="carbonScopeList"> Carbon emission scope for carbon emissions data. </param>
        /// <param name="categoryType"> Item Category type. </param>
        /// <param name="orderBy"> Order by column name. </param>
        /// <param name="sortDirection"> Direction for sorting. </param>
        /// <param name="groupCategory"> Group category name. </param>
        /// <param name="pageSize"> Number of items to return. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dateRange"/>, <paramref name="subscriptionList"/>, <paramref name="carbonScopeList"/>, <paramref name="orderBy"/>, <paramref name="sortDirection"/> or <paramref name="groupCategory"/> is null. </exception>
        public ItemDetailsQueryContent(CarbonEmissionQueryDateRange dateRange, IEnumerable<string> subscriptionList, IEnumerable<CarbonEmissionQueryScope> carbonScopeList, CarbonEmissionCategoryType categoryType, string orderBy, string sortDirection, string groupCategory, int pageSize) : base(dateRange, subscriptionList, carbonScopeList)
        {
            Argument.AssertNotNull(dateRange, nameof(dateRange));
            Argument.AssertNotNull(subscriptionList, nameof(subscriptionList));
            Argument.AssertNotNull(carbonScopeList, nameof(carbonScopeList));
            Argument.AssertNotNull(orderBy, nameof(orderBy));
            Argument.AssertNotNull(sortDirection, nameof(sortDirection));
            Argument.AssertNotNull(groupCategory, nameof(groupCategory));

            CategoryType = categoryType;
            OrderBy = orderBy;
            SortDirection = sortDirection;
            GroupCategory = groupCategory;
            PageSize = pageSize;
            ReportType = "ItemDetailsReport";
        }

        /// <summary> Initializes a new instance of <see cref="ItemDetailsQueryContent"/>. </summary>
        /// <param name="reportType"> Report type. </param>
        /// <param name="dateRange"> The start date and end date for carbon emissions data. </param>
        /// <param name="subscriptionList"> SubscriptionId list for carbon emissions data. </param>
        /// <param name="resourceGroupUrlList"> resourceGroupUrl list for carbon emissions data. </param>
        /// <param name="resourceTypeList"> resource type list for carbon emissions data. </param>
        /// <param name="locationList"> Location list for carbon emissions data. </param>
        /// <param name="carbonScopeList"> Carbon emission scope for carbon emissions data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="categoryType"> Item Category type. </param>
        /// <param name="orderBy"> Order by column name. </param>
        /// <param name="sortDirection"> Direction for sorting. </param>
        /// <param name="groupCategory"> Group category name. </param>
        /// <param name="pageSize"> Number of items to return. </param>
        /// <param name="skipToken"> The number of result items to skip. </param>
        internal ItemDetailsQueryContent(string reportType, CarbonEmissionQueryDateRange dateRange, IList<string> subscriptionList, IList<string> resourceGroupUrlList, IList<string> resourceTypeList, IList<string> locationList, IList<CarbonEmissionQueryScope> carbonScopeList, IDictionary<string, BinaryData> serializedAdditionalRawData, CarbonEmissionCategoryType categoryType, string orderBy, string sortDirection, string groupCategory, int pageSize, string skipToken) : base(reportType, dateRange, subscriptionList, resourceGroupUrlList, resourceTypeList, locationList, carbonScopeList, serializedAdditionalRawData)
        {
            CategoryType = categoryType;
            OrderBy = orderBy;
            SortDirection = sortDirection;
            GroupCategory = groupCategory;
            PageSize = pageSize;
            SkipToken = skipToken;
            ReportType = reportType ?? "ItemDetailsReport";
        }

        /// <summary> Initializes a new instance of <see cref="ItemDetailsQueryContent"/> for deserialization. </summary>
        internal ItemDetailsQueryContent()
        {
        }

        /// <summary> Item Category type. </summary>
        public CarbonEmissionCategoryType CategoryType { get; }
        /// <summary> Order by column name. </summary>
        public string OrderBy { get; }
        /// <summary> Direction for sorting. </summary>
        public string SortDirection { get; }
        /// <summary> Group category name. </summary>
        public string GroupCategory { get; }
        /// <summary> Number of items to return. </summary>
        public int PageSize { get; }
        /// <summary> The number of result items to skip. </summary>
        public string SkipToken { get; set; }
    }
}
