// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    public partial class ItemDetailsQueryFilter : IUtf8JsonSerializable, IJsonModel<ItemDetailsQueryFilter>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ItemDetailsQueryFilter>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ItemDetailsQueryFilter>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemDetailsQueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemDetailsQueryFilter)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("categoryType"u8);
            writer.WriteStringValue(CategoryType.ToString());
            writer.WritePropertyName("orderBy"u8);
            writer.WriteStringValue(OrderBy.ToString());
            writer.WritePropertyName("sortDirection"u8);
            writer.WriteStringValue(SortDirection.ToString());
            writer.WritePropertyName("pageSize"u8);
            writer.WriteNumberValue(PageSize);
            if (Optional.IsDefined(SkipToken))
            {
                writer.WritePropertyName("skipToken"u8);
                writer.WriteStringValue(SkipToken);
            }
        }

        ItemDetailsQueryFilter IJsonModel<ItemDetailsQueryFilter>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemDetailsQueryFilter>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ItemDetailsQueryFilter)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeItemDetailsQueryFilter(document.RootElement, options);
        }

        internal static ItemDetailsQueryFilter DeserializeItemDetailsQueryFilter(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CarbonEmissionCategoryType categoryType = default;
            CarbonEmissionQueryOrderByColumn orderBy = default;
            CarbonEmissionQuerySortDirection sortDirection = default;
            int pageSize = default;
            string skipToken = default;
            CarbonEmissionQueryReportType reportType = default;
            CarbonEmissionQueryDateRange dateRange = default;
            IList<string> subscriptionList = default;
            IList<string> resourceGroupUrlList = default;
            IList<ResourceType> resourceTypeList = default;
            IList<AzureLocation> locationList = default;
            IList<CarbonEmissionScope> carbonScopeList = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("categoryType"u8))
                {
                    categoryType = new CarbonEmissionCategoryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("orderBy"u8))
                {
                    orderBy = new CarbonEmissionQueryOrderByColumn(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sortDirection"u8))
                {
                    sortDirection = new CarbonEmissionQuerySortDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("pageSize"u8))
                {
                    pageSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("skipToken"u8))
                {
                    skipToken = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reportType"u8))
                {
                    reportType = new CarbonEmissionQueryReportType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dateRange"u8))
                {
                    dateRange = CarbonEmissionQueryDateRange.DeserializeCarbonEmissionQueryDateRange(property.Value, options);
                    continue;
                }
                if (property.NameEquals("subscriptionList"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    subscriptionList = array;
                    continue;
                }
                if (property.NameEquals("resourceGroupUrlList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resourceGroupUrlList = array;
                    continue;
                }
                if (property.NameEquals("resourceTypeList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceType> array = new List<ResourceType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ResourceType(item.GetString()));
                    }
                    resourceTypeList = array;
                    continue;
                }
                if (property.NameEquals("locationList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureLocation> array = new List<AzureLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureLocation(item.GetString()));
                    }
                    locationList = array;
                    continue;
                }
                if (property.NameEquals("carbonScopeList"u8))
                {
                    List<CarbonEmissionScope> array = new List<CarbonEmissionScope>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new CarbonEmissionScope(item.GetString()));
                    }
                    carbonScopeList = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ItemDetailsQueryFilter(
                reportType,
                dateRange,
                subscriptionList,
                resourceGroupUrlList ?? new ChangeTrackingList<string>(),
                resourceTypeList ?? new ChangeTrackingList<ResourceType>(),
                locationList ?? new ChangeTrackingList<AzureLocation>(),
                carbonScopeList,
                serializedAdditionalRawData,
                categoryType,
                orderBy,
                sortDirection,
                pageSize,
                skipToken);
        }

        BinaryData IPersistableModel<ItemDetailsQueryFilter>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemDetailsQueryFilter>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCarbonOptimizationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ItemDetailsQueryFilter)} does not support writing '{options.Format}' format.");
            }
        }

        ItemDetailsQueryFilter IPersistableModel<ItemDetailsQueryFilter>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ItemDetailsQueryFilter>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeItemDetailsQueryFilter(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ItemDetailsQueryFilter)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ItemDetailsQueryFilter>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
