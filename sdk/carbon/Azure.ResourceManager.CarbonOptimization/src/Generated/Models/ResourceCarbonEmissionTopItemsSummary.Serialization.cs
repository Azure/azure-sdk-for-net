// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.CarbonOptimization;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Response for Top Items For Resource Category. </summary>
    public partial class ResourceCarbonEmissionTopItemsSummary : IJsonModel<ResourceCarbonEmissionTopItemsSummary>
    {
        /// <summary> Initializes a new instance of <see cref="ResourceCarbonEmissionTopItemsSummary"/> for deserialization. </summary>
        internal ResourceCarbonEmissionTopItemsSummary()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<ResourceCarbonEmissionTopItemsSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemsSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemsSummary)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("itemName"u8);
            writer.WriteStringValue(ItemName);
            writer.WritePropertyName("categoryType"u8);
            writer.WriteStringValue(CategoryType.ToString());
            writer.WritePropertyName("subscriptionId"u8);
            writer.WriteStringValue(SubscriptionId);
            writer.WritePropertyName("resourceGroup"u8);
            writer.WriteStringValue(ResourceGroup);
            writer.WritePropertyName("resourceId"u8);
            writer.WriteStringValue(ResourceId);
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ResourceCarbonEmissionTopItemsSummary IJsonModel<ResourceCarbonEmissionTopItemsSummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (ResourceCarbonEmissionTopItemsSummary)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override CarbonEmission JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemsSummary>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemsSummary)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResourceCarbonEmissionTopItemsSummary(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static ResourceCarbonEmissionTopItemsSummary DeserializeResourceCarbonEmissionTopItemsSummary(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CarbonEmissionDataType dataType = default;
            double latestMonthEmissions = default;
            double previousMonthEmissions = default;
            double? monthOverMonthEmissionsChangeRatio = default;
            double? monthlyEmissionsChangeValue = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            string itemName = default;
            CarbonEmissionCategoryType categoryType = default;
            string subscriptionId = default;
            string resourceGroup = default;
            ResourceIdentifier resourceId = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("dataType"u8))
                {
                    dataType = new CarbonEmissionDataType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("latestMonthEmissions"u8))
                {
                    latestMonthEmissions = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("previousMonthEmissions"u8))
                {
                    previousMonthEmissions = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("monthOverMonthEmissionsChangeRatio"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthOverMonthEmissionsChangeRatio = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("monthlyEmissionsChangeValue"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    monthlyEmissionsChangeValue = prop.Value.GetDouble();
                    continue;
                }
                if (prop.NameEquals("itemName"u8))
                {
                    itemName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("categoryType"u8))
                {
                    categoryType = new CarbonEmissionCategoryType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceGroup"u8))
                {
                    resourceGroup = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceId"u8))
                {
                    resourceId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new ResourceCarbonEmissionTopItemsSummary(
                dataType,
                latestMonthEmissions,
                previousMonthEmissions,
                monthOverMonthEmissionsChangeRatio,
                monthlyEmissionsChangeValue,
                additionalBinaryDataProperties,
                itemName,
                categoryType,
                subscriptionId,
                resourceGroup,
                resourceId);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<ResourceCarbonEmissionTopItemsSummary>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemsSummary>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCarbonOptimizationContext.Default);
                default:
                    throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemsSummary)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        ResourceCarbonEmissionTopItemsSummary IPersistableModel<ResourceCarbonEmissionTopItemsSummary>.Create(BinaryData data, ModelReaderWriterOptions options) => (ResourceCarbonEmissionTopItemsSummary)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override CarbonEmission PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<ResourceCarbonEmissionTopItemsSummary>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeResourceCarbonEmissionTopItemsSummary(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResourceCarbonEmissionTopItemsSummary)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<ResourceCarbonEmissionTopItemsSummary>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
