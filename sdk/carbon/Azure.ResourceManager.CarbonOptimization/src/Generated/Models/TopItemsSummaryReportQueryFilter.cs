// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Query Parameters for Top Items Carbon Emission by Category Type. </summary>
    public partial class TopItemsSummaryReportQueryFilter : QueryFilter
    {
        /// <summary> Initializes a new instance of <see cref="TopItemsSummaryReportQueryFilter"/>. </summary>
        /// <param name="dateRange"> The start date and end date for carbon emissions data. </param>
        /// <param name="subscriptionList"> SubscriptionId list for carbon emissions data. </param>
        /// <param name="carbonScopeList"> Carbon emission scope for carbon emissions data. </param>
        /// <param name="categoryType"> Item Category type. </param>
        /// <param name="topItems"> Number of top items to return. The value should be between 5 and 100. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dateRange"/>, <paramref name="subscriptionList"/> or <paramref name="carbonScopeList"/> is null. </exception>
        public TopItemsSummaryReportQueryFilter(DateRange dateRange, IEnumerable<string> subscriptionList, IEnumerable<EmissionScopeEnum> carbonScopeList, CategoryTypeEnum categoryType, int topItems) : base(dateRange, subscriptionList, carbonScopeList)
        {
            if (dateRange == null)
            {
                throw new ArgumentNullException(nameof(dateRange));
            }
            if (subscriptionList == null)
            {
                throw new ArgumentNullException(nameof(subscriptionList));
            }
            if (carbonScopeList == null)
            {
                throw new ArgumentNullException(nameof(carbonScopeList));
            }

            CategoryType = categoryType;
            TopItems = topItems;
            ReportType = "TopItemsSummaryReport";
        }

        /// <summary> Initializes a new instance of <see cref="TopItemsSummaryReportQueryFilter"/>. </summary>
        /// <param name="reportType"> Report type. </param>
        /// <param name="dateRange"> The start date and end date for carbon emissions data. </param>
        /// <param name="subscriptionList"> SubscriptionId list for carbon emissions data. </param>
        /// <param name="resourceGroupUrlList"> resourceGroupUrl list for carbon emissions data. </param>
        /// <param name="resourceTypeList"> resource type list for carbon emissions data. </param>
        /// <param name="locationList"> Location list for carbon emissions data. </param>
        /// <param name="carbonScopeList"> Carbon emission scope for carbon emissions data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="categoryType"> Item Category type. </param>
        /// <param name="topItems"> Number of top items to return. The value should be between 5 and 100. </param>
        internal TopItemsSummaryReportQueryFilter(string reportType, DateRange dateRange, IList<string> subscriptionList, IList<string> resourceGroupUrlList, IList<string> resourceTypeList, IList<string> locationList, IList<EmissionScopeEnum> carbonScopeList, IDictionary<string, BinaryData> serializedAdditionalRawData, CategoryTypeEnum categoryType, int topItems) : base(reportType, dateRange, subscriptionList, resourceGroupUrlList, resourceTypeList, locationList, carbonScopeList, serializedAdditionalRawData)
        {
            CategoryType = categoryType;
            TopItems = topItems;
            ReportType = reportType ?? "TopItemsSummaryReport";
        }

        /// <summary> Initializes a new instance of <see cref="TopItemsSummaryReportQueryFilter"/> for deserialization. </summary>
        internal TopItemsSummaryReportQueryFilter()
        {
        }

        /// <summary> Item Category type. </summary>
        public CategoryTypeEnum CategoryType { get; }
        /// <summary> Number of top items to return. The value should be between 5 and 100. </summary>
        public int TopItems { get; }
    }
}
