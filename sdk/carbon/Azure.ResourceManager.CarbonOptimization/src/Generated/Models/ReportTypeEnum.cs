// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CarbonOptimization.Models
{
    /// <summary> Enum for Report Type, specifying different report formats for carbon emissions data. Each report type returns different aggregations of carbon emissions across various categories, date range, emissions scope, and other parameters. </summary>
    internal readonly partial struct ReportTypeEnum : IEquatable<ReportTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReportTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReportTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OverallSummaryReportValue = "OverallSummaryReport";
        private const string MonthlySummaryReportValue = "MonthlySummaryReport";
        private const string TopItemsSummaryReportValue = "TopItemsSummaryReport";
        private const string TopItemsMonthlySummaryReportValue = "TopItemsMonthlySummaryReport";
        private const string ItemDetailsReportValue = "ItemDetailsReport";

        /// <summary> Overall summary report provides total carbon emissions for the specified date range and query parameters, as well as comparative values for a high-level overview. This report type can accept different values in the start and end fields within DateRange (e.g., start: 2024-03-01 and end: 2024-06-01). </summary>
        public static ReportTypeEnum OverallSummaryReport { get; } = new ReportTypeEnum(OverallSummaryReportValue);
        /// <summary> MonthlySummaryReport provides carbon emissions data by month for the specified query parameters. This report type can accept different values in the start and end fields within DateRange (e.g., start: 2024-03-01 and end: 2024-06-01). </summary>
        public static ReportTypeEnum MonthlySummaryReport { get; } = new ReportTypeEnum(MonthlySummaryReportValue);
        /// <summary> TopItemsSummaryReport provides the N highest-emitting items for the specified query filters. This report returns data for a single month at a time, so it requires the same values for the start and end fields within DateRange. A maximum of N=10 items can be returned at a time. </summary>
        public static ReportTypeEnum TopItemsSummaryReport { get; } = new ReportTypeEnum(TopItemsSummaryReportValue);
        /// <summary> TopItemsMonthlyReport provides the N highest-emitting items by month for the specified query filter. Returns emissions data for the top N items by month within the given date range. A maximum of N=10 items can be returned at a time. </summary>
        public static ReportTypeEnum TopItemsMonthlySummaryReport { get; } = new ReportTypeEnum(TopItemsMonthlySummaryReportValue);
        /// <summary> ItemDetailsReport provides a granular list of items based on the specified CategoryType (e.g., Resource, ResourceGroup, ResourceType, Location, or Subscription) for the query filter. This report can be queried for only one month at a time, requiring the same values in the start and end fields within DateRange. </summary>
        public static ReportTypeEnum ItemDetailsReport { get; } = new ReportTypeEnum(ItemDetailsReportValue);
        /// <summary> Determines if two <see cref="ReportTypeEnum"/> values are the same. </summary>
        public static bool operator ==(ReportTypeEnum left, ReportTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReportTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(ReportTypeEnum left, ReportTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ReportTypeEnum"/>. </summary>
        public static implicit operator ReportTypeEnum(string value) => new ReportTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReportTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReportTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
