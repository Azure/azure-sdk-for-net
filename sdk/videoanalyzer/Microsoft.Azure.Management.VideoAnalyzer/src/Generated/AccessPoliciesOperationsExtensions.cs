// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccessPoliciesOperations.
    /// </summary>
    public static partial class AccessPoliciesOperationsExtensions
    {
            /// <summary>
            /// List access policy resources.
            /// </summary>
            /// <remarks>
            /// List all existing access policy resources for the specified account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='top'>
            /// Specifies a non-negative integer n that limits the number of items returned
            /// from a collection. The service returns the number of available items up to
            /// but not greater than the specified value n.
            /// </param>
            public static IPage<AccessPolicyEntity> List(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, int? top = default(int?))
            {
                return operations.ListAsync(resourceGroupName, accountName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List access policy resources.
            /// </summary>
            /// <remarks>
            /// List all existing access policy resources for the specified account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='top'>
            /// Specifies a non-negative integer n that limits the number of items returned
            /// from a collection. The service returns the number of available items up to
            /// but not greater than the specified value n.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessPolicyEntity>> ListAsync(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves an access policy resource.
            /// </summary>
            /// <remarks>
            /// Retrieves an existing access policy resource from an account by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to retrieve.
            /// </param>
            public static AccessPolicyEntity Get(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName)
            {
                return operations.GetAsync(resourceGroupName, accountName, accessPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves an access policy resource.
            /// </summary>
            /// <remarks>
            /// Retrieves an existing access policy resource from an account by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessPolicyEntity> GetAsync(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, accessPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an access policy.
            /// </summary>
            /// <remarks>
            /// Creates a new access policy resource or updates an existing one.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to create or update.
            /// </param>
            /// <param name='role'>
            /// Defines the access level granted by this policy. Possible values include:
            /// 'Reader'
            /// </param>
            /// <param name='authentication'>
            /// Authentication method to be used when validating client API access.
            /// </param>
            public static AccessPolicyEntity CreateOrUpdate(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName, AccessPolicyRole? role = default(AccessPolicyRole?), AuthenticationBase authentication = default(AuthenticationBase))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, accessPolicyName, role, authentication).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an access policy.
            /// </summary>
            /// <remarks>
            /// Creates a new access policy resource or updates an existing one.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to create or update.
            /// </param>
            /// <param name='role'>
            /// Defines the access level granted by this policy. Possible values include:
            /// 'Reader'
            /// </param>
            /// <param name='authentication'>
            /// Authentication method to be used when validating client API access.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessPolicyEntity> CreateOrUpdateAsync(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName, AccessPolicyRole? role = default(AccessPolicyRole?), AuthenticationBase authentication = default(AuthenticationBase), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, accessPolicyName, role, authentication, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an access policy.
            /// </summary>
            /// <remarks>
            /// Deletes an existing access policy resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to delete.
            /// </param>
            public static void Delete(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, accessPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an access policy.
            /// </summary>
            /// <remarks>
            /// Deletes an existing access policy resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, accessPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an existing access policy.
            /// </summary>
            /// <remarks>
            /// Updates individual properties of an existing access policy resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to update.
            /// </param>
            /// <param name='role'>
            /// Defines the access level granted by this policy. Possible values include:
            /// 'Reader'
            /// </param>
            /// <param name='authentication'>
            /// Authentication method to be used when validating client API access.
            /// </param>
            public static AccessPolicyEntity Update(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName, AccessPolicyRole? role = default(AccessPolicyRole?), AuthenticationBase authentication = default(AuthenticationBase))
            {
                return operations.UpdateAsync(resourceGroupName, accountName, accessPolicyName, role, authentication).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing access policy.
            /// </summary>
            /// <remarks>
            /// Updates individual properties of an existing access policy resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The Azure Video Analyzer account name.
            /// </param>
            /// <param name='accessPolicyName'>
            /// The name of the access policy to update.
            /// </param>
            /// <param name='role'>
            /// Defines the access level granted by this policy. Possible values include:
            /// 'Reader'
            /// </param>
            /// <param name='authentication'>
            /// Authentication method to be used when validating client API access.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessPolicyEntity> UpdateAsync(this IAccessPoliciesOperations operations, string resourceGroupName, string accountName, string accessPolicyName, AccessPolicyRole? role = default(AccessPolicyRole?), AuthenticationBase authentication = default(AuthenticationBase), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, accessPolicyName, role, authentication, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List access policy resources.
            /// </summary>
            /// <remarks>
            /// List all existing access policy resources for the specified account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AccessPolicyEntity> ListNext(this IAccessPoliciesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List access policy resources.
            /// </summary>
            /// <remarks>
            /// List all existing access policy resources for the specified account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessPolicyEntity>> ListNextAsync(this IAccessPoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
