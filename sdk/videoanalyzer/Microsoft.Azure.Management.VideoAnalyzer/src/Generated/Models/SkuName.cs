// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for SkuName.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(SkuNameConverter))]
    public struct SkuName : System.IEquatable<SkuName>
    {
        private SkuName(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Represents the Live S1 SKU name. Using this SKU you can create live
        /// pipelines to capture, record, and stream live video from
        /// RTSP-capable cameras at bitrate settings from 0.5 Kbps to 3000
        /// Kbps.
        /// </summary>
        public static readonly SkuName LiveS1 = "Live_S1";

        /// <summary>
        /// Represents the Batch S1 SKU name. Using this SKU you can create
        /// pipeline jobs to process recorded content.
        /// </summary>
        public static readonly SkuName BatchS1 = "Batch_S1";


        /// <summary>
        /// Underlying value of enum SkuName
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for SkuName
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type SkuName
        /// </summary>
        public bool Equals(SkuName e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to SkuName
        /// </summary>
        public static implicit operator SkuName(string value)
        {
            return new SkuName(value);
        }

        /// <summary>
        /// Implicit operator to convert SkuName to string
        /// </summary>
        public static implicit operator string(SkuName e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum SkuName
        /// </summary>
        public static bool operator == (SkuName e1, SkuName e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum SkuName
        /// </summary>
        public static bool operator != (SkuName e1, SkuName e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for SkuName
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is SkuName && Equals((SkuName)obj);
        }

        /// <summary>
        /// Returns for hashCode SkuName
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
