// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A custom preset for encoding video with the H.264 (AVC) codec.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.VideoEncoderH264")]
    public partial class VideoEncoderH264 : VideoEncoderBase
    {
        /// <summary>
        /// Initializes a new instance of the VideoEncoderH264 class.
        /// </summary>
        public VideoEncoderH264()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VideoEncoderH264 class.
        /// </summary>
        /// <param name="bitrateKbps">The maximum bitrate, in kilobits per
        /// second or Kbps, at which video should be encoded. If omitted,
        /// encoder sets it automatically to try and match the quality of the
        /// input video.</param>
        /// <param name="frameRate">The frame rate (in frames per second) of
        /// the encoded video. The value must be greater than zero, and less
        /// than or equal to 300. If omitted, the encoder uses the average
        /// frame rate of the input video.</param>
        /// <param name="scale">Describes the resolution of the encoded video.
        /// If omitted, the encoder uses the resolution of the input
        /// video.</param>
        public VideoEncoderH264(string bitrateKbps = default(string), string frameRate = default(string), VideoScale scale = default(VideoScale))
            : base(bitrateKbps, frameRate, scale)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

    }
}
