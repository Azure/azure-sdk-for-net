// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The managed identity for the Video Analyzer resource.
    /// </summary>
    public partial class VideoAnalyzerIdentity
    {
        /// <summary>
        /// Initializes a new instance of the VideoAnalyzerIdentity class.
        /// </summary>
        public VideoAnalyzerIdentity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VideoAnalyzerIdentity class.
        /// </summary>
        /// <param name="type">The identity type.</param>
        /// <param name="userAssignedIdentities">The User Assigned Managed
        /// Identities.</param>
        public VideoAnalyzerIdentity(string type, IDictionary<string, UserAssignedManagedIdentity> userAssignedIdentities = default(IDictionary<string, UserAssignedManagedIdentity>))
        {
            Type = type;
            UserAssignedIdentities = userAssignedIdentities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identity type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the User Assigned Managed Identities.
        /// </summary>
        [JsonProperty(PropertyName = "userAssignedIdentities")]
        public IDictionary<string, UserAssignedManagedIdentity> UserAssignedIdentities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
