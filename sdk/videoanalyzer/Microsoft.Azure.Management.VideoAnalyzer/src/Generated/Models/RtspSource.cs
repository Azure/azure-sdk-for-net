// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// RTSP source allows for media from an RTSP camera or generic RTSP server
    /// to be ingested into a pipeline.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.RtspSource")]
    public partial class RtspSource : SourceNodeBase
    {
        /// <summary>
        /// Initializes a new instance of the RtspSource class.
        /// </summary>
        public RtspSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RtspSource class.
        /// </summary>
        /// <param name="name">Node name. Must be unique within the
        /// topology.</param>
        /// <param name="endpoint">RTSP endpoint information for Video Analyzer
        /// to connect to. This contains the required information for Video
        /// Analyzer to connect to RTSP cameras and/or generic RTSP
        /// servers.</param>
        /// <param name="transport">Network transport utilized by the RTSP and
        /// RTP exchange: TCP or HTTP. When using TCP, the RTP packets are
        /// interleaved on the TCP RTSP connection. When using HTTP, the RTSP
        /// messages are exchanged through long lived HTTP connections, and the
        /// RTP packages are interleaved in the HTTP connections alongside the
        /// RTSP messages. Possible values include: 'Http', 'Tcp'</param>
        public RtspSource(string name, EndpointBase endpoint, RtspTransport? transport = default(RtspTransport?))
            : base(name)
        {
            Transport = transport;
            Endpoint = endpoint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets network transport utilized by the RTSP and RTP
        /// exchange: TCP or HTTP. When using TCP, the RTP packets are
        /// interleaved on the TCP RTSP connection. When using HTTP, the RTSP
        /// messages are exchanged through long lived HTTP connections, and the
        /// RTP packages are interleaved in the HTTP connections alongside the
        /// RTSP messages. Possible values include: 'Http', 'Tcp'
        /// </summary>
        [JsonProperty(PropertyName = "transport")]
        public RtspTransport? Transport { get; set; }

        /// <summary>
        /// Gets or sets RTSP endpoint information for Video Analyzer to
        /// connect to. This contains the required information for Video
        /// Analyzer to connect to RTSP cameras and/or generic RTSP servers.
        /// </summary>
        [JsonProperty(PropertyName = "endpoint")]
        public EndpointBase Endpoint { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Endpoint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Endpoint");
            }
            if (Endpoint != null)
            {
                Endpoint.Validate();
            }
        }
    }
}
