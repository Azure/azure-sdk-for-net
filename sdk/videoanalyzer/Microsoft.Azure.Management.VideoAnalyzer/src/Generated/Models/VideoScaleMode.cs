// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for VideoScaleMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(VideoScaleModeConverter))]
    public struct VideoScaleMode : System.IEquatable<VideoScaleMode>
    {
        private VideoScaleMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Pads the video with black horizontal stripes (letterbox) or black
        /// vertical stripes (pillar-box) so the video is resized to the
        /// specified dimensions while not altering the content aspect ratio.
        /// </summary>
        public static readonly VideoScaleMode Pad = "Pad";

        /// <summary>
        /// Preserves the same aspect ratio as the input video. If only one
        /// video dimension is provided, the second dimension is calculated
        /// based on the input video aspect ratio. When 2 dimensions are
        /// provided, the video is resized to fit the most constraining
        /// dimension, considering the input video size and aspect ratio.
        /// </summary>
        public static readonly VideoScaleMode PreserveAspectRatio = "PreserveAspectRatio";

        /// <summary>
        /// Stretches the original video so it resized to the specified
        /// dimensions.
        /// </summary>
        public static readonly VideoScaleMode Stretch = "Stretch";


        /// <summary>
        /// Underlying value of enum VideoScaleMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for VideoScaleMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type VideoScaleMode
        /// </summary>
        public bool Equals(VideoScaleMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to VideoScaleMode
        /// </summary>
        public static implicit operator VideoScaleMode(string value)
        {
            return new VideoScaleMode(value);
        }

        /// <summary>
        /// Implicit operator to convert VideoScaleMode to string
        /// </summary>
        public static implicit operator string(VideoScaleMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum VideoScaleMode
        /// </summary>
        public static bool operator == (VideoScaleMode e1, VideoScaleMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum VideoScaleMode
        /// </summary>
        public static bool operator != (VideoScaleMode e1, VideoScaleMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for VideoScaleMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is VideoScaleMode && Equals((VideoScaleMode)obj);
        }

        /// <summary>
        /// Returns for hashCode VideoScaleMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
