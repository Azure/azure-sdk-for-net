// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Video sink in a live topology allows for video and audio to be
    /// captured, optionally archived, and published via a video resource. If
    /// archiving is enabled, this results in a video of type 'archive'. If
    /// used in a batch topology, this allows for video and audio to be stored
    /// as a file, and published via a video resource of type 'file'
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.VideoSink")]
    public partial class VideoSink : SinkNodeBase
    {
        /// <summary>
        /// Initializes a new instance of the VideoSink class.
        /// </summary>
        public VideoSink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VideoSink class.
        /// </summary>
        /// <param name="name">Node name. Must be unique within the
        /// topology.</param>
        /// <param name="inputs">An array of upstream node references within
        /// the topology to be used as inputs for this node.</param>
        /// <param name="videoName">Name of a new or existing video resource
        /// used to capture and publish content. Note: if downstream of RTSP
        /// source, and if disableArchive is set to true, then no content is
        /// archived.</param>
        /// <param name="videoCreationProperties">Optional video properties to
        /// be used in case a new video resource needs to be created on the
        /// service.</param>
        /// <param name="videoPublishingOptions">Options to change how the
        /// video sink publishes content via the video resource. This property
        /// is only allowed for topologies where "kind" is set to
        /// "live".</param>
        public VideoSink(string name, IList<NodeInput> inputs, string videoName, VideoCreationProperties videoCreationProperties = default(VideoCreationProperties), VideoPublishingOptions videoPublishingOptions = default(VideoPublishingOptions))
            : base(name, inputs)
        {
            VideoName = videoName;
            VideoCreationProperties = videoCreationProperties;
            VideoPublishingOptions = videoPublishingOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of a new or existing video resource used to
        /// capture and publish content. Note: if downstream of RTSP source,
        /// and if disableArchive is set to true, then no content is archived.
        /// </summary>
        [JsonProperty(PropertyName = "videoName")]
        public string VideoName { get; set; }

        /// <summary>
        /// Gets or sets optional video properties to be used in case a new
        /// video resource needs to be created on the service.
        /// </summary>
        [JsonProperty(PropertyName = "videoCreationProperties")]
        public VideoCreationProperties VideoCreationProperties { get; set; }

        /// <summary>
        /// Gets or sets options to change how the video sink publishes content
        /// via the video resource. This property is only allowed for
        /// topologies where "kind" is set to "live".
        /// </summary>
        [JsonProperty(PropertyName = "videoPublishingOptions")]
        public VideoPublishingOptions VideoPublishingOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (VideoName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VideoName");
            }
        }
    }
}
