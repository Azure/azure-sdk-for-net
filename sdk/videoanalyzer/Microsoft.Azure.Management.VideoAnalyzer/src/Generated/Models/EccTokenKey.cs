// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Required validation properties for tokens generated with Elliptical
    /// Curve algorithm.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.EccTokenKey")]
    public partial class EccTokenKey : TokenKey
    {
        /// <summary>
        /// Initializes a new instance of the EccTokenKey class.
        /// </summary>
        public EccTokenKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EccTokenKey class.
        /// </summary>
        /// <param name="kid">JWT token key id. Validation keys are looked up
        /// based on the key id present on the JWT token header.</param>
        /// <param name="alg">Elliptical curve algorithm to be used: ES256,
        /// ES384 or ES512. Possible values include: 'ES256', 'ES384',
        /// 'ES512'</param>
        /// <param name="x">X coordinate.</param>
        /// <param name="y">Y coordinate.</param>
        public EccTokenKey(string kid, AccessPolicyEccAlgo alg, string x, string y)
            : base(kid)
        {
            Alg = alg;
            X = x;
            Y = y;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets elliptical curve algorithm to be used: ES256, ES384 or
        /// ES512. Possible values include: 'ES256', 'ES384', 'ES512'
        /// </summary>
        [JsonProperty(PropertyName = "alg")]
        public AccessPolicyEccAlgo Alg { get; set; }

        /// <summary>
        /// Gets or sets x coordinate.
        /// </summary>
        [JsonProperty(PropertyName = "x")]
        public string X { get; set; }

        /// <summary>
        /// Gets or sets y coordinate.
        /// </summary>
        [JsonProperty(PropertyName = "y")]
        public string Y { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (X == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "X");
            }
            if (Y == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Y");
            }
        }
    }
}
