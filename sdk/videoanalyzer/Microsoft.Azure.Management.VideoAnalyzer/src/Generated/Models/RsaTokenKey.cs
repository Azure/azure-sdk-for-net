// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Required validation properties for tokens generated with RSA algorithm.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.RsaTokenKey")]
    public partial class RsaTokenKey : TokenKey
    {
        /// <summary>
        /// Initializes a new instance of the RsaTokenKey class.
        /// </summary>
        public RsaTokenKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RsaTokenKey class.
        /// </summary>
        /// <param name="kid">JWT token key id. Validation keys are looked up
        /// based on the key id present on the JWT token header.</param>
        /// <param name="alg">RSA algorithm to be used: RS256, RS384 or RS512.
        /// Possible values include: 'RS256', 'RS384', 'RS512'</param>
        /// <param name="n">RSA public key modulus.</param>
        /// <param name="e">RSA public key exponent.</param>
        public RsaTokenKey(string kid, AccessPolicyRsaAlgo alg, string n, string e)
            : base(kid)
        {
            Alg = alg;
            N = n;
            E = e;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets RSA algorithm to be used: RS256, RS384 or RS512.
        /// Possible values include: 'RS256', 'RS384', 'RS512'
        /// </summary>
        [JsonProperty(PropertyName = "alg")]
        public AccessPolicyRsaAlgo Alg { get; set; }

        /// <summary>
        /// Gets or sets RSA public key modulus.
        /// </summary>
        [JsonProperty(PropertyName = "n")]
        public string N { get; set; }

        /// <summary>
        /// Gets or sets RSA public key exponent.
        /// </summary>
        [JsonProperty(PropertyName = "e")]
        public string E { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (N == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "N");
            }
            if (E == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "E");
            }
        }
    }
}
