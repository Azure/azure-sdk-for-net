// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for LivePipelineState.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(LivePipelineStateConverter))]
    public struct LivePipelineState : System.IEquatable<LivePipelineState>
    {
        private LivePipelineState(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The live pipeline is idle and not processing media.
        /// </summary>
        public static readonly LivePipelineState Inactive = "Inactive";

        /// <summary>
        /// The live pipeline is transitioning into the active state.
        /// </summary>
        public static readonly LivePipelineState Activating = "Activating";

        /// <summary>
        /// The live pipeline is active and able to process media. If your data
        /// source is not available, for instance, if your RTSP camera is
        /// powered off or unreachable, the pipeline will still be active and
        /// periodically retrying the connection. Your Azure subscription will
        /// be billed for the duration in which the live pipeline is in the
        /// active state.
        /// </summary>
        public static readonly LivePipelineState Active = "Active";

        /// <summary>
        /// The live pipeline is transitioning into the inactive state.
        /// </summary>
        public static readonly LivePipelineState Deactivating = "Deactivating";


        /// <summary>
        /// Underlying value of enum LivePipelineState
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for LivePipelineState
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type LivePipelineState
        /// </summary>
        public bool Equals(LivePipelineState e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to LivePipelineState
        /// </summary>
        public static implicit operator LivePipelineState(string value)
        {
            return new LivePipelineState(value);
        }

        /// <summary>
        /// Implicit operator to convert LivePipelineState to string
        /// </summary>
        public static implicit operator string(LivePipelineState e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum LivePipelineState
        /// </summary>
        public static bool operator == (LivePipelineState e1, LivePipelineState e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum LivePipelineState
        /// </summary>
        public static bool operator != (LivePipelineState e1, LivePipelineState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for LivePipelineState
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is LivePipelineState && Equals((LivePipelineState)obj);
        }

        /// <summary>
        /// Returns for hashCode LivePipelineState
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
