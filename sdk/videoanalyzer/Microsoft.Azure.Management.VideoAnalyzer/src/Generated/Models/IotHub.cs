// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The IoT Hub details.
    /// </summary>
    public partial class IotHub
    {
        /// <summary>
        /// Initializes a new instance of the IotHub class.
        /// </summary>
        public IotHub()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IotHub class.
        /// </summary>
        /// <param name="id">The IoT Hub resource identifier.</param>
        /// <param name="identity">The IoT Hub identity.</param>
        /// <param name="status">The current status of the Iot Hub
        /// mapping.</param>
        public IotHub(string id, ResourceIdentity identity, string status = default(string))
        {
            Id = id;
            Identity = identity;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the IoT Hub resource identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the IoT Hub identity.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ResourceIdentity Identity { get; set; }

        /// <summary>
        /// Gets the current status of the Iot Hub mapping.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Identity == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Identity");
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
        }
    }
}
