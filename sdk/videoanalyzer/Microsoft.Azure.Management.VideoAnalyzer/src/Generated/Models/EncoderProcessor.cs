// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Encoder processor allows for encoding of the input content. For
    /// example, it can used to change the resolution from 4K to 1280x720.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.EncoderProcessor")]
    public partial class EncoderProcessor : ProcessorNodeBase
    {
        /// <summary>
        /// Initializes a new instance of the EncoderProcessor class.
        /// </summary>
        public EncoderProcessor()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncoderProcessor class.
        /// </summary>
        /// <param name="name">Node name. Must be unique within the
        /// topology.</param>
        /// <param name="inputs">An array of upstream node references within
        /// the topology to be used as inputs for this node.</param>
        /// <param name="preset">The encoder preset, which defines the recipe
        /// or instructions on how the input content should be
        /// processed.</param>
        public EncoderProcessor(string name, IList<NodeInput> inputs, EncoderPresetBase preset)
            : base(name, inputs)
        {
            Preset = preset;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the encoder preset, which defines the recipe or
        /// instructions on how the input content should be processed.
        /// </summary>
        [JsonProperty(PropertyName = "preset")]
        public EncoderPresetBase Preset { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Preset == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Preset");
            }
        }
    }
}
