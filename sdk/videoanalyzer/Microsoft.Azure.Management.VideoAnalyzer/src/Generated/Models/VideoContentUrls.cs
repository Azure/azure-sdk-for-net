// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Set of URLs to the video content.
    /// </summary>
    public partial class VideoContentUrls
    {
        /// <summary>
        /// Initializes a new instance of the VideoContentUrls class.
        /// </summary>
        public VideoContentUrls()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VideoContentUrls class.
        /// </summary>
        /// <param name="downloadUrl">Video file download URL. This URL can be
        /// used in conjunction with the video content authorization token to
        /// download the video MP4 file. The resulting MP4 file can be played
        /// on any standard media player. It is available when the video type
        /// is 'file' and video file is available for consumption.</param>
        /// <param name="archiveBaseUrl">Video archive streaming base URL. The
        /// archived content can be automatically played by the Azure Video
        /// Analyzer player widget. Alternatively, this URL can be used in
        /// conjunction with the video content authorization token on any
        /// compatible DASH or HLS players by appending the following to the
        /// base URL:
        ///
        /// - HLSv4:     /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF:  /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode"
        /// with latencies which are approximately double of the chosen video
        /// segment length. It is available when the video type is 'archive'
        /// and video archiving is enabled.</param>
        /// <param name="rtspTunnelUrl">Video low-latency streaming URL. The
        /// live content can be automatically played by the Azure Video
        /// Analyzer player widget. Alternatively, this URL can be used in
        /// conjunction with the video content authorization token to expose a
        /// WebSocket tunneled RTSP stream. It is available when the video type
        /// is 'archive' and a live, low-latency feed is available from the
        /// source.</param>
        /// <param name="previewImageUrls">Video preview image URLs. These URLs
        /// can be used in conjunction with the video content authorization
        /// token to download the most recent still image from the video
        /// archive in different resolutions. They are available when the video
        /// type is 'archive' and preview images are enabled.</param>
        public VideoContentUrls(string downloadUrl = default(string), string archiveBaseUrl = default(string), string rtspTunnelUrl = default(string), VideoPreviewImageUrls previewImageUrls = default(VideoPreviewImageUrls))
        {
            DownloadUrl = downloadUrl;
            ArchiveBaseUrl = archiveBaseUrl;
            RtspTunnelUrl = rtspTunnelUrl;
            PreviewImageUrls = previewImageUrls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets video file download URL. This URL can be used in
        /// conjunction with the video content authorization token to download
        /// the video MP4 file. The resulting MP4 file can be played on any
        /// standard media player. It is available when the video type is
        /// 'file' and video file is available for consumption.
        /// </summary>
        [JsonProperty(PropertyName = "downloadUrl")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or sets video archive streaming base URL. The archived content
        /// can be automatically played by the Azure Video Analyzer player
        /// widget. Alternatively, this URL can be used in conjunction with the
        /// video content authorization token on any compatible DASH or HLS
        /// players by appending the following to the base URL:
        ///
        /// - HLSv4:     /manifest(format=m3u8-aapl).m3u8
        /// - HLS CMAF:  /manifest(format=m3u8-cmaf)
        /// - DASH CMAF: /manifest(format=mpd-time-cmaf)
        ///
        /// Moreover, an ongoing video recording can be played in "live mode"
        /// with latencies which are approximately double of the chosen video
        /// segment length. It is available when the video type is 'archive'
        /// and video archiving is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "archiveBaseUrl")]
        public string ArchiveBaseUrl { get; set; }

        /// <summary>
        /// Gets or sets video low-latency streaming URL. The live content can
        /// be automatically played by the Azure Video Analyzer player widget.
        /// Alternatively, this URL can be used in conjunction with the video
        /// content authorization token to expose a WebSocket tunneled RTSP
        /// stream. It is available when the video type is 'archive' and a
        /// live, low-latency feed is available from the source.
        /// </summary>
        [JsonProperty(PropertyName = "rtspTunnelUrl")]
        public string RtspTunnelUrl { get; set; }

        /// <summary>
        /// Gets or sets video preview image URLs. These URLs can be used in
        /// conjunction with the video content authorization token to download
        /// the most recent still image from the video archive in different
        /// resolutions. They are available when the video type is 'archive'
        /// and preview images are enabled.
        /// </summary>
        [JsonProperty(PropertyName = "previewImageUrls")]
        public VideoPreviewImageUrls PreviewImageUrls { get; set; }

    }
}
