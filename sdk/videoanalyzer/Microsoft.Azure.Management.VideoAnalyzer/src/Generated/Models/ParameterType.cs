// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ParameterType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ParameterTypeConverter))]
    public struct ParameterType : System.IEquatable<ParameterType>
    {
        private ParameterType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The parameter's value is a string.
        /// </summary>
        public static readonly ParameterType String = "String";

        /// <summary>
        /// The parameter's value is a string that holds sensitive information.
        /// </summary>
        public static readonly ParameterType SecretString = "SecretString";

        /// <summary>
        /// The parameter's value is a 32-bit signed integer.
        /// </summary>
        public static readonly ParameterType Int = "Int";

        /// <summary>
        /// The parameter's value is a 64-bit double-precision floating point.
        /// </summary>
        public static readonly ParameterType Double = "Double";

        /// <summary>
        /// The parameter's value is a boolean value that is either true or
        /// false.
        /// </summary>
        public static readonly ParameterType Bool = "Bool";


        /// <summary>
        /// Underlying value of enum ParameterType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ParameterType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ParameterType
        /// </summary>
        public bool Equals(ParameterType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ParameterType
        /// </summary>
        public static implicit operator ParameterType(string value)
        {
            return new ParameterType(value);
        }

        /// <summary>
        /// Implicit operator to convert ParameterType to string
        /// </summary>
        public static implicit operator string(ParameterType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ParameterType
        /// </summary>
        public static bool operator == (ParameterType e1, ParameterType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ParameterType
        /// </summary>
        public static bool operator != (ParameterType e1, ParameterType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ParameterType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ParameterType && Equals((ParameterType)obj);
        }

        /// <summary>
        /// Returns for hashCode ParameterType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
