// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A sequence of absolute datetime ranges as a string. The datetime values
    /// should follow IS08601, and the sum of the ranges should add up to 24
    /// hours or less. Currently, there can be only one range specified in the
    /// sequence.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.VideoSequenceAbsoluteTimeMarkers")]
    public partial class VideoSequenceAbsoluteTimeMarkers : TimeSequenceBase
    {
        /// <summary>
        /// Initializes a new instance of the VideoSequenceAbsoluteTimeMarkers
        /// class.
        /// </summary>
        public VideoSequenceAbsoluteTimeMarkers()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VideoSequenceAbsoluteTimeMarkers
        /// class.
        /// </summary>
        /// <param name="ranges">The sequence of datetime ranges. Example:
        /// '[["2021-10-05T03:30:00Z", "2021-10-05T03:40:00Z"]]'.</param>
        public VideoSequenceAbsoluteTimeMarkers(string ranges)
        {
            Ranges = ranges;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the sequence of datetime ranges. Example:
        /// '[["2021-10-05T03:30:00Z", "2021-10-05T03:40:00Z"]]'.
        /// </summary>
        [JsonProperty(PropertyName = "ranges")]
        public string Ranges { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Ranges == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ranges");
            }
        }
    }
}
