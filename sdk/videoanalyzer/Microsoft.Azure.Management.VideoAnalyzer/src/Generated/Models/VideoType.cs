// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for VideoType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(VideoTypeConverter))]
    public struct VideoType : System.IEquatable<VideoType>
    {
        private VideoType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Archive is flexible format that represents a video stream
        /// associated with wall-clock time. The video archive can either be
        /// continuous or discontinuous. An archive is discontinuous when there
        /// are gaps in the recording due to various reasons, such as the live
        /// pipeline being stopped, camera being disconnected or due to the use
        /// of event based recordings through the use of a signal gate.
        /// Finally, there is no limit to the archive duration and new video
        /// data can be appended to the existing archive at any time, as long
        /// as the same video codec and codec parameters are being used.
        /// </summary>
        public static readonly VideoType Archive = "Archive";


        /// <summary>
        /// Underlying value of enum VideoType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for VideoType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type VideoType
        /// </summary>
        public bool Equals(VideoType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to VideoType
        /// </summary>
        public static implicit operator VideoType(string value)
        {
            return new VideoType(value);
        }

        /// <summary>
        /// Implicit operator to convert VideoType to string
        /// </summary>
        public static implicit operator string(VideoType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum VideoType
        /// </summary>
        public static bool operator == (VideoType e1, VideoType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum VideoType
        /// </summary>
        public static bool operator != (VideoType e1, VideoType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for VideoType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is VideoType && Equals((VideoType)obj);
        }

        /// <summary>
        /// Returns for hashCode VideoType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
