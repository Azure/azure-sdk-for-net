// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// TLS endpoint describes an endpoint that the pipeline can connect to
    /// over TLS transport (data is encrypted in transit).
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.VideoAnalyzer.TlsEndpoint")]
    public partial class TlsEndpoint : EndpointBase
    {
        /// <summary>
        /// Initializes a new instance of the TlsEndpoint class.
        /// </summary>
        public TlsEndpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TlsEndpoint class.
        /// </summary>
        /// <param name="credentials">Credentials to be presented to the
        /// endpoint.</param>
        /// <param name="url">The endpoint URL for Video Analyzer to connect
        /// to.</param>
        /// <param name="tunnel">Describes the tunnel through which Video
        /// Analyzer can connect to the endpoint URL. This is an optional
        /// property, typically used when the endpoint is behind a
        /// firewall.</param>
        /// <param name="trustedCertificates">List of trusted certificate
        /// authorities when authenticating a TLS connection. A null list
        /// designates that Azure Video Analyzer's list of trusted authorities
        /// should be used.</param>
        /// <param name="validationOptions">Validation options to use when
        /// authenticating a TLS connection. By default, strict validation is
        /// used.</param>
        public TlsEndpoint(CredentialsBase credentials, string url, TunnelBase tunnel = default(TunnelBase), CertificateSource trustedCertificates = default(CertificateSource), TlsValidationOptions validationOptions = default(TlsValidationOptions))
            : base(credentials, url, tunnel)
        {
            TrustedCertificates = trustedCertificates;
            ValidationOptions = validationOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of trusted certificate authorities when
        /// authenticating a TLS connection. A null list designates that Azure
        /// Video Analyzer's list of trusted authorities should be used.
        /// </summary>
        [JsonProperty(PropertyName = "trustedCertificates")]
        public CertificateSource TrustedCertificates { get; set; }

        /// <summary>
        /// Gets or sets validation options to use when authenticating a TLS
        /// connection. By default, strict validation is used.
        /// </summary>
        [JsonProperty(PropertyName = "validationOptions")]
        public TlsValidationOptions ValidationOptions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
