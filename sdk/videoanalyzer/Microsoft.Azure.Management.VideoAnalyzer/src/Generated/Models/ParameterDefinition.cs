// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VideoAnalyzer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the parameter value of an specific pipeline topology parameter.
    /// See pipeline topology parameters for more information.
    /// </summary>
    public partial class ParameterDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ParameterDefinition class.
        /// </summary>
        public ParameterDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParameterDefinition class.
        /// </summary>
        /// <param name="name">Name of the parameter declared in the pipeline
        /// topology.</param>
        /// <param name="value">Parameter value to be applied on this specific
        /// pipeline.</param>
        public ParameterDefinition(string name, string value = default(string))
        {
            Name = name;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the parameter declared in the pipeline
        /// topology.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets parameter value to be applied on this specific
        /// pipeline.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
