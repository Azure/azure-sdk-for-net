// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class MediaVideoAnalyzerEdgeModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.SourceNodeBase"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <returns> A new <see cref="Models.SourceNodeBase"/> instance for mocking. </returns>
        public static SourceNodeBase SourceNodeBase(string type = null, string name = null)
        {
            return new UnknownSourceNodeBase(type, name);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProcessorNodeBase"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <returns> A new <see cref="Models.ProcessorNodeBase"/> instance for mocking. </returns>
        public static ProcessorNodeBase ProcessorNodeBase(string type = null, string name = null, IEnumerable<NodeInput> inputs = null)
        {
            inputs ??= new List<NodeInput>();

            return new UnknownProcessorNodeBase(type, name, inputs?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.SinkNodeBase"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <returns> A new <see cref="Models.SinkNodeBase"/> instance for mocking. </returns>
        public static SinkNodeBase SinkNodeBase(string type = null, string name = null, IEnumerable<NodeInput> inputs = null)
        {
            inputs ??= new List<NodeInput>();

            return new UnknownSinkNodeBase(type, name, inputs?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.EndpointBase"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="credentials">
        /// Credentials to be presented to the endpoint.
        /// Please note <see cref="Models.CredentialsBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="HttpHeaderCredentials"/>, <see cref="SymmetricKeyCredentials"/> and <see cref="UsernamePasswordCredentials"/>.
        /// </param>
        /// <param name="url"> The endpoint URL for Video Analyzer to connect to. </param>
        /// <returns> A new <see cref="Models.EndpointBase"/> instance for mocking. </returns>
        public static EndpointBase EndpointBase(string type = null, CredentialsBase credentials = null, string url = null)
        {
            return new UnknownEndpointBase(type, credentials, url);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CredentialsBase"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <returns> A new <see cref="Models.CredentialsBase"/> instance for mocking. </returns>
        public static CredentialsBase CredentialsBase(string type = null)
        {
            return new UnknownCredentialsBase(type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CertificateSource"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <returns> A new <see cref="Models.CertificateSource"/> instance for mocking. </returns>
        public static CertificateSource CertificateSource(string type = null)
        {
            return new UnknownCertificateSource(type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamedLineBase"/>. </summary>
        /// <param name="type"> The Type discriminator for the derived types. </param>
        /// <param name="name"> Line name. Must be unique within the node. </param>
        /// <returns> A new <see cref="Models.NamedLineBase"/> instance for mocking. </returns>
        public static NamedLineBase NamedLineBase(string type = null, string name = null)
        {
            return new UnknownNamedLineBase(type, name);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImageFormatProperties"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <returns> A new <see cref="Models.ImageFormatProperties"/> instance for mocking. </returns>
        public static ImageFormatProperties ImageFormatProperties(string type = null)
        {
            return new UnknownImageFormatProperties(type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NamedPolygonBase"/>. </summary>
        /// <param name="type"> The Type discriminator for the derived types. </param>
        /// <param name="name"> Polygon name. Must be unique within the node. </param>
        /// <returns> A new <see cref="Models.NamedPolygonBase"/> instance for mocking. </returns>
        public static NamedPolygonBase NamedPolygonBase(string type = null, string name = null)
        {
            return new UnknownNamedPolygonBase(type, name);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpatialAnalysisOperationBase"/>. </summary>
        /// <param name="type"> The Type discriminator for the derived types. </param>
        /// <returns> A new <see cref="Models.SpatialAnalysisOperationBase"/> instance for mocking. </returns>
        public static SpatialAnalysisOperationBase SpatialAnalysisOperationBase(string type = null)
        {
            return new UnknownSpatialAnalysisOperationBase(type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MethodRequest"/>. </summary>
        /// <param name="methodName"> Direct method method name. </param>
        /// <param name="apiVersion"> Video Analyzer API version. </param>
        /// <returns> A new <see cref="Models.MethodRequest"/> instance for mocking. </returns>
        public static MethodRequest MethodRequest(string methodName = null, string apiVersion = null)
        {
            return new UnknownMethodRequest(methodName, apiVersion);
        }
    }
}
