// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    public partial class SignalGateProcessor : IUtf8JsonSerializable, IModelJsonSerializable<SignalGateProcessor>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SignalGateProcessor>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SignalGateProcessor>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SignalGateProcessor>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(ActivationEvaluationWindow))
            {
                writer.WritePropertyName("activationEvaluationWindow"u8);
                writer.WriteStringValue(ActivationEvaluationWindow);
            }
            if (Optional.IsDefined(ActivationSignalOffset))
            {
                writer.WritePropertyName("activationSignalOffset"u8);
                writer.WriteStringValue(ActivationSignalOffset);
            }
            if (Optional.IsDefined(MinimumActivationTime))
            {
                writer.WritePropertyName("minimumActivationTime"u8);
                writer.WriteStringValue(MinimumActivationTime);
            }
            if (Optional.IsDefined(MaximumActivationTime))
            {
                writer.WritePropertyName("maximumActivationTime"u8);
                writer.WriteStringValue(MaximumActivationTime);
            }
            writer.WritePropertyName("@type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("inputs"u8);
            writer.WriteStartArray();
            foreach (var item in Inputs)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SignalGateProcessor DeserializeSignalGateProcessor(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> activationEvaluationWindow = default;
            Optional<string> activationSignalOffset = default;
            Optional<string> minimumActivationTime = default;
            Optional<string> maximumActivationTime = default;
            string type = default;
            string name = default;
            IList<NodeInput> inputs = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("activationEvaluationWindow"u8))
                {
                    activationEvaluationWindow = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activationSignalOffset"u8))
                {
                    activationSignalOffset = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumActivationTime"u8))
                {
                    minimumActivationTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maximumActivationTime"u8))
                {
                    maximumActivationTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("@type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    List<NodeInput> array = new List<NodeInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NodeInput.DeserializeNodeInput(item));
                    }
                    inputs = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SignalGateProcessor(type, name, inputs, activationEvaluationWindow.Value, activationSignalOffset.Value, minimumActivationTime.Value, maximumActivationTime.Value, rawData);
        }

        SignalGateProcessor IModelJsonSerializable<SignalGateProcessor>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SignalGateProcessor>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSignalGateProcessor(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SignalGateProcessor>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SignalGateProcessor>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SignalGateProcessor IModelSerializable<SignalGateProcessor>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SignalGateProcessor>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSignalGateProcessor(doc.RootElement, options);
        }

        public static implicit operator RequestContent(SignalGateProcessor model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator SignalGateProcessor(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSignalGateProcessor(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
