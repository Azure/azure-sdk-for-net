// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> The H264 Profile. </summary>
    public readonly partial struct H264Profile : IEquatable<H264Profile>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="H264Profile"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public H264Profile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BaselineValue = "Baseline";
        private const string MainValue = "Main";
        private const string ExtendedValue = "Extended";
        private const string HighValue = "High";

        /// <summary> Baseline. </summary>
        public static H264Profile Baseline { get; } = new H264Profile(BaselineValue);
        /// <summary> Main. </summary>
        public static H264Profile Main { get; } = new H264Profile(MainValue);
        /// <summary> Extended. </summary>
        public static H264Profile Extended { get; } = new H264Profile(ExtendedValue);
        /// <summary> High. </summary>
        public static H264Profile High { get; } = new H264Profile(HighValue);
        /// <summary> Determines if two <see cref="H264Profile"/> values are the same. </summary>
        public static bool operator ==(H264Profile left, H264Profile right) => left.Equals(right);
        /// <summary> Determines if two <see cref="H264Profile"/> values are not the same. </summary>
        public static bool operator !=(H264Profile left, H264Profile right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="H264Profile"/>. </summary>
        public static implicit operator H264Profile(string value) => new H264Profile(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is H264Profile other && Equals(other);
        /// <inheritdoc />
        public bool Equals(H264Profile other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
