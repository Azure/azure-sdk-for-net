// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Describes an input signal to be used on a pipeline node. </summary>
    public partial class NodeInput
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NodeInput"/>. </summary>
        /// <param name="nodeName"> The name of the upstream node in the pipeline which output is used as input of the current node. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeName"/> is null. </exception>
        public NodeInput(string nodeName)
        {
            Argument.AssertNotNull(nodeName, nameof(nodeName));

            NodeName = nodeName;
            OutputSelectors = new ChangeTrackingList<OutputSelector>();
        }

        /// <summary> Initializes a new instance of <see cref="NodeInput"/>. </summary>
        /// <param name="nodeName"> The name of the upstream node in the pipeline which output is used as input of the current node. </param>
        /// <param name="outputSelectors"> Allows for the selection of specific data streams (eg. video only) from another node. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NodeInput(string nodeName, IList<OutputSelector> outputSelectors, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            NodeName = nodeName;
            OutputSelectors = outputSelectors;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NodeInput"/> for deserialization. </summary>
        internal NodeInput()
        {
        }

        /// <summary> The name of the upstream node in the pipeline which output is used as input of the current node. </summary>
        public string NodeName { get; set; }
        /// <summary> Allows for the selection of specific data streams (eg. video only) from another node. </summary>
        public IList<OutputSelector> OutputSelectors { get; }
    }
}
