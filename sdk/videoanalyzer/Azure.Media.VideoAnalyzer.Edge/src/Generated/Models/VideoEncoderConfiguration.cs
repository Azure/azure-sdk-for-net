// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Class representing the MPEG4 Configuration. </summary>
    public partial class VideoEncoderConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VideoEncoderConfiguration"/>. </summary>
        public VideoEncoderConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VideoEncoderConfiguration"/>. </summary>
        /// <param name="encoding"> The video codec used by the Media Profile. </param>
        /// <param name="quality"> Relative value representing the quality of the video. </param>
        /// <param name="resolution"> The Video Resolution. </param>
        /// <param name="rateControl"> The Video's rate control. </param>
        /// <param name="h264"> The H264 Configuration. </param>
        /// <param name="mpeg4"> The H264 Configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VideoEncoderConfiguration(VideoEncoding? encoding, float? quality, VideoResolution resolution, RateControl rateControl, H264Configuration h264, Mpeg4Configuration mpeg4, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Encoding = encoding;
            Quality = quality;
            Resolution = resolution;
            RateControl = rateControl;
            H264 = h264;
            Mpeg4 = mpeg4;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The video codec used by the Media Profile. </summary>
        public VideoEncoding? Encoding { get; set; }
        /// <summary> Relative value representing the quality of the video. </summary>
        public float? Quality { get; set; }
        /// <summary> The Video Resolution. </summary>
        public VideoResolution Resolution { get; set; }
        /// <summary> The Video's rate control. </summary>
        public RateControl RateControl { get; set; }
        /// <summary> The H264 Configuration. </summary>
        public H264Configuration H264 { get; set; }
        /// <summary> The H264 Configuration. </summary>
        public Mpeg4Configuration Mpeg4 { get; set; }
    }
}
