// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Line crossing processor allows for the detection of tracked objects moving across one or more predefined lines. It must be downstream of an object tracker of downstream on an AI extension node that generates sequenceId for objects which are tracked across different frames of the video. Inference events are generated every time objects crosses from one side of the line to another. </summary>
    public partial class LineCrossingProcessor : ProcessorNodeBase
    {
        /// <summary> Initializes a new instance of LineCrossingProcessor. </summary>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <param name="lines"> An array of lines used to compute line crossing events. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="inputs"/>, or <paramref name="lines"/> is null. </exception>
        public LineCrossingProcessor(string name, IEnumerable<NodeInput> inputs, IEnumerable<NamedLineBase> lines) : base(name, inputs)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (inputs == null)
            {
                throw new ArgumentNullException(nameof(inputs));
            }
            if (lines == null)
            {
                throw new ArgumentNullException(nameof(lines));
            }

            Lines = lines.ToList();
            Type = "#Microsoft.VideoAnalyzer.LineCrossingProcessor";
        }

        /// <summary> Initializes a new instance of LineCrossingProcessor. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <param name="lines"> An array of lines used to compute line crossing events. </param>
        internal LineCrossingProcessor(string type, string name, IList<NodeInput> inputs, IList<NamedLineBase> lines) : base(type, name, inputs)
        {
            Lines = lines;
            Type = type ?? "#Microsoft.VideoAnalyzer.LineCrossingProcessor";
        }

        /// <summary> An array of lines used to compute line crossing events. </summary>
        public IList<NamedLineBase> Lines { get; }
    }
}
