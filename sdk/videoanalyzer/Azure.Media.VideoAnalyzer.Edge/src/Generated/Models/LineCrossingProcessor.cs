// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Line crossing processor allows for the detection of tracked objects moving across one or more predefined lines. It must be downstream of an object tracker of downstream on an AI extension node that generates sequenceId for objects which are tracked across different frames of the video. Inference events are generated every time objects crosses from one side of the line to another. </summary>
    public partial class LineCrossingProcessor : ProcessorNodeBase
    {
        /// <summary> Initializes a new instance of <see cref="LineCrossingProcessor"/>. </summary>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <param name="lines">
        /// An array of lines used to compute line crossing events.
        /// Please note <see cref="NamedLineBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NamedLineString"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="inputs"/> or <paramref name="lines"/> is null. </exception>
        public LineCrossingProcessor(string name, IEnumerable<NodeInput> inputs, IEnumerable<NamedLineBase> lines) : base(name, inputs)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(inputs, nameof(inputs));
            Argument.AssertNotNull(lines, nameof(lines));

            Lines = lines.ToList();
            Type = "#Microsoft.VideoAnalyzer.LineCrossingProcessor";
        }

        /// <summary> Initializes a new instance of <see cref="LineCrossingProcessor"/>. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <param name="lines">
        /// An array of lines used to compute line crossing events.
        /// Please note <see cref="NamedLineBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NamedLineString"/>.
        /// </param>
        internal LineCrossingProcessor(string type, string name, IList<NodeInput> inputs, IList<NamedLineBase> lines) : base(type, name, inputs)
        {
            Lines = lines;
            Type = type ?? "#Microsoft.VideoAnalyzer.LineCrossingProcessor";
        }

        /// <summary>
        /// An array of lines used to compute line crossing events.
        /// Please note <see cref="NamedLineBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="NamedLineString"/>.
        /// </summary>
        public IList<NamedLineBase> Lines { get; }
    }
}
