// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    public partial class SpatialAnalysisPersonLineCrossingOperation : IUtf8JsonSerializable, IModelJsonSerializable<SpatialAnalysisPersonLineCrossingOperation>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SpatialAnalysisPersonLineCrossingOperation>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SpatialAnalysisPersonLineCrossingOperation>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SpatialAnalysisPersonLineCrossingOperation>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("lines"u8);
            writer.WriteStartArray();
            foreach (var item in Lines)
            {
                if (item is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<SpatialAnalysisPersonLineCrossingLineEvents>)item).Serialize(writer, options);
                }
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(Debug))
            {
                writer.WritePropertyName("debug"u8);
                writer.WriteStringValue(Debug);
            }
            if (Optional.IsDefined(CalibrationConfiguration))
            {
                writer.WritePropertyName("calibrationConfiguration"u8);
                writer.WriteStringValue(CalibrationConfiguration);
            }
            if (Optional.IsDefined(CameraConfiguration))
            {
                writer.WritePropertyName("cameraConfiguration"u8);
                writer.WriteStringValue(CameraConfiguration);
            }
            if (Optional.IsDefined(CameraCalibratorNodeConfiguration))
            {
                writer.WritePropertyName("cameraCalibratorNodeConfiguration"u8);
                writer.WriteStringValue(CameraCalibratorNodeConfiguration);
            }
            if (Optional.IsDefined(DetectorNodeConfiguration))
            {
                writer.WritePropertyName("detectorNodeConfiguration"u8);
                writer.WriteStringValue(DetectorNodeConfiguration);
            }
            if (Optional.IsDefined(TrackerNodeConfiguration))
            {
                writer.WritePropertyName("trackerNodeConfiguration"u8);
                writer.WriteStringValue(TrackerNodeConfiguration);
            }
            if (Optional.IsDefined(EnableFaceMaskClassifier))
            {
                writer.WritePropertyName("enableFaceMaskClassifier"u8);
                writer.WriteStringValue(EnableFaceMaskClassifier);
            }
            writer.WritePropertyName("@type"u8);
            writer.WriteStringValue(Type);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SpatialAnalysisPersonLineCrossingOperation DeserializeSpatialAnalysisPersonLineCrossingOperation(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<SpatialAnalysisPersonLineCrossingLineEvents> lines = default;
            Optional<string> debug = default;
            Optional<string> calibrationConfiguration = default;
            Optional<string> cameraConfiguration = default;
            Optional<string> cameraCalibratorNodeConfiguration = default;
            Optional<string> detectorNodeConfiguration = default;
            Optional<string> trackerNodeConfiguration = default;
            Optional<string> enableFaceMaskClassifier = default;
            string type = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lines"u8))
                {
                    List<SpatialAnalysisPersonLineCrossingLineEvents> array = new List<SpatialAnalysisPersonLineCrossingLineEvents>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SpatialAnalysisPersonLineCrossingLineEvents.DeserializeSpatialAnalysisPersonLineCrossingLineEvents(item));
                    }
                    lines = array;
                    continue;
                }
                if (property.NameEquals("debug"u8))
                {
                    debug = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("calibrationConfiguration"u8))
                {
                    calibrationConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cameraConfiguration"u8))
                {
                    cameraConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cameraCalibratorNodeConfiguration"u8))
                {
                    cameraCalibratorNodeConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("detectorNodeConfiguration"u8))
                {
                    detectorNodeConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trackerNodeConfiguration"u8))
                {
                    trackerNodeConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableFaceMaskClassifier"u8))
                {
                    enableFaceMaskClassifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("@type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SpatialAnalysisPersonLineCrossingOperation(type, debug.Value, calibrationConfiguration.Value, cameraConfiguration.Value, cameraCalibratorNodeConfiguration.Value, detectorNodeConfiguration.Value, trackerNodeConfiguration.Value, enableFaceMaskClassifier.Value, lines, rawData);
        }

        SpatialAnalysisPersonLineCrossingOperation IModelJsonSerializable<SpatialAnalysisPersonLineCrossingOperation>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SpatialAnalysisPersonLineCrossingOperation>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSpatialAnalysisPersonLineCrossingOperation(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SpatialAnalysisPersonLineCrossingOperation>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SpatialAnalysisPersonLineCrossingOperation>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SpatialAnalysisPersonLineCrossingOperation IModelSerializable<SpatialAnalysisPersonLineCrossingOperation>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SpatialAnalysisPersonLineCrossingOperation>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSpatialAnalysisPersonLineCrossingOperation(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SpatialAnalysisPersonLineCrossingOperation"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SpatialAnalysisPersonLineCrossingOperation"/> to convert. </param>
        public static implicit operator RequestContent(SpatialAnalysisPersonLineCrossingOperation model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SpatialAnalysisPersonLineCrossingOperation"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SpatialAnalysisPersonLineCrossingOperation(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSpatialAnalysisPersonLineCrossingOperation(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
