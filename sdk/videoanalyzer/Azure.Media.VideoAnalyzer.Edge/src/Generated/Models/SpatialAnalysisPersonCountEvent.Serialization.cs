// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    public partial class SpatialAnalysisPersonCountEvent : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Trigger))
            {
                writer.WritePropertyName("trigger");
                writer.WriteStringValue(Trigger.Value.ToString());
            }
            if (Optional.IsDefined(OutputFrequency))
            {
                writer.WritePropertyName("outputFrequency");
                writer.WriteStringValue(OutputFrequency);
            }
            if (Optional.IsDefined(Threshold))
            {
                writer.WritePropertyName("threshold");
                writer.WriteStringValue(Threshold);
            }
            if (Optional.IsDefined(Focus))
            {
                writer.WritePropertyName("focus");
                writer.WriteStringValue(Focus.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static SpatialAnalysisPersonCountEvent DeserializeSpatialAnalysisPersonCountEvent(JsonElement element)
        {
            Optional<SpatialAnalysisPersonCountEventTrigger> trigger = default;
            Optional<string> outputFrequency = default;
            Optional<string> threshold = default;
            Optional<SpatialAnalysisOperationFocus> focus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("trigger"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    trigger = new SpatialAnalysisPersonCountEventTrigger(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("outputFrequency"))
                {
                    outputFrequency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("threshold"))
                {
                    threshold = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("focus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    focus = new SpatialAnalysisOperationFocus(property.Value.GetString());
                    continue;
                }
            }
            return new SpatialAnalysisPersonCountEvent(threshold.Value, Optional.ToNullable(focus), Optional.ToNullable(trigger), outputFrequency.Value);
        }
    }
}
