// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> A processor that allows the pipeline topology to send video frames to a Cognitive Services Vision extension. Inference results are relayed to downstream nodes. </summary>
    public partial class CognitiveServicesVisionProcessor : ProcessorNodeBase
    {
        /// <summary> Initializes a new instance of CognitiveServicesVisionProcessor. </summary>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <param name="endpoint"> Endpoint to which this processor should connect. </param>
        /// <param name="operation"> Describes the Spatial Analysis operation to be used in the Cognitive Services Vision processor. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="inputs"/>, <paramref name="endpoint"/>, or <paramref name="operation"/> is null. </exception>
        public CognitiveServicesVisionProcessor(string name, IEnumerable<NodeInput> inputs, EndpointBase endpoint, SpatialAnalysisOperationBase operation) : base(name, inputs)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (inputs == null)
            {
                throw new ArgumentNullException(nameof(inputs));
            }
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (operation == null)
            {
                throw new ArgumentNullException(nameof(operation));
            }

            Endpoint = endpoint;
            Operation = operation;
            Type = "#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor";
        }

        /// <summary> Initializes a new instance of CognitiveServicesVisionProcessor. </summary>
        /// <param name="type"> Type discriminator for the derived types. </param>
        /// <param name="name"> Node name. Must be unique within the topology. </param>
        /// <param name="inputs"> An array of upstream node references within the topology to be used as inputs for this node. </param>
        /// <param name="endpoint"> Endpoint to which this processor should connect. </param>
        /// <param name="image"> Describes the parameters of the image that is sent as input to the endpoint. </param>
        /// <param name="samplingOptions"> Describes the sampling options to be applied when forwarding samples to the extension. </param>
        /// <param name="operation"> Describes the Spatial Analysis operation to be used in the Cognitive Services Vision processor. </param>
        internal CognitiveServicesVisionProcessor(string type, string name, IList<NodeInput> inputs, EndpointBase endpoint, ImageProperties image, SamplingOptions samplingOptions, SpatialAnalysisOperationBase operation) : base(type, name, inputs)
        {
            Endpoint = endpoint;
            Image = image;
            SamplingOptions = samplingOptions;
            Operation = operation;
            Type = type ?? "#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor";
        }

        /// <summary> Endpoint to which this processor should connect. </summary>
        public EndpointBase Endpoint { get; set; }
        /// <summary> Describes the parameters of the image that is sent as input to the endpoint. </summary>
        public ImageProperties Image { get; set; }
        /// <summary> Describes the sampling options to be applied when forwarding samples to the extension. </summary>
        public SamplingOptions SamplingOptions { get; set; }
        /// <summary> Describes the Spatial Analysis operation to be used in the Cognitive Services Vision processor. </summary>
        public SpatialAnalysisOperationBase Operation { get; set; }
    }
}
