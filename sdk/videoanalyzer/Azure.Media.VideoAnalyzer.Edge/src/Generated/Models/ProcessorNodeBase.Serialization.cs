// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    [PersistableModelProxy(typeof(UnknownProcessorNodeBase))]
    public partial class ProcessorNodeBase : IUtf8JsonSerializable, IJsonModel<ProcessorNodeBase>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProcessorNodeBase>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ProcessorNodeBase>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ProcessorNodeBase>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ProcessorNodeBase>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("@type"u8);
            writer.WriteStringValue(Type);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("inputs"u8);
            writer.WriteStartArray();
            foreach (var item in Inputs)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProcessorNodeBase IJsonModel<ProcessorNodeBase>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ProcessorNodeBase)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProcessorNodeBase(document.RootElement, options);
        }

        internal static ProcessorNodeBase DeserializeProcessorNodeBase(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("@type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor": return CognitiveServicesVisionProcessor.DeserializeCognitiveServicesVisionProcessor(element);
                    case "#Microsoft.VideoAnalyzer.ExtensionProcessorBase": return ExtensionProcessorBase.DeserializeExtensionProcessorBase(element);
                    case "#Microsoft.VideoAnalyzer.GrpcExtension": return GrpcExtension.DeserializeGrpcExtension(element);
                    case "#Microsoft.VideoAnalyzer.HttpExtension": return HttpExtension.DeserializeHttpExtension(element);
                    case "#Microsoft.VideoAnalyzer.LineCrossingProcessor": return LineCrossingProcessor.DeserializeLineCrossingProcessor(element);
                    case "#Microsoft.VideoAnalyzer.MotionDetectionProcessor": return MotionDetectionProcessor.DeserializeMotionDetectionProcessor(element);
                    case "#Microsoft.VideoAnalyzer.ObjectTrackingProcessor": return ObjectTrackingProcessor.DeserializeObjectTrackingProcessor(element);
                    case "#Microsoft.VideoAnalyzer.SignalGateProcessor": return SignalGateProcessor.DeserializeSignalGateProcessor(element);
                }
            }
            return UnknownProcessorNodeBase.DeserializeUnknownProcessorNodeBase(element);
        }

        BinaryData IPersistableModel<ProcessorNodeBase>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ProcessorNodeBase)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ProcessorNodeBase IPersistableModel<ProcessorNodeBase>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ProcessorNodeBase)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeProcessorNodeBase(document.RootElement, options);
        }

        string IPersistableModel<ProcessorNodeBase>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
