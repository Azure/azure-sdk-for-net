// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> An enum value determining whether the date time was configured using NTP or manual. </summary>
    public readonly partial struct OnvifSystemDateTimeType : IEquatable<OnvifSystemDateTimeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OnvifSystemDateTimeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OnvifSystemDateTimeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NtpValue = "Ntp";
        private const string ManualValue = "Manual";

        /// <summary> Ntp. </summary>
        public static OnvifSystemDateTimeType Ntp { get; } = new OnvifSystemDateTimeType(NtpValue);
        /// <summary> Manual. </summary>
        public static OnvifSystemDateTimeType Manual { get; } = new OnvifSystemDateTimeType(ManualValue);
        /// <summary> Determines if two <see cref="OnvifSystemDateTimeType"/> values are the same. </summary>
        public static bool operator ==(OnvifSystemDateTimeType left, OnvifSystemDateTimeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OnvifSystemDateTimeType"/> values are not the same. </summary>
        public static bool operator !=(OnvifSystemDateTimeType left, OnvifSystemDateTimeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OnvifSystemDateTimeType"/>. </summary>
        public static implicit operator OnvifSystemDateTimeType(string value) => new OnvifSystemDateTimeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OnvifSystemDateTimeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OnvifSystemDateTimeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
