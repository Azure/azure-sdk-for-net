// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Enables a pipeline topology to write media data to a destination outside of the Azure Video Analyzer IoT Edge module. </summary>
    public partial class SinkNodeBase
    {
        /// <summary> Initializes a new instance of SinkNodeBase. </summary>
        /// <param name="name"> The name to be used for the topology sink. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="inputs"/> is null. </exception>
        public SinkNodeBase(string name, IEnumerable<NodeInput> inputs)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (inputs == null)
            {
                throw new ArgumentNullException(nameof(inputs));
            }

            Name = name;
            Inputs = inputs.ToList();
        }

        /// <summary> Initializes a new instance of SinkNodeBase. </summary>
        /// <param name="type"> The discriminator for derived types. </param>
        /// <param name="name"> The name to be used for the topology sink. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </param>
        internal SinkNodeBase(string type, string name, IList<NodeInput> inputs)
        {
            Type = type;
            Name = name;
            Inputs = inputs;
        }

        /// <summary> The discriminator for derived types. </summary>
        internal string Type { get; set; }
        /// <summary> The name to be used for the topology sink. </summary>
        public string Name { get; set; }
        /// <summary> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </summary>
        public IList<NodeInput> Inputs { get; }
    }
}
