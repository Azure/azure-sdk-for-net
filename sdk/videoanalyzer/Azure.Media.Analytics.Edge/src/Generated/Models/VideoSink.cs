// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Media.VideoAnalyzer.Edge.Models
{
    /// <summary> Enables a pipeline topology to record media to an Azure Video Analyzer video for subsequent playback. </summary>
    public partial class VideoSink : SinkNodeBase
    {
        /// <summary> Initializes a new instance of VideoSink. </summary>
        /// <param name="name"> The name to be used for the topology sink. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </param>
        /// <param name="videoName"> Name of a new or existing Video Analyzer video entity to use as media output. </param>
        /// <param name="localMediaCachePath"> Path to a local file system directory for temporary caching of media before writing to a video. This local cache will grow if the connection to Azure is not stable. </param>
        /// <param name="localMediaCacheMaximumSizeMiB"> Maximum amount of disk space that can be used for temporary caching of media. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="inputs"/>, <paramref name="videoName"/>, <paramref name="localMediaCachePath"/>, or <paramref name="localMediaCacheMaximumSizeMiB"/> is null. </exception>
        public VideoSink(string name, IEnumerable<NodeInput> inputs, string videoName, string localMediaCachePath, string localMediaCacheMaximumSizeMiB) : base(name, inputs)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (inputs == null)
            {
                throw new ArgumentNullException(nameof(inputs));
            }
            if (videoName == null)
            {
                throw new ArgumentNullException(nameof(videoName));
            }
            if (localMediaCachePath == null)
            {
                throw new ArgumentNullException(nameof(localMediaCachePath));
            }
            if (localMediaCacheMaximumSizeMiB == null)
            {
                throw new ArgumentNullException(nameof(localMediaCacheMaximumSizeMiB));
            }

            VideoName = videoName;
            LocalMediaCachePath = localMediaCachePath;
            LocalMediaCacheMaximumSizeMiB = localMediaCacheMaximumSizeMiB;
            Type = "#Microsoft.VideoAnalyzer.VideoSink";
        }

        /// <summary> Initializes a new instance of VideoSink. </summary>
        /// <param name="type"> The discriminator for derived types. </param>
        /// <param name="name"> The name to be used for the topology sink. </param>
        /// <param name="inputs"> An array of the names of the other nodes in the pipeline topology, the outputs of which are used as input for this sink node. </param>
        /// <param name="videoName"> Name of a new or existing Video Analyzer video entity to use as media output. </param>
        /// <param name="videoCreationProperties"> Optional properties which will be used only if a video is being created. </param>
        /// <param name="localMediaCachePath"> Path to a local file system directory for temporary caching of media before writing to a video. This local cache will grow if the connection to Azure is not stable. </param>
        /// <param name="localMediaCacheMaximumSizeMiB"> Maximum amount of disk space that can be used for temporary caching of media. </param>
        internal VideoSink(string type, string name, IList<NodeInput> inputs, string videoName, VideoCreationProperties videoCreationProperties, string localMediaCachePath, string localMediaCacheMaximumSizeMiB) : base(type, name, inputs)
        {
            VideoName = videoName;
            VideoCreationProperties = videoCreationProperties;
            LocalMediaCachePath = localMediaCachePath;
            LocalMediaCacheMaximumSizeMiB = localMediaCacheMaximumSizeMiB;
            Type = type ?? "#Microsoft.VideoAnalyzer.VideoSink";
        }

        /// <summary> Name of a new or existing Video Analyzer video entity to use as media output. </summary>
        public string VideoName { get; set; }
        /// <summary> Optional properties which will be used only if a video is being created. </summary>
        public VideoCreationProperties VideoCreationProperties { get; set; }
        /// <summary> Path to a local file system directory for temporary caching of media before writing to a video. This local cache will grow if the connection to Azure is not stable. </summary>
        public string LocalMediaCachePath { get; set; }
        /// <summary> Maximum amount of disk space that can be used for temporary caching of media. </summary>
        public string LocalMediaCacheMaximumSizeMiB { get; set; }
    }
}
