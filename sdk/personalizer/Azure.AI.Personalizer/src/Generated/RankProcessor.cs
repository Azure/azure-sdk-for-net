// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading;
using Newtonsoft.Json;
using Rl.Net;

namespace Azure.AI.Personalizer
{
    /// <summary> The Rank Processor. </summary>
    internal partial class RankProcessor
    {
        private readonly LiveModel _liveModel;
        internal PolicyRestClient RestClient { get; }

        /// <summary> Initializes a new instance of RankProcessor. </summary>
        public RankProcessor(LiveModel liveModel)
        {
            this._liveModel = liveModel;
        }

        /// <summary> Submit a Personalizer rank request. Receives a context and a list of actions. Returns which of the provided actions should be used by your application, in rewardActionId. </summary>
        /// <param name="options"> A Personalizer Rank request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PersonalizerRankResult> Rank(PersonalizerRankOptions options, CancellationToken cancellationToken = default)
        {
            // Remove excluded actions in options
            HashSet<string> excludedSet = new HashSet<string>(options.ExcludedActions);
            options.Actions = options.Actions.Where(action => !excludedSet.Contains(action.Id));

            // Convert options to the compatible parameter for ChooseRank
            DecisionContext decisionContext = new DecisionContext(options);
            var contextJson = JsonConvert.SerializeObject(decisionContext);
            ActionFlags flags = options.DeferActivation == true ? ActionFlags.Deferred : ActionFlags.Default;

            // Call ChooseRank of local RL.Net
            RankingResponse rankingResponse = _liveModel.ChooseRank(options.EventId, contextJson, flags);

            // Convert response to PersonalizerRankResult
            var responseJson = JsonConvert.SerializeObject(rankingResponse);
            var responseDocument = JsonDocument.Parse(responseJson);
            var value = PersonalizerRankResult.DeserializePersonalizerRankResult(responseDocument.RootElement);
            return Response.FromValue(value, default);
        }
    }
}
