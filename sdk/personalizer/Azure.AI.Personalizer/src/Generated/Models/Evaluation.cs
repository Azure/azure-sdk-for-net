// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.Personalizer.Models
{
    /// <summary> A Counterfactual Evaluation. </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "AZC0012:Avoid single word type names", Justification = "This is a descriptive name and should not be changed")]
    public partial class Evaluation
    {
        /// <summary> Initializes a new instance of Evaluation. </summary>
        internal Evaluation()
        {
            PolicyResults = new ChangeTrackingList<PolicyResult>();
            FeatureImportance = new ChangeTrackingList<IList<string>>();
        }

        /// <summary> Initializes a new instance of Evaluation. </summary>
        /// <param name="id"> The ID of the evaluation. </param>
        /// <param name="name"> The name of the evaluation. </param>
        /// <param name="startTime"> The start time of the evaluation. </param>
        /// <param name="endTime"> The end time of the evaluation. </param>
        /// <param name="jobId"> The ID of the job processing the evaluation. </param>
        /// <param name="status"> The status of the job processing the evaluation. </param>
        /// <param name="policyResults"> The results of the evaluation. </param>
        /// <param name="featureImportance"> Feature Importance. </param>
        /// <param name="evaluationType"> Evaluation type (manual or through Automatic Optimization). </param>
        /// <param name="optimalPolicy"> The optimal policy. </param>
        /// <param name="creationTime"> Creation time. </param>
        internal Evaluation(string id, string name, DateTimeOffset? startTime, DateTimeOffset? endTime, string jobId, EvaluationJobStatus? status, IReadOnlyList<PolicyResult> policyResults, IReadOnlyList<IList<string>> featureImportance, EvaluationType? evaluationType, string optimalPolicy, DateTimeOffset? creationTime)
        {
            Id = id;
            Name = name;
            StartTime = startTime;
            EndTime = endTime;
            JobId = jobId;
            Status = status;
            PolicyResults = policyResults;
            FeatureImportance = featureImportance;
            EvaluationType = evaluationType;
            OptimalPolicy = optimalPolicy;
            CreationTime = creationTime;
        }

        /// <summary> The ID of the evaluation. </summary>
        public string Id { get; }
        /// <summary> The name of the evaluation. </summary>
        public string Name { get; }
        /// <summary> The start time of the evaluation. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> The end time of the evaluation. </summary>
        public DateTimeOffset? EndTime { get; }
        /// <summary> The ID of the job processing the evaluation. </summary>
        public string JobId { get; }
        /// <summary> The status of the job processing the evaluation. </summary>
        public EvaluationJobStatus? Status { get; }
        /// <summary> The results of the evaluation. </summary>
        public IReadOnlyList<PolicyResult> PolicyResults { get; }
        /// <summary> Feature Importance. </summary>
        public IReadOnlyList<IList<string>> FeatureImportance { get; }
        /// <summary> Evaluation type (manual or through Automatic Optimization). </summary>
        public EvaluationType? EvaluationType { get; }
        /// <summary> The optimal policy. </summary>
        public string OptimalPolicy { get; }
        /// <summary> Creation time. </summary>
        public DateTimeOffset? CreationTime { get; }
    }
}
