// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.SoftwarePlan.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Response on GET of a hybrid use benefit
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class HybridUseBenefitModel : Resource
    {
        /// <summary>
        /// Initializes a new instance of the HybridUseBenefitModel class.
        /// </summary>
        public HybridUseBenefitModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HybridUseBenefitModel class.
        /// </summary>
        /// <param name="sku">Hybrid use benefit SKU</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="etag">Indicates the revision of the hybrid use
        /// benefit</param>
        /// <param name="provisioningState">Provisioning state. Possible values
        /// include: 'Succeeded', 'Cancelled', 'Failed'</param>
        /// <param name="createdDate">Created date</param>
        /// <param name="lastUpdatedDate">Last updated date</param>
        public HybridUseBenefitModel(Sku sku, string id = default(string), string name = default(string), string type = default(string), int? etag = default(int?), string provisioningState = default(string), System.DateTime? createdDate = default(System.DateTime?), System.DateTime? lastUpdatedDate = default(System.DateTime?))
            : base(id, name, type)
        {
            Sku = sku;
            Etag = etag;
            ProvisioningState = provisioningState;
            CreatedDate = createdDate;
            LastUpdatedDate = lastUpdatedDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hybrid use benefit SKU
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets indicates the revision of the hybrid use benefit
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public int? Etag { get; private set; }

        /// <summary>
        /// Gets provisioning state. Possible values include: 'Succeeded',
        /// 'Cancelled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets created date
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate { get; private set; }

        /// <summary>
        /// Gets last updated date
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastUpdatedDate")]
        public System.DateTime? LastUpdatedDate { get; private set; }

    }
}
