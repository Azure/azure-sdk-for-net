// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MetricsOperations.
    /// </summary>
    public static partial class MetricsOperationsExtensions
    {
            /// <summary>
            /// **Lists the metric values for a resource**.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='timespan'>
            /// The timespan of the query. It is a string with the following format
            /// 'startDateTime_ISO/endDateTime_ISO'.
            /// </param>
            /// <param name='interval'>
            /// The interval (i.e. timegrain) of the query.
            /// </param>
            /// <param name='metricnames'>
            /// The names of the metrics (comma separated) to retrieve. Special case: If a
            /// metricname itself has a comma in it then use %2 to indicate it. Eg:
            /// 'Metric,Name1' should be **'Metric%2Name1'**
            /// </param>
            /// <param name='aggregation'>
            /// The list of aggregation types (comma separated) to retrieve.
            /// </param>
            /// <param name='top'>
            /// The maximum number of records to retrieve.
            /// Valid only if $filter is specified.
            /// Defaults to 10.
            /// </param>
            /// <param name='orderby'>
            /// The aggregation to use for sorting results and the direction of the sort.
            /// Only one order can be specified.
            /// Examples: sum asc.
            /// </param>
            /// <param name='resultType'>
            /// Reduces the set of data collected. The syntax allowed depends on the
            /// operation. See the operation's description for details. Possible values
            /// include: 'Data', 'Metadata'
            /// </param>
            /// <param name='metricnamespace'>
            /// Metric namespace to query metric definitions for.
            /// </param>
            public static Response List(this IMetricsOperations operations, string resourceUri, ODataQuery<MetadataValue> odataQuery = default(ODataQuery<MetadataValue>), string timespan = default(string), System.TimeSpan? interval = default(System.TimeSpan?), string metricnames = default(string), string aggregation = default(string), int? top = default(int?), string orderby = default(string), ResultType? resultType = default(ResultType?), string metricnamespace = default(string))
            {
                return operations.ListAsync(resourceUri, odataQuery, timespan, interval, metricnames, aggregation, top, orderby, resultType, metricnamespace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// **Lists the metric values for a resource**.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='timespan'>
            /// The timespan of the query. It is a string with the following format
            /// 'startDateTime_ISO/endDateTime_ISO'.
            /// </param>
            /// <param name='interval'>
            /// The interval (i.e. timegrain) of the query.
            /// </param>
            /// <param name='metricnames'>
            /// The names of the metrics (comma separated) to retrieve. Special case: If a
            /// metricname itself has a comma in it then use %2 to indicate it. Eg:
            /// 'Metric,Name1' should be **'Metric%2Name1'**
            /// </param>
            /// <param name='aggregation'>
            /// The list of aggregation types (comma separated) to retrieve.
            /// </param>
            /// <param name='top'>
            /// The maximum number of records to retrieve.
            /// Valid only if $filter is specified.
            /// Defaults to 10.
            /// </param>
            /// <param name='orderby'>
            /// The aggregation to use for sorting results and the direction of the sort.
            /// Only one order can be specified.
            /// Examples: sum asc.
            /// </param>
            /// <param name='resultType'>
            /// Reduces the set of data collected. The syntax allowed depends on the
            /// operation. See the operation's description for details. Possible values
            /// include: 'Data', 'Metadata'
            /// </param>
            /// <param name='metricnamespace'>
            /// Metric namespace to query metric definitions for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Response> ListAsync(this IMetricsOperations operations, string resourceUri, ODataQuery<MetadataValue> odataQuery = default(ODataQuery<MetadataValue>), string timespan = default(string), System.TimeSpan? interval = default(System.TimeSpan?), string metricnames = default(string), string aggregation = default(string), int? top = default(int?), string orderby = default(string), ResultType? resultType = default(ResultType?), string metricnamespace = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceUri, odataQuery, timespan, interval, metricnames, aggregation, top, orderby, resultType, metricnamespace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
