// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The trigger that results in a scaling action.
    /// </summary>
    public partial class MetricTrigger
    {
        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        public MetricTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        /// <param name="metricName">the name of the metric that defines what
        /// the rule monitors.</param>
        /// <param name="metricResourceUri">the resource identifier of the
        /// resource the rule monitors.</param>
        /// <param name="timeGrain">the granularity of metrics the rule
        /// monitors. Must be one of the predefined values returned from metric
        /// definitions for the metric. Must be between 12 hours and 1
        /// minute.</param>
        /// <param name="statistic">the metric statistic type. How the metrics
        /// from multiple instances are combined. Possible values include:
        /// 'Average', 'Min', 'Max', 'Sum'</param>
        /// <param name="timeWindow">the range of time in which instance data
        /// is collected. This value must be greater than the delay in metric
        /// collection, which can vary from resource-to-resource. Must be
        /// between 12 hours and 5 minutes.</param>
        /// <param name="timeAggregation">time aggregation type. How the data
        /// that is collected should be combined over time. The default value
        /// is Average. Possible values include: 'Average', 'Minimum',
        /// 'Maximum', 'Total', 'Count', 'Last'</param>
        /// <param name="operatorProperty">the operator that is used to compare
        /// the metric data and the threshold. Possible values include:
        /// 'Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqual',
        /// 'LessThan', 'LessThanOrEqual'</param>
        /// <param name="threshold">the threshold of the metric that triggers
        /// the scale action.</param>
        /// <param name="metricNamespace">the namespace of the metric that
        /// defines what the rule monitors.</param>
        /// <param name="dimensions">List of dimension conditions. For example:
        /// [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].</param>
        /// <param name="dividePerInstance">a value indicating whether metric
        /// should divide per instance.</param>
        public MetricTrigger(string metricName, string metricResourceUri, System.TimeSpan timeGrain, MetricStatisticType statistic, System.TimeSpan timeWindow, TimeAggregationType timeAggregation, ComparisonOperationType operatorProperty, double threshold, string metricNamespace = default(string), IList<ScaleRuleMetricDimension> dimensions = default(IList<ScaleRuleMetricDimension>), bool? dividePerInstance = default(bool?))
        {
            MetricName = metricName;
            MetricNamespace = metricNamespace;
            MetricResourceUri = metricResourceUri;
            TimeGrain = timeGrain;
            Statistic = statistic;
            TimeWindow = timeWindow;
            TimeAggregation = timeAggregation;
            OperatorProperty = operatorProperty;
            Threshold = threshold;
            Dimensions = dimensions;
            DividePerInstance = dividePerInstance;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the metric that defines what the rule
        /// monitors.
        /// </summary>
        [JsonProperty(PropertyName = "metricName")]
        public string MetricName { get; set; }

        /// <summary>
        /// Gets or sets the namespace of the metric that defines what the rule
        /// monitors.
        /// </summary>
        [JsonProperty(PropertyName = "metricNamespace")]
        public string MetricNamespace { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the resource the rule
        /// monitors.
        /// </summary>
        [JsonProperty(PropertyName = "metricResourceUri")]
        public string MetricResourceUri { get; set; }

        /// <summary>
        /// Gets or sets the granularity of metrics the rule monitors. Must be
        /// one of the predefined values returned from metric definitions for
        /// the metric. Must be between 12 hours and 1 minute.
        /// </summary>
        [JsonProperty(PropertyName = "timeGrain")]
        public System.TimeSpan TimeGrain { get; set; }

        /// <summary>
        /// Gets or sets the metric statistic type. How the metrics from
        /// multiple instances are combined. Possible values include:
        /// 'Average', 'Min', 'Max', 'Sum'
        /// </summary>
        [JsonProperty(PropertyName = "statistic")]
        public MetricStatisticType Statistic { get; set; }

        /// <summary>
        /// Gets or sets the range of time in which instance data is collected.
        /// This value must be greater than the delay in metric collection,
        /// which can vary from resource-to-resource. Must be between 12 hours
        /// and 5 minutes.
        /// </summary>
        [JsonProperty(PropertyName = "timeWindow")]
        public System.TimeSpan TimeWindow { get; set; }

        /// <summary>
        /// Gets or sets time aggregation type. How the data that is collected
        /// should be combined over time. The default value is Average.
        /// Possible values include: 'Average', 'Minimum', 'Maximum', 'Total',
        /// 'Count', 'Last'
        /// </summary>
        [JsonProperty(PropertyName = "timeAggregation")]
        public TimeAggregationType TimeAggregation { get; set; }

        /// <summary>
        /// Gets or sets the operator that is used to compare the metric data
        /// and the threshold. Possible values include: 'Equals', 'NotEquals',
        /// 'GreaterThan', 'GreaterThanOrEqual', 'LessThan', 'LessThanOrEqual'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public ComparisonOperationType OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets the threshold of the metric that triggers the scale
        /// action.
        /// </summary>
        [JsonProperty(PropertyName = "threshold")]
        public double Threshold { get; set; }

        /// <summary>
        /// Gets or sets list of dimension conditions. For example:
        /// [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
        /// </summary>
        [JsonProperty(PropertyName = "dimensions")]
        public IList<ScaleRuleMetricDimension> Dimensions { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether metric should divide per
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "dividePerInstance")]
        public bool? DividePerInstance { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MetricName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricName");
            }
            if (MetricResourceUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricResourceUri");
            }
            if (Dimensions != null)
            {
                foreach (var element in Dimensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
