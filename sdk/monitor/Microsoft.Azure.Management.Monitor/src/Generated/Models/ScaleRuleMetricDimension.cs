// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Specifies an auto scale rule metric dimension.
    /// </summary>
    public partial class ScaleRuleMetricDimension
    {
        /// <summary>
        /// Initializes a new instance of the ScaleRuleMetricDimension class.
        /// </summary>
        public ScaleRuleMetricDimension()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScaleRuleMetricDimension class.
        /// </summary>
        /// <param name="dimensionName">Name of the dimension.</param>
        /// <param name="operatorProperty">the dimension operator. Only
        /// 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any
        /// of the values. 'NotEquals' being not equal to all of the values.
        /// Possible values include: 'Equals', 'NotEquals'</param>
        /// <param name="values">list of dimension values. For example:
        /// ["App1","App2"].</param>
        public ScaleRuleMetricDimension(string dimensionName, string operatorProperty, IList<string> values)
        {
            DimensionName = dimensionName;
            OperatorProperty = operatorProperty;
            Values = values;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the dimension.
        /// </summary>
        [JsonProperty(PropertyName = "DimensionName")]
        public string DimensionName { get; set; }

        /// <summary>
        /// Gets or sets the dimension operator. Only 'Equals' and 'NotEquals'
        /// are supported. 'Equals' being equal to any of the values.
        /// 'NotEquals' being not equal to all of the values. Possible values
        /// include: 'Equals', 'NotEquals'
        /// </summary>
        [JsonProperty(PropertyName = "Operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// Gets or sets list of dimension values. For example:
        /// ["App1","App2"].
        /// </summary>
        [JsonProperty(PropertyName = "Values")]
        public IList<string> Values { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DimensionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DimensionName");
            }
            if (OperatorProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (Values == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Values");
            }
        }
    }
}
