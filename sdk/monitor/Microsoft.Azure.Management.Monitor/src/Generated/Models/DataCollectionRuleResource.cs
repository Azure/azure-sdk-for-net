// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition of ARM tracked top level resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DataCollectionRuleResource : IResource
    {
        /// <summary>
        /// Initializes a new instance of the DataCollectionRuleResource class.
        /// </summary>
        public DataCollectionRuleResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataCollectionRuleResource class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives.</param>
        /// <param name="description">Description of the data collection
        /// rule.</param>
        /// <param name="immutableId">The immutable ID of this data collection
        /// rule. This property is READ-ONLY.</param>
        /// <param name="dataSources">The specification of data sources.
        /// This property is optional and can be omitted if the rule is meant
        /// to be used via direct calls to the provisioned endpoint.</param>
        /// <param name="destinations">The specification of
        /// destinations.</param>
        /// <param name="dataFlows">The specification of data flows.</param>
        /// <param name="provisioningState">The resource provisioning state.
        /// Possible values include: 'Creating', 'Updating', 'Deleting',
        /// 'Succeeded', 'Failed'</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="kind">The kind of the resource. Possible values
        /// include: 'Linux', 'Windows'</param>
        /// <param name="id">Fully qualified ID of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="etag">Resource entity tag (ETag).</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the resource.</param>
        public DataCollectionRuleResource(string location, string description = default(string), string immutableId = default(string), DataCollectionRuleDataSources dataSources = default(DataCollectionRuleDataSources), DataCollectionRuleDestinations destinations = default(DataCollectionRuleDestinations), IList<DataFlow> dataFlows = default(IList<DataFlow>), string provisioningState = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string kind = default(string), string id = default(string), string name = default(string), string type = default(string), string etag = default(string), DataCollectionRuleResourceSystemData systemData = default(DataCollectionRuleResourceSystemData))
        {
            Description = description;
            ImmutableId = immutableId;
            DataSources = dataSources;
            Destinations = destinations;
            DataFlows = dataFlows;
            ProvisioningState = provisioningState;
            Location = location;
            Tags = tags;
            Kind = kind;
            Id = id;
            Name = name;
            Type = type;
            Etag = etag;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description of the data collection rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the immutable ID of this data collection rule. This property
        /// is READ-ONLY.
        /// </summary>
        [JsonProperty(PropertyName = "properties.immutableId")]
        public string ImmutableId { get; private set; }

        /// <summary>
        /// Gets or sets the specification of data sources.
        /// This property is optional and can be omitted if the rule is meant
        /// to be used via direct calls to the provisioned endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataSources")]
        public DataCollectionRuleDataSources DataSources { get; set; }

        /// <summary>
        /// Gets or sets the specification of destinations.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destinations")]
        public DataCollectionRuleDestinations Destinations { get; set; }

        /// <summary>
        /// Gets or sets the specification of data flows.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataFlows")]
        public IList<DataFlow> DataFlows { get; set; }

        /// <summary>
        /// Gets the resource provisioning state. Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the geo-location where the resource lives.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets the kind of the resource. Possible values include:
        /// 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets fully qualified ID of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets resource entity tag (ETag).
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets metadata pertaining to creation and last modification of the
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public DataCollectionRuleResourceSystemData SystemData { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }
    }
}
