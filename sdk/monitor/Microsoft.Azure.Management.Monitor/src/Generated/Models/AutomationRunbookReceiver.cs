// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Azure Automation Runbook notification receiver.
    /// </summary>
    public partial class AutomationRunbookReceiver
    {
        /// <summary>
        /// Initializes a new instance of the AutomationRunbookReceiver class.
        /// </summary>
        public AutomationRunbookReceiver()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AutomationRunbookReceiver class.
        /// </summary>
        /// <param name="automationAccountId">The Azure automation account Id
        /// which holds this runbook and authenticate to Azure
        /// resource.</param>
        /// <param name="runbookName">The name for this runbook.</param>
        /// <param name="webhookResourceId">The resource id for webhook linked
        /// to this runbook.</param>
        /// <param name="isGlobalRunbook">Indicates whether this instance is
        /// global runbook.</param>
        /// <param name="name">Indicates name of the webhook.</param>
        /// <param name="serviceUri">The URI where webhooks should be
        /// sent.</param>
        /// <param name="useCommonAlertSchema">Indicates whether to use common
        /// alert schema.</param>
        public AutomationRunbookReceiver(string automationAccountId, string runbookName, string webhookResourceId, bool isGlobalRunbook, string name = default(string), string serviceUri = default(string), bool? useCommonAlertSchema = default(bool?))
        {
            AutomationAccountId = automationAccountId;
            RunbookName = runbookName;
            WebhookResourceId = webhookResourceId;
            IsGlobalRunbook = isGlobalRunbook;
            Name = name;
            ServiceUri = serviceUri;
            UseCommonAlertSchema = useCommonAlertSchema;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Azure automation account Id which holds this
        /// runbook and authenticate to Azure resource.
        /// </summary>
        [JsonProperty(PropertyName = "automationAccountId")]
        public string AutomationAccountId { get; set; }

        /// <summary>
        /// Gets or sets the name for this runbook.
        /// </summary>
        [JsonProperty(PropertyName = "runbookName")]
        public string RunbookName { get; set; }

        /// <summary>
        /// Gets or sets the resource id for webhook linked to this runbook.
        /// </summary>
        [JsonProperty(PropertyName = "webhookResourceId")]
        public string WebhookResourceId { get; set; }

        /// <summary>
        /// Gets or sets indicates whether this instance is global runbook.
        /// </summary>
        [JsonProperty(PropertyName = "isGlobalRunbook")]
        public bool IsGlobalRunbook { get; set; }

        /// <summary>
        /// Gets or sets indicates name of the webhook.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the URI where webhooks should be sent.
        /// </summary>
        [JsonProperty(PropertyName = "serviceUri")]
        public string ServiceUri { get; set; }

        /// <summary>
        /// Gets or sets indicates whether to use common alert schema.
        /// </summary>
        [JsonProperty(PropertyName = "useCommonAlertSchema")]
        public bool? UseCommonAlertSchema { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AutomationAccountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AutomationAccountId");
            }
            if (RunbookName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RunbookName");
            }
            if (WebhookResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WebhookResourceId");
            }
        }
    }
}
