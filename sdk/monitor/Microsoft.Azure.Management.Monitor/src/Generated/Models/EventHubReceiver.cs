// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An Event hub receiver.
    /// </summary>
    public partial class EventHubReceiver
    {
        /// <summary>
        /// Initializes a new instance of the EventHubReceiver class.
        /// </summary>
        public EventHubReceiver()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventHubReceiver class.
        /// </summary>
        /// <param name="name">The name of the Event hub receiver. Names must
        /// be unique across all receivers within an action group.</param>
        /// <param name="eventHubNameSpace">The Event Hub namespace</param>
        /// <param name="eventHubName">The name of the specific Event Hub
        /// queue</param>
        /// <param name="subscriptionId">The Id for the subscription containing
        /// this event hub</param>
        /// <param name="useCommonAlertSchema">Indicates whether to use common
        /// alert schema.</param>
        /// <param name="tenantId">The tenant Id for the subscription
        /// containing this event hub</param>
        public EventHubReceiver(string name, string eventHubNameSpace, string eventHubName, string subscriptionId, bool? useCommonAlertSchema = default(bool?), string tenantId = default(string))
        {
            Name = name;
            EventHubNameSpace = eventHubNameSpace;
            EventHubName = eventHubName;
            UseCommonAlertSchema = useCommonAlertSchema;
            TenantId = tenantId;
            SubscriptionId = subscriptionId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the Event hub receiver. Names must be
        /// unique across all receivers within an action group.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Event Hub namespace
        /// </summary>
        [JsonProperty(PropertyName = "eventHubNameSpace")]
        public string EventHubNameSpace { get; set; }

        /// <summary>
        /// Gets or sets the name of the specific Event Hub queue
        /// </summary>
        [JsonProperty(PropertyName = "eventHubName")]
        public string EventHubName { get; set; }

        /// <summary>
        /// Gets or sets indicates whether to use common alert schema.
        /// </summary>
        [JsonProperty(PropertyName = "useCommonAlertSchema")]
        public bool? UseCommonAlertSchema { get; set; }

        /// <summary>
        /// Gets or sets the tenant Id for the subscription containing this
        /// event hub
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets the Id for the subscription containing this event hub
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (EventHubNameSpace == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventHubNameSpace");
            }
            if (EventHubName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventHubName");
            }
            if (SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubscriptionId");
            }
        }
    }
}
