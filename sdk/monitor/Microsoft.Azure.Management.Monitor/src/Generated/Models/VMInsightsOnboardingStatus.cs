// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VM Insights onboarding status for a resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VMInsightsOnboardingStatus : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the VMInsightsOnboardingStatus class.
        /// </summary>
        public VMInsightsOnboardingStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMInsightsOnboardingStatus class.
        /// </summary>
        /// <param name="resourceId">Azure Resource Manager identifier of the
        /// resource whose onboarding status is being represented.</param>
        /// <param name="onboardingStatus">The onboarding status for the
        /// resource. Note that, a higher level scope, e.g., resource group or
        /// subscription, is considered onboarded if at least one resource
        /// under it is onboarded. Possible values include: 'onboarded',
        /// 'notOnboarded', 'unknown'</param>
        /// <param name="dataStatus">The status of VM Insights data from the
        /// resource. When reported as `present` the data array will contain
        /// information about the data containers to which data for the
        /// specified resource is being routed. Possible values include:
        /// 'present', 'notPresent'</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="data">Containers that currently store VM Insights data
        /// for the specified resource.</param>
        public VMInsightsOnboardingStatus(string resourceId, string onboardingStatus, string dataStatus, string id = default(string), string name = default(string), string type = default(string), IList<DataContainer> data = default(IList<DataContainer>))
            : base(id, name, type)
        {
            ResourceId = resourceId;
            OnboardingStatus = onboardingStatus;
            DataStatus = dataStatus;
            Data = data;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure Resource Manager identifier of the resource
        /// whose onboarding status is being represented.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the onboarding status for the resource. Note that, a
        /// higher level scope, e.g., resource group or subscription, is
        /// considered onboarded if at least one resource under it is
        /// onboarded. Possible values include: 'onboarded', 'notOnboarded',
        /// 'unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.onboardingStatus")]
        public string OnboardingStatus { get; set; }

        /// <summary>
        /// Gets or sets the status of VM Insights data from the resource. When
        /// reported as `present` the data array will contain information about
        /// the data containers to which data for the specified resource is
        /// being routed. Possible values include: 'present', 'notPresent'
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataStatus")]
        public string DataStatus { get; set; }

        /// <summary>
        /// Gets or sets containers that currently store VM Insights data for
        /// the specified resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.data")]
        public IList<DataContainer> Data { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceId");
            }
            if (OnboardingStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OnboardingStatus");
            }
            if (DataStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataStatus");
            }
            if (Data != null)
            {
                foreach (var element in Data)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
