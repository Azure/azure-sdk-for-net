// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition of which streams are sent to which destinations.
    /// </summary>
    public partial class DataFlow
    {
        /// <summary>
        /// Initializes a new instance of the DataFlow class.
        /// </summary>
        public DataFlow()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataFlow class.
        /// </summary>
        /// <param name="streams">List of streams for this data flow.</param>
        /// <param name="destinations">List of destinations for this data
        /// flow.</param>
        public DataFlow(IList<string> streams, IList<string> destinations)
        {
            Streams = streams;
            Destinations = destinations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of streams for this data flow.
        /// </summary>
        [JsonProperty(PropertyName = "streams")]
        public IList<string> Streams { get; set; }

        /// <summary>
        /// Gets or sets list of destinations for this data flow.
        /// </summary>
        [JsonProperty(PropertyName = "destinations")]
        public IList<string> Destinations { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Streams == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Streams");
            }
            if (Destinations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Destinations");
            }
        }
    }
}
