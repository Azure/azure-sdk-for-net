// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for AggregationType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AggregationType
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "Average")]
        Average,
        [EnumMember(Value = "Count")]
        Count,
        [EnumMember(Value = "Minimum")]
        Minimum,
        [EnumMember(Value = "Maximum")]
        Maximum,
        [EnumMember(Value = "Total")]
        Total
    }
    internal static class AggregationTypeEnumExtension
    {
        internal static string ToSerializedValue(this AggregationType? value)
        {
            return value == null ? null : ((AggregationType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this AggregationType value)
        {
            switch( value )
            {
                case AggregationType.None:
                    return "None";
                case AggregationType.Average:
                    return "Average";
                case AggregationType.Count:
                    return "Count";
                case AggregationType.Minimum:
                    return "Minimum";
                case AggregationType.Maximum:
                    return "Maximum";
                case AggregationType.Total:
                    return "Total";
            }
            return null;
        }

        internal static AggregationType? ParseAggregationType(this string value)
        {
            switch( value )
            {
                case "None":
                    return AggregationType.None;
                case "Average":
                    return AggregationType.Average;
                case "Count":
                    return AggregationType.Count;
                case "Minimum":
                    return AggregationType.Minimum;
                case "Maximum":
                    return AggregationType.Maximum;
                case "Total":
                    return AggregationType.Total;
            }
            return null;
        }
    }
}
