// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition of which custom log files will be collected by this data
    /// collection rule
    /// </summary>
    public partial class LogFilesDataSource
    {
        /// <summary>
        /// Initializes a new instance of the LogFilesDataSource class.
        /// </summary>
        public LogFilesDataSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LogFilesDataSource class.
        /// </summary>
        /// <param name="streams">List of streams that this data source will be
        /// sent to.
        /// A stream indicates what schema will be used for this data
        /// source</param>
        /// <param name="filePatterns">File Patterns where the log files are
        /// located</param>
        /// <param name="settings">The log files specific settings.</param>
        /// <param name="name">A friendly name for the data source.
        /// This name should be unique across all data sources (regardless of
        /// type) within the data collection rule.</param>
        public LogFilesDataSource(IList<string> streams, IList<string> filePatterns, LogFilesDataSourceSettings settings = default(LogFilesDataSourceSettings), string name = default(string))
        {
            Streams = streams;
            FilePatterns = filePatterns;
            Settings = settings;
            Name = name;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for LogFilesDataSource class.
        /// </summary>
        static LogFilesDataSource()
        {
            Format = "text";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of streams that this data source will be sent to.
        /// A stream indicates what schema will be used for this data source
        /// </summary>
        [JsonProperty(PropertyName = "streams")]
        public IList<string> Streams { get; set; }

        /// <summary>
        /// Gets or sets file Patterns where the log files are located
        /// </summary>
        [JsonProperty(PropertyName = "filePatterns")]
        public IList<string> FilePatterns { get; set; }

        /// <summary>
        /// Gets or sets the log files specific settings.
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public LogFilesDataSourceSettings Settings { get; set; }

        /// <summary>
        /// Gets or sets a friendly name for the data source.
        /// This name should be unique across all data sources (regardless of
        /// type) within the data collection rule.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The data format of the log files
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public static string Format { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Streams == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Streams");
            }
            if (FilePatterns == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FilePatterns");
            }
        }
    }
}
