// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Log Search Rule resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LogSearchRuleResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the LogSearchRuleResource class.
        /// </summary>
        public LogSearchRuleResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LogSearchRuleResource class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="source">Data Source against which rule will Query
        /// Data</param>
        /// <param name="action">Action needs to be taken on rule
        /// execution.</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="description">The description of the Log Search
        /// rule.</param>
        /// <param name="enabled">The flag which indicates whether the Log
        /// Search rule is enabled. Value should be true or false. Possible
        /// values include: 'true', 'false'</param>
        /// <param name="lastUpdatedTime">Last time the rule was updated in
        /// IS08601 format.</param>
        /// <param name="provisioningState">Provisioning state of the scheduled
        /// query rule. Possible values include: 'Succeeded', 'Deploying',
        /// 'Canceled', 'Failed'</param>
        /// <param name="schedule">Schedule (Frequency, Time Window) for rule.
        /// Required for action type - AlertingAction</param>
        public LogSearchRuleResource(string location, Source source, Action action, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string description = default(string), string enabled = default(string), System.DateTime? lastUpdatedTime = default(System.DateTime?), string provisioningState = default(string), Schedule schedule = default(Schedule))
            : base(location, id, name, type, tags)
        {
            Description = description;
            Enabled = enabled;
            LastUpdatedTime = lastUpdatedTime;
            ProvisioningState = provisioningState;
            Source = source;
            Schedule = schedule;
            Action = action;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description of the Log Search rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the flag which indicates whether the Log Search rule
        /// is enabled. Value should be true or false. Possible values include:
        /// 'true', 'false'
        /// </summary>
        [JsonProperty(PropertyName = "properties.enabled")]
        public string Enabled { get; set; }

        /// <summary>
        /// Gets last time the rule was updated in IS08601 format.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastUpdatedTime")]
        public System.DateTime? LastUpdatedTime { get; private set; }

        /// <summary>
        /// Gets provisioning state of the scheduled query rule. Possible
        /// values include: 'Succeeded', 'Deploying', 'Canceled', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets data Source against which rule will Query Data
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public Source Source { get; set; }

        /// <summary>
        /// Gets or sets schedule (Frequency, Time Window) for rule. Required
        /// for action type - AlertingAction
        /// </summary>
        [JsonProperty(PropertyName = "properties.schedule")]
        public Schedule Schedule { get; set; }

        /// <summary>
        /// Gets or sets action needs to be taken on rule execution.
        /// </summary>
        [JsonProperty(PropertyName = "properties.action")]
        public Action Action { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Action == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Action");
            }
            if (Source != null)
            {
                Source.Validate();
            }
            if (Schedule != null)
            {
                Schedule.Validate();
            }
        }
    }
}
