// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RecurrenceFrequency.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RecurrenceFrequency
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "Second")]
        Second,
        [EnumMember(Value = "Minute")]
        Minute,
        [EnumMember(Value = "Hour")]
        Hour,
        [EnumMember(Value = "Day")]
        Day,
        [EnumMember(Value = "Week")]
        Week,
        [EnumMember(Value = "Month")]
        Month,
        [EnumMember(Value = "Year")]
        Year
    }
    internal static class RecurrenceFrequencyEnumExtension
    {
        internal static string ToSerializedValue(this RecurrenceFrequency? value)
        {
            return value == null ? null : ((RecurrenceFrequency)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RecurrenceFrequency value)
        {
            switch( value )
            {
                case RecurrenceFrequency.None:
                    return "None";
                case RecurrenceFrequency.Second:
                    return "Second";
                case RecurrenceFrequency.Minute:
                    return "Minute";
                case RecurrenceFrequency.Hour:
                    return "Hour";
                case RecurrenceFrequency.Day:
                    return "Day";
                case RecurrenceFrequency.Week:
                    return "Week";
                case RecurrenceFrequency.Month:
                    return "Month";
                case RecurrenceFrequency.Year:
                    return "Year";
            }
            return null;
        }

        internal static RecurrenceFrequency? ParseRecurrenceFrequency(this string value)
        {
            switch( value )
            {
                case "None":
                    return RecurrenceFrequency.None;
                case "Second":
                    return RecurrenceFrequency.Second;
                case "Minute":
                    return RecurrenceFrequency.Minute;
                case "Hour":
                    return RecurrenceFrequency.Hour;
                case "Day":
                    return RecurrenceFrequency.Day;
                case "Week":
                    return RecurrenceFrequency.Week;
                case "Month":
                    return RecurrenceFrequency.Month;
                case "Year":
                    return RecurrenceFrequency.Year;
            }
            return null;
        }
    }
}
