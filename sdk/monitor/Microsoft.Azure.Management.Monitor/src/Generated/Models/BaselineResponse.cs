// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The response to a baseline query.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BaselineResponse
    {
        /// <summary>
        /// Initializes a new instance of the BaselineResponse class.
        /// </summary>
        public BaselineResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BaselineResponse class.
        /// </summary>
        /// <param name="id">the metric baseline Id.</param>
        /// <param name="type">the resource type of the baseline
        /// resource.</param>
        /// <param name="name">the name and the display name of the metric,
        /// i.e. it is localizable string.</param>
        /// <param name="timespan">The timespan for which the data was
        /// retrieved. Its value consists of two datetimes concatenated,
        /// separated by '/'.  This may be adjusted in the future and returned
        /// back from what was originally requested.</param>
        /// <param name="interval">The interval (window size) for which the
        /// metric data was returned in.  This may be adjusted in the future
        /// and returned back from what was originally requested.  This is not
        /// present if a metadata request was made.</param>
        /// <param name="aggregation">The aggregation type of the
        /// metric.</param>
        /// <param name="timestamps">the array of timestamps of the
        /// baselines.</param>
        /// <param name="baseline">the baseline values for each
        /// sensitivity.</param>
        /// <param name="metadata">the baseline metadata values.</param>
        public BaselineResponse(string id = default(string), string type = default(string), LocalizableString name = default(LocalizableString), string timespan = default(string), System.TimeSpan? interval = default(System.TimeSpan?), string aggregation = default(string), IList<System.DateTime?> timestamps = default(IList<System.DateTime?>), IList<Baseline> baseline = default(IList<Baseline>), IList<BaselineMetadataValue> metadata = default(IList<BaselineMetadataValue>))
        {
            Id = id;
            Type = type;
            Name = name;
            Timespan = timespan;
            Interval = interval;
            Aggregation = aggregation;
            Timestamps = timestamps;
            Baseline = baseline;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the metric baseline Id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the resource type of the baseline resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the name and the display name of the metric, i.e. it is
        /// localizable string.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public LocalizableString Name { get; private set; }

        /// <summary>
        /// Gets or sets the timespan for which the data was retrieved. Its
        /// value consists of two datetimes concatenated, separated by '/'.
        /// This may be adjusted in the future and returned back from what was
        /// originally requested.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timespan")]
        public string Timespan { get; set; }

        /// <summary>
        /// Gets or sets the interval (window size) for which the metric data
        /// was returned in.  This may be adjusted in the future and returned
        /// back from what was originally requested.  This is not present if a
        /// metadata request was made.
        /// </summary>
        [JsonProperty(PropertyName = "properties.interval")]
        public System.TimeSpan? Interval { get; set; }

        /// <summary>
        /// Gets or sets the aggregation type of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "properties.aggregation")]
        public string Aggregation { get; set; }

        /// <summary>
        /// Gets or sets the array of timestamps of the baselines.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timestamps")]
        public IList<System.DateTime?> Timestamps { get; set; }

        /// <summary>
        /// Gets or sets the baseline values for each sensitivity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.baseline")]
        public IList<Baseline> Baseline { get; set; }

        /// <summary>
        /// Gets or sets the baseline metadata values.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public IList<BaselineMetadataValue> Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                Name.Validate();
            }
            if (Baseline != null)
            {
                foreach (var element in Baseline)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Metadata != null)
            {
                foreach (var element1 in Metadata)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
