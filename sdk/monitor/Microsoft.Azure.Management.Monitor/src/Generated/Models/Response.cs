// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The response to a metrics query.
    /// </summary>
    public partial class Response
    {
        /// <summary>
        /// Initializes a new instance of the Response class.
        /// </summary>
        public Response()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Response class.
        /// </summary>
        /// <param name="timespan">The timespan for which the data was
        /// retrieved. Its value consists of two datetimes concatenated,
        /// separated by '/'.  This may be adjusted in the future and returned
        /// back from what was originally requested.</param>
        /// <param name="value">the value of the collection.</param>
        /// <param name="cost">The integer value representing the relative cost
        /// of the query.</param>
        /// <param name="interval">The interval (window size) for which the
        /// metric data was returned in.  This may be adjusted in the future
        /// and returned back from what was originally requested.  This is not
        /// present if a metadata request was made.</param>
        /// <param name="namespaceProperty">The namespace of the metrics being
        /// queried</param>
        /// <param name="resourceregion">The region of the resource being
        /// queried for metrics.</param>
        public Response(string timespan, IList<Metric> value, double? cost = default(double?), System.TimeSpan? interval = default(System.TimeSpan?), string namespaceProperty = default(string), string resourceregion = default(string))
        {
            Cost = cost;
            Timespan = timespan;
            Interval = interval;
            NamespaceProperty = namespaceProperty;
            Resourceregion = resourceregion;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the integer value representing the relative cost of
        /// the query.
        /// </summary>
        [JsonProperty(PropertyName = "cost")]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or sets the timespan for which the data was retrieved. Its
        /// value consists of two datetimes concatenated, separated by '/'.
        /// This may be adjusted in the future and returned back from what was
        /// originally requested.
        /// </summary>
        [JsonProperty(PropertyName = "timespan")]
        public string Timespan { get; set; }

        /// <summary>
        /// Gets or sets the interval (window size) for which the metric data
        /// was returned in.  This may be adjusted in the future and returned
        /// back from what was originally requested.  This is not present if a
        /// metadata request was made.
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public System.TimeSpan? Interval { get; set; }

        /// <summary>
        /// Gets or sets the namespace of the metrics being queried
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Gets or sets the region of the resource being queried for metrics.
        /// </summary>
        [JsonProperty(PropertyName = "resourceregion")]
        public string Resourceregion { get; set; }

        /// <summary>
        /// Gets or sets the value of the collection.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<Metric> Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Timespan == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Timespan");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (Cost < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Cost", 0);
            }
            if (Value != null)
            {
                foreach (var element in Value)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
