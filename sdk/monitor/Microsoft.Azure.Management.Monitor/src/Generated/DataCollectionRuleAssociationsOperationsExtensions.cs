// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataCollectionRuleAssociationsOperations.
    /// </summary>
    public static partial class DataCollectionRuleAssociationsOperationsExtensions
    {
            /// <summary>
            /// Lists associations for the specified resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            public static IPage<DataCollectionRuleAssociationProxyOnlyResource> ListByResource(this IDataCollectionRuleAssociationsOperations operations, string resourceUri)
            {
                return operations.ListByResourceAsync(resourceUri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists associations for the specified resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataCollectionRuleAssociationProxyOnlyResource>> ListByResourceAsync(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceWithHttpMessagesAsync(resourceUri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists associations for the specified data collection rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dataCollectionRuleName'>
            /// The name of the data collection rule. The name is case insensitive.
            /// </param>
            public static IPage<DataCollectionRuleAssociationProxyOnlyResource> ListByRule(this IDataCollectionRuleAssociationsOperations operations, string resourceGroupName, string dataCollectionRuleName)
            {
                return operations.ListByRuleAsync(resourceGroupName, dataCollectionRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists associations for the specified data collection rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='dataCollectionRuleName'>
            /// The name of the data collection rule. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataCollectionRuleAssociationProxyOnlyResource>> ListByRuleAsync(this IDataCollectionRuleAssociationsOperations operations, string resourceGroupName, string dataCollectionRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByRuleWithHttpMessagesAsync(resourceGroupName, dataCollectionRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='associationName'>
            /// The name of the association. The name is case insensitive.
            /// </param>
            public static DataCollectionRuleAssociationProxyOnlyResource Get(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, string associationName)
            {
                return operations.GetAsync(resourceUri, associationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='associationName'>
            /// The name of the association. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCollectionRuleAssociationProxyOnlyResource> GetAsync(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, string associationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, associationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='associationName'>
            /// The name of the association. The name is case insensitive.
            /// </param>
            /// <param name='body'>
            /// The payload
            /// </param>
            public static DataCollectionRuleAssociationProxyOnlyResource Create(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, string associationName, DataCollectionRuleAssociationProxyOnlyResource body = default(DataCollectionRuleAssociationProxyOnlyResource))
            {
                return operations.CreateAsync(resourceUri, associationName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='associationName'>
            /// The name of the association. The name is case insensitive.
            /// </param>
            /// <param name='body'>
            /// The payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCollectionRuleAssociationProxyOnlyResource> CreateAsync(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, string associationName, DataCollectionRuleAssociationProxyOnlyResource body = default(DataCollectionRuleAssociationProxyOnlyResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceUri, associationName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='associationName'>
            /// The name of the association. The name is case insensitive.
            /// </param>
            public static void Delete(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, string associationName)
            {
                operations.DeleteAsync(resourceUri, associationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an association.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The identifier of the resource.
            /// </param>
            /// <param name='associationName'>
            /// The name of the association. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataCollectionRuleAssociationsOperations operations, string resourceUri, string associationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceUri, associationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists associations for the specified resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataCollectionRuleAssociationProxyOnlyResource> ListByResourceNext(this IDataCollectionRuleAssociationsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists associations for the specified resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataCollectionRuleAssociationProxyOnlyResource>> ListByResourceNextAsync(this IDataCollectionRuleAssociationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists associations for the specified data collection rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataCollectionRuleAssociationProxyOnlyResource> ListByRuleNext(this IDataCollectionRuleAssociationsOperations operations, string nextPageLink)
            {
                return operations.ListByRuleNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists associations for the specified data collection rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataCollectionRuleAssociationProxyOnlyResource>> ListByRuleNextAsync(this IDataCollectionRuleAssociationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByRuleNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
