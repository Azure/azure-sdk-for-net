// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitor.OpenTelemetry.Exporter.Models
{
    internal partial class MetricDataPoint : IUtf8JsonSerializable, IJsonModel<MetricDataPoint>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MetricDataPoint>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<MetricDataPoint>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MetricDataPoint>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(MetricDataPoint)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("ns"u8);
                writer.WriteStringValue(Namespace);
            }
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(DataPointType))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(DataPointType.Value.ToString());
            }
            writer.WritePropertyName("value"u8);
            writer.WriteNumberValue(Value);
            if (Optional.IsDefined(Count))
            {
                if (Count != null)
                {
                    writer.WritePropertyName("count"u8);
                    writer.WriteNumberValue(Count.Value);
                }
                else
                {
                    writer.WriteNull("count");
                }
            }
            if (Optional.IsDefined(Min))
            {
                if (Min != null)
                {
                    writer.WritePropertyName("min"u8);
                    writer.WriteNumberValue(Min.Value);
                }
                else
                {
                    writer.WriteNull("min");
                }
            }
            if (Optional.IsDefined(Max))
            {
                if (Max != null)
                {
                    writer.WritePropertyName("max"u8);
                    writer.WriteNumberValue(Max.Value);
                }
                else
                {
                    writer.WriteNull("max");
                }
            }
            if (Optional.IsDefined(StdDev))
            {
                if (StdDev != null)
                {
                    writer.WritePropertyName("stdDev"u8);
                    writer.WriteNumberValue(StdDev.Value);
                }
                else
                {
                    writer.WriteNull("stdDev");
                }
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        MetricDataPoint IJsonModel<MetricDataPoint>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MetricDataPoint>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(MetricDataPoint)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMetricDataPoint(document.RootElement, options);
        }

        internal static MetricDataPoint DeserializeMetricDataPoint(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> ns = default;
            string name = default;
            Optional<DataPointType> kind = default;
            double value = default;
            Optional<int?> count = default;
            Optional<double?> min = default;
            Optional<double?> max = default;
            Optional<double?> stdDev = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ns"u8))
                {
                    ns = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kind = new DataPointType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        count = null;
                        continue;
                    }
                    count = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("min"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        min = null;
                        continue;
                    }
                    min = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("max"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        max = null;
                        continue;
                    }
                    max = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("stdDev"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stdDev = null;
                        continue;
                    }
                    stdDev = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new MetricDataPoint(ns.Value, name, Optional.ToNullable(kind), value, Optional.ToNullable(count), Optional.ToNullable(min), Optional.ToNullable(max), Optional.ToNullable(stdDev), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MetricDataPoint>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MetricDataPoint>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(MetricDataPoint)} does not support '{options.Format}' format.");
            }
        }

        MetricDataPoint IPersistableModel<MetricDataPoint>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MetricDataPoint>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeMetricDataPoint(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(MetricDataPoint)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<MetricDataPoint>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
