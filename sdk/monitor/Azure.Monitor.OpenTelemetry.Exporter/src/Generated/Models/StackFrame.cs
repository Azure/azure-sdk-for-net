// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Monitor.OpenTelemetry.Exporter.Models
{
    /// <summary> Stack frame information. </summary>
    internal partial class StackFrame
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StackFrame"/>. </summary>
        /// <param name="level"></param>
        /// <param name="method"> Method name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="method"/> is null. </exception>
        public StackFrame(int level, string method)
        {
            Argument.AssertNotNull(method, nameof(method));

            Level = level;
            Method = method;
        }

        /// <summary> Initializes a new instance of <see cref="StackFrame"/>. </summary>
        /// <param name="level"></param>
        /// <param name="method"> Method name. </param>
        /// <param name="assembly"> Name of the assembly (dll, jar, etc.) containing this function. </param>
        /// <param name="fileName"> File name or URL of the method implementation. </param>
        /// <param name="line"> Line number of the code implementation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StackFrame(int level, string method, string assembly, string fileName, int? line, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Level = level;
            Method = method;
            Assembly = assembly;
            FileName = fileName;
            Line = line;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="StackFrame"/> for deserialization. </summary>
        internal StackFrame()
        {
        }

        /// <summary> Gets the level. </summary>
        public int Level { get; }
        /// <summary> Method name. </summary>
        public string Method { get; }
        /// <summary> Name of the assembly (dll, jar, etc.) containing this function. </summary>
        public string Assembly { get; set; }
        /// <summary> File name or URL of the method implementation. </summary>
        public string FileName { get; set; }
        /// <summary> Line number of the code implementation. </summary>
        public int? Line { get; set; }
    }
}
