// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Monitor.Query.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class MonitorQueryModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.LogsQueryResult"/>. </summary>
        /// <param name="allTables"> The results of the query in tabular format. </param>
        /// <returns> A new <see cref="Models.LogsQueryResult"/> instance for mocking. </returns>
        public static LogsQueryResult LogsQueryResult(IEnumerable<LogsTable> allTables = null)
        {
            allTables ??= new List<LogsTable>();

            return new LogsQueryResult(allTables?.ToList(), statistics: default, visualization: default, error: default);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogsTable"/>. </summary>
        /// <param name="name"> The name of the table. </param>
        /// <param name="columns"> The list of columns in this table. </param>
        /// <returns> A new <see cref="Models.LogsTable"/> instance for mocking. </returns>
        public static LogsTable LogsTable(string name = null, IEnumerable<LogsTableColumn> columns = null)
        {
            columns ??= new List<LogsTableColumn>();

            return new LogsTable(name, columns?.ToList(), internalRows: default);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogsTableColumn"/>. </summary>
        /// <param name="name"> The name of this column. </param>
        /// <param name="type"> The data type of this column. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.LogsTableColumn"/> instance for mocking. </returns>
        public static LogsTableColumn LogsTableColumn(string name = null, LogsColumnType type = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new LogsTableColumn(name, type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogsBatchQueryResult"/>. </summary>
        /// <param name="allTables"> The results of the query in tabular format. </param>
        /// <returns> A new <see cref="Models.LogsBatchQueryResult"/> instance for mocking. </returns>
        public static LogsBatchQueryResult LogsBatchQueryResult(IEnumerable<LogsTable> allTables = null)
        {
            allTables ??= new List<LogsTable>();

            return new LogsBatchQueryResult(allTables?.ToList(), statistics: default, visualization: default, error: default);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricsBatchResult"/>. </summary>
        /// <param name="values"> The collection of metric data responses per resource, per metric. </param>
        /// <returns> A new <see cref="Models.MetricsBatchResult"/> instance for mocking. </returns>
        public static MetricsBatchResult MetricsBatchResult(IEnumerable<MetricsBatchResultValues> values = null)
        {
            values ??= new List<MetricsBatchResultValues>();

            return new MetricsBatchResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricsBatchResultValues"/>. </summary>
        /// <param name="startTime"> The start time, in datetime format, for which the data was retrieved. </param>
        /// <param name="endTime"> The end time, in datetime format, for which the data was retrieved. </param>
        /// <param name="interval"> The interval (window size) for which the metric data was returned in. Follows the IS8601/RFC3339 duration format (e.g. 'P1D' for 1 day). This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. </param>
        /// <param name="namespace"> The namespace of the metrics been queried. </param>
        /// <param name="resourceRegion"> The region of the resource been queried for metrics. </param>
        /// <param name="resourceId"> The resource that has been queried for metrics. </param>
        /// <param name="metrics"> The value of the collection. </param>
        /// <returns> A new <see cref="Models.MetricsBatchResultValues"/> instance for mocking. </returns>
        public static MetricsBatchResultValues MetricsBatchResultValues(DateTimeOffset startTime = default, DateTimeOffset endTime = default, TimeSpan? interval = null, string @namespace = null, AzureLocation resourceRegion = default, ResourceIdentifier resourceId = null, IEnumerable<MetricResult> metrics = null)
        {
            metrics ??= new List<MetricResult>();

            return new MetricsBatchResultValues(startTime, endTime, interval, @namespace, resourceRegion, resourceId, metrics?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricAvailability"/>. </summary>
        /// <param name="granularity"> the time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. </param>
        /// <param name="retention"> the retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc. </param>
        /// <returns> A new <see cref="Models.MetricAvailability"/> instance for mocking. </returns>
        public static MetricAvailability MetricAvailability(TimeSpan? granularity = null, TimeSpan? retention = null)
        {
            return new MetricAvailability(granularity, retention);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricsQueryResult"/>. </summary>
        /// <param name="cost"> The integer value representing the relative cost of the query. </param>
        /// <param name="granularity">
        /// The interval (window size) for which the metric data was returned in ISO 8601 duration format with a special case for 'FULL' value that returns single datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*).
        /// This may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified. This is not present if a metadata request was made.
        /// </param>
        /// <param name="namespace"> The namespace of the metrics being queried. </param>
        /// <param name="resourceRegion"> The region of the resource being queried for metrics. </param>
        /// <param name="metrics"> the value of the collection. </param>
        /// <returns> A new <see cref="Models.MetricsQueryResult"/> instance for mocking. </returns>
        public static MetricsQueryResult MetricsQueryResult(int? cost = null, TimeSpan? granularity = null, string @namespace = null, string resourceRegion = null, IEnumerable<MetricResult> metrics = null)
        {
            metrics ??= new List<MetricResult>();

            return new MetricsQueryResult(cost, timespan: null, granularity, @namespace, resourceRegion, metrics?.ToList());
        }
    }
}
