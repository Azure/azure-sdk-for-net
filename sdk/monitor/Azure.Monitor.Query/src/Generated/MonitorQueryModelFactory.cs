// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Monitor.Query.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class MonitorQueryModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.MetricAvailability"/>. </summary>
        /// <param name="granularity"> The time grain specifies a supported aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. </param>
        /// <param name="retention"> The retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc. </param>
        /// <returns> A new <see cref="Models.MetricAvailability"/> instance for mocking. </returns>
        public static MetricAvailability MetricAvailability(TimeSpan? granularity = null, TimeSpan? retention = null)
        {
            return new MetricAvailability(granularity, retention);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricsBatchQueryResult"/>. </summary>
        /// <param name="values"> The collection of metric data responses per resource, per metric. </param>
        /// <returns> A new <see cref="Models.MetricsBatchQueryResult"/> instance for mocking. </returns>
        public static MetricsBatchQueryResult MetricsBatchQueryResult(IEnumerable<MetricsQueryResult> values = null)
        {
            values ??= new List<MetricsQueryResult>();

            return new MetricsBatchQueryResult(values?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricsBatchResultValues"/>. </summary>
        /// <param name="startTime"> The start time, in datetime format, for which the data was retrieved. </param>
        /// <param name="endTime"> The end time, in datetime format, for which the data was retrieved. </param>
        /// <param name="interval">
        /// The interval (window size) for which the metric data was returned in ISO 8601 duration format with a special case for 'FULL' value that returns single datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*).
        /// This may be adjusted and different from what was originally requested if AutoAdjustTimegrain=true is specified.
        /// </param>
        /// <param name="namespace"> The namespace of the metrics been queried. </param>
        /// <param name="resourceRegion"> The region of the resource been queried for metrics. </param>
        /// <param name="resourceId"> The resource that has been queried for metrics. </param>
        /// <param name="metrics"> The value of the collection. </param>
        /// <returns> A new <see cref="Models.MetricsBatchResultValues"/> instance for mocking. </returns>
        public static MetricsBatchResultValues MetricsBatchResultValues(DateTimeOffset startTime = default, DateTimeOffset endTime = default, string interval = null, string @namespace = null, AzureLocation resourceRegion = default, ResourceIdentifier resourceId = null, IEnumerable<MetricResult> metrics = null)
        {
            metrics ??= new List<MetricResult>();

            return new MetricsBatchResultValues(startTime, endTime, interval, @namespace, resourceRegion, resourceId, metrics?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogsTableColumn"/>. </summary>
        /// <param name="name"> The name of this column. </param>
        /// <param name="type"> The data type of this column. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="Models.LogsTableColumn"/> instance for mocking. </returns>
        public static LogsTableColumn LogsTableColumn(string name = null, LogsColumnType type = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new LogsTableColumn(name, type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ErrorDetailAutoGenerated"/>. </summary>
        /// <param name="code"> The error's code. </param>
        /// <param name="message"> A human readable error message. </param>
        /// <param name="target"> Indicates which property in the request is responsible for the error. </param>
        /// <param name="value"> Indicates which value in 'target' is responsible for the error. </param>
        /// <param name="resources"> Indicates resources which were responsible for the error. </param>
        /// <param name="additionalProperties"> Additional properties that can be provided on the error details object. </param>
        /// <returns> A new <see cref="Models.ErrorDetailAutoGenerated"/> instance for mocking. </returns>
        public static ErrorDetailAutoGenerated ErrorDetailAutoGenerated(string code = null, string message = null, string target = null, string value = null, IEnumerable<string> resources = null, object additionalProperties = null)
        {
            resources ??= new List<string>();

            return new ErrorDetailAutoGenerated(code, message, target, value, resources?.ToList(), additionalProperties);
        }
    }
}
