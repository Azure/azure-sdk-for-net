// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Monitor.Query.Models;

namespace Azure.Monitor.Query
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class QueryModelFactory
    {
        /// <summary> Initializes new instance of LogsQueryResult class. </summary>
        /// <param name="tables"> The list of tables, columns and rows. </param>
        /// <param name="Statistics"> Statistics represented in JSON format. </param>
        /// <returns> A new <see cref="Models.LogsQueryResult"/> instance for mocking. </returns>
        public static LogsQueryResult LogsQueryResult(IReadOnlyList<LogsQueryResultTable> tables = default, JsonElement Statistics = default)
        {
            tables ??= new List<LogsQueryResultTable>();
            return new LogsQueryResult(tables, Statistics);
        }

        /// <summary> Initializes new instance of LogsQueryResultTable class. </summary>
        /// <param name="name"> The name of the table. </param>
        /// <param name="columns"> The list of columns in this table. </param>
        /// <param name="internalRows"> The resulting rows from this query. </param>
        /// <returns> A new <see cref="Models.LogsQueryResultTable"/> instance for mocking. </returns>
        public static LogsQueryResultTable LogsQueryResultTable(string name = default, IReadOnlyList<LogsQueryResultColumn> columns = default, JsonElement internalRows = default)
        {
            columns ??= new List<LogsQueryResultColumn>();
            return new LogsQueryResultTable(name, columns, internalRows);
        }

        /// <summary> Initializes new instance of LogsQueryResultColumn class. </summary>
        /// <param name="name"> The name of this column. </param>
        /// <param name="type"> The data type of this column. </param>
        /// <returns> A new <see cref="Models.LogsQueryResultColumn"/> instance for mocking. </returns>
        public static LogsQueryResultColumn LogsQueryResultColumn(string name = default, LogColumnTypes type = default)
        {
            return new LogsQueryResultColumn(name, type);
        }

        /// <summary> Initializes new instance of MetricAvailability class. </summary>
        /// <param name="timeGrain"> the time grain specifies the aggregation interval for the metric. Expressed as a duration &apos;PT1M&apos;, &apos;P1D&apos;, etc. </param>
        /// <param name="retention"> the retention period for the metric at the specified timegrain.  Expressed as a duration &apos;PT1M&apos;, &apos;P1D&apos;, etc. </param>
        /// <returns> A new <see cref="Models.MetricAvailability"/> instance for mocking. </returns>
        public static MetricAvailability MetricAvailability(TimeSpan? timeGrain = default, TimeSpan? retention = default)
        {
            return new MetricAvailability(timeGrain, retention);
        }

        /// <summary> Initializes new instance of MetricQueryResult class. </summary>
        /// <param name="cost"> The integer value representing the cost of the query, for data case. </param>
        /// <param name="Timespan"> The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by &apos;/&apos;.  This may be adjusted in the future and returned back from what was originally requested. </param>
        /// <param name="interval"> The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. </param>
        /// <param name="namespace"> The namespace of the metrics been queried. </param>
        /// <param name="resourceRegion"> The region of the resource been queried for metrics. </param>
        /// <param name="metrics"> the value of the collection. </param>
        /// <returns> A new <see cref="Models.MetricQueryResult"/> instance for mocking. </returns>
        public static MetricQueryResult MetricQueryResult(int? cost = default, string Timespan = default, TimeSpan? interval = default, string @namespace = default, string resourceRegion = default, IReadOnlyList<Metric> metrics = default)
        {
            metrics ??= new List<Metric>();
            return new MetricQueryResult(cost, Timespan, interval, @namespace, resourceRegion, metrics);
        }

        /// <summary> Initializes new instance of MetricValue class. </summary>
        /// <param name="timeStamp"> the timestamp for the metric value in ISO 8601 format. </param>
        /// <param name="average"> the average value in the time range. </param>
        /// <param name="minimum"> the least value in the time range. </param>
        /// <param name="maximum"> the greatest value in the time range. </param>
        /// <param name="total"> the sum of all of the values in the time range. </param>
        /// <param name="count"> the number of samples in the time range. Can be used to determine the number of values that contributed to the average value. </param>
        /// <returns> A new <see cref="Models.MetricValue"/> instance for mocking. </returns>
        public static MetricValue MetricValue(DateTimeOffset timeStamp = default, double? average = default, double? minimum = default, double? maximum = default, double? total = default, double? count = default)
        {
            return new MetricValue(timeStamp, average, minimum, maximum, total, count);
        }
    }
}
