// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Monitor.Query.Models
{
    /// <summary> The MetadataPermissionsApplicationsItem. </summary>
    internal partial class MetadataPermissionsApplicationsItem
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MetadataPermissionsApplicationsItem"/>. </summary>
        /// <param name="resourceId"> The resource ID on the permission indication. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> is null. </exception>
        internal MetadataPermissionsApplicationsItem(string resourceId)
        {
            Argument.AssertNotNull(resourceId, nameof(resourceId));

            ResourceId = resourceId;
        }

        /// <summary> Initializes a new instance of <see cref="MetadataPermissionsApplicationsItem"/>. </summary>
        /// <param name="resourceId"> The resource ID on the permission indication. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MetadataPermissionsApplicationsItem(string resourceId, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ResourceId = resourceId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MetadataPermissionsApplicationsItem"/> for deserialization. </summary>
        internal MetadataPermissionsApplicationsItem()
        {
        }

        /// <summary> The resource ID on the permission indication. </summary>
        public string ResourceId { get; }
    }
}
