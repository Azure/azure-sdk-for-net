// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Monitor.Query.Models
{
    internal static partial class QueryBatchMetricUnitExtensions
    {
        public static string ToSerialString(this QueryBatchMetricUnit value) => value switch
        {
            QueryBatchMetricUnit.Count => "Count",
            QueryBatchMetricUnit.Bytes => "Bytes",
            QueryBatchMetricUnit.Seconds => "Seconds",
            QueryBatchMetricUnit.CountPerSecond => "CountPerSecond",
            QueryBatchMetricUnit.BytesPerSecond => "BytesPerSecond",
            QueryBatchMetricUnit.Percent => "Percent",
            QueryBatchMetricUnit.MilliSeconds => "MilliSeconds",
            QueryBatchMetricUnit.ByteSeconds => "ByteSeconds",
            QueryBatchMetricUnit.Unspecified => "Unspecified",
            QueryBatchMetricUnit.Cores => "Cores",
            QueryBatchMetricUnit.MilliCores => "MilliCores",
            QueryBatchMetricUnit.NanoCores => "NanoCores",
            QueryBatchMetricUnit.BitsPerSecond => "BitsPerSecond",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown QueryBatchMetricUnit value.")
        };

        public static QueryBatchMetricUnit ToQueryBatchMetricUnit(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Count")) return QueryBatchMetricUnit.Count;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Bytes")) return QueryBatchMetricUnit.Bytes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Seconds")) return QueryBatchMetricUnit.Seconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CountPerSecond")) return QueryBatchMetricUnit.CountPerSecond;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BytesPerSecond")) return QueryBatchMetricUnit.BytesPerSecond;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Percent")) return QueryBatchMetricUnit.Percent;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MilliSeconds")) return QueryBatchMetricUnit.MilliSeconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ByteSeconds")) return QueryBatchMetricUnit.ByteSeconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unspecified")) return QueryBatchMetricUnit.Unspecified;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Cores")) return QueryBatchMetricUnit.Cores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MilliCores")) return QueryBatchMetricUnit.MilliCores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "NanoCores")) return QueryBatchMetricUnit.NanoCores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BitsPerSecond")) return QueryBatchMetricUnit.BitsPerSecond;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown QueryBatchMetricUnit value.");
        }
    }
}
