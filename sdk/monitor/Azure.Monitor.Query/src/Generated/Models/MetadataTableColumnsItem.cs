// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Monitor.Query.Models
{
    /// <summary> The MetadataTableColumnsItem. </summary>
    internal partial class MetadataTableColumnsItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MetadataTableColumnsItem"/>. </summary>
        /// <param name="name"> The name of the column. </param>
        /// <param name="type"> The data type of the column. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        internal MetadataTableColumnsItem(string name, MetadataColumnDataType type)
        {
            Argument.AssertNotNull(name, nameof(name));

            Name = name;
            Type = type;
        }

        /// <summary> Initializes a new instance of <see cref="MetadataTableColumnsItem"/>. </summary>
        /// <param name="name"> The name of the column. </param>
        /// <param name="description"> The description of the column. </param>
        /// <param name="type"> The data type of the column. </param>
        /// <param name="isPreferredFacet"> A flag indicating this column is a preferred facet. </param>
        /// <param name="source"> an indication of the source of the column, used only when multiple workspaces have conflicting definition for the column. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MetadataTableColumnsItem(string name, string description, MetadataColumnDataType type, bool? isPreferredFacet, object source, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Description = description;
            Type = type;
            IsPreferredFacet = isPreferredFacet;
            Source = source;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MetadataTableColumnsItem"/> for deserialization. </summary>
        internal MetadataTableColumnsItem()
        {
        }

        /// <summary> The name of the column. </summary>
        public string Name { get; }
        /// <summary> The description of the column. </summary>
        public string Description { get; }
        /// <summary> The data type of the column. </summary>
        public MetadataColumnDataType Type { get; }
        /// <summary> A flag indicating this column is a preferred facet. </summary>
        public bool? IsPreferredFacet { get; }
        /// <summary> an indication of the source of the column, used only when multiple workspaces have conflicting definition for the column. </summary>
        public object Source { get; }
    }
}
