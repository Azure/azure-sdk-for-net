// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Monitor.Query.Models
{
    /// <summary> An array of requests. </summary>
    internal partial class BatchRequest
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchRequest"/>. </summary>
        /// <param name="requests"> An single request in a batch. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requests"/> is null. </exception>
        public BatchRequest(IEnumerable<BatchQueryRequest> requests)
        {
            Argument.AssertNotNull(requests, nameof(requests));

            Requests = requests.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="BatchRequest"/>. </summary>
        /// <param name="requests"> An single request in a batch. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchRequest(IList<BatchQueryRequest> requests, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Requests = requests;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchRequest"/> for deserialization. </summary>
        internal BatchRequest()
        {
        }

        /// <summary> An single request in a batch. </summary>
        public IList<BatchQueryRequest> Requests { get; }
    }
}
