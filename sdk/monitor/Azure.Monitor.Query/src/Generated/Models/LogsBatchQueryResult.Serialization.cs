// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitor.Query.Models
{
    public partial class LogsBatchQueryResult : IUtf8JsonSerializable, IJsonModel<LogsBatchQueryResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<LogsBatchQueryResult>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<LogsBatchQueryResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<LogsBatchQueryResult>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<LogsBatchQueryResult>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("tables"u8);
            writer.WriteStartArray();
            foreach (var item in AllTables)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(_statistics))
            {
                writer.WritePropertyName("statistics"u8);
                _statistics.WriteTo(writer);
            }
            if (Optional.IsDefined(_visualization))
            {
                writer.WritePropertyName("render"u8);
                _visualization.WriteTo(writer);
            }
            if (Optional.IsDefined(_error))
            {
                writer.WritePropertyName("error"u8);
                _error.WriteTo(writer);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        LogsBatchQueryResult IJsonModel<LogsBatchQueryResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLogsBatchQueryResult(document.RootElement, options);
        }

        BinaryData IPersistableModel<LogsBatchQueryResult>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        LogsBatchQueryResult IPersistableModel<LogsBatchQueryResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeLogsBatchQueryResult(document.RootElement, options);
        }

        string IPersistableModel<LogsBatchQueryResult>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
