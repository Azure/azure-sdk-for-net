// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitor.Query.Models
{
    /// <summary> Contains the columns and rows for one table in a query response. </summary>
    public partial class LogsTable
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LogsTable"/>. </summary>
        /// <param name="name"> The name of the table. </param>
        /// <param name="columns"> The list of columns in this table. </param>
        /// <param name="internalRows"> The resulting rows from this query. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="columns"/> is null. </exception>
        internal LogsTable(string name, IEnumerable<LogsTableColumn> columns, JsonElement internalRows)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(columns, nameof(columns));

            Name = name;
            Columns = columns.ToList();
            InternalRows = internalRows;
        }

        /// <summary> Initializes a new instance of <see cref="LogsTable"/>. </summary>
        /// <param name="name"> The name of the table. </param>
        /// <param name="columns"> The list of columns in this table. </param>
        /// <param name="internalRows"> The resulting rows from this query. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LogsTable(string name, IReadOnlyList<LogsTableColumn> columns, JsonElement internalRows, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Name = name;
            Columns = columns;
            InternalRows = internalRows;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LogsTable"/> for deserialization. </summary>
        internal LogsTable()
        {
        }

        /// <summary> The name of the table. </summary>
        public string Name { get; }
        /// <summary> The list of columns in this table. </summary>
        public IReadOnlyList<LogsTableColumn> Columns { get; }
    }
}
