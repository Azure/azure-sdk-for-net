// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Monitor.Query.Models
{
    /// <summary> The data type of this column. </summary>
    public readonly partial struct LogColumnTypes : IEquatable<LogColumnTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="LogColumnTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogColumnTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BoolValue = "bool";
        private const string DatetimeValue = "datetime";
        private const string DynamicValue = "dynamic";
        private const string IntValue = "int";
        private const string LongValue = "long";
        private const string RealValue = "real";
        private const string StringValue = "string";

        /// <summary> bool. </summary>
        public static LogColumnTypes Bool { get; } = new LogColumnTypes(BoolValue);
        /// <summary> datetime. </summary>
        public static LogColumnTypes Datetime { get; } = new LogColumnTypes(DatetimeValue);
        /// <summary> dynamic. </summary>
        public static LogColumnTypes Dynamic { get; } = new LogColumnTypes(DynamicValue);
        /// <summary> int. </summary>
        public static LogColumnTypes Int { get; } = new LogColumnTypes(IntValue);
        /// <summary> long. </summary>
        public static LogColumnTypes Long { get; } = new LogColumnTypes(LongValue);
        /// <summary> real. </summary>
        public static LogColumnTypes Real { get; } = new LogColumnTypes(RealValue);
        /// <summary> string. </summary>
        public static LogColumnTypes String { get; } = new LogColumnTypes(StringValue);
        /// <summary> Determines if two <see cref="LogColumnTypes"/> values are the same. </summary>
        public static bool operator ==(LogColumnTypes left, LogColumnTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LogColumnTypes"/> values are not the same. </summary>
        public static bool operator !=(LogColumnTypes left, LogColumnTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LogColumnTypes"/>. </summary>
        public static implicit operator LogColumnTypes(string value) => new LogColumnTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogColumnTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LogColumnTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
