// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace OpenTelemetry.Exporter.AzureMonitor.Models
{
    public partial class StackFrame : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("level");
            writer.WriteNumberValue(Level);
            writer.WritePropertyName("method");
            writer.WriteStringValue(Method);
            if (Optional.IsDefined(Assembly))
            {
                writer.WritePropertyName("assembly");
                writer.WriteStringValue(Assembly);
            }
            if (Optional.IsDefined(FileName))
            {
                writer.WritePropertyName("fileName");
                writer.WriteStringValue(FileName);
            }
            if (Optional.IsDefined(Line))
            {
                writer.WritePropertyName("line");
                writer.WriteNumberValue(Line.Value);
            }
            writer.WriteEndObject();
        }

        internal static StackFrame DeserializeStackFrame(JsonElement element)
        {
            int level = default;
            string method = default;
            Optional<string> assembly = default;
            Optional<string> fileName = default;
            Optional<int> line = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("level"))
                {
                    level = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("method"))
                {
                    method = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assembly"))
                {
                    assembly = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileName"))
                {
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("line"))
                {
                    line = property.Value.GetInt32();
                    continue;
                }
            }
            return new StackFrame(level, method, assembly.Value, fileName.Value, Optional.ToNullable(line));
        }
    }
}
