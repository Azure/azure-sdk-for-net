// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace OpenTelemetry.Exporter.AzureMonitor.Models
{
    /// <summary> An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application. </summary>
    public partial class ExceptionData : MonitorDomain
    {
        /// <summary> Initializes a new instance of ExceptionData. </summary>
        /// <param name="ver"> Schema version. </param>
        public ExceptionData(int ver)
        {
            Ver = ver;
            Exceptions = new ChangeTrackingList<ExceptionDetails>();
            Properties = new ChangeTrackingDictionary<string, string>();
            Measurements = new ChangeTrackingDictionary<string, double>();
        }

        /// <summary> Initializes a new instance of ExceptionData. </summary>
        /// <param name="test"> Ignored value. </param>
        /// <param name="ver"> Schema version. </param>
        /// <param name="exceptions"> Exception chain - list of inner exceptions. </param>
        /// <param name="severityLevel"> Severity level. Mostly used to indicate exception severity level when it is reported by logging library. </param>
        /// <param name="problemId"> Identifier of where the exception was thrown in code. Used for exceptions grouping. Typically a combination of exception type and a function from the call stack. </param>
        /// <param name="properties"> Collection of custom properties. TODO: max key length validate. </param>
        /// <param name="measurements"> Collection of custom measurements. TODO: max key length validate. </param>
        internal ExceptionData(string test, int ver, IList<ExceptionDetails> exceptions, SeverityLevel? severityLevel, string problemId, IDictionary<string, string> properties, IDictionary<string, double> measurements) : base(test)
        {
            Ver = ver;
            Exceptions = exceptions;
            SeverityLevel = severityLevel;
            ProblemId = problemId;
            Properties = properties;
            Measurements = measurements;
        }

        /// <summary> Schema version. </summary>
        public int Ver { get; set; }
        /// <summary> Exception chain - list of inner exceptions. </summary>
        public IList<ExceptionDetails> Exceptions { get; }
        /// <summary> Severity level. Mostly used to indicate exception severity level when it is reported by logging library. </summary>
        public SeverityLevel? SeverityLevel { get; set; }
        /// <summary> Identifier of where the exception was thrown in code. Used for exceptions grouping. Typically a combination of exception type and a function from the call stack. </summary>
        public string ProblemId { get; set; }
        /// <summary> Collection of custom properties. TODO: max key length validate. </summary>
        public IDictionary<string, string> Properties { get; }
        /// <summary> Collection of custom measurements. TODO: max key length validate. </summary>
        public IDictionary<string, double> Measurements { get; }
    }
}
