// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace OpenTelemetry.Exporter.AzureMonitor.Models
{
    public partial class RemoteDependencyData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("ver");
            writer.WriteNumberValue(Ver);
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(ResultCode))
            {
                writer.WritePropertyName("resultCode");
                writer.WriteStringValue(ResultCode);
            }
            if (Optional.IsDefined(Data))
            {
                writer.WritePropertyName("data");
                writer.WriteStringValue(Data);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type);
            }
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target");
                writer.WriteStringValue(Target);
            }
            writer.WritePropertyName("duration");
            writer.WriteStringValue(Duration, "P");
            if (Optional.IsDefined(Success))
            {
                writer.WritePropertyName("success");
                writer.WriteBooleanValue(Success.Value);
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties");
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Measurements))
            {
                writer.WritePropertyName("measurements");
                writer.WriteStartObject();
                foreach (var item in Measurements)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Test))
            {
                writer.WritePropertyName("test");
                writer.WriteStringValue(Test);
            }
            writer.WriteEndObject();
        }

        internal static RemoteDependencyData DeserializeRemoteDependencyData(JsonElement element)
        {
            int ver = default;
            Optional<string> id = default;
            string name = default;
            Optional<string> resultCode = default;
            Optional<string> data = default;
            Optional<string> type = default;
            Optional<string> target = default;
            TimeSpan duration = default;
            Optional<bool> success = default;
            Optional<IDictionary<string, string>> properties = default;
            Optional<IDictionary<string, double>> measurements = default;
            Optional<string> test = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ver"))
                {
                    ver = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resultCode"))
                {
                    resultCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("data"))
                {
                    data = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("target"))
                {
                    target = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("duration"))
                {
                    duration = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("success"))
                {
                    success = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    properties = dictionary;
                    continue;
                }
                if (property.NameEquals("measurements"))
                {
                    Dictionary<string, double> dictionary = new Dictionary<string, double>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetDouble());
                    }
                    measurements = dictionary;
                    continue;
                }
                if (property.NameEquals("test"))
                {
                    test = property.Value.GetString();
                    continue;
                }
            }
            return new RemoteDependencyData(test.Value, ver, id.Value, name, resultCode.Value, data.Value, type.Value, target.Value, duration, Optional.ToNullable(success), Optional.ToDictionary(properties), Optional.ToDictionary(measurements));
        }
    }
}
