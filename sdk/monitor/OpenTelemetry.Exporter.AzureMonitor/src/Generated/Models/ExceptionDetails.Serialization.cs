// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace OpenTelemetry.Exporter.AzureMonitor.Models
{
    public partial class ExceptionDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteNumberValue(Id.Value);
            }
            if (Optional.IsDefined(OuterId))
            {
                writer.WritePropertyName("outerId");
                writer.WriteNumberValue(OuterId.Value);
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName");
                writer.WriteStringValue(TypeName);
            }
            writer.WritePropertyName("message");
            writer.WriteStringValue(Message);
            if (Optional.IsDefined(HasFullStack))
            {
                writer.WritePropertyName("hasFullStack");
                writer.WriteBooleanValue(HasFullStack.Value);
            }
            if (Optional.IsDefined(Stack))
            {
                writer.WritePropertyName("stack");
                writer.WriteStringValue(Stack);
            }
            if (Optional.IsCollectionDefined(ParsedStack))
            {
                writer.WritePropertyName("parsedStack");
                writer.WriteStartArray();
                foreach (var item in ParsedStack)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ExceptionDetails DeserializeExceptionDetails(JsonElement element)
        {
            Optional<int> id = default;
            Optional<int> outerId = default;
            Optional<string> typeName = default;
            string message = default;
            Optional<bool> hasFullStack = default;
            Optional<string> stack = default;
            Optional<IList<StackFrame>> parsedStack = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("outerId"))
                {
                    outerId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("typeName"))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("message"))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasFullStack"))
                {
                    hasFullStack = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("stack"))
                {
                    stack = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parsedStack"))
                {
                    List<StackFrame> array = new List<StackFrame>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(StackFrame.DeserializeStackFrame(item));
                    }
                    parsedStack = array;
                    continue;
                }
            }
            return new ExceptionDetails(Optional.ToNullable(id), Optional.ToNullable(outerId), typeName.Value, message, Optional.ToNullable(hasFullStack), stack.Value, Optional.ToList(parsedStack));
        }
    }
}
