// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace OpenTelemetry.Exporter.AzureMonitor.Models
{
    public partial class DataPoint : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Ns))
            {
                writer.WritePropertyName("ns");
                writer.WriteStringValue(Ns);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind");
                writer.WriteStringValue(Kind.Value.ToString());
            }
            writer.WritePropertyName("value");
            writer.WriteNumberValue(Value);
            if (Optional.IsDefined(Count))
            {
                if (Count != null)
                {
                    writer.WritePropertyName("count");
                    writer.WriteNumberValue(Count.Value);
                }
                else
                {
                    writer.WriteNull("count");
                }
            }
            if (Optional.IsDefined(Min))
            {
                if (Min != null)
                {
                    writer.WritePropertyName("min");
                    writer.WriteNumberValue(Min.Value);
                }
                else
                {
                    writer.WriteNull("min");
                }
            }
            if (Optional.IsDefined(Max))
            {
                if (Max != null)
                {
                    writer.WritePropertyName("max");
                    writer.WriteNumberValue(Max.Value);
                }
                else
                {
                    writer.WriteNull("max");
                }
            }
            if (Optional.IsDefined(StdDev))
            {
                if (StdDev != null)
                {
                    writer.WritePropertyName("stdDev");
                    writer.WriteNumberValue(StdDev.Value);
                }
                else
                {
                    writer.WriteNull("stdDev");
                }
            }
            writer.WriteEndObject();
        }

        internal static DataPoint DeserializeDataPoint(JsonElement element)
        {
            Optional<string> ns = default;
            string name = default;
            Optional<DataPointType> kind = default;
            double value = default;
            Optional<int?> count = default;
            Optional<double?> min = default;
            Optional<double?> max = default;
            Optional<double?> stdDev = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ns"))
                {
                    ns = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = new DataPointType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    value = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("count"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        count = null;
                        continue;
                    }
                    count = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("min"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        min = null;
                        continue;
                    }
                    min = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("max"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        max = null;
                        continue;
                    }
                    max = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("stdDev"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stdDev = null;
                        continue;
                    }
                    stdDev = property.Value.GetDouble();
                    continue;
                }
            }
            return new DataPoint(ns.Value, name, Optional.ToNullable(kind), value, Optional.ToNullable(count), Optional.ToNullable(min), Optional.ToNullable(max), Optional.ToNullable(stdDev));
        }
    }
}
