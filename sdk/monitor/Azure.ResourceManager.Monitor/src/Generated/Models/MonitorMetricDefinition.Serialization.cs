// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class MonitorMetricDefinition
    {
        internal static MonitorMetricDefinition DeserializeMonitorMetricDefinition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> isDimensionRequired = default;
            Optional<string> resourceId = default;
            Optional<string> @namespace = default;
            Optional<MonitorLocalizableString> name = default;
            Optional<string> displayDescription = default;
            Optional<string> category = default;
            Optional<MonitorMetricClass> metricClass = default;
            Optional<MonitorMetricUnit> unit = default;
            Optional<MonitorAggregationType> primaryAggregationType = default;
            Optional<IReadOnlyList<MonitorAggregationType>> supportedAggregationTypes = default;
            Optional<IReadOnlyList<MonitorMetricAvailability>> metricAvailabilities = default;
            Optional<string> id = default;
            Optional<IReadOnlyList<MonitorLocalizableString>> dimensions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isDimensionRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDimensionRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("resourceId"u8))
                {
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"u8))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = MonitorLocalizableString.DeserializeMonitorLocalizableString(property.Value);
                    continue;
                }
                if (property.NameEquals("displayDescription"u8))
                {
                    displayDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metricClass"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    metricClass = new MonitorMetricClass(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unit = new MonitorMetricUnit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("primaryAggregationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    primaryAggregationType = property.Value.GetString().ToMonitorAggregationType();
                    continue;
                }
                if (property.NameEquals("supportedAggregationTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorAggregationType> array = new List<MonitorAggregationType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString().ToMonitorAggregationType());
                    }
                    supportedAggregationTypes = array;
                    continue;
                }
                if (property.NameEquals("metricAvailabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorMetricAvailability> array = new List<MonitorMetricAvailability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorMetricAvailability.DeserializeMonitorMetricAvailability(item));
                    }
                    metricAvailabilities = array;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorLocalizableString> array = new List<MonitorLocalizableString>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorLocalizableString.DeserializeMonitorLocalizableString(item));
                    }
                    dimensions = array;
                    continue;
                }
            }
            return new MonitorMetricDefinition(Optional.ToNullable(isDimensionRequired), resourceId.Value, @namespace.Value, name.Value, displayDescription.Value, category.Value, Optional.ToNullable(metricClass), Optional.ToNullable(unit), Optional.ToNullable(primaryAggregationType), Optional.ToList(supportedAggregationTypes), Optional.ToList(metricAvailabilities), id.Value, Optional.ToList(dimensions));
        }
    }
}
