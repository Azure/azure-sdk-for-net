// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys, and output the key-value map to destinationField field. </summary>
    public partial class PipelineGroupJsonArrayMapper
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PipelineGroupJsonArrayMapper"/>. </summary>
        /// <param name="keys"> Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keys"/> is null. </exception>
        public PipelineGroupJsonArrayMapper(IEnumerable<string> keys)
        {
            Argument.AssertNotNull(keys, nameof(keys));

            Keys = keys.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="PipelineGroupJsonArrayMapper"/>. </summary>
        /// <param name="sourceField"> Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys. </param>
        /// <param name="destinationField"> Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements. </param>
        /// <param name="keys"> Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PipelineGroupJsonArrayMapper(PipelineGroupJsonMapperSourceField sourceField, PipelineGroupJsonMapperDestinationField destinationField, IList<string> keys, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SourceField = sourceField;
            DestinationField = destinationField;
            Keys = keys;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PipelineGroupJsonArrayMapper"/> for deserialization. </summary>
        internal PipelineGroupJsonArrayMapper()
        {
        }

        /// <summary> Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys. </summary>
        internal PipelineGroupJsonMapperSourceField SourceField { get; set; }
        /// <summary> Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself. </summary>
        public string FieldName
        {
            get => SourceField is null ? default : SourceField.FieldName;
            set
            {
                if (SourceField is null)
                    SourceField = new PipelineGroupJsonMapperSourceField();
                SourceField.FieldName = value;
            }
        }

        /// <summary> Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements. </summary>
        public PipelineGroupJsonMapperDestinationField DestinationField { get; set; }
        /// <summary> Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key. </summary>
        public IList<string> Keys { get; }
    }
}
