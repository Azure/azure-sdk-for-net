// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> One of the supported timestamp formats. </summary>
    internal readonly partial struct KnownLogFileTextSettingsRecordStartTimestampFormat : IEquatable<KnownLogFileTextSettingsRecordStartTimestampFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="KnownLogFileTextSettingsRecordStartTimestampFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KnownLogFileTextSettingsRecordStartTimestampFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ISO8601Value = "ISO 8601";
        private const string YyyyMMDDHHMMSSValue = "YYYY-MM-DD HH:MM:SS";
        private const string MDYyyyHHMMSSAMPMValue = "M/D/YYYY HH:MM:SS AM/PM";
        private const string MonDDYyyyHHMMSSValue = "Mon DD, YYYY HH:MM:SS";
        private const string YyMMddHHMmSsValue = "yyMMdd HH:mm:ss";
        private const string DdMMyyHHMmSsValue = "ddMMyy HH:mm:ss";
        private const string MMMDHhMmSsValue = "MMM d hh:mm:ss";
        private const string DdMMMYyyyHHMmSsZzzValue = "dd/MMM/yyyy:HH:mm:ss zzz";
        private const string YyyyMMDdTHHMmSsKValue = "yyyy-MM-ddTHH:mm:ssK";

        /// <summary> ISO 8601. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat ISO8601 { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(ISO8601Value);
        /// <summary> YYYY-MM-DD HH:MM:SS. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat YyyyMMDDHHMMSS { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(YyyyMMDDHHMMSSValue);
        /// <summary> M/D/YYYY HH:MM:SS AM/PM. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat MDYyyyHHMMSSAMPM { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(MDYyyyHHMMSSAMPMValue);
        /// <summary> Mon DD, YYYY HH:MM:SS. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat MonDDYyyyHHMMSS { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(MonDDYyyyHHMMSSValue);
        /// <summary> yyMMdd HH:mm:ss. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat YyMMddHHMmSs { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(YyMMddHHMmSsValue);
        /// <summary> ddMMyy HH:mm:ss. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat DdMMyyHHMmSs { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(DdMMyyHHMmSsValue);
        /// <summary> MMM d hh:mm:ss. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat MMMDHhMmSs { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(MMMDHhMmSsValue);
        /// <summary> dd/MMM/yyyy:HH:mm:ss zzz. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat DdMMMYyyyHHMmSsZzz { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(DdMMMYyyyHHMmSsZzzValue);
        /// <summary> yyyy-MM-ddTHH:mm:ssK. </summary>
        public static KnownLogFileTextSettingsRecordStartTimestampFormat YyyyMMDdTHHMmSsK { get; } = new KnownLogFileTextSettingsRecordStartTimestampFormat(YyyyMMDdTHHMmSsKValue);
        /// <summary> Determines if two <see cref="KnownLogFileTextSettingsRecordStartTimestampFormat"/> values are the same. </summary>
        public static bool operator ==(KnownLogFileTextSettingsRecordStartTimestampFormat left, KnownLogFileTextSettingsRecordStartTimestampFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KnownLogFileTextSettingsRecordStartTimestampFormat"/> values are not the same. </summary>
        public static bool operator !=(KnownLogFileTextSettingsRecordStartTimestampFormat left, KnownLogFileTextSettingsRecordStartTimestampFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="KnownLogFileTextSettingsRecordStartTimestampFormat"/>. </summary>
        public static implicit operator KnownLogFileTextSettingsRecordStartTimestampFormat(string value) => new KnownLogFileTextSettingsRecordStartTimestampFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KnownLogFileTextSettingsRecordStartTimestampFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KnownLogFileTextSettingsRecordStartTimestampFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
