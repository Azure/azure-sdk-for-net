// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class MonitorWebhookReceiver : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("serviceUri"u8);
            writer.WriteStringValue(ServiceUri.AbsoluteUri);
            if (Core.Optional.IsDefined(UseCommonAlertSchema))
            {
                writer.WritePropertyName("useCommonAlertSchema"u8);
                writer.WriteBooleanValue(UseCommonAlertSchema.Value);
            }
            if (Core.Optional.IsDefined(UseAadAuth))
            {
                writer.WritePropertyName("useAadAuth"u8);
                writer.WriteBooleanValue(UseAadAuth.Value);
            }
            if (Core.Optional.IsDefined(ObjectId))
            {
                writer.WritePropertyName("objectId"u8);
                writer.WriteStringValue(ObjectId);
            }
            if (Core.Optional.IsDefined(IdentifierUri))
            {
                writer.WritePropertyName("identifierUri"u8);
                writer.WriteStringValue(IdentifierUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(TenantId))
            {
                writer.WritePropertyName("tenantId"u8);
                writer.WriteStringValue(TenantId.Value);
            }
            writer.WriteEndObject();
        }

        internal static MonitorWebhookReceiver DeserializeMonitorWebhookReceiver(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            Uri serviceUri = default;
            Core.Optional<bool> useCommonAlertSchema = default;
            Core.Optional<bool> useAadAuth = default;
            Core.Optional<string> objectId = default;
            Core.Optional<Uri> identifierUri = default;
            Core.Optional<Guid> tenantId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceUri"u8))
                {
                    serviceUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("useCommonAlertSchema"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    useCommonAlertSchema = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("useAadAuth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    useAadAuth = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("objectId"u8))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("identifierUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identifierUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tenantId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tenantId = property.Value.GetGuid();
                    continue;
                }
            }
            return new MonitorWebhookReceiver(name, serviceUri, Core.Optional.ToNullable(useCommonAlertSchema), Core.Optional.ToNullable(useAadAuth), objectId.Value, identifierUri.Value, Core.Optional.ToNullable(tenantId));
        }
    }
}
