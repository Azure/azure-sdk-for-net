// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class MonitorItsmReceiver : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("workspaceId"u8);
            writer.WriteStringValue(WorkspaceId);
            writer.WritePropertyName("connectionId"u8);
            writer.WriteStringValue(ConnectionId);
            writer.WritePropertyName("ticketConfiguration"u8);
            writer.WriteStringValue(TicketConfiguration);
            writer.WritePropertyName("region"u8);
            writer.WriteStringValue(Region);
            writer.WriteEndObject();
        }

        internal static MonitorItsmReceiver DeserializeMonitorItsmReceiver(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string workspaceId = default;
            string connectionId = default;
            string ticketConfiguration = default;
            AzureLocation region = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("workspaceId"u8))
                {
                    workspaceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectionId"u8))
                {
                    connectionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ticketConfiguration"u8))
                {
                    ticketConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"u8))
                {
                    region = new AzureLocation(property.Value.GetString());
                    continue;
                }
            }
            return new MonitorItsmReceiver(name, workspaceId, connectionId, ticketConfiguration, region);
        }
    }
}
