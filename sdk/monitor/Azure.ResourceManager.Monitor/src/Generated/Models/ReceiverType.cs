// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> The receiver type. </summary>
    public readonly partial struct ReceiverType : IEquatable<ReceiverType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReceiverType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReceiverType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SyslogValue = "Syslog";
        private const string AmaValue = "Ama";
        private const string PipelineGroupValue = "PipelineGroup";
        private const string OtlpValue = "OTLP";
        private const string UDPValue = "UDP";

        /// <summary> Linux syslog. </summary>
        public static ReceiverType Syslog { get; } = new ReceiverType(SyslogValue);
        /// <summary> Receives data from azure monitor agent receiver. </summary>
        public static ReceiverType Ama { get; } = new ReceiverType(AmaValue);
        /// <summary> Receives data from another pipeline group. </summary>
        public static ReceiverType PipelineGroup { get; } = new ReceiverType(PipelineGroupValue);
        /// <summary> Receives data from a OTLP collector. </summary>
        public static ReceiverType Otlp { get; } = new ReceiverType(OtlpValue);
        /// <summary> Receives data from an UDP collector. </summary>
        public static ReceiverType UDP { get; } = new ReceiverType(UDPValue);
        /// <summary> Determines if two <see cref="ReceiverType"/> values are the same. </summary>
        public static bool operator ==(ReceiverType left, ReceiverType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReceiverType"/> values are not the same. </summary>
        public static bool operator !=(ReceiverType left, ReceiverType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ReceiverType"/>. </summary>
        public static implicit operator ReceiverType(string value) => new ReceiverType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReceiverType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReceiverType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
