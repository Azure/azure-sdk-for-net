// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> The KnownDataFlowStreams. </summary>
    internal readonly partial struct KnownDataFlowStreams : IEquatable<KnownDataFlowStreams>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="KnownDataFlowStreams"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KnownDataFlowStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftEventValue = "Microsoft-Event";
        private const string MicrosoftInsightsMetricsValue = "Microsoft-InsightsMetrics";
        private const string MicrosoftPerfValue = "Microsoft-Perf";
        private const string MicrosoftSyslogValue = "Microsoft-Syslog";
        private const string MicrosoftWindowsEventValue = "Microsoft-WindowsEvent";

        /// <summary> Microsoft-Event. </summary>
        public static KnownDataFlowStreams MicrosoftEvent { get; } = new KnownDataFlowStreams(MicrosoftEventValue);
        /// <summary> Microsoft-InsightsMetrics. </summary>
        public static KnownDataFlowStreams MicrosoftInsightsMetrics { get; } = new KnownDataFlowStreams(MicrosoftInsightsMetricsValue);
        /// <summary> Microsoft-Perf. </summary>
        public static KnownDataFlowStreams MicrosoftPerf { get; } = new KnownDataFlowStreams(MicrosoftPerfValue);
        /// <summary> Microsoft-Syslog. </summary>
        public static KnownDataFlowStreams MicrosoftSyslog { get; } = new KnownDataFlowStreams(MicrosoftSyslogValue);
        /// <summary> Microsoft-WindowsEvent. </summary>
        public static KnownDataFlowStreams MicrosoftWindowsEvent { get; } = new KnownDataFlowStreams(MicrosoftWindowsEventValue);
        /// <summary> Determines if two <see cref="KnownDataFlowStreams"/> values are the same. </summary>
        public static bool operator ==(KnownDataFlowStreams left, KnownDataFlowStreams right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KnownDataFlowStreams"/> values are not the same. </summary>
        public static bool operator !=(KnownDataFlowStreams left, KnownDataFlowStreams right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="KnownDataFlowStreams"/>. </summary>
        public static implicit operator KnownDataFlowStreams(string value) => new KnownDataFlowStreams(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KnownDataFlowStreams other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KnownDataFlowStreams other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
