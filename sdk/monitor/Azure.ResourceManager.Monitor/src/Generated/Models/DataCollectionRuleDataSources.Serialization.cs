// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class DataCollectionRuleDataSources : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(PerformanceCounters))
            {
                writer.WritePropertyName("performanceCounters");
                writer.WriteStartArray();
                foreach (var item in PerformanceCounters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WindowsEventLogs))
            {
                writer.WritePropertyName("windowsEventLogs");
                writer.WriteStartArray();
                foreach (var item in WindowsEventLogs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Syslog))
            {
                writer.WritePropertyName("syslog");
                writer.WriteStartArray();
                foreach (var item in Syslog)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Extensions))
            {
                writer.WritePropertyName("extensions");
                writer.WriteStartArray();
                foreach (var item in Extensions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(LogFiles))
            {
                writer.WritePropertyName("logFiles");
                writer.WriteStartArray();
                foreach (var item in LogFiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IisLogs))
            {
                writer.WritePropertyName("iisLogs");
                writer.WriteStartArray();
                foreach (var item in IisLogs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static DataCollectionRuleDataSources DeserializeDataCollectionRuleDataSources(JsonElement element)
        {
            Optional<IList<PerfCounterDataSource>> performanceCounters = default;
            Optional<IList<WindowsEventLogDataSource>> windowsEventLogs = default;
            Optional<IList<SyslogDataSource>> syslog = default;
            Optional<IList<ExtensionDataSource>> extensions = default;
            Optional<IList<LogFilesDataSource>> logFiles = default;
            Optional<IList<IisLogsDataSource>> iisLogs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("performanceCounters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PerfCounterDataSource> array = new List<PerfCounterDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PerfCounterDataSource.DeserializePerfCounterDataSource(item));
                    }
                    performanceCounters = array;
                    continue;
                }
                if (property.NameEquals("windowsEventLogs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<WindowsEventLogDataSource> array = new List<WindowsEventLogDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WindowsEventLogDataSource.DeserializeWindowsEventLogDataSource(item));
                    }
                    windowsEventLogs = array;
                    continue;
                }
                if (property.NameEquals("syslog"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SyslogDataSource> array = new List<SyslogDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SyslogDataSource.DeserializeSyslogDataSource(item));
                    }
                    syslog = array;
                    continue;
                }
                if (property.NameEquals("extensions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ExtensionDataSource> array = new List<ExtensionDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ExtensionDataSource.DeserializeExtensionDataSource(item));
                    }
                    extensions = array;
                    continue;
                }
                if (property.NameEquals("logFiles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LogFilesDataSource> array = new List<LogFilesDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LogFilesDataSource.DeserializeLogFilesDataSource(item));
                    }
                    logFiles = array;
                    continue;
                }
                if (property.NameEquals("iisLogs"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IisLogsDataSource> array = new List<IisLogsDataSource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(IisLogsDataSource.DeserializeIisLogsDataSource(item));
                    }
                    iisLogs = array;
                    continue;
                }
            }
            return new DataCollectionRuleDataSources(Optional.ToList(performanceCounters), Optional.ToList(windowsEventLogs), Optional.ToList(syslog), Optional.ToList(extensions), Optional.ToList(logFiles), Optional.ToList(iisLogs));
        }
    }
}
