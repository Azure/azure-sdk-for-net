// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class NotificationContent : IUtf8JsonSerializable, IJsonModel<NotificationContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<NotificationContent>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<NotificationContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NotificationContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NotificationContent)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("alertType"u8);
            writer.WriteStringValue(AlertType);
            if (Optional.IsCollectionDefined(EmailReceivers))
            {
                writer.WritePropertyName("emailReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in EmailReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorEmailReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(SmsReceivers))
            {
                writer.WritePropertyName("smsReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in SmsReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorSmsReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WebhookReceivers))
            {
                writer.WritePropertyName("webhookReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in WebhookReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorWebhookReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ItsmReceivers))
            {
                writer.WritePropertyName("itsmReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in ItsmReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorItsmReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AzureAppPushReceivers))
            {
                writer.WritePropertyName("azureAppPushReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in AzureAppPushReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorAzureAppPushReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AutomationRunbookReceivers))
            {
                writer.WritePropertyName("automationRunbookReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in AutomationRunbookReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorAutomationRunbookReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(VoiceReceivers))
            {
                writer.WritePropertyName("voiceReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in VoiceReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorVoiceReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(LogicAppReceivers))
            {
                writer.WritePropertyName("logicAppReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in LogicAppReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorLogicAppReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AzureFunctionReceivers))
            {
                writer.WritePropertyName("azureFunctionReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in AzureFunctionReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorAzureFunctionReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ArmRoleReceivers))
            {
                writer.WritePropertyName("armRoleReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in ArmRoleReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorArmRoleReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EventHubReceivers))
            {
                writer.WritePropertyName("eventHubReceivers"u8);
                writer.WriteStartArray();
                foreach (var item in EventHubReceivers)
                {
                    if (item != null)
                    {
                        ((IJsonModel<MonitorEventHubReceiver>)item).Write(writer, options);
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        NotificationContent IJsonModel<NotificationContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NotificationContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NotificationContent)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNotificationContent(document.RootElement, options);
        }

        internal static NotificationContent DeserializeNotificationContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string alertType = default;
            Optional<IList<MonitorEmailReceiver>> emailReceivers = default;
            Optional<IList<MonitorSmsReceiver>> smsReceivers = default;
            Optional<IList<MonitorWebhookReceiver>> webhookReceivers = default;
            Optional<IList<MonitorItsmReceiver>> itsmReceivers = default;
            Optional<IList<MonitorAzureAppPushReceiver>> azureAppPushReceivers = default;
            Optional<IList<MonitorAutomationRunbookReceiver>> automationRunbookReceivers = default;
            Optional<IList<MonitorVoiceReceiver>> voiceReceivers = default;
            Optional<IList<MonitorLogicAppReceiver>> logicAppReceivers = default;
            Optional<IList<MonitorAzureFunctionReceiver>> azureFunctionReceivers = default;
            Optional<IList<MonitorArmRoleReceiver>> armRoleReceivers = default;
            Optional<IList<MonitorEventHubReceiver>> eventHubReceivers = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("alertType"u8))
                {
                    alertType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("emailReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorEmailReceiver> array = new List<MonitorEmailReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorEmailReceiver.DeserializeMonitorEmailReceiver(item));
                        }
                    }
                    emailReceivers = array;
                    continue;
                }
                if (property.NameEquals("smsReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorSmsReceiver> array = new List<MonitorSmsReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorSmsReceiver.DeserializeMonitorSmsReceiver(item));
                        }
                    }
                    smsReceivers = array;
                    continue;
                }
                if (property.NameEquals("webhookReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorWebhookReceiver> array = new List<MonitorWebhookReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorWebhookReceiver.DeserializeMonitorWebhookReceiver(item));
                        }
                    }
                    webhookReceivers = array;
                    continue;
                }
                if (property.NameEquals("itsmReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorItsmReceiver> array = new List<MonitorItsmReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorItsmReceiver.DeserializeMonitorItsmReceiver(item));
                        }
                    }
                    itsmReceivers = array;
                    continue;
                }
                if (property.NameEquals("azureAppPushReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorAzureAppPushReceiver> array = new List<MonitorAzureAppPushReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorAzureAppPushReceiver.DeserializeMonitorAzureAppPushReceiver(item));
                        }
                    }
                    azureAppPushReceivers = array;
                    continue;
                }
                if (property.NameEquals("automationRunbookReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorAutomationRunbookReceiver> array = new List<MonitorAutomationRunbookReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorAutomationRunbookReceiver.DeserializeMonitorAutomationRunbookReceiver(item));
                        }
                    }
                    automationRunbookReceivers = array;
                    continue;
                }
                if (property.NameEquals("voiceReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorVoiceReceiver> array = new List<MonitorVoiceReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorVoiceReceiver.DeserializeMonitorVoiceReceiver(item));
                        }
                    }
                    voiceReceivers = array;
                    continue;
                }
                if (property.NameEquals("logicAppReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorLogicAppReceiver> array = new List<MonitorLogicAppReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorLogicAppReceiver.DeserializeMonitorLogicAppReceiver(item));
                        }
                    }
                    logicAppReceivers = array;
                    continue;
                }
                if (property.NameEquals("azureFunctionReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorAzureFunctionReceiver> array = new List<MonitorAzureFunctionReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorAzureFunctionReceiver.DeserializeMonitorAzureFunctionReceiver(item));
                        }
                    }
                    azureFunctionReceivers = array;
                    continue;
                }
                if (property.NameEquals("armRoleReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorArmRoleReceiver> array = new List<MonitorArmRoleReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorArmRoleReceiver.DeserializeMonitorArmRoleReceiver(item));
                        }
                    }
                    armRoleReceivers = array;
                    continue;
                }
                if (property.NameEquals("eventHubReceivers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorEventHubReceiver> array = new List<MonitorEventHubReceiver>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(MonitorEventHubReceiver.DeserializeMonitorEventHubReceiver(item));
                        }
                    }
                    eventHubReceivers = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new NotificationContent(alertType, Optional.ToList(emailReceivers), Optional.ToList(smsReceivers), Optional.ToList(webhookReceivers), Optional.ToList(itsmReceivers), Optional.ToList(azureAppPushReceivers), Optional.ToList(automationRunbookReceivers), Optional.ToList(voiceReceivers), Optional.ToList(logicAppReceivers), Optional.ToList(azureFunctionReceivers), Optional.ToList(armRoleReceivers), Optional.ToList(eventHubReceivers), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<NotificationContent>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NotificationContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(NotificationContent)} does not support '{options.Format}' format.");
            }
        }

        NotificationContent IPersistableModel<NotificationContent>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NotificationContent>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeNotificationContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NotificationContent)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<NotificationContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
