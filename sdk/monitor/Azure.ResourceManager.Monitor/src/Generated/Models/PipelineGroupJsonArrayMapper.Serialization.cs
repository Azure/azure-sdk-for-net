// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
namespace Azure.AI.Language.Text.Authoring.Models
{
    public partial class ExportedDocumentEntityRegion : IUtf8JsonSerializable, IJsonModel<ExportedDocumentEntityRegion>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExportedDocumentEntityRegion>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ExportedDocumentEntityRegion>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.Monitor.Models
{
    public partial class PipelineGroupJsonArrayMapper : IUtf8JsonSerializable, IJsonModel<PipelineGroupJsonArrayMapper>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PipelineGroupJsonArrayMapper>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<PipelineGroupJsonArrayMapper>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<ExportedDocumentEntityRegion>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportedDocumentEntityRegion)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(RegionOffset))
            {
                writer.WritePropertyName("regionOffset"u8);
                writer.WriteNumberValue(RegionOffset.Value);
            }
            if (Optional.IsDefined(RegionLength))
            {
                writer.WritePropertyName("regionLength"u8);
                writer.WriteNumberValue(RegionLength.Value);
            }
            if (Optional.IsCollectionDefined(Labels))
            {
                writer.WritePropertyName("labels"u8);
                writer.WriteStartArray();
                foreach (var item in Labels)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
========
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupJsonArrayMapper>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PipelineGroupJsonArrayMapper)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(SourceField))
            {
                writer.WritePropertyName("sourceField"u8);
                writer.WriteObjectValue(SourceField, options);
            }
            if (Optional.IsDefined(DestinationField))
            {
                writer.WritePropertyName("destinationField"u8);
                writer.WriteObjectValue(DestinationField, options);
            }
            writer.WritePropertyName("keys"u8);
            writer.WriteStartArray();
            foreach (var item in Keys)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
        ExportedDocumentEntityRegion IJsonModel<ExportedDocumentEntityRegion>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedDocumentEntityRegion>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExportedDocumentEntityRegion)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExportedDocumentEntityRegion(document.RootElement, options);
        }

        internal static ExportedDocumentEntityRegion DeserializeExportedDocumentEntityRegion(JsonElement element, ModelReaderWriterOptions options = null)
========
        PipelineGroupJsonArrayMapper IJsonModel<PipelineGroupJsonArrayMapper>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupJsonArrayMapper>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(PipelineGroupJsonArrayMapper)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePipelineGroupJsonArrayMapper(document.RootElement, options);
        }

        internal static PipelineGroupJsonArrayMapper DeserializePipelineGroupJsonArrayMapper(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
            int? regionOffset = default;
            int? regionLength = default;
            IList<ExportedDocumentEntityLabel> labels = default;
========
            PipelineGroupJsonMapperSourceField sourceField = default;
            PipelineGroupJsonMapperDestinationField destinationField = default;
            IList<string> keys = default;
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
                if (property.NameEquals("regionOffset"u8))
========
                if (property.NameEquals("sourceField"u8))
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
                    regionOffset = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("regionLength"u8))
========
                    sourceField = PipelineGroupJsonMapperSourceField.DeserializePipelineGroupJsonMapperSourceField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("destinationField"u8))
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
                    regionLength = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("labels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ExportedDocumentEntityLabel> array = new List<ExportedDocumentEntityLabel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ExportedDocumentEntityLabel.DeserializeExportedDocumentEntityLabel(item, options));
                    }
                    labels = array;
========
                    destinationField = PipelineGroupJsonMapperDestinationField.DeserializePipelineGroupJsonMapperDestinationField(property.Value, options);
                    continue;
                }
                if (property.NameEquals("keys"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    keys = array;
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
            return new ExportedDocumentEntityRegion(regionOffset, regionLength, labels ?? new ChangeTrackingList<ExportedDocumentEntityLabel>(), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ExportedDocumentEntityRegion>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedDocumentEntityRegion>)this).GetFormatFromOptions(options) : options.Format;
========
            return new PipelineGroupJsonArrayMapper(sourceField, destinationField, keys, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PipelineGroupJsonArrayMapper>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupJsonArrayMapper>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
                    throw new FormatException($"The model {nameof(ExportedDocumentEntityRegion)} does not support writing '{options.Format}' format.");
            }
        }

        ExportedDocumentEntityRegion IPersistableModel<ExportedDocumentEntityRegion>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExportedDocumentEntityRegion>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(PipelineGroupJsonArrayMapper)} does not support writing '{options.Format}' format.");
            }
        }

        PipelineGroupJsonArrayMapper IPersistableModel<PipelineGroupJsonArrayMapper>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<PipelineGroupJsonArrayMapper>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/cognitivelanguage/Azure.AI.Language.Text.Authoring/src/Generated/Models/ExportedDocumentEntityRegion.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeExportedDocumentEntityRegion(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExportedDocumentEntityRegion)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExportedDocumentEntityRegion>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ExportedDocumentEntityRegion FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeExportedDocumentEntityRegion(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializePipelineGroupJsonArrayMapper(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(PipelineGroupJsonArrayMapper)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<PipelineGroupJsonArrayMapper>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:sdk/monitor/Azure.ResourceManager.Monitor/src/Generated/Models/PipelineGroupJsonArrayMapper.Serialization.cs
    }
}
