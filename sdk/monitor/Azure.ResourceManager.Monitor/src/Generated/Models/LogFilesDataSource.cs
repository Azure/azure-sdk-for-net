// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> Definition of which custom log files will be collected by this data collection rule. </summary>
    public partial class LogFilesDataSource
    {
        /// <summary> Initializes a new instance of <see cref="LogFilesDataSource"/>. </summary>
        /// <param name="streams">
        /// List of streams that this data source will be sent to.
        /// A stream indicates what schema will be used for this data source
        /// </param>
        /// <param name="filePatterns"> File Patterns where the log files are located. </param>
        /// <param name="format"> The data format of the log files. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="streams"/> or <paramref name="filePatterns"/> is null. </exception>
        public LogFilesDataSource(IEnumerable<string> streams, IEnumerable<string> filePatterns, LogFilesDataSourceFormat format)
        {
            Argument.AssertNotNull(streams, nameof(streams));
            Argument.AssertNotNull(filePatterns, nameof(filePatterns));

            Streams = streams.ToList();
            FilePatterns = filePatterns.ToList();
            Format = format;
        }

        /// <summary> Initializes a new instance of <see cref="LogFilesDataSource"/>. </summary>
        /// <param name="streams">
        /// List of streams that this data source will be sent to.
        /// A stream indicates what schema will be used for this data source
        /// </param>
        /// <param name="filePatterns"> File Patterns where the log files are located. </param>
        /// <param name="format"> The data format of the log files. </param>
        /// <param name="settings"> The log files specific settings. </param>
        /// <param name="name">
        /// A friendly name for the data source.
        /// This name should be unique across all data sources (regardless of type) within the data collection rule.
        /// </param>
        internal LogFilesDataSource(IList<string> streams, IList<string> filePatterns, LogFilesDataSourceFormat format, LogFilesDataSourceSettings settings, string name)
        {
            Streams = streams;
            FilePatterns = filePatterns;
            Format = format;
            Settings = settings;
            Name = name;
        }

        /// <summary>
        /// List of streams that this data source will be sent to.
        /// A stream indicates what schema will be used for this data source
        /// </summary>
        public IList<string> Streams { get; }
        /// <summary> File Patterns where the log files are located. </summary>
        public IList<string> FilePatterns { get; }
        /// <summary> The data format of the log files. </summary>
        public LogFilesDataSourceFormat Format { get; set; }
        /// <summary> The log files specific settings. </summary>
        internal LogFilesDataSourceSettings Settings { get; set; }
        /// <summary> One of the supported timestamp formats. </summary>
        public LogFileTextSettingsRecordStartTimestampFormat? TextRecordStartTimestampFormat
        {
            get => Settings is null ? default : Settings.TextRecordStartTimestampFormat;
            set
            {
                if (value.HasValue)
                {
                    if (Settings is null)
                        Settings = new LogFilesDataSourceSettings();
                    Settings.TextRecordStartTimestampFormat = value.Value;
                }
                else
                {
                    Settings = null;
                }
            }
        }

        /// <summary>
        /// A friendly name for the data source.
        /// This name should be unique across all data sources (regardless of type) within the data collection rule.
        /// </summary>
        public string Name { get; set; }
    }
}
