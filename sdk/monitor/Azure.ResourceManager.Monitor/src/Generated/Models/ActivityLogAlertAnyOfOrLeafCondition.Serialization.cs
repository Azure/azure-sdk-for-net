// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class ActivityLogAlertAnyOfOrLeafCondition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AnyOf))
            {
                writer.WritePropertyName("anyOf");
                writer.WriteStartArray();
                foreach (var item in AnyOf)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Field))
            {
                writer.WritePropertyName("field");
                writer.WriteStringValue(Field);
            }
            if (Optional.IsDefined(EqualsValue))
            {
                writer.WritePropertyName("equals");
                writer.WriteStringValue(EqualsValue);
            }
            if (Optional.IsCollectionDefined(ContainsAny))
            {
                writer.WritePropertyName("containsAny");
                writer.WriteStartArray();
                foreach (var item in ContainsAny)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ActivityLogAlertAnyOfOrLeafCondition DeserializeActivityLogAlertAnyOfOrLeafCondition(JsonElement element)
        {
            Optional<IList<AlertRuleLeafCondition>> anyOf = default;
            Optional<string> field = default;
            Optional<string> @equals = default;
            Optional<IList<string>> containsAny = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("anyOf"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AlertRuleLeafCondition> array = new List<AlertRuleLeafCondition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeAlertRuleLeafCondition(item));
                    }
                    anyOf = array;
                    continue;
                }
                if (property.NameEquals("field"))
                {
                    field = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("equals"))
                {
                    @equals = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("containsAny"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    containsAny = array;
                    continue;
                }
            }
            return new ActivityLogAlertAnyOfOrLeafCondition(field.Value, @equals.Value, Optional.ToList(containsAny), Optional.ToList(anyOf));
        }
    }
}
