// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class DestinationsSpec : IUtf8JsonSerializable, IJsonModel<DestinationsSpec>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DestinationsSpec>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DestinationsSpec>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DestinationsSpec>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DestinationsSpec)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(LogAnalytics))
            {
                writer.WritePropertyName("logAnalytics"u8);
                writer.WriteStartArray();
                foreach (var item in LogAnalytics)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MonitoringAccounts))
            {
                writer.WritePropertyName("monitoringAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in MonitoringAccounts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AzureMonitorMetrics))
            {
                writer.WritePropertyName("azureMonitorMetrics"u8);
                writer.WriteObjectValue(AzureMonitorMetrics, options);
            }
            if (Optional.IsCollectionDefined(EventHubs))
            {
                writer.WritePropertyName("eventHubs"u8);
                writer.WriteStartArray();
                foreach (var item in EventHubs)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EventHubsDirect))
            {
                writer.WritePropertyName("eventHubsDirect"u8);
                writer.WriteStartArray();
                foreach (var item in EventHubsDirect)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageBlobsDirect))
            {
                writer.WritePropertyName("storageBlobsDirect"u8);
                writer.WriteStartArray();
                foreach (var item in StorageBlobsDirect)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageTablesDirect))
            {
                writer.WritePropertyName("storageTablesDirect"u8);
                writer.WriteStartArray();
                foreach (var item in StorageTablesDirect)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageAccounts))
            {
                writer.WritePropertyName("storageAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in StorageAccounts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DestinationsSpec IJsonModel<DestinationsSpec>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DestinationsSpec>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DestinationsSpec)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDestinationsSpec(document.RootElement, options);
        }

        internal static DestinationsSpec DeserializeDestinationsSpec(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<LogAnalyticsDestination> logAnalytics = default;
            IList<MonitoringAccountDestination> monitoringAccounts = default;
            DestinationsSpecAzureMonitorMetrics azureMonitorMetrics = default;
            IList<DataCollectionRuleEventHubDestination> eventHubs = default;
            IList<DataCollectionRuleEventHubDirectDestination> eventHubsDirect = default;
            IList<DataCollectionRuleStorageBlobDestination> storageBlobsDirect = default;
            IList<DataCollectionRuleStorageTableDestination> storageTablesDirect = default;
            IList<DataCollectionRuleStorageBlobDestination> storageAccounts = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("logAnalytics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LogAnalyticsDestination> array = new List<LogAnalyticsDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LogAnalyticsDestination.DeserializeLogAnalyticsDestination(item, options));
                    }
                    logAnalytics = array;
                    continue;
                }
                if (property.NameEquals("monitoringAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitoringAccountDestination> array = new List<MonitoringAccountDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitoringAccountDestination.DeserializeMonitoringAccountDestination(item, options));
                    }
                    monitoringAccounts = array;
                    continue;
                }
                if (property.NameEquals("azureMonitorMetrics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureMonitorMetrics = DestinationsSpecAzureMonitorMetrics.DeserializeDestinationsSpecAzureMonitorMetrics(property.Value, options);
                    continue;
                }
                if (property.NameEquals("eventHubs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleEventHubDestination> array = new List<DataCollectionRuleEventHubDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleEventHubDestination.DeserializeDataCollectionRuleEventHubDestination(item, options));
                    }
                    eventHubs = array;
                    continue;
                }
                if (property.NameEquals("eventHubsDirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleEventHubDirectDestination> array = new List<DataCollectionRuleEventHubDirectDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleEventHubDirectDestination.DeserializeDataCollectionRuleEventHubDirectDestination(item, options));
                    }
                    eventHubsDirect = array;
                    continue;
                }
                if (property.NameEquals("storageBlobsDirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleStorageBlobDestination> array = new List<DataCollectionRuleStorageBlobDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleStorageBlobDestination.DeserializeDataCollectionRuleStorageBlobDestination(item, options));
                    }
                    storageBlobsDirect = array;
                    continue;
                }
                if (property.NameEquals("storageTablesDirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleStorageTableDestination> array = new List<DataCollectionRuleStorageTableDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleStorageTableDestination.DeserializeDataCollectionRuleStorageTableDestination(item, options));
                    }
                    storageTablesDirect = array;
                    continue;
                }
                if (property.NameEquals("storageAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleStorageBlobDestination> array = new List<DataCollectionRuleStorageBlobDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleStorageBlobDestination.DeserializeDataCollectionRuleStorageBlobDestination(item, options));
                    }
                    storageAccounts = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DestinationsSpec(
                logAnalytics ?? new ChangeTrackingList<LogAnalyticsDestination>(),
                monitoringAccounts ?? new ChangeTrackingList<MonitoringAccountDestination>(),
                azureMonitorMetrics,
                eventHubs ?? new ChangeTrackingList<DataCollectionRuleEventHubDestination>(),
                eventHubsDirect ?? new ChangeTrackingList<DataCollectionRuleEventHubDirectDestination>(),
                storageBlobsDirect ?? new ChangeTrackingList<DataCollectionRuleStorageBlobDestination>(),
                storageTablesDirect ?? new ChangeTrackingList<DataCollectionRuleStorageTableDestination>(),
                storageAccounts ?? new ChangeTrackingList<DataCollectionRuleStorageBlobDestination>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DestinationsSpec>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DestinationsSpec>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DestinationsSpec)} does not support writing '{options.Format}' format.");
            }
        }

        DestinationsSpec IPersistableModel<DestinationsSpec>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DestinationsSpec>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDestinationsSpec(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DestinationsSpec)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DestinationsSpec>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
