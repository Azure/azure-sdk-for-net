// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class DestinationsSpec : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(LogAnalytics))
            {
                writer.WritePropertyName("logAnalytics"u8);
                writer.WriteStartArray();
                foreach (var item in LogAnalytics)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MonitoringAccounts))
            {
                writer.WritePropertyName("monitoringAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in MonitoringAccounts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AzureMonitorMetrics))
            {
                writer.WritePropertyName("azureMonitorMetrics"u8);
                writer.WriteObjectValue(AzureMonitorMetrics);
            }
            if (Optional.IsCollectionDefined(EventHubs))
            {
                writer.WritePropertyName("eventHubs"u8);
                writer.WriteStartArray();
                foreach (var item in EventHubs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EventHubsDirect))
            {
                writer.WritePropertyName("eventHubsDirect"u8);
                writer.WriteStartArray();
                foreach (var item in EventHubsDirect)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageBlobsDirect))
            {
                writer.WritePropertyName("storageBlobsDirect"u8);
                writer.WriteStartArray();
                foreach (var item in StorageBlobsDirect)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageTablesDirect))
            {
                writer.WritePropertyName("storageTablesDirect"u8);
                writer.WriteStartArray();
                foreach (var item in StorageTablesDirect)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(StorageAccounts))
            {
                writer.WritePropertyName("storageAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in StorageAccounts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static DestinationsSpec DeserializeDestinationsSpec(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<LogAnalyticsDestination>> logAnalytics = default;
            Optional<IList<MonitoringAccountDestination>> monitoringAccounts = default;
            Optional<DestinationsSpecAzureMonitorMetrics> azureMonitorMetrics = default;
            Optional<IList<DataCollectionRuleEventHubDestination>> eventHubs = default;
            Optional<IList<DataCollectionRuleEventHubDirectDestination>> eventHubsDirect = default;
            Optional<IList<DataCollectionRuleStorageBlobDestination>> storageBlobsDirect = default;
            Optional<IList<DataCollectionRuleStorageTableDestination>> storageTablesDirect = default;
            Optional<IList<DataCollectionRuleStorageBlobDestination>> storageAccounts = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("logAnalytics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LogAnalyticsDestination> array = new List<LogAnalyticsDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LogAnalyticsDestination.DeserializeLogAnalyticsDestination(item));
                    }
                    logAnalytics = array;
                    continue;
                }
                if (property.NameEquals("monitoringAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitoringAccountDestination> array = new List<MonitoringAccountDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitoringAccountDestination.DeserializeMonitoringAccountDestination(item));
                    }
                    monitoringAccounts = array;
                    continue;
                }
                if (property.NameEquals("azureMonitorMetrics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureMonitorMetrics = DestinationsSpecAzureMonitorMetrics.DeserializeDestinationsSpecAzureMonitorMetrics(property.Value);
                    continue;
                }
                if (property.NameEquals("eventHubs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleEventHubDestination> array = new List<DataCollectionRuleEventHubDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleEventHubDestination.DeserializeDataCollectionRuleEventHubDestination(item));
                    }
                    eventHubs = array;
                    continue;
                }
                if (property.NameEquals("eventHubsDirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleEventHubDirectDestination> array = new List<DataCollectionRuleEventHubDirectDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleEventHubDirectDestination.DeserializeDataCollectionRuleEventHubDirectDestination(item));
                    }
                    eventHubsDirect = array;
                    continue;
                }
                if (property.NameEquals("storageBlobsDirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleStorageBlobDestination> array = new List<DataCollectionRuleStorageBlobDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleStorageBlobDestination.DeserializeDataCollectionRuleStorageBlobDestination(item));
                    }
                    storageBlobsDirect = array;
                    continue;
                }
                if (property.NameEquals("storageTablesDirect"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleStorageTableDestination> array = new List<DataCollectionRuleStorageTableDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleStorageTableDestination.DeserializeDataCollectionRuleStorageTableDestination(item));
                    }
                    storageTablesDirect = array;
                    continue;
                }
                if (property.NameEquals("storageAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataCollectionRuleStorageBlobDestination> array = new List<DataCollectionRuleStorageBlobDestination>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataCollectionRuleStorageBlobDestination.DeserializeDataCollectionRuleStorageBlobDestination(item));
                    }
                    storageAccounts = array;
                    continue;
                }
            }
            return new DestinationsSpec(Optional.ToList(logAnalytics), Optional.ToList(monitoringAccounts), azureMonitorMetrics.Value, Optional.ToList(eventHubs), Optional.ToList(eventHubsDirect), Optional.ToList(storageBlobsDirect), Optional.ToList(storageTablesDirect), Optional.ToList(storageAccounts));
        }
    }
}
