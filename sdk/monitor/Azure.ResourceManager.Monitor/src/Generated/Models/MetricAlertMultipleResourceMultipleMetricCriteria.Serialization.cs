// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class MetricAlertMultipleResourceMultipleMetricCriteria : IUtf8JsonSerializable, IModelJsonSerializable<MetricAlertMultipleResourceMultipleMetricCriteria>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MetricAlertMultipleResourceMultipleMetricCriteria>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MetricAlertMultipleResourceMultipleMetricCriteria>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<MetricAlertMultipleResourceMultipleMetricCriteria>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AllOf))
            {
                writer.WritePropertyName("allOf"u8);
                writer.WriteStartArray();
                foreach (var item in AllOf)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("odata.type"u8);
            writer.WriteStringValue(OdataType.ToString());
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static MetricAlertMultipleResourceMultipleMetricCriteria DeserializeMetricAlertMultipleResourceMultipleMetricCriteria(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<MultiMetricCriteria>> allOf = default;
            MonitorOdataType odataType = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("allOf"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MultiMetricCriteria> array = new List<MultiMetricCriteria>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MultiMetricCriteria.DeserializeMultiMetricCriteria(item));
                    }
                    allOf = array;
                    continue;
                }
                if (property.NameEquals("odata.type"u8))
                {
                    odataType = new MonitorOdataType(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new MetricAlertMultipleResourceMultipleMetricCriteria(odataType, additionalProperties, Optional.ToList(allOf));
        }

        MetricAlertMultipleResourceMultipleMetricCriteria IModelJsonSerializable<MetricAlertMultipleResourceMultipleMetricCriteria>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<MetricAlertMultipleResourceMultipleMetricCriteria>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMetricAlertMultipleResourceMultipleMetricCriteria(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MetricAlertMultipleResourceMultipleMetricCriteria>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<MetricAlertMultipleResourceMultipleMetricCriteria>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MetricAlertMultipleResourceMultipleMetricCriteria IModelSerializable<MetricAlertMultipleResourceMultipleMetricCriteria>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<MetricAlertMultipleResourceMultipleMetricCriteria>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMetricAlertMultipleResourceMultipleMetricCriteria(doc.RootElement, options);
        }

        public static implicit operator RequestContent(MetricAlertMultipleResourceMultipleMetricCriteria model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator MetricAlertMultipleResourceMultipleMetricCriteria(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMetricAlertMultipleResourceMultipleMetricCriteria(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
