// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> The exporter type. </summary>
    public readonly partial struct ExporterType : IEquatable<ExporterType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExporterType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExporterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureMonitorWorkspaceLogsValue = "AzureMonitorWorkspaceLogs";
        private const string PipelineGroupValue = "PipelineGroup";

        /// <summary> Export logs to Azure Monitor Workspace. </summary>
        public static ExporterType AzureMonitorWorkspaceLogs { get; } = new ExporterType(AzureMonitorWorkspaceLogsValue);
        /// <summary> Export data to another pipeline group instance. </summary>
        public static ExporterType PipelineGroup { get; } = new ExporterType(PipelineGroupValue);
        /// <summary> Determines if two <see cref="ExporterType"/> values are the same. </summary>
        public static bool operator ==(ExporterType left, ExporterType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExporterType"/> values are not the same. </summary>
        public static bool operator !=(ExporterType left, ExporterType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExporterType"/>. </summary>
        public static implicit operator ExporterType(string value) => new ExporterType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExporterType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExporterType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
