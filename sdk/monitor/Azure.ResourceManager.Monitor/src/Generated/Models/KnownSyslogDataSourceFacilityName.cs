// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> The KnownSyslogDataSourceFacilityName. </summary>
    public readonly partial struct KnownSyslogDataSourceFacilityName : IEquatable<KnownSyslogDataSourceFacilityName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="KnownSyslogDataSourceFacilityName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KnownSyslogDataSourceFacilityName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuthValue = "auth";
        private const string AuthprivValue = "authpriv";
        private const string CronValue = "cron";
        private const string DaemonValue = "daemon";
        private const string KernValue = "kern";
        private const string LprValue = "lpr";
        private const string MailValue = "mail";
        private const string MarkValue = "mark";
        private const string NewsValue = "news";
        private const string SyslogValue = "syslog";
        private const string UserValue = "user";
        private const string UucpValue = "uucp";
        private const string Local0Value = "local0";
        private const string Local1Value = "local1";
        private const string Local2Value = "local2";
        private const string Local3Value = "local3";
        private const string Local4Value = "local4";
        private const string Local5Value = "local5";
        private const string Local6Value = "local6";
        private const string Local7Value = "local7";
        private const string AsteriskValue = "*";

        /// <summary> auth. </summary>
        public static KnownSyslogDataSourceFacilityName Auth { get; } = new KnownSyslogDataSourceFacilityName(AuthValue);
        /// <summary> authpriv. </summary>
        public static KnownSyslogDataSourceFacilityName Authpriv { get; } = new KnownSyslogDataSourceFacilityName(AuthprivValue);
        /// <summary> cron. </summary>
        public static KnownSyslogDataSourceFacilityName Cron { get; } = new KnownSyslogDataSourceFacilityName(CronValue);
        /// <summary> daemon. </summary>
        public static KnownSyslogDataSourceFacilityName Daemon { get; } = new KnownSyslogDataSourceFacilityName(DaemonValue);
        /// <summary> kern. </summary>
        public static KnownSyslogDataSourceFacilityName Kern { get; } = new KnownSyslogDataSourceFacilityName(KernValue);
        /// <summary> lpr. </summary>
        public static KnownSyslogDataSourceFacilityName Lpr { get; } = new KnownSyslogDataSourceFacilityName(LprValue);
        /// <summary> mail. </summary>
        public static KnownSyslogDataSourceFacilityName Mail { get; } = new KnownSyslogDataSourceFacilityName(MailValue);
        /// <summary> mark. </summary>
        public static KnownSyslogDataSourceFacilityName Mark { get; } = new KnownSyslogDataSourceFacilityName(MarkValue);
        /// <summary> news. </summary>
        public static KnownSyslogDataSourceFacilityName News { get; } = new KnownSyslogDataSourceFacilityName(NewsValue);
        /// <summary> syslog. </summary>
        public static KnownSyslogDataSourceFacilityName Syslog { get; } = new KnownSyslogDataSourceFacilityName(SyslogValue);
        /// <summary> user. </summary>
        public static KnownSyslogDataSourceFacilityName User { get; } = new KnownSyslogDataSourceFacilityName(UserValue);
        /// <summary> uucp. </summary>
        public static KnownSyslogDataSourceFacilityName Uucp { get; } = new KnownSyslogDataSourceFacilityName(UucpValue);
        /// <summary> local0. </summary>
        public static KnownSyslogDataSourceFacilityName Local0 { get; } = new KnownSyslogDataSourceFacilityName(Local0Value);
        /// <summary> local1. </summary>
        public static KnownSyslogDataSourceFacilityName Local1 { get; } = new KnownSyslogDataSourceFacilityName(Local1Value);
        /// <summary> local2. </summary>
        public static KnownSyslogDataSourceFacilityName Local2 { get; } = new KnownSyslogDataSourceFacilityName(Local2Value);
        /// <summary> local3. </summary>
        public static KnownSyslogDataSourceFacilityName Local3 { get; } = new KnownSyslogDataSourceFacilityName(Local3Value);
        /// <summary> local4. </summary>
        public static KnownSyslogDataSourceFacilityName Local4 { get; } = new KnownSyslogDataSourceFacilityName(Local4Value);
        /// <summary> local5. </summary>
        public static KnownSyslogDataSourceFacilityName Local5 { get; } = new KnownSyslogDataSourceFacilityName(Local5Value);
        /// <summary> local6. </summary>
        public static KnownSyslogDataSourceFacilityName Local6 { get; } = new KnownSyslogDataSourceFacilityName(Local6Value);
        /// <summary> local7. </summary>
        public static KnownSyslogDataSourceFacilityName Local7 { get; } = new KnownSyslogDataSourceFacilityName(Local7Value);
        /// <summary> *. </summary>
        public static KnownSyslogDataSourceFacilityName Asterisk { get; } = new KnownSyslogDataSourceFacilityName(AsteriskValue);
        /// <summary> Determines if two <see cref="KnownSyslogDataSourceFacilityName"/> values are the same. </summary>
        public static bool operator ==(KnownSyslogDataSourceFacilityName left, KnownSyslogDataSourceFacilityName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KnownSyslogDataSourceFacilityName"/> values are not the same. </summary>
        public static bool operator !=(KnownSyslogDataSourceFacilityName left, KnownSyslogDataSourceFacilityName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="KnownSyslogDataSourceFacilityName"/>. </summary>
        public static implicit operator KnownSyslogDataSourceFacilityName(string value) => new KnownSyslogDataSourceFacilityName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KnownSyslogDataSourceFacilityName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KnownSyslogDataSourceFacilityName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
