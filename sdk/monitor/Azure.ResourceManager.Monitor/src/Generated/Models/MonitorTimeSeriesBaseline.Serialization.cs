// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class MonitorTimeSeriesBaseline
    {
        internal static MonitorTimeSeriesBaseline DeserializeMonitorTimeSeriesBaseline(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string aggregation = default;
            Optional<IReadOnlyList<MonitorMetricSingleDimension>> dimensions = default;
            IReadOnlyList<DateTimeOffset> timestamps = default;
            IReadOnlyList<MonitorSingleBaseline> data = default;
            Optional<IReadOnlyList<MonitorBaselineMetadata>> metadataValues = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("aggregation"u8))
                {
                    aggregation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorMetricSingleDimension> array = new List<MonitorMetricSingleDimension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorMetricSingleDimension.DeserializeMonitorMetricSingleDimension(item));
                    }
                    dimensions = array;
                    continue;
                }
                if (property.NameEquals("timestamps"u8))
                {
                    List<DateTimeOffset> array = new List<DateTimeOffset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDateTimeOffset("O"));
                    }
                    timestamps = array;
                    continue;
                }
                if (property.NameEquals("data"u8))
                {
                    List<MonitorSingleBaseline> array = new List<MonitorSingleBaseline>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorSingleBaseline.DeserializeMonitorSingleBaseline(item));
                    }
                    data = array;
                    continue;
                }
                if (property.NameEquals("metadataValues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MonitorBaselineMetadata> array = new List<MonitorBaselineMetadata>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MonitorBaselineMetadata.DeserializeMonitorBaselineMetadata(item));
                    }
                    metadataValues = array;
                    continue;
                }
            }
            return new MonitorTimeSeriesBaseline(aggregation, Optional.ToList(dimensions), timestamps, data, Optional.ToList(metadataValues));
        }
    }
}
