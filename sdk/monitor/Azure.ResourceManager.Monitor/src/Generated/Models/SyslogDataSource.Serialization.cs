// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class SyslogDataSource : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(Streams))
            {
                writer.WritePropertyName("streams"u8);
                writer.WriteStartArray();
                foreach (var item in Streams)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(FacilityNames))
            {
                writer.WritePropertyName("facilityNames"u8);
                writer.WriteStartArray();
                foreach (var item in FacilityNames)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(LogLevels))
            {
                writer.WritePropertyName("logLevels"u8);
                writer.WriteStartArray();
                foreach (var item in LogLevels)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            writer.WriteEndObject();
        }

        internal static SyslogDataSource DeserializeSyslogDataSource(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<IList<SyslogDataSourceStream>> streams = default;
            Core.Optional<IList<SyslogDataSourceFacilityName>> facilityNames = default;
            Core.Optional<IList<SyslogDataSourceLogLevel>> logLevels = default;
            Core.Optional<string> name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("streams"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SyslogDataSourceStream> array = new List<SyslogDataSourceStream>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SyslogDataSourceStream(item.GetString()));
                    }
                    streams = array;
                    continue;
                }
                if (property.NameEquals("facilityNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SyslogDataSourceFacilityName> array = new List<SyslogDataSourceFacilityName>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SyslogDataSourceFacilityName(item.GetString()));
                    }
                    facilityNames = array;
                    continue;
                }
                if (property.NameEquals("logLevels"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SyslogDataSourceLogLevel> array = new List<SyslogDataSourceLogLevel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new SyslogDataSourceLogLevel(item.GetString()));
                    }
                    logLevels = array;
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
            }
            return new SyslogDataSource(Core.Optional.ToList(streams), Core.Optional.ToList(facilityNames), Core.Optional.ToList(logLevels), name.Value);
        }
    }
}
