// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary>
    /// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
    /// This condition must contain 'field' and either 'equals' or 'containsAny'.
    /// </summary>
    public partial class AlertRuleLeafCondition
    {
        /// <summary> Initializes a new instance of <see cref="AlertRuleLeafCondition"/>. </summary>
        public AlertRuleLeafCondition()
        {
            ContainsAny = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="AlertRuleLeafCondition"/>. </summary>
        /// <param name="field">
        /// The name of the Activity Log event's field that this condition will examine.
        /// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
        /// </param>
        /// <param name="equalsValue"> The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met. </param>
        /// <param name="containsAny"> The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met. </param>
        internal AlertRuleLeafCondition(string field, string equalsValue, IList<string> containsAny)
        {
            Field = field;
            EqualsValue = equalsValue;
            ContainsAny = containsAny;
        }

        /// <summary>
        /// The name of the Activity Log event's field that this condition will examine.
        /// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
        /// </summary>
        public string Field { get; set; }
        /// <summary> The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met. </summary>
        public string EqualsValue { get; set; }
        /// <summary> The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met. </summary>
        public IList<string> ContainsAny { get; }
    }
}
