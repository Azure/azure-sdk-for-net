// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Monitor.Models
{
    public partial class MetricTrigger : IUtf8JsonSerializable, IModelJsonSerializable<MetricTrigger>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MetricTrigger>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MetricTrigger>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MetricTrigger>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("metricName"u8);
            writer.WriteStringValue(MetricName);
            if (Optional.IsDefined(MetricNamespace))
            {
                writer.WritePropertyName("metricNamespace"u8);
                writer.WriteStringValue(MetricNamespace);
            }
            writer.WritePropertyName("metricResourceUri"u8);
            writer.WriteStringValue(MetricResourceId);
            if (Optional.IsDefined(MetricResourceLocation))
            {
                writer.WritePropertyName("metricResourceLocation"u8);
                writer.WriteStringValue(MetricResourceLocation.Value);
            }
            writer.WritePropertyName("timeGrain"u8);
            writer.WriteStringValue(TimeGrain, "P");
            writer.WritePropertyName("statistic"u8);
            writer.WriteStringValue(Statistic.ToSerialString());
            writer.WritePropertyName("timeWindow"u8);
            writer.WriteStringValue(TimeWindow, "P");
            writer.WritePropertyName("timeAggregation"u8);
            writer.WriteStringValue(TimeAggregation.ToSerialString());
            writer.WritePropertyName("operator"u8);
            writer.WriteStringValue(Operator.ToSerialString());
            writer.WritePropertyName("threshold"u8);
            writer.WriteNumberValue(Threshold);
            if (Optional.IsCollectionDefined(Dimensions))
            {
                if (Dimensions != null)
                {
                    writer.WritePropertyName("dimensions"u8);
                    writer.WriteStartArray();
                    foreach (var item in Dimensions)
                    {
                        if (item is null)
                        {
                            writer.WriteNullValue();
                        }
                        else
                        {
                            ((IModelJsonSerializable<AutoscaleRuleMetricDimension>)item).Serialize(writer, options);
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("dimensions");
                }
            }
            if (Optional.IsDefined(IsDividedPerInstance))
            {
                writer.WritePropertyName("dividePerInstance"u8);
                writer.WriteBooleanValue(IsDividedPerInstance.Value);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MetricTrigger DeserializeMetricTrigger(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string metricName = default;
            Optional<string> metricNamespace = default;
            ResourceIdentifier metricResourceUri = default;
            Optional<AzureLocation> metricResourceLocation = default;
            TimeSpan timeGrain = default;
            MetricStatisticType statistic = default;
            TimeSpan timeWindow = default;
            MetricTriggerTimeAggregationType timeAggregation = default;
            MetricTriggerComparisonOperation @operator = default;
            double threshold = default;
            Optional<IList<AutoscaleRuleMetricDimension>> dimensions = default;
            Optional<bool> dividePerInstance = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("metricName"u8))
                {
                    metricName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metricNamespace"u8))
                {
                    metricNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metricResourceUri"u8))
                {
                    metricResourceUri = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("metricResourceLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    metricResourceLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timeGrain"u8))
                {
                    timeGrain = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("statistic"u8))
                {
                    statistic = property.Value.GetString().ToMetricStatisticType();
                    continue;
                }
                if (property.NameEquals("timeWindow"u8))
                {
                    timeWindow = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("timeAggregation"u8))
                {
                    timeAggregation = property.Value.GetString().ToMetricTriggerTimeAggregationType();
                    continue;
                }
                if (property.NameEquals("operator"u8))
                {
                    @operator = property.Value.GetString().ToMetricTriggerComparisonOperation();
                    continue;
                }
                if (property.NameEquals("threshold"u8))
                {
                    threshold = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("dimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dimensions = null;
                        continue;
                    }
                    List<AutoscaleRuleMetricDimension> array = new List<AutoscaleRuleMetricDimension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AutoscaleRuleMetricDimension.DeserializeAutoscaleRuleMetricDimension(item));
                    }
                    dimensions = array;
                    continue;
                }
                if (property.NameEquals("dividePerInstance"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dividePerInstance = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MetricTrigger(metricName, metricNamespace.Value, metricResourceUri, Optional.ToNullable(metricResourceLocation), timeGrain, statistic, timeWindow, timeAggregation, @operator, threshold, Optional.ToList(dimensions), Optional.ToNullable(dividePerInstance), rawData);
        }

        MetricTrigger IModelJsonSerializable<MetricTrigger>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MetricTrigger>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMetricTrigger(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MetricTrigger>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MetricTrigger>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MetricTrigger IModelSerializable<MetricTrigger>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MetricTrigger>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMetricTrigger(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MetricTrigger"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MetricTrigger"/> to convert. </param>
        public static implicit operator RequestContent(MetricTrigger model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MetricTrigger"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MetricTrigger(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMetricTrigger(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
