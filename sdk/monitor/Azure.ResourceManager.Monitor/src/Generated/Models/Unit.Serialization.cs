// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Monitor.Models
{
    internal static partial class UnitExtensions
    {
        public static string ToSerialString(this Unit value) => value switch
        {
            Unit.Unspecified => "Unspecified",
            Unit.Count => "Count",
            Unit.Bytes => "Bytes",
            Unit.Seconds => "Seconds",
            Unit.CountPerSecond => "CountPerSecond",
            Unit.BytesPerSecond => "BytesPerSecond",
            Unit.Percent => "Percent",
            Unit.MilliSeconds => "MilliSeconds",
            Unit.ByteSeconds => "ByteSeconds",
            Unit.Cores => "Cores",
            Unit.MilliCores => "MilliCores",
            Unit.NanoCores => "NanoCores",
            Unit.BitsPerSecond => "BitsPerSecond",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown Unit value.")
        };

        public static Unit ToUnit(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unspecified")) return Unit.Unspecified;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Count")) return Unit.Count;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Bytes")) return Unit.Bytes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Seconds")) return Unit.Seconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CountPerSecond")) return Unit.CountPerSecond;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BytesPerSecond")) return Unit.BytesPerSecond;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Percent")) return Unit.Percent;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MilliSeconds")) return Unit.MilliSeconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ByteSeconds")) return Unit.ByteSeconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Cores")) return Unit.Cores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MilliCores")) return Unit.MilliCores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "NanoCores")) return Unit.NanoCores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BitsPerSecond")) return Unit.BitsPerSecond;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown Unit value.");
        }
    }
}
