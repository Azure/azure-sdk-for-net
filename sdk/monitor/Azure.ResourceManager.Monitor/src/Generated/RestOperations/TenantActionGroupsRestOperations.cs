// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Monitor.Models;

namespace Azure.ResourceManager.Monitor
{
    internal partial class TenantActionGroupsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of TenantActionGroupsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public TenantActionGroupsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2023-03-01-preview";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Management/managementGroups/", false);
            uri.AppendPath(managementGroupId, true);
            uri.AppendPath("/providers/Microsoft.Insights/tenantActionGroups/", false);
            uri.AppendPath(tenantActionGroupName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("x-ms-client-tenant-id", xMsClientTenantId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create a new tenant action group or update an existing one. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="data"> The tenant action group to create or use for the update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/>, <paramref name="xMsClientTenantId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TenantActionGroupResourceData>> CreateOrUpdateAsync(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        TenantActionGroupResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create a new tenant action group or update an existing one. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="data"> The tenant action group to create or use for the update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/>, <paramref name="xMsClientTenantId"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TenantActionGroupResourceData> CreateOrUpdate(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        TenantActionGroupResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Management/managementGroups/", false);
            uri.AppendPath(managementGroupId, true);
            uri.AppendPath("/providers/Microsoft.Insights/tenantActionGroups/", false);
            uri.AppendPath(tenantActionGroupName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("x-ms-client-tenant-id", xMsClientTenantId);
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a tenant action group. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TenantActionGroupResourceData>> GetAsync(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var message = CreateGetRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantActionGroupResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((TenantActionGroupResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a tenant action group. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TenantActionGroupResourceData> Get(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var message = CreateGetRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantActionGroupResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((TenantActionGroupResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Management/managementGroups/", false);
            uri.AppendPath(managementGroupId, true);
            uri.AppendPath("/providers/Microsoft.Insights/tenantActionGroups/", false);
            uri.AppendPath(tenantActionGroupName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("x-ms-client-tenant-id", xMsClientTenantId);
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Delete a tenant action group. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var message = CreateDeleteRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a tenant action group. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var message = CreateDeleteRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourcePatch patch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Management/managementGroups/", false);
            uri.AppendPath(managementGroupId, true);
            uri.AppendPath("/providers/Microsoft.Insights/tenantActionGroups/", false);
            uri.AppendPath(tenantActionGroupName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("x-ms-client-tenant-id", xMsClientTenantId);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(patch);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Updates an existing tenant action group&apos;s tags. To update other fields use the CreateOrUpdate method. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="patch"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/>, <paramref name="xMsClientTenantId"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TenantActionGroupResourceData>> UpdateAsync(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId, patch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantActionGroupResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates an existing tenant action group&apos;s tags. To update other fields use the CreateOrUpdate method. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="patch"> Parameters supplied to the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="tenantActionGroupName"/>, <paramref name="xMsClientTenantId"/> or <paramref name="patch"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> or <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TenantActionGroupResourceData> Update(string managementGroupId, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(managementGroupId, tenantActionGroupName, xMsClientTenantId, patch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantActionGroupResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByManagementGroupIdRequest(string managementGroupId, string xMsClientTenantId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/providers/Microsoft.Management/managementGroups/", false);
            uri.AppendPath(managementGroupId, true);
            uri.AppendPath("/providers/Microsoft.Insights/tenantActionGroups", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("x-ms-client-tenant-id", xMsClientTenantId);
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get a list of all tenant action groups in a management group. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<TenantActionGroupList>> ListByManagementGroupIdAsync(string managementGroupId, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var message = CreateListByManagementGroupIdRequest(managementGroupId, xMsClientTenantId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantActionGroupList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantActionGroupList.DeserializeTenantActionGroupList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get a list of all tenant action groups in a management group. </summary>
        /// <param name="managementGroupId"> The management group id. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<TenantActionGroupList> ListByManagementGroupId(string managementGroupId, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var message = CreateListByManagementGroupIdRequest(managementGroupId, xMsClientTenantId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantActionGroupList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantActionGroupList.DeserializeTenantActionGroupList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
