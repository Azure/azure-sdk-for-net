// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ManagementGroups;

namespace Azure.ResourceManager.Monitor
{
    /// <summary>
    /// A class representing a collection of <see cref="TenantActionGroupResource" /> and their operations.
    /// Each <see cref="TenantActionGroupResource" /> in the collection will belong to the same instance of <see cref="ManagementGroupResource" />.
    /// To get a <see cref="TenantActionGroupResourceCollection" /> instance call the GetTenantActionGroupResources method from an instance of <see cref="ManagementGroupResource" />.
    /// </summary>
    public partial class TenantActionGroupResourceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _tenantActionGroupResourceTenantActionGroupsClientDiagnostics;
        private readonly TenantActionGroupsRestOperations _tenantActionGroupResourceTenantActionGroupsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantActionGroupResourceCollection"/> class for mocking. </summary>
        protected TenantActionGroupResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantActionGroupResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal TenantActionGroupResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _tenantActionGroupResourceTenantActionGroupsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Monitor", TenantActionGroupResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(TenantActionGroupResource.ResourceType, out string tenantActionGroupResourceTenantActionGroupsApiVersion);
            _tenantActionGroupResourceTenantActionGroupsRestClient = new TenantActionGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, tenantActionGroupResourceTenantActionGroupsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ManagementGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ManagementGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a new tenant action group or update an existing one.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="data"> The tenant action group to create or use for the update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantActionGroupName"/>, <paramref name="xMsClientTenantId"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<TenantActionGroupResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _tenantActionGroupResourceTenantActionGroupsClientDiagnostics.CreateScope("TenantActionGroupResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _tenantActionGroupResourceTenantActionGroupsRestClient.CreateOrUpdateAsync(Id.Name, tenantActionGroupName, xMsClientTenantId, data, cancellationToken).ConfigureAwait(false);
                var operation = new MonitorArmOperation<TenantActionGroupResource>(Response.FromValue(new TenantActionGroupResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a new tenant action group or update an existing one.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_CreateOrUpdate</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="data"> The tenant action group to create or use for the update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantActionGroupName"/>, <paramref name="xMsClientTenantId"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<TenantActionGroupResource> CreateOrUpdate(WaitUntil waitUntil, string tenantActionGroupName, string xMsClientTenantId, TenantActionGroupResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _tenantActionGroupResourceTenantActionGroupsClientDiagnostics.CreateScope("TenantActionGroupResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _tenantActionGroupResourceTenantActionGroupsRestClient.CreateOrUpdate(Id.Name, tenantActionGroupName, xMsClientTenantId, data, cancellationToken);
                var operation = new MonitorArmOperation<TenantActionGroupResource>(Response.FromValue(new TenantActionGroupResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a tenant action group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        public virtual async Task<Response<TenantActionGroupResource>> GetAsync(string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var scope = _tenantActionGroupResourceTenantActionGroupsClientDiagnostics.CreateScope("TenantActionGroupResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _tenantActionGroupResourceTenantActionGroupsRestClient.GetAsync(Id.Name, tenantActionGroupName, xMsClientTenantId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TenantActionGroupResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a tenant action group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        public virtual Response<TenantActionGroupResource> Get(string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var scope = _tenantActionGroupResourceTenantActionGroupsClientDiagnostics.CreateScope("TenantActionGroupResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _tenantActionGroupResourceTenantActionGroupsRestClient.Get(Id.Name, tenantActionGroupName, xMsClientTenantId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TenantActionGroupResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a list of all tenant action groups in a management group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_ListByManagementGroupId</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <returns> An async collection of <see cref="TenantActionGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TenantActionGroupResource> GetAllAsync(string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _tenantActionGroupResourceTenantActionGroupsRestClient.CreateListByManagementGroupIdRequest(Id.Name, xMsClientTenantId);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => new TenantActionGroupResource(Client, TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(e)), _tenantActionGroupResourceTenantActionGroupsClientDiagnostics, Pipeline, "TenantActionGroupResourceCollection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Get a list of all tenant action groups in a management group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_ListByManagementGroupId</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="xMsClientTenantId"/> is null. </exception>
        /// <returns> A collection of <see cref="TenantActionGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TenantActionGroupResource> GetAll(string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _tenantActionGroupResourceTenantActionGroupsRestClient.CreateListByManagementGroupIdRequest(Id.Name, xMsClientTenantId);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, e => new TenantActionGroupResource(Client, TenantActionGroupResourceData.DeserializeTenantActionGroupResourceData(e)), _tenantActionGroupResourceTenantActionGroupsClientDiagnostics, Pipeline, "TenantActionGroupResourceCollection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var scope = _tenantActionGroupResourceTenantActionGroupsClientDiagnostics.CreateScope("TenantActionGroupResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _tenantActionGroupResourceTenantActionGroupsRestClient.GetAsync(Id.Name, tenantActionGroupName, xMsClientTenantId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Insights/tenantActionGroups/{tenantActionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TenantActionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantActionGroupName"> The name of the action group. </param>
        /// <param name="xMsClientTenantId"> The tenant ID of the client making the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tenantActionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantActionGroupName"/> or <paramref name="xMsClientTenantId"/> is null. </exception>
        public virtual Response<bool> Exists(string tenantActionGroupName, string xMsClientTenantId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(tenantActionGroupName, nameof(tenantActionGroupName));
            Argument.AssertNotNull(xMsClientTenantId, nameof(xMsClientTenantId));

            using var scope = _tenantActionGroupResourceTenantActionGroupsClientDiagnostics.CreateScope("TenantActionGroupResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _tenantActionGroupResourceTenantActionGroupsRestClient.Get(Id.Name, tenantActionGroupName, xMsClientTenantId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
