// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Monitor.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmMonitorModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Monitor.ActionGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="groupShortName"> The short name of the action group. This will be used in SMS messages. </param>
        /// <param name="isEnabled"> Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications. </param>
        /// <param name="emailReceivers"> The list of email receivers that are part of this action group. </param>
        /// <param name="smsReceivers"> The list of SMS receivers that are part of this action group. </param>
        /// <param name="webhookReceivers"> The list of webhook receivers that are part of this action group. </param>
        /// <param name="itsmReceivers"> The list of ITSM receivers that are part of this action group. </param>
        /// <param name="azureAppPushReceivers"> The list of AzureAppPush receivers that are part of this action group. </param>
        /// <param name="automationRunbookReceivers"> The list of AutomationRunbook receivers that are part of this action group. </param>
        /// <param name="voiceReceivers"> The list of voice receivers that are part of this action group. </param>
        /// <param name="logicAppReceivers"> The list of logic app receivers that are part of this action group. </param>
        /// <param name="azureFunctionReceivers"> The list of azure function receivers that are part of this action group. </param>
        /// <param name="armRoleReceivers"> The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported. </param>
        /// <param name="eventHubReceivers"> The list of event hub receivers that are part of this action group. </param>
        /// <param name="incidentReceivers"> The list of incident receivers that are part of this action group. </param>
        /// <param name="identity"> Managed service identity (system assigned and/or user assigned identities). </param>
        /// <returns> A new <see cref="Monitor.ActionGroupData"/> instance for mocking. </returns>
        public static ActionGroupData ActionGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string groupShortName = null, bool? isEnabled = null, IEnumerable<MonitorEmailReceiver> emailReceivers = null, IEnumerable<MonitorSmsReceiver> smsReceivers = null, IEnumerable<MonitorWebhookReceiver> webhookReceivers = null, IEnumerable<MonitorItsmReceiver> itsmReceivers = null, IEnumerable<MonitorAzureAppPushReceiver> azureAppPushReceivers = null, IEnumerable<MonitorAutomationRunbookReceiver> automationRunbookReceivers = null, IEnumerable<MonitorVoiceReceiver> voiceReceivers = null, IEnumerable<MonitorLogicAppReceiver> logicAppReceivers = null, IEnumerable<MonitorAzureFunctionReceiver> azureFunctionReceivers = null, IEnumerable<MonitorArmRoleReceiver> armRoleReceivers = null, IEnumerable<MonitorEventHubReceiver> eventHubReceivers = null, IEnumerable<IncidentReceiver> incidentReceivers = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();
            emailReceivers ??= new List<MonitorEmailReceiver>();
            smsReceivers ??= new List<MonitorSmsReceiver>();
            webhookReceivers ??= new List<MonitorWebhookReceiver>();
            itsmReceivers ??= new List<MonitorItsmReceiver>();
            azureAppPushReceivers ??= new List<MonitorAzureAppPushReceiver>();
            automationRunbookReceivers ??= new List<MonitorAutomationRunbookReceiver>();
            voiceReceivers ??= new List<MonitorVoiceReceiver>();
            logicAppReceivers ??= new List<MonitorLogicAppReceiver>();
            azureFunctionReceivers ??= new List<MonitorAzureFunctionReceiver>();
            armRoleReceivers ??= new List<MonitorArmRoleReceiver>();
            eventHubReceivers ??= new List<MonitorEventHubReceiver>();
            incidentReceivers ??= new List<IncidentReceiver>();

            return new ActionGroupData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                groupShortName,
                isEnabled,
                emailReceivers?.ToList(),
                smsReceivers?.ToList(),
                webhookReceivers?.ToList(),
                itsmReceivers?.ToList(),
                azureAppPushReceivers?.ToList(),
                automationRunbookReceivers?.ToList(),
                voiceReceivers?.ToList(),
                logicAppReceivers?.ToList(),
                azureFunctionReceivers?.ToList(),
                armRoleReceivers?.ToList(),
                eventHubReceivers?.ToList(),
                incidentReceivers?.ToList(),
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitorEmailReceiver"/>. </summary>
        /// <param name="name"> The name of the email receiver. Names must be unique across all receivers within an action group. </param>
        /// <param name="emailAddress"> The email address of this receiver. </param>
        /// <param name="useCommonAlertSchema"> Indicates whether to use common alert schema. </param>
        /// <param name="status"> The receiver status of the e-mail. </param>
        /// <returns> A new <see cref="Models.MonitorEmailReceiver"/> instance for mocking. </returns>
        public static MonitorEmailReceiver MonitorEmailReceiver(string name = null, string emailAddress = null, bool? useCommonAlertSchema = null, MonitorReceiverStatus? status = null)
        {
            return new MonitorEmailReceiver(name, emailAddress, useCommonAlertSchema, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitorSmsReceiver"/>. </summary>
        /// <param name="name"> The name of the SMS receiver. Names must be unique across all receivers within an action group. </param>
        /// <param name="countryCode"> The country code of the SMS receiver. </param>
        /// <param name="phoneNumber"> The phone number of the SMS receiver. </param>
        /// <param name="status"> The status of the receiver. </param>
        /// <returns> A new <see cref="Models.MonitorSmsReceiver"/> instance for mocking. </returns>
        public static MonitorSmsReceiver MonitorSmsReceiver(string name = null, string countryCode = null, string phoneNumber = null, MonitorReceiverStatus? status = null)
        {
            return new MonitorSmsReceiver(name, countryCode, phoneNumber, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NotificationContent"/>. </summary>
        /// <param name="alertType"> The value of the supported alert type. Supported alert type values are: servicehealth, metricstaticthreshold, metricsdynamicthreshold, logalertv2, smartalert, webtestalert, logalertv1numresult, logalertv1metricmeasurement, resourcehealth, activitylog, actualcostbudget, forecastedbudget. </param>
        /// <param name="emailReceivers"> The list of email receivers that are part of this action group. </param>
        /// <param name="smsReceivers"> The list of SMS receivers that are part of this action group. </param>
        /// <param name="webhookReceivers"> The list of webhook receivers that are part of this action group. </param>
        /// <param name="itsmReceivers"> The list of ITSM receivers that are part of this action group. </param>
        /// <param name="azureAppPushReceivers"> The list of AzureAppPush receivers that are part of this action group. </param>
        /// <param name="automationRunbookReceivers"> The list of AutomationRunbook receivers that are part of this action group. </param>
        /// <param name="voiceReceivers"> The list of voice receivers that are part of this action group. </param>
        /// <param name="logicAppReceivers"> The list of logic app receivers that are part of this action group. </param>
        /// <param name="azureFunctionReceivers"> The list of azure function receivers that are part of this action group. </param>
        /// <param name="armRoleReceivers"> The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported. </param>
        /// <param name="eventHubReceivers"> The list of event hub receivers that are part of this action group. </param>
        /// <param name="incidentReceivers"> The list of incident receivers that are part of this action group. </param>
        /// <returns> A new <see cref="Models.NotificationContent"/> instance for mocking. </returns>
        public static NotificationContent NotificationContent(string alertType = null, IEnumerable<MonitorEmailReceiver> emailReceivers = null, IEnumerable<MonitorSmsReceiver> smsReceivers = null, IEnumerable<MonitorWebhookReceiver> webhookReceivers = null, IEnumerable<MonitorItsmReceiver> itsmReceivers = null, IEnumerable<MonitorAzureAppPushReceiver> azureAppPushReceivers = null, IEnumerable<MonitorAutomationRunbookReceiver> automationRunbookReceivers = null, IEnumerable<MonitorVoiceReceiver> voiceReceivers = null, IEnumerable<MonitorLogicAppReceiver> logicAppReceivers = null, IEnumerable<MonitorAzureFunctionReceiver> azureFunctionReceivers = null, IEnumerable<MonitorArmRoleReceiver> armRoleReceivers = null, IEnumerable<MonitorEventHubReceiver> eventHubReceivers = null, IEnumerable<IncidentReceiver> incidentReceivers = null)
        {
            emailReceivers ??= new List<MonitorEmailReceiver>();
            smsReceivers ??= new List<MonitorSmsReceiver>();
            webhookReceivers ??= new List<MonitorWebhookReceiver>();
            itsmReceivers ??= new List<MonitorItsmReceiver>();
            azureAppPushReceivers ??= new List<MonitorAzureAppPushReceiver>();
            automationRunbookReceivers ??= new List<MonitorAutomationRunbookReceiver>();
            voiceReceivers ??= new List<MonitorVoiceReceiver>();
            logicAppReceivers ??= new List<MonitorLogicAppReceiver>();
            azureFunctionReceivers ??= new List<MonitorAzureFunctionReceiver>();
            armRoleReceivers ??= new List<MonitorArmRoleReceiver>();
            eventHubReceivers ??= new List<MonitorEventHubReceiver>();
            incidentReceivers ??= new List<IncidentReceiver>();

            return new NotificationContent(
                alertType,
                emailReceivers?.ToList(),
                smsReceivers?.ToList(),
                webhookReceivers?.ToList(),
                itsmReceivers?.ToList(),
                azureAppPushReceivers?.ToList(),
                automationRunbookReceivers?.ToList(),
                voiceReceivers?.ToList(),
                logicAppReceivers?.ToList(),
                azureFunctionReceivers?.ToList(),
                armRoleReceivers?.ToList(),
                eventHubReceivers?.ToList(),
                incidentReceivers?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NotificationStatus"/>. </summary>
        /// <param name="context"> The context info. </param>
        /// <param name="state"> The overall state. </param>
        /// <param name="completedOn"> The completed time. </param>
        /// <param name="createdOn"> The created time. </param>
        /// <param name="actionDetails"> The list of action detail. </param>
        /// <returns> A new <see cref="Models.NotificationStatus"/> instance for mocking. </returns>
        public static NotificationStatus NotificationStatus(NotificationContext context = null, string state = null, DateTimeOffset? completedOn = null, DateTimeOffset? createdOn = null, IEnumerable<NotificationActionDetail> actionDetails = null)
        {
            actionDetails ??= new List<NotificationActionDetail>();

            return new NotificationStatus(
                context,
                state,
                completedOn,
                createdOn,
                actionDetails?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NotificationContext"/>. </summary>
        /// <param name="notificationSource"> The source of the notification request. </param>
        /// <param name="contextType"> The context id type. </param>
        /// <returns> A new <see cref="Models.NotificationContext"/> instance for mocking. </returns>
        public static NotificationContext NotificationContext(string notificationSource = null, string contextType = null)
        {
            return new NotificationContext(notificationSource, contextType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NotificationActionDetail"/>. </summary>
        /// <param name="mechanismType"> The mechanism type. </param>
        /// <param name="name"> The name of the action. </param>
        /// <param name="status"> The status of the action. </param>
        /// <param name="subState"> The substatus of the action. </param>
        /// <param name="sendOn"> The send time. </param>
        /// <param name="detail"> The detail of the friendly error message. </param>
        /// <returns> A new <see cref="Models.NotificationActionDetail"/> instance for mocking. </returns>
        public static NotificationActionDetail NotificationActionDetail(string mechanismType = null, string name = null, string status = null, string subState = null, DateTimeOffset? sendOn = null, string detail = null)
        {
            return new NotificationActionDetail(
                mechanismType,
                name,
                status,
                subState,
                sendOn,
                detail,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Monitor.ScheduledQueryRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the resource. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="kind"> Indicates the type of scheduled query rule. The default is LogAlert. </param>
        /// <param name="etag"> The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="createdWithApiVersion"> The api-version used when creating this alert rule. </param>
        /// <param name="isLegacyLogAnalyticsRule"> True if alert rule is legacy Log Analytic rule. </param>
        /// <param name="description"> The description of the scheduled query rule. </param>
        /// <param name="displayName"> The display name of the alert rule. </param>
        /// <param name="severity"> Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="isEnabled"> The flag which indicates whether this scheduled query rule is enabled. Value should be true or false. </param>
        /// <param name="scopes"> The list of resource id's that this scheduled query rule is scoped to. </param>
        /// <param name="evaluationFrequency"> How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="windowSize"> The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="overrideQueryTimeRange"> If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. </param>
        /// <param name="targetResourceTypes"> List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="criteriaAllOf"> The rule criteria that defines the conditions of the scheduled query rule. </param>
        /// <param name="muteActionsDuration"> Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="actions"> Actions to invoke when the alert fires. </param>
        /// <param name="isWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false. </param>
        /// <param name="checkWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="skipQueryValidation"> The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="autoMitigate"> The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="resolveConfiguration"> Defines the configuration for resolving fired alerts. Relevant only for rules of the kind LogAlert. </param>
        /// <returns> A new <see cref="Monitor.ScheduledQueryRuleData"/> instance for mocking. </returns>
        public static ScheduledQueryRuleData ScheduledQueryRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ScheduledQueryRuleKind? kind = null, ETag? etag = null, string createdWithApiVersion = null, bool? isLegacyLogAnalyticsRule = null, string description = null, string displayName = null, AlertSeverity? severity = null, bool? isEnabled = null, IEnumerable<string> scopes = null, TimeSpan? evaluationFrequency = null, TimeSpan? windowSize = null, TimeSpan? overrideQueryTimeRange = null, IEnumerable<string> targetResourceTypes = null, IEnumerable<ScheduledQueryRuleCondition> criteriaAllOf = null, TimeSpan? muteActionsDuration = null, ScheduledQueryRuleActions actions = null, bool? isWorkspaceAlertsStorageConfigured = null, bool? checkWorkspaceAlertsStorageConfigured = null, bool? skipQueryValidation = null, bool? autoMitigate = null, ScheduledQueryRuleResolveConfiguration resolveConfiguration = null)
        {
            tags ??= new Dictionary<string, string>();
            scopes ??= new List<string>();
            targetResourceTypes ??= new List<string>();
            criteriaAllOf ??= new List<ScheduledQueryRuleCondition>();

            return new ScheduledQueryRuleData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                kind,
                etag,
                createdWithApiVersion,
                isLegacyLogAnalyticsRule,
                description,
                displayName,
                severity,
                isEnabled,
                scopes?.ToList(),
                evaluationFrequency,
                windowSize,
                overrideQueryTimeRange,
                targetResourceTypes?.ToList(),
                criteriaAllOf != null ? new ScheduledQueryRuleCriteria(criteriaAllOf?.ToList(), serializedAdditionalRawData: null) : null,
                muteActionsDuration,
                actions,
                isWorkspaceAlertsStorageConfigured,
                checkWorkspaceAlertsStorageConfigured,
                skipQueryValidation,
                autoMitigate,
                resolveConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ScheduledQueryRulePatch"/>. </summary>
        /// <param name="identity"> The identity of the resource. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="createdWithApiVersion"> The api-version used when creating this alert rule. </param>
        /// <param name="isLegacyLogAnalyticsRule"> True if alert rule is legacy Log Analytic rule. </param>
        /// <param name="description"> The description of the scheduled query rule. </param>
        /// <param name="displayName"> The display name of the alert rule. </param>
        /// <param name="severity"> Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="isEnabled"> The flag which indicates whether this scheduled query rule is enabled. Value should be true or false. </param>
        /// <param name="scopes"> The list of resource id's that this scheduled query rule is scoped to. </param>
        /// <param name="evaluationFrequency"> How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="windowSize"> The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="overrideQueryTimeRange"> If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. </param>
        /// <param name="targetResourceTypes"> List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="criteriaAllOf"> The rule criteria that defines the conditions of the scheduled query rule. </param>
        /// <param name="muteActionsDuration"> Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="actions"> Actions to invoke when the alert fires. </param>
        /// <param name="isWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false. </param>
        /// <param name="checkWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="skipQueryValidation"> The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="autoMitigate"> The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="resolveConfiguration"> Defines the configuration for resolving fired alerts. Relevant only for rules of the kind LogAlert. </param>
        /// <returns> A new <see cref="Models.ScheduledQueryRulePatch"/> instance for mocking. </returns>
        public static ScheduledQueryRulePatch ScheduledQueryRulePatch(ManagedServiceIdentity identity = null, IDictionary<string, string> tags = null, string createdWithApiVersion = null, bool? isLegacyLogAnalyticsRule = null, string description = null, string displayName = null, AlertSeverity? severity = null, bool? isEnabled = null, IEnumerable<string> scopes = null, TimeSpan? evaluationFrequency = null, TimeSpan? windowSize = null, TimeSpan? overrideQueryTimeRange = null, IEnumerable<string> targetResourceTypes = null, IEnumerable<ScheduledQueryRuleCondition> criteriaAllOf = null, TimeSpan? muteActionsDuration = null, ScheduledQueryRuleActions actions = null, bool? isWorkspaceAlertsStorageConfigured = null, bool? checkWorkspaceAlertsStorageConfigured = null, bool? skipQueryValidation = null, bool? autoMitigate = null, ScheduledQueryRuleResolveConfiguration resolveConfiguration = null)
        {
            tags ??= new Dictionary<string, string>();
            scopes ??= new List<string>();
            targetResourceTypes ??= new List<string>();
            criteriaAllOf ??= new List<ScheduledQueryRuleCondition>();

            return new ScheduledQueryRulePatch(
                identity,
                tags,
                createdWithApiVersion,
                isLegacyLogAnalyticsRule,
                description,
                displayName,
                severity,
                isEnabled,
                scopes?.ToList(),
                evaluationFrequency,
                windowSize,
                overrideQueryTimeRange,
                targetResourceTypes?.ToList(),
                criteriaAllOf != null ? new ScheduledQueryRuleCriteria(criteriaAllOf?.ToList(), serializedAdditionalRawData: null) : null,
                muteActionsDuration,
                actions,
                isWorkspaceAlertsStorageConfigured,
                checkWorkspaceAlertsStorageConfigured,
                skipQueryValidation,
                autoMitigate,
                resolveConfiguration,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Monitor.ActionGroupData" />. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="groupShortName"> The short name of the action group. This will be used in SMS messages. </param>
        /// <param name="isEnabled"> Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications. </param>
        /// <param name="emailReceivers"> The list of email receivers that are part of this action group. </param>
        /// <param name="smsReceivers"> The list of SMS receivers that are part of this action group. </param>
        /// <param name="webhookReceivers"> The list of webhook receivers that are part of this action group. </param>
        /// <param name="itsmReceivers"> The list of ITSM receivers that are part of this action group. </param>
        /// <param name="azureAppPushReceivers"> The list of AzureAppPush receivers that are part of this action group. </param>
        /// <param name="automationRunbookReceivers"> The list of AutomationRunbook receivers that are part of this action group. </param>
        /// <param name="voiceReceivers"> The list of voice receivers that are part of this action group. </param>
        /// <param name="logicAppReceivers"> The list of logic app receivers that are part of this action group. </param>
        /// <param name="azureFunctionReceivers"> The list of azure function receivers that are part of this action group. </param>
        /// <param name="armRoleReceivers"> The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported. </param>
        /// <param name="eventHubReceivers"> The list of event hub receivers that are part of this action group. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Monitor.ActionGroupData" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ActionGroupData ActionGroupData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, string groupShortName, bool? isEnabled, IEnumerable<MonitorEmailReceiver> emailReceivers, IEnumerable<MonitorSmsReceiver> smsReceivers, IEnumerable<MonitorWebhookReceiver> webhookReceivers, IEnumerable<MonitorItsmReceiver> itsmReceivers, IEnumerable<MonitorAzureAppPushReceiver> azureAppPushReceivers, IEnumerable<MonitorAutomationRunbookReceiver> automationRunbookReceivers, IEnumerable<MonitorVoiceReceiver> voiceReceivers, IEnumerable<MonitorLogicAppReceiver> logicAppReceivers, IEnumerable<MonitorAzureFunctionReceiver> azureFunctionReceivers, IEnumerable<MonitorArmRoleReceiver> armRoleReceivers, IEnumerable<MonitorEventHubReceiver> eventHubReceivers)
        {
            return ActionGroupData(id: id, name: name, resourceType: resourceType, systemData: systemData, tags: tags, location: location, groupShortName: groupShortName, isEnabled: isEnabled, emailReceivers: emailReceivers, smsReceivers: smsReceivers, webhookReceivers: webhookReceivers, itsmReceivers: itsmReceivers, azureAppPushReceivers: azureAppPushReceivers, automationRunbookReceivers: automationRunbookReceivers, voiceReceivers: voiceReceivers, logicAppReceivers: logicAppReceivers, azureFunctionReceivers: azureFunctionReceivers, armRoleReceivers: armRoleReceivers, eventHubReceivers: eventHubReceivers, incidentReceivers: default, identity: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Monitor.Models.NotificationContent" />. </summary>
        /// <param name="alertType"> The value of the supported alert type. Supported alert type values are: servicehealth, metricstaticthreshold, metricsdynamicthreshold, logalertv2, smartalert, webtestalert, logalertv1numresult, logalertv1metricmeasurement, resourcehealth, activitylog, actualcostbudget, forecastedbudget. </param>
        /// <param name="emailReceivers"> The list of email receivers that are part of this action group. </param>
        /// <param name="smsReceivers"> The list of SMS receivers that are part of this action group. </param>
        /// <param name="webhookReceivers"> The list of webhook receivers that are part of this action group. </param>
        /// <param name="itsmReceivers"> The list of ITSM receivers that are part of this action group. </param>
        /// <param name="azureAppPushReceivers"> The list of AzureAppPush receivers that are part of this action group. </param>
        /// <param name="automationRunbookReceivers"> The list of AutomationRunbook receivers that are part of this action group. </param>
        /// <param name="voiceReceivers"> The list of voice receivers that are part of this action group. </param>
        /// <param name="logicAppReceivers"> The list of logic app receivers that are part of this action group. </param>
        /// <param name="azureFunctionReceivers"> The list of azure function receivers that are part of this action group. </param>
        /// <param name="armRoleReceivers"> The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported. </param>
        /// <param name="eventHubReceivers"> The list of event hub receivers that are part of this action group. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Monitor.Models.NotificationContent" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static NotificationContent NotificationContent(string alertType, IEnumerable<MonitorEmailReceiver> emailReceivers, IEnumerable<MonitorSmsReceiver> smsReceivers, IEnumerable<MonitorWebhookReceiver> webhookReceivers, IEnumerable<MonitorItsmReceiver> itsmReceivers, IEnumerable<MonitorAzureAppPushReceiver> azureAppPushReceivers, IEnumerable<MonitorAutomationRunbookReceiver> automationRunbookReceivers, IEnumerable<MonitorVoiceReceiver> voiceReceivers, IEnumerable<MonitorLogicAppReceiver> logicAppReceivers, IEnumerable<MonitorAzureFunctionReceiver> azureFunctionReceivers, IEnumerable<MonitorArmRoleReceiver> armRoleReceivers, IEnumerable<MonitorEventHubReceiver> eventHubReceivers)
        {
            return NotificationContent(alertType: alertType, emailReceivers: emailReceivers, smsReceivers: smsReceivers, webhookReceivers: webhookReceivers, itsmReceivers: itsmReceivers, azureAppPushReceivers: azureAppPushReceivers, automationRunbookReceivers: automationRunbookReceivers, voiceReceivers: voiceReceivers, logicAppReceivers: logicAppReceivers, azureFunctionReceivers: azureFunctionReceivers, armRoleReceivers: armRoleReceivers, eventHubReceivers: eventHubReceivers, incidentReceivers: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Monitor.ScheduledQueryRuleData" />. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Indicates the type of scheduled query rule. The default is LogAlert. </param>
        /// <param name="etag"> The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <param name="createdWithApiVersion"> The api-version used when creating this alert rule. </param>
        /// <param name="isLegacyLogAnalyticsRule"> True if alert rule is legacy Log Analytic rule. </param>
        /// <param name="description"> The description of the scheduled query rule. </param>
        /// <param name="displayName"> The display name of the alert rule. </param>
        /// <param name="severity"> Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="isEnabled"> The flag which indicates whether this scheduled query rule is enabled. Value should be true or false. </param>
        /// <param name="scopes"> The list of resource id's that this scheduled query rule is scoped to. </param>
        /// <param name="evaluationFrequency"> How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="windowSize"> The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="overrideQueryTimeRange"> If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. </param>
        /// <param name="targetResourceTypes"> List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="criteriaAllOf"> The rule criteria that defines the conditions of the scheduled query rule. </param>
        /// <param name="muteActionsDuration"> Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="actions"> Actions to invoke when the alert fires. </param>
        /// <param name="isWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false. </param>
        /// <param name="checkWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="skipQueryValidation"> The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="autoMitigate"> The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Monitor.ScheduledQueryRuleData" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ScheduledQueryRuleData ScheduledQueryRuleData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ScheduledQueryRuleKind? kind, ETag? etag, string createdWithApiVersion, bool? isLegacyLogAnalyticsRule, string description, string displayName, AlertSeverity? severity, bool? isEnabled, IEnumerable<string> scopes, TimeSpan? evaluationFrequency, TimeSpan? windowSize, TimeSpan? overrideQueryTimeRange, IEnumerable<string> targetResourceTypes, IEnumerable<ScheduledQueryRuleCondition> criteriaAllOf, TimeSpan? muteActionsDuration, ScheduledQueryRuleActions actions, bool? isWorkspaceAlertsStorageConfigured, bool? checkWorkspaceAlertsStorageConfigured, bool? skipQueryValidation, bool? autoMitigate)
        {
            return ScheduledQueryRuleData(id: id, name: name, resourceType: resourceType, systemData: systemData, tags: tags, location: location, identity: default, kind: kind, etag: etag, createdWithApiVersion: createdWithApiVersion, isLegacyLogAnalyticsRule: isLegacyLogAnalyticsRule, description: description, displayName: displayName, severity: severity, isEnabled: isEnabled, scopes: scopes, evaluationFrequency: evaluationFrequency, windowSize: windowSize, overrideQueryTimeRange: overrideQueryTimeRange, targetResourceTypes: targetResourceTypes, criteriaAllOf: criteriaAllOf, muteActionsDuration: muteActionsDuration, actions: actions, isWorkspaceAlertsStorageConfigured: isWorkspaceAlertsStorageConfigured, checkWorkspaceAlertsStorageConfigured: checkWorkspaceAlertsStorageConfigured, skipQueryValidation: skipQueryValidation, autoMitigate: autoMitigate, resolveConfiguration: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.Monitor.Models.ScheduledQueryRulePatch" />. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="createdWithApiVersion"> The api-version used when creating this alert rule. </param>
        /// <param name="isLegacyLogAnalyticsRule"> True if alert rule is legacy Log Analytic rule. </param>
        /// <param name="description"> The description of the scheduled query rule. </param>
        /// <param name="displayName"> The display name of the alert rule. </param>
        /// <param name="severity"> Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="isEnabled"> The flag which indicates whether this scheduled query rule is enabled. Value should be true or false. </param>
        /// <param name="scopes"> The list of resource id's that this scheduled query rule is scoped to. </param>
        /// <param name="evaluationFrequency"> How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="windowSize"> The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert. </param>
        /// <param name="overrideQueryTimeRange"> If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert. </param>
        /// <param name="targetResourceTypes"> List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="criteriaAllOf"> The rule criteria that defines the conditions of the scheduled query rule. </param>
        /// <param name="muteActionsDuration"> Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="actions"> Actions to invoke when the alert fires. </param>
        /// <param name="isWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false. </param>
        /// <param name="checkWorkspaceAlertsStorageConfigured"> The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="skipQueryValidation"> The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert. </param>
        /// <param name="autoMitigate"> The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.Monitor.Models.ScheduledQueryRulePatch" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ScheduledQueryRulePatch ScheduledQueryRulePatch(IDictionary<string, string> tags, string createdWithApiVersion, bool? isLegacyLogAnalyticsRule, string description, string displayName, AlertSeverity? severity, bool? isEnabled, IEnumerable<string> scopes, TimeSpan? evaluationFrequency, TimeSpan? windowSize, TimeSpan? overrideQueryTimeRange, IEnumerable<string> targetResourceTypes, IEnumerable<ScheduledQueryRuleCondition> criteriaAllOf, TimeSpan? muteActionsDuration, ScheduledQueryRuleActions actions, bool? isWorkspaceAlertsStorageConfigured, bool? checkWorkspaceAlertsStorageConfigured, bool? skipQueryValidation, bool? autoMitigate)
        {
            return ScheduledQueryRulePatch(identity: default, tags: tags, createdWithApiVersion: createdWithApiVersion, isLegacyLogAnalyticsRule: isLegacyLogAnalyticsRule, description: description, displayName: displayName, severity: severity, isEnabled: isEnabled, scopes: scopes, evaluationFrequency: evaluationFrequency, windowSize: windowSize, overrideQueryTimeRange: overrideQueryTimeRange, targetResourceTypes: targetResourceTypes, criteriaAllOf: criteriaAllOf, muteActionsDuration: muteActionsDuration, actions: actions, isWorkspaceAlertsStorageConfigured: isWorkspaceAlertsStorageConfigured, checkWorkspaceAlertsStorageConfigured: checkWorkspaceAlertsStorageConfigured, skipQueryValidation: skipQueryValidation, autoMitigate: autoMitigate, resolveConfiguration: default);
        }
    }
}
