// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitory.Query.Models
{
    public partial class LogsQueryResultTable
    {
        internal static LogsQueryResultTable DeserializeLogsQueryResultTable(JsonElement element)
        {
            string name = default;
            IReadOnlyList<LogsQueryResultColumn> columns = default;
            IReadOnlyList<IList<string>> rows = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("columns"))
                {
                    List<LogsQueryResultColumn> array = new List<LogsQueryResultColumn>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LogsQueryResultColumn.DeserializeLogsQueryResultColumn(item));
                    }
                    columns = array;
                    continue;
                }
                if (property.NameEquals("rows"))
                {
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<string> array0 = new List<string>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(item0.GetString());
                        }
                        array.Add(array0);
                    }
                    rows = array;
                    continue;
                }
            }
            return new LogsQueryResultTable(name, columns, rows);
        }
    }
}
