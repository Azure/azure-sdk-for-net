// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitory.Query.Models
{
    public partial class MetadataResults
    {
        internal static MetadataResults DeserializeMetadataResults(JsonElement element)
        {
            Optional<IReadOnlyList<MetadataCategory>> categories = default;
            Optional<IReadOnlyList<MetadataResourceType>> resourceTypes = default;
            Optional<IReadOnlyList<MetadataSolution>> solutions = default;
            Optional<IReadOnlyList<MetadataTable>> tables = default;
            Optional<IReadOnlyList<MetadataFunction>> functions = default;
            Optional<IReadOnlyList<MetadataQuery>> queries = default;
            Optional<IReadOnlyList<MetadataApplication>> applications = default;
            Optional<IReadOnlyList<MetadataWorkspace>> workspaces = default;
            Optional<IReadOnlyList<object>> resources = default;
            Optional<IReadOnlyList<MetadataPermissions>> permissions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("categories"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataCategory> array = new List<MetadataCategory>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataCategory.DeserializeMetadataCategory(item));
                    }
                    categories = array;
                    continue;
                }
                if (property.NameEquals("resourceTypes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataResourceType> array = new List<MetadataResourceType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataResourceType.DeserializeMetadataResourceType(item));
                    }
                    resourceTypes = array;
                    continue;
                }
                if (property.NameEquals("solutions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataSolution> array = new List<MetadataSolution>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataSolution.DeserializeMetadataSolution(item));
                    }
                    solutions = array;
                    continue;
                }
                if (property.NameEquals("tables"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataTable> array = new List<MetadataTable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataTable.DeserializeMetadataTable(item));
                    }
                    tables = array;
                    continue;
                }
                if (property.NameEquals("functions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataFunction> array = new List<MetadataFunction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataFunction.DeserializeMetadataFunction(item));
                    }
                    functions = array;
                    continue;
                }
                if (property.NameEquals("queries"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataQuery> array = new List<MetadataQuery>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataQuery.DeserializeMetadataQuery(item));
                    }
                    queries = array;
                    continue;
                }
                if (property.NameEquals("applications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataApplication> array = new List<MetadataApplication>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataApplication.DeserializeMetadataApplication(item));
                    }
                    applications = array;
                    continue;
                }
                if (property.NameEquals("workspaces"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataWorkspace> array = new List<MetadataWorkspace>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataWorkspace.DeserializeMetadataWorkspace(item));
                    }
                    workspaces = array;
                    continue;
                }
                if (property.NameEquals("resources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    resources = array;
                    continue;
                }
                if (property.NameEquals("permissions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataPermissions> array = new List<MetadataPermissions>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataPermissions.DeserializeMetadataPermissions(item));
                    }
                    permissions = array;
                    continue;
                }
            }
            return new MetadataResults(Optional.ToList(categories), Optional.ToList(resourceTypes), Optional.ToList(solutions), Optional.ToList(tables), Optional.ToList(functions), Optional.ToList(queries), Optional.ToList(applications), Optional.ToList(workspaces), Optional.ToList(resources), Optional.ToList(permissions));
        }
    }
}
