// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitory.Query.Models
{
    public partial class MetadataPermissions
    {
        internal static MetadataPermissions DeserializeMetadataPermissions(JsonElement element)
        {
            IReadOnlyList<MetadataPermissionsWorkspacesItem> workspaces = default;
            Optional<IReadOnlyList<MetadataPermissionsResourcesItem>> resources = default;
            Optional<IReadOnlyList<MetadataPermissionsApplicationsItem>> applications = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("workspaces"))
                {
                    List<MetadataPermissionsWorkspacesItem> array = new List<MetadataPermissionsWorkspacesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataPermissionsWorkspacesItem.DeserializeMetadataPermissionsWorkspacesItem(item));
                    }
                    workspaces = array;
                    continue;
                }
                if (property.NameEquals("resources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataPermissionsResourcesItem> array = new List<MetadataPermissionsResourcesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataPermissionsResourcesItem.DeserializeMetadataPermissionsResourcesItem(item));
                    }
                    resources = array;
                    continue;
                }
                if (property.NameEquals("applications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataPermissionsApplicationsItem> array = new List<MetadataPermissionsApplicationsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataPermissionsApplicationsItem.DeserializeMetadataPermissionsApplicationsItem(item));
                    }
                    applications = array;
                    continue;
                }
            }
            return new MetadataPermissions(workspaces, Optional.ToList(resources), Optional.ToList(applications));
        }
    }
}
