// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Monitor.Query.Logs;

namespace Azure.Monitor.Query.Logs.Models
{
    /// <summary> Contains the tables, columns &amp; rows resulting from a query. </summary>
    public partial class LogsBatchQueryResult : LogsQueryResult, IJsonModel<LogsBatchQueryResult>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<LogsBatchQueryResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<LogsBatchQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsCollectionDefined(Tables))
            {
                writer.WritePropertyName("tables"u8);
                writer.WriteStartArray();
                foreach (LogsTable item in Tables)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Statistics))
            {
                writer.WritePropertyName("statistics"u8);
                writer.WriteStartObject();
                foreach (var item in Statistics)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Render))
            {
                writer.WritePropertyName("render"u8);
                writer.WriteStartObject();
                foreach (var item in Render)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        LogsBatchQueryResult IJsonModel<LogsBatchQueryResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (LogsBatchQueryResult)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override LogsQueryResult JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<LogsBatchQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeLogsBatchQueryResult(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static LogsBatchQueryResult DeserializeLogsBatchQueryResult(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<LogsTable> allTables = default;
            JsonElement error = default;
            JsonElement statistics = default;
            JsonElement visualization = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            IList<LogsTable> tables = default;
            IDictionary<string, BinaryData> statistics0 = default;
            IDictionary<string, BinaryData> render = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("tables"u8))
                {
                    List<LogsTable> array = new List<LogsTable>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(LogsTable.DeserializeLogsTable(item, options));
                    }
                    allTables = array;
                    continue;
                }
                if (prop.NameEquals("error"u8))
                {
                    error = prop.Value.Clone();
                    continue;
                }
                if (prop.NameEquals("statistics"u8))
                {
                    statistics = prop.Value.Clone();
                    continue;
                }
                if (prop.NameEquals("render"u8))
                {
                    visualization = prop.Value.Clone();
                    continue;
                }
                if (prop.NameEquals("tables"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LogsTable> array = new List<LogsTable>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(LogsTable.DeserializeLogsTable(item, options));
                    }
                    tables = array;
                    continue;
                }
                if (prop.NameEquals("statistics"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    statistics0 = dictionary;
                    continue;
                }
                if (prop.NameEquals("render"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var prop0 in prop.Value.EnumerateObject())
                    {
                        if (prop0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(prop0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(prop0.Name, BinaryData.FromString(prop0.Value.GetRawText()));
                        }
                    }
                    render = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new LogsBatchQueryResult(
                allTables,
                error,
                statistics,
                visualization,
                additionalBinaryDataProperties,
                tables ?? new ChangeTrackingList<LogsTable>(),
                statistics0 ?? new ChangeTrackingDictionary<string, BinaryData>(),
                render ?? new ChangeTrackingDictionary<string, BinaryData>());
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<LogsBatchQueryResult>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<LogsBatchQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMonitorQueryLogsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        LogsBatchQueryResult IPersistableModel<LogsBatchQueryResult>.Create(BinaryData data, ModelReaderWriterOptions options) => (LogsBatchQueryResult)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override LogsQueryResult PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<LogsBatchQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeLogsBatchQueryResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(LogsBatchQueryResult)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<LogsBatchQueryResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
