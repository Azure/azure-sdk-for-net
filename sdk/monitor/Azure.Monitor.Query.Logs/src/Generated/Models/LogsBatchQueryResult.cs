// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Monitor.Query.Logs;

namespace Azure.Monitor.Query.Logs.Models
{
    /// <summary> Contains the tables, columns &amp; rows resulting from a query. </summary>
    public partial class LogsBatchQueryResult
    {
        /// <summary> Initializes a new instance of <see cref="LogsBatchQueryResult"/>. </summary>
        /// <param name="allTables"> The results of the query in tabular format. </param>
        internal LogsBatchQueryResult(IEnumerable<LogsTable> allTables) : base(allTables)
        {
            Tables = new ChangeTrackingList<LogsTable>();
            Statistics = new ChangeTrackingDictionary<string, BinaryData>();
            Render = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="LogsBatchQueryResult"/>. </summary>
        /// <param name="allTables"> The results of the query in tabular format. </param>
        /// <param name="error"> The code and message for an error. </param>
        /// <param name="statistics"> Statistics represented in JSON format. </param>
        /// <param name="visualization"> Visualization data in JSON format. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="tables"> The results of the query in tabular format. </param>
        /// <param name="statistics0"> Statistics represented in JSON format. </param>
        /// <param name="render"> Visualization data in JSON format. </param>
        internal LogsBatchQueryResult(IReadOnlyList<LogsTable> allTables, JsonElement error, JsonElement statistics, JsonElement visualization, IDictionary<string, BinaryData> additionalBinaryDataProperties, IList<LogsTable> tables, IDictionary<string, BinaryData> statistics0, IDictionary<string, BinaryData> render) : base(allTables, error, statistics, visualization, additionalBinaryDataProperties)
        {
            Tables = tables;
            Statistics = statistics0;
            Render = render;
        }
    }
}
