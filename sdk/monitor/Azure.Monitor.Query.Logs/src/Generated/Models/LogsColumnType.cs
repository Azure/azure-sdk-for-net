// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.Monitor.Query.Logs;

namespace Azure.Monitor.Query.Logs.Models
{
    /// <summary> The data type of a column. </summary>
    public readonly partial struct LogsColumnType : IEquatable<LogsColumnType>
    {
        private readonly string _value;
        /// <summary> Boolean data type. </summary>
        private const string BoolValue = "bool";
        /// <summary> DateTime data type. </summary>
        private const string DatetimeValue = "datetime";
        /// <summary> Dynamic data type. </summary>
        private const string DynamicValue = "dynamic";
        /// <summary> Integer data type. </summary>
        private const string IntValue = "int";
        /// <summary> Long integer data type. </summary>
        private const string LongValue = "long";
        /// <summary> Real/floating point data type. </summary>
        private const string RealValue = "real";
        /// <summary> String data type. </summary>
        private const string StringValue = "string";
        /// <summary> GUID data type. </summary>
        private const string GuidValue = "guid";
        /// <summary> Decimal data type. </summary>
        private const string DecimalValue = "decimal";
        /// <summary> Timespan data type. </summary>
        private const string TimespanValue = "timespan";

        /// <summary> Initializes a new instance of <see cref="LogsColumnType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LogsColumnType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Boolean data type. </summary>
        public static LogsColumnType Bool { get; } = new LogsColumnType(BoolValue);

        /// <summary> DateTime data type. </summary>
        public static LogsColumnType Datetime { get; } = new LogsColumnType(DatetimeValue);

        /// <summary> Dynamic data type. </summary>
        public static LogsColumnType Dynamic { get; } = new LogsColumnType(DynamicValue);

        /// <summary> Integer data type. </summary>
        public static LogsColumnType Int { get; } = new LogsColumnType(IntValue);

        /// <summary> Long integer data type. </summary>
        public static LogsColumnType Long { get; } = new LogsColumnType(LongValue);

        /// <summary> Real/floating point data type. </summary>
        public static LogsColumnType Real { get; } = new LogsColumnType(RealValue);

        /// <summary> String data type. </summary>
        public static LogsColumnType String { get; } = new LogsColumnType(StringValue);

        /// <summary> GUID data type. </summary>
        public static LogsColumnType Guid { get; } = new LogsColumnType(GuidValue);

        /// <summary> Decimal data type. </summary>
        public static LogsColumnType Decimal { get; } = new LogsColumnType(DecimalValue);

        /// <summary> Timespan data type. </summary>
        public static LogsColumnType Timespan { get; } = new LogsColumnType(TimespanValue);

        /// <summary> Determines if two <see cref="LogsColumnType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(LogsColumnType left, LogsColumnType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="LogsColumnType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(LogsColumnType left, LogsColumnType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="LogsColumnType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator LogsColumnType(string value) => new LogsColumnType(value);

        /// <summary> Converts a string to a <see cref="LogsColumnType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator LogsColumnType?(string value) => value == null ? null : new LogsColumnType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LogsColumnType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(LogsColumnType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
