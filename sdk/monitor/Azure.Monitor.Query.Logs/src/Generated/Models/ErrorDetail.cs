// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Monitor.Query.Logs;

namespace Azure.Monitor.Query.Logs.Models
{
    /// <summary> Error details. </summary>
    internal partial class ErrorDetail
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ErrorDetail"/>. </summary>
        /// <param name="code"> The error's code. </param>
        /// <param name="message"> A human readable error message. </param>
        internal ErrorDetail(string code, string message)
        {
            Code = code;
            Message = message;
            Resources = new ChangeTrackingList<string>();
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="ErrorDetail"/>. </summary>
        /// <param name="code"> The error's code. </param>
        /// <param name="message"> A human readable error message. </param>
        /// <param name="target"> Indicates which property in the request is responsible for the error. </param>
        /// <param name="value"> Indicates which value in 'target' is responsible for the error. </param>
        /// <param name="resources"> Indicates resources which were responsible for the error. </param>
        /// <param name="additionalProperties"> Additional properties that can be provided on the error details object. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ErrorDetail(string code, string message, string target, string value, IList<string> resources, IDictionary<string, BinaryData> additionalProperties, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Code = code;
            Message = message;
            Target = target;
            Value = value;
            Resources = resources;
            AdditionalProperties = additionalProperties;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The error's code. </summary>
        public string Code { get; }

        /// <summary> A human readable error message. </summary>
        public string Message { get; }

        /// <summary> Indicates which property in the request is responsible for the error. </summary>
        public string Target { get; }

        /// <summary> Indicates which value in 'target' is responsible for the error. </summary>
        public string Value { get; }

        /// <summary> Indicates resources which were responsible for the error. </summary>
        public IList<string> Resources { get; }

        /// <summary>
        /// Additional properties that can be provided on the error details object
        /// <para> To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, JsonSerializerOptions?)"/>. </para>
        /// <para> To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>. </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term> BinaryData.FromObjectAsJson("foo"). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("\"foo\""). </term>
        /// <description> Creates a payload of "foo". </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromObjectAsJson(new { key = "value" }). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// <item>
        /// <term> BinaryData.FromString("{\"key\": \"value\"}"). </term>
        /// <description> Creates a payload of { "key": "value" }. </description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
