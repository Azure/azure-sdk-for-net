// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Monitor.Query.Logs.Models;

namespace Azure.Monitor.Query.Logs
{
    /// <summary> The LogsQueryClient. </summary>
    public partial class LogsQueryClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://api.loganalytics.io/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of LogsQueryClient for mocking. </summary>
        protected LogsQueryClient()
        {
        }

        /// <summary> Initializes a new instance of LogsQueryClient. </summary>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public LogsQueryClient(TokenCredential credential) : this(new Uri("https://api.loganalytics.io"), credential, new LogsQueryClientOptions())
        {
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Executes an Analytics query for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
        /// is an example for using POST with an Analytics query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId">
        /// Primary Workspace ID of the query. This is the Workspace ID from the Properties
        /// blade in the Azure portal.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="prefer"> Optional. The prefer header to set server timeout, query statistics and visualization information. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response QueryWorkspace(string workspaceId, RequestContent content, string prefer = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("LogsQueryClient.QueryWorkspace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryWorkspaceRequest(workspaceId, content, prefer, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Executes an Analytics query for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
        /// is an example for using POST with an Analytics query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="workspaceId">
        /// Primary Workspace ID of the query. This is the Workspace ID from the Properties
        /// blade in the Azure portal.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="prefer"> Optional. The prefer header to set server timeout, query statistics and visualization information. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> QueryWorkspaceAsync(string workspaceId, RequestContent content, string prefer = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("LogsQueryClient.QueryWorkspace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryWorkspaceRequest(workspaceId, content, prefer, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Executes an Analytics query for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
        /// is an example for using POST with an Analytics query.
        /// </summary>
        /// <param name="workspaceId">
        /// Primary Workspace ID of the query. This is the Workspace ID from the Properties
        /// blade in the Azure portal.
        /// </param>
        /// <param name="body">
        /// The Analytics query. Learn more about the
        /// [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        /// </param>
        /// <param name="prefer"> Optional. The prefer header to set server timeout, query statistics and visualization information. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<LogsQueryResult> QueryWorkspace(string workspaceId, QueryBody body, string prefer = default, CancellationToken cancellationToken = default)
        {
            Response result = QueryWorkspace(workspaceId, body, prefer, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((LogsQueryResult)result, result);
        }

        /// <summary>
        /// Executes an Analytics query for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
        /// is an example for using POST with an Analytics query.
        /// </summary>
        /// <param name="workspaceId">
        /// Primary Workspace ID of the query. This is the Workspace ID from the Properties
        /// blade in the Azure portal.
        /// </param>
        /// <param name="body">
        /// The Analytics query. Learn more about the
        /// [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        /// </param>
        /// <param name="prefer"> Optional. The prefer header to set server timeout, query statistics and visualization information. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<LogsQueryResult>> QueryWorkspaceAsync(string workspaceId, QueryBody body, string prefer = default, CancellationToken cancellationToken = default)
        {
            Response result = await QueryWorkspaceAsync(workspaceId, body, prefer, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((LogsQueryResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Executes an Analytics query for data in the context of a resource.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
        /// is an example for using POST with an Analytics query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="prefer">
        /// Optional. The prefer header to set server timeout, query statistics and
        /// visualization information.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response QueryResource(string resourceId, RequestContent content, string prefer = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("LogsQueryClient.QueryResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryResourceRequest(resourceId, content, prefer, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Executes an Analytics query for data in the context of a resource.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
        /// is an example for using POST with an Analytics query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="prefer">
        /// Optional. The prefer header to set server timeout, query statistics and
        /// visualization information.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> QueryResourceAsync(string resourceId, RequestContent content, string prefer = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("LogsQueryClient.QueryResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryResourceRequest(resourceId, content, prefer, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Executes an Analytics query for data in the context of a resource.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
        /// is an example for using POST with an Analytics query.
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="body">
        /// The Analytics query. Learn more about the
        /// [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        /// </param>
        /// <param name="prefer">
        /// Optional. The prefer header to set server timeout, query statistics and
        /// visualization information.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<LogsQueryResult> QueryResource(string resourceId, QueryBody body, string prefer = default, CancellationToken cancellationToken = default)
        {
            Response result = QueryResource(resourceId, body, prefer, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((LogsQueryResult)result, result);
        }

        /// <summary>
        /// Executes an Analytics query for data in the context of a resource.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
        /// is an example for using POST with an Analytics query.
        /// </summary>
        /// <param name="resourceId"> The identifier of the resource. </param>
        /// <param name="body">
        /// The Analytics query. Learn more about the
        /// [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
        /// </param>
        /// <param name="prefer">
        /// Optional. The prefer header to set server timeout, query statistics and
        /// visualization information.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<LogsQueryResult>> QueryResourceAsync(string resourceId, QueryBody body, string prefer = default, CancellationToken cancellationToken = default)
        {
            Response result = await QueryResourceAsync(resourceId, body, prefer, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((LogsQueryResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Executes a batch of Analytics queries for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
        /// is an example for using POST with an Analytics query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response QueryBatch(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("LogsQueryClient.QueryBatch");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryBatchRequest(content, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Executes a batch of Analytics queries for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
        /// is an example for using POST with an Analytics query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> QueryBatchAsync(RequestContent content, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("LogsQueryClient.QueryBatch");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryBatchRequest(content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Executes a batch of Analytics queries for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
        /// is an example for using POST with an Analytics query.
        /// </summary>
        /// <param name="body"> The batch request body. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<BatchResponse> QueryBatch(BatchRequest body, CancellationToken cancellationToken = default)
        {
            Response result = QueryBatch(body, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchResponse)result, result);
        }

        /// <summary>
        /// Executes a batch of Analytics queries for data.
        /// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
        /// is an example for using POST with an Analytics query.
        /// </summary>
        /// <param name="body"> The batch request body. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<BatchResponse>> QueryBatchAsync(BatchRequest body, CancellationToken cancellationToken = default)
        {
            Response result = await QueryBatchAsync(body, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchResponse)result, result);
        }
    }
}
