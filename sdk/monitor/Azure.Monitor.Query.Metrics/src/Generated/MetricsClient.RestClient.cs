// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;

namespace Azure.Monitor.Query.Metrics
{
    /// <summary></summary>
    public partial class MetricsClient
    {
        private static ResponseClassifier _pipelineMessageClassifier200;

        private static ResponseClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = new StatusCodeClassifier(stackalloc ushort[] { 200 });

        internal HttpMessage CreateQueryResourcesRequest(Guid subscriptionId, string metricNamespace, IEnumerable<string> metricNames, RequestContent content, string startTime, string endTime, string interval, string aggregation, int? top, string orderBy, string filter, string rollUpBy, RequestContext context)
        {
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId.ToString(), true);
            uri.AppendPath("/metrics:getBatch", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (startTime != null)
            {
                uri.AppendQuery("starttime", startTime, true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endtime", endTime, true);
            }
            if (interval != null)
            {
                uri.AppendQuery("interval", interval, true);
            }
            uri.AppendQuery("metricnamespace", metricNamespace, true);
            if (metricNames != null && !(metricNames is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("metricnames", metricNames, ",", null, true);
            }
            if (aggregation != null)
            {
                uri.AppendQuery("aggregation", aggregation, true);
            }
            if (top != null)
            {
                uri.AppendQuery("top", TypeFormatters.ConvertToString(top, null), true);
            }
            if (orderBy != null)
            {
                uri.AppendQuery("orderby", orderBy, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (rollUpBy != null)
            {
                uri.AppendQuery("rollupby", rollUpBy, true);
            }
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Uri = uri;
            request.Method = RequestMethod.Post;
            request.Headers.SetValue("Content-Type", "application/json");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }
    }
}
