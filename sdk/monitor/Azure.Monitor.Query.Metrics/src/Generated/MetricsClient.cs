// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Monitor.Query.Metrics.Models;

namespace Azure.Monitor.Query.Metrics
{
    /// <summary> The MetricsClient. </summary>
    public partial class MetricsClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://metrics.monitor.azure.com/.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of MetricsClient for mocking. </summary>
        protected MetricsClient()
        {
        }

        /// <summary> Initializes a new instance of MetricsClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MetricsClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new MetricsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of MetricsClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public MetricsClient(Uri endpoint, TokenCredential credential, MetricsClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new MetricsClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] Lists the metric values for multiple resources.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The subscription identifier for the resources in this batch. </param>
        /// <param name="metricNamespace"> Metric namespace that contains the requested metric names. </param>
        /// <param name="metricNames"> The names of the metrics (comma separated) to retrieve. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="startTime">
        /// The start time of the query. It is a string in the format
        /// 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
        /// this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.
        /// </param>
        /// <param name="endTime"> The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. </param>
        /// <param name="interval">
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format.
        /// Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
        /// for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </param>
        /// <param name="aggregation"> The list of aggregation types (comma separated) to retrieve. *Examples: average, minimum, maximum*. </param>
        /// <param name="top">
        /// The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.
        /// </param>
        /// <param name="orderBy">
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*
        /// </param>
        /// <param name="filter">
        /// The filter is used to reduce the set of metric data
        /// returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
        /// time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
        /// ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
        /// and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
        /// or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
        /// series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
        /// C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
        /// B eq ‘*’ and C eq ‘*’**.
        /// </param>
        /// <param name="rollUpBy">
        /// Dimension name(s) to rollup results by. For example if you only want to see
        /// metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
        /// want to see separate values for each city, you can specify 'RollUpBy=City' to
        /// see the results for Seattle and Tacoma rolled up into one timeseries.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response QueryResources(Guid subscriptionId, string metricNamespace, IEnumerable<string> metricNames, RequestContent content, string startTime = default, string endTime = default, string interval = default, string aggregation = default, int? top = default, string orderBy = default, string filter = default, string rollUpBy = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MetricsClient.QueryResources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryResourcesRequest(subscriptionId, metricNamespace, metricNames, content, startTime, endTime, interval, aggregation, top, orderBy, filter, rollUpBy, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists the metric values for multiple resources.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The subscription identifier for the resources in this batch. </param>
        /// <param name="metricNamespace"> Metric namespace that contains the requested metric names. </param>
        /// <param name="metricNames"> The names of the metrics (comma separated) to retrieve. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="startTime">
        /// The start time of the query. It is a string in the format
        /// 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
        /// this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.
        /// </param>
        /// <param name="endTime"> The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. </param>
        /// <param name="interval">
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format.
        /// Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
        /// for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </param>
        /// <param name="aggregation"> The list of aggregation types (comma separated) to retrieve. *Examples: average, minimum, maximum*. </param>
        /// <param name="top">
        /// The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.
        /// </param>
        /// <param name="orderBy">
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*
        /// </param>
        /// <param name="filter">
        /// The filter is used to reduce the set of metric data
        /// returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
        /// time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
        /// ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
        /// and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
        /// or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
        /// series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
        /// C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
        /// B eq ‘*’ and C eq ‘*’**.
        /// </param>
        /// <param name="rollUpBy">
        /// Dimension name(s) to rollup results by. For example if you only want to see
        /// metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
        /// want to see separate values for each city, you can specify 'RollUpBy=City' to
        /// see the results for Seattle and Tacoma rolled up into one timeseries.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> QueryResourcesAsync(Guid subscriptionId, string metricNamespace, IEnumerable<string> metricNames, RequestContent content, string startTime = default, string endTime = default, string interval = default, string aggregation = default, int? top = default, string orderBy = default, string filter = default, string rollUpBy = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("MetricsClient.QueryResources");
            scope.Start();
            try
            {
                using HttpMessage message = CreateQueryResourcesRequest(subscriptionId, metricNamespace, metricNames, content, startTime, endTime, interval, aggregation, top, orderBy, filter, rollUpBy, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the metric values for multiple resources. </summary>
        /// <param name="subscriptionId"> The subscription identifier for the resources in this batch. </param>
        /// <param name="metricNamespace"> Metric namespace that contains the requested metric names. </param>
        /// <param name="metricNames"> The names of the metrics (comma separated) to retrieve. </param>
        /// <param name="batchRequest"> Metrics batch body including the list of resource ids. </param>
        /// <param name="startTime">
        /// The start time of the query. It is a string in the format
        /// 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
        /// this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.
        /// </param>
        /// <param name="endTime"> The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. </param>
        /// <param name="interval">
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format.
        /// Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
        /// for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </param>
        /// <param name="aggregation"> The list of aggregation types (comma separated) to retrieve. *Examples: average, minimum, maximum*. </param>
        /// <param name="top">
        /// The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.
        /// </param>
        /// <param name="orderBy">
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*
        /// </param>
        /// <param name="filter">
        /// The filter is used to reduce the set of metric data
        /// returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
        /// time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
        /// ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
        /// and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
        /// or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
        /// series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
        /// C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
        /// B eq ‘*’ and C eq ‘*’**.
        /// </param>
        /// <param name="rollUpBy">
        /// Dimension name(s) to rollup results by. For example if you only want to see
        /// metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
        /// want to see separate values for each city, you can specify 'RollUpBy=City' to
        /// see the results for Seattle and Tacoma rolled up into one timeseries.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response<MetricsQueryResourcesResult> QueryResources(Guid subscriptionId, string metricNamespace, IEnumerable<string> metricNames, ResourceIdList batchRequest, string startTime = default, string endTime = default, string interval = default, string aggregation = default, int? top = default, string orderBy = default, string filter = default, string rollUpBy = default, CancellationToken cancellationToken = default)
        {
            Response result = QueryResources(subscriptionId, metricNamespace, metricNames, batchRequest, startTime, endTime, interval, aggregation, top, orderBy, filter, rollUpBy, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((MetricsQueryResourcesResult)result, result);
        }

        /// <summary> Lists the metric values for multiple resources. </summary>
        /// <param name="subscriptionId"> The subscription identifier for the resources in this batch. </param>
        /// <param name="metricNamespace"> Metric namespace that contains the requested metric names. </param>
        /// <param name="metricNames"> The names of the metrics (comma separated) to retrieve. </param>
        /// <param name="batchRequest"> Metrics batch body including the list of resource ids. </param>
        /// <param name="startTime">
        /// The start time of the query. It is a string in the format
        /// 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then
        /// this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.
        /// </param>
        /// <param name="endTime"> The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. </param>
        /// <param name="interval">
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format.
        /// Defaults to PT1M. Special case for 'FULL' value that returns single datapoint
        /// for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </param>
        /// <param name="aggregation"> The list of aggregation types (comma separated) to retrieve. *Examples: average, minimum, maximum*. </param>
        /// <param name="top">
        /// The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.
        /// </param>
        /// <param name="orderBy">
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*
        /// </param>
        /// <param name="filter">
        /// The filter is used to reduce the set of metric data
        /// returned.&lt;br&gt;Example:&lt;br&gt;Metric contains metadata A, B and C.&lt;br&gt;- Return all
        /// time series of C where A = a1 and B = b1 or b2&lt;br&gt;**filter=A eq ‘a1’ and B eq
        /// ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;- Invalid variant:&lt;br&gt;**filter=A eq ‘a1’
        /// and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt;This is invalid because the logical
        /// or operator cannot separate two different metadata names.&lt;br&gt;- Return all time
        /// series where A = a1, B = b1 and C = c1:&lt;br&gt;**filter=A eq ‘a1’ and B eq ‘b1’ and
        /// C eq ‘c1’**&lt;br&gt;- Return all time series where A = a1&lt;br&gt;**filter=A eq ‘a1’ and
        /// B eq ‘*’ and C eq ‘*’**.
        /// </param>
        /// <param name="rollUpBy">
        /// Dimension name(s) to rollup results by. For example if you only want to see
        /// metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't
        /// want to see separate values for each city, you can specify 'RollUpBy=City' to
        /// see the results for Seattle and Tacoma rolled up into one timeseries.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response<MetricsQueryResourcesResult>> QueryResourcesAsync(Guid subscriptionId, string metricNamespace, IEnumerable<string> metricNames, ResourceIdList batchRequest, string startTime = default, string endTime = default, string interval = default, string aggregation = default, int? top = default, string orderBy = default, string filter = default, string rollUpBy = default, CancellationToken cancellationToken = default)
        {
            Response result = await QueryResourcesAsync(subscriptionId, metricNamespace, metricNames, batchRequest, startTime, endTime, interval, aggregation, top, orderBy, filter, rollUpBy, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((MetricsQueryResourcesResult)result, result);
        }
    }
}
