// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Monitor.Query.Metrics;

namespace Azure.Monitor.Query.Metrics.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class MetricsQueryModelFactory
    {
        /// <summary> The metrics result for a resource. </summary>
        /// <param name="values"> The collection of metric data responses per resource, per metric. </param>
        /// <returns> A new <see cref="Models.MetricsQueryResourcesResult"/> instance for mocking. </returns>
        public static MetricsQueryResourcesResult MetricsQueryResourcesResult(IEnumerable<MetricsQueryResult> values = default)
        {
            values ??= new ChangeTrackingList<MetricsQueryResult>();

            return new MetricsQueryResourcesResult(values.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> The metric data response for a resource. </summary>
        /// <param name="startTime"> The start time, in datetime format, for which the data was retrieved. </param>
        /// <param name="endTime"> The end time, in datetime format, for which the data was retrieved. </param>
        /// <param name="granularity">
        /// The interval (window size) for which the metric data was returned in ISO 8601
        /// duration format with a special case for 'FULL' value that returns single
        /// datapoint for entire time span requested (*Examples: PT15M, PT1H, P1D, FULL*).
        /// This may be adjusted and different from what was originally requested if
        /// AutoAdjustTimegrain=true is specified.
        /// </param>
        /// <param name="namespace"> The namespace of the metrics been queried. </param>
        /// <param name="resourceRegion"> The region of the resource been queried for metrics. </param>
        /// <param name="resourceId"> The resource that has been queried for metrics. </param>
        /// <param name="metrics"> The value of the collection. </param>
        /// <returns> A new <see cref="Models.MetricsQueryResult"/> instance for mocking. </returns>
        public static MetricsQueryResult MetricsQueryResult(string startTime = default, string endTime = default, string granularity = default, string @namespace = default, string resourceRegion = default, string resourceId = default, IEnumerable<MetricResult> metrics = default)
        {
            metrics ??= new ChangeTrackingList<MetricResult>();

            return new MetricsQueryResult(
                startTime,
                endTime,
                granularity,
                @namespace,
                resourceRegion,
                resourceId,
                metrics.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> Represents a metric value. </summary>
        /// <param name="timeStamp"> The timestamp for the metric value in ISO 8601 format. </param>
        /// <param name="average"> The average value in the time range. </param>
        /// <param name="minimum"> The least value in the time range. </param>
        /// <param name="maximum"> The greatest value in the time range. </param>
        /// <param name="total"> The sum of all of the values in the time range. </param>
        /// <param name="count">
        /// The number of samples in the time range. Can be used to determine the number of
        /// values that contributed to the average value.
        /// </param>
        /// <returns> A new <see cref="Models.MetricValue"/> instance for mocking. </returns>
        public static MetricValue MetricValue(DateTimeOffset timeStamp = default, double? average = default, double? minimum = default, double? maximum = default, double? total = default, double? count = default)
        {
            return new MetricValue(
                timeStamp,
                average,
                minimum,
                maximum,
                total,
                count,
                additionalBinaryDataProperties: null);
        }
    }
}
