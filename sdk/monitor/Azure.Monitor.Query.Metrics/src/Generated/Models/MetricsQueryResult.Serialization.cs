// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Monitor.Query.Metrics;

namespace Azure.Monitor.Query.Metrics.Models
{
    /// <summary> The metric data response for a resource. </summary>
    public partial class MetricsQueryResult : IJsonModel<MetricsQueryResult>
    {
        /// <summary> Initializes a new instance of <see cref="MetricsQueryResult"/> for deserialization. </summary>
        internal MetricsQueryResult()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<MetricsQueryResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MetricsQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MetricsQueryResult)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("starttime"u8);
            writer.WriteStringValue(StartTime);
            writer.WritePropertyName("endtime"u8);
            writer.WriteStringValue(EndTime);
            if (Optional.IsDefined(Granularity))
            {
                writer.WritePropertyName("interval"u8);
                writer.WriteStringValue(Granularity);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace"u8);
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(ResourceRegion))
            {
                writer.WritePropertyName("resourceregion"u8);
                writer.WriteStringValue(ResourceRegion);
            }
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceid"u8);
                writer.WriteStringValue(ResourceId);
            }
            writer.WritePropertyName("value"u8);
            writer.WriteStartArray();
            foreach (MetricResult item in Metrics)
            {
                writer.WriteObjectValue(item, options);
            }
            writer.WriteEndArray();
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        MetricsQueryResult IJsonModel<MetricsQueryResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual MetricsQueryResult JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MetricsQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MetricsQueryResult)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMetricsQueryResult(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static MetricsQueryResult DeserializeMetricsQueryResult(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string startTime = default;
            string endTime = default;
            string granularity = default;
            string @namespace = default;
            string resourceRegion = default;
            string resourceId = default;
            IList<MetricResult> metrics = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("starttime"u8))
                {
                    startTime = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("endtime"u8))
                {
                    endTime = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("interval"u8))
                {
                    granularity = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("namespace"u8))
                {
                    @namespace = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceregion"u8))
                {
                    resourceRegion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceid"u8))
                {
                    resourceId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("value"u8))
                {
                    List<MetricResult> array = new List<MetricResult>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(MetricResult.DeserializeMetricResult(item, options));
                    }
                    metrics = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new MetricsQueryResult(
                startTime,
                endTime,
                granularity,
                @namespace,
                resourceRegion,
                resourceId,
                metrics,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<MetricsQueryResult>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MetricsQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureMonitorQueryMetricsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MetricsQueryResult)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        MetricsQueryResult IPersistableModel<MetricsQueryResult>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual MetricsQueryResult PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<MetricsQueryResult>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeMetricsQueryResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MetricsQueryResult)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<MetricsQueryResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
