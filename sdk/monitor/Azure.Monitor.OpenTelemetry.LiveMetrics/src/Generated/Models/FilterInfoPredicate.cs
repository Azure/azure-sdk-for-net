// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Monitor.OpenTelemetry.LiveMetrics.Models
{
    /// <summary> Operator of the filter. </summary>
    public readonly partial struct FilterInfoPredicate : IEquatable<FilterInfoPredicate>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FilterInfoPredicate"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FilterInfoPredicate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EqualValue = "Equal";
        private const string NotEqualValue = "NotEqual";
        private const string LessThanValue = "LessThan";
        private const string GreaterThanValue = "GreaterThan";
        private const string LessThanOrEqualValue = "LessThanOrEqual";
        private const string GreaterThanOrEqualValue = "GreaterThanOrEqual";
        private const string ContainsValue = "Contains";
        private const string DoesNotContainValue = "DoesNotContain";

        /// <summary> Equal. </summary>
        public static FilterInfoPredicate Equal { get; } = new FilterInfoPredicate(EqualValue);
        /// <summary> NotEqual. </summary>
        public static FilterInfoPredicate NotEqual { get; } = new FilterInfoPredicate(NotEqualValue);
        /// <summary> LessThan. </summary>
        public static FilterInfoPredicate LessThan { get; } = new FilterInfoPredicate(LessThanValue);
        /// <summary> GreaterThan. </summary>
        public static FilterInfoPredicate GreaterThan { get; } = new FilterInfoPredicate(GreaterThanValue);
        /// <summary> LessThanOrEqual. </summary>
        public static FilterInfoPredicate LessThanOrEqual { get; } = new FilterInfoPredicate(LessThanOrEqualValue);
        /// <summary> GreaterThanOrEqual. </summary>
        public static FilterInfoPredicate GreaterThanOrEqual { get; } = new FilterInfoPredicate(GreaterThanOrEqualValue);
        /// <summary> Contains. </summary>
        public static FilterInfoPredicate Contains { get; } = new FilterInfoPredicate(ContainsValue);
        /// <summary> DoesNotContain. </summary>
        public static FilterInfoPredicate DoesNotContain { get; } = new FilterInfoPredicate(DoesNotContainValue);
        /// <summary> Determines if two <see cref="FilterInfoPredicate"/> values are the same. </summary>
        public static bool operator ==(FilterInfoPredicate left, FilterInfoPredicate right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FilterInfoPredicate"/> values are not the same. </summary>
        public static bool operator !=(FilterInfoPredicate left, FilterInfoPredicate right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FilterInfoPredicate"/>. </summary>
        public static implicit operator FilterInfoPredicate(string value) => new FilterInfoPredicate(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FilterInfoPredicate other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FilterInfoPredicate other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
