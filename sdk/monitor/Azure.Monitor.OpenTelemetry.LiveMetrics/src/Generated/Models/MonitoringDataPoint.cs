// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Monitor.OpenTelemetry.LiveMetrics.Models
{
    /// <summary> Monitoring data point coming from SDK, which includes metrics, documents and other metadata info. </summary>
    internal partial class MonitoringDataPoint
    {
        /// <summary> Initializes a new instance of <see cref="MonitoringDataPoint"/>. </summary>
        public MonitoringDataPoint()
        {
            Metrics = new ChangeTrackingList<MetricPoint>();
            Documents = new ChangeTrackingList<DocumentIngress>();
            TopCpuProcesses = new ChangeTrackingList<ProcessCpuData>();
            CollectionConfigurationErrors = new ChangeTrackingList<CollectionConfigurationError>();
        }

        /// <summary> AI SDK version. </summary>
        public string Version { get; set; }
        /// <summary> Version/generation of the data contract (MonitoringDataPoint) between SDK and QuickPulse. </summary>
        public int? InvariantVersion { get; set; }
        /// <summary> Service instance name where AI SDK lives. </summary>
        public string Instance { get; set; }
        /// <summary> Service role name. </summary>
        public string RoleName { get; set; }
        /// <summary> Computer name where AI SDK lives. </summary>
        public string MachineName { get; set; }
        /// <summary> Identifies an AI SDK as a trusted agent to report metrics and documents. </summary>
        public string StreamId { get; set; }
        /// <summary> Data point generation timestamp. </summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary> Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. </summary>
        public DateTimeOffset? TransmissionTime { get; set; }
        /// <summary> True if the current application is an Azure Web App. </summary>
        public bool? IsWebApp { get; set; }
        /// <summary> True if performance counters collection is supported. </summary>
        public bool? PerformanceCollectionSupported { get; set; }
        /// <summary> An array of meric data points. </summary>
        public IList<MetricPoint> Metrics { get; }
        /// <summary> An array of documents of a specific type {RequestDocumentIngress}, {RemoteDependencyDocumentIngress}, {ExceptionDocumentIngress}, {EventDocumentIngress}, or {TraceDocumentIngress}. </summary>
        public IList<DocumentIngress> Documents { get; }
        /// <summary> An array of top cpu consumption data point. </summary>
        public IList<ProcessCpuData> TopCpuProcesses { get; }
        /// <summary> An array of error while parsing and applying . </summary>
        public IList<CollectionConfigurationError> CollectionConfigurationErrors { get; }
    }
}
