// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Monitor.OpenTelemetry.LiveMetrics.Models
{
    /// <summary> Telemetry type. </summary>
    public readonly partial struct DocumentFilterConjunctionGroupInfoTelemetryType : IEquatable<DocumentFilterConjunctionGroupInfoTelemetryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentFilterConjunctionGroupInfoTelemetryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentFilterConjunctionGroupInfoTelemetryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequestValue = "Request";
        private const string DependencyValue = "Dependency";
        private const string ExceptionValue = "Exception";
        private const string EventValue = "Event";
        private const string MetricValue = "Metric";
        private const string PerformanceCounterValue = "PerformanceCounter";
        private const string TraceValue = "Trace";

        /// <summary> Request. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType Request { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(RequestValue);
        /// <summary> Dependency. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType Dependency { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(DependencyValue);
        /// <summary> Exception. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType Exception { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(ExceptionValue);
        /// <summary> Event. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType Event { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(EventValue);
        /// <summary> Metric. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType Metric { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(MetricValue);
        /// <summary> PerformanceCounter. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType PerformanceCounter { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(PerformanceCounterValue);
        /// <summary> Trace. </summary>
        public static DocumentFilterConjunctionGroupInfoTelemetryType Trace { get; } = new DocumentFilterConjunctionGroupInfoTelemetryType(TraceValue);
        /// <summary> Determines if two <see cref="DocumentFilterConjunctionGroupInfoTelemetryType"/> values are the same. </summary>
        public static bool operator ==(DocumentFilterConjunctionGroupInfoTelemetryType left, DocumentFilterConjunctionGroupInfoTelemetryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentFilterConjunctionGroupInfoTelemetryType"/> values are not the same. </summary>
        public static bool operator !=(DocumentFilterConjunctionGroupInfoTelemetryType left, DocumentFilterConjunctionGroupInfoTelemetryType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentFilterConjunctionGroupInfoTelemetryType"/>. </summary>
        public static implicit operator DocumentFilterConjunctionGroupInfoTelemetryType(string value) => new DocumentFilterConjunctionGroupInfoTelemetryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentFilterConjunctionGroupInfoTelemetryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentFilterConjunctionGroupInfoTelemetryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
