// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Monitor.OpenTelemetry.LiveMetrics.Models
{
    internal partial class CollectionConfigurationInfo
    {
        internal static CollectionConfigurationInfo DeserializeCollectionConfigurationInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> etag = default;
            Optional<IReadOnlyList<DerivedMetricInfo>> metrics = default;
            Optional<IReadOnlyList<DocumentStreamInfo>> documentStreams = default;
            Optional<QuotaConfigurationInfo> quotaInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Etag"u8))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Metrics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DerivedMetricInfo> array = new List<DerivedMetricInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DerivedMetricInfo.DeserializeDerivedMetricInfo(item));
                    }
                    metrics = array;
                    continue;
                }
                if (property.NameEquals("DocumentStreams"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentStreamInfo> array = new List<DocumentStreamInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentStreamInfo.DeserializeDocumentStreamInfo(item));
                    }
                    documentStreams = array;
                    continue;
                }
                if (property.NameEquals("QuotaInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quotaInfo = QuotaConfigurationInfo.DeserializeQuotaConfigurationInfo(property.Value);
                    continue;
                }
            }
            return new CollectionConfigurationInfo(etag.Value, Optional.ToList(metrics), Optional.ToList(documentStreams), quotaInfo.Value);
        }
    }
}
