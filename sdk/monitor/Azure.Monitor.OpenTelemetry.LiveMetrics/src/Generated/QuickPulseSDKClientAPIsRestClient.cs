// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Monitor.OpenTelemetry.LiveMetrics.Models;

namespace Azure.Monitor.OpenTelemetry.LiveMetrics
{
    internal partial class QuickPulseSDKClientAPIsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _host;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of QuickPulseSDKClientAPIsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="host"> QuickPulse endpoint: https://rt.services.visualstudio.com. The default value is "https://rt.services.visualstudio.com". </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="host"/> is null. </exception>
        public QuickPulseSDKClientAPIsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _host = host ?? throw new ArgumentNullException(nameof(host));
        }

        internal HttpMessage CreatePingRequest(string ikey, string apikey, int? xMsQpsTransmissionTime, string xMsQpsMachineName, string xMsQpsInstanceName, string xMsQpsStreamId, string xMsQpsRoleName, string xMsQpsInvariantVersion, string xMsQpsConfigurationEtag, MonitoringDataPoint monitoringDataPoint)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_host, false);
            uri.AppendPath("/QuickPulseService.svc/ping", false);
            uri.AppendQuery("ikey", ikey, true);
            if (apikey != null)
            {
                uri.AppendQuery("apikey", apikey, true);
            }
            request.Uri = uri;
            if (xMsQpsTransmissionTime != null)
            {
                request.Headers.Add("x-ms-qps-transmission-time", xMsQpsTransmissionTime.Value);
            }
            if (xMsQpsMachineName != null)
            {
                request.Headers.Add("x-ms-qps-machine-name", xMsQpsMachineName);
            }
            if (xMsQpsInstanceName != null)
            {
                request.Headers.Add("x-ms-qps-instance-name", xMsQpsInstanceName);
            }
            if (xMsQpsStreamId != null)
            {
                request.Headers.Add("x-ms-qps-stream-id", xMsQpsStreamId);
            }
            if (xMsQpsRoleName != null)
            {
                request.Headers.Add("x-ms-qps-role-name", xMsQpsRoleName);
            }
            if (xMsQpsInvariantVersion != null)
            {
                request.Headers.Add("x-ms-qps-invariant-version", xMsQpsInvariantVersion);
            }
            if (xMsQpsConfigurationEtag != null)
            {
                request.Headers.Add("x-ms-qps-configuration-etag", xMsQpsConfigurationEtag);
            }
            request.Headers.Add("Accept", "application/json");
            if (monitoringDataPoint != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(monitoringDataPoint);
                request.Content = content;
            }
            return message;
        }

        /// <summary> SDK ping. </summary>
        /// <param name="ikey"> The ikey of the target Application Insights component that displays server info sent by /QuickPulseService.svc/ping. </param>
        /// <param name="apikey"> Deprecated. An alternative way to pass api key. Use AAD auth instead. </param>
        /// <param name="xMsQpsTransmissionTime"> Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. </param>
        /// <param name="xMsQpsMachineName"> Computer name where AI SDK lives. QuickPulse uses machine name with instance name as a backup. </param>
        /// <param name="xMsQpsInstanceName"> Service instance name where AI SDK lives. QuickPulse uses machine name with instance name as a backup. </param>
        /// <param name="xMsQpsStreamId"> Identifies an AI SDK as trusted agent to report metrics and documents. </param>
        /// <param name="xMsQpsRoleName"> Cloud role name for which SDK reports metrics and documents. </param>
        /// <param name="xMsQpsInvariantVersion"> Version/generation of the data contract (MonitoringDataPoint) between SDK and QuickPulse. </param>
        /// <param name="xMsQpsConfigurationEtag"> An encoded string that indicates whether the collection configuration is changed. </param>
        /// <param name="monitoringDataPoint"> Data contract between SDK and QuickPulse. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ikey"/> is null. </exception>
        public async Task<ResponseWithHeaders<object, QuickPulseSDKClientAPIsPingHeaders>> PingAsync(string ikey, string apikey = null, int? xMsQpsTransmissionTime = null, string xMsQpsMachineName = null, string xMsQpsInstanceName = null, string xMsQpsStreamId = null, string xMsQpsRoleName = null, string xMsQpsInvariantVersion = null, string xMsQpsConfigurationEtag = null, MonitoringDataPoint monitoringDataPoint = null, CancellationToken cancellationToken = default)
        {
            if (ikey == null)
            {
                throw new ArgumentNullException(nameof(ikey));
            }

            using var message = CreatePingRequest(ikey, apikey, xMsQpsTransmissionTime, xMsQpsMachineName, xMsQpsInstanceName, xMsQpsStreamId, xMsQpsRoleName, xMsQpsInvariantVersion, xMsQpsConfigurationEtag, monitoringDataPoint);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new QuickPulseSDKClientAPIsPingHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionConfigurationInfo value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CollectionConfigurationInfo.DeserializeCollectionConfigurationInfo(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPingHeaders>(value, headers, message.Response);
                    }
                case 400:
                case 401:
                case 403:
                case 404:
                case 500:
                case 503:
                    {
                        ServiceError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceError.DeserializeServiceError(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPingHeaders>(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> SDK ping. </summary>
        /// <param name="ikey"> The ikey of the target Application Insights component that displays server info sent by /QuickPulseService.svc/ping. </param>
        /// <param name="apikey"> Deprecated. An alternative way to pass api key. Use AAD auth instead. </param>
        /// <param name="xMsQpsTransmissionTime"> Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. </param>
        /// <param name="xMsQpsMachineName"> Computer name where AI SDK lives. QuickPulse uses machine name with instance name as a backup. </param>
        /// <param name="xMsQpsInstanceName"> Service instance name where AI SDK lives. QuickPulse uses machine name with instance name as a backup. </param>
        /// <param name="xMsQpsStreamId"> Identifies an AI SDK as trusted agent to report metrics and documents. </param>
        /// <param name="xMsQpsRoleName"> Cloud role name for which SDK reports metrics and documents. </param>
        /// <param name="xMsQpsInvariantVersion"> Version/generation of the data contract (MonitoringDataPoint) between SDK and QuickPulse. </param>
        /// <param name="xMsQpsConfigurationEtag"> An encoded string that indicates whether the collection configuration is changed. </param>
        /// <param name="monitoringDataPoint"> Data contract between SDK and QuickPulse. /QuickPulseService.svc/ping uses this as a backup source of machine name, instance name and invariant version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ikey"/> is null. </exception>
        public ResponseWithHeaders<object, QuickPulseSDKClientAPIsPingHeaders> Ping(string ikey, string apikey = null, int? xMsQpsTransmissionTime = null, string xMsQpsMachineName = null, string xMsQpsInstanceName = null, string xMsQpsStreamId = null, string xMsQpsRoleName = null, string xMsQpsInvariantVersion = null, string xMsQpsConfigurationEtag = null, MonitoringDataPoint monitoringDataPoint = null, CancellationToken cancellationToken = default)
        {
            if (ikey == null)
            {
                throw new ArgumentNullException(nameof(ikey));
            }

            using var message = CreatePingRequest(ikey, apikey, xMsQpsTransmissionTime, xMsQpsMachineName, xMsQpsInstanceName, xMsQpsStreamId, xMsQpsRoleName, xMsQpsInvariantVersion, xMsQpsConfigurationEtag, monitoringDataPoint);
            _pipeline.Send(message, cancellationToken);
            var headers = new QuickPulseSDKClientAPIsPingHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionConfigurationInfo value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CollectionConfigurationInfo.DeserializeCollectionConfigurationInfo(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPingHeaders>(value, headers, message.Response);
                    }
                case 400:
                case 401:
                case 403:
                case 404:
                case 500:
                case 503:
                    {
                        ServiceError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceError.DeserializeServiceError(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPingHeaders>(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostRequest(string ikey, string apikey, string xMsQpsConfigurationEtag, int? xMsQpsTransmissionTime, IEnumerable<MonitoringDataPoint> monitoringDataPoints)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_host, false);
            uri.AppendPath("/QuickPulseService.svc/post", false);
            uri.AppendQuery("ikey", ikey, true);
            if (apikey != null)
            {
                uri.AppendQuery("apikey", apikey, true);
            }
            request.Uri = uri;
            if (xMsQpsConfigurationEtag != null)
            {
                request.Headers.Add("x-ms-qps-configuration-etag", xMsQpsConfigurationEtag);
            }
            if (xMsQpsTransmissionTime != null)
            {
                request.Headers.Add("x-ms-qps-transmission-time", xMsQpsTransmissionTime.Value);
            }
            request.Headers.Add("Accept", "application/json");
            if (monitoringDataPoints != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteStartArray();
                foreach (var item in monitoringDataPoints)
                {
                    content.JsonWriter.WriteObjectValue(item);
                }
                content.JsonWriter.WriteEndArray();
                request.Content = content;
            }
            return message;
        }

        /// <summary> SDK post. </summary>
        /// <param name="ikey"> The ikey of the target Application Insights component that displays metrics and documents sent by /QuickPulseService.svc/post. </param>
        /// <param name="apikey"> An alternative way to pass api key. Deprecated. Use AAD authentication instead. </param>
        /// <param name="xMsQpsConfigurationEtag"> An encoded string that indicates whether the collection configuration is changed. </param>
        /// <param name="xMsQpsTransmissionTime"> Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. </param>
        /// <param name="monitoringDataPoints"> Data contract between SDK and QuickPulse. /QuickPulseService.svc/post uses this to publish metrics and documents to the backend QuickPulse server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ikey"/> is null. </exception>
        public async Task<ResponseWithHeaders<object, QuickPulseSDKClientAPIsPostHeaders>> PostAsync(string ikey, string apikey = null, string xMsQpsConfigurationEtag = null, int? xMsQpsTransmissionTime = null, IEnumerable<MonitoringDataPoint> monitoringDataPoints = null, CancellationToken cancellationToken = default)
        {
            if (ikey == null)
            {
                throw new ArgumentNullException(nameof(ikey));
            }

            using var message = CreatePostRequest(ikey, apikey, xMsQpsConfigurationEtag, xMsQpsTransmissionTime, monitoringDataPoints);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new QuickPulseSDKClientAPIsPostHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionConfigurationInfo value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CollectionConfigurationInfo.DeserializeCollectionConfigurationInfo(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPostHeaders>(value, headers, message.Response);
                    }
                case 400:
                case 401:
                case 403:
                case 404:
                case 500:
                case 503:
                    {
                        ServiceError value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceError.DeserializeServiceError(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPostHeaders>(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> SDK post. </summary>
        /// <param name="ikey"> The ikey of the target Application Insights component that displays metrics and documents sent by /QuickPulseService.svc/post. </param>
        /// <param name="apikey"> An alternative way to pass api key. Deprecated. Use AAD authentication instead. </param>
        /// <param name="xMsQpsConfigurationEtag"> An encoded string that indicates whether the collection configuration is changed. </param>
        /// <param name="xMsQpsTransmissionTime"> Timestamp when SDK transmits the metrics and documents to QuickPulse. A 8-byte long type of ticks. </param>
        /// <param name="monitoringDataPoints"> Data contract between SDK and QuickPulse. /QuickPulseService.svc/post uses this to publish metrics and documents to the backend QuickPulse server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ikey"/> is null. </exception>
        public ResponseWithHeaders<object, QuickPulseSDKClientAPIsPostHeaders> Post(string ikey, string apikey = null, string xMsQpsConfigurationEtag = null, int? xMsQpsTransmissionTime = null, IEnumerable<MonitoringDataPoint> monitoringDataPoints = null, CancellationToken cancellationToken = default)
        {
            if (ikey == null)
            {
                throw new ArgumentNullException(nameof(ikey));
            }

            using var message = CreatePostRequest(ikey, apikey, xMsQpsConfigurationEtag, xMsQpsTransmissionTime, monitoringDataPoints);
            _pipeline.Send(message, cancellationToken);
            var headers = new QuickPulseSDKClientAPIsPostHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionConfigurationInfo value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CollectionConfigurationInfo.DeserializeCollectionConfigurationInfo(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPostHeaders>(value, headers, message.Response);
                    }
                case 400:
                case 401:
                case 403:
                case 404:
                case 500:
                case 503:
                    {
                        ServiceError value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceError.DeserializeServiceError(document.RootElement);
                        return ResponseWithHeaders.FromValue<object, QuickPulseSDKClientAPIsPostHeaders>(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
