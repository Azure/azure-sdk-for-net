// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StreamAnalytics
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OutputsOperations.
    /// </summary>
    public static partial class OutputsOperationsExtensions
    {
            /// <summary>
            /// Creates an output or replaces an already existing output under an existing
            /// streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='output'>
            /// The definition of the output that will be used to create a new output or
            /// replace the existing one under the streaming job.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the output. Omit this value to always overwrite the current
            /// output. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new output to be created, but to prevent updating an
            /// existing output. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            public static Output CreateOrReplace(this IOutputsOperations operations, Output output, string resourceGroupName, string jobName, string outputName, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrReplaceAsync(output, resourceGroupName, jobName, outputName, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an output or replaces an already existing output under an existing
            /// streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='output'>
            /// The definition of the output that will be used to create a new output or
            /// replace the existing one under the streaming job.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the output. Omit this value to always overwrite the current
            /// output. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new output to be created, but to prevent updating an
            /// existing output. Other values will result in a 412 Pre-condition Failed
            /// response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Output> CreateOrReplaceAsync(this IOutputsOperations operations, Output output, string resourceGroupName, string jobName, string outputName, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrReplaceWithHttpMessagesAsync(output, resourceGroupName, jobName, outputName, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing output under an existing streaming job. This can be
            /// used to partially update (ie. update one or two properties) an output
            /// without affecting the rest the job or output definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='output'>
            /// An Output object. The properties specified here will overwrite the
            /// corresponding properties in the existing output (ie. Those properties will
            /// be updated). Any properties that are set to null here will mean that the
            /// corresponding property in the existing output will remain the same and not
            /// change as a result of this PATCH operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the output. Omit this value to always overwrite the current
            /// output. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            public static Output Update(this IOutputsOperations operations, Output output, string resourceGroupName, string jobName, string outputName, string ifMatch = default(string))
            {
                return operations.UpdateAsync(output, resourceGroupName, jobName, outputName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing output under an existing streaming job. This can be
            /// used to partially update (ie. update one or two properties) an output
            /// without affecting the rest the job or output definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='output'>
            /// An Output object. The properties specified here will overwrite the
            /// corresponding properties in the existing output (ie. Those properties will
            /// be updated). Any properties that are set to null here will mean that the
            /// corresponding property in the existing output will remain the same and not
            /// change as a result of this PATCH operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the output. Omit this value to always overwrite the current
            /// output. Specify the last-seen ETag value to prevent accidentally
            /// overwriting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Output> UpdateAsync(this IOutputsOperations operations, Output output, string resourceGroupName, string jobName, string outputName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(output, resourceGroupName, jobName, outputName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an output from the streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            public static void Delete(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName)
            {
                operations.DeleteAsync(resourceGroupName, jobName, outputName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an output from the streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, jobName, outputName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets details about the specified output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            public static Output Get(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName)
            {
                return operations.GetAsync(resourceGroupName, jobName, outputName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Output> GetAsync(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, jobName, outputName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the outputs under the specified streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='select'>
            /// The $select OData query parameter. This is a comma-separated list of
            /// structural properties to include in the response, or "*" to include all
            /// properties. By default, all properties are returned except diagnostics.
            /// Currently only accepts '*' as a valid value.
            /// </param>
            public static IPage<Output> ListByStreamingJob(this IOutputsOperations operations, string resourceGroupName, string jobName, string select = default(string))
            {
                return operations.ListByStreamingJobAsync(resourceGroupName, jobName, select).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the outputs under the specified streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='select'>
            /// The $select OData query parameter. This is a comma-separated list of
            /// structural properties to include in the response, or "*" to include all
            /// properties. By default, all properties are returned except diagnostics.
            /// Currently only accepts '*' as a valid value.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Output>> ListByStreamingJobAsync(this IOutputsOperations operations, string resourceGroupName, string jobName, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByStreamingJobWithHttpMessagesAsync(resourceGroupName, jobName, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tests whether an output’s datasource is reachable and usable by the Azure
            /// Stream Analytics service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='output'>
            /// If the output specified does not already exist, this parameter must contain
            /// the full output definition intended to be tested. If the output specified
            /// already exists, this parameter can be left null to test the existing output
            /// as is or if specified, the properties specified will overwrite the
            /// corresponding properties in the existing output (exactly like a PATCH
            /// operation) and the resulting output will be tested.
            /// </param>
            public static ResourceTestStatus Test(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName, Output output = default(Output))
            {
                return operations.TestAsync(resourceGroupName, jobName, outputName, output).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tests whether an output’s datasource is reachable and usable by the Azure
            /// Stream Analytics service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='output'>
            /// If the output specified does not already exist, this parameter must contain
            /// the full output definition intended to be tested. If the output specified
            /// already exists, this parameter can be left null to test the existing output
            /// as is or if specified, the properties specified will overwrite the
            /// corresponding properties in the existing output (exactly like a PATCH
            /// operation) and the resulting output will be tested.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceTestStatus> TestAsync(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName, Output output = default(Output), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestWithHttpMessagesAsync(resourceGroupName, jobName, outputName, output, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tests whether an output’s datasource is reachable and usable by the Azure
            /// Stream Analytics service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='output'>
            /// If the output specified does not already exist, this parameter must contain
            /// the full output definition intended to be tested. If the output specified
            /// already exists, this parameter can be left null to test the existing output
            /// as is or if specified, the properties specified will overwrite the
            /// corresponding properties in the existing output (exactly like a PATCH
            /// operation) and the resulting output will be tested.
            /// </param>
            public static ResourceTestStatus BeginTest(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName, Output output = default(Output))
            {
                return operations.BeginTestAsync(resourceGroupName, jobName, outputName, output).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tests whether an output’s datasource is reachable and usable by the Azure
            /// Stream Analytics service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='outputName'>
            /// The name of the output.
            /// </param>
            /// <param name='output'>
            /// If the output specified does not already exist, this parameter must contain
            /// the full output definition intended to be tested. If the output specified
            /// already exists, this parameter can be left null to test the existing output
            /// as is or if specified, the properties specified will overwrite the
            /// corresponding properties in the existing output (exactly like a PATCH
            /// operation) and the resulting output will be tested.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceTestStatus> BeginTestAsync(this IOutputsOperations operations, string resourceGroupName, string jobName, string outputName, Output output = default(Output), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestWithHttpMessagesAsync(resourceGroupName, jobName, outputName, output, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the outputs under the specified streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Output> ListByStreamingJobNext(this IOutputsOperations operations, string nextPageLink)
            {
                return operations.ListByStreamingJobNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the outputs under the specified streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Output>> ListByStreamingJobNextAsync(this IOutputsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByStreamingJobNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
