// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StreamAnalytics.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes how data from an input is serialized or how data is
    /// serialized when written to an output in JSON format.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Json")]
    [Rest.Serialization.JsonTransformation]
    public partial class JsonSerialization : Serialization
    {
        /// <summary>
        /// Initializes a new instance of the JsonSerialization class.
        /// </summary>
        public JsonSerialization()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonSerialization class.
        /// </summary>
        /// <param name="encoding">Specifies the encoding of the incoming data
        /// in the case of input and the encoding of outgoing data in the case
        /// of output. Required on PUT (CreateOrReplace) requests. Possible
        /// values include: 'UTF8'</param>
        /// <param name="format">This property only applies to JSON
        /// serialization of outputs only. It is not applicable to inputs. This
        /// property specifies the format of the JSON the output will be
        /// written in. The currently supported values are 'lineSeparated'
        /// indicating the output will be formatted by having each JSON object
        /// separated by a new line and 'array' indicating the output will be
        /// formatted as an array of JSON objects. Default value is
        /// 'lineSeparated' if left null. Possible values include:
        /// 'LineSeparated', 'Array'</param>
        public JsonSerialization(string encoding = default(string), string format = default(string))
        {
            Encoding = encoding;
            Format = format;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the encoding of the incoming data in the
        /// case of input and the encoding of outgoing data in the case of
        /// output. Required on PUT (CreateOrReplace) requests. Possible values
        /// include: 'UTF8'
        /// </summary>
        [JsonProperty(PropertyName = "properties.encoding")]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or sets this property only applies to JSON serialization of
        /// outputs only. It is not applicable to inputs. This property
        /// specifies the format of the JSON the output will be written in. The
        /// currently supported values are 'lineSeparated' indicating the
        /// output will be formatted by having each JSON object separated by a
        /// new line and 'array' indicating the output will be formatted as an
        /// array of JSON objects. Default value is 'lineSeparated' if left
        /// null. Possible values include: 'LineSeparated', 'Array'
        /// </summary>
        [JsonProperty(PropertyName = "properties.format")]
        public string Format { get; set; }

    }
}
