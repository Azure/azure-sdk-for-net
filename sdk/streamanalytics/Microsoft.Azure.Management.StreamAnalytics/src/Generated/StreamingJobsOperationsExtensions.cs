// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StreamAnalytics
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StreamingJobsOperations.
    /// </summary>
    public static partial class StreamingJobsOperationsExtensions
    {
            /// <summary>
            /// Creates a streaming job or replaces an already existing streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='streamingJob'>
            /// The definition of the streaming job that will be used to create a new
            /// streaming job or replace the existing one.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the streaming job. Omit this value to always overwrite the
            /// current record set. Specify the last-seen ETag value to prevent
            /// accidentally overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new streaming job to be created, but to prevent
            /// updating an existing record set. Other values will result in a 412
            /// Pre-condition Failed response.
            /// </param>
            public static StreamingJob CreateOrReplace(this IStreamingJobsOperations operations, StreamingJob streamingJob, string resourceGroupName, string jobName, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateOrReplaceAsync(streamingJob, resourceGroupName, jobName, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a streaming job or replaces an already existing streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='streamingJob'>
            /// The definition of the streaming job that will be used to create a new
            /// streaming job or replace the existing one.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the streaming job. Omit this value to always overwrite the
            /// current record set. Specify the last-seen ETag value to prevent
            /// accidentally overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new streaming job to be created, but to prevent
            /// updating an existing record set. Other values will result in a 412
            /// Pre-condition Failed response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingJob> CreateOrReplaceAsync(this IStreamingJobsOperations operations, StreamingJob streamingJob, string resourceGroupName, string jobName, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrReplaceWithHttpMessagesAsync(streamingJob, resourceGroupName, jobName, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing streaming job. This can be used to partially update
            /// (ie. update one or two properties) a streaming job without affecting the
            /// rest the job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='streamingJob'>
            /// A streaming job object. The properties specified here will overwrite the
            /// corresponding properties in the existing streaming job (ie. Those
            /// properties will be updated). Any properties that are set to null here will
            /// mean that the corresponding property in the existing input will remain the
            /// same and not change as a result of this PATCH operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the streaming job. Omit this value to always overwrite the
            /// current record set. Specify the last-seen ETag value to prevent
            /// accidentally overwriting concurrent changes.
            /// </param>
            public static StreamingJob Update(this IStreamingJobsOperations operations, StreamingJob streamingJob, string resourceGroupName, string jobName, string ifMatch = default(string))
            {
                return operations.UpdateAsync(streamingJob, resourceGroupName, jobName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing streaming job. This can be used to partially update
            /// (ie. update one or two properties) a streaming job without affecting the
            /// rest the job definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='streamingJob'>
            /// A streaming job object. The properties specified here will overwrite the
            /// corresponding properties in the existing streaming job (ie. Those
            /// properties will be updated). Any properties that are set to null here will
            /// mean that the corresponding property in the existing input will remain the
            /// same and not change as a result of this PATCH operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the streaming job. Omit this value to always overwrite the
            /// current record set. Specify the last-seen ETag value to prevent
            /// accidentally overwriting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingJob> UpdateAsync(this IStreamingJobsOperations operations, StreamingJob streamingJob, string resourceGroupName, string jobName, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(streamingJob, resourceGroupName, jobName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            public static void Delete(this IStreamingJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.DeleteAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets details about the specified streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='expand'>
            /// The $expand OData query parameter. This is a comma-separated list of
            /// additional streaming job properties to include in the response, beyond the
            /// default set returned when this parameter is absent. The default set is all
            /// streaming job properties other than 'inputs', 'transformation', 'outputs',
            /// and 'functions'.
            /// </param>
            public static StreamingJob Get(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, jobName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details about the specified streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='expand'>
            /// The $expand OData query parameter. This is a comma-separated list of
            /// additional streaming job properties to include in the response, beyond the
            /// default set returned when this parameter is absent. The default set is all
            /// streaming job properties other than 'inputs', 'transformation', 'outputs',
            /// and 'functions'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingJob> GetAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, jobName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the streaming jobs in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='expand'>
            /// The $expand OData query parameter. This is a comma-separated list of
            /// additional streaming job properties to include in the response, beyond the
            /// default set returned when this parameter is absent. The default set is all
            /// streaming job properties other than 'inputs', 'transformation', 'outputs',
            /// and 'functions'.
            /// </param>
            public static IPage<StreamingJob> ListByResourceGroup(this IStreamingJobsOperations operations, string resourceGroupName, string expand = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the streaming jobs in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='expand'>
            /// The $expand OData query parameter. This is a comma-separated list of
            /// additional streaming job properties to include in the response, beyond the
            /// default set returned when this parameter is absent. The default set is all
            /// streaming job properties other than 'inputs', 'transformation', 'outputs',
            /// and 'functions'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingJob>> ListByResourceGroupAsync(this IStreamingJobsOperations operations, string resourceGroupName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the streaming jobs in the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// The $expand OData query parameter. This is a comma-separated list of
            /// additional streaming job properties to include in the response, beyond the
            /// default set returned when this parameter is absent. The default set is all
            /// streaming job properties other than 'inputs', 'transformation', 'outputs',
            /// and 'functions'.
            /// </param>
            public static IPage<StreamingJob> List(this IStreamingJobsOperations operations, string expand = default(string))
            {
                return operations.ListAsync(expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the streaming jobs in the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// The $expand OData query parameter. This is a comma-separated list of
            /// additional streaming job properties to include in the response, beyond the
            /// default set returned when this parameter is absent. The default set is all
            /// streaming job properties other than 'inputs', 'transformation', 'outputs',
            /// and 'functions'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingJob>> ListAsync(this IStreamingJobsOperations operations, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts a streaming job. Once a job is started it will start processing
            /// input events and produce output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='startJobParameters'>
            /// Parameters applicable to a start streaming job operation.
            /// </param>
            public static void Start(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, StartStreamingJobParameters startJobParameters = default(StartStreamingJobParameters))
            {
                operations.StartAsync(resourceGroupName, jobName, startJobParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a streaming job. Once a job is started it will start processing
            /// input events and produce output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='startJobParameters'>
            /// Parameters applicable to a start streaming job operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, StartStreamingJobParameters startJobParameters = default(StartStreamingJobParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, jobName, startJobParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a running streaming job. This will cause a running streaming job to
            /// stop processing input events and producing output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            public static void Stop(this IStreamingJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.StopAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a running streaming job. This will cause a running streaming job to
            /// stop processing input events and producing output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a streaming job or replaces an already existing streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='streamingJob'>
            /// The definition of the streaming job that will be used to create a new
            /// streaming job or replace the existing one.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the streaming job. Omit this value to always overwrite the
            /// current record set. Specify the last-seen ETag value to prevent
            /// accidentally overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new streaming job to be created, but to prevent
            /// updating an existing record set. Other values will result in a 412
            /// Pre-condition Failed response.
            /// </param>
            public static StreamingJob BeginCreateOrReplace(this IStreamingJobsOperations operations, StreamingJob streamingJob, string resourceGroupName, string jobName, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.BeginCreateOrReplaceAsync(streamingJob, resourceGroupName, jobName, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a streaming job or replaces an already existing streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='streamingJob'>
            /// The definition of the streaming job that will be used to create a new
            /// streaming job or replace the existing one.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='ifMatch'>
            /// The ETag of the streaming job. Omit this value to always overwrite the
            /// current record set. Specify the last-seen ETag value to prevent
            /// accidentally overwriting concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new streaming job to be created, but to prevent
            /// updating an existing record set. Other values will result in a 412
            /// Pre-condition Failed response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StreamingJob> BeginCreateOrReplaceAsync(this IStreamingJobsOperations operations, StreamingJob streamingJob, string resourceGroupName, string jobName, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrReplaceWithHttpMessagesAsync(streamingJob, resourceGroupName, jobName, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            public static void BeginDelete(this IStreamingJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.BeginDeleteAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a streaming job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts a streaming job. Once a job is started it will start processing
            /// input events and produce output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='startJobParameters'>
            /// Parameters applicable to a start streaming job operation.
            /// </param>
            public static void BeginStart(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, StartStreamingJobParameters startJobParameters = default(StartStreamingJobParameters))
            {
                operations.BeginStartAsync(resourceGroupName, jobName, startJobParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts a streaming job. Once a job is started it will start processing
            /// input events and produce output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='startJobParameters'>
            /// Parameters applicable to a start streaming job operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, StartStreamingJobParameters startJobParameters = default(StartStreamingJobParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, jobName, startJobParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stops a running streaming job. This will cause a running streaming job to
            /// stop processing input events and producing output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            public static void BeginStop(this IStreamingJobsOperations operations, string resourceGroupName, string jobName)
            {
                operations.BeginStopAsync(resourceGroupName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops a running streaming job. This will cause a running streaming job to
            /// stop processing input events and producing output.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='jobName'>
            /// The name of the streaming job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStopAsync(this IStreamingJobsOperations operations, string resourceGroupName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, jobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all of the streaming jobs in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StreamingJob> ListByResourceGroupNext(this IStreamingJobsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the streaming jobs in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingJob>> ListByResourceGroupNextAsync(this IStreamingJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the streaming jobs in the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StreamingJob> ListNext(this IStreamingJobsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the streaming jobs in the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StreamingJob>> ListNextAsync(this IStreamingJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
