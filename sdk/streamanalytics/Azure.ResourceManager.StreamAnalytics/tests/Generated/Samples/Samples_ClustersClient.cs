// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace StreamAnalyticsManagementClient.Samples
{
    public partial class Samples_ClustersClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCluster_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Response response = client.GetCluster("<resourceGroupName>", "<clusterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCluster_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Response response = await client.GetClusterAsync("<resourceGroupName>", "<clusterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCluster_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Response response = client.GetCluster("<resourceGroupName>", "<clusterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCluster_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Response response = await client.GetClusterAsync("<resourceGroupName>", "<clusterName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClustersBySubscription_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetClustersBySubscription(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClustersBySubscription_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetClustersBySubscriptionAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClustersBySubscription_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetClustersBySubscription(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClustersBySubscription_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetClustersBySubscriptionAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClustersByResourceGroup_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetClustersByResourceGroup("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClustersByResourceGroup_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetClustersByResourceGroupAsync("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClustersByResourceGroup_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetClustersByResourceGroup("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClustersByResourceGroup_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetClustersByResourceGroupAsync("<resourceGroupName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
                Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("location").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetStreamingJobs_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetStreamingJobs("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetStreamingJobs_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetStreamingJobsAsync("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetStreamingJobs_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetStreamingJobs("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("streamingUnits").ToString());
                Console.WriteLine(result.GetProperty("jobState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetStreamingJobs_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetStreamingJobsAsync("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("streamingUnits").ToString());
                Console.WriteLine(result.GetProperty("jobState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                sku = new
                {
                    name = "Default",
                    capacity = 1234,
                },
                properties = new object(),
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content, matchConditions: null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                sku = new
                {
                    name = "Default",
                    capacity = 1234,
                },
                properties = new object(),
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content, matchConditions: null);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                sku = new
                {
                    name = "Default",
                    capacity = 1234,
                },
                properties = new object(),
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content, ifMatch: new ETag("<ifMatch>"));
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                sku = new
                {
                    name = "Default",
                    capacity = 1234,
                },
                properties = new object(),
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", content, ifMatch: new ETag("<ifMatch>"));
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("clusterId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAllocated").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("capacityAssigned").ToString());
            Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            ClustersClient client = new ClustersClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>");
        }
    }
}
