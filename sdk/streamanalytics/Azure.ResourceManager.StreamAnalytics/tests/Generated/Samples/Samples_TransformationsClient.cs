// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace StreamAnalyticsManagementClient.Samples
{
    public partial class Samples_TransformationsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrReplace("<resourceGroupName>", "<jobName>", "<transformationName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrReplaceAsync("<resourceGroupName>", "<jobName>", "<transformationName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    streamingUnits = 1234,
                    validStreamingUnits = new object[]
            {
1234
            },
                    query = "<query>",
                },
                name = "<name>",
            });
            Response response = client.CreateOrReplace("<resourceGroupName>", "<jobName>", "<transformationName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("streamingUnits").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("validStreamingUnits")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    streamingUnits = 1234,
                    validStreamingUnits = new object[]
            {
1234
            },
                    query = "<query>",
                },
                name = "<name>",
            });
            Response response = await client.CreateOrReplaceAsync("<resourceGroupName>", "<jobName>", "<transformationName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("streamingUnits").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("validStreamingUnits")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<resourceGroupName>", "<jobName>", "<transformationName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<resourceGroupName>", "<jobName>", "<transformationName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    streamingUnits = 1234,
                    validStreamingUnits = new object[]
            {
1234
            },
                    query = "<query>",
                },
                name = "<name>",
            });
            Response response = client.Update("<resourceGroupName>", "<jobName>", "<transformationName>", content, ifMatch: new ETag("<ifMatch>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("streamingUnits").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("validStreamingUnits")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    streamingUnits = 1234,
                    validStreamingUnits = new object[]
            {
1234
            },
                    query = "<query>",
                },
                name = "<name>",
            });
            Response response = await client.UpdateAsync("<resourceGroupName>", "<jobName>", "<transformationName>", content, ifMatch: new ETag("<ifMatch>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("streamingUnits").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("validStreamingUnits")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTransformation_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            Response response = client.GetTransformation("<resourceGroupName>", "<jobName>", "<transformationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTransformation_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            Response response = await client.GetTransformationAsync("<resourceGroupName>", "<jobName>", "<transformationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTransformation_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            Response response = client.GetTransformation("<resourceGroupName>", "<jobName>", "<transformationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("streamingUnits").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("validStreamingUnits")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTransformation_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            TransformationsClient client = new TransformationsClient("<SubscriptionId>", credential);

            Response response = await client.GetTransformationAsync("<resourceGroupName>", "<jobName>", "<transformationName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("streamingUnits").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("validStreamingUnits")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("query").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }
    }
}
