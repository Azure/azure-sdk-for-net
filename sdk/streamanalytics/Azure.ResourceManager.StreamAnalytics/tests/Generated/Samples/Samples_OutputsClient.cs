// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace StreamAnalyticsManagementClient.Samples
{
    public partial class Samples_OutputsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrReplace("<resourceGroupName>", "<jobName>", "<outputName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrReplaceAsync("<resourceGroupName>", "<jobName>", "<outputName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    datasource = new
                    {
                        properties = new
                        {
                            payloadUri = "<payloadUri>",
                        },
                        type = "Raw",
                    },
                    timeWindow = "<timeWindow>",
                    sizeWindow = 1234,
                    serialization = new
                    {
                        properties = new
                        {
                            deltaTablePath = "<deltaTablePath>",
                            partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                        },
                        type = "Delta",
                    },
                    watermarkSettings = new
                    {
                        watermarkMode = "None",
                        maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                    },
                    payloadColumnName = "<payloadColumnName>",
                    MessagingCatalogConfiguration = new
                    {
                        endpoint = "<endpoint>",
                        errorPolicy = "Drop",
                        messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                        schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                        format = "NotSet",
                        protocol = "NotSet",
                        schemaFormat = "<schemaFormat>",
                        authenticationMode = "Msi",
                        accessToken = "<accessToken>",
                        refreshToken = "<refreshToken>",
                    },
                    cloudEventProperties = new
                    {
                        key = new object(),
                    },
                },
                name = "<name>",
            });
            Response response = client.CreateOrReplace("<resourceGroupName>", "<jobName>", "<outputName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    datasource = new
                    {
                        properties = new
                        {
                            payloadUri = "<payloadUri>",
                        },
                        type = "Raw",
                    },
                    timeWindow = "<timeWindow>",
                    sizeWindow = 1234,
                    serialization = new
                    {
                        properties = new
                        {
                            deltaTablePath = "<deltaTablePath>",
                            partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                        },
                        type = "Delta",
                    },
                    watermarkSettings = new
                    {
                        watermarkMode = "None",
                        maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                    },
                    payloadColumnName = "<payloadColumnName>",
                    MessagingCatalogConfiguration = new
                    {
                        endpoint = "<endpoint>",
                        errorPolicy = "Drop",
                        messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                        schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                        format = "NotSet",
                        protocol = "NotSet",
                        schemaFormat = "<schemaFormat>",
                        authenticationMode = "Msi",
                        accessToken = "<accessToken>",
                        refreshToken = "<refreshToken>",
                    },
                    cloudEventProperties = new
                    {
                        key = new object(),
                    },
                },
                name = "<name>",
            });
            Response response = await client.CreateOrReplaceAsync("<resourceGroupName>", "<jobName>", "<outputName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<resourceGroupName>", "<jobName>", "<outputName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<resourceGroupName>", "<jobName>", "<outputName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    datasource = new
                    {
                        properties = new
                        {
                            payloadUri = "<payloadUri>",
                        },
                        type = "Raw",
                    },
                    timeWindow = "<timeWindow>",
                    sizeWindow = 1234,
                    serialization = new
                    {
                        properties = new
                        {
                            deltaTablePath = "<deltaTablePath>",
                            partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                        },
                        type = "Delta",
                    },
                    watermarkSettings = new
                    {
                        watermarkMode = "None",
                        maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                    },
                    payloadColumnName = "<payloadColumnName>",
                    MessagingCatalogConfiguration = new
                    {
                        endpoint = "<endpoint>",
                        errorPolicy = "Drop",
                        messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                        schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                        format = "NotSet",
                        protocol = "NotSet",
                        schemaFormat = "<schemaFormat>",
                        authenticationMode = "Msi",
                        accessToken = "<accessToken>",
                        refreshToken = "<refreshToken>",
                    },
                    cloudEventProperties = new
                    {
                        key = new object(),
                    },
                },
                name = "<name>",
            });
            Response response = client.Update("<resourceGroupName>", "<jobName>", "<outputName>", content, ifMatch: new ETag("<ifMatch>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    datasource = new
                    {
                        properties = new
                        {
                            payloadUri = "<payloadUri>",
                        },
                        type = "Raw",
                    },
                    timeWindow = "<timeWindow>",
                    sizeWindow = 1234,
                    serialization = new
                    {
                        properties = new
                        {
                            deltaTablePath = "<deltaTablePath>",
                            partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                        },
                        type = "Delta",
                    },
                    watermarkSettings = new
                    {
                        watermarkMode = "None",
                        maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                    },
                    payloadColumnName = "<payloadColumnName>",
                    MessagingCatalogConfiguration = new
                    {
                        endpoint = "<endpoint>",
                        errorPolicy = "Drop",
                        messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                        schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                        format = "NotSet",
                        protocol = "NotSet",
                        schemaFormat = "<schemaFormat>",
                        authenticationMode = "Msi",
                        accessToken = "<accessToken>",
                        refreshToken = "<refreshToken>",
                    },
                    cloudEventProperties = new
                    {
                        key = new object(),
                    },
                },
                name = "<name>",
            });
            Response response = await client.UpdateAsync("<resourceGroupName>", "<jobName>", "<outputName>", content, ifMatch: new ETag("<ifMatch>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<jobName>", "<outputName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<jobName>", "<outputName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<jobName>", "<outputName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<jobName>", "<outputName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutput_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = client.GetOutput("<resourceGroupName>", "<jobName>", "<outputName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutput_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = await client.GetOutputAsync("<resourceGroupName>", "<jobName>", "<outputName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutput_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = client.GetOutput("<resourceGroupName>", "<jobName>", "<outputName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutput_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            Response response = await client.GetOutputAsync("<resourceGroupName>", "<jobName>", "<outputName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputsByStreamingJob_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetOutputsByStreamingJob("<resourceGroupName>", "<jobName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputsByStreamingJob_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetOutputsByStreamingJobAsync("<resourceGroupName>", "<jobName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputsByStreamingJob_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetOutputsByStreamingJob("<resourceGroupName>", "<jobName>", "<select>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputsByStreamingJob_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetOutputsByStreamingJobAsync("<resourceGroupName>", "<jobName>", "<select>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("datasource").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("timeWindow").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("sizeWindow").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("serialization").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("since").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("diagnostics").GetProperty("conditions")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastOutputEventTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastOutputEventTimestamps")[0].GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("watermarkMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("watermarkSettings").GetProperty("maxWatermarkDifferenceAcrossPartitions").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("payloadColumnName").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("endpoint").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("errorPolicy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("messageGroups")[0].GetProperty("messages")[0].GetProperty("schemaVersion").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaGroups")[0].GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("format").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("schemaFormat").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("authenticationMode").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("accessToken").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("MessagingCatalogConfiguration").GetProperty("refreshToken").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("cloudEventProperties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = null;
            Operation<BinaryData> operation = client.Test(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<outputName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = null;
            Operation<BinaryData> operation = await client.TestAsync(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<outputName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    datasource = new
                    {
                        properties = new
                        {
                            payloadUri = "<payloadUri>",
                        },
                        type = "Raw",
                    },
                    timeWindow = "<timeWindow>",
                    sizeWindow = 1234,
                    serialization = new
                    {
                        properties = new
                        {
                            deltaTablePath = "<deltaTablePath>",
                            partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                        },
                        type = "Delta",
                    },
                    watermarkSettings = new
                    {
                        watermarkMode = "None",
                        maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                    },
                    payloadColumnName = "<payloadColumnName>",
                    MessagingCatalogConfiguration = new
                    {
                        endpoint = "<endpoint>",
                        errorPolicy = "Drop",
                        messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                        schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                        format = "NotSet",
                        protocol = "NotSet",
                        schemaFormat = "<schemaFormat>",
                        authenticationMode = "Msi",
                        accessToken = "<accessToken>",
                        refreshToken = "<refreshToken>",
                    },
                    cloudEventProperties = new
                    {
                        key = new object(),
                    },
                },
                name = "<name>",
            });
            Operation<BinaryData> operation = client.Test(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<outputName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            OutputsClient client = new OutputsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    datasource = new
                    {
                        properties = new
                        {
                            payloadUri = "<payloadUri>",
                        },
                        type = "Raw",
                    },
                    timeWindow = "<timeWindow>",
                    sizeWindow = 1234,
                    serialization = new
                    {
                        properties = new
                        {
                            deltaTablePath = "<deltaTablePath>",
                            partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                        },
                        type = "Delta",
                    },
                    watermarkSettings = new
                    {
                        watermarkMode = "None",
                        maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                    },
                    payloadColumnName = "<payloadColumnName>",
                    MessagingCatalogConfiguration = new
                    {
                        endpoint = "<endpoint>",
                        errorPolicy = "Drop",
                        messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                        schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                        format = "NotSet",
                        protocol = "NotSet",
                        schemaFormat = "<schemaFormat>",
                        authenticationMode = "Msi",
                        accessToken = "<accessToken>",
                        refreshToken = "<refreshToken>",
                    },
                    cloudEventProperties = new
                    {
                        key = new object(),
                    },
                },
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.TestAsync(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<outputName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }
    }
}
