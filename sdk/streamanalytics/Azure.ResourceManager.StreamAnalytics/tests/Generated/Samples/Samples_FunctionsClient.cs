// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace StreamAnalyticsManagementClient.Samples
{
    public partial class Samples_FunctionsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrReplace("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrReplaceAsync("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    type = "Scalar",
                    properties = new
                    {
                        inputs = new object[]
            {
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
            },
                        output = new
                        {
                            dataType = "<dataType>",
                        },
                        binding = new
                        {
                            properties = new
                            {
                                endpoint = "<endpoint>",
                                apiKey = "<apiKey>",
                                inputs = new
                                {
                                    name = "<name>",
                                    columnNames = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
            },
                                },
                                outputs = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
}
            },
                                batchSize = 1234,
                            },
                            type = "Microsoft.MachineLearning/WebService",
                        },
                    },
                },
                name = "<name>",
            });
            Response response = client.CreateOrReplace("<resourceGroupName>", "<jobName>", "<functionName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    type = "Scalar",
                    properties = new
                    {
                        inputs = new object[]
            {
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
            },
                        output = new
                        {
                            dataType = "<dataType>",
                        },
                        binding = new
                        {
                            properties = new
                            {
                                endpoint = "<endpoint>",
                                apiKey = "<apiKey>",
                                inputs = new
                                {
                                    name = "<name>",
                                    columnNames = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
            },
                                },
                                outputs = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
}
            },
                                batchSize = 1234,
                            },
                            type = "Microsoft.MachineLearning/WebService",
                        },
                    },
                },
                name = "<name>",
            });
            Response response = await client.CreateOrReplaceAsync("<resourceGroupName>", "<jobName>", "<functionName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    type = "Scalar",
                    properties = new
                    {
                        inputs = new object[]
            {
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
            },
                        output = new
                        {
                            dataType = "<dataType>",
                        },
                        binding = new
                        {
                            properties = new
                            {
                                endpoint = "<endpoint>",
                                apiKey = "<apiKey>",
                                inputs = new
                                {
                                    name = "<name>",
                                    columnNames = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
            },
                                },
                                outputs = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
}
            },
                                batchSize = 1234,
                            },
                            type = "Microsoft.MachineLearning/WebService",
                        },
                    },
                },
                name = "<name>",
            });
            Response response = client.Update("<resourceGroupName>", "<jobName>", "<functionName>", content, ifMatch: new ETag("<ifMatch>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    type = "Scalar",
                    properties = new
                    {
                        inputs = new object[]
            {
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
            },
                        output = new
                        {
                            dataType = "<dataType>",
                        },
                        binding = new
                        {
                            properties = new
                            {
                                endpoint = "<endpoint>",
                                apiKey = "<apiKey>",
                                inputs = new
                                {
                                    name = "<name>",
                                    columnNames = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
            },
                                },
                                outputs = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
}
            },
                                batchSize = 1234,
                            },
                            type = "Microsoft.MachineLearning/WebService",
                        },
                    },
                },
                name = "<name>",
            });
            Response response = await client.UpdateAsync("<resourceGroupName>", "<jobName>", "<functionName>", content, ifMatch: new ETag("<ifMatch>"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<jobName>", "<functionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<jobName>", "<functionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = client.Delete("<resourceGroupName>", "<jobName>", "<functionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = await client.DeleteAsync("<resourceGroupName>", "<jobName>", "<functionName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFunction_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = client.GetFunction("<resourceGroupName>", "<jobName>", "<functionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFunction_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = await client.GetFunctionAsync("<resourceGroupName>", "<jobName>", "<functionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFunction_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = client.GetFunction("<resourceGroupName>", "<jobName>", "<functionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFunction_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            Response response = await client.GetFunctionAsync("<resourceGroupName>", "<jobName>", "<functionName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveDefaultDefinition_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = null;
            Response response = client.RetrieveDefaultDefinition("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveDefaultDefinition_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = null;
            Response response = await client.RetrieveDefaultDefinitionAsync("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveDefaultDefinition_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                bindingRetrievalProperties = new
                {
                    executeEndpoint = "<executeEndpoint>",
                    udfType = "Scalar",
                },
                bindingType = "Microsoft.MachineLearning/WebService",
            });
            Response response = client.RetrieveDefaultDefinition("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveDefaultDefinition_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                bindingRetrievalProperties = new
                {
                    executeEndpoint = "<executeEndpoint>",
                    udfType = "Scalar",
                },
                bindingType = "Microsoft.MachineLearning/WebService",
            });
            Response response = await client.RetrieveDefaultDefinitionAsync("<resourceGroupName>", "<jobName>", "<functionName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFunctionsByStreamingJob_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetFunctionsByStreamingJob("<resourceGroupName>", "<jobName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFunctionsByStreamingJob_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetFunctionsByStreamingJobAsync("<resourceGroupName>", "<jobName>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFunctionsByStreamingJob_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetFunctionsByStreamingJob("<resourceGroupName>", "<jobName>", "<select>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFunctionsByStreamingJob_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetFunctionsByStreamingJobAsync("<resourceGroupName>", "<jobName>", "<select>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("inputs")[0].GetProperty("isConfigurationParameter").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("output").GetProperty("dataType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("properties").GetProperty("binding").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = null;
            Operation<BinaryData> operation = client.Test(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<functionName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = null;
            Operation<BinaryData> operation = await client.TestAsync(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<functionName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Test_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    type = "Scalar",
                    properties = new
                    {
                        inputs = new object[]
            {
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
            },
                        output = new
                        {
                            dataType = "<dataType>",
                        },
                        binding = new
                        {
                            properties = new
                            {
                                endpoint = "<endpoint>",
                                apiKey = "<apiKey>",
                                inputs = new
                                {
                                    name = "<name>",
                                    columnNames = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
            },
                                },
                                outputs = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
}
            },
                                batchSize = 1234,
                            },
                            type = "Microsoft.MachineLearning/WebService",
                        },
                    },
                },
                name = "<name>",
            });
            Operation<BinaryData> operation = client.Test(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<functionName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Test_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            FunctionsClient client = new FunctionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    type = "Scalar",
                    properties = new
                    {
                        inputs = new object[]
            {
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
            },
                        output = new
                        {
                            dataType = "<dataType>",
                        },
                        binding = new
                        {
                            properties = new
                            {
                                endpoint = "<endpoint>",
                                apiKey = "<apiKey>",
                                inputs = new
                                {
                                    name = "<name>",
                                    columnNames = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
            },
                                },
                                outputs = new object[]
            {
new
{
name = "<name>",
dataType = "<dataType>",
}
            },
                                batchSize = 1234,
                            },
                            type = "Microsoft.MachineLearning/WebService",
                        },
                    },
                },
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.TestAsync(WaitUntil.Completed, "<resourceGroupName>", "<jobName>", "<functionName>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        }
    }
}
