// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace StreamAnalyticsManagementClient.Samples
{
    public partial class Samples_SubscriptionsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQuotas_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            Response response = client.GetQuotas("<location>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQuotas_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            Response response = await client.GetQuotasAsync("<location>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQuotas_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            Response response = client.GetQuotas("<location>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("maxCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("currentCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQuotas_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            Response response = await client.GetQuotasAsync("<location>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("maxCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("properties").GetProperty("currentCount").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompileQuery_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                query = "<query>",
                jobType = "Cloud",
            });
            Response response = client.CompileQuery("<location>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompileQuery_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                query = "<query>",
                jobType = "Cloud",
            });
            Response response = await client.CompileQueryAsync("<location>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CompileQuery_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                query = "<query>",
                inputs = new object[]
            {
new
{
name = "<name>",
type = "<type>",
}
            },
                functions = new object[]
            {
new
{
name = "<name>",
type = "<type>",
bindingType = "<bindingType>",
inputs = new object[]
{
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
},
output = new
{
dataType = "<dataType>",
},
}
            },
                jobType = "Cloud",
                compatibilityLevel = "1.0",
            });
            Response response = client.CompileQuery("<location>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("startLine").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("startColumn").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("endLine").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("endColumn").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("isGlobal").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].ToString());
            Console.WriteLine(result.GetProperty("functions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CompileQuery_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                query = "<query>",
                inputs = new object[]
            {
new
{
name = "<name>",
type = "<type>",
}
            },
                functions = new object[]
            {
new
{
name = "<name>",
type = "<type>",
bindingType = "<bindingType>",
inputs = new object[]
{
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
},
output = new
{
dataType = "<dataType>",
},
}
            },
                jobType = "Cloud",
                compatibilityLevel = "1.0",
            });
            Response response = await client.CompileQueryAsync("<location>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("startLine").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("startColumn").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("endLine").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("endColumn").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("isGlobal").ToString());
            Console.WriteLine(result.GetProperty("warnings")[0].ToString());
            Console.WriteLine(result.GetProperty("inputs")[0].ToString());
            Console.WriteLine(result.GetProperty("outputs")[0].ToString());
            Console.WriteLine(result.GetProperty("functions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestQuery_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                streamingJob = new object(),
            });
            Operation<BinaryData> operation = client.TestQuery(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestQuery_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                streamingJob = new object(),
            });
            Operation<BinaryData> operation = await client.TestQueryAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestQuery_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                diagnostics = new
                {
                    writeUri = "<writeUri>",
                    path = "<path>",
                },
                streamingJob = new
                {
                    sku = new
                    {
                        name = "Standard",
                        capacity = 1234,
                    },
                    properties = new
                    {
                        jobType = "Cloud",
                        outputStartMode = "JobStartTime",
                        outputStartTime = "2022-05-10T18:57:31.2311892Z",
                        eventsOutOfOrderPolicy = "Adjust",
                        outputErrorPolicy = "Stop",
                        eventsOutOfOrderMaxDelayInSeconds = 1234,
                        eventsLateArrivalMaxDelayInSeconds = 1234,
                        dataLocale = "<dataLocale>",
                        compatibilityLevel = "1.0",
                        inputs = new object[]
            {
new
{
properties = new
{
datasource = new
{
properties = new
{
sourcePartitionCount = 1234,
storageAccounts = new object[]
{
new
{
accountName = "<accountName>",
accountKey = "<accountKey>",
authenticationMode = "Msi",
}
},
container = "<container>",
pathPattern = "<pathPattern>",
dateFormat = "<dateFormat>",
timeFormat = "<timeFormat>",
authenticationMode = "Msi",
},
type = "Microsoft.Storage/Blob",
},
type = "Stream",
serialization = new
{
properties = new
{
deltaTablePath = "<deltaTablePath>",
partitionColumns = new object[]
{
"<partitionColumns>"
},
},
type = "Delta",
},
compression = new
{
type = "None",
},
partitionKey = "<partitionKey>",
watermarkSettings = new
{
watermarkMode = "None",
},
messagingCatalogConfiguration = new
{
endpoint = "<endpoint>",
errorPolicy = "Drop",
messageGroups = new object[]
{
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
},
schemaGroups = new object[]
{
new
{
id = "<id>",
}
},
format = "NotSet",
protocol = "NotSet",
schemaFormat = "<schemaFormat>",
authenticationMode = "Msi",
accessToken = "<accessToken>",
refreshToken = "<refreshToken>",
},
},
name = "<name>",
}
            },
                        transformation = new
                        {
                            properties = new
                            {
                                streamingUnits = 1234,
                                validStreamingUnits = new object[]
            {
1234
            },
                                query = "<query>",
                            },
                            name = "<name>",
                        },
                        outputs = new object[]
            {
new
{
properties = new
{
datasource = new
{
properties = new
{
payloadUri = "<payloadUri>",
},
type = "Raw",
},
timeWindow = "<timeWindow>",
sizeWindow = 1234,
watermarkSettings = new
{
watermarkMode = "None",
maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
},
payloadColumnName = "<payloadColumnName>",
cloudEventProperties = new
{
key = new object(),
},
},
name = "<name>",
}
            },
                        functions = new object[]
            {
new
{
properties = new
{
type = "Scalar",
properties = new
{
inputs = new object[]
{
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
},
output = new
{
dataType = "<dataType>",
},
binding = new
{
properties = new
{
endpoint = "<endpoint>",
apiKey = "<apiKey>",
inputs = new
{
name = "<name>",
columnNames = new object[]
{
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
},
},
outputs = new object[]
{
new
{
name = "<name>",
dataType = "<dataType>",
}
},
batchSize = 1234,
},
type = "Microsoft.MachineLearning/WebService",
},
},
},
name = "<name>",
}
            },
                        jobStorageAccount = new
                        {
                            accountName = "<accountName>",
                            accountKey = "<accountKey>",
                            authenticationMode = "Msi",
                        },
                        contentStoragePolicy = "SystemAccount",
                        externals = new
                        {
                            container = "<container>",
                            path = "<path>",
                            refreshConfiguration = new
                            {
                                pathPattern = "<pathPattern>",
                                dateFormat = "<dateFormat>",
                                timeFormat = "<timeFormat>",
                                refreshInterval = "<refreshInterval>",
                                refreshType = "Blocking",
                            },
                        },
                        cluster = new
                        {
                            id = "<id>",
                        },
                        subnetResourceId = "<subnetResourceId>",
                    },
                    identity = new
                    {
                        type = "<type>",
                        userAssignedIdentities = new
                        {
                            key = new object(),
                        },
                    },
                    tags = new
                    {
                        key = "<tags>",
                    },
                    location = "<location>",
                },
            });
            Operation<BinaryData> operation = client.TestQuery(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("outputUri").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestQuery_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                diagnostics = new
                {
                    writeUri = "<writeUri>",
                    path = "<path>",
                },
                streamingJob = new
                {
                    sku = new
                    {
                        name = "Standard",
                        capacity = 1234,
                    },
                    properties = new
                    {
                        jobType = "Cloud",
                        outputStartMode = "JobStartTime",
                        outputStartTime = "2022-05-10T18:57:31.2311892Z",
                        eventsOutOfOrderPolicy = "Adjust",
                        outputErrorPolicy = "Stop",
                        eventsOutOfOrderMaxDelayInSeconds = 1234,
                        eventsLateArrivalMaxDelayInSeconds = 1234,
                        dataLocale = "<dataLocale>",
                        compatibilityLevel = "1.0",
                        inputs = new object[]
            {
new
{
properties = new
{
datasource = new
{
properties = new
{
sourcePartitionCount = 1234,
storageAccounts = new object[]
{
new
{
accountName = "<accountName>",
accountKey = "<accountKey>",
authenticationMode = "Msi",
}
},
container = "<container>",
pathPattern = "<pathPattern>",
dateFormat = "<dateFormat>",
timeFormat = "<timeFormat>",
authenticationMode = "Msi",
},
type = "Microsoft.Storage/Blob",
},
type = "Stream",
serialization = new
{
properties = new
{
deltaTablePath = "<deltaTablePath>",
partitionColumns = new object[]
{
"<partitionColumns>"
},
},
type = "Delta",
},
compression = new
{
type = "None",
},
partitionKey = "<partitionKey>",
watermarkSettings = new
{
watermarkMode = "None",
},
messagingCatalogConfiguration = new
{
endpoint = "<endpoint>",
errorPolicy = "Drop",
messageGroups = new object[]
{
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
},
schemaGroups = new object[]
{
new
{
id = "<id>",
}
},
format = "NotSet",
protocol = "NotSet",
schemaFormat = "<schemaFormat>",
authenticationMode = "Msi",
accessToken = "<accessToken>",
refreshToken = "<refreshToken>",
},
},
name = "<name>",
}
            },
                        transformation = new
                        {
                            properties = new
                            {
                                streamingUnits = 1234,
                                validStreamingUnits = new object[]
            {
1234
            },
                                query = "<query>",
                            },
                            name = "<name>",
                        },
                        outputs = new object[]
            {
new
{
properties = new
{
datasource = new
{
properties = new
{
payloadUri = "<payloadUri>",
},
type = "Raw",
},
timeWindow = "<timeWindow>",
sizeWindow = 1234,
watermarkSettings = new
{
watermarkMode = "None",
maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
},
payloadColumnName = "<payloadColumnName>",
cloudEventProperties = new
{
key = new object(),
},
},
name = "<name>",
}
            },
                        functions = new object[]
            {
new
{
properties = new
{
type = "Scalar",
properties = new
{
inputs = new object[]
{
new
{
dataType = "<dataType>",
isConfigurationParameter = true,
}
},
output = new
{
dataType = "<dataType>",
},
binding = new
{
properties = new
{
endpoint = "<endpoint>",
apiKey = "<apiKey>",
inputs = new
{
name = "<name>",
columnNames = new object[]
{
new
{
name = "<name>",
dataType = "<dataType>",
mapTo = 1234,
}
},
},
outputs = new object[]
{
new
{
name = "<name>",
dataType = "<dataType>",
}
},
batchSize = 1234,
},
type = "Microsoft.MachineLearning/WebService",
},
},
},
name = "<name>",
}
            },
                        jobStorageAccount = new
                        {
                            accountName = "<accountName>",
                            accountKey = "<accountKey>",
                            authenticationMode = "Msi",
                        },
                        contentStoragePolicy = "SystemAccount",
                        externals = new
                        {
                            container = "<container>",
                            path = "<path>",
                            refreshConfiguration = new
                            {
                                pathPattern = "<pathPattern>",
                                dateFormat = "<dateFormat>",
                                timeFormat = "<timeFormat>",
                                refreshInterval = "<refreshInterval>",
                                refreshType = "Blocking",
                            },
                        },
                        cluster = new
                        {
                            id = "<id>",
                        },
                        subnetResourceId = "<subnetResourceId>",
                    },
                    identity = new
                    {
                        type = "<type>",
                        userAssignedIdentities = new
                        {
                            key = new object(),
                        },
                    },
                    tags = new
                    {
                        key = "<tags>",
                    },
                    location = "<location>",
                },
            });
            Operation<BinaryData> operation = await client.TestQueryAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("outputUri").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SampleInput_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = client.SampleInput(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SampleInput_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.SampleInputAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SampleInput_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                input = new
                {
                    properties = new
                    {
                        datasource = new
                        {
                            properties = new
                            {
                                sourcePartitionCount = 1234,
                                storageAccounts = new object[]
            {
new
{
accountName = "<accountName>",
accountKey = "<accountKey>",
authenticationMode = "Msi",
}
            },
                                container = "<container>",
                                pathPattern = "<pathPattern>",
                                dateFormat = "<dateFormat>",
                                timeFormat = "<timeFormat>",
                                authenticationMode = "Msi",
                            },
                            type = "Microsoft.Storage/Blob",
                        },
                        type = "Stream",
                        serialization = new
                        {
                            properties = new
                            {
                                deltaTablePath = "<deltaTablePath>",
                                partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                            },
                            type = "Delta",
                        },
                        compression = new
                        {
                            type = "None",
                        },
                        partitionKey = "<partitionKey>",
                        watermarkSettings = new
                        {
                            watermarkMode = "None",
                        },
                        messagingCatalogConfiguration = new
                        {
                            endpoint = "<endpoint>",
                            errorPolicy = "Drop",
                            messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                            schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                            format = "NotSet",
                            protocol = "NotSet",
                            schemaFormat = "<schemaFormat>",
                            authenticationMode = "Msi",
                            accessToken = "<accessToken>",
                            refreshToken = "<refreshToken>",
                        },
                    },
                    name = "<name>",
                },
                compatibilityLevel = "<compatibilityLevel>",
                eventsUri = "<eventsUri>",
                dataLocale = "<dataLocale>",
            });
            Operation<BinaryData> operation = client.SampleInput(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("diagnostics")[0].ToString());
            Console.WriteLine(result.GetProperty("eventsDownloadUrl").ToString());
            Console.WriteLine(result.GetProperty("lastArrivalTime").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SampleInput_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                input = new
                {
                    properties = new
                    {
                        datasource = new
                        {
                            properties = new
                            {
                                sourcePartitionCount = 1234,
                                storageAccounts = new object[]
            {
new
{
accountName = "<accountName>",
accountKey = "<accountKey>",
authenticationMode = "Msi",
}
            },
                                container = "<container>",
                                pathPattern = "<pathPattern>",
                                dateFormat = "<dateFormat>",
                                timeFormat = "<timeFormat>",
                                authenticationMode = "Msi",
                            },
                            type = "Microsoft.Storage/Blob",
                        },
                        type = "Stream",
                        serialization = new
                        {
                            properties = new
                            {
                                deltaTablePath = "<deltaTablePath>",
                                partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                            },
                            type = "Delta",
                        },
                        compression = new
                        {
                            type = "None",
                        },
                        partitionKey = "<partitionKey>",
                        watermarkSettings = new
                        {
                            watermarkMode = "None",
                        },
                        messagingCatalogConfiguration = new
                        {
                            endpoint = "<endpoint>",
                            errorPolicy = "Drop",
                            messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                            schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                            format = "NotSet",
                            protocol = "NotSet",
                            schemaFormat = "<schemaFormat>",
                            authenticationMode = "Msi",
                            accessToken = "<accessToken>",
                            refreshToken = "<refreshToken>",
                        },
                    },
                    name = "<name>",
                },
                compatibilityLevel = "<compatibilityLevel>",
                eventsUri = "<eventsUri>",
                dataLocale = "<dataLocale>",
            });
            Operation<BinaryData> operation = await client.SampleInputAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("diagnostics")[0].ToString());
            Console.WriteLine(result.GetProperty("eventsDownloadUrl").ToString());
            Console.WriteLine(result.GetProperty("lastArrivalTime").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestInput_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                input = new object(),
            });
            Operation<BinaryData> operation = client.TestInput(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestInput_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                input = new object(),
            });
            Operation<BinaryData> operation = await client.TestInputAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestInput_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                input = new
                {
                    properties = new
                    {
                        datasource = new
                        {
                            properties = new
                            {
                                sourcePartitionCount = 1234,
                                storageAccounts = new object[]
            {
new
{
accountName = "<accountName>",
accountKey = "<accountKey>",
authenticationMode = "Msi",
}
            },
                                container = "<container>",
                                pathPattern = "<pathPattern>",
                                dateFormat = "<dateFormat>",
                                timeFormat = "<timeFormat>",
                                authenticationMode = "Msi",
                            },
                            type = "Microsoft.Storage/Blob",
                        },
                        type = "Stream",
                        serialization = new
                        {
                            properties = new
                            {
                                deltaTablePath = "<deltaTablePath>",
                                partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                            },
                            type = "Delta",
                        },
                        compression = new
                        {
                            type = "None",
                        },
                        partitionKey = "<partitionKey>",
                        watermarkSettings = new
                        {
                            watermarkMode = "None",
                        },
                        messagingCatalogConfiguration = new
                        {
                            endpoint = "<endpoint>",
                            errorPolicy = "Drop",
                            messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                            schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                            format = "NotSet",
                            protocol = "NotSet",
                            schemaFormat = "<schemaFormat>",
                            authenticationMode = "Msi",
                            accessToken = "<accessToken>",
                            refreshToken = "<refreshToken>",
                        },
                    },
                    name = "<name>",
                },
            });
            Operation<BinaryData> operation = client.TestInput(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestInput_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                input = new
                {
                    properties = new
                    {
                        datasource = new
                        {
                            properties = new
                            {
                                sourcePartitionCount = 1234,
                                storageAccounts = new object[]
            {
new
{
accountName = "<accountName>",
accountKey = "<accountKey>",
authenticationMode = "Msi",
}
            },
                                container = "<container>",
                                pathPattern = "<pathPattern>",
                                dateFormat = "<dateFormat>",
                                timeFormat = "<timeFormat>",
                                authenticationMode = "Msi",
                            },
                            type = "Microsoft.Storage/Blob",
                        },
                        type = "Stream",
                        serialization = new
                        {
                            properties = new
                            {
                                deltaTablePath = "<deltaTablePath>",
                                partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                            },
                            type = "Delta",
                        },
                        compression = new
                        {
                            type = "None",
                        },
                        partitionKey = "<partitionKey>",
                        watermarkSettings = new
                        {
                            watermarkMode = "None",
                        },
                        messagingCatalogConfiguration = new
                        {
                            endpoint = "<endpoint>",
                            errorPolicy = "Drop",
                            messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                            schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                            format = "NotSet",
                            protocol = "NotSet",
                            schemaFormat = "<schemaFormat>",
                            authenticationMode = "Msi",
                            accessToken = "<accessToken>",
                            refreshToken = "<refreshToken>",
                        },
                    },
                    name = "<name>",
                },
            });
            Operation<BinaryData> operation = await client.TestInputAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestOutput_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                output = new object(),
            });
            Operation<BinaryData> operation = client.TestOutput(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestOutput_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                output = new object(),
            });
            Operation<BinaryData> operation = await client.TestOutputAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TestOutput_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                output = new
                {
                    properties = new
                    {
                        datasource = new
                        {
                            properties = new
                            {
                                payloadUri = "<payloadUri>",
                            },
                            type = "Raw",
                        },
                        timeWindow = "<timeWindow>",
                        sizeWindow = 1234,
                        serialization = new
                        {
                            properties = new
                            {
                                deltaTablePath = "<deltaTablePath>",
                                partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                            },
                            type = "Delta",
                        },
                        watermarkSettings = new
                        {
                            watermarkMode = "None",
                            maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                        },
                        payloadColumnName = "<payloadColumnName>",
                        MessagingCatalogConfiguration = new
                        {
                            endpoint = "<endpoint>",
                            errorPolicy = "Drop",
                            messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                            schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                            format = "NotSet",
                            protocol = "NotSet",
                            schemaFormat = "<schemaFormat>",
                            authenticationMode = "Msi",
                            accessToken = "<accessToken>",
                            refreshToken = "<refreshToken>",
                        },
                        cloudEventProperties = new
                        {
                            key = new object(),
                        },
                    },
                    name = "<name>",
                },
            });
            Operation<BinaryData> operation = client.TestOutput(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TestOutput_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            SubscriptionsClient client = new SubscriptionsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                output = new
                {
                    properties = new
                    {
                        datasource = new
                        {
                            properties = new
                            {
                                payloadUri = "<payloadUri>",
                            },
                            type = "Raw",
                        },
                        timeWindow = "<timeWindow>",
                        sizeWindow = 1234,
                        serialization = new
                        {
                            properties = new
                            {
                                deltaTablePath = "<deltaTablePath>",
                                partitionColumns = new object[]
            {
"<partitionColumns>"
            },
                            },
                            type = "Delta",
                        },
                        watermarkSettings = new
                        {
                            watermarkMode = "None",
                            maxWatermarkDifferenceAcrossPartitions = "<maxWatermarkDifferenceAcrossPartitions>",
                        },
                        payloadColumnName = "<payloadColumnName>",
                        MessagingCatalogConfiguration = new
                        {
                            endpoint = "<endpoint>",
                            errorPolicy = "Drop",
                            messageGroups = new object[]
            {
new
{
id = "<id>",
messages = new object[]
{
new
{
id = "<id>",
schemaVersion = "<schemaVersion>",
}
},
}
            },
                            schemaGroups = new object[]
            {
new
{
id = "<id>",
}
            },
                            format = "NotSet",
                            protocol = "NotSet",
                            schemaFormat = "<schemaFormat>",
                            authenticationMode = "Msi",
                            accessToken = "<accessToken>",
                            refreshToken = "<refreshToken>",
                        },
                        cloudEventProperties = new
                        {
                            key = new object(),
                        },
                    },
                    name = "<name>",
                },
            });
            Operation<BinaryData> operation = await client.TestOutputAsync(WaitUntil.Completed, "<location>", content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("details")[0].GetProperty("message").ToString());
        }
    }
}
