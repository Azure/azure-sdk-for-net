// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace StreamAnalyticsManagementClient.Samples
{
    public partial class Samples_PrivateEndpointsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateOrUpdate("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    manualPrivateLinkServiceConnections = new object[]
            {
new
{
properties = new
{
privateLinkServiceId = "<privateLinkServiceId>",
groupIds = new object[]
{
"<groupIds>"
},
privateLinkServiceConnectionState = new object(),
},
}
            },
                },
            });
            Response response = client.CreateOrUpdate("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("groupIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("requestMessage").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    manualPrivateLinkServiceConnections = new object[]
            {
new
{
properties = new
{
privateLinkServiceId = "<privateLinkServiceId>",
groupIds = new object[]
{
"<groupIds>"
},
privateLinkServiceConnectionState = new object(),
},
}
            },
                },
            });
            Response response = await client.CreateOrUpdateAsync("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", content, matchConditions: null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("groupIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("requestMessage").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPrivateEndpoint_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Response response = client.GetPrivateEndpoint("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPrivateEndpoint_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Response response = await client.GetPrivateEndpointAsync("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPrivateEndpoint_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Response response = client.GetPrivateEndpoint("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("groupIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("requestMessage").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPrivateEndpoint_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Response response = await client.GetPrivateEndpointAsync("<resourceGroupName>", "<clusterName>", "<privateEndpointName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceId").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("groupIds")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("requestMessage").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPrivateEndpointsByCluster_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetPrivateEndpointsByCluster("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPrivateEndpointsByCluster_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetPrivateEndpointsByClusterAsync("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPrivateEndpointsByCluster_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            foreach (BinaryData item in client.GetPrivateEndpointsByCluster("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("groupIds")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("requestMessage").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPrivateEndpointsByCluster_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            await foreach (BinaryData item in client.GetPrivateEndpointsByClusterAsync("<resourceGroupName>", "<clusterName>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("properties").GetProperty("createdDate").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceId").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("groupIds")[0].ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("requestMessage").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("manualPrivateLinkServiceConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", "<privateEndpointName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", "<privateEndpointName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", "<privateEndpointName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            TokenCredential credential = new DefaultAzureCredential();
            PrivateEndpointsClient client = new PrivateEndpointsClient("<SubscriptionId>", credential);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<clusterName>", "<privateEndpointName>");
        }
    }
}
