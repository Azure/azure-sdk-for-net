// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.StreamAnalytics
{
    /// <summary>
    /// A class representing a collection of <see cref="OutputResource" /> and their operations.
    /// Each <see cref="OutputResource" /> in the collection will belong to the same instance of <see cref="StreamingJobResource" />.
    /// To get an <see cref="OutputCollection" /> instance call the GetOutputs method from an instance of <see cref="StreamingJobResource" />.
    /// </summary>
    public partial class OutputCollection : ArmCollection, IEnumerable<OutputResource>, IAsyncEnumerable<OutputResource>
    {
        private readonly ClientDiagnostics _outputClientDiagnostics;
        private readonly OutputsRestOperations _outputRestClient;

        /// <summary> Initializes a new instance of the <see cref="OutputCollection"/> class for mocking. </summary>
        protected OutputCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="OutputCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal OutputCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _outputClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.StreamAnalytics", OutputResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(OutputResource.ResourceType, out string outputApiVersion);
            _outputRestClient = new OutputsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, outputApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != StreamingJobResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, StreamingJobResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates an output or replaces an already existing output under an existing streaming job.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
        /// Operation Id: Outputs_CreateOrReplace
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="outputName"> The name of the output. </param>
        /// <param name="data"> The definition of the output that will be used to create a new output or replace the existing one under the streaming job. </param>
        /// <param name="ifMatch"> The ETag of the output. Omit this value to always overwrite the current output. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. </param>
        /// <param name="ifNoneMatch"> Set to &apos;*&apos; to allow a new output to be created, but to prevent updating an existing output. Other values will result in a 412 Pre-condition Failed response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="outputName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="outputName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<OutputResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string outputName, OutputData data, string ifMatch = null, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(outputName, nameof(outputName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _outputRestClient.CreateOrReplaceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, outputName, data, ifMatch, ifNoneMatch, cancellationToken).ConfigureAwait(false);
                var operation = new StreamAnalyticsArmOperation<OutputResource>(Response.FromValue(new OutputResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates an output or replaces an already existing output under an existing streaming job.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
        /// Operation Id: Outputs_CreateOrReplace
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="outputName"> The name of the output. </param>
        /// <param name="data"> The definition of the output that will be used to create a new output or replace the existing one under the streaming job. </param>
        /// <param name="ifMatch"> The ETag of the output. Omit this value to always overwrite the current output. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. </param>
        /// <param name="ifNoneMatch"> Set to &apos;*&apos; to allow a new output to be created, but to prevent updating an existing output. Other values will result in a 412 Pre-condition Failed response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="outputName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="outputName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<OutputResource> CreateOrUpdate(WaitUntil waitUntil, string outputName, OutputData data, string ifMatch = null, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(outputName, nameof(outputName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _outputRestClient.CreateOrReplace(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, outputName, data, ifMatch, ifNoneMatch, cancellationToken);
                var operation = new StreamAnalyticsArmOperation<OutputResource>(Response.FromValue(new OutputResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets details about the specified output.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
        /// Operation Id: Outputs_Get
        /// </summary>
        /// <param name="outputName"> The name of the output. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="outputName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="outputName"/> is null. </exception>
        public virtual async Task<Response<OutputResource>> GetAsync(string outputName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(outputName, nameof(outputName));

            using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.Get");
            scope.Start();
            try
            {
                var response = await _outputRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, outputName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OutputResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets details about the specified output.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
        /// Operation Id: Outputs_Get
        /// </summary>
        /// <param name="outputName"> The name of the output. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="outputName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="outputName"/> is null. </exception>
        public virtual Response<OutputResource> Get(string outputName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(outputName, nameof(outputName));

            using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.Get");
            scope.Start();
            try
            {
                var response = _outputRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, outputName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new OutputResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all of the outputs under the specified streaming job.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs
        /// Operation Id: Outputs_ListByStreamingJob
        /// </summary>
        /// <param name="select"> The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or &quot;*&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &apos;*&apos; as a valid value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OutputResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OutputResource> GetAllAsync(string select = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<OutputResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _outputRestClient.ListByStreamingJobAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, select, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OutputResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OutputResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _outputRestClient.ListByStreamingJobNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, select, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OutputResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the outputs under the specified streaming job.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs
        /// Operation Id: Outputs_ListByStreamingJob
        /// </summary>
        /// <param name="select"> The $select OData query parameter. This is a comma-separated list of structural properties to include in the response, or &quot;*&quot; to include all properties. By default, all properties are returned except diagnostics. Currently only accepts &apos;*&apos; as a valid value. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OutputResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OutputResource> GetAll(string select = null, CancellationToken cancellationToken = default)
        {
            Page<OutputResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _outputRestClient.ListByStreamingJob(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, select, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OutputResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OutputResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _outputRestClient.ListByStreamingJobNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, select, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OutputResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
        /// Operation Id: Outputs_Get
        /// </summary>
        /// <param name="outputName"> The name of the output. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="outputName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="outputName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string outputName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(outputName, nameof(outputName));

            using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.Exists");
            scope.Start();
            try
            {
                var response = await _outputRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, outputName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}
        /// Operation Id: Outputs_Get
        /// </summary>
        /// <param name="outputName"> The name of the output. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="outputName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="outputName"/> is null. </exception>
        public virtual Response<bool> Exists(string outputName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(outputName, nameof(outputName));

            using var scope = _outputClientDiagnostics.CreateScope("OutputCollection.Exists");
            scope.Start();
            try
            {
                var response = _outputRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, outputName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<OutputResource> IEnumerable<OutputResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<OutputResource> IAsyncEnumerable<OutputResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
