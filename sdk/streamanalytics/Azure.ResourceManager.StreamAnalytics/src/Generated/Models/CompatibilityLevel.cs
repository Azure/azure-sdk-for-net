// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    /// <summary> Controls certain runtime behaviors of the streaming job. </summary>
    public readonly partial struct CompatibilityLevel : IEquatable<CompatibilityLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CompatibilityLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CompatibilityLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string One0Value = "1.0";
        private const string One2Value = "1.2";

        /// <summary> 1.0. </summary>
        public static CompatibilityLevel One0 { get; } = new CompatibilityLevel(One0Value);
        /// <summary> 1.2. </summary>
        public static CompatibilityLevel One2 { get; } = new CompatibilityLevel(One2Value);
        /// <summary> Determines if two <see cref="CompatibilityLevel"/> values are the same. </summary>
        public static bool operator ==(CompatibilityLevel left, CompatibilityLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CompatibilityLevel"/> values are not the same. </summary>
        public static bool operator !=(CompatibilityLevel left, CompatibilityLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CompatibilityLevel"/>. </summary>
        public static implicit operator CompatibilityLevel(string value) => new CompatibilityLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CompatibilityLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CompatibilityLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
