// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    public partial class JsonFormatSerialization : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(EventSerializationType.ToString());
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Encoding))
            {
                writer.WritePropertyName("encoding");
                writer.WriteStringValue(Encoding.Value.ToString());
            }
            if (Optional.IsDefined(Format))
            {
                writer.WritePropertyName("format");
                writer.WriteStringValue(Format.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static JsonFormatSerialization DeserializeJsonFormatSerialization(JsonElement element)
        {
            EventSerializationType type = default;
            Optional<StreamAnalyticsDataSerializationEncoding> encoding = default;
            Optional<JsonOutputSerializationFormat> format = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = new EventSerializationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("encoding"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            encoding = new StreamAnalyticsDataSerializationEncoding(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("format"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            format = new JsonOutputSerializationFormat(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new JsonFormatSerialization(type, Optional.ToNullable(encoding), Optional.ToNullable(format));
        }
    }
}
