// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    /// <summary> Authentication Mode. Valid modes are `ConnectionString`, `Msi` and &apos;UserToken&apos;. </summary>
    public readonly partial struct AuthenticationMode : IEquatable<AuthenticationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthenticationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthenticationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MsiValue = "Msi";
        private const string UserTokenValue = "UserToken";
        private const string ConnectionStringValue = "ConnectionString";

        /// <summary> Msi. </summary>
        public static AuthenticationMode Msi { get; } = new AuthenticationMode(MsiValue);
        /// <summary> UserToken. </summary>
        public static AuthenticationMode UserToken { get; } = new AuthenticationMode(UserTokenValue);
        /// <summary> ConnectionString. </summary>
        public static AuthenticationMode ConnectionString { get; } = new AuthenticationMode(ConnectionStringValue);
        /// <summary> Determines if two <see cref="AuthenticationMode"/> values are the same. </summary>
        public static bool operator ==(AuthenticationMode left, AuthenticationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthenticationMode"/> values are not the same. </summary>
        public static bool operator !=(AuthenticationMode left, AuthenticationMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AuthenticationMode"/>. </summary>
        public static implicit operator AuthenticationMode(string value) => new AuthenticationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthenticationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthenticationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
