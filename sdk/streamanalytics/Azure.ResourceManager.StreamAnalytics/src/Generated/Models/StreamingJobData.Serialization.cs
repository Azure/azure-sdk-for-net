// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StreamAnalytics.Models;

namespace Azure.ResourceManager.StreamAnalytics
{
    public partial class StreamingJobData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                var serializeOptions = new JsonSerializerOptions { Converters = { new ManagedServiceIdentityTypeV3Converter() } };
                JsonSerializer.Serialize(writer, Identity, serializeOptions);
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Core.Optional.IsDefined(JobType))
            {
                writer.WritePropertyName("jobType"u8);
                writer.WriteStringValue(JobType.Value.ToString());
            }
            if (Core.Optional.IsDefined(OutputStartMode))
            {
                writer.WritePropertyName("outputStartMode"u8);
                writer.WriteStringValue(OutputStartMode.Value.ToString());
            }
            if (Core.Optional.IsDefined(OutputStartOn))
            {
                writer.WritePropertyName("outputStartTime"u8);
                writer.WriteStringValue(OutputStartOn.Value, "O");
            }
            if (Core.Optional.IsDefined(EventsOutOfOrderPolicy))
            {
                writer.WritePropertyName("eventsOutOfOrderPolicy"u8);
                writer.WriteStringValue(EventsOutOfOrderPolicy.Value.ToString());
            }
            if (Core.Optional.IsDefined(OutputErrorPolicy))
            {
                writer.WritePropertyName("outputErrorPolicy"u8);
                writer.WriteStringValue(OutputErrorPolicy.Value.ToString());
            }
            if (Core.Optional.IsDefined(EventsOutOfOrderMaxDelayInSeconds))
            {
                writer.WritePropertyName("eventsOutOfOrderMaxDelayInSeconds"u8);
                writer.WriteNumberValue(EventsOutOfOrderMaxDelayInSeconds.Value);
            }
            if (Core.Optional.IsDefined(EventsLateArrivalMaxDelayInSeconds))
            {
                writer.WritePropertyName("eventsLateArrivalMaxDelayInSeconds"u8);
                writer.WriteNumberValue(EventsLateArrivalMaxDelayInSeconds.Value);
            }
            if (Core.Optional.IsDefined(DataLocalion))
            {
                writer.WritePropertyName("dataLocale"u8);
                writer.WriteStringValue(DataLocalion.Value);
            }
            if (Core.Optional.IsDefined(CompatibilityLevel))
            {
                writer.WritePropertyName("compatibilityLevel"u8);
                writer.WriteStringValue(CompatibilityLevel.Value.ToString());
            }
            if (Core.Optional.IsCollectionDefined(Inputs))
            {
                writer.WritePropertyName("inputs"u8);
                writer.WriteStartArray();
                foreach (var item in Inputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(Transformation))
            {
                writer.WritePropertyName("transformation"u8);
                writer.WriteObjectValue(Transformation);
            }
            if (Core.Optional.IsCollectionDefined(Outputs))
            {
                writer.WritePropertyName("outputs"u8);
                writer.WriteStartArray();
                foreach (var item in Outputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(Functions))
            {
                writer.WritePropertyName("functions"u8);
                writer.WriteStartArray();
                foreach (var item in Functions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(JobStorageAccount))
            {
                if (JobStorageAccount != null)
                {
                    writer.WritePropertyName("jobStorageAccount"u8);
                    writer.WriteObjectValue(JobStorageAccount);
                }
                else
                {
                    writer.WriteNull("jobStorageAccount");
                }
            }
            if (Core.Optional.IsDefined(ContentStoragePolicy))
            {
                writer.WritePropertyName("contentStoragePolicy"u8);
                writer.WriteStringValue(ContentStoragePolicy.Value.ToString());
            }
            if (Core.Optional.IsDefined(Externals))
            {
                writer.WritePropertyName("externals"u8);
                writer.WriteObjectValue(Externals);
            }
            if (Core.Optional.IsDefined(Cluster))
            {
                if (Cluster != null)
                {
                    writer.WritePropertyName("cluster"u8);
                    writer.WriteObjectValue(Cluster);
                }
                else
                {
                    writer.WriteNull("cluster");
                }
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static StreamingJobData DeserializeStreamingJobData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ManagedServiceIdentity> identity = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<StreamAnalyticsSku> sku = default;
            Core.Optional<Guid> jobId = default;
            Core.Optional<string> provisioningState = default;
            Core.Optional<string> jobState = default;
            Core.Optional<StreamingJobType> jobType = default;
            Core.Optional<StreamingJobOutputStartMode> outputStartMode = default;
            Core.Optional<DateTimeOffset> outputStartTime = default;
            Core.Optional<DateTimeOffset> lastOutputEventTime = default;
            Core.Optional<EventsOutOfOrderPolicy> eventsOutOfOrderPolicy = default;
            Core.Optional<StreamingJobOutputErrorPolicy> outputErrorPolicy = default;
            Core.Optional<int> eventsOutOfOrderMaxDelayInSeconds = default;
            Core.Optional<int> eventsLateArrivalMaxDelayInSeconds = default;
            Core.Optional<AzureLocation> dataLocale = default;
            Core.Optional<StreamingJobCompatibilityLevel> compatibilityLevel = default;
            Core.Optional<DateTimeOffset> createdDate = default;
            Core.Optional<IList<StreamingJobInputData>> inputs = default;
            Core.Optional<StreamingJobTransformationData> transformation = default;
            Core.Optional<IList<StreamingJobOutputData>> outputs = default;
            Core.Optional<IList<StreamingJobFunctionData>> functions = default;
            Core.Optional<ETag> etag = default;
            Core.Optional<StreamingJobStorageAccount> jobStorageAccount = default;
            Core.Optional<StreamingJobContentStoragePolicy> contentStoragePolicy = default;
            Core.Optional<StreamingJobExternal> externals = default;
            Core.Optional<ClusterInfo> cluster = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    var serializeOptions = new JsonSerializerOptions { Converters = { new ManagedServiceIdentityTypeV3Converter() } };
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText(), serializeOptions);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("sku"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sku = StreamAnalyticsSku.DeserializeStreamAnalyticsSku(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("jobId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            jobId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("jobState"u8))
                        {
                            jobState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("jobType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            jobType = new StreamingJobType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("outputStartMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            outputStartMode = new StreamingJobOutputStartMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("outputStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            outputStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastOutputEventTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastOutputEventTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("eventsOutOfOrderPolicy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventsOutOfOrderPolicy = new EventsOutOfOrderPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("outputErrorPolicy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            outputErrorPolicy = new StreamingJobOutputErrorPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventsOutOfOrderMaxDelayInSeconds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventsOutOfOrderMaxDelayInSeconds = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("eventsLateArrivalMaxDelayInSeconds"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            eventsLateArrivalMaxDelayInSeconds = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataLocale"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataLocale = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("compatibilityLevel"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            compatibilityLevel = new StreamingJobCompatibilityLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("createdDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("inputs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<StreamingJobInputData> array = new List<StreamingJobInputData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamingJobInputData.DeserializeStreamingJobInputData(item));
                            }
                            inputs = array;
                            continue;
                        }
                        if (property0.NameEquals("transformation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            transformation = StreamingJobTransformationData.DeserializeStreamingJobTransformationData(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("outputs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<StreamingJobOutputData> array = new List<StreamingJobOutputData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamingJobOutputData.DeserializeStreamingJobOutputData(item));
                            }
                            outputs = array;
                            continue;
                        }
                        if (property0.NameEquals("functions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<StreamingJobFunctionData> array = new List<StreamingJobFunctionData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamingJobFunctionData.DeserializeStreamingJobFunctionData(item));
                            }
                            functions = array;
                            continue;
                        }
                        if (property0.NameEquals("etag"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            etag = new ETag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("jobStorageAccount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                jobStorageAccount = null;
                                continue;
                            }
                            jobStorageAccount = StreamingJobStorageAccount.DeserializeStreamingJobStorageAccount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("contentStoragePolicy"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contentStoragePolicy = new StreamingJobContentStoragePolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("externals"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            externals = StreamingJobExternal.DeserializeStreamingJobExternal(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("cluster"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                cluster = null;
                                continue;
                            }
                            cluster = ClusterInfo.DeserializeClusterInfo(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new StreamingJobData(id, name, type, systemData.Value, Core.Optional.ToDictionary(tags), location, identity, sku.Value, Core.Optional.ToNullable(jobId), provisioningState.Value, jobState.Value, Core.Optional.ToNullable(jobType), Core.Optional.ToNullable(outputStartMode), Core.Optional.ToNullable(outputStartTime), Core.Optional.ToNullable(lastOutputEventTime), Core.Optional.ToNullable(eventsOutOfOrderPolicy), Core.Optional.ToNullable(outputErrorPolicy), Core.Optional.ToNullable(eventsOutOfOrderMaxDelayInSeconds), Core.Optional.ToNullable(eventsLateArrivalMaxDelayInSeconds), Core.Optional.ToNullable(dataLocale), Core.Optional.ToNullable(compatibilityLevel), Core.Optional.ToNullable(createdDate), Core.Optional.ToList(inputs), transformation.Value, Core.Optional.ToList(outputs), Core.Optional.ToList(functions), Core.Optional.ToNullable(etag), jobStorageAccount.Value, Core.Optional.ToNullable(contentStoragePolicy), externals.Value, cluster.Value);
        }
    }
}
