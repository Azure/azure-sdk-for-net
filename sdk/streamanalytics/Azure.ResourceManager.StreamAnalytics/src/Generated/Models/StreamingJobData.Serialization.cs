// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StreamAnalytics.Models;

namespace Azure.ResourceManager.StreamAnalytics
{
    public partial class StreamingJobData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity");
                var serializeOptions = new JsonSerializerOptions { Converters = { new ManagedServiceIdentityTypeV3Converter() } };
                JsonSerializer.Serialize(writer, Identity, serializeOptions);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsDefined(JobType))
            {
                writer.WritePropertyName("jobType");
                writer.WriteStringValue(JobType.Value.ToString());
            }
            if (Optional.IsDefined(OutputStartMode))
            {
                writer.WritePropertyName("outputStartMode");
                writer.WriteStringValue(OutputStartMode.Value.ToString());
            }
            if (Optional.IsDefined(OutputStartOn))
            {
                writer.WritePropertyName("outputStartTime");
                writer.WriteStringValue(OutputStartOn.Value, "O");
            }
            if (Optional.IsDefined(EventsOutOfOrderPolicy))
            {
                writer.WritePropertyName("eventsOutOfOrderPolicy");
                writer.WriteStringValue(EventsOutOfOrderPolicy.Value.ToString());
            }
            if (Optional.IsDefined(OutputErrorPolicy))
            {
                writer.WritePropertyName("outputErrorPolicy");
                writer.WriteStringValue(OutputErrorPolicy.Value.ToString());
            }
            if (Optional.IsDefined(EventsOutOfOrderMaxDelayInSeconds))
            {
                writer.WritePropertyName("eventsOutOfOrderMaxDelayInSeconds");
                writer.WriteNumberValue(EventsOutOfOrderMaxDelayInSeconds.Value);
            }
            if (Optional.IsDefined(EventsLateArrivalMaxDelayInSeconds))
            {
                writer.WritePropertyName("eventsLateArrivalMaxDelayInSeconds");
                writer.WriteNumberValue(EventsLateArrivalMaxDelayInSeconds.Value);
            }
            if (Optional.IsDefined(DataLocalion))
            {
                writer.WritePropertyName("dataLocale");
                writer.WriteStringValue(DataLocalion.Value);
            }
            if (Optional.IsDefined(CompatibilityLevel))
            {
                writer.WritePropertyName("compatibilityLevel");
                writer.WriteStringValue(CompatibilityLevel.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Inputs))
            {
                writer.WritePropertyName("inputs");
                writer.WriteStartArray();
                foreach (var item in Inputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Transformation))
            {
                writer.WritePropertyName("transformation");
                writer.WriteObjectValue(Transformation);
            }
            if (Optional.IsCollectionDefined(Outputs))
            {
                writer.WritePropertyName("outputs");
                writer.WriteStartArray();
                foreach (var item in Outputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Functions))
            {
                writer.WritePropertyName("functions");
                writer.WriteStartArray();
                foreach (var item in Functions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(JobStorageAccount))
            {
                if (JobStorageAccount != null)
                {
                    writer.WritePropertyName("jobStorageAccount");
                    writer.WriteObjectValue(JobStorageAccount);
                }
                else
                {
                    writer.WriteNull("jobStorageAccount");
                }
            }
            if (Optional.IsDefined(ContentStoragePolicy))
            {
                writer.WritePropertyName("contentStoragePolicy");
                writer.WriteStringValue(ContentStoragePolicy.Value.ToString());
            }
            if (Optional.IsDefined(Externals))
            {
                writer.WritePropertyName("externals");
                writer.WriteObjectValue(Externals);
            }
            if (Optional.IsDefined(Cluster))
            {
                if (Cluster != null)
                {
                    writer.WritePropertyName("cluster");
                    writer.WriteObjectValue(Cluster);
                }
                else
                {
                    writer.WriteNull("cluster");
                }
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static StreamingJobData DeserializeStreamingJobData(JsonElement element)
        {
            Optional<ManagedServiceIdentity> identity = default;
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<StreamAnalyticsSku> sku = default;
            Optional<Guid> jobId = default;
            Optional<string> provisioningState = default;
            Optional<string> jobState = default;
            Optional<StreamingJobType> jobType = default;
            Optional<StreamingJobOutputStartMode> outputStartMode = default;
            Optional<DateTimeOffset> outputStartTime = default;
            Optional<DateTimeOffset> lastOutputEventTime = default;
            Optional<EventsOutOfOrderPolicy> eventsOutOfOrderPolicy = default;
            Optional<StreamingJobOutputErrorPolicy> outputErrorPolicy = default;
            Optional<int> eventsOutOfOrderMaxDelayInSeconds = default;
            Optional<int> eventsLateArrivalMaxDelayInSeconds = default;
            Optional<AzureLocation> dataLocale = default;
            Optional<StreamingJobCompatibilityLevel> compatibilityLevel = default;
            Optional<DateTimeOffset> createdDate = default;
            Optional<IList<StreamingJobInputData>> inputs = default;
            Optional<StreamingJobTransformationData> transformation = default;
            Optional<IList<StreamingJobOutputData>> outputs = default;
            Optional<IList<StreamingJobFunctionData>> functions = default;
            Optional<ETag> etag = default;
            Optional<StreamingJobStorageAccount> jobStorageAccount = default;
            Optional<StreamingJobContentStoragePolicy> contentStoragePolicy = default;
            Optional<StreamingJobExternal> externals = default;
            Optional<ClusterInfo> cluster = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    var serializeOptions = new JsonSerializerOptions { Converters = { new ManagedServiceIdentityTypeV3Converter() } };
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.ToString(), serializeOptions);
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("sku"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sku = StreamAnalyticsSku.DeserializeStreamAnalyticsSku(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("jobId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            jobId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("jobState"))
                        {
                            jobState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("jobType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            jobType = new StreamingJobType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("outputStartMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            outputStartMode = new StreamingJobOutputStartMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("outputStartTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            outputStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastOutputEventTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastOutputEventTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("eventsOutOfOrderPolicy"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            eventsOutOfOrderPolicy = new EventsOutOfOrderPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("outputErrorPolicy"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            outputErrorPolicy = new StreamingJobOutputErrorPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("eventsOutOfOrderMaxDelayInSeconds"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            eventsOutOfOrderMaxDelayInSeconds = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("eventsLateArrivalMaxDelayInSeconds"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            eventsLateArrivalMaxDelayInSeconds = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dataLocale"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            dataLocale = new AzureLocation(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("compatibilityLevel"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            compatibilityLevel = new StreamingJobCompatibilityLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("createdDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            createdDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("inputs"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<StreamingJobInputData> array = new List<StreamingJobInputData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamingJobInputData.DeserializeStreamingJobInputData(item));
                            }
                            inputs = array;
                            continue;
                        }
                        if (property0.NameEquals("transformation"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            transformation = StreamingJobTransformationData.DeserializeStreamingJobTransformationData(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("outputs"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<StreamingJobOutputData> array = new List<StreamingJobOutputData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamingJobOutputData.DeserializeStreamingJobOutputData(item));
                            }
                            outputs = array;
                            continue;
                        }
                        if (property0.NameEquals("functions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<StreamingJobFunctionData> array = new List<StreamingJobFunctionData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamingJobFunctionData.DeserializeStreamingJobFunctionData(item));
                            }
                            functions = array;
                            continue;
                        }
                        if (property0.NameEquals("etag"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            etag = new ETag(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("jobStorageAccount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                jobStorageAccount = null;
                                continue;
                            }
                            jobStorageAccount = StreamingJobStorageAccount.DeserializeStreamingJobStorageAccount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("contentStoragePolicy"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            contentStoragePolicy = new StreamingJobContentStoragePolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("externals"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            externals = StreamingJobExternal.DeserializeStreamingJobExternal(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("cluster"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                cluster = null;
                                continue;
                            }
                            cluster = ClusterInfo.DeserializeClusterInfo(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new StreamingJobData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, identity, sku.Value, Optional.ToNullable(jobId), provisioningState.Value, jobState.Value, Optional.ToNullable(jobType), Optional.ToNullable(outputStartMode), Optional.ToNullable(outputStartTime), Optional.ToNullable(lastOutputEventTime), Optional.ToNullable(eventsOutOfOrderPolicy), Optional.ToNullable(outputErrorPolicy), Optional.ToNullable(eventsOutOfOrderMaxDelayInSeconds), Optional.ToNullable(eventsLateArrivalMaxDelayInSeconds), Optional.ToNullable(dataLocale), Optional.ToNullable(compatibilityLevel), Optional.ToNullable(createdDate), Optional.ToList(inputs), transformation.Value, Optional.ToList(outputs), Optional.ToList(functions), Optional.ToNullable(etag), jobStorageAccount.Value, Optional.ToNullable(contentStoragePolicy), externals.Value, cluster.Value);
        }
    }
}
