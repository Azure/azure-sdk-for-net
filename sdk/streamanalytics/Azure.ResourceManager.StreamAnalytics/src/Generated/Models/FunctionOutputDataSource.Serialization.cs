// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    public partial class FunctionOutputDataSource : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(OutputDataSourceType);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(FunctionAppName))
            {
                writer.WritePropertyName("functionAppName"u8);
                writer.WriteStringValue(FunctionAppName);
            }
            if (Core.Optional.IsDefined(FunctionName))
            {
                writer.WritePropertyName("functionName"u8);
                writer.WriteStringValue(FunctionName);
            }
            if (Core.Optional.IsDefined(ApiKey))
            {
                writer.WritePropertyName("apiKey"u8);
                writer.WriteStringValue(ApiKey);
            }
            if (Core.Optional.IsDefined(MaxBatchSize))
            {
                writer.WritePropertyName("maxBatchSize"u8);
                writer.WriteNumberValue(MaxBatchSize.Value);
            }
            if (Core.Optional.IsDefined(MaxBatchCount))
            {
                writer.WritePropertyName("maxBatchCount"u8);
                writer.WriteNumberValue(MaxBatchCount.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static FunctionOutputDataSource DeserializeFunctionOutputDataSource(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Core.Optional<string> functionAppName = default;
            Core.Optional<string> functionName = default;
            Core.Optional<string> apiKey = default;
            Core.Optional<int> maxBatchSize = default;
            Core.Optional<int> maxBatchCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("functionAppName"u8))
                        {
                            functionAppName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("functionName"u8))
                        {
                            functionName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("apiKey"u8))
                        {
                            apiKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("maxBatchSize"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxBatchSize = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("maxBatchCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxBatchCount = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new FunctionOutputDataSource(type, functionAppName.Value, functionName.Value, apiKey.Value, Core.Optional.ToNullable(maxBatchSize), Core.Optional.ToNullable(maxBatchCount));
        }
    }
}
