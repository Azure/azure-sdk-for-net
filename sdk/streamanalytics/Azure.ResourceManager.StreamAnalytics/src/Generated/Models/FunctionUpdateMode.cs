// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    /// <summary>
    /// Refresh modes for Stream Analytics functions.
    /// Serialized Name: UpdateMode
    /// </summary>
    public readonly partial struct FunctionUpdateMode : IEquatable<FunctionUpdateMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FunctionUpdateMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FunctionUpdateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StaticValue = "Static";
        private const string RefreshableValue = "Refreshable";

        /// <summary>
        /// Static
        /// Serialized Name: UpdateMode.Static
        /// </summary>
        public static FunctionUpdateMode Static { get; } = new FunctionUpdateMode(StaticValue);
        /// <summary>
        /// Refreshable
        /// Serialized Name: UpdateMode.Refreshable
        /// </summary>
        public static FunctionUpdateMode Refreshable { get; } = new FunctionUpdateMode(RefreshableValue);
        /// <summary> Determines if two <see cref="FunctionUpdateMode"/> values are the same. </summary>
        public static bool operator ==(FunctionUpdateMode left, FunctionUpdateMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FunctionUpdateMode"/> values are not the same. </summary>
        public static bool operator !=(FunctionUpdateMode left, FunctionUpdateMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FunctionUpdateMode"/>. </summary>
        public static implicit operator FunctionUpdateMode(string value) => new FunctionUpdateMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FunctionUpdateMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FunctionUpdateMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
