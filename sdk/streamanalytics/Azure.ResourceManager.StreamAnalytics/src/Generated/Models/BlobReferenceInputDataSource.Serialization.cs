// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    public partial class BlobReferenceInputDataSource : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(ReferenceInputDataSourceType);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(StorageAccounts))
            {
                writer.WritePropertyName("storageAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in StorageAccounts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(Container))
            {
                writer.WritePropertyName("container"u8);
                writer.WriteStringValue(Container);
            }
            if (Core.Optional.IsDefined(PathPattern))
            {
                writer.WritePropertyName("pathPattern"u8);
                writer.WriteStringValue(PathPattern);
            }
            if (Core.Optional.IsDefined(DateFormat))
            {
                writer.WritePropertyName("dateFormat"u8);
                writer.WriteStringValue(DateFormat);
            }
            if (Core.Optional.IsDefined(TimeFormat))
            {
                writer.WritePropertyName("timeFormat"u8);
                writer.WriteStringValue(TimeFormat);
            }
            if (Core.Optional.IsDefined(AuthenticationMode))
            {
                writer.WritePropertyName("authenticationMode"u8);
                writer.WriteStringValue(AuthenticationMode.Value.ToString());
            }
            if (Core.Optional.IsDefined(BlobName))
            {
                writer.WritePropertyName("blobName"u8);
                writer.WriteStringValue(BlobName);
            }
            if (Core.Optional.IsDefined(DeltaPathPattern))
            {
                writer.WritePropertyName("deltaPathPattern"u8);
                writer.WriteStringValue(DeltaPathPattern);
            }
            if (Core.Optional.IsDefined(SourcePartitionCount))
            {
                writer.WritePropertyName("sourcePartitionCount"u8);
                writer.WriteNumberValue(SourcePartitionCount.Value);
            }
            if (Core.Optional.IsDefined(FullSnapshotRefreshInterval))
            {
                writer.WritePropertyName("fullSnapshotRefreshRate"u8);
                writer.WriteStringValue(FullSnapshotRefreshInterval.Value, "T");
            }
            if (Core.Optional.IsDefined(DeltaSnapshotRefreshInterval))
            {
                writer.WritePropertyName("deltaSnapshotRefreshRate"u8);
                writer.WriteStringValue(DeltaSnapshotRefreshInterval.Value, "T");
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static BlobReferenceInputDataSource DeserializeBlobReferenceInputDataSource(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string type = default;
            Core.Optional<IList<StreamAnalyticsStorageAccount>> storageAccounts = default;
            Core.Optional<string> container = default;
            Core.Optional<string> pathPattern = default;
            Core.Optional<string> dateFormat = default;
            Core.Optional<string> timeFormat = default;
            Core.Optional<StreamAnalyticsAuthenticationMode> authenticationMode = default;
            Core.Optional<string> blobName = default;
            Core.Optional<string> deltaPathPattern = default;
            Core.Optional<int> sourcePartitionCount = default;
            Core.Optional<TimeSpan> fullSnapshotRefreshRate = default;
            Core.Optional<TimeSpan> deltaSnapshotRefreshRate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("storageAccounts"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<StreamAnalyticsStorageAccount> array = new List<StreamAnalyticsStorageAccount>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(StreamAnalyticsStorageAccount.DeserializeStreamAnalyticsStorageAccount(item));
                            }
                            storageAccounts = array;
                            continue;
                        }
                        if (property0.NameEquals("container"u8))
                        {
                            container = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("pathPattern"u8))
                        {
                            pathPattern = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dateFormat"u8))
                        {
                            dateFormat = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("timeFormat"u8))
                        {
                            timeFormat = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authenticationMode"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            authenticationMode = new StreamAnalyticsAuthenticationMode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("blobName"u8))
                        {
                            blobName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("deltaPathPattern"u8))
                        {
                            deltaPathPattern = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sourcePartitionCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sourcePartitionCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("fullSnapshotRefreshRate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            fullSnapshotRefreshRate = property0.Value.GetTimeSpan("T");
                            continue;
                        }
                        if (property0.NameEquals("deltaSnapshotRefreshRate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            deltaSnapshotRefreshRate = property0.Value.GetTimeSpan("T");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BlobReferenceInputDataSource(type, Core.Optional.ToList(storageAccounts), container.Value, pathPattern.Value, dateFormat.Value, timeFormat.Value, Core.Optional.ToNullable(authenticationMode), blobName.Value, deltaPathPattern.Value, Core.Optional.ToNullable(sourcePartitionCount), Core.Optional.ToNullable(fullSnapshotRefreshRate), Core.Optional.ToNullable(deltaSnapshotRefreshRate));
        }
    }
}
