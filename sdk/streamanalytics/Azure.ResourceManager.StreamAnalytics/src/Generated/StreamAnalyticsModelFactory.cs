// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StreamAnalytics;

namespace Azure.ResourceManager.StreamAnalytics.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class StreamAnalyticsModelFactory
    {
        /// <summary> Initializes a new instance of StreamingJobFunctionData. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="properties">
        /// The properties that are associated with a function.
        /// Please note <see cref="StreamingJobFunctionProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AggregateFunctionProperties"/> and <see cref="ScalarFunctionProperties"/>.
        /// </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamingJobFunctionData"/> instance for mocking. </returns>
        public static StreamingJobFunctionData StreamingJobFunctionData(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, StreamingJobFunctionProperties properties = null)
        {
            return new StreamingJobFunctionData(id, name, resourceType, properties);
        }

        /// <summary> Initializes a new instance of StreamingJobFunctionProperties. </summary>
        /// <param name="functionPropertiesType"> Indicates the type of function. </param>
        /// <param name="etag"> The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="inputs"></param>
        /// <param name="outputDataType"> Describes the output of a function. </param>
        /// <param name="binding">
        /// The physical binding of the function. For example, in the Azure Machine Learning web serviceâ€™s case, this describes the endpoint.
        /// Please note <see cref="StreamingJobFunctionBinding"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EMachineLearningStudioFunctionBinding"/>, <see cref="MachineLearningServiceFunctionBinding"/>, <see cref="CSharpFunctionBinding"/> and <see cref="JavaScriptFunctionBinding"/>.
        /// </param>
        /// <returns> A new <see cref="Models.StreamingJobFunctionProperties"/> instance for mocking. </returns>
        public static StreamingJobFunctionProperties StreamingJobFunctionProperties(string functionPropertiesType = null, ETag? etag = null, IEnumerable<StreamingJobFunctionInput> inputs = null, string outputDataType = null, StreamingJobFunctionBinding binding = null)
        {
            inputs ??= new List<StreamingJobFunctionInput>();

            return new UnknownFunctionProperties(functionPropertiesType, etag, inputs?.ToList(), outputDataType != null ? new StreamingJobFunctionOutput(outputDataType) : null, binding);
        }

        /// <summary> Initializes a new instance of StreamingJobFunctionInput. </summary>
        /// <param name="dataType"> The (Azure Stream Analytics supported) data type of the function input parameter. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx. </param>
        /// <param name="isConfigurationParameter"> A flag indicating if the parameter is a configuration parameter. True if this input parameter is expected to be a constant. Default is false. </param>
        /// <returns> A new <see cref="Models.StreamingJobFunctionInput"/> instance for mocking. </returns>
        public static StreamingJobFunctionInput StreamingJobFunctionInput(string dataType = null, bool? isConfigurationParameter = null)
        {
            return new StreamingJobFunctionInput(dataType, isConfigurationParameter);
        }

        /// <summary> Initializes a new instance of StreamingJobFunctionOutput. </summary>
        /// <param name="dataType"> The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx. </param>
        /// <returns> A new <see cref="Models.StreamingJobFunctionOutput"/> instance for mocking. </returns>
        public static StreamingJobFunctionOutput StreamingJobFunctionOutput(string dataType = null)
        {
            return new StreamingJobFunctionOutput(dataType);
        }

        /// <summary> Initializes a new instance of StreamingJobFunctionBinding. </summary>
        /// <param name="functionBindingType"> Indicates the function binding type. </param>
        /// <returns> A new <see cref="Models.StreamingJobFunctionBinding"/> instance for mocking. </returns>
        public static StreamingJobFunctionBinding StreamingJobFunctionBinding(string functionBindingType = null)
        {
            return new UnknownFunctionBinding(functionBindingType);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsSubResource. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsSubResource"/> instance for mocking. </returns>
        public static StreamAnalyticsSubResource StreamAnalyticsSubResource(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null)
        {
            return new StreamAnalyticsSubResource(id, name, resourceType);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsError. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="details"> Error details. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsError"/> instance for mocking. </returns>
        public static StreamAnalyticsError StreamAnalyticsError(string code = null, string message = null, string target = null, IEnumerable<StreamAnalyticsErrorDetails> details = null)
        {
            details ??= new List<StreamAnalyticsErrorDetails>();

            return new StreamAnalyticsError(code, message, target, details?.ToList());
        }

        /// <summary> Initializes a new instance of StreamAnalyticsErrorDetails. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="message"> Error message. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsErrorDetails"/> instance for mocking. </returns>
        public static StreamAnalyticsErrorDetails StreamAnalyticsErrorDetails(string code = null, string target = null, string message = null)
        {
            return new StreamAnalyticsErrorDetails(code, target, message);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsResourceTestStatus. </summary>
        /// <param name="status"> The status of the test operation. </param>
        /// <param name="code"> Error code associated with the error that occurred. </param>
        /// <param name="message"> Describes the error in detail. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsResourceTestStatus"/> instance for mocking. </returns>
        public static StreamAnalyticsResourceTestStatus StreamAnalyticsResourceTestStatus(string status = null, string code = null, string message = null)
        {
            return new StreamAnalyticsResourceTestStatus(status, code, message);
        }

        /// <summary> Initializes a new instance of StreamingJobInputData. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="properties">
        /// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamingJobInputProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ReferenceInputProperties"/> and <see cref="StreamInputProperties"/>.
        /// </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamingJobInputData"/> instance for mocking. </returns>
        public static StreamingJobInputData StreamingJobInputData(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, StreamingJobInputProperties properties = null)
        {
            return new StreamingJobInputData(id, name, resourceType, properties);
        }

        /// <summary> Initializes a new instance of StreamingJobInputProperties. </summary>
        /// <param name="inputPropertiesType"> Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="serialization">
        /// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamAnalyticsDataSerialization"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormatSerialization"/>, <see cref="CsvFormatSerialization"/>, <see cref="CustomClrFormatSerialization"/>, <see cref="JsonFormatSerialization"/> and <see cref="ParquetFormatSerialization"/>.
        /// </param>
        /// <param name="diagnosticsConditions"> Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention. </param>
        /// <param name="etag"> The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="compressionType"> Describes how input data is compressed. </param>
        /// <param name="partitionKey"> partitionKey Describes a key in the input data which is used for partitioning the input data. </param>
        /// <param name="watermarkMode"> Settings which determine whether to read watermark events. </param>
        /// <returns> A new <see cref="Models.StreamingJobInputProperties"/> instance for mocking. </returns>
        public static StreamingJobInputProperties StreamingJobInputProperties(string inputPropertiesType = null, StreamAnalyticsDataSerialization serialization = null, IEnumerable<StreamingJobDiagnosticCondition> diagnosticsConditions = null, ETag? etag = null, StreamingCompressionType? compressionType = null, string partitionKey = null, StreamingJobInputWatermarkMode? watermarkMode = null)
        {
            diagnosticsConditions ??= new List<StreamingJobDiagnosticCondition>();

            return new UnknownInputProperties(inputPropertiesType, serialization, diagnosticsConditions != null ? new StreamingJobDiagnostics(diagnosticsConditions?.ToList()) : null, etag, compressionType.HasValue ? new StreamingCompression(compressionType.Value) : null, partitionKey, watermarkMode != null ? new StreamingJobInputWatermarkProperties(watermarkMode) : null);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsDataSerialization. </summary>
        /// <param name="eventSerializationType"> Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsDataSerialization"/> instance for mocking. </returns>
        public static StreamAnalyticsDataSerialization StreamAnalyticsDataSerialization(string eventSerializationType = "Unknown")
        {
            return new UnknownSerialization(eventSerializationType);
        }

        /// <summary> Initializes a new instance of StreamingJobDiagnosticCondition. </summary>
        /// <param name="since"> The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time. </param>
        /// <param name="code"> The opaque diagnostic code. </param>
        /// <param name="message"> The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request. </param>
        /// <returns> A new <see cref="Models.StreamingJobDiagnosticCondition"/> instance for mocking. </returns>
        public static StreamingJobDiagnosticCondition StreamingJobDiagnosticCondition(DateTimeOffset? since = null, string code = null, string message = null)
        {
            return new StreamingJobDiagnosticCondition(since, code, message);
        }

        /// <summary> Initializes a new instance of StreamingJobOutputData. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="datasource">
        /// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamingJobOutputDataSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GatewayMessageBusOutputDataSource"/>, <see cref="FunctionOutputDataSource"/>, <see cref="PostgreSQLOutputDataSource"/>, <see cref="DataLakeStoreOutputDataSource"/>, <see cref="EventHubV2OutputDataSource"/>, <see cref="EventHubOutputDataSource"/>, <see cref="ServiceBusQueueOutputDataSource"/>, <see cref="ServiceBusTopicOutputDataSource"/>, <see cref="SynapseOutputDataSource"/>, <see cref="SqlDatabaseOutputDataSource"/>, <see cref="BlobOutputDataSource"/>, <see cref="DocumentDbOutputDataSource"/>, <see cref="TableOutputDataSource"/>, <see cref="PowerBIOutputDataSource"/> and <see cref="RawOutputDatasource"/>.
        /// </param>
        /// <param name="timeFrame"> The time frame for filtering Stream Analytics job outputs. </param>
        /// <param name="sizeWindow"> The size window to constrain a Stream Analytics output to. </param>
        /// <param name="serialization">
        /// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamAnalyticsDataSerialization"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormatSerialization"/>, <see cref="CsvFormatSerialization"/>, <see cref="CustomClrFormatSerialization"/>, <see cref="JsonFormatSerialization"/> and <see cref="ParquetFormatSerialization"/>.
        /// </param>
        /// <param name="diagnosticsConditions"> Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention. </param>
        /// <param name="etag"> The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="lastOutputEventTimestamps"> A list of the last output event times for each output partition. The index of the array corresponds to the partition number. </param>
        /// <param name="watermarkSettings"> Settings which determine whether to send watermarks to downstream. </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamingJobOutputData"/> instance for mocking. </returns>
        public static StreamingJobOutputData StreamingJobOutputData(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, StreamingJobOutputDataSource datasource = null, TimeSpan? timeFrame = null, float? sizeWindow = null, StreamAnalyticsDataSerialization serialization = null, IEnumerable<StreamingJobDiagnosticCondition> diagnosticsConditions = null, ETag? etag = null, IEnumerable<LastOutputEventTimestamp> lastOutputEventTimestamps = null, StreamingJobOutputWatermarkProperties watermarkSettings = null)
        {
            diagnosticsConditions ??= new List<StreamingJobDiagnosticCondition>();
            lastOutputEventTimestamps ??= new List<LastOutputEventTimestamp>();

            return new StreamingJobOutputData(id, name, resourceType, datasource, timeFrame, sizeWindow, serialization, diagnosticsConditions != null ? new StreamingJobDiagnostics(diagnosticsConditions?.ToList()) : null, etag, lastOutputEventTimestamps?.ToList(), watermarkSettings);
        }

        /// <summary> Initializes a new instance of StreamingJobOutputDataSource. </summary>
        /// <param name="outputDataSourceType"> Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.StreamingJobOutputDataSource"/> instance for mocking. </returns>
        public static StreamingJobOutputDataSource StreamingJobOutputDataSource(string outputDataSourceType = null)
        {
            return new UnknownOutputDataSource(outputDataSourceType);
        }

        /// <summary> Initializes a new instance of LastOutputEventTimestamp. </summary>
        /// <param name="lastOutputEventOn"> The last output event time. </param>
        /// <param name="lastUpdatedOn"> The time that the last update happened. </param>
        /// <returns> A new <see cref="Models.LastOutputEventTimestamp"/> instance for mocking. </returns>
        public static LastOutputEventTimestamp LastOutputEventTimestamp(DateTimeOffset? lastOutputEventOn = null, DateTimeOffset? lastUpdatedOn = null)
        {
            return new LastOutputEventTimestamp(lastOutputEventOn, lastUpdatedOn);
        }

        /// <summary> Initializes a new instance of StreamingJobOutputWatermarkProperties. </summary>
        /// <param name="watermarkMode"> The output watermark mode. </param>
        /// <param name="maxWatermarkDifferenceAcrossPartitions"> Describes the maximal delta between the fastest and slowest partitions, so the out of order window that catches all necessary events in downstream jobs is well defined. </param>
        /// <returns> A new <see cref="Models.StreamingJobOutputWatermarkProperties"/> instance for mocking. </returns>
        public static StreamingJobOutputWatermarkProperties StreamingJobOutputWatermarkProperties(StreamingJobOutputWatermarkMode? watermarkMode = null, string maxWatermarkDifferenceAcrossPartitions = null)
        {
            return new StreamingJobOutputWatermarkProperties(watermarkMode, maxWatermarkDifferenceAcrossPartitions);
        }

        /// <summary> Initializes a new instance of StreamingJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Describes the managed identity assigned to this job that can be used to authenticate with inputs and outputs. Current supported identity types: SystemAssigned, UserAssigned, SystemAssigned,UserAssigned. </param>
        /// <param name="skuName"> Describes the SKU of the streaming job. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="jobId"> A GUID uniquely identifying the streaming job. This GUID is generated upon creation of the streaming job. </param>
        /// <param name="provisioningState"> Describes the provisioning status of the streaming job. </param>
        /// <param name="jobState"> Describes the state of the streaming job. </param>
        /// <param name="jobType"> Describes the type of the job. Valid modes are `Cloud` and &apos;Edge&apos;. </param>
        /// <param name="outputStartMode"> This property should only be utilized when it is desired that the job be started immediately upon creation. Value may be JobStartTime, CustomTime, or LastOutputEventTime to indicate whether the starting point of the output event stream should start whenever the job is started, start at a custom user time stamp specified via the outputStartTime property, or start from the last event output time. </param>
        /// <param name="outputStartOn"> Value is either an ISO-8601 formatted time stamp that indicates the starting point of the output event stream, or null to indicate that the output event stream will start whenever the streaming job is started. This property must have a value if outputStartMode is set to CustomTime. </param>
        /// <param name="lastOutputEventOn"> Value is either an ISO-8601 formatted timestamp indicating the last output event time of the streaming job or null indicating that output has not yet been produced. In case of multiple outputs or multiple streams, this shows the latest value in that set. </param>
        /// <param name="eventsOutOfOrderPolicy"> Indicates the policy to apply to events that arrive out of order in the input event stream. </param>
        /// <param name="outputErrorPolicy"> Indicates the policy to apply to events that arrive at the output and cannot be written to the external storage due to being malformed (missing column values, column values of wrong type or size). </param>
        /// <param name="eventsOutOfOrderMaxDelayInSeconds"> The maximum tolerable delay in seconds where out-of-order events can be adjusted to be back in order. </param>
        /// <param name="eventsLateArrivalMaxDelayInSeconds"> The maximum tolerable delay in seconds where events arriving late could be included.  Supported range is -1 to 1814399 (20.23:59:59 days) and -1 is used to specify wait indefinitely. If the property is absent, it is interpreted to have a value of -1. </param>
        /// <param name="dataLocalion"> The data locale of the stream analytics job. Value should be the name of a supported .NET Culture from the set https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx. Defaults to &apos;en-US&apos; if none specified. </param>
        /// <param name="compatibilityLevel"> Controls certain runtime behaviors of the streaming job. </param>
        /// <param name="createdOn"> Value is an ISO-8601 formatted UTC timestamp indicating when the streaming job was created. </param>
        /// <param name="inputs"> A list of one or more inputs to the streaming job. The name property for each input is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual input. </param>
        /// <param name="transformation"> Indicates the query and the number of streaming units to use for the streaming job. The name property of the transformation is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual transformation. </param>
        /// <param name="outputs"> A list of one or more outputs for the streaming job. The name property for each output is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual output. </param>
        /// <param name="functions"> A list of one or more functions for the streaming job. The name property for each function is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual transformation. </param>
        /// <param name="etag"> The current entity tag for the streaming job. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="jobStorageAccount"> The properties that are associated with an Azure Storage account with MSI. </param>
        /// <param name="contentStoragePolicy"> Valid values are JobStorageAccount and SystemAccount. If set to JobStorageAccount, this requires the user to also specify jobStorageAccount property. . </param>
        /// <param name="externals"> The storage account where the custom code artifacts are located. </param>
        /// <param name="clusterId"> The cluster which streaming jobs will run on. </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamingJobData"/> instance for mocking. </returns>
        public static StreamingJobData StreamingJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, StreamAnalyticsSkuName? skuName = null, Guid? jobId = null, string provisioningState = null, string jobState = null, StreamingJobType? jobType = null, StreamingJobOutputStartMode? outputStartMode = null, DateTimeOffset? outputStartOn = null, DateTimeOffset? lastOutputEventOn = null, EventsOutOfOrderPolicy? eventsOutOfOrderPolicy = null, StreamingJobOutputErrorPolicy? outputErrorPolicy = null, int? eventsOutOfOrderMaxDelayInSeconds = null, int? eventsLateArrivalMaxDelayInSeconds = null, AzureLocation? dataLocalion = null, StreamingJobCompatibilityLevel? compatibilityLevel = null, DateTimeOffset? createdOn = null, IEnumerable<StreamingJobInputData> inputs = null, StreamingJobTransformationData transformation = null, IEnumerable<StreamingJobOutputData> outputs = null, IEnumerable<StreamingJobFunctionData> functions = null, ETag? etag = null, StreamingJobStorageAccount jobStorageAccount = null, StreamingJobContentStoragePolicy? contentStoragePolicy = null, StreamingJobExternal externals = null, ResourceIdentifier clusterId = null)
        {
            tags ??= new Dictionary<string, string>();
            inputs ??= new List<StreamingJobInputData>();
            outputs ??= new List<StreamingJobOutputData>();
            functions ??= new List<StreamingJobFunctionData>();

            return new StreamingJobData(id, name, resourceType, systemData, tags, location, identity, skuName != null ? new StreamAnalyticsSku(skuName) : null, jobId, provisioningState, jobState, jobType, outputStartMode, outputStartOn, lastOutputEventOn, eventsOutOfOrderPolicy, outputErrorPolicy, eventsOutOfOrderMaxDelayInSeconds, eventsLateArrivalMaxDelayInSeconds, dataLocalion, compatibilityLevel, createdOn, inputs?.ToList(), transformation, outputs?.ToList(), functions?.ToList(), etag, jobStorageAccount, contentStoragePolicy, externals, clusterId != null ? new ClusterInfo(clusterId) : null);
        }

        /// <summary> Initializes a new instance of StreamingJobTransformationData. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="streamingUnits"> Specifies the number of streaming units that the streaming job uses. </param>
        /// <param name="validStreamingUnits"> Specifies the valid streaming units a streaming job can scale to. </param>
        /// <param name="query"> Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="etag"> The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamingJobTransformationData"/> instance for mocking. </returns>
        public static StreamingJobTransformationData StreamingJobTransformationData(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, int? streamingUnits = null, IEnumerable<int> validStreamingUnits = null, string query = null, ETag? etag = null)
        {
            validStreamingUnits ??= new List<int>();

            return new StreamingJobTransformationData(id, name, resourceType, streamingUnits, validStreamingUnits?.ToList(), query, etag);
        }

        /// <summary> Initializes a new instance of StreamingJobStorageAccount. </summary>
        /// <param name="accountName"> The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="accountKey"> The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.StreamingJobStorageAccount"/> instance for mocking. </returns>
        public static StreamingJobStorageAccount StreamingJobStorageAccount(string accountName = null, string accountKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new StreamingJobStorageAccount(accountName, accountKey, authenticationMode);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsStorageAccount. </summary>
        /// <param name="accountName"> The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="accountKey"> The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsStorageAccount"/> instance for mocking. </returns>
        public static StreamAnalyticsStorageAccount StreamAnalyticsStorageAccount(string accountName = null, string accountKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new StreamAnalyticsStorageAccount(accountName, accountKey, authenticationMode);
        }

        /// <summary> Initializes a new instance of StreamingJobExternal. </summary>
        /// <param name="storageAccount"> The properties that are associated with an Azure Storage account. </param>
        /// <param name="container"> The UserCustomCode container. </param>
        /// <param name="path"> The UserCustomCode path. </param>
        /// <param name="refreshConfiguration"> The refresh parameters for any/all updatable user defined functions present in the job config. </param>
        /// <returns> A new <see cref="Models.StreamingJobExternal"/> instance for mocking. </returns>
        public static StreamingJobExternal StreamingJobExternal(StreamAnalyticsStorageAccount storageAccount = null, string container = null, string path = null, StreamingJobRefreshConfiguration refreshConfiguration = null)
        {
            return new StreamingJobExternal(storageAccount, container, path, refreshConfiguration);
        }

        /// <summary> Initializes a new instance of StreamingJobRefreshConfiguration. </summary>
        /// <param name="pathPattern"> The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example. </param>
        /// <param name="dateFormat"> The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead. </param>
        /// <param name="timeFormat"> The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead. </param>
        /// <param name="refreshInterval"> The refresh interval. </param>
        /// <param name="refreshType"> This property indicates which data refresh option to use, Blocking or Nonblocking. </param>
        /// <returns> A new <see cref="Models.StreamingJobRefreshConfiguration"/> instance for mocking. </returns>
        public static StreamingJobRefreshConfiguration StreamingJobRefreshConfiguration(string pathPattern = null, string dateFormat = null, string timeFormat = null, string refreshInterval = null, DataRefreshType? refreshType = null)
        {
            return new StreamingJobRefreshConfiguration(pathPattern, dateFormat, timeFormat, refreshInterval, refreshType);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsSubscriptionQuota. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="maxCount"> The max permitted usage of this resource. </param>
        /// <param name="currentCount"> The current usage of this resource. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsSubscriptionQuota"/> instance for mocking. </returns>
        public static StreamAnalyticsSubscriptionQuota StreamAnalyticsSubscriptionQuota(ResourceIdentifier id = null, string name = null, ResourceType? resourceType = null, int? maxCount = null, int? currentCount = null)
        {
            return new StreamAnalyticsSubscriptionQuota(id, name, resourceType, maxCount, currentCount);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsQueryTestingResult. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="status"> The status of the query testing request. </param>
        /// <param name="outputUri"> The SAS URL to the outputs payload. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsQueryTestingResult"/> instance for mocking. </returns>
        public static StreamAnalyticsQueryTestingResult StreamAnalyticsQueryTestingResult(string code = null, string message = null, string target = null, IEnumerable<StreamAnalyticsErrorDetails> details = null, StreamAnalyticsQueryTestingResultStatus? status = null, Uri outputUri = null)
        {
            details ??= new List<StreamAnalyticsErrorDetails>();

            return new StreamAnalyticsQueryTestingResult(code, message, target, details?.ToList(), status, outputUri);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsQueryCompilationResult. </summary>
        /// <param name="errors"> Error messages produced by the compiler. </param>
        /// <param name="warnings"> Warning messages produced by the compiler. </param>
        /// <param name="inputs"> All input names used by the query. </param>
        /// <param name="outputs"> All output names used by the query. </param>
        /// <param name="functions"> All function names used by the query. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsQueryCompilationResult"/> instance for mocking. </returns>
        public static StreamAnalyticsQueryCompilationResult StreamAnalyticsQueryCompilationResult(IEnumerable<StreamAnalyticsQueryCompilationError> errors = null, IEnumerable<string> warnings = null, IEnumerable<string> inputs = null, IEnumerable<string> outputs = null, IEnumerable<string> functions = null)
        {
            errors ??= new List<StreamAnalyticsQueryCompilationError>();
            warnings ??= new List<string>();
            inputs ??= new List<string>();
            outputs ??= new List<string>();
            functions ??= new List<string>();

            return new StreamAnalyticsQueryCompilationResult(errors?.ToList(), warnings?.ToList(), inputs?.ToList(), outputs?.ToList(), functions?.ToList());
        }

        /// <summary> Initializes a new instance of StreamAnalyticsQueryCompilationError. </summary>
        /// <param name="message"> The content of the error message. </param>
        /// <param name="startLine"> Describes the error location in the original query. Not set if isGlobal is true. </param>
        /// <param name="startColumn"> Describes the error location in the original query. Not set if isGlobal is true. </param>
        /// <param name="endLine"> Describes the error location in the original query. Not set if isGlobal is true. </param>
        /// <param name="endColumn"> Describes the error location in the original query. Not set if isGlobal is true. </param>
        /// <param name="isGlobal"> Whether the error is not for a specific part but for the entire query. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsQueryCompilationError"/> instance for mocking. </returns>
        public static StreamAnalyticsQueryCompilationError StreamAnalyticsQueryCompilationError(string message = null, int? startLine = null, int? startColumn = null, int? endLine = null, int? endColumn = null, bool? isGlobal = null)
        {
            return new StreamAnalyticsQueryCompilationError(message, startLine, startColumn, endLine, endColumn, isGlobal);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsSampleInputResult. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="status"> The status of the sample input request. </param>
        /// <param name="diagnostics"> Diagnostics messages. E.g. message indicating some partitions from the input have no data. </param>
        /// <param name="eventsDownloadUri"> A SAS URL to download the sampled input data. </param>
        /// <param name="lastArrivedOn"> The timestamp for the last event in the data. It is in DateTime format. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsSampleInputResult"/> instance for mocking. </returns>
        public static StreamAnalyticsSampleInputResult StreamAnalyticsSampleInputResult(string code = null, string message = null, string target = null, IEnumerable<StreamAnalyticsErrorDetails> details = null, StreamAnalyticsSampleInputResultStatus? status = null, IEnumerable<string> diagnostics = null, Uri eventsDownloadUri = null, DateTimeOffset? lastArrivedOn = null)
        {
            details ??= new List<StreamAnalyticsErrorDetails>();
            diagnostics ??= new List<string>();

            return new StreamAnalyticsSampleInputResult(code, message, target, details?.ToList(), status, diagnostics?.ToList(), eventsDownloadUri, lastArrivedOn);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsTestDatasourceResult. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Error target. </param>
        /// <param name="details"> Error details. </param>
        /// <param name="status"> The status of the sample output request. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsTestDatasourceResult"/> instance for mocking. </returns>
        public static StreamAnalyticsTestDatasourceResult StreamAnalyticsTestDatasourceResult(string code = null, string message = null, string target = null, IEnumerable<StreamAnalyticsErrorDetails> details = null, StreamAnalyticsTestDatasourceResultStatus? status = null)
        {
            details ??= new List<StreamAnalyticsErrorDetails>();

            return new StreamAnalyticsTestDatasourceResult(code, message, target, details?.ToList(), status);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests. </param>
        /// <param name="etag"> The current entity tag for the cluster. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="properties"> The properties associated with a Stream Analytics cluster. </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamAnalyticsClusterData"/> instance for mocking. </returns>
        public static StreamAnalyticsClusterData StreamAnalyticsClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StreamAnalyticsClusterSku sku = null, ETag? etag = null, StreamAnalyticsClusterProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StreamAnalyticsClusterData(id, name, resourceType, systemData, tags, location, sku, etag, properties);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsClusterSku. </summary>
        /// <param name="name"> Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests. </param>
        /// <param name="capacity"> Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsClusterSku"/> instance for mocking. </returns>
        public static StreamAnalyticsClusterSku StreamAnalyticsClusterSku(StreamAnalyticsClusterSkuName? name = null, int? capacity = null)
        {
            return new StreamAnalyticsClusterSku(name, capacity);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsClusterProperties. </summary>
        /// <param name="createdOn"> The date this cluster was created. </param>
        /// <param name="clusterId"> Unique identifier for the cluster. </param>
        /// <param name="provisioningState"> The status of the cluster provisioning. The three terminal states are: Succeeded, Failed and Canceled. </param>
        /// <param name="capacityAllocated"> Represents the number of streaming units currently being used on the cluster. </param>
        /// <param name="capacityAssigned"> Represents the sum of the SUs of all streaming jobs associated with the cluster. If all of the jobs were running, this would be the capacity allocated. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsClusterProperties"/> instance for mocking. </returns>
        public static StreamAnalyticsClusterProperties StreamAnalyticsClusterProperties(DateTimeOffset? createdOn = null, Guid? clusterId = null, StreamAnalyticsClusterProvisioningState? provisioningState = null, int? capacityAllocated = null, int? capacityAssigned = null)
        {
            return new StreamAnalyticsClusterProperties(createdOn, clusterId, provisioningState, capacityAllocated, capacityAssigned);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsClusterJob. </summary>
        /// <param name="id"> Resource ID of the streaming job. </param>
        /// <param name="streamingUnits"> The number of streaming units that are used by the streaming job. </param>
        /// <param name="jobState"> The current execution state of the streaming job. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsClusterJob"/> instance for mocking. </returns>
        public static StreamAnalyticsClusterJob StreamAnalyticsClusterJob(ResourceIdentifier id = null, int? streamingUnits = null, StreamingJobState? jobState = null)
        {
            return new StreamAnalyticsClusterJob(id, streamingUnits, jobState);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsPrivateEndpointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The properties associated with a private endpoint. </param>
        /// <param name="etag"> Unique opaque string (generally a GUID) that represents the metadata state of the resource (private endpoint) and changes whenever the resource is updated. Required on PUT (CreateOrUpdate) requests. </param>
        /// <returns> A new <see cref="StreamAnalytics.StreamAnalyticsPrivateEndpointData"/> instance for mocking. </returns>
        public static StreamAnalyticsPrivateEndpointData StreamAnalyticsPrivateEndpointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, StreamAnalyticsPrivateEndpointProperties properties = null, ETag? etag = null)
        {
            return new StreamAnalyticsPrivateEndpointData(id, name, resourceType, systemData, properties, etag);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsPrivateEndpointProperties. </summary>
        /// <param name="createdOn"> The date when this private endpoint was created. </param>
        /// <param name="manualPrivateLinkServiceConnections"> A list of connections to the remote resource. Immutable after it is set. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsPrivateEndpointProperties"/> instance for mocking. </returns>
        public static StreamAnalyticsPrivateEndpointProperties StreamAnalyticsPrivateEndpointProperties(DateTimeOffset? createdOn = null, IEnumerable<StreamAnalyticsPrivateLinkServiceConnection> manualPrivateLinkServiceConnections = null)
        {
            manualPrivateLinkServiceConnections ??= new List<StreamAnalyticsPrivateLinkServiceConnection>();

            return new StreamAnalyticsPrivateEndpointProperties(createdOn, manualPrivateLinkServiceConnections?.ToList());
        }

        /// <summary> Initializes a new instance of StreamAnalyticsPrivateLinkServiceConnection. </summary>
        /// <param name="privateLinkServiceId"> The resource id of the private link service. Required on PUT (CreateOrUpdate) requests. </param>
        /// <param name="groupIds"> The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to. Required on PUT (CreateOrUpdate) requests. </param>
        /// <param name="requestMessage"> A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars. </param>
        /// <param name="privateLinkServiceConnectionState"> A collection of read-only information about the state of the connection to the private remote resource. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsPrivateLinkServiceConnection"/> instance for mocking. </returns>
        public static StreamAnalyticsPrivateLinkServiceConnection StreamAnalyticsPrivateLinkServiceConnection(ResourceIdentifier privateLinkServiceId = null, IEnumerable<string> groupIds = null, string requestMessage = null, StreamAnalyticsPrivateLinkConnectionState privateLinkServiceConnectionState = null)
        {
            groupIds ??= new List<string>();

            return new StreamAnalyticsPrivateLinkServiceConnection(privateLinkServiceId, groupIds?.ToList(), requestMessage, privateLinkServiceConnectionState);
        }

        /// <summary> Initializes a new instance of StreamAnalyticsPrivateLinkConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the remote resource/service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.StreamAnalyticsPrivateLinkConnectionState"/> instance for mocking. </returns>
        public static StreamAnalyticsPrivateLinkConnectionState StreamAnalyticsPrivateLinkConnectionState(string status = null, string description = null, string actionsRequired = null)
        {
            return new StreamAnalyticsPrivateLinkConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of ScalarFunctionProperties. </summary>
        /// <param name="etag"> The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="inputs"></param>
        /// <param name="outputDataType"> Describes the output of a function. </param>
        /// <param name="binding">
        /// The physical binding of the function. For example, in the Azure Machine Learning web serviceâ€™s case, this describes the endpoint.
        /// Please note <see cref="StreamingJobFunctionBinding"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EMachineLearningStudioFunctionBinding"/>, <see cref="MachineLearningServiceFunctionBinding"/>, <see cref="CSharpFunctionBinding"/> and <see cref="JavaScriptFunctionBinding"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ScalarFunctionProperties"/> instance for mocking. </returns>
        public static ScalarFunctionProperties ScalarFunctionProperties(ETag? etag = null, IEnumerable<StreamingJobFunctionInput> inputs = null, string outputDataType = null, StreamingJobFunctionBinding binding = null)
        {
            inputs ??= new List<StreamingJobFunctionInput>();

            return new ScalarFunctionProperties("Scalar", etag, inputs?.ToList(), outputDataType != null ? new StreamingJobFunctionOutput(outputDataType) : null, binding);
        }

        /// <summary> Initializes a new instance of EMachineLearningStudioFunctionBinding. </summary>
        /// <param name="endpoint"> The Request-Response execute endpoint of the Azure Machine Learning Studio. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs. </param>
        /// <param name="apiKey"> The API key used to authenticate with Request-Response endpoint. </param>
        /// <param name="inputs"> The inputs for the Azure Machine Learning Studio endpoint. </param>
        /// <param name="outputs"> A list of outputs from the Azure Machine Learning Studio endpoint execution. </param>
        /// <param name="batchSize"> Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000. </param>
        /// <returns> A new <see cref="Models.EMachineLearningStudioFunctionBinding"/> instance for mocking. </returns>
        public static EMachineLearningStudioFunctionBinding EMachineLearningStudioFunctionBinding(string endpoint = null, string apiKey = null, MachineLearningStudioInputs inputs = null, IEnumerable<MachineLearningStudioOutputColumn> outputs = null, int? batchSize = null)
        {
            outputs ??= new List<MachineLearningStudioOutputColumn>();

            return new EMachineLearningStudioFunctionBinding("Microsoft.MachineLearning/WebService", endpoint, apiKey, inputs, outputs?.ToList(), batchSize);
        }

        /// <summary> Initializes a new instance of MachineLearningStudioInputs. </summary>
        /// <param name="name"> The name of the input. This is the name provided while authoring the endpoint. </param>
        /// <param name="columnNames"> A list of input columns for the Azure Machine Learning Studio endpoint. </param>
        /// <returns> A new <see cref="Models.MachineLearningStudioInputs"/> instance for mocking. </returns>
        public static MachineLearningStudioInputs MachineLearningStudioInputs(string name = null, IEnumerable<MachineLearningStudioInputColumn> columnNames = null)
        {
            columnNames ??= new List<MachineLearningStudioInputColumn>();

            return new MachineLearningStudioInputs(name, columnNames?.ToList());
        }

        /// <summary> Initializes a new instance of MachineLearningStudioInputColumn. </summary>
        /// <param name="name"> The name of the input column. </param>
        /// <param name="dataType"> The (Azure Machine Learning supported) data type of the input column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx . </param>
        /// <param name="mapTo"> The zero based index of the function parameter this input maps to. </param>
        /// <returns> A new <see cref="Models.MachineLearningStudioInputColumn"/> instance for mocking. </returns>
        public static MachineLearningStudioInputColumn MachineLearningStudioInputColumn(string name = null, string dataType = null, int? mapTo = null)
        {
            return new MachineLearningStudioInputColumn(name, dataType, mapTo);
        }

        /// <summary> Initializes a new instance of MachineLearningStudioOutputColumn. </summary>
        /// <param name="name"> The name of the output column. </param>
        /// <param name="dataType"> The (Azure Machine Learning supported) data type of the output column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx . </param>
        /// <returns> A new <see cref="Models.MachineLearningStudioOutputColumn"/> instance for mocking. </returns>
        public static MachineLearningStudioOutputColumn MachineLearningStudioOutputColumn(string name = null, string dataType = null)
        {
            return new MachineLearningStudioOutputColumn(name, dataType);
        }

        /// <summary> Initializes a new instance of JavaScriptFunctionBinding. </summary>
        /// <param name="script"> The JavaScript code containing a single function definition. For example: &apos;function (x, y) { return x + y; }&apos;. </param>
        /// <returns> A new <see cref="Models.JavaScriptFunctionBinding"/> instance for mocking. </returns>
        public static JavaScriptFunctionBinding JavaScriptFunctionBinding(string script = null)
        {
            return new JavaScriptFunctionBinding("Microsoft.StreamAnalytics/JavascriptUdf", script);
        }

        /// <summary> Initializes a new instance of CSharpFunctionBinding. </summary>
        /// <param name="dllPath"> The Csharp code containing a single function definition. </param>
        /// <param name="class"> The Csharp code containing a single function definition. </param>
        /// <param name="method"> The Csharp code containing a single function definition. </param>
        /// <param name="updateMode"> Refresh modes for Stream Analytics functions. </param>
        /// <returns> A new <see cref="Models.CSharpFunctionBinding"/> instance for mocking. </returns>
        public static CSharpFunctionBinding CSharpFunctionBinding(string dllPath = null, string @class = null, string method = null, StreamingJobFunctionUpdateMode? updateMode = null)
        {
            return new CSharpFunctionBinding("Microsoft.StreamAnalytics/CLRUdf", dllPath, @class, method, updateMode);
        }

        /// <summary> Initializes a new instance of MachineLearningServiceFunctionBinding. </summary>
        /// <param name="endpoint"> The Request-Response execute endpoint of the Azure Machine Learning web service. </param>
        /// <param name="apiKey"> The API key used to authenticate with Request-Response endpoint. </param>
        /// <param name="inputs"> The inputs for the Azure Machine Learning web service endpoint. </param>
        /// <param name="outputs"> A list of outputs from the Azure Machine Learning web service endpoint execution. </param>
        /// <param name="batchSize"> Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000. </param>
        /// <param name="numberOfParallelRequests"> The number of parallel requests that will be sent per partition of your job to the machine learning service. Default is 1. </param>
        /// <param name="inputRequestName"> Label for the input request object. </param>
        /// <param name="outputResponseName"> Label for the output request object. </param>
        /// <returns> A new <see cref="Models.MachineLearningServiceFunctionBinding"/> instance for mocking. </returns>
        public static MachineLearningServiceFunctionBinding MachineLearningServiceFunctionBinding(string endpoint = null, string apiKey = null, IEnumerable<MachineLearningServiceInputColumn> inputs = null, IEnumerable<MachineLearningServiceOutputColumn> outputs = null, int? batchSize = null, int? numberOfParallelRequests = null, string inputRequestName = null, string outputResponseName = null)
        {
            inputs ??= new List<MachineLearningServiceInputColumn>();
            outputs ??= new List<MachineLearningServiceOutputColumn>();

            return new MachineLearningServiceFunctionBinding("Microsoft.MachineLearningServices", endpoint, apiKey, inputs?.ToList(), outputs?.ToList(), batchSize, numberOfParallelRequests, inputRequestName, outputResponseName);
        }

        /// <summary> Initializes a new instance of MachineLearningServiceInputColumn. </summary>
        /// <param name="name"> The name of the input column. </param>
        /// <param name="dataType"> The (Azure Machine Learning supported) data type of the input column. </param>
        /// <param name="mapTo"> The zero based index of the function parameter this input maps to. </param>
        /// <returns> A new <see cref="Models.MachineLearningServiceInputColumn"/> instance for mocking. </returns>
        public static MachineLearningServiceInputColumn MachineLearningServiceInputColumn(string name = null, string dataType = null, int? mapTo = null)
        {
            return new MachineLearningServiceInputColumn(name, dataType, mapTo);
        }

        /// <summary> Initializes a new instance of MachineLearningServiceOutputColumn. </summary>
        /// <param name="name"> The name of the output column. </param>
        /// <param name="dataType"> The (Azure Machine Learning supported) data type of the output column. </param>
        /// <param name="mapTo"> The zero based index of the function parameter this input maps to. </param>
        /// <returns> A new <see cref="Models.MachineLearningServiceOutputColumn"/> instance for mocking. </returns>
        public static MachineLearningServiceOutputColumn MachineLearningServiceOutputColumn(string name = null, string dataType = null, int? mapTo = null)
        {
            return new MachineLearningServiceOutputColumn(name, dataType, mapTo);
        }

        /// <summary> Initializes a new instance of AggregateFunctionProperties. </summary>
        /// <param name="etag"> The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="inputs"></param>
        /// <param name="outputDataType"> Describes the output of a function. </param>
        /// <param name="binding">
        /// The physical binding of the function. For example, in the Azure Machine Learning web serviceâ€™s case, this describes the endpoint.
        /// Please note <see cref="StreamingJobFunctionBinding"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="EMachineLearningStudioFunctionBinding"/>, <see cref="MachineLearningServiceFunctionBinding"/>, <see cref="CSharpFunctionBinding"/> and <see cref="JavaScriptFunctionBinding"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AggregateFunctionProperties"/> instance for mocking. </returns>
        public static AggregateFunctionProperties AggregateFunctionProperties(ETag? etag = null, IEnumerable<StreamingJobFunctionInput> inputs = null, string outputDataType = null, StreamingJobFunctionBinding binding = null)
        {
            inputs ??= new List<StreamingJobFunctionInput>();

            return new AggregateFunctionProperties("Aggregate", etag, inputs?.ToList(), outputDataType != null ? new StreamingJobFunctionOutput(outputDataType) : null, binding);
        }

        /// <summary> Initializes a new instance of StreamInputProperties. </summary>
        /// <param name="serialization">
        /// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamAnalyticsDataSerialization"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormatSerialization"/>, <see cref="CsvFormatSerialization"/>, <see cref="CustomClrFormatSerialization"/>, <see cref="JsonFormatSerialization"/> and <see cref="ParquetFormatSerialization"/>.
        /// </param>
        /// <param name="diagnosticsConditions"> Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention. </param>
        /// <param name="etag"> The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="compressionType"> Describes how input data is compressed. </param>
        /// <param name="partitionKey"> partitionKey Describes a key in the input data which is used for partitioning the input data. </param>
        /// <param name="watermarkMode"> Settings which determine whether to read watermark events. </param>
        /// <param name="datasource">
        /// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamInputDataSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="GatewayMessageBusStreamInputDataSource"/>, <see cref="IoTHubStreamInputDataSource"/>, <see cref="EventGridStreamInputDataSource"/>, <see cref="EventHubV2StreamInputDataSource"/>, <see cref="EventHubStreamInputDataSource"/>, <see cref="BlobStreamInputDataSource"/> and <see cref="RawStreamInputDataSource"/>.
        /// </param>
        /// <returns> A new <see cref="Models.StreamInputProperties"/> instance for mocking. </returns>
        public static StreamInputProperties StreamInputProperties(StreamAnalyticsDataSerialization serialization = null, IEnumerable<StreamingJobDiagnosticCondition> diagnosticsConditions = null, ETag? etag = null, StreamingCompressionType? compressionType = null, string partitionKey = null, StreamingJobInputWatermarkMode? watermarkMode = null, StreamInputDataSource datasource = null)
        {
            diagnosticsConditions ??= new List<StreamingJobDiagnosticCondition>();

            return new StreamInputProperties("Stream", serialization, diagnosticsConditions != null ? new StreamingJobDiagnostics(diagnosticsConditions?.ToList()) : null, etag, compressionType.HasValue ? new StreamingCompression(compressionType.Value) : null, partitionKey, watermarkMode != null ? new StreamingJobInputWatermarkProperties(watermarkMode) : null, datasource);
        }

        /// <summary> Initializes a new instance of StreamInputDataSource. </summary>
        /// <param name="streamInputDataSourceType"> Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.StreamInputDataSource"/> instance for mocking. </returns>
        public static StreamInputDataSource StreamInputDataSource(string streamInputDataSourceType = null)
        {
            return new UnknownStreamInputDataSource(streamInputDataSourceType);
        }

        /// <summary> Initializes a new instance of ReferenceInputProperties. </summary>
        /// <param name="serialization">
        /// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="StreamAnalyticsDataSerialization"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormatSerialization"/>, <see cref="CsvFormatSerialization"/>, <see cref="CustomClrFormatSerialization"/>, <see cref="JsonFormatSerialization"/> and <see cref="ParquetFormatSerialization"/>.
        /// </param>
        /// <param name="diagnosticsConditions"> Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention. </param>
        /// <param name="etag"> The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. </param>
        /// <param name="compressionType"> Describes how input data is compressed. </param>
        /// <param name="partitionKey"> partitionKey Describes a key in the input data which is used for partitioning the input data. </param>
        /// <param name="watermarkMode"> Settings which determine whether to read watermark events. </param>
        /// <param name="datasource">
        /// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
        /// Please note <see cref="ReferenceInputDataSource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SqlReferenceInputDataSource"/>, <see cref="BlobReferenceInputDataSource"/> and <see cref="RawReferenceInputDataSource"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ReferenceInputProperties"/> instance for mocking. </returns>
        public static ReferenceInputProperties ReferenceInputProperties(StreamAnalyticsDataSerialization serialization = null, IEnumerable<StreamingJobDiagnosticCondition> diagnosticsConditions = null, ETag? etag = null, StreamingCompressionType? compressionType = null, string partitionKey = null, StreamingJobInputWatermarkMode? watermarkMode = null, ReferenceInputDataSource datasource = null)
        {
            diagnosticsConditions ??= new List<StreamingJobDiagnosticCondition>();

            return new ReferenceInputProperties("Reference", serialization, diagnosticsConditions != null ? new StreamingJobDiagnostics(diagnosticsConditions?.ToList()) : null, etag, compressionType.HasValue ? new StreamingCompression(compressionType.Value) : null, partitionKey, watermarkMode != null ? new StreamingJobInputWatermarkProperties(watermarkMode) : null, datasource);
        }

        /// <summary> Initializes a new instance of ReferenceInputDataSource. </summary>
        /// <param name="referenceInputDataSourceType"> Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.ReferenceInputDataSource"/> instance for mocking. </returns>
        public static ReferenceInputDataSource ReferenceInputDataSource(string referenceInputDataSourceType = null)
        {
            return new UnknownReferenceInputDataSource(referenceInputDataSourceType);
        }

        /// <summary> Initializes a new instance of BlobStreamInputDataSource. </summary>
        /// <param name="storageAccounts"> A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="container"> The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="pathPattern"> The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example. </param>
        /// <param name="dateFormat"> The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead. </param>
        /// <param name="timeFormat"> The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="sourcePartitionCount"> The partition count of the blob input data source. Range 1 - 1024. </param>
        /// <returns> A new <see cref="Models.BlobStreamInputDataSource"/> instance for mocking. </returns>
        public static BlobStreamInputDataSource BlobStreamInputDataSource(IEnumerable<StreamAnalyticsStorageAccount> storageAccounts = null, string container = null, string pathPattern = null, string dateFormat = null, string timeFormat = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, int? sourcePartitionCount = null)
        {
            storageAccounts ??= new List<StreamAnalyticsStorageAccount>();

            return new BlobStreamInputDataSource("Microsoft.Storage/Blob", storageAccounts?.ToList(), container, pathPattern, dateFormat, timeFormat, authenticationMode, sourcePartitionCount);
        }

        /// <summary> Initializes a new instance of EventHubStreamInputDataSource. </summary>
        /// <param name="serviceBusNamespace"> The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="eventHubName"> The name of the Event Hub. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="partitionCount"> The partition count of the event hub data source. Range 1 - 256. </param>
        /// <param name="consumerGroupName"> The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hubâ€™s default consumer group. </param>
        /// <param name="prefetchCount"> The number of messages that the message receiver can simultaneously request. </param>
        /// <returns> A new <see cref="Models.EventHubStreamInputDataSource"/> instance for mocking. </returns>
        public static EventHubStreamInputDataSource EventHubStreamInputDataSource(string serviceBusNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string eventHubName = null, int? partitionCount = null, string consumerGroupName = null, int? prefetchCount = null)
        {
            return new EventHubStreamInputDataSource("Microsoft.ServiceBus/EventHub", serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, authenticationMode, eventHubName, partitionCount, consumerGroupName, prefetchCount);
        }

        /// <summary> Initializes a new instance of EventHubV2StreamInputDataSource. </summary>
        /// <param name="serviceBusNamespace"> The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="eventHubName"> The name of the Event Hub. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="partitionCount"> The partition count of the event hub data source. Range 1 - 256. </param>
        /// <param name="consumerGroupName"> The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hubâ€™s default consumer group. </param>
        /// <param name="prefetchCount"> The number of messages that the message receiver can simultaneously request. </param>
        /// <returns> A new <see cref="Models.EventHubV2StreamInputDataSource"/> instance for mocking. </returns>
        public static EventHubV2StreamInputDataSource EventHubV2StreamInputDataSource(string serviceBusNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string eventHubName = null, int? partitionCount = null, string consumerGroupName = null, int? prefetchCount = null)
        {
            return new EventHubV2StreamInputDataSource("Microsoft.EventHub/EventHub", serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, authenticationMode, eventHubName, partitionCount, consumerGroupName, prefetchCount);
        }

        /// <summary> Initializes a new instance of IoTHubStreamInputDataSource. </summary>
        /// <param name="iotHubNamespace"> The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="consumerGroupName"> The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hubâ€™s default consumer group. </param>
        /// <param name="endpoint"> The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.). </param>
        /// <returns> A new <see cref="Models.IoTHubStreamInputDataSource"/> instance for mocking. </returns>
        public static IoTHubStreamInputDataSource IoTHubStreamInputDataSource(string iotHubNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, string consumerGroupName = null, string endpoint = null)
        {
            return new IoTHubStreamInputDataSource("Microsoft.Devices/IotHubs", iotHubNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, consumerGroupName, endpoint);
        }

        /// <summary> Initializes a new instance of RawStreamInputDataSource. </summary>
        /// <param name="payload"> The JSON serialized content of the input data. Either payload or payloadUri must be set, but not both. </param>
        /// <param name="payloadUri"> The SAS URL to a blob containing the JSON serialized content of the input data. Either payload or payloadUri must be set, but not both. </param>
        /// <returns> A new <see cref="Models.RawStreamInputDataSource"/> instance for mocking. </returns>
        public static RawStreamInputDataSource RawStreamInputDataSource(BinaryData payload = null, Uri payloadUri = null)
        {
            return new RawStreamInputDataSource("Raw", payload, payloadUri);
        }

        /// <summary> Initializes a new instance of BlobReferenceInputDataSource. </summary>
        /// <param name="storageAccounts"> A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="container"> The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="pathPattern"> The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example. </param>
        /// <param name="dateFormat"> The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead. </param>
        /// <param name="timeFormat"> The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="blobName"> The name of the blob input. </param>
        /// <param name="deltaPathPattern"> The path pattern of the delta snapshot. </param>
        /// <param name="sourcePartitionCount"> The partition count of the blob input data source. Range 1 - 256. </param>
        /// <param name="fullSnapshotRefreshInterval"> The refresh interval of the blob input data source. </param>
        /// <param name="deltaSnapshotRefreshInterval"> The interval that the user generates a delta snapshot of this reference blob input data source. </param>
        /// <returns> A new <see cref="Models.BlobReferenceInputDataSource"/> instance for mocking. </returns>
        public static BlobReferenceInputDataSource BlobReferenceInputDataSource(IEnumerable<StreamAnalyticsStorageAccount> storageAccounts = null, string container = null, string pathPattern = null, string dateFormat = null, string timeFormat = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string blobName = null, string deltaPathPattern = null, int? sourcePartitionCount = null, TimeSpan? fullSnapshotRefreshInterval = null, TimeSpan? deltaSnapshotRefreshInterval = null)
        {
            storageAccounts ??= new List<StreamAnalyticsStorageAccount>();

            return new BlobReferenceInputDataSource("Microsoft.Storage/Blob", storageAccounts?.ToList(), container, pathPattern, dateFormat, timeFormat, authenticationMode, blobName, deltaPathPattern, sourcePartitionCount, fullSnapshotRefreshInterval, deltaSnapshotRefreshInterval);
        }

        /// <summary> Initializes a new instance of RawReferenceInputDataSource. </summary>
        /// <param name="payload"> The JSON serialized content of the input data. Either payload or payloadUri must be set, but not both. </param>
        /// <param name="payloadUri"> The SAS URL to a blob containing the JSON serialized content of the input data. Either payload or payloadUri must be set, but not both. </param>
        /// <returns> A new <see cref="Models.RawReferenceInputDataSource"/> instance for mocking. </returns>
        public static RawReferenceInputDataSource RawReferenceInputDataSource(BinaryData payload = null, Uri payloadUri = null)
        {
            return new RawReferenceInputDataSource("Raw", payload, payloadUri);
        }

        /// <summary> Initializes a new instance of ParquetFormatSerialization. </summary>
        /// <param name="properties"> The properties that are associated with the Parquet serialization type. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.ParquetFormatSerialization"/> instance for mocking. </returns>
        public static ParquetFormatSerialization ParquetFormatSerialization(BinaryData properties = null)
        {
            return new ParquetFormatSerialization(EventSerializationType.Parquet, properties);
        }

        /// <summary> Initializes a new instance of CustomClrFormatSerialization. </summary>
        /// <param name="serializationDllPath"> The serialization library path. </param>
        /// <param name="serializationClassName"> The serialization class name. </param>
        /// <returns> A new <see cref="Models.CustomClrFormatSerialization"/> instance for mocking. </returns>
        public static CustomClrFormatSerialization CustomClrFormatSerialization(string serializationDllPath = null, string serializationClassName = null)
        {
            return new CustomClrFormatSerialization(EventSerializationType.CustomClr, serializationDllPath, serializationClassName);
        }

        /// <summary> Initializes a new instance of CsvFormatSerialization. </summary>
        /// <param name="fieldDelimiter"> Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="encoding"> Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.CsvFormatSerialization"/> instance for mocking. </returns>
        public static CsvFormatSerialization CsvFormatSerialization(string fieldDelimiter = null, StreamAnalyticsDataSerializationEncoding? encoding = null)
        {
            return new CsvFormatSerialization(EventSerializationType.Csv, fieldDelimiter, encoding);
        }

        /// <summary> Initializes a new instance of JsonFormatSerialization. </summary>
        /// <param name="encoding"> Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="format"> This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are &apos;lineSeparated&apos; indicating the output will be formatted by having each JSON object separated by a new line and &apos;array&apos; indicating the output will be formatted as an array of JSON objects. Default value is &apos;lineSeparated&apos; if left null. </param>
        /// <returns> A new <see cref="Models.JsonFormatSerialization"/> instance for mocking. </returns>
        public static JsonFormatSerialization JsonFormatSerialization(StreamAnalyticsDataSerializationEncoding? encoding = null, JsonOutputSerializationFormat? format = null)
        {
            return new JsonFormatSerialization(EventSerializationType.Json, encoding, format);
        }

        /// <summary> Initializes a new instance of AvroFormatSerialization. </summary>
        /// <param name="properties"> The properties that are associated with the Avro serialization type. Required on PUT (CreateOrReplace) requests. </param>
        /// <returns> A new <see cref="Models.AvroFormatSerialization"/> instance for mocking. </returns>
        public static AvroFormatSerialization AvroFormatSerialization(BinaryData properties = null)
        {
            return new AvroFormatSerialization(EventSerializationType.Avro, properties);
        }

        /// <summary> Initializes a new instance of SqlReferenceInputDataSource. </summary>
        /// <param name="server"> This element is associated with the datasource element. This is the name of the server that contains the database that will be written to. </param>
        /// <param name="database"> This element is associated with the datasource element. This is the name of the database that output will be written to. </param>
        /// <param name="user"> This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance. </param>
        /// <param name="password"> This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance. </param>
        /// <param name="refreshType"> Indicates the type of data refresh option. </param>
        /// <param name="refreshInterval"> This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format. </param>
        /// <param name="fullSnapshotQuery"> This element is associated with the datasource element. This query is used to fetch data from the sql database. </param>
        /// <param name="deltaSnapshotQuery"> This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.SqlReferenceInputDataSource"/> instance for mocking. </returns>
        public static SqlReferenceInputDataSource SqlReferenceInputDataSource(string server = null, string database = null, string user = null, string password = null, DataRefreshType? refreshType = null, TimeSpan? refreshInterval = null, string fullSnapshotQuery = null, string deltaSnapshotQuery = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new SqlReferenceInputDataSource("Microsoft.Sql/Server/Database", server, database, user, password, refreshType, refreshInterval, fullSnapshotQuery, deltaSnapshotQuery, authenticationMode);
        }

        /// <summary> Initializes a new instance of GatewayMessageBusStreamInputDataSource. </summary>
        /// <param name="topic"> The name of the Service Bus topic. </param>
        /// <returns> A new <see cref="Models.GatewayMessageBusStreamInputDataSource"/> instance for mocking. </returns>
        public static GatewayMessageBusStreamInputDataSource GatewayMessageBusStreamInputDataSource(string topic = null)
        {
            return new GatewayMessageBusStreamInputDataSource("GatewayMessageBus", topic);
        }

        /// <summary> Initializes a new instance of EventGridStreamInputDataSource. </summary>
        /// <param name="subscriber"> Subscribers for the Event Grid. Currently only EventHub Subscriber is supported. </param>
        /// <param name="schema"> Indicates the Event Grid schema type. </param>
        /// <param name="storageAccounts"> A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="eventTypes"> List of Event Types that are supported by the Event Grid adapter. </param>
        /// <returns> A new <see cref="Models.EventGridStreamInputDataSource"/> instance for mocking. </returns>
        public static EventGridStreamInputDataSource EventGridStreamInputDataSource(EventHubV2StreamInputDataSource subscriber = null, EventGridEventSchemaType? schema = null, IEnumerable<StreamAnalyticsStorageAccount> storageAccounts = null, IEnumerable<string> eventTypes = null)
        {
            storageAccounts ??= new List<StreamAnalyticsStorageAccount>();
            eventTypes ??= new List<string>();

            return new EventGridStreamInputDataSource("Microsoft.EventGrid/EventSubscriptions", subscriber, schema, storageAccounts?.ToList(), eventTypes?.ToList());
        }

        /// <summary> Initializes a new instance of RawOutputDatasource. </summary>
        /// <param name="payloadUri"> The SAS URL to a blob where the output should be written. If this property is not set, output data will be written into a temporary storage, and a SAS URL to that temporary storage will be included in the result. </param>
        /// <returns> A new <see cref="Models.RawOutputDatasource"/> instance for mocking. </returns>
        public static RawOutputDatasource RawOutputDatasource(Uri payloadUri = null)
        {
            return new RawOutputDatasource("Raw", payloadUri);
        }

        /// <summary> Initializes a new instance of BlobOutputDataSource. </summary>
        /// <param name="storageAccounts"> A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="container"> The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="pathPattern"> The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example. </param>
        /// <param name="dateFormat"> The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead. </param>
        /// <param name="timeFormat"> The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="blobPathPrefix"> Blob path prefix. </param>
        /// <param name="blobWriteMode"> Blob write mode. </param>
        /// <returns> A new <see cref="Models.BlobOutputDataSource"/> instance for mocking. </returns>
        public static BlobOutputDataSource BlobOutputDataSource(IEnumerable<StreamAnalyticsStorageAccount> storageAccounts = null, string container = null, string pathPattern = null, string dateFormat = null, string timeFormat = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string blobPathPrefix = null, BlobOutputWriteMode? blobWriteMode = null)
        {
            storageAccounts ??= new List<StreamAnalyticsStorageAccount>();

            return new BlobOutputDataSource("Microsoft.Storage/Blob", storageAccounts?.ToList(), container, pathPattern, dateFormat, timeFormat, authenticationMode, blobPathPrefix, blobWriteMode);
        }

        /// <summary> Initializes a new instance of TableOutputDataSource. </summary>
        /// <param name="accountName"> The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="accountKey"> The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="table"> The name of the Azure Table. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="partitionKey"> This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="rowKey"> This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="columnsToRemove"> If specified, each item in the array is the name of a column to remove (if present) from output event entities. </param>
        /// <param name="batchSize"> The number of rows to write to the Azure Table at a time. </param>
        /// <returns> A new <see cref="Models.TableOutputDataSource"/> instance for mocking. </returns>
        public static TableOutputDataSource TableOutputDataSource(string accountName = null, string accountKey = null, string table = null, string partitionKey = null, string rowKey = null, IEnumerable<string> columnsToRemove = null, int? batchSize = null)
        {
            columnsToRemove ??= new List<string>();

            return new TableOutputDataSource("Microsoft.Storage/Table", accountName, accountKey, table, partitionKey, rowKey, columnsToRemove?.ToList(), batchSize);
        }

        /// <summary> Initializes a new instance of EventHubOutputDataSource. </summary>
        /// <param name="serviceBusNamespace"> The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="eventHubName"> The name of the Event Hub. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="partitionCount"> The partition count of the event hub data source. Range 1 - 256. </param>
        /// <param name="partitionKey"> The key/column that is used to determine to which partition to send event data. </param>
        /// <param name="propertyColumns"> The properties associated with this Event Hub output. </param>
        /// <returns> A new <see cref="Models.EventHubOutputDataSource"/> instance for mocking. </returns>
        public static EventHubOutputDataSource EventHubOutputDataSource(string serviceBusNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string eventHubName = null, int? partitionCount = null, string partitionKey = null, IEnumerable<string> propertyColumns = null)
        {
            propertyColumns ??= new List<string>();

            return new EventHubOutputDataSource("Microsoft.ServiceBus/EventHub", serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, authenticationMode, eventHubName, partitionCount, partitionKey, propertyColumns?.ToList());
        }

        /// <summary> Initializes a new instance of EventHubV2OutputDataSource. </summary>
        /// <param name="serviceBusNamespace"> The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="eventHubName"> The name of the Event Hub. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="partitionCount"> The partition count of the event hub data source. Range 1 - 256. </param>
        /// <param name="partitionKey"> The key/column that is used to determine to which partition to send event data. </param>
        /// <param name="propertyColumns"> The properties associated with this Event Hub output. </param>
        /// <returns> A new <see cref="Models.EventHubV2OutputDataSource"/> instance for mocking. </returns>
        public static EventHubV2OutputDataSource EventHubV2OutputDataSource(string serviceBusNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string eventHubName = null, int? partitionCount = null, string partitionKey = null, IEnumerable<string> propertyColumns = null)
        {
            propertyColumns ??= new List<string>();

            return new EventHubV2OutputDataSource("Microsoft.EventHub/EventHub", serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, authenticationMode, eventHubName, partitionCount, partitionKey, propertyColumns?.ToList());
        }

        /// <summary> Initializes a new instance of SqlDatabaseOutputDataSource. </summary>
        /// <param name="server"> The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="database"> The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="user"> The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="password"> The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="table"> The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="maxBatchCount"> Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests. </param>
        /// <param name="maxWriterCount"> Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.SqlDatabaseOutputDataSource"/> instance for mocking. </returns>
        public static SqlDatabaseOutputDataSource SqlDatabaseOutputDataSource(string server = null, string database = null, string user = null, string password = null, string table = null, int? maxBatchCount = null, int? maxWriterCount = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new SqlDatabaseOutputDataSource("Microsoft.Sql/Server/Database", server, database, user, password, table, maxBatchCount, maxWriterCount, authenticationMode);
        }

        /// <summary> Initializes a new instance of SynapseOutputDataSource. </summary>
        /// <param name="server"> The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="database"> The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="table"> The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="user"> The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="password"> The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.SynapseOutputDataSource"/> instance for mocking. </returns>
        public static SynapseOutputDataSource SynapseOutputDataSource(string server = null, string database = null, string table = null, string user = null, string password = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new SynapseOutputDataSource("Microsoft.Sql/Server/DataWarehouse", server, database, table, user, password, authenticationMode);
        }

        /// <summary> Initializes a new instance of PostgreSQLOutputDataSource. </summary>
        /// <param name="server"> The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="database"> The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="table"> The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="user"> The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="password"> The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="maxWriterCount"> Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.PostgreSQLOutputDataSource"/> instance for mocking. </returns>
        public static PostgreSQLOutputDataSource PostgreSQLOutputDataSource(string server = null, string database = null, string table = null, string user = null, string password = null, int? maxWriterCount = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new PostgreSQLOutputDataSource("Microsoft.DBForPostgreSQL/servers/databases", server, database, table, user, password, maxWriterCount, authenticationMode);
        }

        /// <summary> Initializes a new instance of DocumentDbOutputDataSource. </summary>
        /// <param name="accountId"> The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="accountKey"> The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="database"> The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="collectionNamePattern"> The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="partitionKey"> The name of the field in output events used to specify the key for partitioning output across collections. If &apos;collectionNamePattern&apos; contains the {partition} token, this property is required to be specified. </param>
        /// <param name="documentId"> The name of the field in output events used to specify the primary key which insert or update operations are based on. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.DocumentDbOutputDataSource"/> instance for mocking. </returns>
        public static DocumentDbOutputDataSource DocumentDbOutputDataSource(string accountId = null, string accountKey = null, string database = null, string collectionNamePattern = null, string partitionKey = null, string documentId = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new DocumentDbOutputDataSource("Microsoft.Storage/DocumentDB", accountId, accountKey, database, collectionNamePattern, partitionKey, documentId, authenticationMode);
        }

        /// <summary> Initializes a new instance of FunctionOutputDataSource. </summary>
        /// <param name="functionAppName"> The name of your Azure Functions app. </param>
        /// <param name="functionName"> The name of the function in your Azure Functions app. </param>
        /// <param name="apiKey"> If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function. </param>
        /// <param name="maxBatchSize"> A property that lets you set the maximum size for each output batch that&apos;s sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB). </param>
        /// <param name="maxBatchCount"> A property that lets you specify the maximum number of events in each batch that&apos;s sent to Azure Functions. The default value is 100. </param>
        /// <returns> A new <see cref="Models.FunctionOutputDataSource"/> instance for mocking. </returns>
        public static FunctionOutputDataSource FunctionOutputDataSource(string functionAppName = null, string functionName = null, string apiKey = null, int? maxBatchSize = null, int? maxBatchCount = null)
        {
            return new FunctionOutputDataSource("Microsoft.AzureFunction", functionAppName, functionName, apiKey, maxBatchSize, maxBatchCount);
        }

        /// <summary> Initializes a new instance of ServiceBusQueueOutputDataSource. </summary>
        /// <param name="serviceBusNamespace"> The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="queueName"> The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="propertyColumns"> A string array of the names of output columns to be attached to Service Bus messages as custom properties. </param>
        /// <param name="systemPropertyColumns"> The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc. </param>
        /// <returns> A new <see cref="Models.ServiceBusQueueOutputDataSource"/> instance for mocking. </returns>
        public static ServiceBusQueueOutputDataSource ServiceBusQueueOutputDataSource(string serviceBusNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string queueName = null, IEnumerable<string> propertyColumns = null, IDictionary<string, string> systemPropertyColumns = null)
        {
            propertyColumns ??= new List<string>();
            systemPropertyColumns ??= new Dictionary<string, string>();

            return new ServiceBusQueueOutputDataSource("Microsoft.ServiceBus/Queue", serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, authenticationMode, queueName, propertyColumns?.ToList(), systemPropertyColumns);
        }

        /// <summary> Initializes a new instance of ServiceBusTopicOutputDataSource. </summary>
        /// <param name="serviceBusNamespace"> The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyName"> The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="sharedAccessPolicyKey"> The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <param name="topicName"> The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="propertyColumns"> A string array of the names of output columns to be attached to Service Bus messages as custom properties. </param>
        /// <param name="systemPropertyColumns"> The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc. </param>
        /// <returns> A new <see cref="Models.ServiceBusTopicOutputDataSource"/> instance for mocking. </returns>
        public static ServiceBusTopicOutputDataSource ServiceBusTopicOutputDataSource(string serviceBusNamespace = null, string sharedAccessPolicyName = null, string sharedAccessPolicyKey = null, StreamAnalyticsAuthenticationMode? authenticationMode = null, string topicName = null, IEnumerable<string> propertyColumns = null, IDictionary<string, string> systemPropertyColumns = null)
        {
            propertyColumns ??= new List<string>();
            systemPropertyColumns ??= new Dictionary<string, string>();

            return new ServiceBusTopicOutputDataSource("Microsoft.ServiceBus/Topic", serviceBusNamespace, sharedAccessPolicyName, sharedAccessPolicyKey, authenticationMode, topicName, propertyColumns?.ToList(), systemPropertyColumns);
        }

        /// <summary> Initializes a new instance of PowerBIOutputDataSource. </summary>
        /// <param name="refreshToken"> A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="tokenUserPrincipalName"> The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token. </param>
        /// <param name="tokenUserDisplayName"> The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token. </param>
        /// <param name="dataset"> The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="table"> The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="groupId"> The ID of the Power BI group. </param>
        /// <param name="groupName"> The name of the Power BI group. Use this property to help remember which specific Power BI group id was used. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.PowerBIOutputDataSource"/> instance for mocking. </returns>
        public static PowerBIOutputDataSource PowerBIOutputDataSource(string refreshToken = null, string tokenUserPrincipalName = null, string tokenUserDisplayName = null, string dataset = null, string table = null, Guid? groupId = null, string groupName = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new PowerBIOutputDataSource("PowerBI", refreshToken, tokenUserPrincipalName, tokenUserDisplayName, dataset, table, groupId, groupName, authenticationMode);
        }

        /// <summary> Initializes a new instance of DataLakeStoreOutputDataSource. </summary>
        /// <param name="refreshToken"> A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="tokenUserPrincipalName"> The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token. </param>
        /// <param name="tokenUserDisplayName"> The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token. </param>
        /// <param name="accountName"> The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="tenantId"> The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="filePathPrefix"> The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests. </param>
        /// <param name="dateFormat"> The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead. </param>
        /// <param name="timeFormat"> The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead. </param>
        /// <param name="authenticationMode"> Authentication Mode. </param>
        /// <returns> A new <see cref="Models.DataLakeStoreOutputDataSource"/> instance for mocking. </returns>
        public static DataLakeStoreOutputDataSource DataLakeStoreOutputDataSource(string refreshToken = null, string tokenUserPrincipalName = null, string tokenUserDisplayName = null, string accountName = null, Guid? tenantId = null, string filePathPrefix = null, string dateFormat = null, string timeFormat = null, StreamAnalyticsAuthenticationMode? authenticationMode = null)
        {
            return new DataLakeStoreOutputDataSource("Microsoft.DataLake/Accounts", refreshToken, tokenUserPrincipalName, tokenUserDisplayName, accountName, tenantId, filePathPrefix, dateFormat, timeFormat, authenticationMode);
        }

        /// <summary> Initializes a new instance of GatewayMessageBusOutputDataSource. </summary>
        /// <param name="topic"> The name of the Service Bus topic. </param>
        /// <returns> A new <see cref="Models.GatewayMessageBusOutputDataSource"/> instance for mocking. </returns>
        public static GatewayMessageBusOutputDataSource GatewayMessageBusOutputDataSource(string topic = null)
        {
            return new GatewayMessageBusOutputDataSource("GatewayMessageBus", topic);
        }
    }
}
