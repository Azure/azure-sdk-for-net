// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Media.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The Live Output.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LiveOutput : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the LiveOutput class.
        /// </summary>
        public LiveOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LiveOutput class.
        /// </summary>
        /// <param name="assetName">The asset name.</param>
        /// <param name="archiveWindowLength">ISO 8601 timespan duration of the
        /// archive window length. This is duration that customer want to
        /// retain the recorded content.</param>
        /// <param name="id">Fully qualified resource ID for the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="description">The description of the Live
        /// Output.</param>
        /// <param name="manifestName">The manifest file name.  If not
        /// provided, the service will generate one automatically.</param>
        /// <param name="hls">The HLS configuration.</param>
        /// <param name="outputSnapTime">The output snapshot time.</param>
        /// <param name="created">The exact time the Live Output was
        /// created.</param>
        /// <param name="lastModified">The exact time the Live Output was last
        /// modified.</param>
        /// <param name="provisioningState">The provisioning state of the Live
        /// Output.</param>
        /// <param name="resourceState">The resource state of the Live Output.
        /// Possible values include: 'Creating', 'Running', 'Deleting'</param>
        public LiveOutput(string assetName, System.TimeSpan archiveWindowLength, string id = default(string), string name = default(string), string type = default(string), string description = default(string), string manifestName = default(string), Hls hls = default(Hls), long? outputSnapTime = default(long?), System.DateTime? created = default(System.DateTime?), System.DateTime? lastModified = default(System.DateTime?), string provisioningState = default(string), LiveOutputResourceState? resourceState = default(LiveOutputResourceState?))
            : base(id, name, type)
        {
            Description = description;
            AssetName = assetName;
            ArchiveWindowLength = archiveWindowLength;
            ManifestName = manifestName;
            Hls = hls;
            OutputSnapTime = outputSnapTime;
            Created = created;
            LastModified = lastModified;
            ProvisioningState = provisioningState;
            ResourceState = resourceState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the description of the Live Output.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the asset name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.assetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Gets or sets ISO 8601 timespan duration of the archive window
        /// length. This is duration that customer want to retain the recorded
        /// content.
        /// </summary>
        [JsonProperty(PropertyName = "properties.archiveWindowLength")]
        public System.TimeSpan ArchiveWindowLength { get; set; }

        /// <summary>
        /// Gets or sets the manifest file name.  If not provided, the service
        /// will generate one automatically.
        /// </summary>
        [JsonProperty(PropertyName = "properties.manifestName")]
        public string ManifestName { get; set; }

        /// <summary>
        /// Gets or sets the HLS configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hls")]
        public Hls Hls { get; set; }

        /// <summary>
        /// Gets or sets the output snapshot time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputSnapTime")]
        public long? OutputSnapTime { get; set; }

        /// <summary>
        /// Gets the exact time the Live Output was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; private set; }

        /// <summary>
        /// Gets the exact time the Live Output was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTime? LastModified { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the Live Output.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the resource state of the Live Output. Possible values
        /// include: 'Creating', 'Running', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceState")]
        public LiveOutputResourceState? ResourceState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssetName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetName");
            }
        }
    }
}
