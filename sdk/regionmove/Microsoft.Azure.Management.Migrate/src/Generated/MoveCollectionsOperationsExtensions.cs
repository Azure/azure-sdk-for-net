// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Migrate
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MoveCollectionsOperations.
    /// </summary>
    public static partial class MoveCollectionsOperationsExtensions
    {
            /// <summary>
            /// Creates or updates a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MoveCollection Create(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, MoveCollection body = default(MoveCollection))
            {
                return operations.CreateAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollection> CreateAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, MoveCollection body = default(MoveCollection), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MoveCollection Update(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, UpdateMoveCollectionRequest body = default(UpdateMoveCollectionRequest))
            {
                return operations.UpdateAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollection> UpdateAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, UpdateMoveCollectionRequest body = default(UpdateMoveCollectionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            public static OperationStatus Delete(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName)
            {
                return operations.DeleteAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> DeleteAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            public static MoveCollection Get(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName)
            {
                return operations.GetAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveCollection> GetAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates prepare for the set of resources included in the request body.
            /// The prepare operation is on the moveResources that are in the moveState
            /// 'PreparePending' or 'PrepareFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus Prepare(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, PrepareRequest body = default(PrepareRequest))
            {
                return operations.PrepareAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates prepare for the set of resources included in the request body.
            /// The prepare operation is on the moveResources that are in the moveState
            /// 'PreparePending' or 'PrepareFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> PrepareAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, PrepareRequest body = default(PrepareRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PrepareWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Moves the set of resources included in the request body. The move operation
            /// is triggered after the moveResources are in the moveState 'MovePending' or
            /// 'MoveFailed', on a successful completion the moveResource moveState do a
            /// transition to CommitPending. To aid the user to prerequisite the operation
            /// the client can call operation with validateOnly property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus InitiateMove(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, ResourceMoveRequest body = default(ResourceMoveRequest))
            {
                return operations.InitiateMoveAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves the set of resources included in the request body. The move operation
            /// is triggered after the moveResources are in the moveState 'MovePending' or
            /// 'MoveFailed', on a successful completion the moveResource moveState do a
            /// transition to CommitPending. To aid the user to prerequisite the operation
            /// the client can call operation with validateOnly property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> InitiateMoveAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, ResourceMoveRequest body = default(ResourceMoveRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InitiateMoveWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Commits the set of resources included in the request body. The commit
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'CommitFailed', on a successful completion the
            /// moveResource moveState do a transition to Committed. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus Commit(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CommitRequest body = default(CommitRequest))
            {
                return operations.CommitAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Commits the set of resources included in the request body. The commit
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'CommitFailed', on a successful completion the
            /// moveResource moveState do a transition to Committed. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> CommitAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CommitRequest body = default(CommitRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CommitWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discards the set of resources included in the request body. The discard
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'DiscardFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus Discard(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, DiscardRequest body = default(DiscardRequest))
            {
                return operations.DiscardAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discards the set of resources included in the request body. The discard
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'DiscardFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> DiscardAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, DiscardRequest body = default(DiscardRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscardWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Computes, resolves and validate the dependencies of the moveResources in
            /// the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            public static OperationStatus ResolveDependencies(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName)
            {
                return operations.ResolveDependenciesAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Computes, resolves and validate the dependencies of the moveResources in
            /// the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> ResolveDependenciesAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResolveDependenciesWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<MoveCollection> ListMoveCollectionsBySubscription(this IMoveCollectionsOperations operations)
            {
                return operations.ListMoveCollectionsBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MoveCollection>> ListMoveCollectionsBySubscriptionAsync(this IMoveCollectionsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMoveCollectionsBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            public static IPage<MoveCollection> ListMoveCollectionsByResourceGroup(this IMoveCollectionsOperations operations, string resourceGroupName)
            {
                return operations.ListMoveCollectionsByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MoveCollection>> ListMoveCollectionsByResourceGroupAsync(this IMoveCollectionsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMoveCollectionsByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            public static OperationStatus BeginDelete(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginDeleteAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates prepare for the set of resources included in the request body.
            /// The prepare operation is on the moveResources that are in the moveState
            /// 'PreparePending' or 'PrepareFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus BeginPrepare(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, PrepareRequest body = default(PrepareRequest))
            {
                return operations.BeginPrepareAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates prepare for the set of resources included in the request body.
            /// The prepare operation is on the moveResources that are in the moveState
            /// 'PreparePending' or 'PrepareFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginPrepareAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, PrepareRequest body = default(PrepareRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPrepareWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Moves the set of resources included in the request body. The move operation
            /// is triggered after the moveResources are in the moveState 'MovePending' or
            /// 'MoveFailed', on a successful completion the moveResource moveState do a
            /// transition to CommitPending. To aid the user to prerequisite the operation
            /// the client can call operation with validateOnly property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus BeginInitiateMove(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, ResourceMoveRequest body = default(ResourceMoveRequest))
            {
                return operations.BeginInitiateMoveAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves the set of resources included in the request body. The move operation
            /// is triggered after the moveResources are in the moveState 'MovePending' or
            /// 'MoveFailed', on a successful completion the moveResource moveState do a
            /// transition to CommitPending. To aid the user to prerequisite the operation
            /// the client can call operation with validateOnly property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginInitiateMoveAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, ResourceMoveRequest body = default(ResourceMoveRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginInitiateMoveWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Commits the set of resources included in the request body. The commit
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'CommitFailed', on a successful completion the
            /// moveResource moveState do a transition to Committed. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus BeginCommit(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CommitRequest body = default(CommitRequest))
            {
                return operations.BeginCommitAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Commits the set of resources included in the request body. The commit
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'CommitFailed', on a successful completion the
            /// moveResource moveState do a transition to Committed. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginCommitAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CommitRequest body = default(CommitRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCommitWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discards the set of resources included in the request body. The discard
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'DiscardFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static OperationStatus BeginDiscard(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, DiscardRequest body = default(DiscardRequest))
            {
                return operations.BeginDiscardAsync(resourceGroupName, moveCollectionName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discards the set of resources included in the request body. The discard
            /// operation is triggered on the moveResources in the moveState
            /// 'CommitPending' or 'DiscardFailed', on a successful completion the
            /// moveResource moveState do a transition to MovePending. To aid the user to
            /// prerequisite the operation the client can call operation with validateOnly
            /// property set to true.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginDiscardAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, DiscardRequest body = default(DiscardRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDiscardWithHttpMessagesAsync(resourceGroupName, moveCollectionName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Computes, resolves and validate the dependencies of the moveResources in
            /// the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            public static OperationStatus BeginResolveDependencies(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName)
            {
                return operations.BeginResolveDependenciesAsync(resourceGroupName, moveCollectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Computes, resolves and validate the dependencies of the moveResources in
            /// the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginResolveDependenciesAsync(this IMoveCollectionsOperations operations, string resourceGroupName, string moveCollectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResolveDependenciesWithHttpMessagesAsync(resourceGroupName, moveCollectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MoveCollection> ListMoveCollectionsBySubscriptionNext(this IMoveCollectionsOperations operations, string nextPageLink)
            {
                return operations.ListMoveCollectionsBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MoveCollection>> ListMoveCollectionsBySubscriptionNextAsync(this IMoveCollectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMoveCollectionsBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MoveCollection> ListMoveCollectionsByResourceGroupNext(this IMoveCollectionsOperations operations, string nextPageLink)
            {
                return operations.ListMoveCollectionsByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Move Collections.
            /// </summary>
            /// <remarks>
            /// Get all the Move Collections in the resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MoveCollection>> ListMoveCollectionsByResourceGroupNextAsync(this IMoveCollectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMoveCollectionsByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
