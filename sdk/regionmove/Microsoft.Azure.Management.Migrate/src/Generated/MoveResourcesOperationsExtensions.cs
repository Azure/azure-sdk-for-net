// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Migrate
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MoveResourcesOperations.
    /// </summary>
    public static partial class MoveResourcesOperationsExtensions
    {
            /// <summary>
            /// Lists the Move Resources in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<MoveResource> List(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, ODataQuery<MoveResourceFilter> odataQuery = default(ODataQuery<MoveResourceFilter>))
            {
                return operations.ListAsync(resourceGroupName, moveCollectionName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Move Resources in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MoveResource>> ListAsync(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, ODataQuery<MoveResourceFilter> odataQuery = default(ODataQuery<MoveResourceFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, moveCollectionName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Move Resource in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static MoveResource Create(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, MoveResourceProperties properties = default(MoveResourceProperties))
            {
                return operations.CreateAsync(resourceGroupName, moveCollectionName, moveResourceName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Move Resource in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveResource> CreateAsync(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, MoveResourceProperties properties = default(MoveResourceProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, moveCollectionName, moveResourceName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Move Resource from the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            public static OperationStatus Delete(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName)
            {
                return operations.DeleteAsync(resourceGroupName, moveCollectionName, moveResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Move Resource from the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> DeleteAsync(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, moveCollectionName, moveResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Move Resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            public static MoveResource Get(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName)
            {
                return operations.GetAsync(resourceGroupName, moveCollectionName, moveResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Move Resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveResource> GetAsync(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, moveCollectionName, moveResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a Move Resource in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static MoveResource BeginCreate(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, MoveResourceProperties properties = default(MoveResourceProperties))
            {
                return operations.BeginCreateAsync(resourceGroupName, moveCollectionName, moveResourceName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a Move Resource in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MoveResource> BeginCreateAsync(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, MoveResourceProperties properties = default(MoveResourceProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, moveCollectionName, moveResourceName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Move Resource from the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            public static OperationStatus BeginDelete(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, moveCollectionName, moveResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Move Resource from the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Resource Group Name.
            /// </param>
            /// <param name='moveCollectionName'>
            /// The Move Collection Name.
            /// </param>
            /// <param name='moveResourceName'>
            /// The Move Resource Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatus> BeginDeleteAsync(this IMoveResourcesOperations operations, string resourceGroupName, string moveCollectionName, string moveResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, moveCollectionName, moveResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the Move Resources in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MoveResource> ListNext(this IMoveResourcesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Move Resources in the move collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MoveResource>> ListNextAsync(this IMoveResourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
