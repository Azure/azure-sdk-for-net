// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager.ManagedNetworkFabric.Models;

namespace Azure.ResourceManager.ManagedNetworkFabric
{
    internal class IDictionaryOperationSource : IOperationSource<IDictionary<string, ARPProperties>>
    {
        IDictionary<string, ARPProperties> IOperationSource<IDictionary<string, ARPProperties>>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            Dictionary<string, ARPProperties> dictionary = new Dictionary<string, ARPProperties>();
            foreach (var property in document.RootElement.EnumerateObject())
            {
                dictionary.Add(property.Name, ARPProperties.DeserializeARPProperties(property.Value));
            }
            return dictionary;
        }

        async ValueTask<IDictionary<string, ARPProperties>> IOperationSource<IDictionary<string, ARPProperties>>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            Dictionary<string, ARPProperties> dictionary = new Dictionary<string, ARPProperties>();
            foreach (var property in document.RootElement.EnumerateObject())
            {
                dictionary.Add(property.Name, ARPProperties.DeserializeARPProperties(property.Value));
            }
            return dictionary;
        }
    }
}
