// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class CommonDynamicMatchConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(IPGroups))
            {
                writer.WritePropertyName("ipGroups"u8);
                writer.WriteStartArray();
                foreach (var item in IPGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(VlanGroups))
            {
                writer.WritePropertyName("vlanGroups"u8);
                writer.WriteStartArray();
                foreach (var item in VlanGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PortGroups))
            {
                writer.WritePropertyName("portGroups"u8);
                writer.WriteStartArray();
                foreach (var item in PortGroups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static CommonDynamicMatchConfiguration DeserializeCommonDynamicMatchConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<MatchConfigurationIPGroupProperties>> ipGroups = default;
            Optional<IList<VlanGroupProperties>> vlanGroups = default;
            Optional<IList<PortGroupProperties>> portGroups = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ipGroups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MatchConfigurationIPGroupProperties> array = new List<MatchConfigurationIPGroupProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MatchConfigurationIPGroupProperties.DeserializeMatchConfigurationIPGroupProperties(item));
                    }
                    ipGroups = array;
                    continue;
                }
                if (property.NameEquals("vlanGroups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VlanGroupProperties> array = new List<VlanGroupProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VlanGroupProperties.DeserializeVlanGroupProperties(item));
                    }
                    vlanGroups = array;
                    continue;
                }
                if (property.NameEquals("portGroups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PortGroupProperties> array = new List<PortGroupProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PortGroupProperties.DeserializePortGroupProperties(item));
                    }
                    portGroups = array;
                    continue;
                }
            }
            return new CommonDynamicMatchConfiguration(Optional.ToList(ipGroups), Optional.ToList(vlanGroups), Optional.ToList(portGroups));
        }
    }
}
