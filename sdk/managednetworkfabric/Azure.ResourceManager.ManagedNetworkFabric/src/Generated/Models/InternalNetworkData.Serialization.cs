// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ManagedNetworkFabric
{
    public partial class InternalNetworkData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(Mtu))
            {
                writer.WritePropertyName("mtu"u8);
                writer.WriteNumberValue(Mtu.Value);
            }
            if (Optional.IsCollectionDefined(ConnectedIPv4Subnets))
            {
                writer.WritePropertyName("connectedIPv4Subnets"u8);
                writer.WriteStartArray();
                foreach (var item in ConnectedIPv4Subnets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ConnectedIPv6Subnets))
            {
                writer.WritePropertyName("connectedIPv6Subnets"u8);
                writer.WriteStartArray();
                foreach (var item in ConnectedIPv6Subnets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(StaticRouteConfiguration))
            {
                writer.WritePropertyName("staticRouteConfiguration"u8);
                writer.WriteObjectValue(StaticRouteConfiguration);
            }
            if (Optional.IsDefined(BgpConfiguration))
            {
                writer.WritePropertyName("bgpConfiguration"u8);
                writer.WriteObjectValue(BgpConfiguration);
            }
            if (Optional.IsDefined(ImportRoutePolicyId))
            {
                writer.WritePropertyName("importRoutePolicyId"u8);
                writer.WriteStringValue(ImportRoutePolicyId);
            }
            if (Optional.IsDefined(ExportRoutePolicyId))
            {
                writer.WritePropertyName("exportRoutePolicyId"u8);
                writer.WriteStringValue(ExportRoutePolicyId);
            }
            writer.WritePropertyName("vlanId"u8);
            writer.WriteNumberValue(VlanId);
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static InternalNetworkData DeserializeInternalNetworkData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> annotation = default;
            Optional<int> mtu = default;
            Optional<IList<InternalNetworkPatchablePropertiesConnectedIPv4SubnetsItem>> connectedIPv4Subnets = default;
            Optional<IList<InternalNetworkPatchablePropertiesConnectedIPv6SubnetsItem>> connectedIPv6Subnets = default;
            Optional<InternalNetworkPatchablePropertiesStaticRouteConfiguration> staticRouteConfiguration = default;
            Optional<InternalNetworkPatchablePropertiesBgpConfiguration> bgpConfiguration = default;
            Optional<string> importRoutePolicyId = default;
            Optional<string> exportRoutePolicyId = default;
            Optional<IReadOnlyList<string>> disabledOnResources = default;
            Optional<EnabledDisabledState> administrativeState = default;
            Optional<IReadOnlyList<string>> bgpDisabledOnResources = default;
            Optional<IReadOnlyList<string>> bfdDisabledOnResources = default;
            Optional<IReadOnlyList<string>> bfdForStaticRoutesDisabledOnResources = default;
            Optional<ProvisioningState> provisioningState = default;
            int vlanId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("annotation"u8))
                        {
                            annotation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("mtu"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            mtu = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("connectedIPv4Subnets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<InternalNetworkPatchablePropertiesConnectedIPv4SubnetsItem> array = new List<InternalNetworkPatchablePropertiesConnectedIPv4SubnetsItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(InternalNetworkPatchablePropertiesConnectedIPv4SubnetsItem.DeserializeInternalNetworkPatchablePropertiesConnectedIPv4SubnetsItem(item));
                            }
                            connectedIPv4Subnets = array;
                            continue;
                        }
                        if (property0.NameEquals("connectedIPv6Subnets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<InternalNetworkPatchablePropertiesConnectedIPv6SubnetsItem> array = new List<InternalNetworkPatchablePropertiesConnectedIPv6SubnetsItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(InternalNetworkPatchablePropertiesConnectedIPv6SubnetsItem.DeserializeInternalNetworkPatchablePropertiesConnectedIPv6SubnetsItem(item));
                            }
                            connectedIPv6Subnets = array;
                            continue;
                        }
                        if (property0.NameEquals("staticRouteConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            staticRouteConfiguration = InternalNetworkPatchablePropertiesStaticRouteConfiguration.DeserializeInternalNetworkPatchablePropertiesStaticRouteConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("bgpConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            bgpConfiguration = InternalNetworkPatchablePropertiesBgpConfiguration.DeserializeInternalNetworkPatchablePropertiesBgpConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("importRoutePolicyId"u8))
                        {
                            importRoutePolicyId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("exportRoutePolicyId"u8))
                        {
                            exportRoutePolicyId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("disabledOnResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            disabledOnResources = array;
                            continue;
                        }
                        if (property0.NameEquals("administrativeState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            administrativeState = new EnabledDisabledState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("bgpDisabledOnResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            bgpDisabledOnResources = array;
                            continue;
                        }
                        if (property0.NameEquals("bfdDisabledOnResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            bfdDisabledOnResources = array;
                            continue;
                        }
                        if (property0.NameEquals("bfdForStaticRoutesDisabledOnResources"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            bfdForStaticRoutesDisabledOnResources = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("vlanId"u8))
                        {
                            vlanId = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new InternalNetworkData(id, name, type, systemData.Value, annotation.Value, Optional.ToNullable(mtu), Optional.ToList(connectedIPv4Subnets), Optional.ToList(connectedIPv6Subnets), staticRouteConfiguration.Value, bgpConfiguration.Value, importRoutePolicyId.Value, exportRoutePolicyId.Value, Optional.ToList(disabledOnResources), Optional.ToNullable(administrativeState), Optional.ToList(bgpDisabledOnResources), Optional.ToList(bfdDisabledOnResources), Optional.ToList(bfdForStaticRoutesDisabledOnResources), Optional.ToNullable(provisioningState), vlanId);
        }
    }
}
