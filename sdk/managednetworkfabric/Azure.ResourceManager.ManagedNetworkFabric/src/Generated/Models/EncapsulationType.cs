// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Encapsulation Type. </summary>
    public readonly partial struct EncapsulationType : IEquatable<EncapsulationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EncapsulationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EncapsulationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string GTPv1Value = "GTPv1";

        /// <summary> None. </summary>
        public static EncapsulationType None { get; } = new EncapsulationType(NoneValue);
        /// <summary> GTPv1. </summary>
        public static EncapsulationType GTPv1 { get; } = new EncapsulationType(GTPv1Value);
        /// <summary> Determines if two <see cref="EncapsulationType"/> values are the same. </summary>
        public static bool operator ==(EncapsulationType left, EncapsulationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EncapsulationType"/> values are not the same. </summary>
        public static bool operator !=(EncapsulationType left, EncapsulationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EncapsulationType"/>. </summary>
        public static implicit operator EncapsulationType(string value) => new EncapsulationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EncapsulationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EncapsulationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
