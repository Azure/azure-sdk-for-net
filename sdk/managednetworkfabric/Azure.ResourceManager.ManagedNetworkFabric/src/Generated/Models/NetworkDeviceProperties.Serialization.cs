// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkDeviceProperties : IUtf8JsonSerializable, IJsonModel<NetworkDeviceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<NetworkDeviceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<NetworkDeviceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkDeviceProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(HostName))
            {
                writer.WritePropertyName("hostName"u8);
                writer.WriteStringValue(HostName);
            }
            writer.WritePropertyName("serialNumber"u8);
            writer.WriteStringValue(SerialNumber);
            if (options.Format != "W" && Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(NetworkDeviceSku))
            {
                writer.WritePropertyName("networkDeviceSku"u8);
                writer.WriteStringValue(NetworkDeviceSku);
            }
            if (options.Format != "W" && Optional.IsDefined(NetworkDeviceRole))
            {
                writer.WritePropertyName("networkDeviceRole"u8);
                writer.WriteStringValue(NetworkDeviceRole.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(NetworkRackId))
            {
                writer.WritePropertyName("networkRackId"u8);
                writer.WriteStringValue(NetworkRackId);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagementIPv4Address))
            {
                writer.WritePropertyName("managementIpv4Address"u8);
                writer.WriteStringValue(ManagementIPv4Address);
            }
            if (options.Format != "W" && Optional.IsDefined(ManagementIPv6Address))
            {
                writer.WritePropertyName("managementIpv6Address"u8);
                writer.WriteStringValue(ManagementIPv6Address);
            }
            if (options.Format != "W" && Optional.IsDefined(RwDeviceConfig))
            {
                writer.WritePropertyName("rwDeviceConfig"u8);
                writer.WriteStringValue(RwDeviceConfig);
            }
            if (options.Format != "W" && Optional.IsDefined(LastOperation))
            {
                writer.WritePropertyName("lastOperation"u8);
                writer.WriteObjectValue(LastOperation, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ConfigurationState))
            {
                writer.WritePropertyName("configurationState"u8);
                writer.WriteStringValue(ConfigurationState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AdministrativeState))
            {
                writer.WritePropertyName("administrativeState"u8);
                writer.WriteStringValue(AdministrativeState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        NetworkDeviceProperties IJsonModel<NetworkDeviceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkDeviceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNetworkDeviceProperties(document.RootElement, options);
        }

        internal static NetworkDeviceProperties DeserializeNetworkDeviceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string annotation = default;
            string hostName = default;
            string serialNumber = default;
            string version = default;
            string networkDeviceSku = default;
            NetworkDeviceRole? networkDeviceRole = default;
            string networkRackId = default;
            string managementIPv4Address = default;
            string managementIPv6Address = default;
            string rwDeviceConfig = default;
            LastOperationProperties lastOperation = default;
            NetworkFabricConfigurationState? configurationState = default;
            NetworkFabricProvisioningState? provisioningState = default;
            NetworkFabricAdministrativeState? administrativeState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("annotation"u8))
                {
                    annotation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostName"u8))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serialNumber"u8))
                {
                    serialNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkDeviceSku"u8))
                {
                    networkDeviceSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkDeviceRole"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkDeviceRole = new NetworkDeviceRole(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkRackId"u8))
                {
                    networkRackId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managementIpv4Address"u8))
                {
                    managementIPv4Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managementIpv6Address"u8))
                {
                    managementIPv6Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rwDeviceConfig"u8))
                {
                    rwDeviceConfig = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastOperation = LastOperationProperties.DeserializeLastOperationProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("configurationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configurationState = new NetworkFabricConfigurationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new NetworkFabricProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("administrativeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    administrativeState = new NetworkFabricAdministrativeState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new NetworkDeviceProperties(
                annotation,
                hostName,
                serialNumber,
                version,
                networkDeviceSku,
                networkDeviceRole,
                networkRackId,
                managementIPv4Address,
                managementIPv6Address,
                rwDeviceConfig,
                lastOperation,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<NetworkDeviceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerManagedNetworkFabricContext.Default);
                default:
                    throw new FormatException($"The model {nameof(NetworkDeviceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        NetworkDeviceProperties IPersistableModel<NetworkDeviceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkDeviceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeNetworkDeviceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NetworkDeviceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<NetworkDeviceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
