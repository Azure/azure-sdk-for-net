// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class L3IsolationDomainPatchPropertiesAggregateRouteConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(IPv4Routes))
            {
                writer.WritePropertyName("ipv4Routes"u8);
                writer.WriteStartArray();
                foreach (var item in IPv4Routes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IPv6Routes))
            {
                writer.WritePropertyName("ipv6Routes"u8);
                writer.WriteStartArray();
                foreach (var item in IPv6Routes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static L3IsolationDomainPatchPropertiesAggregateRouteConfiguration DeserializeL3IsolationDomainPatchPropertiesAggregateRouteConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv4RoutesItem>> ipv4Routes = default;
            Optional<IList<L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv6RoutesItem>> ipv6Routes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ipv4Routes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv4RoutesItem> array = new List<L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv4RoutesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv4RoutesItem.DeserializeL3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv4RoutesItem(item));
                    }
                    ipv4Routes = array;
                    continue;
                }
                if (property.NameEquals("ipv6Routes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv6RoutesItem> array = new List<L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv6RoutesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(L3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv6RoutesItem.DeserializeL3IsolationDomainPatchPropertiesAggregateRouteConfigurationIPv6RoutesItem(item));
                    }
                    ipv6Routes = array;
                    continue;
                }
            }
            return new L3IsolationDomainPatchPropertiesAggregateRouteConfiguration(Optional.ToList(ipv4Routes), Optional.ToList(ipv6Routes));
        }
    }
}
