// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Monitored Address Family. </summary>
    public readonly partial struct BmpMonitoredAddressFamily : IEquatable<BmpMonitoredAddressFamily>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BmpMonitoredAddressFamily"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BmpMonitoredAddressFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IPv4UnicastValue = "ipv4Unicast";
        private const string IPv6UnicastValue = "ipv6Unicast";
        private const string VpnIPv4Value = "vpnIpv4";
        private const string VpnIPv6Value = "vpnIpv6";
        private const string AllValue = "All";

        /// <summary> IPv4 Unicast. </summary>
        public static BmpMonitoredAddressFamily IPv4Unicast { get; } = new BmpMonitoredAddressFamily(IPv4UnicastValue);
        /// <summary> IPv6 Unicast. </summary>
        public static BmpMonitoredAddressFamily IPv6Unicast { get; } = new BmpMonitoredAddressFamily(IPv6UnicastValue);
        /// <summary> VPN IPv4. </summary>
        public static BmpMonitoredAddressFamily VpnIPv4 { get; } = new BmpMonitoredAddressFamily(VpnIPv4Value);
        /// <summary> VPN IPv6. </summary>
        public static BmpMonitoredAddressFamily VpnIPv6 { get; } = new BmpMonitoredAddressFamily(VpnIPv6Value);
        /// <summary> All Address Families. </summary>
        public static BmpMonitoredAddressFamily All { get; } = new BmpMonitoredAddressFamily(AllValue);
        /// <summary> Determines if two <see cref="BmpMonitoredAddressFamily"/> values are the same. </summary>
        public static bool operator ==(BmpMonitoredAddressFamily left, BmpMonitoredAddressFamily right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BmpMonitoredAddressFamily"/> values are not the same. </summary>
        public static bool operator !=(BmpMonitoredAddressFamily left, BmpMonitoredAddressFamily right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BmpMonitoredAddressFamily"/>. </summary>
        public static implicit operator BmpMonitoredAddressFamily(string value) => new BmpMonitoredAddressFamily(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BmpMonitoredAddressFamily other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BmpMonitoredAddressFamily other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
