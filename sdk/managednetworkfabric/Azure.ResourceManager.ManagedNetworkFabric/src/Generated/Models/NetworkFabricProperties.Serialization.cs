// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkFabricProperties : IUtf8JsonSerializable, IJsonModel<NetworkFabricProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<NetworkFabricProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<NetworkFabricProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkFabricProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkFabricProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            writer.WritePropertyName("networkFabricSku"u8);
            writer.WriteStringValue(NetworkFabricSku);
            if (Optional.IsDefined(FabricVersion))
            {
                writer.WritePropertyName("fabricVersion"u8);
                writer.WriteStringValue(FabricVersion);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(RouterIds))
            {
                writer.WritePropertyName("routerIds"u8);
                writer.WriteStartArray();
                foreach (var item in RouterIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(StorageAccountConfiguration))
            {
                writer.WritePropertyName("storageAccountConfiguration"u8);
                writer.WriteObjectValue(StorageAccountConfiguration, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(FabricLocks))
            {
                writer.WritePropertyName("fabricLocks"u8);
                writer.WriteStartArray();
                foreach (var item in FabricLocks)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("networkFabricControllerId"u8);
            writer.WriteStringValue(NetworkFabricControllerId);
            if (Optional.IsDefined(RackCount))
            {
                writer.WritePropertyName("rackCount"u8);
                writer.WriteNumberValue(RackCount.Value);
            }
            writer.WritePropertyName("serverCountPerRack"u8);
            writer.WriteNumberValue(ServerCountPerRack);
            writer.WritePropertyName("ipv4Prefix"u8);
            writer.WriteStringValue(IPv4Prefix);
            if (Optional.IsDefined(IPv6Prefix))
            {
                writer.WritePropertyName("ipv6Prefix"u8);
                writer.WriteStringValue(IPv6Prefix);
            }
            writer.WritePropertyName("fabricASN"u8);
            writer.WriteNumberValue(FabricAsn);
            writer.WritePropertyName("terminalServerConfiguration"u8);
            writer.WriteObjectValue(TerminalServerConfiguration, options);
            writer.WritePropertyName("managementNetworkConfiguration"u8);
            writer.WriteObjectValue(ManagementNetworkConfiguration, options);
            if (options.Format != "W" && Optional.IsCollectionDefined(Racks))
            {
                writer.WritePropertyName("racks"u8);
                writer.WriteStartArray();
                foreach (var item in Racks)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(L2IsolationDomains))
            {
                writer.WritePropertyName("l2IsolationDomains"u8);
                writer.WriteStartArray();
                foreach (var item in L2IsolationDomains)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(L3IsolationDomains))
            {
                writer.WritePropertyName("l3IsolationDomains"u8);
                writer.WriteStartArray();
                foreach (var item in L3IsolationDomains)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HardwareAlertThreshold))
            {
                writer.WritePropertyName("hardwareAlertThreshold"u8);
                writer.WriteNumberValue(HardwareAlertThreshold.Value);
            }
            if (Optional.IsCollectionDefined(ControlPlaneAcls))
            {
                writer.WritePropertyName("controlPlaneAcls"u8);
                writer.WriteStartArray();
                foreach (var item in ControlPlaneAcls)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(FeatureFlags))
            {
                writer.WritePropertyName("featureFlags"u8);
                writer.WriteStartArray();
                foreach (var item in FeatureFlags)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TrustedIPPrefixes))
            {
                writer.WritePropertyName("trustedIpPrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in TrustedIPPrefixes)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(UniqueRdConfiguration))
            {
                writer.WritePropertyName("uniqueRdConfiguration"u8);
                writer.WriteObjectValue(UniqueRdConfiguration, options);
            }
            if (Optional.IsDefined(StorageArrayCount))
            {
                writer.WritePropertyName("storageArrayCount"u8);
                writer.WriteNumberValue(StorageArrayCount.Value);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ActiveCommitBatches))
            {
                writer.WritePropertyName("activeCommitBatches"u8);
                writer.WriteStartArray();
                foreach (var item in ActiveCommitBatches)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(LastOperation))
            {
                writer.WritePropertyName("lastOperation"u8);
                writer.WriteObjectValue(LastOperation, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ConfigurationState))
            {
                writer.WritePropertyName("configurationState"u8);
                writer.WriteStringValue(ConfigurationState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AdministrativeState))
            {
                writer.WritePropertyName("administrativeState"u8);
                writer.WriteStringValue(AdministrativeState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        NetworkFabricProperties IJsonModel<NetworkFabricProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkFabricProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkFabricProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNetworkFabricProperties(document.RootElement, options);
        }

        internal static NetworkFabricProperties DeserializeNetworkFabricProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string annotation = default;
            string networkFabricSku = default;
            string fabricVersion = default;
            IReadOnlyList<string> routerIds = default;
            StorageAccountConfiguration storageAccountConfiguration = default;
            IReadOnlyList<FabricLockProperties> fabricLocks = default;
            ResourceIdentifier networkFabricControllerId = default;
            int? rackCount = default;
            int serverCountPerRack = default;
            string ipv4Prefix = default;
            string ipv6Prefix = default;
            long fabricAsn = default;
            TerminalServerConfiguration terminalServerConfiguration = default;
            ManagementNetworkConfigurationProperties managementNetworkConfiguration = default;
            IReadOnlyList<string> racks = default;
            IReadOnlyList<string> l2IsolationDomains = default;
            IReadOnlyList<string> l3IsolationDomains = default;
            int? hardwareAlertThreshold = default;
            IList<ResourceIdentifier> controlPlaneAcls = default;
            IReadOnlyList<FeatureFlagProperties> featureFlags = default;
            IList<ResourceIdentifier> trustedIPPrefixes = default;
            UniqueRouteDistinguisherProperties uniqueRdConfiguration = default;
            int? storageArrayCount = default;
            IReadOnlyList<string> activeCommitBatches = default;
            LastOperationProperties lastOperation = default;
            NetworkFabricConfigurationState? configurationState = default;
            NetworkFabricProvisioningState? provisioningState = default;
            NetworkFabricAdministrativeState? administrativeState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("annotation"u8))
                {
                    annotation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("networkFabricSku"u8))
                {
                    networkFabricSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricVersion"u8))
                {
                    fabricVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("routerIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    routerIds = array;
                    continue;
                }
                if (property.NameEquals("storageAccountConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageAccountConfiguration = StorageAccountConfiguration.DeserializeStorageAccountConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("fabricLocks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FabricLockProperties> array = new List<FabricLockProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FabricLockProperties.DeserializeFabricLockProperties(item, options));
                    }
                    fabricLocks = array;
                    continue;
                }
                if (property.NameEquals("networkFabricControllerId"u8))
                {
                    networkFabricControllerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rackCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rackCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("serverCountPerRack"u8))
                {
                    serverCountPerRack = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ipv4Prefix"u8))
                {
                    ipv4Prefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipv6Prefix"u8))
                {
                    ipv6Prefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricASN"u8))
                {
                    fabricAsn = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("terminalServerConfiguration"u8))
                {
                    terminalServerConfiguration = TerminalServerConfiguration.DeserializeTerminalServerConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("managementNetworkConfiguration"u8))
                {
                    managementNetworkConfiguration = ManagementNetworkConfigurationProperties.DeserializeManagementNetworkConfigurationProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("racks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    racks = array;
                    continue;
                }
                if (property.NameEquals("l2IsolationDomains"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    l2IsolationDomains = array;
                    continue;
                }
                if (property.NameEquals("l3IsolationDomains"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    l3IsolationDomains = array;
                    continue;
                }
                if (property.NameEquals("hardwareAlertThreshold"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hardwareAlertThreshold = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("controlPlaneAcls"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new ResourceIdentifier(item.GetString()));
                        }
                    }
                    controlPlaneAcls = array;
                    continue;
                }
                if (property.NameEquals("featureFlags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FeatureFlagProperties> array = new List<FeatureFlagProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FeatureFlagProperties.DeserializeFeatureFlagProperties(item, options));
                    }
                    featureFlags = array;
                    continue;
                }
                if (property.NameEquals("trustedIpPrefixes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new ResourceIdentifier(item.GetString()));
                        }
                    }
                    trustedIPPrefixes = array;
                    continue;
                }
                if (property.NameEquals("uniqueRdConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    uniqueRdConfiguration = UniqueRouteDistinguisherProperties.DeserializeUniqueRouteDistinguisherProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("storageArrayCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageArrayCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("activeCommitBatches"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    activeCommitBatches = array;
                    continue;
                }
                if (property.NameEquals("lastOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastOperation = LastOperationProperties.DeserializeLastOperationProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("configurationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configurationState = new NetworkFabricConfigurationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new NetworkFabricProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("administrativeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    administrativeState = new NetworkFabricAdministrativeState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new NetworkFabricProperties(
                annotation,
                networkFabricSku,
                fabricVersion,
                routerIds ?? new ChangeTrackingList<string>(),
                storageAccountConfiguration,
                fabricLocks ?? new ChangeTrackingList<FabricLockProperties>(),
                networkFabricControllerId,
                rackCount,
                serverCountPerRack,
                ipv4Prefix,
                ipv6Prefix,
                fabricAsn,
                terminalServerConfiguration,
                managementNetworkConfiguration,
                racks ?? new ChangeTrackingList<string>(),
                l2IsolationDomains ?? new ChangeTrackingList<string>(),
                l3IsolationDomains ?? new ChangeTrackingList<string>(),
                hardwareAlertThreshold,
                controlPlaneAcls ?? new ChangeTrackingList<ResourceIdentifier>(),
                featureFlags ?? new ChangeTrackingList<FeatureFlagProperties>(),
                trustedIPPrefixes ?? new ChangeTrackingList<ResourceIdentifier>(),
                uniqueRdConfiguration,
                storageArrayCount,
                activeCommitBatches ?? new ChangeTrackingList<string>(),
                lastOperation,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<NetworkFabricProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkFabricProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerManagedNetworkFabricContext.Default);
                default:
                    throw new FormatException($"The model {nameof(NetworkFabricProperties)} does not support writing '{options.Format}' format.");
            }
        }

        NetworkFabricProperties IPersistableModel<NetworkFabricProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkFabricProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeNetworkFabricProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NetworkFabricProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<NetworkFabricProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
