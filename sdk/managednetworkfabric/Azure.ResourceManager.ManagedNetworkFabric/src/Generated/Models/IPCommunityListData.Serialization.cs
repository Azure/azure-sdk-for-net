// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ManagedNetworkFabric
{
    public partial class IPCommunityListData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(Action))
            {
                writer.WritePropertyName("action"u8);
                writer.WriteStringValue(Action.Value.ToString());
            }
            if (Optional.IsDefined(LocalAS))
            {
                writer.WritePropertyName("localAS"u8);
                writer.WriteStringValue(LocalAS.Value.ToString());
            }
            if (Optional.IsDefined(Gshut))
            {
                writer.WritePropertyName("gshut"u8);
                writer.WriteStringValue(Gshut.Value.ToString());
            }
            if (Optional.IsDefined(Internet))
            {
                writer.WritePropertyName("internet"u8);
                writer.WriteStringValue(Internet.Value.ToString());
            }
            if (Optional.IsDefined(Advertise))
            {
                writer.WritePropertyName("advertise"u8);
                writer.WriteStringValue(Advertise.Value.ToString());
            }
            if (Optional.IsDefined(Export))
            {
                writer.WritePropertyName("export"u8);
                writer.WriteStringValue(Export.Value.ToString());
            }
            if (Optional.IsCollectionDefined(CommunityMembers))
            {
                writer.WritePropertyName("communityMembers"u8);
                writer.WriteStartArray();
                foreach (var item in CommunityMembers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EvpnEsImportRouteTargets))
            {
                writer.WritePropertyName("evpnEsImportRouteTargets"u8);
                writer.WriteStartArray();
                foreach (var item in EvpnEsImportRouteTargets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static IPCommunityListData DeserializeIPCommunityListData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> annotation = default;
            Optional<CommunityActionType> action = default;
            Optional<LocalASBoolean> localAS = default;
            Optional<GshutBoolean> gshut = default;
            Optional<InternetBoolean> internet = default;
            Optional<AdvertiseBoolean> advertise = default;
            Optional<ExportBoolean> export = default;
            Optional<IList<IPCommunityListPropertiesCommunityMembersItem>> communityMembers = default;
            Optional<IList<IPCommunityListPropertiesEvpnEsImportRouteTargetsItem>> evpnEsImportRouteTargets = default;
            Optional<ProvisioningState> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("annotation"u8))
                        {
                            annotation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("action"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            action = new CommunityActionType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("localAS"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            localAS = new LocalASBoolean(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("gshut"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            gshut = new GshutBoolean(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("internet"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            internet = new InternetBoolean(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("advertise"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            advertise = new AdvertiseBoolean(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("export"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            export = new ExportBoolean(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("communityMembers"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<IPCommunityListPropertiesCommunityMembersItem> array = new List<IPCommunityListPropertiesCommunityMembersItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(IPCommunityListPropertiesCommunityMembersItem.DeserializeIPCommunityListPropertiesCommunityMembersItem(item));
                            }
                            communityMembers = array;
                            continue;
                        }
                        if (property0.NameEquals("evpnEsImportRouteTargets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<IPCommunityListPropertiesEvpnEsImportRouteTargetsItem> array = new List<IPCommunityListPropertiesEvpnEsImportRouteTargetsItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(IPCommunityListPropertiesEvpnEsImportRouteTargetsItem.DeserializeIPCommunityListPropertiesEvpnEsImportRouteTargetsItem(item));
                            }
                            evpnEsImportRouteTargets = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new IPCommunityListData(id, name, type, systemData.Value, Optional.ToDictionary(tags), location, annotation.Value, Optional.ToNullable(action), Optional.ToNullable(localAS), Optional.ToNullable(gshut), Optional.ToNullable(internet), Optional.ToNullable(advertise), Optional.ToNullable(export), Optional.ToList(communityMembers), Optional.ToList(evpnEsImportRouteTargets), Optional.ToNullable(provisioningState));
        }
    }
}
