// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkDeviceSkuPropertiesLimits : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PhysicalInterfaceCount))
            {
                writer.WritePropertyName("physicalInterfaceCount"u8);
                writer.WriteNumberValue(PhysicalInterfaceCount.Value);
            }
            if (Optional.IsDefined(MaxSubInterfaces))
            {
                writer.WritePropertyName("maxSubInterfaces"u8);
                writer.WriteNumberValue(MaxSubInterfaces.Value);
            }
            if (Optional.IsDefined(MaxTunnelInterfaces))
            {
                writer.WritePropertyName("maxTunnelInterfaces"u8);
                writer.WriteNumberValue(MaxTunnelInterfaces.Value);
            }
            if (Optional.IsDefined(MaxVirtualRouterFunctions))
            {
                writer.WritePropertyName("maxVirtualRouterFunctions"u8);
                writer.WriteNumberValue(MaxVirtualRouterFunctions.Value);
            }
            if (Optional.IsDefined(MaxBorderGatewayProtocolPeers))
            {
                writer.WritePropertyName("maxBorderGatewayProtocolPeers"u8);
                writer.WriteNumberValue(MaxBorderGatewayProtocolPeers.Value);
            }
            if (Optional.IsDefined(MaxBidirectionalForwardingDetectionPeers))
            {
                writer.WritePropertyName("maxBidirectionalForwardingDetectionPeers"u8);
                writer.WriteNumberValue(MaxBidirectionalForwardingDetectionPeers.Value);
            }
            writer.WriteEndObject();
        }

        internal static NetworkDeviceSkuPropertiesLimits DeserializeNetworkDeviceSkuPropertiesLimits(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> physicalInterfaceCount = default;
            Optional<int> maxSubInterfaces = default;
            Optional<int> maxTunnelInterfaces = default;
            Optional<int> maxVirtualRouterFunctions = default;
            Optional<int> maxBorderGatewayProtocolPeers = default;
            Optional<int> maxBidirectionalForwardingDetectionPeers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("physicalInterfaceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    physicalInterfaceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxSubInterfaces"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxSubInterfaces = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxTunnelInterfaces"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxTunnelInterfaces = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxVirtualRouterFunctions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxVirtualRouterFunctions = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxBorderGatewayProtocolPeers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxBorderGatewayProtocolPeers = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxBidirectionalForwardingDetectionPeers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxBidirectionalForwardingDetectionPeers = property.Value.GetInt32();
                    continue;
                }
            }
            return new NetworkDeviceSkuPropertiesLimits(Optional.ToNullable(physicalInterfaceCount), Optional.ToNullable(maxSubInterfaces), Optional.ToNullable(maxTunnelInterfaces), Optional.ToNullable(maxVirtualRouterFunctions), Optional.ToNullable(maxBorderGatewayProtocolPeers), Optional.ToNullable(maxBidirectionalForwardingDetectionPeers));
        }
    }
}
