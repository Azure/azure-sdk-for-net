// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkTapRuleAction : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(TapRuleActionType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(TapRuleActionType.Value.ToString());
            }
            if (Core.Optional.IsDefined(Truncate))
            {
                writer.WritePropertyName("truncate"u8);
                writer.WriteStringValue(Truncate);
            }
            if (Core.Optional.IsDefined(IsTimestampEnabled))
            {
                writer.WritePropertyName("isTimestampEnabled"u8);
                writer.WriteStringValue(IsTimestampEnabled.Value.ToString());
            }
            if (Core.Optional.IsDefined(DestinationId))
            {
                writer.WritePropertyName("destinationId"u8);
                writer.WriteStringValue(DestinationId);
            }
            if (Core.Optional.IsDefined(MatchConfigurationName))
            {
                writer.WritePropertyName("matchConfigurationName"u8);
                writer.WriteStringValue(MatchConfigurationName);
            }
            writer.WriteEndObject();
        }

        internal static NetworkTapRuleAction DeserializeNetworkTapRuleAction(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<TapRuleActionType> type = default;
            Core.Optional<string> truncate = default;
            Core.Optional<NetworkFabricBooleanValue> isTimestampEnabled = default;
            Core.Optional<ResourceIdentifier> destinationId = default;
            Core.Optional<string> matchConfigurationName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new TapRuleActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("truncate"u8))
                {
                    truncate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isTimestampEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isTimestampEnabled = new NetworkFabricBooleanValue(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("destinationId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    destinationId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("matchConfigurationName"u8))
                {
                    matchConfigurationName = property.Value.GetString();
                    continue;
                }
            }
            return new NetworkTapRuleAction(Core.Optional.ToNullable(type), truncate.Value, Core.Optional.ToNullable(isTimestampEnabled), destinationId.Value, matchConfigurationName.Value);
        }
    }
}
