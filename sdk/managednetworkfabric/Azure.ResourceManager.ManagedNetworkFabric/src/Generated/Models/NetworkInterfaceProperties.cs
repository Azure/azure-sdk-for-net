// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Network Interface Properties defines the properties of the resource. </summary>
    public partial class NetworkInterfaceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkInterfaceProperties"/>. </summary>
        public NetworkInterfaceProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NetworkInterfaceProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="physicalIdentifier"> Physical Identifier of the network interface. </param>
        /// <param name="connectedTo"> The ARM resource id of the interface or compute server its connected to. </param>
        /// <param name="interfaceType"> The Interface Type. Example: Management/Data. </param>
        /// <param name="ipv4Address"> IPv4Address of the interface. </param>
        /// <param name="ipv6Address"> IPv6Address of the interface. </param>
        /// <param name="description"> Description of the interface. </param>
        /// <param name="additionalDescription"> Additional description of the interface. </param>
        /// <param name="lastOperation"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkInterfaceProperties(string annotation, string physicalIdentifier, string connectedTo, NetworkDeviceInterfaceType? interfaceType, string ipv4Address, string ipv6Address, string description, string additionalDescription, LastOperationProperties lastOperation, NetworkFabricProvisioningState? provisioningState, NetworkFabricAdministrativeState? administrativeState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            PhysicalIdentifier = physicalIdentifier;
            ConnectedTo = connectedTo;
            InterfaceType = interfaceType;
            IPv4Address = ipv4Address;
            IPv6Address = ipv6Address;
            Description = description;
            AdditionalDescription = additionalDescription;
            LastOperation = lastOperation;
            ProvisioningState = provisioningState;
            AdministrativeState = administrativeState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> Physical Identifier of the network interface. </summary>
        public string PhysicalIdentifier { get; }
        /// <summary> The ARM resource id of the interface or compute server its connected to. </summary>
        public string ConnectedTo { get; }
        /// <summary> The Interface Type. Example: Management/Data. </summary>
        public NetworkDeviceInterfaceType? InterfaceType { get; }
        /// <summary> IPv4Address of the interface. </summary>
        public string IPv4Address { get; }
        /// <summary> IPv6Address of the interface. </summary>
        public string IPv6Address { get; }
        /// <summary> Description of the interface. </summary>
        public string Description { get; set; }
        /// <summary> Additional description of the interface. </summary>
        public string AdditionalDescription { get; set; }
        /// <summary> Details of the last operation performed on the resource. </summary>
        internal LastOperationProperties LastOperation { get; }
        /// <summary> Details status of the last operation performed on the resource. </summary>
        public string LastOperationDetails
        {
            get => LastOperation?.Details;
        }

        /// <summary> Provisioning state of the resource. </summary>
        public NetworkFabricProvisioningState? ProvisioningState { get; }
        /// <summary> Administrative state of the resource. </summary>
        public NetworkFabricAdministrativeState? AdministrativeState { get; }
    }
}
