// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Network Tap Properties defines the properties of the resource. </summary>
    public partial class NetworkTapProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkTapProperties"/>. </summary>
        /// <param name="networkPacketBrokerId"> ARM resource ID of the Network Packet Broker. </param>
        /// <param name="destinations"> List of destinations to send the filter traffic. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkPacketBrokerId"/> or <paramref name="destinations"/> is null. </exception>
        public NetworkTapProperties(ResourceIdentifier networkPacketBrokerId, IEnumerable<NetworkTapDestinationProperties> destinations)
        {
            Argument.AssertNotNull(networkPacketBrokerId, nameof(networkPacketBrokerId));
            Argument.AssertNotNull(destinations, nameof(destinations));

            NetworkPacketBrokerId = networkPacketBrokerId;
            Destinations = destinations.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="NetworkTapProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkPacketBrokerId"> ARM resource ID of the Network Packet Broker. </param>
        /// <param name="sourceTapRuleId"> Source Tap Rule Id. ARM Resource ID of the Network Tap Rule. </param>
        /// <param name="destinations"> List of destinations to send the filter traffic. </param>
        /// <param name="pollingType"> Polling type. </param>
        /// <param name="lastOperation"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Gets the configurations state of the resource. </param>
        /// <param name="provisioningState"> Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning. </param>
        /// <param name="administrativeState"> Administrative state of the resource. Example -Enabled/Disabled. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkTapProperties(string annotation, ResourceIdentifier networkPacketBrokerId, ResourceIdentifier sourceTapRuleId, IList<NetworkTapDestinationProperties> destinations, NetworkTapPollingType? pollingType, LastOperationProperties lastOperation, NetworkFabricConfigurationState? configurationState, NetworkFabricProvisioningState? provisioningState, NetworkFabricAdministrativeState? administrativeState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            NetworkPacketBrokerId = networkPacketBrokerId;
            SourceTapRuleId = sourceTapRuleId;
            Destinations = destinations;
            PollingType = pollingType;
            LastOperation = lastOperation;
            ConfigurationState = configurationState;
            ProvisioningState = provisioningState;
            AdministrativeState = administrativeState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NetworkTapProperties"/> for deserialization. </summary>
        internal NetworkTapProperties()
        {
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> ARM resource ID of the Network Packet Broker. </summary>
        public ResourceIdentifier NetworkPacketBrokerId { get; set; }
        /// <summary> Source Tap Rule Id. ARM Resource ID of the Network Tap Rule. </summary>
        public ResourceIdentifier SourceTapRuleId { get; }
        /// <summary> List of destinations to send the filter traffic. </summary>
        public IList<NetworkTapDestinationProperties> Destinations { get; }
        /// <summary> Polling type. </summary>
        public NetworkTapPollingType? PollingType { get; set; }
        /// <summary> Details of the last operation performed on the resource. </summary>
        internal LastOperationProperties LastOperation { get; }
        /// <summary> Details status of the last operation performed on the resource. </summary>
        public string LastOperationDetails
        {
            get => LastOperation?.Details;
        }

        /// <summary> Gets the configurations state of the resource. </summary>
        public NetworkFabricConfigurationState? ConfigurationState { get; }
        /// <summary> Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning. </summary>
        public NetworkFabricProvisioningState? ProvisioningState { get; }
        /// <summary> Administrative state of the resource. Example -Enabled/Disabled. </summary>
        public NetworkFabricAdministrativeState? AdministrativeState { get; }
    }
}
