// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Access Control List Properties defines the resource properties. </summary>
    public partial class AccessControlListProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AccessControlListProperties"/>. </summary>
        /// <param name="configurationType"> Input method to configure Access Control List. </param>
        public AccessControlListProperties(NetworkFabricConfigurationType configurationType)
        {
            ConfigurationType = configurationType;
            MatchConfigurations = new ChangeTrackingList<AccessControlListMatchConfiguration>();
            DynamicMatchConfigurations = new ChangeTrackingList<CommonDynamicMatchConfiguration>();
        }

        /// <summary> Initializes a new instance of <see cref="AccessControlListProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="configurationType"> Input method to configure Access Control List. </param>
        /// <param name="aclsUri"> Access Control List file URL. </param>
        /// <param name="defaultAction"> Default action that needs to be applied when no condition is matched. Example: Permit | Deny. </param>
        /// <param name="matchConfigurations"> List of match configurations. </param>
        /// <param name="dynamicMatchConfigurations"> List of dynamic match configurations. </param>
        /// <param name="lastSyncedOn"> The last synced timestamp. </param>
        /// <param name="aclType"> Access Control List (ACL) Type. </param>
        /// <param name="deviceRole"> Device Role. </param>
        /// <param name="globalAccessControlListActions"> Global Access Control List (ACL) actions. </param>
        /// <param name="lastOperation"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AccessControlListProperties(string annotation, NetworkFabricConfigurationType configurationType, Uri aclsUri, CommunityActionType? defaultAction, IList<AccessControlListMatchConfiguration> matchConfigurations, IList<CommonDynamicMatchConfiguration> dynamicMatchConfigurations, DateTimeOffset? lastSyncedOn, AclType? aclType, DeviceRole? deviceRole, GlobalAccessControlListActionProperties globalAccessControlListActions, LastOperationProperties lastOperation, NetworkFabricConfigurationState? configurationState, NetworkFabricProvisioningState? provisioningState, NetworkFabricAdministrativeState? administrativeState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            ConfigurationType = configurationType;
            AclsUri = aclsUri;
            DefaultAction = defaultAction;
            MatchConfigurations = matchConfigurations;
            DynamicMatchConfigurations = dynamicMatchConfigurations;
            LastSyncedOn = lastSyncedOn;
            AclType = aclType;
            DeviceRole = deviceRole;
            GlobalAccessControlListActions = globalAccessControlListActions;
            LastOperation = lastOperation;
            ConfigurationState = configurationState;
            ProvisioningState = provisioningState;
            AdministrativeState = administrativeState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AccessControlListProperties"/> for deserialization. </summary>
        internal AccessControlListProperties()
        {
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> Input method to configure Access Control List. </summary>
        public NetworkFabricConfigurationType ConfigurationType { get; set; }
        /// <summary> Access Control List file URL. </summary>
        public Uri AclsUri { get; set; }
        /// <summary> Default action that needs to be applied when no condition is matched. Example: Permit | Deny. </summary>
        public CommunityActionType? DefaultAction { get; set; }
        /// <summary> List of match configurations. </summary>
        public IList<AccessControlListMatchConfiguration> MatchConfigurations { get; }
        /// <summary> List of dynamic match configurations. </summary>
        public IList<CommonDynamicMatchConfiguration> DynamicMatchConfigurations { get; }
        /// <summary> The last synced timestamp. </summary>
        public DateTimeOffset? LastSyncedOn { get; }
        /// <summary> Access Control List (ACL) Type. </summary>
        public AclType? AclType { get; set; }
        /// <summary> Device Role. </summary>
        public DeviceRole? DeviceRole { get; set; }
        /// <summary> Global Access Control List (ACL) actions. </summary>
        internal GlobalAccessControlListActionProperties GlobalAccessControlListActions { get; set; }
        /// <summary> Configuration to enable or disable ACL action count. </summary>
        public NetworkFabricBooleanValue? GlobalAccessControlListActionsEnableCount
        {
            get => GlobalAccessControlListActions is null ? default : GlobalAccessControlListActions.EnableCount;
            set
            {
                if (GlobalAccessControlListActions is null)
                    GlobalAccessControlListActions = new GlobalAccessControlListActionProperties();
                GlobalAccessControlListActions.EnableCount = value;
            }
        }

        /// <summary> Details of the last operation performed on the resource. </summary>
        internal LastOperationProperties LastOperation { get; }
        /// <summary> Details status of the last operation performed on the resource. </summary>
        public string LastOperationDetails
        {
            get => LastOperation?.Details;
        }

        /// <summary> Configuration state of the resource. </summary>
        public NetworkFabricConfigurationState? ConfigurationState { get; }
        /// <summary> Provisioning state of the resource. </summary>
        public NetworkFabricProvisioningState? ProvisioningState { get; }
        /// <summary> Administrative state of the resource. </summary>
        public NetworkFabricAdministrativeState? AdministrativeState { get; }
    }
}
