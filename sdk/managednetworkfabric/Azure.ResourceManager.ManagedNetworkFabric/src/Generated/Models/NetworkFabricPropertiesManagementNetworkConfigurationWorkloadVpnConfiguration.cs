// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Configuration for workload vpn. </summary>
    public partial class NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration
    {
        /// <summary> Initializes a new instance of NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration. </summary>
        /// <param name="optionBProperties"> option B properties object. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="optionBProperties"/> is null. </exception>
        public NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration(NetworkFabricOptionBProperties optionBProperties)
        {
            Argument.AssertNotNull(optionBProperties, nameof(optionBProperties));

            OptionBProperties = optionBProperties;
        }

        /// <summary> Initializes a new instance of NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration. </summary>
        /// <param name="administrativeState"> Indicates configuration state. Example: enabled | disabled. </param>
        /// <param name="peeringOption"> Peering option list. </param>
        /// <param name="networkToNetworkInterconnectId"> Gets the networkToNetworkInterconnectId of the resource. </param>
        /// <param name="optionAProperties"> option A properties object. </param>
        /// <param name="optionBProperties"> option B properties object. </param>
        internal NetworkFabricPropertiesManagementNetworkConfigurationWorkloadVpnConfiguration(EnabledDisabledState? administrativeState, PeeringOption? peeringOption, string networkToNetworkInterconnectId, NetworkFabricOptionAProperties optionAProperties, NetworkFabricOptionBProperties optionBProperties)
        {
            AdministrativeState = administrativeState;
            PeeringOption = peeringOption;
            NetworkToNetworkInterconnectId = networkToNetworkInterconnectId;
            OptionAProperties = optionAProperties;
            OptionBProperties = optionBProperties;
        }

        /// <summary> Indicates configuration state. Example: enabled | disabled. </summary>
        public EnabledDisabledState? AdministrativeState { get; }
        /// <summary> Peering option list. </summary>
        public PeeringOption? PeeringOption { get; set; }
        /// <summary> Gets the networkToNetworkInterconnectId of the resource. </summary>
        public string NetworkToNetworkInterconnectId { get; }
        /// <summary> option A properties object. </summary>
        public NetworkFabricOptionAProperties OptionAProperties { get; set; }
        /// <summary> option B properties object. </summary>
        public NetworkFabricOptionBProperties OptionBProperties { get; set; }
    }
}
