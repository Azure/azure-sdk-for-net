// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkToNetworkInterconnectPatchProperties : IUtf8JsonSerializable, IJsonModel<NetworkToNetworkInterconnectPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<NetworkToNetworkInterconnectPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<NetworkToNetworkInterconnectPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkToNetworkInterconnectPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkToNetworkInterconnectPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Layer2Configuration))
            {
                writer.WritePropertyName("layer2Configuration"u8);
                writer.WriteObjectValue(Layer2Configuration, options);
            }
            if (Optional.IsDefined(OptionBLayer3Configuration))
            {
                writer.WritePropertyName("optionBLayer3Configuration"u8);
                writer.WriteObjectValue(OptionBLayer3Configuration, options);
            }
            if (Optional.IsDefined(NpbStaticRouteConfiguration))
            {
                writer.WritePropertyName("npbStaticRouteConfiguration"u8);
                writer.WriteObjectValue(NpbStaticRouteConfiguration, options);
            }
            if (Optional.IsDefined(StaticRouteConfiguration))
            {
                writer.WritePropertyName("staticRouteConfiguration"u8);
                writer.WriteObjectValue(StaticRouteConfiguration, options);
            }
            if (Optional.IsDefined(ImportRoutePolicy))
            {
                writer.WritePropertyName("importRoutePolicy"u8);
                writer.WriteObjectValue(ImportRoutePolicy, options);
            }
            if (Optional.IsDefined(ExportRoutePolicy))
            {
                writer.WritePropertyName("exportRoutePolicy"u8);
                writer.WriteObjectValue(ExportRoutePolicy, options);
            }
            if (Optional.IsDefined(EgressAclId))
            {
                writer.WritePropertyName("egressAclId"u8);
                writer.WriteStringValue(EgressAclId);
            }
            if (Optional.IsDefined(IngressAclId))
            {
                writer.WritePropertyName("ingressAclId"u8);
                writer.WriteStringValue(IngressAclId);
            }
            if (Optional.IsDefined(MicroBfdState))
            {
                writer.WritePropertyName("microBfdState"u8);
                writer.WriteStringValue(MicroBfdState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        NetworkToNetworkInterconnectPatchProperties IJsonModel<NetworkToNetworkInterconnectPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkToNetworkInterconnectPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(NetworkToNetworkInterconnectPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeNetworkToNetworkInterconnectPatchProperties(document.RootElement, options);
        }

        internal static NetworkToNetworkInterconnectPatchProperties DeserializeNetworkToNetworkInterconnectPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Layer2ConfigurationPatch layer2Configuration = default;
            OptionBLayer3ConfigurationPatchProperties optionBLayer3Configuration = default;
            NpbStaticRouteConfigurationPatch npbStaticRouteConfiguration = default;
            NniStaticRoutePatchConfiguration staticRouteConfiguration = default;
            ImportRoutePolicyInformationPatch importRoutePolicy = default;
            ExportRoutePolicyInformationPatch exportRoutePolicy = default;
            ResourceIdentifier egressAclId = default;
            ResourceIdentifier ingressAclId = default;
            MicroBfdState? microBfdState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("layer2Configuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    layer2Configuration = Layer2ConfigurationPatch.DeserializeLayer2ConfigurationPatch(property.Value, options);
                    continue;
                }
                if (property.NameEquals("optionBLayer3Configuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optionBLayer3Configuration = OptionBLayer3ConfigurationPatchProperties.DeserializeOptionBLayer3ConfigurationPatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("npbStaticRouteConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    npbStaticRouteConfiguration = NpbStaticRouteConfigurationPatch.DeserializeNpbStaticRouteConfigurationPatch(property.Value, options);
                    continue;
                }
                if (property.NameEquals("staticRouteConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    staticRouteConfiguration = NniStaticRoutePatchConfiguration.DeserializeNniStaticRoutePatchConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("importRoutePolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    importRoutePolicy = ImportRoutePolicyInformationPatch.DeserializeImportRoutePolicyInformationPatch(property.Value, options);
                    continue;
                }
                if (property.NameEquals("exportRoutePolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exportRoutePolicy = ExportRoutePolicyInformationPatch.DeserializeExportRoutePolicyInformationPatch(property.Value, options);
                    continue;
                }
                if (property.NameEquals("egressAclId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    egressAclId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ingressAclId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressAclId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("microBfdState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    microBfdState = new MicroBfdState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new NetworkToNetworkInterconnectPatchProperties(
                layer2Configuration,
                optionBLayer3Configuration,
                npbStaticRouteConfiguration,
                staticRouteConfiguration,
                importRoutePolicy,
                exportRoutePolicy,
                egressAclId,
                ingressAclId,
                microBfdState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<NetworkToNetworkInterconnectPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkToNetworkInterconnectPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerManagedNetworkFabricContext.Default);
                default:
                    throw new FormatException($"The model {nameof(NetworkToNetworkInterconnectPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        NetworkToNetworkInterconnectPatchProperties IPersistableModel<NetworkToNetworkInterconnectPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<NetworkToNetworkInterconnectPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeNetworkToNetworkInterconnectPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(NetworkToNetworkInterconnectPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<NetworkToNetworkInterconnectPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
