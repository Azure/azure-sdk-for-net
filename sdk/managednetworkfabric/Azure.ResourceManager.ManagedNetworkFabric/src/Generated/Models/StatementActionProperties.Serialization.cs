// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class StatementActionProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(LocalPreference))
            {
                writer.WritePropertyName("localPreference"u8);
                writer.WriteNumberValue(LocalPreference.Value);
            }
            writer.WritePropertyName("actionType"u8);
            writer.WriteStringValue(ActionType.ToString());
            if (Core.Optional.IsDefined(IPCommunityProperties))
            {
                writer.WritePropertyName("ipCommunityProperties"u8);
                writer.WriteObjectValue(IPCommunityProperties);
            }
            if (Core.Optional.IsDefined(IPExtendedCommunityProperties))
            {
                writer.WritePropertyName("ipExtendedCommunityProperties"u8);
                writer.WriteObjectValue(IPExtendedCommunityProperties);
            }
            writer.WriteEndObject();
        }

        internal static StatementActionProperties DeserializeStatementActionProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<long> localPreference = default;
            RoutePolicyActionType actionType = default;
            Core.Optional<ActionIPCommunityProperties> ipCommunityProperties = default;
            Core.Optional<ActionIPExtendedCommunityProperties> ipExtendedCommunityProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("localPreference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    localPreference = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("actionType"u8))
                {
                    actionType = new RoutePolicyActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipCommunityProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipCommunityProperties = ActionIPCommunityProperties.DeserializeActionIPCommunityProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("ipExtendedCommunityProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipExtendedCommunityProperties = ActionIPExtendedCommunityProperties.DeserializeActionIPExtendedCommunityProperties(property.Value);
                    continue;
                }
            }
            return new StatementActionProperties(Core.Optional.ToNullable(localPreference), actionType, ipCommunityProperties.Value, ipExtendedCommunityProperties.Value);
        }
    }
}
