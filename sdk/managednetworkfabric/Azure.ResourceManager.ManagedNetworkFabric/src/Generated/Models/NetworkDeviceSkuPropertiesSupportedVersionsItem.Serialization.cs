// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkDeviceSkuPropertiesSupportedVersionsItem : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(VendorOSVersion))
            {
                writer.WritePropertyName("vendorOsVersion"u8);
                writer.WriteStringValue(VendorOSVersion);
            }
            if (Optional.IsDefined(VendorFirmwareVersion))
            {
                writer.WritePropertyName("vendorFirmwareVersion"u8);
                writer.WriteStringValue(VendorFirmwareVersion);
            }
            if (Optional.IsDefined(IsCurrent))
            {
                writer.WritePropertyName("isCurrent"u8);
                writer.WriteStringValue(IsCurrent.Value.ToString());
            }
            if (Optional.IsDefined(IsTest))
            {
                writer.WritePropertyName("isTest"u8);
                writer.WriteStringValue(IsTest.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static NetworkDeviceSkuPropertiesSupportedVersionsItem DeserializeNetworkDeviceSkuPropertiesSupportedVersionsItem(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> version = default;
            Optional<string> vendorOSVersion = default;
            Optional<string> vendorFirmwareVersion = default;
            Optional<IsCurrentVersion> isCurrent = default;
            Optional<IsTestVersion> isTest = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vendorOsVersion"u8))
                {
                    vendorOSVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vendorFirmwareVersion"u8))
                {
                    vendorFirmwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isCurrent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCurrent = new IsCurrentVersion(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isTest"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isTest = new IsTestVersion(property.Value.GetString());
                    continue;
                }
            }
            return new NetworkDeviceSkuPropertiesSupportedVersionsItem(version.Value, vendorOSVersion.Value, vendorFirmwareVersion.Value, Optional.ToNullable(isCurrent), Optional.ToNullable(isTest));
        }
    }
}
