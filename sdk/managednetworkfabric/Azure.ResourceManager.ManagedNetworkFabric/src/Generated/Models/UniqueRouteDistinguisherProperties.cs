// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Unique Route Distinguisher properties. </summary>
    public partial class UniqueRouteDistinguisherProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UniqueRouteDistinguisherProperties"/>. </summary>
        public UniqueRouteDistinguisherProperties()
        {
            UniqueRds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="UniqueRouteDistinguisherProperties"/>. </summary>
        /// <param name="uniqueRdConfigurationState"> Unique Route Distinguisher configuration state. Default is Enabled. </param>
        /// <param name="uniqueRds"> List of Unique Route Distinguisher addresses. </param>
        /// <param name="nniDerivedUniqueRdConfigurationState"> NNI derived unique Route Distinguisher state. Default is Disabled. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UniqueRouteDistinguisherProperties(UniqueRouteDistinguisherConfigurationState? uniqueRdConfigurationState, IReadOnlyList<string> uniqueRds, NNIDerivedUniqueRouteDistinguisherConfigurationState? nniDerivedUniqueRdConfigurationState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            UniqueRdConfigurationState = uniqueRdConfigurationState;
            UniqueRds = uniqueRds;
            NniDerivedUniqueRdConfigurationState = nniDerivedUniqueRdConfigurationState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Unique Route Distinguisher configuration state. Default is Enabled. </summary>
        public UniqueRouteDistinguisherConfigurationState? UniqueRdConfigurationState { get; set; }
        /// <summary> List of Unique Route Distinguisher addresses. </summary>
        public IReadOnlyList<string> UniqueRds { get; }
        /// <summary> NNI derived unique Route Distinguisher state. Default is Disabled. </summary>
        public NNIDerivedUniqueRouteDistinguisherConfigurationState? NniDerivedUniqueRdConfigurationState { get; set; }
    }
}
