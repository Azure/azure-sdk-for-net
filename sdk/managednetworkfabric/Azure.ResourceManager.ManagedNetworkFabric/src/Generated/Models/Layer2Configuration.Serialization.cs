// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class Layer2Configuration : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PortCount))
            {
                writer.WritePropertyName("portCount"u8);
                writer.WriteNumberValue(PortCount.Value);
            }
            writer.WritePropertyName("mtu"u8);
            writer.WriteNumberValue(Mtu);
            writer.WriteEndObject();
        }

        internal static Layer2Configuration DeserializeLayer2Configuration(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> portCount = default;
            int mtu = default;
            Optional<IReadOnlyList<string>> interfaces = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("portCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    portCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("mtu"u8))
                {
                    mtu = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("interfaces"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    interfaces = array;
                    continue;
                }
            }
            return new Layer2Configuration(Optional.ToNullable(portCount), mtu, Optional.ToList(interfaces));
        }
    }
}
