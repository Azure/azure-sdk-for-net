// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class IPPrefixRule : IUtf8JsonSerializable, IModelJsonSerializable<IPPrefixRule>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<IPPrefixRule>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<IPPrefixRule>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<IPPrefixRule>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("action"u8);
            writer.WriteStringValue(Action.ToString());
            writer.WritePropertyName("sequenceNumber"u8);
            writer.WriteNumberValue(SequenceNumber);
            writer.WritePropertyName("networkPrefix"u8);
            writer.WriteStringValue(NetworkPrefix);
            if (Optional.IsDefined(Condition))
            {
                writer.WritePropertyName("condition"u8);
                writer.WriteStringValue(Condition.Value.ToString());
            }
            if (Optional.IsDefined(SubnetMaskLength))
            {
                writer.WritePropertyName("subnetMaskLength"u8);
                writer.WriteStringValue(SubnetMaskLength);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static IPPrefixRule DeserializeIPPrefixRule(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CommunityActionType action = default;
            long sequenceNumber = default;
            string networkPrefix = default;
            Optional<IPPrefixRuleCondition> condition = default;
            Optional<string> subnetMaskLength = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("action"u8))
                {
                    action = new CommunityActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sequenceNumber"u8))
                {
                    sequenceNumber = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("networkPrefix"u8))
                {
                    networkPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("condition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    condition = new IPPrefixRuleCondition(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subnetMaskLength"u8))
                {
                    subnetMaskLength = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new IPPrefixRule(action, sequenceNumber, networkPrefix, Optional.ToNullable(condition), subnetMaskLength.Value, serializedAdditionalRawData);
        }

        IPPrefixRule IModelJsonSerializable<IPPrefixRule>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<IPPrefixRule>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeIPPrefixRule(doc.RootElement, options);
        }

        BinaryData IModelSerializable<IPPrefixRule>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<IPPrefixRule>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        IPPrefixRule IModelSerializable<IPPrefixRule>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<IPPrefixRule>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeIPPrefixRule(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="IPPrefixRule"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="IPPrefixRule"/> to convert. </param>
        public static implicit operator RequestContent(IPPrefixRule model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="IPPrefixRule"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator IPPrefixRule(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeIPPrefixRule(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
