// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class IPPrefixRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("action"u8);
            writer.WriteStringValue(Action.ToString());
            writer.WritePropertyName("sequenceNumber"u8);
            writer.WriteNumberValue(SequenceNumber);
            writer.WritePropertyName("networkPrefix"u8);
            writer.WriteStringValue(NetworkPrefix);
            if (Optional.IsDefined(Condition))
            {
                writer.WritePropertyName("condition"u8);
                writer.WriteStringValue(Condition.Value.ToString());
            }
            if (Optional.IsDefined(SubnetMaskLength))
            {
                writer.WritePropertyName("subnetMaskLength"u8);
                writer.WriteStringValue(SubnetMaskLength);
            }
            writer.WriteEndObject();
        }

        internal static IPPrefixRule DeserializeIPPrefixRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            CommunityActionType action = default;
            long sequenceNumber = default;
            string networkPrefix = default;
            Optional<IPPrefixRuleCondition> condition = default;
            Optional<string> subnetMaskLength = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("action"u8))
                {
                    action = new CommunityActionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sequenceNumber"u8))
                {
                    sequenceNumber = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("networkPrefix"u8))
                {
                    networkPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("condition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    condition = new IPPrefixRuleCondition(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subnetMaskLength"u8))
                {
                    subnetMaskLength = property.Value.GetString();
                    continue;
                }
            }
            return new IPPrefixRule(action, sequenceNumber, networkPrefix, Optional.ToNullable(condition), subnetMaskLength.Value);
        }
    }
}
