// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkFabricL3IsolationDomainPatch : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(RedistributeConnectedSubnets))
            {
                writer.WritePropertyName("redistributeConnectedSubnets"u8);
                writer.WriteStringValue(RedistributeConnectedSubnets.Value.ToString());
            }
            if (Optional.IsDefined(RedistributeStaticRoutes))
            {
                writer.WritePropertyName("redistributeStaticRoutes"u8);
                writer.WriteStringValue(RedistributeStaticRoutes.Value.ToString());
            }
            if (Optional.IsDefined(AggregateRouteConfiguration))
            {
                writer.WritePropertyName("aggregateRouteConfiguration"u8);
                writer.WriteObjectValue(AggregateRouteConfiguration);
            }
            if (Optional.IsDefined(ConnectedSubnetRoutePolicy))
            {
                writer.WritePropertyName("connectedSubnetRoutePolicy"u8);
                writer.WriteObjectValue(ConnectedSubnetRoutePolicy);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }
    }
}
