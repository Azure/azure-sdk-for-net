// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class InternalNetworkPatchProperties : IUtf8JsonSerializable, IJsonModel<InternalNetworkPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InternalNetworkPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InternalNetworkPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternalNetworkPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalNetworkPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(Mtu))
            {
                writer.WritePropertyName("mtu"u8);
                writer.WriteNumberValue(Mtu.Value);
            }
            if (Optional.IsCollectionDefined(ConnectedIPv4Subnets))
            {
                writer.WritePropertyName("connectedIPv4Subnets"u8);
                writer.WriteStartArray();
                foreach (var item in ConnectedIPv4Subnets)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ConnectedIPv6Subnets))
            {
                writer.WritePropertyName("connectedIPv6Subnets"u8);
                writer.WriteStartArray();
                foreach (var item in ConnectedIPv6Subnets)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ImportRoutePolicy))
            {
                writer.WritePropertyName("importRoutePolicy"u8);
                writer.WriteObjectValue(ImportRoutePolicy, options);
            }
            if (Optional.IsDefined(ExportRoutePolicy))
            {
                writer.WritePropertyName("exportRoutePolicy"u8);
                writer.WriteObjectValue(ExportRoutePolicy, options);
            }
            if (Optional.IsDefined(IngressAclId))
            {
                writer.WritePropertyName("ingressAclId"u8);
                writer.WriteStringValue(IngressAclId);
            }
            if (Optional.IsDefined(EgressAclId))
            {
                writer.WritePropertyName("egressAclId"u8);
                writer.WriteStringValue(EgressAclId);
            }
            if (Optional.IsDefined(IsMonitoringEnabled))
            {
                writer.WritePropertyName("isMonitoringEnabled"u8);
                writer.WriteStringValue(IsMonitoringEnabled.Value.ToString());
            }
            if (Optional.IsDefined(BgpConfiguration))
            {
                writer.WritePropertyName("bgpConfiguration"u8);
                writer.WriteObjectValue(BgpConfiguration, options);
            }
            if (Optional.IsDefined(StaticRouteConfiguration))
            {
                writer.WritePropertyName("staticRouteConfiguration"u8);
                writer.WriteObjectValue(StaticRouteConfiguration, options);
            }
            if (Optional.IsDefined(NativeIPv4PrefixLimit))
            {
                writer.WritePropertyName("nativeIpv4PrefixLimit"u8);
                writer.WriteObjectValue(NativeIPv4PrefixLimit, options);
            }
            if (Optional.IsDefined(NativeIPv6PrefixLimit))
            {
                writer.WritePropertyName("nativeIpv6PrefixLimit"u8);
                writer.WriteObjectValue(NativeIPv6PrefixLimit, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InternalNetworkPatchProperties IJsonModel<InternalNetworkPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternalNetworkPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternalNetworkPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternalNetworkPatchProperties(document.RootElement, options);
        }

        internal static InternalNetworkPatchProperties DeserializeInternalNetworkPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string annotation = default;
            int? mtu = default;
            IList<ConnectedSubnetPatch> connectedIPv4Subnets = default;
            IList<ConnectedSubnetPatch> connectedIPv6Subnets = default;
            ImportRoutePolicy importRoutePolicy = default;
            ExportRoutePolicy exportRoutePolicy = default;
            ResourceIdentifier ingressAclId = default;
            ResourceIdentifier egressAclId = default;
            IsMonitoringEnabled? isMonitoringEnabled = default;
            BgpPatchConfiguration bgpConfiguration = default;
            StaticRoutePatchConfiguration staticRouteConfiguration = default;
            NativeIPv4PrefixLimitPatchProperties nativeIPv4PrefixLimit = default;
            NativeIPv6PrefixLimitPatchProperties nativeIPv6PrefixLimit = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("annotation"u8))
                {
                    annotation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mtu"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mtu = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("connectedIPv4Subnets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConnectedSubnetPatch> array = new List<ConnectedSubnetPatch>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectedSubnetPatch.DeserializeConnectedSubnetPatch(item, options));
                    }
                    connectedIPv4Subnets = array;
                    continue;
                }
                if (property.NameEquals("connectedIPv6Subnets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ConnectedSubnetPatch> array = new List<ConnectedSubnetPatch>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ConnectedSubnetPatch.DeserializeConnectedSubnetPatch(item, options));
                    }
                    connectedIPv6Subnets = array;
                    continue;
                }
                if (property.NameEquals("importRoutePolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    importRoutePolicy = ImportRoutePolicy.DeserializeImportRoutePolicy(property.Value, options);
                    continue;
                }
                if (property.NameEquals("exportRoutePolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exportRoutePolicy = ExportRoutePolicy.DeserializeExportRoutePolicy(property.Value, options);
                    continue;
                }
                if (property.NameEquals("ingressAclId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ingressAclId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("egressAclId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    egressAclId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("isMonitoringEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isMonitoringEnabled = new IsMonitoringEnabled(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bgpConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpConfiguration = BgpPatchConfiguration.DeserializeBgpPatchConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("staticRouteConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    staticRouteConfiguration = StaticRoutePatchConfiguration.DeserializeStaticRoutePatchConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("nativeIpv4PrefixLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nativeIPv4PrefixLimit = NativeIPv4PrefixLimitPatchProperties.DeserializeNativeIPv4PrefixLimitPatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("nativeIpv6PrefixLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nativeIPv6PrefixLimit = NativeIPv6PrefixLimitPatchProperties.DeserializeNativeIPv6PrefixLimitPatchProperties(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InternalNetworkPatchProperties(
                annotation,
                mtu,
                connectedIPv4Subnets ?? new ChangeTrackingList<ConnectedSubnetPatch>(),
                connectedIPv6Subnets ?? new ChangeTrackingList<ConnectedSubnetPatch>(),
                importRoutePolicy,
                exportRoutePolicy,
                ingressAclId,
                egressAclId,
                isMonitoringEnabled,
                bgpConfiguration,
                staticRouteConfiguration,
                nativeIPv4PrefixLimit,
                nativeIPv6PrefixLimit,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InternalNetworkPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternalNetworkPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InternalNetworkPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        InternalNetworkPatchProperties IPersistableModel<InternalNetworkPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternalNetworkPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeInternalNetworkPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternalNetworkPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternalNetworkPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
