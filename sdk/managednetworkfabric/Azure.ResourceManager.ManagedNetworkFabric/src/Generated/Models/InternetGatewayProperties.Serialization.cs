// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class InternetGatewayProperties : IUtf8JsonSerializable, IJsonModel<InternetGatewayProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InternetGatewayProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InternetGatewayProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternetGatewayProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternetGatewayProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(InternetGatewayRuleId))
            {
                writer.WritePropertyName("internetGatewayRuleId"u8);
                writer.WriteStringValue(InternetGatewayRuleId);
            }
            if (options.Format != "W" && Optional.IsDefined(IPv4Address))
            {
                writer.WritePropertyName("ipv4Address"u8);
                writer.WriteStringValue(IPv4Address);
            }
            if (options.Format != "W" && Optional.IsDefined(Port))
            {
                writer.WritePropertyName("port"u8);
                writer.WriteNumberValue(Port.Value);
            }
            if (Optional.IsDefined(GatewayType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(GatewayType.Value.ToString());
            }
            if (Optional.IsDefined(InternetGatewayType))
            {
                writer.WritePropertyName("internetGatewayType"u8);
                writer.WriteStringValue(InternetGatewayType.Value.ToString());
            }
            writer.WritePropertyName("networkFabricControllerId"u8);
            writer.WriteStringValue(NetworkFabricControllerId);
            if (options.Format != "W" && Optional.IsDefined(LastOperation))
            {
                writer.WritePropertyName("lastOperation"u8);
                writer.WriteObjectValue(LastOperation, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        InternetGatewayProperties IJsonModel<InternetGatewayProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternetGatewayProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InternetGatewayProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInternetGatewayProperties(document.RootElement, options);
        }

        internal static InternetGatewayProperties DeserializeInternetGatewayProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string annotation = default;
            ResourceIdentifier internetGatewayRuleId = default;
            string ipv4Address = default;
            int? port = default;
            InternetGatewayType? type = default;
            InternetGatewayType? internetGatewayType = default;
            ResourceIdentifier networkFabricControllerId = default;
            LastOperationProperties lastOperation = default;
            NetworkFabricProvisioningState? provisioningState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("annotation"u8))
                {
                    annotation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internetGatewayRuleId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    internetGatewayRuleId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipv4Address"u8))
                {
                    ipv4Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("port"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    port = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new InternetGatewayType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("internetGatewayType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    internetGatewayType = new InternetGatewayType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkFabricControllerId"u8))
                {
                    networkFabricControllerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastOperation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastOperation = LastOperationProperties.DeserializeLastOperationProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new NetworkFabricProvisioningState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InternetGatewayProperties(
                annotation,
                internetGatewayRuleId,
                ipv4Address,
                port,
                type,
                internetGatewayType,
                networkFabricControllerId,
                lastOperation,
                provisioningState,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InternetGatewayProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternetGatewayProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InternetGatewayProperties)} does not support writing '{options.Format}' format.");
            }
        }

        InternetGatewayProperties IPersistableModel<InternetGatewayProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InternetGatewayProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeInternetGatewayProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InternetGatewayProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InternetGatewayProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
