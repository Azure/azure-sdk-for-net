// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Device Role. </summary>
    public readonly partial struct DeviceRole : IEquatable<DeviceRole>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeviceRole"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeviceRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CEValue = "CE";
        private const string ToRValue = "ToR";
        private const string NpbValue = "NPB";
        private const string ManagementSwitchValue = "ManagementSwitch";

        /// <summary> DeviceRole - Customer Edge (CE). </summary>
        public static DeviceRole CE { get; } = new DeviceRole(CEValue);
        /// <summary> DeviceRole - Top of Rack (ToR). </summary>
        public static DeviceRole ToR { get; } = new DeviceRole(ToRValue);
        /// <summary> DeviceRole - Network Packet Broker (NPB). </summary>
        public static DeviceRole Npb { get; } = new DeviceRole(NpbValue);
        /// <summary> Device Role Management Switch. </summary>
        public static DeviceRole ManagementSwitch { get; } = new DeviceRole(ManagementSwitchValue);
        /// <summary> Determines if two <see cref="DeviceRole"/> values are the same. </summary>
        public static bool operator ==(DeviceRole left, DeviceRole right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeviceRole"/> values are not the same. </summary>
        public static bool operator !=(DeviceRole left, DeviceRole right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DeviceRole"/>. </summary>
        public static implicit operator DeviceRole(string value) => new DeviceRole(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeviceRole other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeviceRole other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
