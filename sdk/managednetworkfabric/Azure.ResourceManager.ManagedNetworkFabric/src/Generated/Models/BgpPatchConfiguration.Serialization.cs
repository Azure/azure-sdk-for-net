// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class BgpPatchConfiguration : IUtf8JsonSerializable, IJsonModel<BgpPatchConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BgpPatchConfiguration>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BgpPatchConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BgpPatchConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BgpPatchConfiguration)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            if (Optional.IsDefined(BfdConfiguration))
            {
                writer.WritePropertyName("bfdConfiguration"u8);
                writer.WriteObjectValue(BfdConfiguration, options);
            }
            if (Optional.IsDefined(DefaultRouteOriginate))
            {
                writer.WritePropertyName("defaultRouteOriginate"u8);
                writer.WriteStringValue(DefaultRouteOriginate.Value.ToString());
            }
            if (Optional.IsDefined(AllowAS))
            {
                writer.WritePropertyName("allowAS"u8);
                writer.WriteNumberValue(AllowAS.Value);
            }
            if (Optional.IsDefined(AllowASOverride))
            {
                writer.WritePropertyName("allowASOverride"u8);
                writer.WriteStringValue(AllowASOverride.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(FabricAsn))
            {
                writer.WritePropertyName("fabricASN"u8);
                writer.WriteNumberValue(FabricAsn.Value);
            }
            if (Optional.IsDefined(PeerAsn))
            {
                writer.WritePropertyName("peerASN"u8);
                writer.WriteNumberValue(PeerAsn.Value);
            }
            if (Optional.IsCollectionDefined(IPv4ListenRangePrefixes))
            {
                writer.WritePropertyName("ipv4ListenRangePrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in IPv4ListenRangePrefixes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IPv6ListenRangePrefixes))
            {
                writer.WritePropertyName("ipv6ListenRangePrefixes"u8);
                writer.WriteStartArray();
                foreach (var item in IPv6ListenRangePrefixes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IPv4NeighborAddress))
            {
                writer.WritePropertyName("ipv4NeighborAddress"u8);
                writer.WriteStartArray();
                foreach (var item in IPv4NeighborAddress)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(IPv6NeighborAddress))
            {
                writer.WritePropertyName("ipv6NeighborAddress"u8);
                writer.WriteStartArray();
                foreach (var item in IPv6NeighborAddress)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BmpConfiguration))
            {
                writer.WritePropertyName("bmpConfiguration"u8);
                writer.WriteObjectValue(BmpConfiguration, options);
            }
            if (Optional.IsDefined(V4OverV6BgpSession))
            {
                writer.WritePropertyName("v4OverV6BgpSession"u8);
                writer.WriteStringValue(V4OverV6BgpSession.Value.ToString());
            }
            if (Optional.IsDefined(V6OverV4BgpSession))
            {
                writer.WritePropertyName("v6OverV4BgpSession"u8);
                writer.WriteStringValue(V6OverV4BgpSession.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        BgpPatchConfiguration IJsonModel<BgpPatchConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BgpPatchConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BgpPatchConfiguration)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBgpPatchConfiguration(document.RootElement, options);
        }

        internal static BgpPatchConfiguration DeserializeBgpPatchConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string annotation = default;
            BfdPatchConfiguration bfdConfiguration = default;
            NetworkFabricBooleanValue? defaultRouteOriginate = default;
            int? allowAS = default;
            AllowASOverride? allowASOverride = default;
            long? fabricAsn = default;
            long? peerAsn = default;
            IList<string> ipv4ListenRangePrefixes = default;
            IList<string> ipv6ListenRangePrefixes = default;
            IList<NeighborAddressPatch> ipv4NeighborAddress = default;
            IList<NeighborAddressPatch> ipv6NeighborAddress = default;
            InternalNetworkBmpPatchProperties bmpConfiguration = default;
            V4OverV6BgpSessionState? v4OverV6BgpSession = default;
            V6OverV4BgpSessionState? v6OverV4BgpSession = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("annotation"u8))
                {
                    annotation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bfdConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bfdConfiguration = BfdPatchConfiguration.DeserializeBfdPatchConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("defaultRouteOriginate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultRouteOriginate = new NetworkFabricBooleanValue(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allowAS"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowAS = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allowASOverride"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowASOverride = new AllowASOverride(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fabricASN"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fabricAsn = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("peerASN"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    peerAsn = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("ipv4ListenRangePrefixes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipv4ListenRangePrefixes = array;
                    continue;
                }
                if (property.NameEquals("ipv6ListenRangePrefixes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipv6ListenRangePrefixes = array;
                    continue;
                }
                if (property.NameEquals("ipv4NeighborAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NeighborAddressPatch> array = new List<NeighborAddressPatch>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NeighborAddressPatch.DeserializeNeighborAddressPatch(item, options));
                    }
                    ipv4NeighborAddress = array;
                    continue;
                }
                if (property.NameEquals("ipv6NeighborAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NeighborAddressPatch> array = new List<NeighborAddressPatch>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(NeighborAddressPatch.DeserializeNeighborAddressPatch(item, options));
                    }
                    ipv6NeighborAddress = array;
                    continue;
                }
                if (property.NameEquals("bmpConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bmpConfiguration = InternalNetworkBmpPatchProperties.DeserializeInternalNetworkBmpPatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("v4OverV6BgpSession"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    v4OverV6BgpSession = new V4OverV6BgpSessionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("v6OverV4BgpSession"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    v6OverV4BgpSession = new V6OverV4BgpSessionState(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BgpPatchConfiguration(
                annotation,
                bfdConfiguration,
                defaultRouteOriginate,
                allowAS,
                allowASOverride,
                fabricAsn,
                peerAsn,
                ipv4ListenRangePrefixes ?? new ChangeTrackingList<string>(),
                ipv6ListenRangePrefixes ?? new ChangeTrackingList<string>(),
                ipv4NeighborAddress ?? new ChangeTrackingList<NeighborAddressPatch>(),
                ipv6NeighborAddress ?? new ChangeTrackingList<NeighborAddressPatch>(),
                bmpConfiguration,
                v4OverV6BgpSession,
                v6OverV4BgpSession,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BgpPatchConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BgpPatchConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerManagedNetworkFabricContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BgpPatchConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        BgpPatchConfiguration IPersistableModel<BgpPatchConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BgpPatchConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeBgpPatchConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BgpPatchConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BgpPatchConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
