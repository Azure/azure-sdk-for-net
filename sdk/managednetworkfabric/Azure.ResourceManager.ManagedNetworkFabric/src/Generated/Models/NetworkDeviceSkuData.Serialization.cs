// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ManagedNetworkFabric
{
    public partial class NetworkDeviceSkuData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WritePropertyName("model"u8);
            writer.WriteStringValue(Model);
            if (Optional.IsDefined(Manufacturer))
            {
                writer.WritePropertyName("manufacturer"u8);
                writer.WriteStringValue(Manufacturer);
            }
            if (Optional.IsCollectionDefined(SupportedVersions))
            {
                writer.WritePropertyName("supportedVersions"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedVersions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Limits))
            {
                writer.WritePropertyName("limits"u8);
                writer.WriteObjectValue(Limits);
            }
            if (Optional.IsCollectionDefined(SupportedRoleTypes))
            {
                writer.WritePropertyName("supportedRoleTypes"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedRoleTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Interfaces))
            {
                writer.WritePropertyName("interfaces"u8);
                writer.WriteStartArray();
                foreach (var item in Interfaces)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static NetworkDeviceSkuData DeserializeNetworkDeviceSkuData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            string model = default;
            Optional<string> manufacturer = default;
            Optional<IList<NetworkDeviceSkuPropertiesSupportedVersionsItem>> supportedVersions = default;
            Optional<NetworkDeviceSkuPropertiesLimits> limits = default;
            Optional<IList<NetworkDeviceRoleName>> supportedRoleTypes = default;
            Optional<IList<NetworkDeviceSkuPropertiesInterfacesItem>> interfaces = default;
            Optional<ProvisioningState> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("model"u8))
                        {
                            model = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("manufacturer"u8))
                        {
                            manufacturer = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("supportedVersions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NetworkDeviceSkuPropertiesSupportedVersionsItem> array = new List<NetworkDeviceSkuPropertiesSupportedVersionsItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NetworkDeviceSkuPropertiesSupportedVersionsItem.DeserializeNetworkDeviceSkuPropertiesSupportedVersionsItem(item));
                            }
                            supportedVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("limits"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            limits = NetworkDeviceSkuPropertiesLimits.DeserializeNetworkDeviceSkuPropertiesLimits(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("supportedRoleTypes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NetworkDeviceRoleName> array = new List<NetworkDeviceRoleName>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new NetworkDeviceRoleName(item.GetString()));
                            }
                            supportedRoleTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("interfaces"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NetworkDeviceSkuPropertiesInterfacesItem> array = new List<NetworkDeviceSkuPropertiesInterfacesItem>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NetworkDeviceSkuPropertiesInterfacesItem.DeserializeNetworkDeviceSkuPropertiesInterfacesItem(item));
                            }
                            interfaces = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new ProvisioningState(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new NetworkDeviceSkuData(id, name, type, systemData.Value, model, manufacturer.Value, Optional.ToList(supportedVersions), limits.Value, Optional.ToList(supportedRoleTypes), Optional.ToList(interfaces), Optional.ToNullable(provisioningState));
        }
    }
}
