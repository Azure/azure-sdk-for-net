// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Common properties for Layer3Configuration. </summary>
    public partial class OptionBLayer3ConfigurationPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="OptionBLayer3ConfigurationPatchProperties"/>. </summary>
        public OptionBLayer3ConfigurationPatchProperties()
        {
            PeLoopbackIPAddress = new ChangeTrackingList<string>();
            PrefixLimits = new ChangeTrackingList<OptionBLayer3PrefixLimitPatchProperties>();
        }

        /// <summary> Initializes a new instance of <see cref="OptionBLayer3ConfigurationPatchProperties"/>. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="peerAsn"> ASN of PE devices for CE/PE connectivity.Example : 28. </param>
        /// <param name="vlanId"> VLAN for CE/PE Layer 3 connectivity.Example : 501. </param>
        /// <param name="fabricAsn"> ASN of CE devices for CE/PE connectivity. </param>
        /// <param name="peLoopbackIPAddress"> Provider Edge (PE) Loopback IP Address. </param>
        /// <param name="bmpConfiguration"> BGP Monitoring Protocol (BMP) Configuration. </param>
        /// <param name="prefixLimits"> OptionB Layer3 prefix limit configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OptionBLayer3ConfigurationPatchProperties(string primaryIPv4Prefix, string primaryIPv6Prefix, string secondaryIPv4Prefix, string secondaryIPv6Prefix, long? peerAsn, int? vlanId, long? fabricAsn, IList<string> peLoopbackIPAddress, NniBmpPatchProperties bmpConfiguration, IList<OptionBLayer3PrefixLimitPatchProperties> prefixLimits, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PrimaryIPv4Prefix = primaryIPv4Prefix;
            PrimaryIPv6Prefix = primaryIPv6Prefix;
            SecondaryIPv4Prefix = secondaryIPv4Prefix;
            SecondaryIPv6Prefix = secondaryIPv6Prefix;
            PeerAsn = peerAsn;
            VlanId = vlanId;
            FabricAsn = fabricAsn;
            PeLoopbackIPAddress = peLoopbackIPAddress;
            BmpConfiguration = bmpConfiguration;
            PrefixLimits = prefixLimits;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> IPv4 Address Prefix. </summary>
        public string PrimaryIPv4Prefix { get; set; }
        /// <summary> IPv6 Address Prefix. </summary>
        public string PrimaryIPv6Prefix { get; set; }
        /// <summary> Secondary IPv4 Address Prefix. </summary>
        public string SecondaryIPv4Prefix { get; set; }
        /// <summary> Secondary IPv6 Address Prefix. </summary>
        public string SecondaryIPv6Prefix { get; set; }
        /// <summary> ASN of PE devices for CE/PE connectivity.Example : 28. </summary>
        public long? PeerAsn { get; set; }
        /// <summary> VLAN for CE/PE Layer 3 connectivity.Example : 501. </summary>
        public int? VlanId { get; set; }
        /// <summary> ASN of CE devices for CE/PE connectivity. </summary>
        public long? FabricAsn { get; }
        /// <summary> Provider Edge (PE) Loopback IP Address. </summary>
        public IList<string> PeLoopbackIPAddress { get; }
        /// <summary> BGP Monitoring Protocol (BMP) Configuration. </summary>
        internal NniBmpPatchProperties BmpConfiguration { get; set; }
        /// <summary> (BGP Monitoring Protocol (BMP) configuration state. </summary>
        public BmpConfigurationState? BmpConfigurationState
        {
            get => BmpConfiguration is null ? default : BmpConfiguration.ConfigurationState;
            set
            {
                if (BmpConfiguration is null)
                    BmpConfiguration = new NniBmpPatchProperties();
                BmpConfiguration.ConfigurationState = value;
            }
        }

        /// <summary> OptionB Layer3 prefix limit configuration. </summary>
        public IList<OptionBLayer3PrefixLimitPatchProperties> PrefixLimits { get; }
    }
}
