// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> L3 Isolation Domain Properties defines the properties of the resource. </summary>
    public partial class L3IsolationDomainProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="L3IsolationDomainProperties"/>. </summary>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkFabricId"/> is null. </exception>
        public L3IsolationDomainProperties(ResourceIdentifier networkFabricId)
        {
            Argument.AssertNotNull(networkFabricId, nameof(networkFabricId));

            NetworkFabricId = networkFabricId;
        }

        /// <summary> Initializes a new instance of <see cref="L3IsolationDomainProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="redistributeConnectedSubnets"> Advertise Connected Subnets. Ex: "True" | "False". </param>
        /// <param name="redistributeStaticRoutes"> Advertise Static Routes. Ex: "True" | "False". </param>
        /// <param name="aggregateRouteConfiguration"> Aggregate route configurations. </param>
        /// <param name="connectedSubnetRoutePolicy"> Connected Subnet RoutePolicy. </param>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <param name="staticRoutePolicy"> Static Route - route policy. </param>
        /// <param name="uniqueRdConfiguration"> Unique Route Distinguisher configuration. </param>
        /// <param name="routePrefixLimit"> VRF Limit configuration. </param>
        /// <param name="lastOperation"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal L3IsolationDomainProperties(string annotation, RedistributeConnectedSubnet? redistributeConnectedSubnets, RedistributeStaticRoute? redistributeStaticRoutes, AggregateRouteConfiguration aggregateRouteConfiguration, ConnectedSubnetRoutePolicy connectedSubnetRoutePolicy, ResourceIdentifier networkFabricId, StaticRoutePolicy staticRoutePolicy, L3UniqueRouteDistinguisherProperties uniqueRdConfiguration, RoutePrefixLimitProperties routePrefixLimit, LastOperationProperties lastOperation, NetworkFabricConfigurationState? configurationState, NetworkFabricProvisioningState? provisioningState, NetworkFabricAdministrativeState? administrativeState, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            RedistributeConnectedSubnets = redistributeConnectedSubnets;
            RedistributeStaticRoutes = redistributeStaticRoutes;
            AggregateRouteConfiguration = aggregateRouteConfiguration;
            ConnectedSubnetRoutePolicy = connectedSubnetRoutePolicy;
            NetworkFabricId = networkFabricId;
            StaticRoutePolicy = staticRoutePolicy;
            UniqueRdConfiguration = uniqueRdConfiguration;
            RoutePrefixLimit = routePrefixLimit;
            LastOperation = lastOperation;
            ConfigurationState = configurationState;
            ProvisioningState = provisioningState;
            AdministrativeState = administrativeState;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="L3IsolationDomainProperties"/> for deserialization. </summary>
        internal L3IsolationDomainProperties()
        {
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> Advertise Connected Subnets. Ex: "True" | "False". </summary>
        public RedistributeConnectedSubnet? RedistributeConnectedSubnets { get; set; }
        /// <summary> Advertise Static Routes. Ex: "True" | "False". </summary>
        public RedistributeStaticRoute? RedistributeStaticRoutes { get; set; }
        /// <summary> Aggregate route configurations. </summary>
        public AggregateRouteConfiguration AggregateRouteConfiguration { get; set; }
        /// <summary> Connected Subnet RoutePolicy. </summary>
        internal ConnectedSubnetRoutePolicy ConnectedSubnetRoutePolicy { get; set; }
        /// <summary> Array of ARM Resource ID of the RoutePolicies. </summary>
        public L3ExportRoutePolicy ConnectedExportRoutePolicy
        {
            get => ConnectedSubnetRoutePolicy is null ? default : ConnectedSubnetRoutePolicy.ConnectedExportRoutePolicy;
            set
            {
                if (ConnectedSubnetRoutePolicy is null)
                    ConnectedSubnetRoutePolicy = new ConnectedSubnetRoutePolicy();
                ConnectedSubnetRoutePolicy.ConnectedExportRoutePolicy = value;
            }
        }

        /// <summary> ARM Resource ID of the Network Fabric. </summary>
        public ResourceIdentifier NetworkFabricId { get; set; }
        /// <summary> Static Route - route policy. </summary>
        internal StaticRoutePolicy StaticRoutePolicy { get; set; }
        /// <summary> Array of ARM Resource ID of the RoutePolicies. </summary>
        public L3ExportRoutePolicy ExportRoutePolicy
        {
            get => StaticRoutePolicy is null ? default : StaticRoutePolicy.ExportRoutePolicy;
            set
            {
                if (StaticRoutePolicy is null)
                    StaticRoutePolicy = new StaticRoutePolicy();
                StaticRoutePolicy.ExportRoutePolicy = value;
            }
        }

        /// <summary> Unique Route Distinguisher configuration. </summary>
        internal L3UniqueRouteDistinguisherProperties UniqueRdConfiguration { get; set; }
        /// <summary> List of Unique Route Distinguisher addresses. </summary>
        public IReadOnlyList<string> UniqueRds
        {
            get
            {
                if (UniqueRdConfiguration is null)
                    UniqueRdConfiguration = new L3UniqueRouteDistinguisherProperties();
                return UniqueRdConfiguration.UniqueRds;
            }
        }

        /// <summary> VRF Limit configuration. </summary>
        public RoutePrefixLimitProperties RoutePrefixLimit { get; set; }
        /// <summary> Details of the last operation performed on the resource. </summary>
        internal LastOperationProperties LastOperation { get; }
        /// <summary> Details status of the last operation performed on the resource. </summary>
        public string LastOperationDetails
        {
            get => LastOperation?.Details;
        }

        /// <summary> Configuration state of the resource. </summary>
        public NetworkFabricConfigurationState? ConfigurationState { get; }
        /// <summary> Provisioning state of the resource. </summary>
        public NetworkFabricProvisioningState? ProvisioningState { get; }
        /// <summary> Administrative state of the resource. </summary>
        public NetworkFabricAdministrativeState? AdministrativeState { get; }
    }
}
