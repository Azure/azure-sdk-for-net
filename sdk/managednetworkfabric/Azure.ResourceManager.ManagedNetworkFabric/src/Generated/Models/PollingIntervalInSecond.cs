// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Polling interval in seconds. </summary>
    public readonly partial struct PollingIntervalInSecond : IEquatable<PollingIntervalInSecond>
    {
        private readonly float _value;

        /// <summary> Initializes a new instance of <see cref="PollingIntervalInSecond"/>. </summary>
        public PollingIntervalInSecond(float value)
        {
            _value = value;
        }

        private const float ThirtyValue = 30F;
        private const float SixtyValue = 60F;
        private const float NinetyValue = 90F;
        private const float OneTwentyValue = 120F;

        /// <summary> 30 PollingIntervalInSeconds. </summary>
        public static PollingIntervalInSecond Thirty { get; } = new PollingIntervalInSecond(ThirtyValue);
        /// <summary> 60 PollingIntervalInSeconds. </summary>
        public static PollingIntervalInSecond Sixty { get; } = new PollingIntervalInSecond(SixtyValue);
        /// <summary> 90 PollingIntervalInSeconds. </summary>
        public static PollingIntervalInSecond Ninety { get; } = new PollingIntervalInSecond(NinetyValue);
        /// <summary> 120 PollingIntervalInSeconds. </summary>
        public static PollingIntervalInSecond OneTwenty { get; } = new PollingIntervalInSecond(OneTwentyValue);

        internal float ToSerialSingle() => _value;

        /// <summary> Determines if two <see cref="PollingIntervalInSecond"/> values are the same. </summary>
        public static bool operator ==(PollingIntervalInSecond left, PollingIntervalInSecond right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PollingIntervalInSecond"/> values are not the same. </summary>
        public static bool operator !=(PollingIntervalInSecond left, PollingIntervalInSecond right) => !left.Equals(right);
        /// <summary> Converts a <see cref="float"/> to a <see cref="PollingIntervalInSecond"/>. </summary>
        public static implicit operator PollingIntervalInSecond(float value) => new PollingIntervalInSecond(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PollingIntervalInSecond other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PollingIntervalInSecond other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
