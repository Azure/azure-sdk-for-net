// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> InternalNetwork Patch properties. </summary>
    public partial class InternalNetworkPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InternalNetworkPatchProperties"/>. </summary>
        public InternalNetworkPatchProperties()
        {
            ConnectedIPv4Subnets = new ChangeTrackingList<ConnectedSubnetPatch>();
            ConnectedIPv6Subnets = new ChangeTrackingList<ConnectedSubnetPatch>();
        }

        /// <summary> Initializes a new instance of <see cref="InternalNetworkPatchProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="mtu"> Maximum transmission unit. Default value is 1500. </param>
        /// <param name="connectedIPv4Subnets"> List of Connected IPv4 Subnets. </param>
        /// <param name="connectedIPv6Subnets"> List of connected IPv6 Subnets. </param>
        /// <param name="importRoutePolicy"> Import Route Policy either IPv4 or IPv6. </param>
        /// <param name="exportRoutePolicy"> Export Route Policy either IPv4 or IPv6. </param>
        /// <param name="ingressAclId"> Ingress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="egressAclId"> Egress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="isMonitoringEnabled"> To check whether monitoring of internal network is enabled or not. </param>
        /// <param name="bgpConfiguration"> BGP configuration properties. </param>
        /// <param name="staticRouteConfiguration"> Static Route Configuration properties. </param>
        /// <param name="nativeIPv4PrefixLimit"> Native IPv4 Prefix Limit Configuration properties. </param>
        /// <param name="nativeIPv6PrefixLimit"> Native IPv6 Prefix Limit Configuration properties. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InternalNetworkPatchProperties(string annotation, int? mtu, IList<ConnectedSubnetPatch> connectedIPv4Subnets, IList<ConnectedSubnetPatch> connectedIPv6Subnets, ImportRoutePolicy importRoutePolicy, ExportRoutePolicy exportRoutePolicy, ResourceIdentifier ingressAclId, ResourceIdentifier egressAclId, IsMonitoringEnabled? isMonitoringEnabled, BgpPatchConfiguration bgpConfiguration, StaticRoutePatchConfiguration staticRouteConfiguration, NativeIPv4PrefixLimitPatchProperties nativeIPv4PrefixLimit, NativeIPv6PrefixLimitPatchProperties nativeIPv6PrefixLimit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            Mtu = mtu;
            ConnectedIPv4Subnets = connectedIPv4Subnets;
            ConnectedIPv6Subnets = connectedIPv6Subnets;
            ImportRoutePolicy = importRoutePolicy;
            ExportRoutePolicy = exportRoutePolicy;
            IngressAclId = ingressAclId;
            EgressAclId = egressAclId;
            IsMonitoringEnabled = isMonitoringEnabled;
            BgpConfiguration = bgpConfiguration;
            StaticRouteConfiguration = staticRouteConfiguration;
            NativeIPv4PrefixLimit = nativeIPv4PrefixLimit;
            NativeIPv6PrefixLimit = nativeIPv6PrefixLimit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> Maximum transmission unit. Default value is 1500. </summary>
        public int? Mtu { get; set; }
        /// <summary> List of Connected IPv4 Subnets. </summary>
        public IList<ConnectedSubnetPatch> ConnectedIPv4Subnets { get; }
        /// <summary> List of connected IPv6 Subnets. </summary>
        public IList<ConnectedSubnetPatch> ConnectedIPv6Subnets { get; }
        /// <summary> Import Route Policy either IPv4 or IPv6. </summary>
        public ImportRoutePolicy ImportRoutePolicy { get; set; }
        /// <summary> Export Route Policy either IPv4 or IPv6. </summary>
        public ExportRoutePolicy ExportRoutePolicy { get; set; }
        /// <summary> Ingress Acl. ARM resource ID of Access Control Lists. </summary>
        public ResourceIdentifier IngressAclId { get; set; }
        /// <summary> Egress Acl. ARM resource ID of Access Control Lists. </summary>
        public ResourceIdentifier EgressAclId { get; set; }
        /// <summary> To check whether monitoring of internal network is enabled or not. </summary>
        public IsMonitoringEnabled? IsMonitoringEnabled { get; set; }
        /// <summary> BGP configuration properties. </summary>
        public BgpPatchConfiguration BgpConfiguration { get; set; }
        /// <summary> Static Route Configuration properties. </summary>
        public StaticRoutePatchConfiguration StaticRouteConfiguration { get; set; }
        /// <summary> Native IPv4 Prefix Limit Configuration properties. </summary>
        internal NativeIPv4PrefixLimitPatchProperties NativeIPv4PrefixLimit { get; set; }
        /// <summary> Prefix limits. </summary>
        public IList<PrefixLimitPatchProperties> NativeIPv4PrefixLimits
        {
            get
            {
                if (NativeIPv4PrefixLimit is null)
                    NativeIPv4PrefixLimit = new NativeIPv4PrefixLimitPatchProperties();
                return NativeIPv4PrefixLimit.PrefixLimits;
            }
        }

        /// <summary> Native IPv6 Prefix Limit Configuration properties. </summary>
        internal NativeIPv6PrefixLimitPatchProperties NativeIPv6PrefixLimit { get; set; }
        /// <summary> Prefix limits. </summary>
        public IList<PrefixLimitPatchProperties> NativeIPv6PrefixLimits
        {
            get
            {
                if (NativeIPv6PrefixLimit is null)
                    NativeIPv6PrefixLimit = new NativeIPv6PrefixLimitPatchProperties();
                return NativeIPv6PrefixLimit.PrefixLimits;
            }
        }
    }
}
