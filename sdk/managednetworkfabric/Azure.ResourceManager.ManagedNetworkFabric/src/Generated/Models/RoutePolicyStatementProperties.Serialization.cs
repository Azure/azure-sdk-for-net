// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class RoutePolicyStatementProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("sequenceNumber"u8);
            writer.WriteNumberValue(SequenceNumber);
            writer.WritePropertyName("condition"u8);
            writer.WriteObjectValue(Condition);
            writer.WritePropertyName("action"u8);
            writer.WriteObjectValue(Action);
            if (Optional.IsDefined(Annotation))
            {
                writer.WritePropertyName("annotation"u8);
                writer.WriteStringValue(Annotation);
            }
            writer.WriteEndObject();
        }

        internal static RoutePolicyStatementProperties DeserializeRoutePolicyStatementProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long sequenceNumber = default;
            StatementConditionProperties condition = default;
            StatementActionProperties action = default;
            Optional<string> annotation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sequenceNumber"u8))
                {
                    sequenceNumber = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("condition"u8))
                {
                    condition = StatementConditionProperties.DeserializeStatementConditionProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("action"u8))
                {
                    action = StatementActionProperties.DeserializeStatementActionProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("annotation"u8))
                {
                    annotation = property.Value.GetString();
                    continue;
                }
            }
            return new RoutePolicyStatementProperties(annotation.Value, sequenceNumber, condition, action);
        }
    }
}
