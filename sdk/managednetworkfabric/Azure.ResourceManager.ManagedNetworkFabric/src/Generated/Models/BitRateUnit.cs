// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Bit rate unit. </summary>
    public readonly partial struct BitRateUnit : IEquatable<BitRateUnit>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BitRateUnit"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BitRateUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BpsValue = "bps";
        private const string KbpsValue = "Kbps";
        private const string MbpsValue = "Mbps";
        private const string GbpsValue = "Gbps";

        /// <summary> Bit rate unit in bits per second. </summary>
        public static BitRateUnit Bps { get; } = new BitRateUnit(BpsValue);
        /// <summary> Bit rate unit in kilobits per second. </summary>
        public static BitRateUnit Kbps { get; } = new BitRateUnit(KbpsValue);
        /// <summary> Bit rate unit in megabits per second. </summary>
        public static BitRateUnit Mbps { get; } = new BitRateUnit(MbpsValue);
        /// <summary> Bit rate unit in gigabits per second. </summary>
        public static BitRateUnit Gbps { get; } = new BitRateUnit(GbpsValue);
        /// <summary> Determines if two <see cref="BitRateUnit"/> values are the same. </summary>
        public static bool operator ==(BitRateUnit left, BitRateUnit right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BitRateUnit"/> values are not the same. </summary>
        public static bool operator !=(BitRateUnit left, BitRateUnit right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BitRateUnit"/>. </summary>
        public static implicit operator BitRateUnit(string value) => new BitRateUnit(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BitRateUnit other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BitRateUnit other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
