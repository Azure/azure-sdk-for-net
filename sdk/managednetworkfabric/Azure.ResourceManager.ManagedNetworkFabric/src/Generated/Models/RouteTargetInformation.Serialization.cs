// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class RouteTargetInformation : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(ImportIPv4RouteTargets))
            {
                writer.WritePropertyName("importIpv4RouteTargets"u8);
                writer.WriteStartArray();
                foreach (var item in ImportIPv4RouteTargets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ImportIPv6RouteTargets))
            {
                writer.WritePropertyName("importIpv6RouteTargets"u8);
                writer.WriteStartArray();
                foreach (var item in ImportIPv6RouteTargets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ExportIPv4RouteTargets))
            {
                writer.WritePropertyName("exportIpv4RouteTargets"u8);
                writer.WriteStartArray();
                foreach (var item in ExportIPv4RouteTargets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ExportIPv6RouteTargets))
            {
                writer.WritePropertyName("exportIpv6RouteTargets"u8);
                writer.WriteStartArray();
                foreach (var item in ExportIPv6RouteTargets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RouteTargetInformation DeserializeRouteTargetInformation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<IList<string>> importIPv4RouteTargets = default;
            Core.Optional<IList<string>> importIPv6RouteTargets = default;
            Core.Optional<IList<string>> exportIPv4RouteTargets = default;
            Core.Optional<IList<string>> exportIPv6RouteTargets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("importIpv4RouteTargets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    importIPv4RouteTargets = array;
                    continue;
                }
                if (property.NameEquals("importIpv6RouteTargets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    importIPv6RouteTargets = array;
                    continue;
                }
                if (property.NameEquals("exportIpv4RouteTargets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    exportIPv4RouteTargets = array;
                    continue;
                }
                if (property.NameEquals("exportIpv6RouteTargets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    exportIPv6RouteTargets = array;
                    continue;
                }
            }
            return new RouteTargetInformation(Core.Optional.ToList(importIPv4RouteTargets), Core.Optional.ToList(importIPv6RouteTargets), Core.Optional.ToList(exportIPv4RouteTargets), Core.Optional.ToList(exportIPv6RouteTargets));
        }
    }
}
