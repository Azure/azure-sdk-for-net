// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkDeviceInterfaceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Identifier))
            {
                writer.WritePropertyName("identifier"u8);
                writer.WriteStringValue(Identifier);
            }
            if (Optional.IsDefined(InterfaceType))
            {
                writer.WritePropertyName("interfaceType"u8);
                writer.WriteStringValue(InterfaceType);
            }
            if (Optional.IsCollectionDefined(SupportedConnectorTypes))
            {
                writer.WritePropertyName("supportedConnectorTypes"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedConnectorTypes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static NetworkDeviceInterfaceProperties DeserializeNetworkDeviceInterfaceProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> identifier = default;
            Optional<string> interfaceType = default;
            Optional<IList<SupportedConnectorProperties>> supportedConnectorTypes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identifier"u8))
                {
                    identifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interfaceType"u8))
                {
                    interfaceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportedConnectorTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SupportedConnectorProperties> array = new List<SupportedConnectorProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SupportedConnectorProperties.DeserializeSupportedConnectorProperties(item));
                    }
                    supportedConnectorTypes = array;
                    continue;
                }
            }
            return new NetworkDeviceInterfaceProperties(identifier.Value, interfaceType.Value, Optional.ToList(supportedConnectorTypes));
        }
    }
}
