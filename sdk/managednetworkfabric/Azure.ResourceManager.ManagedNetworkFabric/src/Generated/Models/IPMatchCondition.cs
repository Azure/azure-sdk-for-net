// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Defines the condition that can be filtered using the selected IPs. </summary>
    public partial class IPMatchCondition
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="IPMatchCondition"/>. </summary>
        public IPMatchCondition()
        {
            IPPrefixValues = new ChangeTrackingList<string>();
            IPGroupNames = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="IPMatchCondition"/>. </summary>
        /// <param name="sourceDestinationType"> IP Address type. </param>
        /// <param name="prefixType"> IP Prefix Type. </param>
        /// <param name="ipPrefixValues"> The list of IP Prefixes. </param>
        /// <param name="ipGroupNames"> The List of IP Group Names that need to be matched. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal IPMatchCondition(SourceDestinationType? sourceDestinationType, IPMatchConditionPrefixType? prefixType, IList<string> ipPrefixValues, IList<string> ipGroupNames, Dictionary<string, BinaryData> rawData)
        {
            SourceDestinationType = sourceDestinationType;
            PrefixType = prefixType;
            IPPrefixValues = ipPrefixValues;
            IPGroupNames = ipGroupNames;
            _rawData = rawData;
        }

        /// <summary> IP Address type. </summary>
        public SourceDestinationType? SourceDestinationType { get; set; }
        /// <summary> IP Prefix Type. </summary>
        public IPMatchConditionPrefixType? PrefixType { get; set; }
        /// <summary> The list of IP Prefixes. </summary>
        public IList<string> IPPrefixValues { get; }
        /// <summary> The List of IP Group Names that need to be matched. </summary>
        public IList<string> IPGroupNames { get; }
    }
}
