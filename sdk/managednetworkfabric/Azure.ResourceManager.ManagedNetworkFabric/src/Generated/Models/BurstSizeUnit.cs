// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Burst size unit in packets. </summary>
    public readonly partial struct BurstSizeUnit : IEquatable<BurstSizeUnit>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BurstSizeUnit"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BurstSizeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BytesValue = "Bytes";
        private const string KBytesValue = "KBytes";
        private const string MBytesValue = "MBytes";
        private const string GBytesValue = "GBytes";

        /// <summary> Burst size unit in bytes. </summary>
        public static BurstSizeUnit Bytes { get; } = new BurstSizeUnit(BytesValue);
        /// <summary> Burst size unit in kilobytes. </summary>
        public static BurstSizeUnit KBytes { get; } = new BurstSizeUnit(KBytesValue);
        /// <summary> Burst size unit in megabytes. </summary>
        public static BurstSizeUnit MBytes { get; } = new BurstSizeUnit(MBytesValue);
        /// <summary> Burst size unit in gigabytes. </summary>
        public static BurstSizeUnit GBytes { get; } = new BurstSizeUnit(GBytesValue);
        /// <summary> Determines if two <see cref="BurstSizeUnit"/> values are the same. </summary>
        public static bool operator ==(BurstSizeUnit left, BurstSizeUnit right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BurstSizeUnit"/> values are not the same. </summary>
        public static bool operator !=(BurstSizeUnit left, BurstSizeUnit right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BurstSizeUnit"/>. </summary>
        public static implicit operator BurstSizeUnit(string value) => new BurstSizeUnit(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BurstSizeUnit other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BurstSizeUnit other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
