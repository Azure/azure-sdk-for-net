// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class AccessControlListMatchCondition : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(EtherTypes))
            {
                writer.WritePropertyName("etherTypes"u8);
                writer.WriteStartArray();
                foreach (var item in EtherTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(Fragments))
            {
                writer.WritePropertyName("fragments"u8);
                writer.WriteStartArray();
                foreach (var item in Fragments)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(IPLengths))
            {
                writer.WritePropertyName("ipLengths"u8);
                writer.WriteStartArray();
                foreach (var item in IPLengths)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(TtlValues))
            {
                writer.WritePropertyName("ttlValues"u8);
                writer.WriteStartArray();
                foreach (var item in TtlValues)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(DscpMarkings))
            {
                writer.WritePropertyName("dscpMarkings"u8);
                writer.WriteStartArray();
                foreach (var item in DscpMarkings)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(PortCondition))
            {
                writer.WritePropertyName("portCondition"u8);
                writer.WriteObjectValue(PortCondition);
            }
            if (Core.Optional.IsCollectionDefined(ProtocolTypes))
            {
                writer.WritePropertyName("protocolTypes"u8);
                writer.WriteStartArray();
                foreach (var item in ProtocolTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(VlanMatchCondition))
            {
                writer.WritePropertyName("vlanMatchCondition"u8);
                writer.WriteObjectValue(VlanMatchCondition);
            }
            if (Core.Optional.IsDefined(IPCondition))
            {
                writer.WritePropertyName("ipCondition"u8);
                writer.WriteObjectValue(IPCondition);
            }
            writer.WriteEndObject();
        }

        internal static AccessControlListMatchCondition DeserializeAccessControlListMatchCondition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<IList<string>> etherTypes = default;
            Core.Optional<IList<string>> fragments = default;
            Core.Optional<IList<string>> ipLengths = default;
            Core.Optional<IList<string>> ttlValues = default;
            Core.Optional<IList<string>> dscpMarkings = default;
            Core.Optional<AccessControlListPortCondition> portCondition = default;
            Core.Optional<IList<string>> protocolTypes = default;
            Core.Optional<VlanMatchCondition> vlanMatchCondition = default;
            Core.Optional<IPMatchCondition> ipCondition = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etherTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    etherTypes = array;
                    continue;
                }
                if (property.NameEquals("fragments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    fragments = array;
                    continue;
                }
                if (property.NameEquals("ipLengths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ipLengths = array;
                    continue;
                }
                if (property.NameEquals("ttlValues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    ttlValues = array;
                    continue;
                }
                if (property.NameEquals("dscpMarkings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dscpMarkings = array;
                    continue;
                }
                if (property.NameEquals("portCondition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    portCondition = AccessControlListPortCondition.DeserializeAccessControlListPortCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("protocolTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    protocolTypes = array;
                    continue;
                }
                if (property.NameEquals("vlanMatchCondition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vlanMatchCondition = VlanMatchCondition.DeserializeVlanMatchCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("ipCondition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipCondition = IPMatchCondition.DeserializeIPMatchCondition(property.Value);
                    continue;
                }
            }
            return new AccessControlListMatchCondition(Core.Optional.ToList(protocolTypes), vlanMatchCondition.Value, ipCondition.Value, Core.Optional.ToList(etherTypes), Core.Optional.ToList(fragments), Core.Optional.ToList(ipLengths), Core.Optional.ToList(ttlValues), Core.Optional.ToList(dscpMarkings), portCondition.Value);
        }
    }
}
