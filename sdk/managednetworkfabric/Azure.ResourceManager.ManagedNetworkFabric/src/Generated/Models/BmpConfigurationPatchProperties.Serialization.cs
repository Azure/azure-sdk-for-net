// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class BmpConfigurationPatchProperties : IUtf8JsonSerializable, IJsonModel<BmpConfigurationPatchProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BmpConfigurationPatchProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BmpConfigurationPatchProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BmpConfigurationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BmpConfigurationPatchProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(StationConfigurationState))
            {
                writer.WritePropertyName("stationConfigurationState"u8);
                writer.WriteStringValue(StationConfigurationState.Value.ToString());
            }
            if (Optional.IsDefined(ScopeResourceId))
            {
                writer.WritePropertyName("scopeResourceId"u8);
                writer.WriteStringValue(ScopeResourceId);
            }
            if (Optional.IsDefined(StationName))
            {
                writer.WritePropertyName("stationName"u8);
                writer.WriteStringValue(StationName);
            }
            if (Optional.IsDefined(StationIP))
            {
                writer.WritePropertyName("stationIp"u8);
                writer.WriteStringValue(StationIP);
            }
            if (Optional.IsDefined(StationPort))
            {
                writer.WritePropertyName("stationPort"u8);
                writer.WriteNumberValue(StationPort.Value);
            }
            if (Optional.IsDefined(StationConnectionMode))
            {
                writer.WritePropertyName("stationConnectionMode"u8);
                writer.WriteStringValue(StationConnectionMode.Value.ToString());
            }
            if (Optional.IsDefined(StationConnectionProperties))
            {
                writer.WritePropertyName("stationConnectionProperties"u8);
                writer.WriteObjectValue(StationConnectionProperties, options);
            }
            if (Optional.IsDefined(StationNetwork))
            {
                writer.WritePropertyName("stationNetwork"u8);
                writer.WriteStringValue(StationNetwork);
            }
            if (Optional.IsCollectionDefined(MonitoredNetworks))
            {
                writer.WritePropertyName("monitoredNetworks"u8);
                writer.WriteStartArray();
                foreach (var item in MonitoredNetworks)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ExportPolicy))
            {
                writer.WritePropertyName("exportPolicy"u8);
                writer.WriteStringValue(ExportPolicy.Value.ToString());
            }
            if (Optional.IsCollectionDefined(MonitoredAddressFamilies))
            {
                writer.WritePropertyName("monitoredAddressFamilies"u8);
                writer.WriteStartArray();
                foreach (var item in MonitoredAddressFamilies)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        BmpConfigurationPatchProperties IJsonModel<BmpConfigurationPatchProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BmpConfigurationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BmpConfigurationPatchProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBmpConfigurationPatchProperties(document.RootElement, options);
        }

        internal static BmpConfigurationPatchProperties DeserializeBmpConfigurationPatchProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            StationConfigurationState? stationConfigurationState = default;
            ResourceIdentifier scopeResourceId = default;
            string stationName = default;
            string stationIP = default;
            int? stationPort = default;
            StationConnectionMode? stationConnectionMode = default;
            StationConnectionPatchProperties stationConnectionProperties = default;
            ResourceIdentifier stationNetwork = default;
            IList<ResourceIdentifier> monitoredNetworks = default;
            BmpExportPolicy? exportPolicy = default;
            IList<BmpMonitoredAddressFamily> monitoredAddressFamilies = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("stationConfigurationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stationConfigurationState = new StationConfigurationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scopeResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scopeResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stationName"u8))
                {
                    stationName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stationIp"u8))
                {
                    stationIP = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stationPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stationPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("stationConnectionMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stationConnectionMode = new StationConnectionMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stationConnectionProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stationConnectionProperties = StationConnectionPatchProperties.DeserializeStationConnectionPatchProperties(property.Value, options);
                    continue;
                }
                if (property.NameEquals("stationNetwork"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stationNetwork = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("monitoredNetworks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new ResourceIdentifier(item.GetString()));
                        }
                    }
                    monitoredNetworks = array;
                    continue;
                }
                if (property.NameEquals("exportPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exportPolicy = new BmpExportPolicy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("monitoredAddressFamilies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BmpMonitoredAddressFamily> array = new List<BmpMonitoredAddressFamily>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new BmpMonitoredAddressFamily(item.GetString()));
                    }
                    monitoredAddressFamilies = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BmpConfigurationPatchProperties(
                stationConfigurationState,
                scopeResourceId,
                stationName,
                stationIP,
                stationPort,
                stationConnectionMode,
                stationConnectionProperties,
                stationNetwork,
                monitoredNetworks ?? new ChangeTrackingList<ResourceIdentifier>(),
                exportPolicy,
                monitoredAddressFamilies ?? new ChangeTrackingList<BmpMonitoredAddressFamily>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BmpConfigurationPatchProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BmpConfigurationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerManagedNetworkFabricContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BmpConfigurationPatchProperties)} does not support writing '{options.Format}' format.");
            }
        }

        BmpConfigurationPatchProperties IPersistableModel<BmpConfigurationPatchProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BmpConfigurationPatchProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeBmpConfigurationPatchProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BmpConfigurationPatchProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BmpConfigurationPatchProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
