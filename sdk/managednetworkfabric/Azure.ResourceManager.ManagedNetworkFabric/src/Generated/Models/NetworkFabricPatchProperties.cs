// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Network Fabric Patch properties. </summary>
    public partial class NetworkFabricPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkFabricPatchProperties"/>. </summary>
        public NetworkFabricPatchProperties()
        {
            ControlPlaneAcls = new ChangeTrackingList<ResourceIdentifier>();
            TrustedIPPrefixes = new ChangeTrackingList<ResourceIdentifier>();
        }

        /// <summary> Initializes a new instance of <see cref="NetworkFabricPatchProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="rackCount"> Number of compute racks associated to Network Fabric. </param>
        /// <param name="serverCountPerRack"> Number of servers.Possible values are from 1-16. </param>
        /// <param name="ipv4Prefix"> IPv4Prefix for Management Network. Example: 10.1.0.0/19. </param>
        /// <param name="ipv6Prefix"> IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. </param>
        /// <param name="fabricAsn"> ASN of CE devices for CE/PE connectivity. </param>
        /// <param name="storageAccountConfiguration"> Bring your own storage account configurations for Network Fabric. </param>
        /// <param name="terminalServerConfiguration"> Network and credentials configuration already applied to terminal server. </param>
        /// <param name="managementNetworkConfiguration"> Configuration to be used to setup the management network. </param>
        /// <param name="hardwareAlertThreshold"> Hardware alert threshold percentage. Possible values are from 20 to 100. </param>
        /// <param name="controlPlaneAcls"> Control Plane Access Control List ARM resource IDs. </param>
        /// <param name="trustedIPPrefixes"> Trusted IP Prefix ARM resource IDs. </param>
        /// <param name="uniqueRdConfiguration"> Unique Route Distinguisher configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkFabricPatchProperties(string annotation, int? rackCount, int? serverCountPerRack, string ipv4Prefix, string ipv6Prefix, long? fabricAsn, StorageAccountPatchConfiguration storageAccountConfiguration, TerminalServerPatchConfiguration terminalServerConfiguration, ManagementNetworkPatchConfiguration managementNetworkConfiguration, int? hardwareAlertThreshold, IList<ResourceIdentifier> controlPlaneAcls, IList<ResourceIdentifier> trustedIPPrefixes, UniqueRouteDistinguisherPatchProperties uniqueRdConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            RackCount = rackCount;
            ServerCountPerRack = serverCountPerRack;
            IPv4Prefix = ipv4Prefix;
            IPv6Prefix = ipv6Prefix;
            FabricAsn = fabricAsn;
            StorageAccountConfiguration = storageAccountConfiguration;
            TerminalServerConfiguration = terminalServerConfiguration;
            ManagementNetworkConfiguration = managementNetworkConfiguration;
            HardwareAlertThreshold = hardwareAlertThreshold;
            ControlPlaneAcls = controlPlaneAcls;
            TrustedIPPrefixes = trustedIPPrefixes;
            UniqueRdConfiguration = uniqueRdConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> Number of compute racks associated to Network Fabric. </summary>
        public int? RackCount { get; set; }
        /// <summary> Number of servers.Possible values are from 1-16. </summary>
        public int? ServerCountPerRack { get; set; }
        /// <summary> IPv4Prefix for Management Network. Example: 10.1.0.0/19. </summary>
        public string IPv4Prefix { get; set; }
        /// <summary> IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. </summary>
        public string IPv6Prefix { get; set; }
        /// <summary> ASN of CE devices for CE/PE connectivity. </summary>
        public long? FabricAsn { get; set; }
        /// <summary> Bring your own storage account configurations for Network Fabric. </summary>
        public StorageAccountPatchConfiguration StorageAccountConfiguration { get; set; }
        /// <summary> Network and credentials configuration already applied to terminal server. </summary>
        public TerminalServerPatchConfiguration TerminalServerConfiguration { get; set; }
        /// <summary> Configuration to be used to setup the management network. </summary>
        public ManagementNetworkPatchConfiguration ManagementNetworkConfiguration { get; set; }
        /// <summary> Hardware alert threshold percentage. Possible values are from 20 to 100. </summary>
        public int? HardwareAlertThreshold { get; set; }
        /// <summary> Control Plane Access Control List ARM resource IDs. </summary>
        public IList<ResourceIdentifier> ControlPlaneAcls { get; }
        /// <summary> Trusted IP Prefix ARM resource IDs. </summary>
        public IList<ResourceIdentifier> TrustedIPPrefixes { get; }
        /// <summary> Unique Route Distinguisher configuration. </summary>
        public UniqueRouteDistinguisherPatchProperties UniqueRdConfiguration { get; set; }
    }
}
