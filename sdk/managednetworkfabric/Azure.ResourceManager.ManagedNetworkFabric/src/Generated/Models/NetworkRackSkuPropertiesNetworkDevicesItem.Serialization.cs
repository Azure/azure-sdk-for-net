// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    public partial class NetworkRackSkuPropertiesNetworkDevicesItem : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NetworkDeviceSkuName))
            {
                writer.WritePropertyName("networkDeviceSkuName"u8);
                writer.WriteStringValue(NetworkDeviceSkuName);
            }
            if (Optional.IsDefined(RoleType))
            {
                writer.WritePropertyName("roleType"u8);
                writer.WriteStringValue(RoleType.Value.ToString());
            }
            if (Optional.IsDefined(RackSlot))
            {
                writer.WritePropertyName("rackSlot"u8);
                writer.WriteNumberValue(RackSlot.Value);
            }
            writer.WriteEndObject();
        }

        internal static NetworkRackSkuPropertiesNetworkDevicesItem DeserializeNetworkRackSkuPropertiesNetworkDevicesItem(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> networkDeviceSkuName = default;
            Optional<NetworkDeviceRackRoleType> roleType = default;
            Optional<int> rackSlot = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("networkDeviceSkuName"u8))
                {
                    networkDeviceSkuName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    roleType = new NetworkDeviceRackRoleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("rackSlot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rackSlot = property.Value.GetInt32();
                    continue;
                }
            }
            return new NetworkRackSkuPropertiesNetworkDevicesItem(networkDeviceSkuName.Value, Optional.ToNullable(roleType), Optional.ToNullable(rackSlot));
        }
    }
}
