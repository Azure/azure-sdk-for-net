// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Resource properties. </summary>
    public partial class L3IsolationDomainPatchProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="L3IsolationDomainPatchProperties"/>. </summary>
        public L3IsolationDomainPatchProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="L3IsolationDomainPatchProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="redistributeConnectedSubnets"> Advertise Connected Subnets. Ex: "True" | "False". </param>
        /// <param name="redistributeStaticRoutes"> Advertise Static Routes. Ex: "True" | "False". </param>
        /// <param name="aggregateRouteConfiguration"> Aggregate route configurations. </param>
        /// <param name="connectedSubnetRoutePolicy"> Connected Subnet RoutePolicy. </param>
        /// <param name="staticRoutePolicy"> Static Route - route policy. </param>
        /// <param name="routePrefixLimit"> Virtual Routing and Forwarding (VRF) Limit configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal L3IsolationDomainPatchProperties(string annotation, RedistributeConnectedSubnet? redistributeConnectedSubnets, RedistributeStaticRoute? redistributeStaticRoutes, AggregateRoutePatchConfiguration aggregateRouteConfiguration, ConnectedSubnetRoutePolicyPatch connectedSubnetRoutePolicy, StaticRoutePolicyPatch staticRoutePolicy, RoutePrefixLimitPatchProperties routePrefixLimit, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Annotation = annotation;
            RedistributeConnectedSubnets = redistributeConnectedSubnets;
            RedistributeStaticRoutes = redistributeStaticRoutes;
            AggregateRouteConfiguration = aggregateRouteConfiguration;
            ConnectedSubnetRoutePolicy = connectedSubnetRoutePolicy;
            StaticRoutePolicy = staticRoutePolicy;
            RoutePrefixLimit = routePrefixLimit;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Switch configuration description. </summary>
        public string Annotation { get; set; }
        /// <summary> Advertise Connected Subnets. Ex: "True" | "False". </summary>
        public RedistributeConnectedSubnet? RedistributeConnectedSubnets { get; set; }
        /// <summary> Advertise Static Routes. Ex: "True" | "False". </summary>
        public RedistributeStaticRoute? RedistributeStaticRoutes { get; set; }
        /// <summary> Aggregate route configurations. </summary>
        public AggregateRoutePatchConfiguration AggregateRouteConfiguration { get; set; }
        /// <summary> Connected Subnet RoutePolicy. </summary>
        internal ConnectedSubnetRoutePolicyPatch ConnectedSubnetRoutePolicy { get; set; }
        /// <summary> Array of ARM Resource ID of the RoutePolicies. </summary>
        public L3ExportRoutePolicyPatch ConnectedExportRoutePolicy
        {
            get => ConnectedSubnetRoutePolicy is null ? default : ConnectedSubnetRoutePolicy.ConnectedExportRoutePolicy;
            set
            {
                if (ConnectedSubnetRoutePolicy is null)
                    ConnectedSubnetRoutePolicy = new ConnectedSubnetRoutePolicyPatch();
                ConnectedSubnetRoutePolicy.ConnectedExportRoutePolicy = value;
            }
        }

        /// <summary> Static Route - route policy. </summary>
        internal StaticRoutePolicyPatch StaticRoutePolicy { get; set; }
        /// <summary> Array of ARM Resource ID of the RoutePolicies. </summary>
        public L3ExportRoutePolicyPatch ExportRoutePolicy
        {
            get => StaticRoutePolicy is null ? default : StaticRoutePolicy.ExportRoutePolicy;
            set
            {
                if (StaticRoutePolicy is null)
                    StaticRoutePolicy = new StaticRoutePolicyPatch();
                StaticRoutePolicy.ExportRoutePolicy = value;
            }
        }

        /// <summary> Virtual Routing and Forwarding (VRF) Limit configuration. </summary>
        public RoutePrefixLimitPatchProperties RoutePrefixLimit { get; set; }
    }
}
