// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmManagedNetworkFabricModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricAccessControlListData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The Access ControlList properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricAccessControlListData"/> instance for mocking. </returns>
        public static NetworkFabricAccessControlListData NetworkFabricAccessControlListData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AccessControlListProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricAccessControlListData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AccessControlListProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="configurationType"> Input method to configure Access Control List. </param>
        /// <param name="aclsUri"> Access Control List file URL. </param>
        /// <param name="defaultAction"> Default action that needs to be applied when no condition is matched. Example: Permit | Deny. </param>
        /// <param name="matchConfigurations"> List of match configurations. </param>
        /// <param name="dynamicMatchConfigurations"> List of dynamic match configurations. </param>
        /// <param name="lastSyncedOn"> The last synced timestamp. </param>
        /// <param name="aclType"> Access Control List (ACL) Type. </param>
        /// <param name="deviceRole"> Device Role. </param>
        /// <param name="globalAccessControlListActionsEnableCount"> Global Access Control List (ACL) actions. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.AccessControlListProperties"/> instance for mocking. </returns>
        public static AccessControlListProperties AccessControlListProperties(string annotation = null, NetworkFabricConfigurationType configurationType = default, Uri aclsUri = null, CommunityActionType? defaultAction = null, IEnumerable<AccessControlListMatchConfiguration> matchConfigurations = null, IEnumerable<CommonDynamicMatchConfiguration> dynamicMatchConfigurations = null, DateTimeOffset? lastSyncedOn = null, AclType? aclType = null, DeviceRole? deviceRole = null, NetworkFabricBooleanValue? globalAccessControlListActionsEnableCount = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            matchConfigurations ??= new List<AccessControlListMatchConfiguration>();
            dynamicMatchConfigurations ??= new List<CommonDynamicMatchConfiguration>();

            return new AccessControlListProperties(
                annotation,
                configurationType,
                aclsUri,
                defaultAction,
                matchConfigurations?.ToList(),
                dynamicMatchConfigurations?.ToList(),
                lastSyncedOn,
                aclType,
                deviceRole,
                globalAccessControlListActionsEnableCount != null ? new GlobalAccessControlListActionProperties(globalAccessControlListActionsEnableCount, serializedAdditionalRawData: null) : null,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricInternetGatewayRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The Internet Gateway Rule properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricInternetGatewayRuleData"/> instance for mocking. </returns>
        public static NetworkFabricInternetGatewayRuleData NetworkFabricInternetGatewayRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, InternetGatewayRuleProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricInternetGatewayRuleData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InternetGatewayRuleProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="ruleProperties"> Rules for the InternetGateways. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="internetGatewayIds"> List of Internet Gateway resource Id. </param>
        /// <returns> A new <see cref="Models.InternetGatewayRuleProperties"/> instance for mocking. </returns>
        public static InternetGatewayRuleProperties InternetGatewayRuleProperties(string annotation = null, InternetGatewayRules ruleProperties = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null, IEnumerable<string> internetGatewayIds = null)
        {
            internetGatewayIds ??= new List<string>();

            return new InternetGatewayRuleProperties(
                annotation,
                ruleProperties,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                internetGatewayIds?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricInternetGatewayData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The Internet Gateway Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricInternetGatewayData"/> instance for mocking. </returns>
        public static NetworkFabricInternetGatewayData NetworkFabricInternetGatewayData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, InternetGatewayProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricInternetGatewayData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InternetGatewayProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="internetGatewayRuleId"> ARM Resource ID of the Internet Gateway Rule. </param>
        /// <param name="ipv4Address"> IPv4 Address of Internet Gateway. </param>
        /// <param name="port"> Port number of Internet Gateway. </param>
        /// <param name="gatewayType"> Gateway Type of the resource. </param>
        /// <param name="internetGatewayType"> Gateway Type of the resource. </param>
        /// <param name="networkFabricControllerId"> ARM Resource ID of the Network Fabric Controller. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provisioning state of resource. </param>
        /// <returns> A new <see cref="Models.InternetGatewayProperties"/> instance for mocking. </returns>
        public static InternetGatewayProperties InternetGatewayProperties(string annotation = null, ResourceIdentifier internetGatewayRuleId = null, string ipv4Address = null, int? port = null, InternetGatewayType? gatewayType = null, InternetGatewayType? internetGatewayType = null, ResourceIdentifier networkFabricControllerId = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            return new InternetGatewayProperties(
                annotation,
                internetGatewayRuleId,
                ipv4Address,
                port,
                gatewayType,
                internetGatewayType,
                networkFabricControllerId,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricIPCommunityData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The IP Community Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricIPCommunityData"/> instance for mocking. </returns>
        public static NetworkFabricIPCommunityData NetworkFabricIPCommunityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IPCommunityProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricIPCommunityData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPCommunityProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <param name="ipCommunityRules"> List of IP Community Rules. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.IPCommunityProperties"/> instance for mocking. </returns>
        public static IPCommunityProperties IPCommunityProperties(string annotation = null, ResourceIdentifier networkFabricId = null, IEnumerable<IPCommunityRule> ipCommunityRules = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            ipCommunityRules ??= new List<IPCommunityRule>();

            return new IPCommunityProperties(
                annotation,
                networkFabricId,
                ipCommunityRules?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricIPExtendedCommunityData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The IpExtendedCommunity properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricIPExtendedCommunityData"/> instance for mocking. </returns>
        public static NetworkFabricIPExtendedCommunityData NetworkFabricIPExtendedCommunityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IPExtendedCommunityProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricIPExtendedCommunityData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPExtendedCommunityProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <param name="ipExtendedCommunityRules"> List of IP Extended Community Rules. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.IPExtendedCommunityProperties"/> instance for mocking. </returns>
        public static IPExtendedCommunityProperties IPExtendedCommunityProperties(string annotation = null, ResourceIdentifier networkFabricId = null, IEnumerable<IPExtendedCommunityRule> ipExtendedCommunityRules = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            ipExtendedCommunityRules ??= new List<IPExtendedCommunityRule>();

            return new IPExtendedCommunityProperties(
                annotation,
                networkFabricId,
                ipExtendedCommunityRules?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricIPPrefixData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The IP Prefix properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricIPPrefixData"/> instance for mocking. </returns>
        public static NetworkFabricIPPrefixData NetworkFabricIPPrefixData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IPPrefixProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricIPPrefixData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPPrefixProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <param name="ipPrefixRules"> The list of IP Prefix Rules. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.IPPrefixProperties"/> instance for mocking. </returns>
        public static IPPrefixProperties IPPrefixProperties(string annotation = null, ResourceIdentifier networkFabricId = null, IEnumerable<IPPrefixRule> ipPrefixRules = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            ipPrefixRules ??= new List<IPPrefixRule>();

            return new IPPrefixProperties(
                annotation,
                networkFabricId,
                ipPrefixRules?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricL2IsolationDomainData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The L2IsolationDomain properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricL2IsolationDomainData"/> instance for mocking. </returns>
        public static NetworkFabricL2IsolationDomainData NetworkFabricL2IsolationDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, L2IsolationDomainProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricL2IsolationDomainData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.L2IsolationDomainProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <param name="vlanId"> Vlan Identifier of the Network Fabric. Example: 501. </param>
        /// <param name="mtu"> Maximum transmission unit. Default value is 1500. </param>
        /// <param name="extendedVlan"> Extended VLAN status, default value is Disabled. </param>
        /// <param name="networkToNetworkInterconnectId"> ARM Resource ID of the networkToNetworkInterconnectId of the L2 ISD resource. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.L2IsolationDomainProperties"/> instance for mocking. </returns>
        public static L2IsolationDomainProperties L2IsolationDomainProperties(string annotation = null, ResourceIdentifier networkFabricId = null, int vlanId = default, int? mtu = null, ExtendedVlan? extendedVlan = null, ResourceIdentifier networkToNetworkInterconnectId = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            return new L2IsolationDomainProperties(
                annotation,
                networkFabricId,
                vlanId,
                mtu,
                extendedVlan,
                networkToNetworkInterconnectId,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricL3IsolationDomainData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The L3 Isolation Domain Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricL3IsolationDomainData"/> instance for mocking. </returns>
        public static NetworkFabricL3IsolationDomainData NetworkFabricL3IsolationDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, L3IsolationDomainProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricL3IsolationDomainData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.L3IsolationDomainProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="redistributeConnectedSubnets"> Advertise Connected Subnets. Ex: "True" | "False". </param>
        /// <param name="redistributeStaticRoutes"> Advertise Static Routes. Ex: "True" | "False". </param>
        /// <param name="aggregateRouteConfiguration"> Aggregate route configurations. </param>
        /// <param name="connectedExportRoutePolicy"> Connected Subnet RoutePolicy. </param>
        /// <param name="networkFabricId"> ARM Resource ID of the Network Fabric. </param>
        /// <param name="exportRoutePolicy"> Static Route - route policy. </param>
        /// <param name="uniqueRds"> Unique Route Distinguisher configuration. </param>
        /// <param name="routePrefixLimit"> VRF Limit configuration. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.L3IsolationDomainProperties"/> instance for mocking. </returns>
        public static L3IsolationDomainProperties L3IsolationDomainProperties(string annotation = null, RedistributeConnectedSubnet? redistributeConnectedSubnets = null, RedistributeStaticRoute? redistributeStaticRoutes = null, AggregateRouteConfiguration aggregateRouteConfiguration = null, L3ExportRoutePolicy connectedExportRoutePolicy = null, ResourceIdentifier networkFabricId = null, L3ExportRoutePolicy exportRoutePolicy = null, IEnumerable<string> uniqueRds = null, RoutePrefixLimitProperties routePrefixLimit = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            uniqueRds ??= new List<string>();

            return new L3IsolationDomainProperties(
                annotation,
                redistributeConnectedSubnets,
                redistributeStaticRoutes,
                aggregateRouteConfiguration,
                connectedExportRoutePolicy != null ? new ConnectedSubnetRoutePolicy(connectedExportRoutePolicy, serializedAdditionalRawData: null) : null,
                networkFabricId,
                exportRoutePolicy != null ? new StaticRoutePolicy(exportRoutePolicy, serializedAdditionalRawData: null) : null,
                uniqueRds != null ? new L3UniqueRouteDistinguisherProperties(uniqueRds?.ToList(), serializedAdditionalRawData: null) : null,
                routePrefixLimit,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricNeighborGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NeighborGroup Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricNeighborGroupData"/> instance for mocking. </returns>
        public static NetworkFabricNeighborGroupData NetworkFabricNeighborGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NeighborGroupProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricNeighborGroupData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NeighborGroupProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="destination"> An array of destination IPv4 Addresses or IPv6 Addresses. </param>
        /// <param name="networkTapIds"> List of NetworkTap IDs where neighbor group is associated. </param>
        /// <param name="networkTapRuleIds"> List of Network Tap Rule IDs where neighbor group is associated. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> The provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NeighborGroupProperties"/> instance for mocking. </returns>
        public static NeighborGroupProperties NeighborGroupProperties(string annotation = null, NeighborGroupDestination destination = null, IEnumerable<ResourceIdentifier> networkTapIds = null, IEnumerable<ResourceIdentifier> networkTapRuleIds = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            networkTapIds ??= new List<ResourceIdentifier>();
            networkTapRuleIds ??= new List<ResourceIdentifier>();

            return new NeighborGroupProperties(
                annotation,
                destination,
                networkTapIds?.ToList(),
                networkTapRuleIds?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkDeviceSkuData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The NetworkDeviceSku properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkDeviceSkuData"/> instance for mocking. </returns>
        public static NetworkDeviceSkuData NetworkDeviceSkuData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkDeviceSkuProperties properties = null)
        {
            return new NetworkDeviceSkuData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkDeviceSkuProperties"/>. </summary>
        /// <param name="model"> Model of the network device. </param>
        /// <param name="manufacturer"> Manufacturer of the network device. </param>
        /// <param name="supportedVersions"> List of supported version details of network device. </param>
        /// <param name="supportedRoleTypes"> Available roles for the network device. </param>
        /// <param name="interfaces"> List of network device interfaces. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkDeviceSkuProperties"/> instance for mocking. </returns>
        public static NetworkDeviceSkuProperties NetworkDeviceSkuProperties(string model = null, string manufacturer = null, IEnumerable<SupportedVersionProperties> supportedVersions = null, IEnumerable<NetworkDeviceRoleName> supportedRoleTypes = null, IEnumerable<NetworkDeviceInterfaceProperties> interfaces = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            supportedVersions ??= new List<SupportedVersionProperties>();
            supportedRoleTypes ??= new List<NetworkDeviceRoleName>();
            interfaces ??= new List<NetworkDeviceInterfaceProperties>();

            return new NetworkDeviceSkuProperties(
                model,
                manufacturer,
                supportedVersions?.ToList(),
                supportedRoleTypes?.ToList(),
                interfaces?.ToList(),
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkDeviceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkDevice properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkDeviceData"/> instance for mocking. </returns>
        public static NetworkDeviceData NetworkDeviceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkDeviceProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkDeviceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkDeviceProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="hostName"> The host name of the device. </param>
        /// <param name="serialNumber"> Serial number of the device. Format of serial Number - Make;Model;HardwareRevisionId;SerialNumber. </param>
        /// <param name="version"> Current version of the device as defined in SKU. </param>
        /// <param name="networkDeviceSku"> Network Device SKU name. </param>
        /// <param name="networkDeviceRole"> NetworkDeviceRole is the device role: Example: CE | ToR. </param>
        /// <param name="networkRackId"> Reference to network rack resource id. </param>
        /// <param name="managementIPv4Address"> Management IPv4 Address. </param>
        /// <param name="managementIPv6Address"> Management IPv6 Address. </param>
        /// <param name="rwDeviceConfig"> User configured read-write configuration applied on the network devices. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkDeviceProperties"/> instance for mocking. </returns>
        public static NetworkDeviceProperties NetworkDeviceProperties(string annotation = null, string hostName = null, string serialNumber = null, string version = null, string networkDeviceSku = null, NetworkDeviceRole? networkDeviceRole = null, string networkRackId = null, string managementIPv4Address = null, string managementIPv6Address = null, string rwDeviceConfig = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            return new NetworkDeviceProperties(
                annotation,
                hostName,
                serialNumber,
                version,
                networkDeviceSku,
                networkDeviceRole,
                networkRackId,
                managementIPv4Address,
                managementIPv6Address,
                rwDeviceConfig,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricControllerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkFabricController Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricControllerData"/> instance for mocking. </returns>
        public static NetworkFabricControllerData NetworkFabricControllerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkFabricControllerProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricControllerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkFabricControllerProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="infrastructureExpressRouteConnections"> As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute). </param>
        /// <param name="workloadExpressRouteConnections"> As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). </param>
        /// <param name="infrastructureServices"> InfrastructureServices IP ranges. </param>
        /// <param name="workloadServices"> WorkloadServices IP ranges. </param>
        /// <param name="managedResourceGroupConfiguration"> Managed Resource Group configuration properties. </param>
        /// <param name="networkFabricIds"> The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service. </param>
        /// <param name="isWorkloadManagementNetworkEnabled"> A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. </param>
        /// <param name="tenantInternetGatewayIds"> List of tenant InternetGateway resource IDs. </param>
        /// <param name="ipv4AddressSpace"> IPv4 Network Fabric Controller Address Space. </param>
        /// <param name="ipv6AddressSpace"> IPv6 Network Fabric Controller Address Space. </param>
        /// <param name="nfcSku"> Network Fabric Controller SKU. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning. </param>
        /// <returns> A new <see cref="Models.NetworkFabricControllerProperties"/> instance for mocking. </returns>
        public static NetworkFabricControllerProperties NetworkFabricControllerProperties(string annotation = null, IEnumerable<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections = null, IEnumerable<ExpressRouteConnectionInformation> workloadExpressRouteConnections = null, NetworkFabricControllerServices infrastructureServices = null, NetworkFabricControllerServices workloadServices = null, ManagedResourceGroupConfiguration managedResourceGroupConfiguration = null, IEnumerable<ResourceIdentifier> networkFabricIds = null, IsWorkloadManagementNetworkEnabled? isWorkloadManagementNetworkEnabled = null, IEnumerable<ResourceIdentifier> tenantInternetGatewayIds = null, string ipv4AddressSpace = null, string ipv6AddressSpace = null, NetworkFabricControllerSKU? nfcSku = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            infrastructureExpressRouteConnections ??= new List<ExpressRouteConnectionInformation>();
            workloadExpressRouteConnections ??= new List<ExpressRouteConnectionInformation>();
            networkFabricIds ??= new List<ResourceIdentifier>();
            tenantInternetGatewayIds ??= new List<ResourceIdentifier>();

            return new NetworkFabricControllerProperties(
                annotation,
                infrastructureExpressRouteConnections?.ToList(),
                workloadExpressRouteConnections?.ToList(),
                infrastructureServices,
                workloadServices,
                managedResourceGroupConfiguration,
                networkFabricIds?.ToList(),
                isWorkloadManagementNetworkEnabled,
                tenantInternetGatewayIds?.ToList(),
                ipv4AddressSpace,
                ipv6AddressSpace,
                nfcSku,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkFabricControllerServices"/>. </summary>
        /// <param name="ipv4AddressSpaces"> The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute. </param>
        /// <param name="ipv6AddressSpaces"> The IPv6 is not supported right now. </param>
        /// <returns> A new <see cref="Models.NetworkFabricControllerServices"/> instance for mocking. </returns>
        public static NetworkFabricControllerServices NetworkFabricControllerServices(IEnumerable<string> ipv4AddressSpaces = null, IEnumerable<string> ipv6AddressSpaces = null)
        {
            ipv4AddressSpaces ??= new List<string>();
            ipv6AddressSpaces ??= new List<string>();

            return new NetworkFabricControllerServices(ipv4AddressSpaces?.ToList(), ipv6AddressSpaces?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricSkuData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The Network Fabric Sku properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricSkuData"/> instance for mocking. </returns>
        public static NetworkFabricSkuData NetworkFabricSkuData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkFabricSkuProperties properties = null)
        {
            return new NetworkFabricSkuData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkFabricSkuProperties"/>. </summary>
        /// <param name="skuType"> Type of Network Fabric SKU. </param>
        /// <param name="maxComputeRacks"> Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU. </param>
        /// <param name="maximumServerCount"> Maximum number of servers available for this Network Fabric SKU. </param>
        /// <param name="supportedVersions"> List of supported Network Fabric SKU versions. </param>
        /// <param name="details"> URL providing detailed configuration of the fabric SKU. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkFabricSkuProperties"/> instance for mocking. </returns>
        public static NetworkFabricSkuProperties NetworkFabricSkuProperties(NetworkFabricSkuType? skuType = null, int? maxComputeRacks = null, int? maximumServerCount = null, IEnumerable<string> supportedVersions = null, string details = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            supportedVersions ??= new List<string>();

            return new NetworkFabricSkuProperties(
                skuType,
                maxComputeRacks,
                maximumServerCount,
                supportedVersions?.ToList(),
                details,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkFabric Properties. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricData"/> instance for mocking. </returns>
        public static NetworkFabricData NetworkFabricData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkFabricProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkFabricProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkFabricSku"> Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric. </param>
        /// <param name="fabricVersion"> The version of Network Fabric. </param>
        /// <param name="routerIds"> Array of router IDs. </param>
        /// <param name="storageAccountConfiguration"> Bring your own storage account configurations for Network Fabric. </param>
        /// <param name="fabricLocks"> Network Fabric Lock details. </param>
        /// <param name="networkFabricControllerId"> Azure resource ID for the NetworkFabricController the NetworkFabric belongs. </param>
        /// <param name="rackCount"> Number of compute racks associated to Network Fabric. </param>
        /// <param name="serverCountPerRack"> Number of servers.Possible values are from 1-16. </param>
        /// <param name="ipv4Prefix"> IPv4Prefix for Management Network. Example: 10.1.0.0/19. </param>
        /// <param name="ipv6Prefix"> IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. </param>
        /// <param name="fabricAsn"> ASN of CE devices for CE/PE connectivity. </param>
        /// <param name="terminalServerConfiguration"> Network and credentials configuration currently applied to terminal server. </param>
        /// <param name="managementNetworkConfiguration"> Configuration to be used to setup the management network. </param>
        /// <param name="racks"> List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU. </param>
        /// <param name="l2IsolationDomains"> List of L2 Isolation Domain resource IDs under the Network Fabric. </param>
        /// <param name="l3IsolationDomains"> List of L3 Isolation Domain resource IDs under the Network Fabric. </param>
        /// <param name="hardwareAlertThreshold"> Hardware alert threshold percentage. Possible values are from 20 to 100. </param>
        /// <param name="controlPlaneAcls"> Control Plane Access Control List ARM resource IDs. </param>
        /// <param name="featureFlags"> Feature flag status information. </param>
        /// <param name="trustedIPPrefixes"> Trusted IP Prefixes ARM resource IDs. </param>
        /// <param name="uniqueRdConfiguration"> Unique Route Distinguisher configuration. </param>
        /// <param name="storageArrayCount"> Number of Storage arrays associated with the Network Fabric. </param>
        /// <param name="activeCommitBatches"> Active commit batch identifiers. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkFabricProperties"/> instance for mocking. </returns>
        public static NetworkFabricProperties NetworkFabricProperties(string annotation = null, string networkFabricSku = null, string fabricVersion = null, IEnumerable<string> routerIds = null, StorageAccountConfiguration storageAccountConfiguration = null, IEnumerable<FabricLockProperties> fabricLocks = null, ResourceIdentifier networkFabricControllerId = null, int? rackCount = null, int serverCountPerRack = default, string ipv4Prefix = null, string ipv6Prefix = null, long fabricAsn = default, TerminalServerConfiguration terminalServerConfiguration = null, ManagementNetworkConfigurationProperties managementNetworkConfiguration = null, IEnumerable<string> racks = null, IEnumerable<string> l2IsolationDomains = null, IEnumerable<string> l3IsolationDomains = null, int? hardwareAlertThreshold = null, IEnumerable<ResourceIdentifier> controlPlaneAcls = null, IEnumerable<FeatureFlagProperties> featureFlags = null, IEnumerable<ResourceIdentifier> trustedIPPrefixes = null, UniqueRouteDistinguisherProperties uniqueRdConfiguration = null, int? storageArrayCount = null, IEnumerable<string> activeCommitBatches = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            routerIds ??= new List<string>();
            fabricLocks ??= new List<FabricLockProperties>();
            racks ??= new List<string>();
            l2IsolationDomains ??= new List<string>();
            l3IsolationDomains ??= new List<string>();
            controlPlaneAcls ??= new List<ResourceIdentifier>();
            featureFlags ??= new List<FeatureFlagProperties>();
            trustedIPPrefixes ??= new List<ResourceIdentifier>();
            activeCommitBatches ??= new List<string>();

            return new NetworkFabricProperties(
                annotation,
                networkFabricSku,
                fabricVersion,
                routerIds?.ToList(),
                storageAccountConfiguration,
                fabricLocks?.ToList(),
                networkFabricControllerId,
                rackCount,
                serverCountPerRack,
                ipv4Prefix,
                ipv6Prefix,
                fabricAsn,
                terminalServerConfiguration,
                managementNetworkConfiguration,
                racks?.ToList(),
                l2IsolationDomains?.ToList(),
                l3IsolationDomains?.ToList(),
                hardwareAlertThreshold,
                controlPlaneAcls?.ToList(),
                featureFlags?.ToList(),
                trustedIPPrefixes?.ToList(),
                uniqueRdConfiguration,
                storageArrayCount,
                activeCommitBatches?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FabricLockProperties"/>. </summary>
        /// <param name="lockState"> NetworkFabric Lock State. </param>
        /// <param name="lockType"> NetworkFabric Lock Type. </param>
        /// <returns> A new <see cref="Models.FabricLockProperties"/> instance for mocking. </returns>
        public static FabricLockProperties FabricLockProperties(LockConfigurationState? lockState = null, NetworkFabricLockType? lockType = null)
        {
            return new FabricLockProperties(lockState, lockType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TerminalServerConfiguration"/>. </summary>
        /// <param name="username"> Username for the terminal server connection. </param>
        /// <param name="password"> Password for the terminal server connection. </param>
        /// <param name="serialNumber"> Serial Number of Terminal server. </param>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="networkDeviceId"> ARM Resource ID used for the NetworkDevice. </param>
        /// <returns> A new <see cref="Models.TerminalServerConfiguration"/> instance for mocking. </returns>
        public static TerminalServerConfiguration TerminalServerConfiguration(string username = null, string password = null, string serialNumber = null, string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, ResourceIdentifier networkDeviceId = null)
        {
            return new TerminalServerConfiguration(
                username,
                password,
                serialNumber,
                primaryIPv4Prefix,
                primaryIPv6Prefix,
                secondaryIPv4Prefix,
                secondaryIPv6Prefix,
                networkDeviceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VpnConfigurationProperties"/>. </summary>
        /// <param name="networkToNetworkInterconnectId"> ARM Resource ID of the Network To Network Interconnect. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <param name="peeringOption"> Peering option list. </param>
        /// <param name="optionBProperties"> option B properties. </param>
        /// <param name="optionAProperties"> option A properties. </param>
        /// <returns> A new <see cref="Models.VpnConfigurationProperties"/> instance for mocking. </returns>
        public static VpnConfigurationProperties VpnConfigurationProperties(ResourceIdentifier networkToNetworkInterconnectId = null, NetworkFabricAdministrativeState? administrativeState = null, PeeringOption peeringOption = default, VpnOptionBProperties optionBProperties = null, VpnOptionAProperties optionAProperties = null)
        {
            return new VpnConfigurationProperties(
                networkToNetworkInterconnectId,
                administrativeState,
                peeringOption,
                optionBProperties,
                optionAProperties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BfdConfiguration"/>. </summary>
        /// <param name="administrativeState"> Administrative state of the BfdConfiguration. Example: Enabled | Disabled. </param>
        /// <param name="intervalInMilliSeconds"> Interval in milliseconds. Example: 300. </param>
        /// <param name="multiplier"> Multiplier for the Bfd Configuration. Example: 5. </param>
        /// <returns> A new <see cref="Models.BfdConfiguration"/> instance for mocking. </returns>
        public static BfdConfiguration BfdConfiguration(BfdAdministrativeState? administrativeState = null, int? intervalInMilliSeconds = null, int? multiplier = null)
        {
            return new BfdConfiguration(administrativeState, intervalInMilliSeconds, multiplier, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FeatureFlagProperties"/>. </summary>
        /// <param name="featureFlagName"> Feature flag name. </param>
        /// <param name="featureFlagValue"> Feature flag value. </param>
        /// <returns> A new <see cref="Models.FeatureFlagProperties"/> instance for mocking. </returns>
        public static FeatureFlagProperties FeatureFlagProperties(string featureFlagName = null, string featureFlagValue = null)
        {
            return new FeatureFlagProperties(featureFlagName, featureFlagValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UniqueRouteDistinguisherProperties"/>. </summary>
        /// <param name="uniqueRdConfigurationState"> Unique Route Distinguisher configuration state. Default is Enabled. </param>
        /// <param name="uniqueRds"> List of Unique Route Distinguisher addresses. </param>
        /// <param name="nniDerivedUniqueRdConfigurationState"> NNI derived unique Route Distinguisher state. Default is Disabled. </param>
        /// <returns> A new <see cref="Models.UniqueRouteDistinguisherProperties"/> instance for mocking. </returns>
        public static UniqueRouteDistinguisherProperties UniqueRouteDistinguisherProperties(UniqueRouteDistinguisherConfigurationState? uniqueRdConfigurationState = null, IEnumerable<string> uniqueRds = null, NNIDerivedUniqueRouteDistinguisherConfigurationState? nniDerivedUniqueRdConfigurationState = null)
        {
            uniqueRds ??= new List<string>();

            return new UniqueRouteDistinguisherProperties(uniqueRdConfigurationState, uniqueRds?.ToList(), nniDerivedUniqueRdConfigurationState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkMonitorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkFabric Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkMonitorData"/> instance for mocking. </returns>
        public static NetworkMonitorData NetworkMonitorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkMonitorProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkMonitorData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkMonitorProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="bmpConfiguration"> BMP Configurations for the Network Fabric. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provides you the latest status of the NetworkMonitor resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkMonitorProperties"/> instance for mocking. </returns>
        public static NetworkMonitorProperties NetworkMonitorProperties(string annotation = null, BmpConfigurationProperties bmpConfiguration = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            return new NetworkMonitorProperties(
                annotation,
                bmpConfiguration,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkPacketBrokerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkPacketBroker properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkPacketBrokerData"/> instance for mocking. </returns>
        public static NetworkPacketBrokerData NetworkPacketBrokerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkPacketBrokerProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkPacketBrokerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkPacketBrokerProperties"/>. </summary>
        /// <param name="networkFabricId"> ARM resource ID of the Network Fabric. </param>
        /// <param name="networkDeviceIds"> List of ARM resource IDs of Network Devices [NPB]. </param>
        /// <param name="sourceInterfaceIds"> List of network interfaces across NPB devices that are used to mirror source traffic. </param>
        /// <param name="networkTapIds"> List of network Tap IDs configured on NPB. </param>
        /// <param name="neighborGroupIds"> List of neighbor group IDs configured on NPB. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkPacketBrokerProperties"/> instance for mocking. </returns>
        public static NetworkPacketBrokerProperties NetworkPacketBrokerProperties(ResourceIdentifier networkFabricId = null, IEnumerable<ResourceIdentifier> networkDeviceIds = null, IEnumerable<ResourceIdentifier> sourceInterfaceIds = null, IEnumerable<ResourceIdentifier> networkTapIds = null, IEnumerable<ResourceIdentifier> neighborGroupIds = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            networkDeviceIds ??= new List<ResourceIdentifier>();
            sourceInterfaceIds ??= new List<ResourceIdentifier>();
            networkTapIds ??= new List<ResourceIdentifier>();
            neighborGroupIds ??= new List<ResourceIdentifier>();

            return new NetworkPacketBrokerProperties(
                networkFabricId,
                networkDeviceIds?.ToList(),
                sourceInterfaceIds?.ToList(),
                networkTapIds?.ToList(),
                neighborGroupIds?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkRackData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkRack properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkRackData"/> instance for mocking. </returns>
        public static NetworkRackData NetworkRackData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkRackProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkRackData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkRackProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkRackType"> Network Rack SKU name. </param>
        /// <param name="networkFabricId"> ARM resource ID of the Network Fabric. </param>
        /// <param name="networkDevices"> List of network device ARM resource IDs. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkRackProperties"/> instance for mocking. </returns>
        public static NetworkRackProperties NetworkRackProperties(string annotation = null, NetworkRackType? networkRackType = null, ResourceIdentifier networkFabricId = null, IEnumerable<ResourceIdentifier> networkDevices = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null)
        {
            networkDevices ??= new List<ResourceIdentifier>();

            return new NetworkRackProperties(
                annotation,
                networkRackType,
                networkFabricId,
                networkDevices?.ToList(),
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkTapRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkTapRule Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkTapRuleData"/> instance for mocking. </returns>
        public static NetworkTapRuleData NetworkTapRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkTapRuleProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkTapRuleData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkTapRuleProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="configurationType"> Input method to configure Network Tap Rule. </param>
        /// <param name="tapRulesUri"> Network Tap Rules file URL. </param>
        /// <param name="matchConfigurations"> List of match configurations. </param>
        /// <param name="dynamicMatchConfigurations"> List of dynamic match configurations. </param>
        /// <param name="networkTapId"> The ARM resource Id of the NetworkTap. </param>
        /// <param name="pollingIntervalInSeconds"> Polling interval in seconds. </param>
        /// <param name="lastSyncedOn"> The last sync timestamp. </param>
        /// <param name="globalNetworkTapRuleActions"> Global network tap rule actions. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkTapRuleProperties"/> instance for mocking. </returns>
        public static NetworkTapRuleProperties NetworkTapRuleProperties(string annotation = null, NetworkFabricConfigurationType configurationType = default, Uri tapRulesUri = null, IEnumerable<NetworkTapRuleMatchConfiguration> matchConfigurations = null, IEnumerable<CommonDynamicMatchConfiguration> dynamicMatchConfigurations = null, string networkTapId = null, PollingIntervalInSecond? pollingIntervalInSeconds = null, DateTimeOffset? lastSyncedOn = null, GlobalNetworkTapRuleActionProperties globalNetworkTapRuleActions = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            matchConfigurations ??= new List<NetworkTapRuleMatchConfiguration>();
            dynamicMatchConfigurations ??= new List<CommonDynamicMatchConfiguration>();

            return new NetworkTapRuleProperties(
                annotation,
                configurationType,
                tapRulesUri,
                matchConfigurations?.ToList(),
                dynamicMatchConfigurations?.ToList(),
                networkTapId,
                pollingIntervalInSeconds,
                lastSyncedOn,
                globalNetworkTapRuleActions,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkTapData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The NetworkTap Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkTapData"/> instance for mocking. </returns>
        public static NetworkTapData NetworkTapData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkTapProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkTapData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkTapProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkPacketBrokerId"> ARM resource ID of the Network Packet Broker. </param>
        /// <param name="sourceTapRuleId"> Source Tap Rule Id. ARM Resource ID of the Network Tap Rule. </param>
        /// <param name="destinations"> List of destinations to send the filter traffic. </param>
        /// <param name="pollingType"> Polling type. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Gets the configurations state of the resource. </param>
        /// <param name="provisioningState"> Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning. </param>
        /// <param name="administrativeState"> Administrative state of the resource. Example -Enabled/Disabled. </param>
        /// <returns> A new <see cref="Models.NetworkTapProperties"/> instance for mocking. </returns>
        public static NetworkTapProperties NetworkTapProperties(string annotation = null, ResourceIdentifier networkPacketBrokerId = null, ResourceIdentifier sourceTapRuleId = null, IEnumerable<NetworkTapDestinationProperties> destinations = null, NetworkTapPollingType? pollingType = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            destinations ??= new List<NetworkTapDestinationProperties>();

            return new NetworkTapProperties(
                annotation,
                networkPacketBrokerId,
                sourceTapRuleId,
                destinations?.ToList(),
                pollingType,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricRoutePolicyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The RoutePolicy properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricRoutePolicyData"/> instance for mocking. </returns>
        public static NetworkFabricRoutePolicyData NetworkFabricRoutePolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RoutePolicyProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFabricRoutePolicyData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoutePolicyProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="defaultAction"> Default action that needs to be applied when no condition is matched. Example: Permit | Deny. </param>
        /// <param name="statements"> Route Policy statements. </param>
        /// <param name="networkFabricId"> Arm Resource ID of Network Fabric. </param>
        /// <param name="addressFamilyType"> AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.RoutePolicyProperties"/> instance for mocking. </returns>
        public static RoutePolicyProperties RoutePolicyProperties(string annotation = null, CommunityActionType? defaultAction = null, IEnumerable<RoutePolicyStatementProperties> statements = null, ResourceIdentifier networkFabricId = null, AddressFamilyType? addressFamilyType = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            statements ??= new List<RoutePolicyStatementProperties>();

            return new RoutePolicyProperties(
                annotation,
                defaultAction,
                statements?.ToList(),
                networkFabricId,
                addressFamilyType,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StateUpdateCommonPostActionResult"/>. </summary>
        /// <param name="error"> The error object. </param>
        /// <param name="configurationState"> Gets the configuration state. </param>
        /// <returns> A new <see cref="Models.StateUpdateCommonPostActionResult"/> instance for mocking. </returns>
        public static StateUpdateCommonPostActionResult StateUpdateCommonPostActionResult(ResponseError error = null, NetworkFabricConfigurationState? configurationState = null)
        {
            return new StateUpdateCommonPostActionResult(error, configurationState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ValidateConfigurationResult"/>. </summary>
        /// <param name="error"> The error object. </param>
        /// <param name="configurationState"> Gets the configuration state. </param>
        /// <param name="uri"> URL for the details of the response. </param>
        /// <returns> A new <see cref="Models.ValidateConfigurationResult"/> instance for mocking. </returns>
        public static ValidateConfigurationResult ValidateConfigurationResult(ResponseError error = null, NetworkFabricConfigurationState? configurationState = null, Uri uri = null)
        {
            return new ValidateConfigurationResult(error, configurationState, uri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeviceUpdateCommonPostActionResult"/>. </summary>
        /// <param name="error"> The error object. </param>
        /// <param name="configurationState"> Gets the configuration state. </param>
        /// <param name="successfulDevices"> List of ARM Resource IDs for which the given action applied successfully. </param>
        /// <param name="failedDevices"> List of ARM Resource IDs for which the given action failed to apply. </param>
        /// <returns> A new <see cref="Models.DeviceUpdateCommonPostActionResult"/> instance for mocking. </returns>
        public static DeviceUpdateCommonPostActionResult DeviceUpdateCommonPostActionResult(ResponseError error = null, NetworkFabricConfigurationState? configurationState = null, IEnumerable<string> successfulDevices = null, IEnumerable<string> failedDevices = null)
        {
            successfulDevices ??= new List<string>();
            failedDevices ??= new List<string>();

            return new DeviceUpdateCommonPostActionResult(error, configurationState, successfulDevices?.ToList(), failedDevices?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricExternalNetworkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> External Network Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricExternalNetworkData"/> instance for mocking. </returns>
        public static NetworkFabricExternalNetworkData NetworkFabricExternalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExternalNetworkProperties properties = null)
        {
            return new NetworkFabricExternalNetworkData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExternalNetworkProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkToNetworkInterconnectId"> ARM Resource ID of the networkToNetworkInterconnectId of the ExternalNetwork resource. </param>
        /// <param name="importRoutePolicy"> Import Route Policy either IPv4 or IPv6. </param>
        /// <param name="exportRoutePolicy"> Export Route Policy either IPv4 or IPv6. </param>
        /// <param name="peeringOption"> Peering option list. </param>
        /// <param name="optionBProperties"> option B properties object. </param>
        /// <param name="optionAProperties"> option A properties object. </param>
        /// <param name="staticRouteConfiguration"> Static Route Configuration. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.ExternalNetworkProperties"/> instance for mocking. </returns>
        public static ExternalNetworkProperties ExternalNetworkProperties(string annotation = null, ResourceIdentifier networkToNetworkInterconnectId = null, ImportRoutePolicy importRoutePolicy = null, ExportRoutePolicy exportRoutePolicy = null, PeeringOption peeringOption = default, L3OptionBProperties optionBProperties = null, ExternalNetworkOptionAProperties optionAProperties = null, ExternalNetworkStaticRouteConfiguration staticRouteConfiguration = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            return new ExternalNetworkProperties(
                annotation,
                networkToNetworkInterconnectId,
                importRoutePolicy,
                exportRoutePolicy,
                peeringOption,
                optionBProperties,
                optionAProperties,
                staticRouteConfiguration,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExternalNetworkOptionAProperties"/>. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="mtu"> MTU to use for option A peering. </param>
        /// <param name="vlanId"> Vlan identifier. Example : 501. </param>
        /// <param name="fabricAsn"> Fabric ASN number. Example 65001. </param>
        /// <param name="peerAsn"> Peer ASN number.Example : 28. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="ingressAclId"> Ingress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="bmpConfigurationState"> BMP Monitor Configuration. </param>
        /// <param name="egressAclId"> Egress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="v4OverV6BgpSession"> V4OverV6 BGP Session state. </param>
        /// <param name="v6OverV4BgpSession"> V6OverV4 BGP Session state. </param>
        /// <param name="nativeIPv4PrefixLimits"> Native IPv4 prefix limits configuration. </param>
        /// <param name="nativeIPv6PrefixLimits"> Native IPv6 prefix limits configuration. </param>
        /// <returns> A new <see cref="Models.ExternalNetworkOptionAProperties"/> instance for mocking. </returns>
        public static ExternalNetworkOptionAProperties ExternalNetworkOptionAProperties(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, int? mtu = null, int vlanId = default, long? fabricAsn = null, long peerAsn = default, BfdConfiguration bfdConfiguration = null, ResourceIdentifier ingressAclId = null, BmpConfigurationState? bmpConfigurationState = null, ResourceIdentifier egressAclId = null, V4OverV6BgpSessionState? v4OverV6BgpSession = null, V6OverV4BgpSessionState? v6OverV4BgpSession = null, IEnumerable<PrefixLimitProperties> nativeIPv4PrefixLimits = null, IEnumerable<PrefixLimitProperties> nativeIPv6PrefixLimits = null)
        {
            nativeIPv4PrefixLimits ??= new List<PrefixLimitProperties>();
            nativeIPv6PrefixLimits ??= new List<PrefixLimitProperties>();

            return new ExternalNetworkOptionAProperties(
                primaryIPv4Prefix,
                primaryIPv6Prefix,
                secondaryIPv4Prefix,
                secondaryIPv6Prefix,
                mtu,
                vlanId,
                fabricAsn,
                peerAsn,
                bfdConfiguration,
                ingressAclId,
                bmpConfigurationState != null ? new ExternalNetworkBmpProperties(bmpConfigurationState, serializedAdditionalRawData: null) : null,
                egressAclId,
                v4OverV6BgpSession,
                v6OverV4BgpSession,
                nativeIPv4PrefixLimits != null ? new NativeIPv4PrefixLimitProperties(nativeIPv4PrefixLimits?.ToList(), serializedAdditionalRawData: null) : null,
                nativeIPv6PrefixLimits != null ? new NativeIPv6PrefixLimitProperties(nativeIPv6PrefixLimits?.ToList(), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExternalNetworkPatchOptionAProperties"/>. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="mtu"> MTU to use for option A peering. </param>
        /// <param name="vlanId"> Vlan identifier. Example : 501. </param>
        /// <param name="fabricAsn"> Fabric ASN number. Example 65001. </param>
        /// <param name="peerAsn"> Peer ASN number.Example : 28. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="ingressAclId"> Ingress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="egressAclId"> Egress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="bmpConfigurationState"> BMP Monitor Configuration. </param>
        /// <param name="v4OverV6BgpSession"> V4OverV6 BGP Session state. </param>
        /// <param name="v6OverV4BgpSession"> V6OverV4 BGP Session state. </param>
        /// <param name="nativeIPv4PrefixLimits"> Native IPv4 prefix limit configuration. </param>
        /// <param name="nativeIPv6PrefixLimits"> Native IPv6 prefix limit configuration. </param>
        /// <returns> A new <see cref="Models.ExternalNetworkPatchOptionAProperties"/> instance for mocking. </returns>
        public static ExternalNetworkPatchOptionAProperties ExternalNetworkPatchOptionAProperties(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, int? mtu = null, int? vlanId = null, long? fabricAsn = null, long? peerAsn = null, BfdPatchConfiguration bfdConfiguration = null, ResourceIdentifier ingressAclId = null, ResourceIdentifier egressAclId = null, BmpConfigurationState? bmpConfigurationState = null, V4OverV6BgpSessionState? v4OverV6BgpSession = null, V6OverV4BgpSessionState? v6OverV4BgpSession = null, IEnumerable<PrefixLimitPatchProperties> nativeIPv4PrefixLimits = null, IEnumerable<PrefixLimitPatchProperties> nativeIPv6PrefixLimits = null)
        {
            nativeIPv4PrefixLimits ??= new List<PrefixLimitPatchProperties>();
            nativeIPv6PrefixLimits ??= new List<PrefixLimitPatchProperties>();

            return new ExternalNetworkPatchOptionAProperties(
                primaryIPv4Prefix,
                primaryIPv6Prefix,
                secondaryIPv4Prefix,
                secondaryIPv6Prefix,
                mtu,
                vlanId,
                fabricAsn,
                peerAsn,
                bfdConfiguration,
                ingressAclId,
                egressAclId,
                bmpConfigurationState != null ? new ExternalNetworkBmpPatchProperties(bmpConfigurationState, serializedAdditionalRawData: null) : null,
                v4OverV6BgpSession,
                v6OverV4BgpSession,
                nativeIPv4PrefixLimits != null ? new NativeIPv4PrefixLimitPatchProperties(nativeIPv4PrefixLimits?.ToList(), serializedAdditionalRawData: null) : null,
                nativeIPv6PrefixLimits != null ? new NativeIPv6PrefixLimitPatchProperties(nativeIPv6PrefixLimits?.ToList(), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BfdPatchConfiguration"/>. </summary>
        /// <param name="administrativeState"> Administrative state of the BfdConfiguration. Example: Enabled | Disabled. </param>
        /// <param name="intervalInMilliSeconds"> Interval in milliseconds. Example: 300. </param>
        /// <param name="multiplier"> Multiplier for the Bfd Configuration. Example: 5. </param>
        /// <returns> A new <see cref="Models.BfdPatchConfiguration"/> instance for mocking. </returns>
        public static BfdPatchConfiguration BfdPatchConfiguration(BfdAdministrativeState? administrativeState = null, int? intervalInMilliSeconds = null, int? multiplier = null)
        {
            return new BfdPatchConfiguration(administrativeState, intervalInMilliSeconds, multiplier, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExternalNetworkBfdAdministrativeStateResult"/>. </summary>
        /// <param name="routeType"> Route Type that helps to know which bfd we are updating. </param>
        /// <param name="administrativeState"> Administrative state. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.ExternalNetworkBfdAdministrativeStateResult"/> instance for mocking. </returns>
        public static ExternalNetworkBfdAdministrativeStateResult ExternalNetworkBfdAdministrativeStateResult(ExternalNetworkRouteType? routeType = null, BfdAdministrativeState? administrativeState = null, ResponseError error = null)
        {
            return new ExternalNetworkBfdAdministrativeStateResult(routeType, administrativeState, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkFabricInternalNetworkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The Internal Network Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricInternalNetworkData"/> instance for mocking. </returns>
        public static NetworkFabricInternalNetworkData NetworkFabricInternalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, InternalNetworkProperties properties = null)
        {
            return new NetworkFabricInternalNetworkData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InternalNetworkProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="mtu"> Maximum transmission unit. Default value is 1500. </param>
        /// <param name="connectedIPv4Subnets"> List of Connected IPv4 Subnets. </param>
        /// <param name="connectedIPv6Subnets"> List of connected IPv6 Subnets. </param>
        /// <param name="importRoutePolicy"> Import Route Policy either IPv4 or IPv6. </param>
        /// <param name="exportRoutePolicy"> Export Route Policy either IPv4 or IPv6. </param>
        /// <param name="ingressAclId"> Ingress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="egressAclId"> Egress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="isMonitoringEnabled"> To check whether monitoring of internal network is enabled or not. </param>
        /// <param name="extension"> Extension. Example: NoExtension | NPB. </param>
        /// <param name="vlanId"> Vlan identifier. Example: 1001. </param>
        /// <param name="bgpConfiguration"> BGP configuration properties. </param>
        /// <param name="staticRouteConfiguration"> Static Route Configuration properties. </param>
        /// <param name="nativeIPv4PrefixLimits"> Native IPv4 Prefix Limit Configuration properties. </param>
        /// <param name="nativeIPv6PrefixLimits"> Native IPv6 Prefix Limit Configuration properties. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.InternalNetworkProperties"/> instance for mocking. </returns>
        public static InternalNetworkProperties InternalNetworkProperties(string annotation = null, int? mtu = null, IEnumerable<ConnectedSubnet> connectedIPv4Subnets = null, IEnumerable<ConnectedSubnet> connectedIPv6Subnets = null, ImportRoutePolicy importRoutePolicy = null, ExportRoutePolicy exportRoutePolicy = null, ResourceIdentifier ingressAclId = null, ResourceIdentifier egressAclId = null, IsMonitoringEnabled? isMonitoringEnabled = null, StaticRouteConfigurationExtension? extension = null, int vlanId = default, BgpConfiguration bgpConfiguration = null, StaticRouteConfiguration staticRouteConfiguration = null, IEnumerable<PrefixLimitProperties> nativeIPv4PrefixLimits = null, IEnumerable<PrefixLimitProperties> nativeIPv6PrefixLimits = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            connectedIPv4Subnets ??= new List<ConnectedSubnet>();
            connectedIPv6Subnets ??= new List<ConnectedSubnet>();
            nativeIPv4PrefixLimits ??= new List<PrefixLimitProperties>();
            nativeIPv6PrefixLimits ??= new List<PrefixLimitProperties>();

            return new InternalNetworkProperties(
                annotation,
                mtu,
                connectedIPv4Subnets?.ToList(),
                connectedIPv6Subnets?.ToList(),
                importRoutePolicy,
                exportRoutePolicy,
                ingressAclId,
                egressAclId,
                isMonitoringEnabled,
                extension,
                vlanId,
                bgpConfiguration,
                staticRouteConfiguration,
                nativeIPv4PrefixLimits != null ? new NativeIPv4PrefixLimitProperties(nativeIPv4PrefixLimits?.ToList(), serializedAdditionalRawData: null) : null,
                nativeIPv6PrefixLimits != null ? new NativeIPv6PrefixLimitProperties(nativeIPv6PrefixLimits?.ToList(), serializedAdditionalRawData: null) : null,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BgpConfiguration"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="defaultRouteOriginate"> Originate a defaultRoute. Ex: "True" | "False". </param>
        /// <param name="allowAS"> Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2. </param>
        /// <param name="allowASOverride"> Enable Or Disable state. </param>
        /// <param name="fabricAsn"> ASN of Network Fabric. Example: 65048. </param>
        /// <param name="peerAsn"> Peer ASN. Example: 65047. </param>
        /// <param name="ipv4ListenRangePrefixes"> List of BGP IPv4 Listen Range prefixes. </param>
        /// <param name="ipv6ListenRangePrefixes"> List of BGP IPv6 Listen Ranges prefixes. </param>
        /// <param name="ipv4NeighborAddress"> List with stringified IPv4 Neighbor Addresses. </param>
        /// <param name="ipv6NeighborAddress"> List with stringified IPv6 Neighbor Address. </param>
        /// <param name="bmpConfiguration"> InternalNetwork BMP Configuration. </param>
        /// <param name="v4OverV6BgpSession"> V4 over V6 bgp session. </param>
        /// <param name="v6OverV4BgpSession"> v6 over v4 bgp session. </param>
        /// <returns> A new <see cref="Models.BgpConfiguration"/> instance for mocking. </returns>
        public static BgpConfiguration BgpConfiguration(string annotation = null, BfdConfiguration bfdConfiguration = null, NetworkFabricBooleanValue? defaultRouteOriginate = null, int? allowAS = null, AllowASOverride? allowASOverride = null, long? fabricAsn = null, long peerAsn = default, IEnumerable<string> ipv4ListenRangePrefixes = null, IEnumerable<string> ipv6ListenRangePrefixes = null, IEnumerable<NeighborAddress> ipv4NeighborAddress = null, IEnumerable<NeighborAddress> ipv6NeighborAddress = null, InternalNetworkBmpProperties bmpConfiguration = null, V4OverV6BgpSessionState? v4OverV6BgpSession = null, V6OverV4BgpSessionState? v6OverV4BgpSession = null)
        {
            ipv4ListenRangePrefixes ??= new List<string>();
            ipv6ListenRangePrefixes ??= new List<string>();
            ipv4NeighborAddress ??= new List<NeighborAddress>();
            ipv6NeighborAddress ??= new List<NeighborAddress>();

            return new BgpConfiguration(
                annotation,
                bfdConfiguration,
                defaultRouteOriginate,
                allowAS,
                allowASOverride,
                fabricAsn,
                peerAsn,
                ipv4ListenRangePrefixes?.ToList(),
                ipv6ListenRangePrefixes?.ToList(),
                ipv4NeighborAddress?.ToList(),
                ipv6NeighborAddress?.ToList(),
                bmpConfiguration,
                v4OverV6BgpSession,
                v6OverV4BgpSession,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NeighborAddress"/>. </summary>
        /// <param name="address"> IP Address. </param>
        /// <param name="bfdAdministrativeState"> BFD Administrative State for each Neighbor Address. Example: Enabled | Disabled. </param>
        /// <param name="bgpAdministrativeState"> BGP Administrative State for each Neighbor Address. Example: Enabled | Disabled. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <returns> A new <see cref="Models.NeighborAddress"/> instance for mocking. </returns>
        public static NeighborAddress NeighborAddress(string address = null, BfdAdministrativeState? bfdAdministrativeState = null, BgpAdministrativeState? bgpAdministrativeState = null, NetworkFabricConfigurationState? configurationState = null)
        {
            return new NeighborAddress(address, bfdAdministrativeState, bgpAdministrativeState, configurationState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConnectedSubnetPatch"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="prefix"> Prefix of the Connected Subnet. </param>
        /// <returns> A new <see cref="Models.ConnectedSubnetPatch"/> instance for mocking. </returns>
        public static ConnectedSubnetPatch ConnectedSubnetPatch(string annotation = null, string prefix = null)
        {
            return new ConnectedSubnetPatch(annotation, prefix, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.BgpPatchConfiguration"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="defaultRouteOriginate"> Originate a defaultRoute. Ex: "True" | "False". </param>
        /// <param name="allowAS"> Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2. </param>
        /// <param name="allowASOverride"> Enable Or Disable state. </param>
        /// <param name="fabricAsn"> ASN of Network Fabric. Example: 65048. </param>
        /// <param name="peerAsn"> Peer ASN. Example: 65047. </param>
        /// <param name="ipv4ListenRangePrefixes"> List of BGP IPv4 Listen Range prefixes. </param>
        /// <param name="ipv6ListenRangePrefixes"> List of BGP IPv6 Listen Ranges prefixes. </param>
        /// <param name="ipv4NeighborAddress"> List with stringified IPv4 Neighbor Addresses. </param>
        /// <param name="ipv6NeighborAddress"> List with stringified IPv6 Neighbor Address. </param>
        /// <param name="bmpConfiguration"> InternalNetwork BMP Configuration. </param>
        /// <param name="v4OverV6BgpSession"> V4 over V6 bgp session. </param>
        /// <param name="v6OverV4BgpSession"> v6 over v4 bgp session. </param>
        /// <returns> A new <see cref="Models.BgpPatchConfiguration"/> instance for mocking. </returns>
        public static BgpPatchConfiguration BgpPatchConfiguration(string annotation = null, BfdPatchConfiguration bfdConfiguration = null, NetworkFabricBooleanValue? defaultRouteOriginate = null, int? allowAS = null, AllowASOverride? allowASOverride = null, long? fabricAsn = null, long? peerAsn = null, IEnumerable<string> ipv4ListenRangePrefixes = null, IEnumerable<string> ipv6ListenRangePrefixes = null, IEnumerable<NeighborAddressPatch> ipv4NeighborAddress = null, IEnumerable<NeighborAddressPatch> ipv6NeighborAddress = null, InternalNetworkBmpPatchProperties bmpConfiguration = null, V4OverV6BgpSessionState? v4OverV6BgpSession = null, V6OverV4BgpSessionState? v6OverV4BgpSession = null)
        {
            ipv4ListenRangePrefixes ??= new List<string>();
            ipv6ListenRangePrefixes ??= new List<string>();
            ipv4NeighborAddress ??= new List<NeighborAddressPatch>();
            ipv6NeighborAddress ??= new List<NeighborAddressPatch>();

            return new BgpPatchConfiguration(
                annotation,
                bfdConfiguration,
                defaultRouteOriginate,
                allowAS,
                allowASOverride,
                fabricAsn,
                peerAsn,
                ipv4ListenRangePrefixes?.ToList(),
                ipv6ListenRangePrefixes?.ToList(),
                ipv4NeighborAddress?.ToList(),
                ipv6NeighborAddress?.ToList(),
                bmpConfiguration,
                v4OverV6BgpSession,
                v6OverV4BgpSession,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NeighborAddressPatch"/>. </summary>
        /// <param name="address"> IP Address. </param>
        /// <param name="bfdAdministrativeState"> BFD Administrative State for each Neighbor Address. Example: Enabled | Disabled. </param>
        /// <param name="bgpAdministrativeState"> BGP Administrative State for each Neighbor Address. Example: Enabled | Disabled. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <returns> A new <see cref="Models.NeighborAddressPatch"/> instance for mocking. </returns>
        public static NeighborAddressPatch NeighborAddressPatch(string address = null, BfdAdministrativeState? bfdAdministrativeState = null, BgpAdministrativeState? bgpAdministrativeState = null, NetworkFabricConfigurationState? configurationState = null)
        {
            return new NeighborAddressPatch(address, bfdAdministrativeState, bgpAdministrativeState, configurationState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InternalNetworkBfdAdministrativeStateResult"/>. </summary>
        /// <param name="neighborAddressAdministrativeStatus"> NeighborAddress administrative status. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.InternalNetworkBfdAdministrativeStateResult"/> instance for mocking. </returns>
        public static InternalNetworkBfdAdministrativeStateResult InternalNetworkBfdAdministrativeStateResult(IEnumerable<NeighborAddressBfdAdministrativeStatus> neighborAddressAdministrativeStatus = null, ResponseError error = null)
        {
            neighborAddressAdministrativeStatus ??= new List<NeighborAddressBfdAdministrativeStatus>();

            return new InternalNetworkBfdAdministrativeStateResult(neighborAddressAdministrativeStatus?.ToList(), error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NeighborAddressBfdAdministrativeStatus"/>. </summary>
        /// <param name="neighborAddress"> NeighborAddress - Input should be either All or Specific Ipv4 Address or Specific Ipv6 Address. </param>
        /// <param name="administrativeState"> BFD Administrative state. </param>
        /// <param name="error"> Error message. </param>
        /// <returns> A new <see cref="Models.NeighborAddressBfdAdministrativeStatus"/> instance for mocking. </returns>
        public static NeighborAddressBfdAdministrativeStatus NeighborAddressBfdAdministrativeStatus(string neighborAddress = null, BfdAdministrativeState? administrativeState = null, string error = null)
        {
            return new NeighborAddressBfdAdministrativeStatus(neighborAddress, administrativeState, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InternalNetworkBgpAdministrativeStateResult"/>. </summary>
        /// <param name="neighborAddressAdministrativeStatus"> NeighborAddress administrative status. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.InternalNetworkBgpAdministrativeStateResult"/> instance for mocking. </returns>
        public static InternalNetworkBgpAdministrativeStateResult InternalNetworkBgpAdministrativeStateResult(IEnumerable<NeighborAddressBgpAdministrativeStatus> neighborAddressAdministrativeStatus = null, ResponseError error = null)
        {
            neighborAddressAdministrativeStatus ??= new List<NeighborAddressBgpAdministrativeStatus>();

            return new InternalNetworkBgpAdministrativeStateResult(neighborAddressAdministrativeStatus?.ToList(), error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NeighborAddressBgpAdministrativeStatus"/>. </summary>
        /// <param name="neighborAddress"> NeighborAddress - Input should be either All or Specific Ipv4 Address or Specific Ipv6 Address. </param>
        /// <param name="administrativeState"> BGP Administrative state. </param>
        /// <param name="error"> Error message. </param>
        /// <returns> A new <see cref="Models.NeighborAddressBgpAdministrativeStatus"/> instance for mocking. </returns>
        public static NeighborAddressBgpAdministrativeStatus NeighborAddressBgpAdministrativeStatus(string neighborAddress = null, BgpAdministrativeState? administrativeState = null, string error = null)
        {
            return new NeighborAddressBgpAdministrativeStatus(neighborAddress, administrativeState, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkDeviceInterfaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The NetworkInterface properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkDeviceInterfaceData"/> instance for mocking. </returns>
        public static NetworkDeviceInterfaceData NetworkDeviceInterfaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkInterfaceProperties properties = null)
        {
            return new NetworkDeviceInterfaceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkInterfaceProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="physicalIdentifier"> Physical Identifier of the network interface. </param>
        /// <param name="connectedTo"> The ARM resource id of the interface or compute server its connected to. </param>
        /// <param name="interfaceType"> The Interface Type. Example: Management/Data. </param>
        /// <param name="ipv4Address"> IPv4Address of the interface. </param>
        /// <param name="ipv6Address"> IPv6Address of the interface. </param>
        /// <param name="description"> Description of the interface. </param>
        /// <param name="additionalDescription"> Additional description of the interface. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkInterfaceProperties"/> instance for mocking. </returns>
        public static NetworkInterfaceProperties NetworkInterfaceProperties(string annotation = null, string physicalIdentifier = null, string connectedTo = null, NetworkDeviceInterfaceType? interfaceType = null, string ipv4Address = null, string ipv6Address = null, string description = null, string additionalDescription = null, string lastOperationDetails = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            return new NetworkInterfaceProperties(
                annotation,
                physicalIdentifier,
                connectedTo,
                interfaceType,
                ipv4Address,
                ipv6Address,
                description,
                additionalDescription,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommonPostActionResponseForDeviceROCommandsOperationStatusResult"/>. </summary>
        /// <param name="error"> The error object. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="properties"> The additional properties of the operation status result. </param>
        /// <param name="resourceId"> Fully qualified ID of the resource against which the original async operation was started. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <returns> A new <see cref="Models.CommonPostActionResponseForDeviceROCommandsOperationStatusResult"/> instance for mocking. </returns>
        public static CommonPostActionResponseForDeviceROCommandsOperationStatusResult CommonPostActionResponseForDeviceROCommandsOperationStatusResult(ResponseError error = null, DateTimeOffset? endOn = null, string id = null, string name = null, CommonPostActionResponseForDeviceROCommands properties = null, ResourceIdentifier resourceId = null, DateTimeOffset? startOn = null, string status = null)
        {
            return new CommonPostActionResponseForDeviceROCommandsOperationStatusResult(
                error,
                endOn,
                id,
                name,
                properties,
                resourceId,
                startOn,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommonPostActionResponseForDeviceROCommands"/>. </summary>
        /// <param name="configurationState"> Gets the configuration state. </param>
        /// <param name="outputUri"> Predefined link containing Device RO Command output. </param>
        /// <param name="deviceConfigurationPreview"> Device RO command Response limited to 4000 characters. </param>
        /// <returns> A new <see cref="Models.CommonPostActionResponseForDeviceROCommands"/> instance for mocking. </returns>
        public static CommonPostActionResponseForDeviceROCommands CommonPostActionResponseForDeviceROCommands(NetworkFabricConfigurationState? configurationState = null, Uri outputUri = null, string deviceConfigurationPreview = null)
        {
            return new CommonPostActionResponseForDeviceROCommands(configurationState, outputUri, deviceConfigurationPreview, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommonPostActionResponseForDeviceRWCommands"/>. </summary>
        /// <param name="error"> The error object. </param>
        /// <param name="configurationState"> Gets the configuration state. </param>
        /// <param name="outputUri"> Predefined link containing Device Rw Command output. </param>
        /// <returns> A new <see cref="Models.CommonPostActionResponseForDeviceRWCommands"/> instance for mocking. </returns>
        public static CommonPostActionResponseForDeviceRWCommands CommonPostActionResponseForDeviceRWCommands(ResponseError error = null, NetworkFabricConfigurationState? configurationState = null, Uri outputUri = null)
        {
            return new CommonPostActionResponseForDeviceRWCommands(error, configurationState, outputUri, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmConfigurationDiffResult"/>. </summary>
        /// <param name="configurationDiffUri"> Storage URL to the diff file. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.ArmConfigurationDiffResult"/> instance for mocking. </returns>
        public static ArmConfigurationDiffResult ArmConfigurationDiffResult(Uri configurationDiffUri = null, ResponseError error = null)
        {
            return new ArmConfigurationDiffResult(configurationDiffUri, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommitBatchStatusResult"/>. </summary>
        /// <param name="commitBatchId"> Commit Batch Identifier. </param>
        /// <param name="commitBatchState"> Commit Batch State. </param>
        /// <param name="commitBatchDetailsFailedDevices"> Commit Batch Details. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.CommitBatchStatusResult"/> instance for mocking. </returns>
        public static CommitBatchStatusResult CommitBatchStatusResult(string commitBatchId = null, CommitBatchState? commitBatchState = null, IEnumerable<string> commitBatchDetailsFailedDevices = null, ResponseError error = null)
        {
            commitBatchDetailsFailedDevices ??= new List<string>();

            return new CommitBatchStatusResult(commitBatchId, commitBatchState, commitBatchDetailsFailedDevices != null ? new CommitBatchDetails(commitBatchDetailsFailedDevices?.ToList(), serializedAdditionalRawData: null) : null, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DiscardCommitBatchResult"/>. </summary>
        /// <param name="commitBatchId"> Commit Batch Identifier. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.DiscardCommitBatchResult"/> instance for mocking. </returns>
        public static DiscardCommitBatchResult DiscardCommitBatchResult(string commitBatchId = null, ResponseError error = null)
        {
            return new DiscardCommitBatchResult(commitBatchId, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="ManagedNetworkFabric.NetworkToNetworkInterconnectData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The NetworkToNetworkInterconnect Properties. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkToNetworkInterconnectData"/> instance for mocking. </returns>
        public static NetworkToNetworkInterconnectData NetworkToNetworkInterconnectData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkToNetworkInterconnectProperties properties = null)
        {
            return new NetworkToNetworkInterconnectData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkToNetworkInterconnectProperties"/>. </summary>
        /// <param name="nniType"> Type of NNI used. Example: CE | NPB. </param>
        /// <param name="isManagementType"> Configuration to use NNI for Infrastructure Management. Example: True/False. </param>
        /// <param name="useOptionB"> Based on this option layer3 parameters are mandatory. Example: True/False. </param>
        /// <param name="layer2Configuration"> Common properties for Layer2 Configuration. </param>
        /// <param name="optionBLayer3Configuration"> Common properties for Layer3Configuration. </param>
        /// <param name="npbStaticRouteConfiguration"> NPB Static Route Configuration properties. </param>
        /// <param name="staticRouteConfiguration"> Static Route Configuration. </param>
        /// <param name="importRoutePolicy"> Import Route Policy information. </param>
        /// <param name="exportRoutePolicy"> Export Route Policy information. </param>
        /// <param name="egressAclId"> Egress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="ingressAclId"> Ingress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="microBfdState"> Micro Bidirectional Forwarding Detection (BFD) enabled/disabled state. </param>
        /// <param name="conditionalDefaultRouteConfiguration"> Conditional Default Route Configuration properties. </param>
        /// <param name="lastOperationDetails"> Details of the last operation performed on the resource. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="administrativeState"> Administrative state of the resource. </param>
        /// <returns> A new <see cref="Models.NetworkToNetworkInterconnectProperties"/> instance for mocking. </returns>
        public static NetworkToNetworkInterconnectProperties NetworkToNetworkInterconnectProperties(NniType? nniType = null, IsManagementType? isManagementType = null, NetworkFabricBooleanValue useOptionB = default, Layer2Configuration layer2Configuration = null, OptionBLayer3Configuration optionBLayer3Configuration = null, NpbStaticRouteConfiguration npbStaticRouteConfiguration = null, NniStaticRouteConfiguration staticRouteConfiguration = null, ImportRoutePolicyInformation importRoutePolicy = null, ExportRoutePolicyInformation exportRoutePolicy = null, ResourceIdentifier egressAclId = null, ResourceIdentifier ingressAclId = null, MicroBfdState? microBfdState = null, ConditionalDefaultRouteProperties conditionalDefaultRouteConfiguration = null, string lastOperationDetails = null, NetworkFabricConfigurationState? configurationState = null, NetworkFabricProvisioningState? provisioningState = null, NetworkFabricAdministrativeState? administrativeState = null)
        {
            return new NetworkToNetworkInterconnectProperties(
                nniType,
                isManagementType,
                useOptionB,
                layer2Configuration,
                optionBLayer3Configuration,
                npbStaticRouteConfiguration,
                staticRouteConfiguration,
                importRoutePolicy,
                exportRoutePolicy,
                egressAclId,
                ingressAclId,
                microBfdState,
                conditionalDefaultRouteConfiguration,
                lastOperationDetails != null ? new LastOperationProperties(lastOperationDetails, serializedAdditionalRawData: null) : null,
                configurationState,
                provisioningState,
                administrativeState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OptionBLayer3Configuration"/>. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="peerAsn"> ASN of PE devices for CE/PE connectivity.Example : 28. </param>
        /// <param name="vlanId"> VLAN for CE/PE Layer 3 connectivity.Example : 501. </param>
        /// <param name="fabricAsn"> ASN of CE devices for CE/PE connectivity. </param>
        /// <param name="peLoopbackIPAddress"> Provider Edge (PE) Loopback IP Address. </param>
        /// <param name="bmpConfigurationState"> BGP Monitoring Protocol (BMP) Configuration. </param>
        /// <param name="prefixLimits"> OptionB Layer3 prefix limit configuration. </param>
        /// <returns> A new <see cref="Models.OptionBLayer3Configuration"/> instance for mocking. </returns>
        public static OptionBLayer3Configuration OptionBLayer3Configuration(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, long peerAsn = default, int vlanId = default, long? fabricAsn = null, IEnumerable<string> peLoopbackIPAddress = null, BmpConfigurationState? bmpConfigurationState = null, IEnumerable<OptionBLayer3PrefixLimitProperties> prefixLimits = null)
        {
            peLoopbackIPAddress ??= new List<string>();
            prefixLimits ??= new List<OptionBLayer3PrefixLimitProperties>();

            return new OptionBLayer3Configuration(
                primaryIPv4Prefix,
                primaryIPv6Prefix,
                secondaryIPv4Prefix,
                secondaryIPv6Prefix,
                peerAsn,
                vlanId,
                fabricAsn,
                peLoopbackIPAddress?.ToList(),
                bmpConfigurationState.HasValue ? new NniBmpProperties(bmpConfigurationState.Value, serializedAdditionalRawData: null) : null,
                prefixLimits?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkToNetworkInterconnectPatch"/>. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. E.g. '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'. </param>
        /// <param name="networkToNetworkInterconnectPatchType"> The type of the resource. E.g. 'Microsoft.Compute/virtualMachines' or 'Microsoft.Storage/storageAccounts'. </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> Resource properties. </param>
        /// <returns> A new <see cref="Models.NetworkToNetworkInterconnectPatch"/> instance for mocking. </returns>
        public static NetworkToNetworkInterconnectPatch NetworkToNetworkInterconnectPatch(ResourceIdentifier id = null, string networkToNetworkInterconnectPatchType = null, SystemData systemData = null, NetworkToNetworkInterconnectPatchProperties properties = null)
        {
            return new NetworkToNetworkInterconnectPatch(id, networkToNetworkInterconnectPatchType, systemData, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OptionBLayer3ConfigurationPatchProperties"/>. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="peerAsn"> ASN of PE devices for CE/PE connectivity.Example : 28. </param>
        /// <param name="vlanId"> VLAN for CE/PE Layer 3 connectivity.Example : 501. </param>
        /// <param name="fabricAsn"> ASN of CE devices for CE/PE connectivity. </param>
        /// <param name="peLoopbackIPAddress"> Provider Edge (PE) Loopback IP Address. </param>
        /// <param name="bmpConfigurationState"> BGP Monitoring Protocol (BMP) Configuration. </param>
        /// <param name="prefixLimits"> OptionB Layer3 prefix limit configuration. </param>
        /// <returns> A new <see cref="Models.OptionBLayer3ConfigurationPatchProperties"/> instance for mocking. </returns>
        public static OptionBLayer3ConfigurationPatchProperties OptionBLayer3ConfigurationPatchProperties(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, long? peerAsn = null, int? vlanId = null, long? fabricAsn = null, IEnumerable<string> peLoopbackIPAddress = null, BmpConfigurationState? bmpConfigurationState = null, IEnumerable<OptionBLayer3PrefixLimitPatchProperties> prefixLimits = null)
        {
            peLoopbackIPAddress ??= new List<string>();
            prefixLimits ??= new List<OptionBLayer3PrefixLimitPatchProperties>();

            return new OptionBLayer3ConfigurationPatchProperties(
                primaryIPv4Prefix,
                primaryIPv6Prefix,
                secondaryIPv4Prefix,
                secondaryIPv6Prefix,
                peerAsn,
                vlanId,
                fabricAsn,
                peLoopbackIPAddress?.ToList(),
                bmpConfigurationState != null ? new NniBmpPatchProperties(bmpConfigurationState, serializedAdditionalRawData: null) : null,
                prefixLimits?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NniBfdAdministrativeStateResult"/>. </summary>
        /// <param name="routeType"> Route Type. Choose either Static or OptionA. </param>
        /// <param name="administrativeState"> State. Select either enable or disable. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.NniBfdAdministrativeStateResult"/> instance for mocking. </returns>
        public static NniBfdAdministrativeStateResult NniBfdAdministrativeStateResult(RouteType? routeType = null, BfdAdministrativeState? administrativeState = null, ResponseError error = null)
        {
            return new NniBfdAdministrativeStateResult(routeType, administrativeState, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ViewDeviceConfigurationResult"/>. </summary>
        /// <param name="deviceConfigurationUri"> Storage URL to the device configuration file. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.ViewDeviceConfigurationResult"/> instance for mocking. </returns>
        public static ViewDeviceConfigurationResult ViewDeviceConfigurationResult(Uri deviceConfigurationUri = null, ResponseError error = null)
        {
            return new ViewDeviceConfigurationResult(deviceConfigurationUri, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoutePolicyStatementPatchProperties"/>. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="sequenceNumber"> Sequence to insert to/delete from existing route. </param>
        /// <param name="condition"> Route policy condition properties. </param>
        /// <param name="action"> Route policy action properties. </param>
        /// <returns> A new <see cref="Models.RoutePolicyStatementPatchProperties"/> instance for mocking. </returns>
        public static RoutePolicyStatementPatchProperties RoutePolicyStatementPatchProperties(string annotation = null, long sequenceNumber = default, StatementConditionPatchProperties condition = null, StatementActionPatchProperties action = null)
        {
            return new RoutePolicyStatementPatchProperties(annotation, sequenceNumber, condition, action, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StatementActionPatchProperties"/>. </summary>
        /// <param name="localPreference"> Local Preference of the route policy. </param>
        /// <param name="actionType"> Action type. Example: Permit | Deny | Continue. </param>
        /// <param name="ipCommunityProperties"> IP Community Properties. </param>
        /// <param name="ipExtendedCommunityProperties"> IP Extended Community Properties. </param>
        /// <returns> A new <see cref="Models.StatementActionPatchProperties"/> instance for mocking. </returns>
        public static StatementActionPatchProperties StatementActionPatchProperties(long? localPreference = null, RoutePolicyActionType actionType = default, ActionIPCommunityPatchProperties ipCommunityProperties = null, ActionIPExtendedCommunityPatchProperties ipExtendedCommunityProperties = null)
        {
            return new StatementActionPatchProperties(localPreference, actionType, ipCommunityProperties, ipExtendedCommunityProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.BgpConfiguration" />. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="defaultRouteOriginate"> Originate a defaultRoute. Ex: "True" | "False". </param>
        /// <param name="allowAS"> Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2. </param>
        /// <param name="allowASOverride"> Enable Or Disable state. </param>
        /// <param name="fabricAsn"> ASN of Network Fabric. Example: 65048. </param>
        /// <param name="peerAsn"> Peer ASN. Example: 65047. </param>
        /// <param name="ipv4ListenRangePrefixes"> List of BGP IPv4 Listen Range prefixes. </param>
        /// <param name="ipv6ListenRangePrefixes"> List of BGP IPv6 Listen Ranges prefixes. </param>
        /// <param name="ipv4NeighborAddress"> List with stringified IPv4 Neighbor Addresses. </param>
        /// <param name="ipv6NeighborAddress"> List with stringified IPv6 Neighbor Address. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.BgpConfiguration" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static BgpConfiguration BgpConfiguration(string annotation, BfdConfiguration bfdConfiguration, NetworkFabricBooleanValue? defaultRouteOriginate, int? allowAS, AllowASOverride? allowASOverride, long? fabricAsn, long? peerAsn, IEnumerable<string> ipv4ListenRangePrefixes, IEnumerable<string> ipv6ListenRangePrefixes, IEnumerable<NeighborAddress> ipv4NeighborAddress, IEnumerable<NeighborAddress> ipv6NeighborAddress)
        {
            return BgpConfiguration(annotation: annotation, bfdConfiguration: bfdConfiguration, defaultRouteOriginate: defaultRouteOriginate, allowAS: allowAS, allowASOverride: allowASOverride, fabricAsn: fabricAsn, peerAsn: peerAsn, ipv4ListenRangePrefixes: ipv4ListenRangePrefixes, ipv6ListenRangePrefixes: ipv6ListenRangePrefixes, ipv4NeighborAddress: ipv4NeighborAddress, ipv6NeighborAddress: ipv6NeighborAddress, bmpConfiguration: default, v4OverV6BgpSession: default, v6OverV4BgpSession: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.NeighborAddress" />. </summary>
        /// <param name="address"> IP Address. </param>
        /// <param name="configurationState"> Configuration state of the resource. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.NeighborAddress" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static NeighborAddress NeighborAddress(string address, NetworkFabricConfigurationState? configurationState)
        {
            return NeighborAddress(address: address, bfdAdministrativeState: default, bgpAdministrativeState: default, configurationState: configurationState);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.ExternalNetworkOptionAProperties" />. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="mtu"> MTU to use for option A peering. </param>
        /// <param name="vlanId"> Vlan identifier. Example : 501. </param>
        /// <param name="fabricAsn"> Fabric ASN number. Example 65001. </param>
        /// <param name="peerAsn"> Peer ASN number.Example : 28. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="ingressAclId"> Ingress Acl. ARM resource ID of Access Control Lists. </param>
        /// <param name="egressAclId"> Egress Acl. ARM resource ID of Access Control Lists. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.ExternalNetworkOptionAProperties" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static ExternalNetworkOptionAProperties ExternalNetworkOptionAProperties(string primaryIPv4Prefix, string primaryIPv6Prefix, string secondaryIPv4Prefix, string secondaryIPv6Prefix, int? mtu, int? vlanId, long? fabricAsn, long? peerAsn, BfdConfiguration bfdConfiguration, ResourceIdentifier ingressAclId, ResourceIdentifier egressAclId)
        {
            return ExternalNetworkOptionAProperties(primaryIPv4Prefix: primaryIPv4Prefix, primaryIPv6Prefix: primaryIPv6Prefix, secondaryIPv4Prefix: secondaryIPv4Prefix, secondaryIPv6Prefix: secondaryIPv6Prefix, mtu: mtu, vlanId: vlanId, fabricAsn: fabricAsn, peerAsn: peerAsn, bfdConfiguration: bfdConfiguration, ingressAclId: ingressAclId, bmpConfigurationState: default, egressAclId: egressAclId, v4OverV6BgpSession: default, v6OverV4BgpSession: default, nativeIPv4PrefixLimits: default, nativeIPv6PrefixLimits: default);
        }

        /// <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.OptionBLayer3Configuration" />. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix. </param>
        /// <param name="peerAsn"> ASN of PE devices for CE/PE connectivity.Example : 28. </param>
        /// <param name="vlanId"> VLAN for CE/PE Layer 3 connectivity.Example : 501. </param>
        /// <param name="fabricAsn"> ASN of CE devices for CE/PE connectivity. </param>
        /// <returns> A new <see cref="T:Azure.ResourceManager.ManagedNetworkFabric.Models.OptionBLayer3Configuration" /> instance for mocking. </returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static OptionBLayer3Configuration OptionBLayer3Configuration(string primaryIPv4Prefix, string primaryIPv6Prefix, string secondaryIPv4Prefix, string secondaryIPv6Prefix, long? peerAsn, int? vlanId, long? fabricAsn)
        {
            return OptionBLayer3Configuration(primaryIPv4Prefix: primaryIPv4Prefix, primaryIPv6Prefix: primaryIPv6Prefix, secondaryIPv4Prefix: secondaryIPv4Prefix, secondaryIPv6Prefix: secondaryIPv6Prefix, peerAsn: peerAsn, vlanId: vlanId, fabricAsn: fabricAsn, peLoopbackIPAddress: default, bmpConfigurationState: default, prefixLimits: default);
        }
    }
}
