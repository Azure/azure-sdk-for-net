// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.ManagedNetworkFabric;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ManagedNetworkFabric.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmManagedNetworkFabricModelFactory
    {
        /// <summary> Initializes a new instance of AccessControlListData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="addressFamily"> IP address family. Example: ipv4 | ipv6. </param>
        /// <param name="conditions"> Access Control List conditions. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.AccessControlListData"/> instance for mocking. </returns>
        public static AccessControlListData AccessControlListData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, AddressFamily addressFamily = default, IEnumerable<AccessControlListConditionProperties> conditions = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            conditions ??= new List<AccessControlListConditionProperties>();

            return new AccessControlListData(id, name, resourceType, systemData, tags, location, annotation, addressFamily, conditions?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of IPCommunityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="action"> Action to be taken on the configuration. Example: Permit | Deny. </param>
        /// <param name="wellKnownCommunities"> Supported well known Community List. </param>
        /// <param name="communityMembers"> List the communityMembers of IP Community . </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.IPCommunityData"/> instance for mocking. </returns>
        public static IPCommunityData IPCommunityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, CommunityActionType? action = null, IEnumerable<WellKnownCommunity> wellKnownCommunities = null, IEnumerable<string> communityMembers = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            wellKnownCommunities ??= new List<WellKnownCommunity>();
            communityMembers ??= new List<string>();

            return new IPCommunityData(id, name, resourceType, systemData, tags, location, annotation, action, wellKnownCommunities?.ToList(), communityMembers?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of IPExtendedCommunityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="action"> Action to be taken on the configuration. Example: Permit | Deny. </param>
        /// <param name="routeTargets"> Route Target List.The expected formats are ASN(plain):NN &gt;&gt; example 4294967294:50, ASN.ASN:NN &gt;&gt; example 65533.65333:40, IP-address:NN &gt;&gt; example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.IPExtendedCommunityData"/> instance for mocking. </returns>
        public static IPExtendedCommunityData IPExtendedCommunityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, CommunityActionType? action = null, IEnumerable<string> routeTargets = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            routeTargets ??= new List<string>();

            return new IPExtendedCommunityData(id, name, resourceType, systemData, tags, location, annotation, action, routeTargets?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of IPPrefixData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="ipPrefixRules"> IpPrefix contains the list of IP PrefixRules objects. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.IPPrefixData"/> instance for mocking. </returns>
        public static IPPrefixData IPPrefixData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, IEnumerable<IPPrefixPropertiesIPPrefixRulesItem> ipPrefixRules = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            ipPrefixRules ??= new List<IPPrefixPropertiesIPPrefixRulesItem>();

            return new IPPrefixData(id, name, resourceType, systemData, tags, location, annotation, ipPrefixRules?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of L2IsolationDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkFabricId"> Network Fabric ARM resource id. </param>
        /// <param name="vlanId"> vlanId. Example: 501. </param>
        /// <param name="mtu"> maximum transmission unit. Default value is 1500. </param>
        /// <param name="disabledOnResources"> List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="administrativeState"> state. Example: Enabled | Disabled. It indicates administrative state of the isolationDomain, whether it is enabled or disabled. If enabled, the configuration is applied on the devices. If disabled, the configuration is removed from the devices. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.L2IsolationDomainData"/> instance for mocking. </returns>
        public static L2IsolationDomainData L2IsolationDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, string networkFabricId = null, int? vlanId = null, int? mtu = null, IEnumerable<string> disabledOnResources = null, EnabledDisabledState? administrativeState = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            disabledOnResources ??= new List<string>();

            return new L2IsolationDomainData(id, name, resourceType, systemData, tags, location, annotation, networkFabricId, vlanId, mtu, disabledOnResources?.ToList(), administrativeState, provisioningState);
        }

        /// <summary> Initializes a new instance of ARPProperties. </summary>
        /// <param name="address"> Ipv4 or Ipv6 address. </param>
        /// <param name="age"> Duration in seconds. </param>
        /// <param name="macAddress"> Hardware address. </param>
        /// <param name="interface"> Layer 2 interface name. </param>
        /// <param name="state"> ARP status. </param>
        /// <returns> A new <see cref="Models.ARPProperties"/> instance for mocking. </returns>
        public static ARPProperties ARPProperties(string address = null, string age = null, string macAddress = null, string @interface = null, string state = null)
        {
            return new ARPProperties(address, age, macAddress, @interface, state);
        }

        /// <summary> Initializes a new instance of L3IsolationDomainData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="redistributeConnectedSubnets"> Advertise Connected Subnets. Ex: "True" | "False". </param>
        /// <param name="redistributeStaticRoutes"> Advertise Static Routes. Ex: "True" | "False". </param>
        /// <param name="aggregateRouteConfiguration"> List of Ipv4 and Ipv6 route configurations. </param>
        /// <param name="description"> L3 Isolation Domain description. </param>
        /// <param name="connectedSubnetRoutePolicy"> Connected Subnet RoutePolicy. </param>
        /// <param name="networkFabricId"> Network Fabric ARM resource id. </param>
        /// <param name="disabledOnResources"> List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="administrativeState"> Administrative state of the IsolationDomain. Example: Enabled | Disabled. </param>
        /// <param name="optionBDisabledOnResources"> List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.L3IsolationDomainData"/> instance for mocking. </returns>
        public static L3IsolationDomainData L3IsolationDomainData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, RedistributeConnectedSubnet? redistributeConnectedSubnets = null, RedistributeStaticRoute? redistributeStaticRoutes = null, AggregateRouteConfiguration aggregateRouteConfiguration = null, string description = null, L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy connectedSubnetRoutePolicy = null, string networkFabricId = null, IEnumerable<string> disabledOnResources = null, EnabledDisabledState? administrativeState = null, IEnumerable<string> optionBDisabledOnResources = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            disabledOnResources ??= new List<string>();
            optionBDisabledOnResources ??= new List<string>();

            return new L3IsolationDomainData(id, name, resourceType, systemData, tags, location, annotation, redistributeConnectedSubnets, redistributeStaticRoutes, aggregateRouteConfiguration, description, connectedSubnetRoutePolicy, networkFabricId, disabledOnResources?.ToList(), administrativeState, optionBDisabledOnResources?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy. </summary>
        /// <param name="exportRoutePolicyId"> exportRoutePolicyId value. </param>
        /// <param name="administrativeState"> Enabled/Disabled connected subnet route policy. Ex: Enabled | Disabled. </param>
        /// <returns> A new <see cref="Models.L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy"/> instance for mocking. </returns>
        public static L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy(string exportRoutePolicyId = null, EnabledDisabledState? administrativeState = null)
        {
            return new L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy(exportRoutePolicyId, administrativeState);
        }

        /// <summary> Initializes a new instance of InternalNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="mtu"> Maximum transmission unit. Default value is 1500. </param>
        /// <param name="connectedIPv4Subnets"> List with object connected IPv4 Subnets. </param>
        /// <param name="connectedIPv6Subnets"> List with object connected IPv6 Subnets. </param>
        /// <param name="staticRouteConfiguration"> Static Route Configuration properties. </param>
        /// <param name="bgpConfiguration"> BGP configuration properties. </param>
        /// <param name="importRoutePolicyId"> ARM resource ID of importRoutePolicy. </param>
        /// <param name="exportRoutePolicyId"> ARM resource ID of importRoutePolicy. </param>
        /// <param name="disabledOnResources"> List of resources the InternalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="administrativeState"> Administrative state of the InternalNetwork. Example: Enabled | Disabled. </param>
        /// <param name="bgpDisabledOnResources"> List of resources the BGP is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="bfdDisabledOnResources"> List of resources the BFD for BGP is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="bfdForStaticRoutesDisabledOnResources"> List of resources the BFD of StaticRoutes is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <param name="vlanId"> Vlan identifier. Example: 1001. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.InternalNetworkData"/> instance for mocking. </returns>
        public static InternalNetworkData InternalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string annotation = null, int? mtu = null, IEnumerable<ConnectedSubnet> connectedIPv4Subnets = null, IEnumerable<ConnectedSubnet> connectedIPv6Subnets = null, StaticRouteConfiguration staticRouteConfiguration = null, BgpConfiguration bgpConfiguration = null, string importRoutePolicyId = null, string exportRoutePolicyId = null, IEnumerable<string> disabledOnResources = null, EnabledDisabledState? administrativeState = null, IEnumerable<string> bgpDisabledOnResources = null, IEnumerable<string> bfdDisabledOnResources = null, IEnumerable<string> bfdForStaticRoutesDisabledOnResources = null, ProvisioningState? provisioningState = null, int vlanId = default)
        {
            connectedIPv4Subnets ??= new List<ConnectedSubnet>();
            connectedIPv6Subnets ??= new List<ConnectedSubnet>();
            disabledOnResources ??= new List<string>();
            bgpDisabledOnResources ??= new List<string>();
            bfdDisabledOnResources ??= new List<string>();
            bfdForStaticRoutesDisabledOnResources ??= new List<string>();

            return new InternalNetworkData(id, name, resourceType, systemData, annotation, mtu, connectedIPv4Subnets?.ToList(), connectedIPv6Subnets?.ToList(), staticRouteConfiguration, bgpConfiguration, importRoutePolicyId, exportRoutePolicyId, disabledOnResources?.ToList(), administrativeState, bgpDisabledOnResources?.ToList(), bfdDisabledOnResources?.ToList(), bfdForStaticRoutesDisabledOnResources?.ToList(), provisioningState, vlanId);
        }

        /// <summary> Initializes a new instance of BfdConfiguration. </summary>
        /// <param name="administrativeState"> Administrative state of the BfdConfiguration. Example: Enabled | Disabled. </param>
        /// <param name="interval"> interval in milliseconds. Example: 300. </param>
        /// <param name="multiplier"> Multiplier for the Bfd Configuration. Example: 3. </param>
        /// <returns> A new <see cref="Models.BfdConfiguration"/> instance for mocking. </returns>
        public static BfdConfiguration BfdConfiguration(EnabledDisabledState? administrativeState = null, int? interval = null, int? multiplier = null)
        {
            return new BfdConfiguration(administrativeState, interval, multiplier);
        }

        /// <summary> Initializes a new instance of BgpConfiguration. </summary>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <param name="defaultRouteOriginate"> Originate a defaultRoute. Ex: "True" | "False". </param>
        /// <param name="allowAS"> Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2. </param>
        /// <param name="allowASOverride"> Enable Or Disable state. </param>
        /// <param name="fabricASN"> ASN of Network Fabric. Example: 65048. </param>
        /// <param name="peerASN"> Peer ASN. Example: 65047. </param>
        /// <param name="ipv4ListenRangePrefixes"> BGP Ipv4 ListenRange. </param>
        /// <param name="ipv6ListenRangePrefixes"> BGP Ipv6 ListenRange. </param>
        /// <param name="ipv4NeighborAddress"> List with stringified ipv4NeighborAddresses. </param>
        /// <param name="ipv6NeighborAddress"> List with stringified IPv6 Neighbor Address. </param>
        /// <returns> A new <see cref="Models.BgpConfiguration"/> instance for mocking. </returns>
        public static BgpConfiguration BgpConfiguration(string annotation = null, BfdConfiguration bfdConfiguration = null, BooleanEnumProperty? defaultRouteOriginate = null, int? allowAS = null, AllowASOverride? allowASOverride = null, int? fabricASN = null, int peerASN = default, IEnumerable<string> ipv4ListenRangePrefixes = null, IEnumerable<string> ipv6ListenRangePrefixes = null, IEnumerable<NeighborAddress> ipv4NeighborAddress = null, IEnumerable<NeighborAddress> ipv6NeighborAddress = null)
        {
            ipv4ListenRangePrefixes ??= new List<string>();
            ipv6ListenRangePrefixes ??= new List<string>();
            ipv4NeighborAddress ??= new List<NeighborAddress>();
            ipv6NeighborAddress ??= new List<NeighborAddress>();

            return new BgpConfiguration(annotation, bfdConfiguration, defaultRouteOriginate, allowAS, allowASOverride, fabricASN, peerASN, ipv4ListenRangePrefixes?.ToList(), ipv6ListenRangePrefixes?.ToList(), ipv4NeighborAddress?.ToList(), ipv6NeighborAddress?.ToList());
        }

        /// <summary> Initializes a new instance of NeighborAddress. </summary>
        /// <param name="address"> IP Address. </param>
        /// <param name="operationalState"> OperationalState of the NeighborAddress. </param>
        /// <returns> A new <see cref="Models.NeighborAddress"/> instance for mocking. </returns>
        public static NeighborAddress NeighborAddress(string address = null, string operationalState = null)
        {
            return new NeighborAddress(address, operationalState);
        }

        /// <summary> Initializes a new instance of ExternalNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkToNetworkInterconnectId"> Gets the networkToNetworkInterconnectId of the resource. </param>
        /// <param name="disabledOnResources"> List of resources the externalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack. </param>
        /// <param name="administrativeState"> AdministrativeState of the externalNetwork. Example: Enabled | Disabled. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <param name="peeringOption"> Peering option list. </param>
        /// <param name="optionBProperties"> option B properties object. </param>
        /// <param name="optionAProperties"> option A properties object. </param>
        /// <param name="importRoutePolicyId"> ARM resource ID of importRoutePolicy. </param>
        /// <param name="exportRoutePolicyId"> ARM resource ID of exportRoutePolicy. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.ExternalNetworkData"/> instance for mocking. </returns>
        public static ExternalNetworkData ExternalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string annotation = null, string networkToNetworkInterconnectId = null, IEnumerable<string> disabledOnResources = null, EnabledDisabledState? administrativeState = null, ProvisioningState? provisioningState = null, PeeringOption peeringOption = default, OptionBProperties optionBProperties = null, ExternalNetworkPropertiesOptionAProperties optionAProperties = null, string importRoutePolicyId = null, string exportRoutePolicyId = null)
        {
            disabledOnResources ??= new List<string>();

            return new ExternalNetworkData(id, name, resourceType, systemData, annotation, networkToNetworkInterconnectId, disabledOnResources?.ToList(), administrativeState, provisioningState, peeringOption, optionBProperties, optionAProperties, importRoutePolicyId, exportRoutePolicyId);
        }

        /// <summary> Initializes a new instance of ExternalNetworkPropertiesOptionAProperties. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="mtu"> MTU to use for option A peering. </param>
        /// <param name="vlanId"> Vlan identifier. Example : 501. </param>
        /// <param name="fabricASN"> Fabric ASN number. Example 65001. </param>
        /// <param name="peerASN"> Peer ASN number.Example : 28. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <returns> A new <see cref="Models.ExternalNetworkPropertiesOptionAProperties"/> instance for mocking. </returns>
        public static ExternalNetworkPropertiesOptionAProperties ExternalNetworkPropertiesOptionAProperties(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, int? mtu = null, int? vlanId = null, int? fabricASN = null, int? peerASN = null, BfdConfiguration bfdConfiguration = null)
        {
            return new ExternalNetworkPropertiesOptionAProperties(primaryIPv4Prefix, primaryIPv6Prefix, secondaryIPv4Prefix, secondaryIPv6Prefix, mtu, vlanId, fabricASN, peerASN, bfdConfiguration);
        }

        /// <summary> Initializes a new instance of Layer3OptionAProperties. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="mtu"> MTU to use for option A peering. </param>
        /// <param name="vlanId"> Vlan identifier. Example : 501. </param>
        /// <param name="fabricASN"> Fabric ASN number. Example 65001. </param>
        /// <param name="peerASN"> Peer ASN number.Example : 28. </param>
        /// <param name="bfdConfiguration"> BFD configuration properties. </param>
        /// <returns> A new <see cref="Models.Layer3OptionAProperties"/> instance for mocking. </returns>
        public static Layer3OptionAProperties Layer3OptionAProperties(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, int? mtu = null, int? vlanId = null, int? fabricASN = null, int? peerASN = null, BfdConfiguration bfdConfiguration = null)
        {
            return new Layer3OptionAProperties(primaryIPv4Prefix, primaryIPv6Prefix, secondaryIPv4Prefix, secondaryIPv6Prefix, mtu, vlanId, fabricASN, peerASN, bfdConfiguration);
        }

        /// <summary> Initializes a new instance of NetworkDeviceSkuData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="model"> Model of the network device. </param>
        /// <param name="manufacturer"> Manufacturer of the network device. </param>
        /// <param name="supportedVersions"> List of network device interfaces. </param>
        /// <param name="limits"> Network device limits. </param>
        /// <param name="supportedRoleTypes"> Available roles for the network device. </param>
        /// <param name="interfaces"> List of network device interfaces. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkDeviceSkuData"/> instance for mocking. </returns>
        public static NetworkDeviceSkuData NetworkDeviceSkuData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string model = null, string manufacturer = null, IEnumerable<SupportedVersionProperties> supportedVersions = null, DeviceLimits limits = null, IEnumerable<NetworkDeviceRoleName> supportedRoleTypes = null, IEnumerable<DeviceInterfaceProperties> interfaces = null, ProvisioningState? provisioningState = null)
        {
            supportedVersions ??= new List<SupportedVersionProperties>();
            supportedRoleTypes ??= new List<NetworkDeviceRoleName>();
            interfaces ??= new List<DeviceInterfaceProperties>();

            return new NetworkDeviceSkuData(id, name, resourceType, systemData, model, manufacturer, supportedVersions?.ToList(), limits, supportedRoleTypes?.ToList(), interfaces?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of NetworkDeviceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="hostName"> The host Name of the device. </param>
        /// <param name="serialNumber"> serialNumber of the format Make;Model;HardwareRevisionId;SerialNumber. Example: Arista;DCS-7280DR3-24;12.05;JPE21116969. </param>
        /// <param name="version"> Current version of the device as defined in SKU. </param>
        /// <param name="networkDeviceSku"> Network Device SKU name. </param>
        /// <param name="networkDeviceRole"> networkDeviceRole is the device role: Example: CE | ToR. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <param name="networkRackId"> Reference to network rack resource id. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkDeviceData"/> instance for mocking. </returns>
        public static NetworkDeviceData NetworkDeviceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, string hostName = null, string serialNumber = null, string version = null, string networkDeviceSku = null, NetworkDeviceRoleType? networkDeviceRole = null, ProvisioningState? provisioningState = null, string networkRackId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkDeviceData(id, name, resourceType, systemData, tags, location, annotation, hostName, serialNumber, version, networkDeviceSku, networkDeviceRole, provisioningState, networkRackId);
        }

        /// <summary> Initializes a new instance of NetworkInterfaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="physicalIdentifier"> physicalIdentifier of the network interface. </param>
        /// <param name="administrativeState"> administrativeState of the network interface. Example: Enabled | Disabled. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <param name="connectedTo"> The arm resource id of the interface or compute server its connected to. </param>
        /// <param name="interfaceType"> The Interface Type. Example: Management/Data. </param>
        /// <param name="ipv4Address"> ipv4Address. </param>
        /// <param name="ipv6Address"> ipv6Address. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkInterfaceData"/> instance for mocking. </returns>
        public static NetworkInterfaceData NetworkInterfaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string annotation = null, string physicalIdentifier = null, EnabledDisabledState? administrativeState = null, ProvisioningState? provisioningState = null, string connectedTo = null, InterfaceType? interfaceType = null, string ipv4Address = null, string ipv6Address = null)
        {
            return new NetworkInterfaceData(id, name, resourceType, systemData, annotation, physicalIdentifier, administrativeState, provisioningState, connectedTo, interfaceType, ipv4Address, ipv6Address);
        }

        /// <summary> Initializes a new instance of SupportPackageProperties. </summary>
        /// <param name="supportPackageURL"> The URL to fetch the generated support package from. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="supportPackageURL"/> is null. </exception>
        /// <returns> A new <see cref="Models.SupportPackageProperties"/> instance for mocking. </returns>
        public static SupportPackageProperties SupportPackageProperties(string supportPackageURL = null)
        {
            if (supportPackageURL == null)
            {
                throw new ArgumentNullException(nameof(supportPackageURL));
            }

            return new SupportPackageProperties(supportPackageURL);
        }

        /// <summary> Initializes a new instance of GetDeviceStatusProperties. </summary>
        /// <param name="operationalStatus"> Primary or Secondary power end. </param>
        /// <param name="powerCycleState"> On or Off power cycle state. </param>
        /// <param name="serialNumber"> The serial number of the device. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serialNumber"/> is null. </exception>
        /// <returns> A new <see cref="Models.GetDeviceStatusProperties"/> instance for mocking. </returns>
        public static GetDeviceStatusProperties GetDeviceStatusProperties(OperationalStatus operationalStatus = default, PowerCycleState powerCycleState = default, string serialNumber = null)
        {
            if (serialNumber == null)
            {
                throw new ArgumentNullException(nameof(serialNumber));
            }

            return new GetDeviceStatusProperties(operationalStatus, powerCycleState, serialNumber);
        }

        /// <summary> Initializes a new instance of InterfaceStatus. </summary>
        /// <param name="administrativeState"> The interface administrative state. </param>
        /// <param name="operationalStatus"> The interface operational status. </param>
        /// <param name="phyStatus"> The physical status. </param>
        /// <param name="transceiverStatus"> The interface transceiver type. Example: up or down. </param>
        /// <param name="connectedTo"> Connected to ARM resource or external interface. </param>
        /// <returns> A new <see cref="Models.InterfaceStatus"/> instance for mocking. </returns>
        public static InterfaceStatus InterfaceStatus(EnabledDisabledState? administrativeState = null, string operationalStatus = null, string phyStatus = null, string transceiverStatus = null, string connectedTo = null)
        {
            return new InterfaceStatus(administrativeState, operationalStatus, phyStatus, transceiverStatus, connectedTo);
        }

        /// <summary> Initializes a new instance of NetworkFabricControllerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="infrastructureExpressRouteConnections"> As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute). </param>
        /// <param name="workloadExpressRouteConnections"> As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). </param>
        /// <param name="infrastructureServices"> InfrastructureServices IP ranges. </param>
        /// <param name="workloadServices"> WorkloadServices IP ranges. </param>
        /// <param name="managedResourceGroupConfiguration"> Managed Resource Group configuration properties. </param>
        /// <param name="networkFabricIds"> The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service. </param>
        /// <param name="workloadManagementNetwork"> A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. </param>
        /// <param name="ipv4AddressSpace"> IPv4 Network Fabric Controller Address Space. </param>
        /// <param name="ipv6AddressSpace"> IPv6 Network Fabric Controller Address Space. </param>
        /// <param name="operationalState"> The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status. </param>
        /// <param name="provisioningState"> Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricControllerData"/> instance for mocking. </returns>
        public static NetworkFabricControllerData NetworkFabricControllerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, IEnumerable<ExpressRouteConnectionInformation> infrastructureExpressRouteConnections = null, IEnumerable<ExpressRouteConnectionInformation> workloadExpressRouteConnections = null, InfrastructureServices infrastructureServices = null, WorkloadServices workloadServices = null, ManagedResourceGroupConfiguration managedResourceGroupConfiguration = null, IEnumerable<string> networkFabricIds = null, bool? workloadManagementNetwork = null, string ipv4AddressSpace = null, string ipv6AddressSpace = null, NetworkFabricControllerOperationalState? operationalState = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            infrastructureExpressRouteConnections ??= new List<ExpressRouteConnectionInformation>();
            workloadExpressRouteConnections ??= new List<ExpressRouteConnectionInformation>();
            networkFabricIds ??= new List<string>();

            return new NetworkFabricControllerData(id, name, resourceType, systemData, tags, location, annotation, infrastructureExpressRouteConnections?.ToList(), workloadExpressRouteConnections?.ToList(), infrastructureServices, workloadServices, managedResourceGroupConfiguration, networkFabricIds?.ToList(), workloadManagementNetwork, ipv4AddressSpace, ipv6AddressSpace, operationalState, provisioningState);
        }

        /// <summary> Initializes a new instance of InfrastructureServices. </summary>
        /// <param name="ipv4AddressSpaces"> The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute. </param>
        /// <param name="ipv6AddressSpaces"> The IPv6 is not supported right now. </param>
        /// <returns> A new <see cref="Models.InfrastructureServices"/> instance for mocking. </returns>
        public static InfrastructureServices InfrastructureServices(IEnumerable<string> ipv4AddressSpaces = null, IEnumerable<string> ipv6AddressSpaces = null)
        {
            ipv4AddressSpaces ??= new List<string>();
            ipv6AddressSpaces ??= new List<string>();

            return new InfrastructureServices(ipv4AddressSpaces?.ToList(), ipv6AddressSpaces?.ToList());
        }

        /// <summary> Initializes a new instance of WorkloadServices. </summary>
        /// <param name="ipv4AddressSpaces"> The IPv4 Address space is optional, if the value is defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute. </param>
        /// <param name="ipv6AddressSpaces"> The IPv6 is not supported right now. </param>
        /// <returns> A new <see cref="Models.WorkloadServices"/> instance for mocking. </returns>
        public static WorkloadServices WorkloadServices(IEnumerable<string> ipv4AddressSpaces = null, IEnumerable<string> ipv6AddressSpaces = null)
        {
            ipv4AddressSpaces ??= new List<string>();
            ipv6AddressSpaces ??= new List<string>();

            return new WorkloadServices(ipv4AddressSpaces?.ToList(), ipv6AddressSpaces?.ToList());
        }

        /// <summary> Initializes a new instance of NetworkFabricSkuData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="typePropertiesType"> Type of Network Fabric Sku. </param>
        /// <param name="maxComputeRacks"> Maximum number of compute racks available for this Network Fabric SKU. </param>
        /// <param name="minSupportedVer"> Minimum supported version. </param>
        /// <param name="maxSupportedVer"> Maximum supported version. </param>
        /// <param name="detailsUri"> The URI gives full details of sku. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricSkuData"/> instance for mocking. </returns>
        public static NetworkFabricSkuData NetworkFabricSkuData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string typePropertiesType = null, int? maxComputeRacks = null, string minSupportedVer = null, string maxSupportedVer = null, Uri detailsUri = null, ProvisioningState? provisioningState = null)
        {
            return new NetworkFabricSkuData(id, name, resourceType, systemData, typePropertiesType, maxComputeRacks, minSupportedVer, maxSupportedVer, detailsUri, provisioningState);
        }

        /// <summary> Initializes a new instance of NetworkFabricData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="racks"> List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU. </param>
        /// <param name="l2IsolationDomains"> List of L2IsolationDomain resource IDs under the Network Fabric. </param>
        /// <param name="l3IsolationDomains"> List of L3IsolationDomain resource IDs under the Network Fabric. </param>
        /// <param name="networkFabricSku"> Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric. </param>
        /// <param name="rackCount"> Number of racks associated to Network Fabric.Possible values are from 2-8. </param>
        /// <param name="serverCountPerRack"> Number of servers.Possible values are from 1-16. </param>
        /// <param name="ipv4Prefix"> IPv4Prefix for Management Network. Example: 10.1.0.0/19. </param>
        /// <param name="ipv6Prefix"> IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. </param>
        /// <param name="routerId"> Router Id of CE to be used for MP-BGP between PE and CE. </param>
        /// <param name="fabricASN"> ASN of CE devices for CE/PE connectivity. </param>
        /// <param name="networkFabricControllerId"> Azure resource ID for the NetworkFabricController the NetworkFabric belongs. </param>
        /// <param name="terminalServerConfiguration"> Network and credentials configuration currently applied to terminal server. </param>
        /// <param name="managementNetworkConfiguration"> Configuration to be used to setup the management network. </param>
        /// <param name="operationalState"> Gets the operational state of the resource. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkFabricData"/> instance for mocking. </returns>
        public static NetworkFabricData NetworkFabricData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, IEnumerable<string> racks = null, IEnumerable<string> l2IsolationDomains = null, IEnumerable<string> l3IsolationDomains = null, string networkFabricSku = null, int? rackCount = null, int? serverCountPerRack = null, string ipv4Prefix = null, string ipv6Prefix = null, string routerId = null, int? fabricASN = null, string networkFabricControllerId = null, TerminalServerConfiguration terminalServerConfiguration = null, ManagementNetworkConfiguration managementNetworkConfiguration = null, NetworkFabricOperationalState? operationalState = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            racks ??= new List<string>();
            l2IsolationDomains ??= new List<string>();
            l3IsolationDomains ??= new List<string>();

            return new NetworkFabricData(id, name, resourceType, systemData, tags, location, annotation, racks?.ToList(), l2IsolationDomains?.ToList(), l3IsolationDomains?.ToList(), networkFabricSku, rackCount, serverCountPerRack, ipv4Prefix, ipv6Prefix, routerId, fabricASN, networkFabricControllerId, terminalServerConfiguration, managementNetworkConfiguration, operationalState, provisioningState);
        }

        /// <summary> Initializes a new instance of TerminalServerConfiguration. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="networkDeviceId"> ARM Resource ID used for the NetworkDevice. </param>
        /// <param name="username"> Username for the terminal server connection. </param>
        /// <param name="password"> Password for the terminal server connection. </param>
        /// <param name="serialNumber"> Serial Number of Terminal server. </param>
        /// <returns> A new <see cref="Models.TerminalServerConfiguration"/> instance for mocking. </returns>
        public static TerminalServerConfiguration TerminalServerConfiguration(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, string networkDeviceId = null, string username = null, string password = null, string serialNumber = null)
        {
            return new TerminalServerConfiguration(primaryIPv4Prefix, primaryIPv6Prefix, secondaryIPv4Prefix, secondaryIPv6Prefix, networkDeviceId, username, password, serialNumber);
        }

        /// <summary> Initializes a new instance of VpnConfigurationProperties. </summary>
        /// <param name="administrativeState"> Indicates configuration state. Example: Enabled | Disabled. </param>
        /// <param name="networkToNetworkInterconnectId"> Gets the networkToNetworkInterconnectId of the resource. </param>
        /// <param name="peeringOption"> Peering option list. </param>
        /// <param name="optionBProperties"> option B properties. </param>
        /// <param name="optionAProperties"> option A properties. </param>
        /// <returns> A new <see cref="Models.VpnConfigurationProperties"/> instance for mocking. </returns>
        public static VpnConfigurationProperties VpnConfigurationProperties(EnabledDisabledState? administrativeState = null, string networkToNetworkInterconnectId = null, PeeringOption peeringOption = default, NetworkFabricOptionBProperties optionBProperties = null, NetworkFabricOptionAProperties optionAProperties = null)
        {
            return new VpnConfigurationProperties(administrativeState, networkToNetworkInterconnectId, peeringOption, optionBProperties, optionAProperties);
        }

        /// <summary> Initializes a new instance of FabricBfdConfiguration. </summary>
        /// <param name="interval"> interval in seconds. Example: 300. </param>
        /// <param name="multiplier"> multiplier. Example: 3. </param>
        /// <returns> A new <see cref="Models.FabricBfdConfiguration"/> instance for mocking. </returns>
        public static FabricBfdConfiguration FabricBfdConfiguration(int? interval = null, int? multiplier = null)
        {
            return new FabricBfdConfiguration(interval, multiplier);
        }

        /// <summary> Initializes a new instance of NetworkToNetworkInterconnectData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="nniType"> Type of NNI used. Example: CE | NPB. </param>
        /// <param name="administrativeState"> Gets the administrativeState of the resource. Example -Enabled/Disabled. </param>
        /// <param name="isManagementType"> Configuration to use NNI for Infrastructure Management. Example: True/False. </param>
        /// <param name="useOptionB"> Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False. </param>
        /// <param name="layer2Configuration"> Common properties for Layer2Configuration. </param>
        /// <param name="layer3Configuration"> Common properties for Layer3Configuration. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkToNetworkInterconnectData"/> instance for mocking. </returns>
        public static NetworkToNetworkInterconnectData NetworkToNetworkInterconnectData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NniType? nniType = null, EnabledDisabledState? administrativeState = null, BooleanEnumProperty? isManagementType = null, BooleanEnumProperty? useOptionB = null, Layer2Configuration layer2Configuration = null, Layer3Configuration layer3Configuration = null, ProvisioningState? provisioningState = null)
        {
            return new NetworkToNetworkInterconnectData(id, name, resourceType, systemData, nniType, administrativeState, isManagementType, useOptionB, layer2Configuration, layer3Configuration, provisioningState);
        }

        /// <summary> Initializes a new instance of Layer2Configuration. </summary>
        /// <param name="portCount"> Number of ports connected between PE/CE. Maximum value depends on FabricSKU. </param>
        /// <param name="mtu"> MTU of the packets between PE &amp; CE. </param>
        /// <param name="interfaces"> List of network device interfaces resource IDs. </param>
        /// <returns> A new <see cref="Models.Layer2Configuration"/> instance for mocking. </returns>
        public static Layer2Configuration Layer2Configuration(int? portCount = null, int mtu = default, IEnumerable<string> interfaces = null)
        {
            interfaces ??= new List<string>();

            return new Layer2Configuration(portCount, mtu, interfaces?.ToList());
        }

        /// <summary> Initializes a new instance of Layer3Configuration. </summary>
        /// <param name="primaryIPv4Prefix"> IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="primaryIPv6Prefix"> IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv4Prefix"> Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="secondaryIPv6Prefix"> Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. </param>
        /// <param name="importRoutePolicyId"> importRoutePolicyId. </param>
        /// <param name="exportRoutePolicyId"> exportRoutePolicyId. </param>
        /// <param name="peerASN"> ASN of PE devices for CE/PE connectivity.Example : 28. </param>
        /// <param name="vlanId"> VLAN for CE/PE Layer 3 connectivity.Example : 501. </param>
        /// <param name="fabricASN"> ASN of CE devices for CE/PE connectivity. </param>
        /// <returns> A new <see cref="Models.Layer3Configuration"/> instance for mocking. </returns>
        public static Layer3Configuration Layer3Configuration(string primaryIPv4Prefix = null, string primaryIPv6Prefix = null, string secondaryIPv4Prefix = null, string secondaryIPv6Prefix = null, string importRoutePolicyId = null, string exportRoutePolicyId = null, int? peerASN = null, int? vlanId = null, int? fabricASN = null)
        {
            return new Layer3Configuration(primaryIPv4Prefix, primaryIPv6Prefix, secondaryIPv4Prefix, secondaryIPv6Prefix, importRoutePolicyId, exportRoutePolicyId, peerASN, vlanId, fabricASN);
        }

        /// <summary> Initializes a new instance of NetworkRackSkuData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="roleName"> The role of the Network Rack: Aggregate or Compute. </param>
        /// <param name="maximumServerCount"> Maximum number of servers available for this SKU. </param>
        /// <param name="maximumStorageCount"> Maximum number of storage devices available for this SKU. </param>
        /// <param name="maximumUplinks"> Maximum number of network uplinks available for this SKU. </param>
        /// <param name="networkDevices"> List of network device properties / role for the Network Rack. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkRackSkuData"/> instance for mocking. </returns>
        public static NetworkRackSkuData NetworkRackSkuData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, NetworkRackRoleName roleName = default, int? maximumServerCount = null, int? maximumStorageCount = null, int? maximumUplinks = null, IEnumerable<NetworkDeviceRoleProperties> networkDevices = null, ProvisioningState? provisioningState = null)
        {
            networkDevices ??= new List<NetworkDeviceRoleProperties>();

            return new NetworkRackSkuData(id, name, resourceType, systemData, roleName, maximumServerCount, maximumStorageCount, maximumUplinks, networkDevices?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of NetworkRackData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="networkRackSku"> Network Rack SKU name. </param>
        /// <param name="networkFabricId"> Network Fabric ARM resource id. </param>
        /// <param name="networkDevices"> List of network device ARM resource ids. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.NetworkRackData"/> instance for mocking. </returns>
        public static NetworkRackData NetworkRackData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, string networkRackSku = null, string networkFabricId = null, IEnumerable<string> networkDevices = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            networkDevices ??= new List<string>();

            return new NetworkRackData(id, name, resourceType, systemData, tags, location, annotation, networkRackSku, networkFabricId, networkDevices?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of RoutePolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="annotation"> Switch configuration description. </param>
        /// <param name="statements"> Route Policy statements. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the resource. </param>
        /// <returns> A new <see cref="ManagedNetworkFabric.RoutePolicyData"/> instance for mocking. </returns>
        public static RoutePolicyData RoutePolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string annotation = null, IEnumerable<RoutePolicyStatementProperties> statements = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            statements ??= new List<RoutePolicyStatementProperties>();

            return new RoutePolicyData(id, name, resourceType, systemData, tags, location, annotation, statements?.ToList(), provisioningState);
        }
    }
}
