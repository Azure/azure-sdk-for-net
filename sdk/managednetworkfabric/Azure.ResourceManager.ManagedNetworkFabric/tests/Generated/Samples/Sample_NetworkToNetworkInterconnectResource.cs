// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkToNetworkInterconnectResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NetworkToNetworkInterconnectsGetMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkToNetworkInterconnects_Get.json
            // this example is just showing the usage of "NetworkToNetworkInterconnects_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkToNetworkInterconnectResource created on azure
            // for more information of creating NetworkToNetworkInterconnectResource, please refer to the document of NetworkToNetworkInterconnectResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkFabricName = "example-nf";
            string networkToNetworkInterconnectName = "example-nni";
            ResourceIdentifier networkToNetworkInterconnectResourceId = NetworkToNetworkInterconnectResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkFabricName, networkToNetworkInterconnectName);
            NetworkToNetworkInterconnectResource networkToNetworkInterconnect = client.GetNetworkToNetworkInterconnectResource(networkToNetworkInterconnectResourceId);

            // invoke the operation
            NetworkToNetworkInterconnectResource result = await networkToNetworkInterconnect.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkToNetworkInterconnectData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NetworkToNetworkInterconnectsDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkToNetworkInterconnects_Delete.json
            // this example is just showing the usage of "NetworkToNetworkInterconnects_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkToNetworkInterconnectResource created on azure
            // for more information of creating NetworkToNetworkInterconnectResource, please refer to the document of NetworkToNetworkInterconnectResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkFabricName = "example-nf";
            string networkToNetworkInterconnectName = "example-nni";
            ResourceIdentifier networkToNetworkInterconnectResourceId = NetworkToNetworkInterconnectResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkFabricName, networkToNetworkInterconnectName);
            NetworkToNetworkInterconnectResource networkToNetworkInterconnect = client.GetNetworkToNetworkInterconnectResource(networkToNetworkInterconnectResourceId);

            // invoke the operation
            await networkToNetworkInterconnect.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NetworkToNetworkInterconnectsUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkToNetworkInterconnects_Update.json
            // this example is just showing the usage of "NetworkToNetworkInterconnects_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkToNetworkInterconnectResource created on azure
            // for more information of creating NetworkToNetworkInterconnectResource, please refer to the document of NetworkToNetworkInterconnectResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkFabricName = "example-nf";
            string networkToNetworkInterconnectName = "example-nni";
            ResourceIdentifier networkToNetworkInterconnectResourceId = NetworkToNetworkInterconnectResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkFabricName, networkToNetworkInterconnectName);
            NetworkToNetworkInterconnectResource networkToNetworkInterconnect = client.GetNetworkToNetworkInterconnectResource(networkToNetworkInterconnectResourceId);

            // invoke the operation
            NetworkToNetworkInterconnectPatch patch = new NetworkToNetworkInterconnectPatch
            {
                Properties = new NetworkToNetworkInterconnectPatchProperties
                {
                    Layer2Configuration = new Layer2ConfigurationPatch
                    {
                        Mtu = 1500,
                        Interfaces = { new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkDevices/example-networkDevice/networkInterfaces/example-networkInterface") },
                    },
                    OptionBLayer3Configuration = new OptionBLayer3ConfigurationPatchProperties
                    {
                        PrimaryIPv4Prefix = "20.0.0.12/29",
                        PrimaryIPv6Prefix = "4FFE:FFFF:0:CD30::a8/127",
                        SecondaryIPv4Prefix = "20.0.0.14/29",
                        SecondaryIPv6Prefix = "6FFE:FFFF:0:CD30::ac/127",
                        PeerAsn = 2345L,
                        VlanId = 1235,
                        PeLoopbackIPAddress = { "10.0.0.1" },
                        BmpConfigurationState = BmpConfigurationState.Enabled,
                        PrefixLimits = {new OptionBLayer3PrefixLimitPatchProperties
{
MaximumRoutes = 1,
}},
                    },
                    NpbStaticRouteConfiguration = new NpbStaticRouteConfigurationPatch
                    {
                        BfdConfiguration = new BfdPatchConfiguration
                        {
                            IntervalInMilliSeconds = 300,
                            Multiplier = 10,
                        },
                        IPv4Routes = { new StaticRoutePatchProperties("10.0.0.1/24", new string[] { "10.0.0.1" }) },
                        IPv6Routes = { new StaticRoutePatchProperties("fe80::/64", new string[] { "fe80::1" }) },
                    },
                    StaticRouteConfiguration = new NniStaticRoutePatchConfiguration
                    {
                        BfdConfiguration = new BfdPatchConfiguration
                        {
                            IntervalInMilliSeconds = 300,
                            Multiplier = 10,
                        },
                        IPv4Routes = { new StaticRoutePatchProperties("10.0.0.1", new string[] { "10.0.0.1" }) },
                        IPv6Routes = { new StaticRoutePatchProperties("2fff::/64", new string[] { "3ffe::1" }) },
                    },
                    ImportRoutePolicy = new ImportRoutePolicyInformationPatch
                    {
                        ImportIPv4RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/example-routePolicy"),
                        ImportIPv6RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/example-routePolicy"),
                    },
                    ExportRoutePolicy = new ExportRoutePolicyInformationPatch
                    {
                        ExportIPv4RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/example-routePolicy"),
                        ExportIPv6RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/example-routePolicy"),
                    },
                    EgressAclId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/example-acl"),
                    IngressAclId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/example-acl"),
                    MicroBfdState = MicroBfdState.Enabled,
                },
            };
            ArmOperation<NetworkToNetworkInterconnectResource> lro = await networkToNetworkInterconnect.UpdateAsync(WaitUntil.Completed, patch);
            NetworkToNetworkInterconnectResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkToNetworkInterconnectData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_NetworkToNetworkInterconnectsUpdateAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkToNetworkInterconnects_UpdateAdministrativeState.json
            // this example is just showing the usage of "NetworkToNetworkInterconnects_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkToNetworkInterconnectResource created on azure
            // for more information of creating NetworkToNetworkInterconnectResource, please refer to the document of NetworkToNetworkInterconnectResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkFabricName = "example-nf";
            string networkToNetworkInterconnectName = "example-nni";
            ResourceIdentifier networkToNetworkInterconnectResourceId = NetworkToNetworkInterconnectResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkFabricName, networkToNetworkInterconnectName);
            NetworkToNetworkInterconnectResource networkToNetworkInterconnect = client.GetNetworkToNetworkInterconnectResource(networkToNetworkInterconnectResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkToNetworkInterconnect.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateBfdAdministrativeState_NetworkToNetworkInterconnectsUpdateBfdAdministrativeState()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkToNetworkInterconnects_UpdateBfdAdministrativeState.json
            // this example is just showing the usage of "NetworkToNetworkInterconnects_UpdateBfdAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkToNetworkInterconnectResource created on azure
            // for more information of creating NetworkToNetworkInterconnectResource, please refer to the document of NetworkToNetworkInterconnectResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkFabricName = "example-nf";
            string networkToNetworkInterconnectName = "example-nni";
            ResourceIdentifier networkToNetworkInterconnectResourceId = NetworkToNetworkInterconnectResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkFabricName, networkToNetworkInterconnectName);
            NetworkToNetworkInterconnectResource networkToNetworkInterconnect = client.GetNetworkToNetworkInterconnectResource(networkToNetworkInterconnectResourceId);

            // invoke the operation
            NniBfdAdministrativeStateContent content = new NniBfdAdministrativeStateContent
            {
                RouteType = RouteType.Static,
                AdministrativeState = new BfdAdministrativeState("Enable"),
            };
            ArmOperation<NniBfdAdministrativeStateResult> lro = await networkToNetworkInterconnect.UpdateBfdAdministrativeStateAsync(WaitUntil.Completed, content);
            NniBfdAdministrativeStateResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
