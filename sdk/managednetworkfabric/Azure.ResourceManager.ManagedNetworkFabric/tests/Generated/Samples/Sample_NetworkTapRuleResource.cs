// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkTapRuleResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NetworkTapRulesGetMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTapRules_Get.json
            // this example is just showing the usage of "NetworkTapRules_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapRuleResource created on azure
            // for more information of creating NetworkTapRuleResource, please refer to the document of NetworkTapRuleResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapRuleName = "example-tapRule";
            ResourceIdentifier networkTapRuleResourceId = NetworkTapRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapRuleName);
            NetworkTapRuleResource networkTapRule = client.GetNetworkTapRuleResource(networkTapRuleResourceId);

            // invoke the operation
            NetworkTapRuleResource result = await networkTapRule.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkTapRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NetworkTapRulesDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTapRules_Delete.json
            // this example is just showing the usage of "NetworkTapRules_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapRuleResource created on azure
            // for more information of creating NetworkTapRuleResource, please refer to the document of NetworkTapRuleResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapRuleName = "example-tapRule";
            ResourceIdentifier networkTapRuleResourceId = NetworkTapRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapRuleName);
            NetworkTapRuleResource networkTapRule = client.GetNetworkTapRuleResource(networkTapRuleResourceId);

            // invoke the operation
            await networkTapRule.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NetworkTapRulesUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTapRules_Update.json
            // this example is just showing the usage of "NetworkTapRules_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapRuleResource created on azure
            // for more information of creating NetworkTapRuleResource, please refer to the document of NetworkTapRuleResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapRuleName = "example-tapRule";
            ResourceIdentifier networkTapRuleResourceId = NetworkTapRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapRuleName);
            NetworkTapRuleResource networkTapRule = client.GetNetworkTapRuleResource(networkTapRuleResourceId);

            // invoke the operation
            NetworkTapRulePatch patch = new NetworkTapRulePatch
            {
                Tags =
{
["keyId"] = "keyValue"
},
                Properties = new NetworkTapRulePatchProperties
                {
                    Annotation = "annotation",
                    ConfigurationType = NetworkFabricConfigurationType.File,
                    TapRulesUri = new Uri("https://microsoft.com/amdsdx"),
                    GlobalNetworkTapRuleActions = new GlobalNetworkTapRuleActionPatchProperties
                    {
                        EnableCount = NetworkFabricBooleanValue.True,
                        Truncate = "truncate-name",
                    },
                    MatchConfigurations = {new NetworkTapRuleMatchConfigurationPatch
{
MatchConfigurationName = "config1",
SequenceNumber = 10L,
IPAddressType = NetworkFabricIPAddressType.IPv4,
MatchConditions = {new NetworkTapRuleMatchConditionPatch
{
ProtocolTypes = {"TCP"},
VlanMatchCondition = new VlanMatchConditionPatch
{
Vlans = {"20-30"},
InnerVlans = {"30"},
VlanGroupNames = {"example-vlanGroup"},
},
IPCondition = new IPMatchConditionPatch
{
SourceDestinationType = SourceDestinationType.SourceIP,
PrefixType = IPMatchConditionPrefixType.Prefix,
IPPrefixValues = {"10.20.20.20/12"},
IPGroupNames = {"example-ipGroup"},
},
EncapsulationType = NetworkTapEncapsulationType.None,
PortCondition = new PortConditionPatch
{
PortType = NetworkFabricPortType.SourcePort,
Layer4Protocol = Layer4Protocol.Tcp,
Ports = {"100"},
PortGroupNames = {"example-portGroup1"},
},
}},
Actions = {new NetworkTapRuleActionPatch
{
TapRuleActionType = TapRuleActionType.Drop,
Truncate = "100",
IsTimestampEnabled = NetworkFabricBooleanValue.True,
DestinationId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourcegroups/example-rg/providers/Microsoft.ManagedNetworkFabric/neighborGroups/example-neighborGroup"),
MatchConfigurationName = "match1",
}},
}},
                    DynamicMatchConfigurations = {new CommonDynamicMatchConfigurationPatch
{
IPGroups = {new IPGroupPatchProperties
{
Name = "example-ipGroup",
IPAddressType = NetworkFabricIPAddressType.IPv4,
IPPrefixes = {"10.20.3.1/20"},
}},
VlanGroups = {new VlanGroupPatchProperties
{
Name = "example-vlanGroup",
Vlans = {"20-30"},
}},
PortGroups = {new PortGroupPatchProperties
{
Name = "example-portGroup",
Ports = {"100-200"},
}},
}},
                },
            };
            ArmOperation<NetworkTapRuleResource> lro = await networkTapRule.UpdateAsync(WaitUntil.Completed, patch);
            NetworkTapRuleResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkTapRuleData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Resync_NetworkTapRulesResyncMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTapRules_Resync.json
            // this example is just showing the usage of "NetworkTapRules_Resync" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapRuleResource created on azure
            // for more information of creating NetworkTapRuleResource, please refer to the document of NetworkTapRuleResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapRuleName = "example-tapRule";
            ResourceIdentifier networkTapRuleResourceId = NetworkTapRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapRuleName);
            NetworkTapRuleResource networkTapRule = client.GetNetworkTapRuleResource(networkTapRuleResourceId);

            // invoke the operation
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkTapRule.ResyncAsync(WaitUntil.Completed);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_NetworkTapRulesUpdateAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTapRules_UpdateAdministrativeState.json
            // this example is just showing the usage of "NetworkTapRules_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapRuleResource created on azure
            // for more information of creating NetworkTapRuleResource, please refer to the document of NetworkTapRuleResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapRuleName = "example-tapRule";
            ResourceIdentifier networkTapRuleResourceId = NetworkTapRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapRuleName);
            NetworkTapRuleResource networkTapRule = client.GetNetworkTapRuleResource(networkTapRuleResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkTapRule.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ValidateConfiguration_NetworkTapRulesValidateConfigurationMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTapRules_ValidateConfiguration.json
            // this example is just showing the usage of "NetworkTapRules_ValidateConfiguration" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapRuleResource created on azure
            // for more information of creating NetworkTapRuleResource, please refer to the document of NetworkTapRuleResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapRuleName = "example-tapRule";
            ResourceIdentifier networkTapRuleResourceId = NetworkTapRuleResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapRuleName);
            NetworkTapRuleResource networkTapRule = client.GetNetworkTapRuleResource(networkTapRuleResourceId);

            // invoke the operation
            ArmOperation<ValidateConfigurationResult> lro = await networkTapRule.ValidateConfigurationAsync(WaitUntil.Completed);
            ValidateConfigurationResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
