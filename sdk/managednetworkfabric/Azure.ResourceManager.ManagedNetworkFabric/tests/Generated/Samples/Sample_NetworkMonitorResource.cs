// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkMonitorResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NetworkMonitorsGetMaximumSet()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkMonitors_Get.json
            // this example is just showing the usage of "NetworkMonitors_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkMonitorResource created on azure
            // for more information of creating NetworkMonitorResource, please refer to the document of NetworkMonitorResource
            string subscriptionId = "1234ABCD-0A1B-1234-5678-123456ABCDEF";
            string resourceGroupName = "example-rg";
            string networkMonitorName = "example-monitor";
            ResourceIdentifier networkMonitorResourceId = NetworkMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkMonitorName);
            NetworkMonitorResource networkMonitor = client.GetNetworkMonitorResource(networkMonitorResourceId);

            // invoke the operation
            NetworkMonitorResource result = await networkMonitor.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkMonitorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NetworkMonitorsDeleteMaximumSet()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkMonitors_Delete.json
            // this example is just showing the usage of "NetworkMonitors_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkMonitorResource created on azure
            // for more information of creating NetworkMonitorResource, please refer to the document of NetworkMonitorResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "rgmanagednetworkfabric";
            string networkMonitorName = "example-monitor";
            ResourceIdentifier networkMonitorResourceId = NetworkMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkMonitorName);
            NetworkMonitorResource networkMonitor = client.GetNetworkMonitorResource(networkMonitorResourceId);

            // invoke the operation
            await networkMonitor.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NetworkMonitorsUpdate()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkMonitors_Update.json
            // this example is just showing the usage of "NetworkMonitors_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkMonitorResource created on azure
            // for more information of creating NetworkMonitorResource, please refer to the document of NetworkMonitorResource
            string subscriptionId = "1234ABCD-0A1B-1234-5678-123456ABCDEF";
            string resourceGroupName = "example-rg";
            string networkMonitorName = "example-monitor";
            ResourceIdentifier networkMonitorResourceId = NetworkMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkMonitorName);
            NetworkMonitorResource networkMonitor = client.GetNetworkMonitorResource(networkMonitorResourceId);

            // invoke the operation
            NetworkMonitorPatch patch = new NetworkMonitorPatch
            {
                Tags =
{
["key"] = "value"
},
                NetworkMonitorPatchBmpConfiguration = new BmpConfigurationPatchProperties
                {
                    StationConfigurationState = StationConfigurationState.Enabled,
                    ScopeResourceId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabric"),
                    StationName = "name",
                    StationIP = "10.0.0.1",
                    StationPort = 64685,
                    StationConnectionMode = StationConnectionMode.Active,
                    StationConnectionProperties = new StationConnectionPatchProperties
                    {
                        KeepaliveIdleTime = 49,
                        ProbeInterval = 3558,
                        ProbeCount = 43,
                    },
                    StationNetwork = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/example-l3domain/internalNetworks/example-internalnetwork"),
                    MonitoredNetworks = { new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/example-l3domain") },
                    ExportPolicy = BmpExportPolicy.PrePolicy,
                    MonitoredAddressFamilies = { BmpMonitoredAddressFamily.IPv4Unicast },
                },
            };
            ArmOperation<NetworkMonitorResource> lro = await networkMonitor.UpdateAsync(WaitUntil.Completed, patch);
            NetworkMonitorResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkMonitorData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_NetworkMonitorsUpdateAdministrativeState()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkMonitors_UpdateAdministrativeState.json
            // this example is just showing the usage of "NetworkMonitors_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkMonitorResource created on azure
            // for more information of creating NetworkMonitorResource, please refer to the document of NetworkMonitorResource
            string subscriptionId = "1234ABCD-0A1B-1234-5678-123456ABCDEF";
            string resourceGroupName = "example-rg";
            string networkMonitorName = "example-monitor";
            ResourceIdentifier networkMonitorResourceId = NetworkMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkMonitorName);
            NetworkMonitorResource networkMonitor = client.GetNetworkMonitorResource(networkMonitorResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<DeviceUpdateCommonPostActionResult> lro = await networkMonitor.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            DeviceUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
