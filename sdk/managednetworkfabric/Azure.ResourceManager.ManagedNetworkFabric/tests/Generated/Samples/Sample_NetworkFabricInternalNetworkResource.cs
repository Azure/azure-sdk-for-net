// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkFabricInternalNetworkResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_InternalNetworksGetMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/InternalNetworks_Get.json
            // this example is just showing the usage of "InternalNetworks_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricInternalNetworkResource created on azure
            // for more information of creating NetworkFabricInternalNetworkResource, please refer to the document of NetworkFabricInternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-l3isd";
            string internalNetworkName = "example-internalnetwork";
            ResourceIdentifier networkFabricInternalNetworkResourceId = NetworkFabricInternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, internalNetworkName);
            NetworkFabricInternalNetworkResource networkFabricInternalNetwork = client.GetNetworkFabricInternalNetworkResource(networkFabricInternalNetworkResourceId);

            // invoke the operation
            NetworkFabricInternalNetworkResource result = await networkFabricInternalNetwork.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkFabricInternalNetworkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_InternalNetworksDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/InternalNetworks_Delete.json
            // this example is just showing the usage of "InternalNetworks_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricInternalNetworkResource created on azure
            // for more information of creating NetworkFabricInternalNetworkResource, please refer to the document of NetworkFabricInternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-l3isd";
            string internalNetworkName = "example-internalnetwork";
            ResourceIdentifier networkFabricInternalNetworkResourceId = NetworkFabricInternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, internalNetworkName);
            NetworkFabricInternalNetworkResource networkFabricInternalNetwork = client.GetNetworkFabricInternalNetworkResource(networkFabricInternalNetworkResourceId);

            // invoke the operation
            await networkFabricInternalNetwork.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_InternalNetworksUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/InternalNetworks_Update.json
            // this example is just showing the usage of "InternalNetworks_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricInternalNetworkResource created on azure
            // for more information of creating NetworkFabricInternalNetworkResource, please refer to the document of NetworkFabricInternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-l3isd";
            string internalNetworkName = "example-internalnetwork";
            ResourceIdentifier networkFabricInternalNetworkResourceId = NetworkFabricInternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, internalNetworkName);
            NetworkFabricInternalNetworkResource networkFabricInternalNetwork = client.GetNetworkFabricInternalNetworkResource(networkFabricInternalNetworkResourceId);

            // invoke the operation
            NetworkFabricInternalNetworkPatch patch = new NetworkFabricInternalNetworkPatch
            {
                Properties = new InternalNetworkPatchProperties
                {
                    Annotation = "annotation",
                    Mtu = 1500,
                    ConnectedIPv4Subnets = {new ConnectedSubnetPatch("10.0.0.0/24")
{
Annotation = "annotation",
}},
                    ConnectedIPv6Subnets = {new ConnectedSubnetPatch("10.0.0.0/24")
{
Annotation = "annotation",
}},
                    ImportRoutePolicy = new ImportRoutePolicy
                    {
                        ImportIPv4RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                        ImportIPv6RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                    },
                    ExportRoutePolicy = new ExportRoutePolicy
                    {
                        ExportIPv4RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                        ExportIPv6RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                    },
                    IngressAclId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/example-acl"),
                    EgressAclId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/example-acl"),
                    IsMonitoringEnabled = IsMonitoringEnabled.True,
                    BgpConfiguration = new BgpPatchConfiguration
                    {
                        Annotation = "annotation",
                        BfdConfiguration = new BfdPatchConfiguration
                        {
                            IntervalInMilliSeconds = 300,
                            Multiplier = 10,
                        },
                        DefaultRouteOriginate = NetworkFabricBooleanValue.True,
                        AllowAS = 10,
                        AllowASOverride = AllowASOverride.Enable,
                        PeerAsn = 61234L,
                        IPv4ListenRangePrefixes = { "10.1.0.0/25" },
                        IPv6ListenRangePrefixes = { "2fff::/66" },
                        IPv4NeighborAddress = {new NeighborAddressPatch
{
Address = "10.1.0.0",
}},
                        IPv6NeighborAddress = {new NeighborAddressPatch
{
Address = "10.1.0.0",
}},
                        BmpConfiguration = new InternalNetworkBmpPatchProperties
                        {
                            NeighborIPExclusions = { "10.0.0.10" },
                            BmpConfigurationState = BmpConfigurationState.Enabled,
                        },
                        V4OverV6BgpSession = V4OverV6BgpSessionState.Enabled,
                        V6OverV4BgpSession = V6OverV4BgpSessionState.Enabled,
                    },
                    StaticRouteConfiguration = new StaticRoutePatchConfiguration
                    {
                        BfdConfiguration = new BfdPatchConfiguration
                        {
                            IntervalInMilliSeconds = 300,
                            Multiplier = 10,
                        },
                        IPv4Routes = { new StaticRoutePatchProperties("jffgck", new string[] { "10.0.0.1" }) },
                        IPv6Routes = { new StaticRoutePatchProperties("jffgck", new string[] { "10.0.0.1" }) },
                    },
                    NativeIPv4PrefixLimits = {new PrefixLimitPatchProperties
{
MaximumRoutes = 24,
Threshold = 6,
IdleTimeExpiry = 20,
}},
                    NativeIPv6PrefixLimits = {new PrefixLimitPatchProperties
{
MaximumRoutes = 24,
Threshold = 6,
IdleTimeExpiry = 20,
}},
                },
            };
            ArmOperation<NetworkFabricInternalNetworkResource> lro = await networkFabricInternalNetwork.UpdateAsync(WaitUntil.Completed, patch);
            NetworkFabricInternalNetworkResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkFabricInternalNetworkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_InternalNetworksUpdateAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/InternalNetworks_UpdateAdministrativeState.json
            // this example is just showing the usage of "InternalNetworks_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricInternalNetworkResource created on azure
            // for more information of creating NetworkFabricInternalNetworkResource, please refer to the document of NetworkFabricInternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-l3isd";
            string internalNetworkName = "example-internalnetwork";
            ResourceIdentifier networkFabricInternalNetworkResourceId = NetworkFabricInternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, internalNetworkName);
            NetworkFabricInternalNetworkResource networkFabricInternalNetwork = client.GetNetworkFabricInternalNetworkResource(networkFabricInternalNetworkResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkFabricInternalNetwork.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateBfdAdministrativeState_InternalNetworksUpdateBfdAdministrativeState()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/InternalNetworks_UpdateBfdAdministrativeState.json
            // this example is just showing the usage of "InternalNetworks_UpdateBfdAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricInternalNetworkResource created on azure
            // for more information of creating NetworkFabricInternalNetworkResource, please refer to the document of NetworkFabricInternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-l3isd";
            string internalNetworkName = "example-internalnetwork";
            ResourceIdentifier networkFabricInternalNetworkResourceId = NetworkFabricInternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, internalNetworkName);
            NetworkFabricInternalNetworkResource networkFabricInternalNetwork = client.GetNetworkFabricInternalNetworkResource(networkFabricInternalNetworkResourceId);

            // invoke the operation
            InternalNetworkBfdAdministrativeStateContent content = new InternalNetworkBfdAdministrativeStateContent
            {
                RouteType = InternalNetworkRouteType.Static,
                NeighborAddress = "10.10.1.10",
                AdministrativeState = new BfdAdministrativeState("Enable"),
            };
            ArmOperation<InternalNetworkBfdAdministrativeStateResult> lro = await networkFabricInternalNetwork.UpdateBfdAdministrativeStateAsync(WaitUntil.Completed, content);
            InternalNetworkBfdAdministrativeStateResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateBgpAdministrativeState_InternalNetworksUpdateBgpAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/InternalNetworks_UpdateBgpAdministrativeState.json
            // this example is just showing the usage of "InternalNetworks_UpdateBgpAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricInternalNetworkResource created on azure
            // for more information of creating NetworkFabricInternalNetworkResource, please refer to the document of NetworkFabricInternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-l3isd";
            string internalNetworkName = "example-internalnetwork";
            ResourceIdentifier networkFabricInternalNetworkResourceId = NetworkFabricInternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, internalNetworkName);
            NetworkFabricInternalNetworkResource networkFabricInternalNetwork = client.GetNetworkFabricInternalNetworkResource(networkFabricInternalNetworkResourceId);

            // invoke the operation
            InternalNetworkBgpAdministrativeStateContent content = new InternalNetworkBgpAdministrativeStateContent
            {
                NeighborAddress = "10.10.10.10",
                AdministrativeState = new BgpAdministrativeState("Enable"),
            };
            ArmOperation<InternalNetworkBgpAdministrativeStateResult> lro = await networkFabricInternalNetwork.UpdateBgpAdministrativeStateAsync(WaitUntil.Completed, content);
            InternalNetworkBgpAdministrativeStateResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
