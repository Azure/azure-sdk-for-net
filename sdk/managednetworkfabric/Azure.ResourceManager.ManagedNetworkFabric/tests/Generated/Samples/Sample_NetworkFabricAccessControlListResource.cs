// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkFabricAccessControlListResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AccessControlListsGetMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/AccessControlLists_Get.json
            // this example is just showing the usage of "AccessControlLists_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricAccessControlListResource created on azure
            // for more information of creating NetworkFabricAccessControlListResource, please refer to the document of NetworkFabricAccessControlListResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string accessControlListName = "example-acl";
            ResourceIdentifier networkFabricAccessControlListResourceId = NetworkFabricAccessControlListResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accessControlListName);
            NetworkFabricAccessControlListResource networkFabricAccessControlList = client.GetNetworkFabricAccessControlListResource(networkFabricAccessControlListResourceId);

            // invoke the operation
            NetworkFabricAccessControlListResource result = await networkFabricAccessControlList.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkFabricAccessControlListData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_AccessControlListsDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/AccessControlLists_Delete.json
            // this example is just showing the usage of "AccessControlLists_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricAccessControlListResource created on azure
            // for more information of creating NetworkFabricAccessControlListResource, please refer to the document of NetworkFabricAccessControlListResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string accessControlListName = "example-acl";
            ResourceIdentifier networkFabricAccessControlListResourceId = NetworkFabricAccessControlListResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accessControlListName);
            NetworkFabricAccessControlListResource networkFabricAccessControlList = client.GetNetworkFabricAccessControlListResource(networkFabricAccessControlListResourceId);

            // invoke the operation
            await networkFabricAccessControlList.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AccessControlListsUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/AccessControlLists_Update.json
            // this example is just showing the usage of "AccessControlLists_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricAccessControlListResource created on azure
            // for more information of creating NetworkFabricAccessControlListResource, please refer to the document of NetworkFabricAccessControlListResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string accessControlListName = "example-acl";
            ResourceIdentifier networkFabricAccessControlListResourceId = NetworkFabricAccessControlListResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accessControlListName);
            NetworkFabricAccessControlListResource networkFabricAccessControlList = client.GetNetworkFabricAccessControlListResource(networkFabricAccessControlListResourceId);

            // invoke the operation
            NetworkFabricAccessControlListPatch patch = new NetworkFabricAccessControlListPatch
            {
                Tags =
{
["KeyId"] = "KeyValue"
},
                Properties = new AccessControlListPatchProperties
                {
                    ConfigurationType = NetworkFabricConfigurationType.File,
                    AclsUri = new Uri("https://microsoft.com/a"),
                    DefaultAction = CommunityActionType.Permit,
                    MatchConfigurations = {new AccessControlListMatchConfigurationPatch
{
MatchConfigurationName = "example-match",
SequenceNumber = 123L,
IPAddressType = NetworkFabricIPAddressType.IPv4,
MatchConditions = {new AccessControlListMatchConditionPatch
{
ProtocolTypes = {"TCP"},
VlanMatchCondition = new VlanMatchConditionPatch
{
Vlans = {"20-30"},
InnerVlans = {"30"},
VlanGroupNames = {"example-vlanGroup"},
},
IPCondition = new IPMatchConditionPatch
{
SourceDestinationType = SourceDestinationType.SourceIP,
PrefixType = IPMatchConditionPrefixType.Prefix,
IPPrefixValues = {"10.20.20.20/12"},
IPGroupNames = {"example-ipGroup"},
},
EtherTypes = {"0x1"},
Fragments = {"0xff00-0xffff"},
IPLengths = {"4094-9214"},
TtlValues = {"23"},
DscpMarkings = {"32"},
PortCondition = new AccessControlListPortConditionPatch
{
PortType = NetworkFabricPortType.SourcePort,
Layer4Protocol = Layer4Protocol.Tcp,
Ports = {"1-20"},
PortGroupNames = {"example-portGroup"},
Flags = {"established"},
},
ProtocolNeighbors = {"example-neighbor"},
IcmpTypes = {"echo"},
}},
Actions = {new AccessControlListActionPatch
{
AclActionType = AclActionType.Count,
CounterName = "example-counter",
RemarkComment = "example-remark",
PoliceRateConfiguration = new PoliceRateConfigurationProperties
{
BitRate = new BitRate
{
Rate = 15L,
Unit = BitRateUnit.Bps,
},
BurstSize = new BurstSize
{
Size = 2L,
Unit = BurstSizeUnit.Bytes,
},
},
}},
}},
                    DynamicMatchConfigurations = {new CommonDynamicMatchConfigurationPatch
{
IPGroups = {new IPGroupPatchProperties
{
Name = "example-ipGroup",
IPAddressType = NetworkFabricIPAddressType.IPv4,
IPPrefixes = {"10.20.3.1/20"},
}},
VlanGroups = {new VlanGroupPatchProperties
{
Name = "example-vlanGroup",
Vlans = {"20-30"},
}},
PortGroups = {new PortGroupPatchProperties
{
Name = "example-portGroup",
Ports = {"100-200"},
}},
}},
                    AclType = AclType.Cp,
                    DeviceRole = DeviceRole.CE,
                    GlobalAccessControlListActionsEnableCount = NetworkFabricBooleanValue.True,
                    Annotation = "annotation",
                },
            };
            ArmOperation<NetworkFabricAccessControlListResource> lro = await networkFabricAccessControlList.UpdateAsync(WaitUntil.Completed, patch);
            NetworkFabricAccessControlListResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkFabricAccessControlListData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Resync_AccessControlListsResyncMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/AccessControlLists_Resync.json
            // this example is just showing the usage of "AccessControlLists_Resync" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricAccessControlListResource created on azure
            // for more information of creating NetworkFabricAccessControlListResource, please refer to the document of NetworkFabricAccessControlListResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string accessControlListName = "example-acl";
            ResourceIdentifier networkFabricAccessControlListResourceId = NetworkFabricAccessControlListResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accessControlListName);
            NetworkFabricAccessControlListResource networkFabricAccessControlList = client.GetNetworkFabricAccessControlListResource(networkFabricAccessControlListResourceId);

            // invoke the operation
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkFabricAccessControlList.ResyncAsync(WaitUntil.Completed);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_AccessControlListsUpdateAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/AccessControlLists_UpdateAdministrativeState.json
            // this example is just showing the usage of "AccessControlLists_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricAccessControlListResource created on azure
            // for more information of creating NetworkFabricAccessControlListResource, please refer to the document of NetworkFabricAccessControlListResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string accessControlListName = "example-acl";
            ResourceIdentifier networkFabricAccessControlListResourceId = NetworkFabricAccessControlListResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accessControlListName);
            NetworkFabricAccessControlListResource networkFabricAccessControlList = client.GetNetworkFabricAccessControlListResource(networkFabricAccessControlListResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkFabricAccessControlList.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ValidateConfiguration_AccessControlListsValidateConfigurationMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/AccessControlLists_ValidateConfiguration.json
            // this example is just showing the usage of "AccessControlLists_ValidateConfiguration" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricAccessControlListResource created on azure
            // for more information of creating NetworkFabricAccessControlListResource, please refer to the document of NetworkFabricAccessControlListResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string accessControlListName = "example-acl";
            ResourceIdentifier networkFabricAccessControlListResourceId = NetworkFabricAccessControlListResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, accessControlListName);
            NetworkFabricAccessControlListResource networkFabricAccessControlList = client.GetNetworkFabricAccessControlListResource(networkFabricAccessControlListResourceId);

            // invoke the operation
            ArmOperation<ValidateConfigurationResult> lro = await networkFabricAccessControlList.ValidateConfigurationAsync(WaitUntil.Completed);
            ValidateConfigurationResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
