// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkFabricExternalNetworkResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_ExternalNetworksGetMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/ExternalNetworks_Get.json
            // this example is just showing the usage of "ExternalNetworks_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricExternalNetworkResource created on azure
            // for more information of creating NetworkFabricExternalNetworkResource, please refer to the document of NetworkFabricExternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-externalnetwork";
            string externalNetworkName = "example-ext";
            ResourceIdentifier networkFabricExternalNetworkResourceId = NetworkFabricExternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, externalNetworkName);
            NetworkFabricExternalNetworkResource networkFabricExternalNetwork = client.GetNetworkFabricExternalNetworkResource(networkFabricExternalNetworkResourceId);

            // invoke the operation
            NetworkFabricExternalNetworkResource result = await networkFabricExternalNetwork.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkFabricExternalNetworkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_ExternalNetworksDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/ExternalNetworks_Delete.json
            // this example is just showing the usage of "ExternalNetworks_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricExternalNetworkResource created on azure
            // for more information of creating NetworkFabricExternalNetworkResource, please refer to the document of NetworkFabricExternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-externalnetwork";
            string externalNetworkName = "example-ext";
            ResourceIdentifier networkFabricExternalNetworkResourceId = NetworkFabricExternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, externalNetworkName);
            NetworkFabricExternalNetworkResource networkFabricExternalNetwork = client.GetNetworkFabricExternalNetworkResource(networkFabricExternalNetworkResourceId);

            // invoke the operation
            await networkFabricExternalNetwork.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ExternalNetworksUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/ExternalNetworks_Update.json
            // this example is just showing the usage of "ExternalNetworks_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricExternalNetworkResource created on azure
            // for more information of creating NetworkFabricExternalNetworkResource, please refer to the document of NetworkFabricExternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-externalnetwork";
            string externalNetworkName = "example-ext";
            ResourceIdentifier networkFabricExternalNetworkResourceId = NetworkFabricExternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, externalNetworkName);
            NetworkFabricExternalNetworkResource networkFabricExternalNetwork = client.GetNetworkFabricExternalNetworkResource(networkFabricExternalNetworkResourceId);

            // invoke the operation
            NetworkFabricExternalNetworkPatch patch = new NetworkFabricExternalNetworkPatch
            {
                Properties = new ExternalNetworkPatchProperties
                {
                    Annotation = "annotation1",
                    NetworkToNetworkInterconnectId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabric/networkToNetworkInterconnects/example-nni"),
                    ImportRoutePolicy = new ImportRoutePolicyPatch
                    {
                        ImportIPv4RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                        ImportIPv6RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                    },
                    ExportRoutePolicy = new ExportRoutePolicyPatch
                    {
                        ExportIPv4RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                        ExportIPv6RoutePolicyId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName"),
                    },
                    PeeringOption = PeeringOption.OptionA,
                    OptionBProperties = new L3OptionBPatchProperties
                    {
                        ImportRouteTargets = { "65046:10039" },
                        ExportRouteTargets = { "65046:10039" },
                        RouteTargets = new RouteTargetPatchInformation
                        {
                            ImportIPv4RouteTargets = { "65046:10050" },
                            ImportIPv6RouteTargets = { "65046:10050" },
                            ExportIPv4RouteTargets = { "65046:10050" },
                            ExportIPv6RouteTargets = { "65046:10050" },
                        },
                    },
                    OptionAProperties = new ExternalNetworkPatchOptionAProperties
                    {
                        PrimaryIPv4Prefix = "10.1.1.0/30",
                        PrimaryIPv6Prefix = "3FFE:FFFF:0:CD30::a0/126",
                        SecondaryIPv4Prefix = "10.1.1.4/30",
                        SecondaryIPv6Prefix = "3FFE:FFFF:0:CD30::a4/126",
                        Mtu = 1500,
                        VlanId = 1001,
                        PeerAsn = 65047L,
                        BfdConfiguration = new BfdPatchConfiguration
                        {
                            IntervalInMilliSeconds = 300,
                            Multiplier = 10,
                        },
                        IngressAclId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/example-acl"),
                        EgressAclId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/accessControlLists/example-acl"),
                        BmpConfigurationState = BmpConfigurationState.Enabled,
                        V4OverV6BgpSession = V4OverV6BgpSessionState.Enabled,
                        V6OverV4BgpSession = V6OverV4BgpSessionState.Enabled,
                        NativeIPv4PrefixLimits = {new PrefixLimitPatchProperties
{
MaximumRoutes = 13,
Threshold = 24,
IdleTimeExpiry = 8,
}},
                        NativeIPv6PrefixLimits = {new PrefixLimitPatchProperties
{
MaximumRoutes = 13,
Threshold = 24,
IdleTimeExpiry = 8,
}},
                    },
                    StaticRouteConfiguration = new ExternalNetworkStaticRoutePatchConfiguration
                    {
                        BfdConfiguration = new BfdPatchConfiguration
                        {
                            IntervalInMilliSeconds = 300,
                            Multiplier = 10,
                        },
                        IPv4Routes = { new StaticRoutePatchProperties("10.0.0.1/14", new string[] { "10.0.0.1" }) },
                        IPv6Routes = { new StaticRoutePatchProperties("2fff::/64", new string[] { "3ffe::1" }) },
                    },
                },
            };
            ArmOperation<NetworkFabricExternalNetworkResource> lro = await networkFabricExternalNetwork.UpdateAsync(WaitUntil.Completed, patch);
            NetworkFabricExternalNetworkResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkFabricExternalNetworkData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_ExternalNetworksUpdateAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/ExternalNetworks_UpdateAdministrativeState.json
            // this example is just showing the usage of "ExternalNetworks_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricExternalNetworkResource created on azure
            // for more information of creating NetworkFabricExternalNetworkResource, please refer to the document of NetworkFabricExternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-externalnetwork";
            string externalNetworkName = "example-ext";
            ResourceIdentifier networkFabricExternalNetworkResourceId = NetworkFabricExternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, externalNetworkName);
            NetworkFabricExternalNetworkResource networkFabricExternalNetwork = client.GetNetworkFabricExternalNetworkResource(networkFabricExternalNetworkResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkFabricExternalNetwork.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateBfdAdministrativeState_ExternalNetworksUpdateBfdAdministrativeState()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/ExternalNetworks_UpdateBfdAdministrativeState.json
            // this example is just showing the usage of "ExternalNetworks_UpdateBfdAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkFabricExternalNetworkResource created on azure
            // for more information of creating NetworkFabricExternalNetworkResource, please refer to the document of NetworkFabricExternalNetworkResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string l3IsolationDomainName = "example-externalnetwork";
            string externalNetworkName = "example-ext";
            ResourceIdentifier networkFabricExternalNetworkResourceId = NetworkFabricExternalNetworkResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, l3IsolationDomainName, externalNetworkName);
            NetworkFabricExternalNetworkResource networkFabricExternalNetwork = client.GetNetworkFabricExternalNetworkResource(networkFabricExternalNetworkResourceId);

            // invoke the operation
            ExternalNetworkBfdAdministrativeStateContent content = new ExternalNetworkBfdAdministrativeStateContent
            {
                RouteType = ExternalNetworkRouteType.Static,
                AdministrativeState = new BfdAdministrativeState("Enable"),
            };
            ArmOperation<ExternalNetworkBfdAdministrativeStateResult> lro = await networkFabricExternalNetwork.UpdateBfdAdministrativeStateAsync(WaitUntil.Completed, content);
            ExternalNetworkBfdAdministrativeStateResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
