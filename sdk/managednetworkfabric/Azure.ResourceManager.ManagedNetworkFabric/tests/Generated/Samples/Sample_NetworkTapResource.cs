// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ManagedNetworkFabric.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ManagedNetworkFabric.Samples
{
    public partial class Sample_NetworkTapResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_NetworkTapsGetMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTaps_Get.json
            // this example is just showing the usage of "NetworkTaps_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapResource created on azure
            // for more information of creating NetworkTapResource, please refer to the document of NetworkTapResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapName = "example-networkTap";
            ResourceIdentifier networkTapResourceId = NetworkTapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapName);
            NetworkTapResource networkTap = client.GetNetworkTapResource(networkTapResourceId);

            // invoke the operation
            NetworkTapResource result = await networkTap.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkTapData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_NetworkTapsDeleteMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTaps_Delete.json
            // this example is just showing the usage of "NetworkTaps_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapResource created on azure
            // for more information of creating NetworkTapResource, please refer to the document of NetworkTapResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapName = "example-networkTap";
            ResourceIdentifier networkTapResourceId = NetworkTapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapName);
            NetworkTapResource networkTap = client.GetNetworkTapResource(networkTapResourceId);

            // invoke the operation
            await networkTap.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_NetworkTapsUpdateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTaps_Update.json
            // this example is just showing the usage of "NetworkTaps_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapResource created on azure
            // for more information of creating NetworkTapResource, please refer to the document of NetworkTapResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapName = "example-networkTap";
            ResourceIdentifier networkTapResourceId = NetworkTapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapName);
            NetworkTapResource networkTap = client.GetNetworkTapResource(networkTapResourceId);

            // invoke the operation
            NetworkTapPatch patch = new NetworkTapPatch
            {
                Tags =
{
["keyId"] = "keyValue"
},
                Properties = new NetworkTapPatchProperties
                {
                    Annotation = "annotation1",
                    PollingType = NetworkTapPollingType.Pull,
                    Destinations = {new DestinationPatchProperties
{
Name = "example-destinaionName",
DestinationType = NetworkTapDestinationType.IsolationDomain,
DestinationId = new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourcegroups/example-rg/providers/Microsoft.ManagedNetworkFabric/l3IsloationDomains/example-l3Domain/internalNetworks/example-internalNetwork"),
IsolationDomainProperties = new IsolationDomainPatchProperties
{
Encapsulation = IsolationDomainEncapsulationType.None,
NeighborGroupIds = {new ResourceIdentifier("/subscriptions/1234ABCD-0A1B-1234-5678-123456ABCDEF/resourcegroups/example-rg/providers/Microsoft.ManagedNetworkFabric/neighborGroups/example-neighborGroup")},
},
DestinationTapRuleId = new ResourceIdentifier("/subscriptions/xxxx-xxxx-xxxx-xxxx/resourcegroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkTapRules/example-destinationTapRule"),
}},
                },
            };
            ArmOperation<NetworkTapResource> lro = await networkTap.UpdateAsync(WaitUntil.Completed, patch);
            NetworkTapResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            NetworkTapData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Resync_NetworkTapsResyncMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTaps_Resync.json
            // this example is just showing the usage of "NetworkTaps_Resync" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapResource created on azure
            // for more information of creating NetworkTapResource, please refer to the document of NetworkTapResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapName = "example-networkTap";
            ResourceIdentifier networkTapResourceId = NetworkTapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapName);
            NetworkTapResource networkTap = client.GetNetworkTapResource(networkTapResourceId);

            // invoke the operation
            ArmOperation<StateUpdateCommonPostActionResult> lro = await networkTap.ResyncAsync(WaitUntil.Completed);
            StateUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task UpdateAdministrativeState_NetworkTapsUpdateAdministrativeStateMaximumSetGen()
        {
            // Generated from example definition: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2024-06-15-preview/examples/NetworkTaps_UpdateAdministrativeState.json
            // this example is just showing the usage of "NetworkTaps_UpdateAdministrativeState" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this NetworkTapResource created on azure
            // for more information of creating NetworkTapResource, please refer to the document of NetworkTapResource
            string subscriptionId = "0000ABCD-0A0B-0000-0000-000000ABCDEF";
            string resourceGroupName = "example-rg";
            string networkTapName = "example-networkTap";
            ResourceIdentifier networkTapResourceId = NetworkTapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, networkTapName);
            NetworkTapResource networkTap = client.GetNetworkTapResource(networkTapResourceId);

            // invoke the operation
            UpdateAdministrativeStateContent content = new UpdateAdministrativeStateContent
            {
                ResourceIds = { "" },
                State = AdministrativeEnableState.Enable,
            };
            ArmOperation<DeviceUpdateCommonPostActionResult> lro = await networkTap.UpdateAdministrativeStateAsync(WaitUntil.Completed, content);
            DeviceUpdateCommonPostActionResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
