// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary>
    /// A class which represents the RestApis for a given azure namespace.
    /// </summary>
    public partial class RestApiContainer : ResourceContainer
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly string _nameSpace;

        /// <summary> Represents the REST operations. </summary>
        private RestOperations _restClient;

        /// <summary> Initializes a new instance of the <see cref="RestApiContainer"/> class for mocking. </summary>
        protected RestApiContainer()
        {
        }

        /// <summary> Initializes a new instance of RestApiContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        /// <param name="nameSpace"> The namespace for the rest apis. </param>
        internal RestApiContainer(ClientContext parent, string nameSpace) : base(parent.ClientOptions, parent.Credential, parent.BaseUri, parent.Pipeline)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _nameSpace = nameSpace;
            _restClient = new RestOperations(_nameSpace, ClientOptions.ApiVersions.GetApiVersionForNamespace(nameSpace), _clientDiagnostics, Pipeline, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        /// <summary> Gets a list of operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RestApi" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<RestApi> GetAll(CancellationToken cancellationToken = default)
        {
            Page<RestApi> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RestApiContainer.GetAll");
                scope.Start();
                try
                {
                    var response = _restClient.List(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Gets a list of operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RestApi" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<RestApi> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<RestApi>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("RestApiContainer.GetAll");
                scope.Start();
                try
                {
                    var response = await _restClient.ListAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }
    }
}
