// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager
{
    /// <inheritdoc/>
    public class ArmOperation : Operation
{
        private readonly OperationInternal? _operation;

        /// <summary> Initializes a new instance of ArmOperation for mocking. </summary>
        protected ArmOperation()
        {
        }

        internal ArmOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, OperationFinalStateVia finalStateVia, bool skipApiVersionOverride = false, string? apiVersionOverrideValue = null)
        {
            var nextLinkOperation = NextLinkOperationImplementation.Create(pipeline, request.Method, request.Uri.ToUri(), response, finalStateVia, skipApiVersionOverride, apiVersionOverrideValue);
            _operation = new OperationInternal(nextLinkOperation, clientDiagnostics, response);
        }

        /// <summary> Create an instance of the <see cref="ArmOperation"/> class from rehydration. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="rehydrationToken"> The id of the ArmOperation. </param>
        public ArmOperation(ArmClient client, RehydrationToken? rehydrationToken)
        {
            Argument.AssertNotNull(rehydrationToken, nameof(rehydrationToken));
            Argument.AssertNotNull(client, nameof(client));

            var nextLinkOperation = NextLinkOperationImplementation.Create(client.Pipeline, rehydrationToken);
            // TODO: Do we need more specific OptionsNamespace, ProviderNamespace and OperationTypeName and possibly from id?
            var clientDiagnostics = new ClientDiagnostics("Azure.ResourceManager", "Microsoft.Resources", client.Diagnostics);
            _operation = new OperationInternal(nextLinkOperation, clientDiagnostics, null, rehydrationToken: rehydrationToken);
        }

#pragma warning disable CA1822
        /// <inheritdoc />
        public override string Id => throw new NotSupportedException();
#pragma warning restore CA1822

        /// <inheritdoc />
        public override bool HasCompleted => _operation!.HasCompleted;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation!.RawResponse;

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation!.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation!.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override Response WaitForCompletionResponse(CancellationToken cancellationToken = default) => _operation!.WaitForCompletionResponse(cancellationToken);

        /// <inheritdoc />
        public override Response WaitForCompletionResponse(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation!.WaitForCompletionResponse(pollingInterval, cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> WaitForCompletionResponseAsync(CancellationToken cancellationToken = default) => _operation!.WaitForCompletionResponseAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> WaitForCompletionResponseAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation!.WaitForCompletionResponseAsync(pollingInterval, cancellationToken);
    }
}
