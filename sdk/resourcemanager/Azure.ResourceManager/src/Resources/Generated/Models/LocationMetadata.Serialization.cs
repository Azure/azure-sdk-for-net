// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class LocationMetadata
    {
        internal static LocationMetadata DeserializeLocationMetadata(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<RegionType> regionType = default;
            Optional<RegionCategory> regionCategory = default;
            Optional<string> geography = default;
            Optional<string> geographyGroup = default;
            Optional<double> longitude = default;
            Optional<double> latitude = default;
            Optional<string> physicalLocation = default;
            Optional<IReadOnlyList<PairedRegion>> pairedRegion = default;
            Optional<string> homeLocation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("regionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    regionType = new RegionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("regionCategory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    regionCategory = new RegionCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("geography"u8))
                {
                    geography = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("geographyGroup"u8))
                {
                    geographyGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("longitude"u8))
                {
                    ReadLongitude(property, ref longitude);
                    continue;
                }
                if (property.NameEquals("latitude"u8))
                {
                    ReadLatitude(property, ref latitude);
                    continue;
                }
                if (property.NameEquals("physicalLocation"u8))
                {
                    physicalLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pairedRegion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PairedRegion> array = new List<PairedRegion>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PairedRegion.DeserializePairedRegion(item));
                    }
                    pairedRegion = array;
                    continue;
                }
                if (property.NameEquals("homeLocation"u8))
                {
                    homeLocation = property.Value.GetString();
                    continue;
                }
            }
            return new LocationMetadata(Optional.ToNullable(regionType), Optional.ToNullable(regionCategory), geography.Value, geographyGroup.Value, Optional.ToNullable(longitude), Optional.ToNullable(latitude), physicalLocation.Value, Optional.ToList(pairedRegion), homeLocation.Value);
        }
    }
}
