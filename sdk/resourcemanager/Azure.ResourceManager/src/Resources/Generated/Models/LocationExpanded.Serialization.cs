// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Resources.Models
{
    public partial class LocationExpanded
    {
        internal static LocationExpanded DeserializeLocationExpanded(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> id = default;
            Core.Optional<string> subscriptionId = default;
            Core.Optional<string> name = default;
            Core.Optional<LocationType> type = default;
            Core.Optional<string> displayName = default;
            Core.Optional<string> regionalDisplayName = default;
            Core.Optional<LocationMetadata> metadata = default;
            Core.Optional<IReadOnlyList<AvailabilityZoneMappings>> availabilityZoneMappings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subscriptionId"u8))
                {
                    subscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = property.Value.GetString().ToLocationType();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("regionalDisplayName"u8))
                {
                    regionalDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    metadata = LocationMetadata.DeserializeLocationMetadata(property.Value);
                    continue;
                }
                if (property.NameEquals("availabilityZoneMappings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AvailabilityZoneMappings> array = new List<AvailabilityZoneMappings>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.AvailabilityZoneMappings.DeserializeAvailabilityZoneMappings(item));
                    }
                    availabilityZoneMappings = array;
                    continue;
                }
            }
            return new LocationExpanded(id.Value, subscriptionId.Value, name.Value, Core.Optional.ToNullable(type), displayName.Value, regionalDisplayName.Value, metadata.Value, Core.Optional.ToList(availabilityZoneMappings));
        }
    }
}
