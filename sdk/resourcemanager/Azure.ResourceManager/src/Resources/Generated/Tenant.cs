// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A Class representing a Tenant along with the instance operations that can be performed on it. </summary>
    public partial class Tenant : ArmResource
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly TenantsRestOperations _tenantsRestClient;
        private readonly ProvidersRestOperations _providersRestClient;
        private readonly TenantData _data;

        /// <summary> Initializes a new instance of the <see cref="Tenant"/> class for mocking. </summary>
        protected Tenant()
        {
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Resources/tenants";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual TenantData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// RequestPath: /providers
        /// ContextualPath: /
        /// OperationId: Providers_ListAtTenantScope
        /// <summary> Gets all resource providers for the tenant. </summary>
        /// <param name="top"> The number of results to return. If null is passed returns all providers. </param>
        /// <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProviderData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProviderData> GetTenantProvidersAsync(int? top = null, string expand = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ProviderData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Tenant.GetTenantProviders");
                scope.Start();
                try
                {
                    var response = await _providersRestClient.ListAtTenantScopeAsync(top, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProviderData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Tenant.GetTenantProviders");
                scope.Start();
                try
                {
                    var response = await _providersRestClient.ListAtTenantScopeNextPageAsync(nextLink, top, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers
        /// ContextualPath: /
        /// OperationId: Providers_ListAtTenantScope
        /// <summary> Gets all resource providers for the tenant. </summary>
        /// <param name="top"> The number of results to return. If null is passed returns all providers. </param>
        /// <param name="expand"> The properties to include in the results. For example, use &amp;$expand=metadata in the query string to retrieve resource provider metadata. To include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProviderData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProviderData> GetTenantProviders(int? top = null, string expand = null, CancellationToken cancellationToken = default)
        {
            Page<ProviderData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Tenant.GetTenantProviders");
                scope.Start();
                try
                {
                    var response = _providersRestClient.ListAtTenantScope(top, expand, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProviderData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Tenant.GetTenantProviders");
                scope.Start();
                try
                {
                    var response = _providersRestClient.ListAtTenantScopeNextPage(nextLink, top, expand, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/{resourceProviderNamespace}
        /// ContextualPath: /
        /// OperationId: Providers_GetAtTenantScope
        /// <summary> Gets the specified resource provider at the tenant level. </summary>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        public async virtual Task<Response<ProviderData>> GetTenantProviderAsync(string resourceProviderNamespace, string expand = null, CancellationToken cancellationToken = default)
        {
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }

            using var scope = _clientDiagnostics.CreateScope("Tenant.GetTenantProvider");
            scope.Start();
            try
            {
                var response = await _providersRestClient.GetAtTenantScopeAsync(resourceProviderNamespace, expand, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/{resourceProviderNamespace}
        /// ContextualPath: /
        /// OperationId: Providers_GetAtTenantScope
        /// <summary> Gets the specified resource provider at the tenant level. </summary>
        /// <param name="resourceProviderNamespace"> The namespace of the resource provider. </param>
        /// <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceProviderNamespace"/> is null. </exception>
        public virtual Response<ProviderData> GetTenantProvider(string resourceProviderNamespace, string expand = null, CancellationToken cancellationToken = default)
        {
            if (resourceProviderNamespace == null)
            {
                throw new ArgumentNullException(nameof(resourceProviderNamespace));
            }

            using var scope = _clientDiagnostics.CreateScope("Tenant.GetTenantProvider");
            scope.Start();
            try
            {
                var response = _providersRestClient.GetAtTenantScope(resourceProviderNamespace, expand, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region GenericResource

        /// <summary> Gets a collection of GenericResources in the Tenant. </summary>
        /// <returns> An object representing collection of GenericResources and their operations over a Tenant. </returns>
        public virtual GenericResourceCollection GetGenericResources()
        {
            return new GenericResourceCollection(this);
        }
        #endregion

        #region TenantPolicyDefinition

        /// <summary> Gets a collection of TenantPolicyDefinitions in the Tenant. </summary>
        /// <returns> An object representing collection of TenantPolicyDefinitions and their operations over a Tenant. </returns>
        public virtual TenantPolicyDefinitionCollection GetTenantPolicyDefinitions()
        {
            return new TenantPolicyDefinitionCollection(this);
        }
        #endregion

        #region TenantPolicySetDefinition

        /// <summary> Gets a collection of TenantPolicySetDefinitions in the Tenant. </summary>
        /// <returns> An object representing collection of TenantPolicySetDefinitions and their operations over a Tenant. </returns>
        public virtual TenantPolicySetDefinitionCollection GetTenantPolicySetDefinitions()
        {
            return new TenantPolicySetDefinitionCollection(this);
        }
        #endregion

        #region DataPolicyManifest

        /// <summary> Gets a collection of DataPolicyManifests in the Tenant. </summary>
        /// <returns> An object representing collection of DataPolicyManifests and their operations over a Tenant. </returns>
        public virtual DataPolicyManifestCollection GetDataPolicyManifests()
        {
            return new DataPolicyManifestCollection(this);
        }
        #endregion

        #region ResourceLink

        /// <summary> Gets a collection of ResourceLinks in the Tenant. </summary>
        /// <returns> An object representing collection of ResourceLinks and their operations over a Tenant. </returns>
        public virtual ResourceLinkCollection GetResourceLinks()
        {
            return new ResourceLinkCollection(this);
        }
        #endregion

        #region Subscription

        /// <summary> Gets a collection of Subscriptions in the Tenant. </summary>
        /// <returns> An object representing collection of Subscriptions and their operations over a Tenant. </returns>
        public virtual SubscriptionCollection GetSubscriptions()
        {
            return new SubscriptionCollection(this);
        }
        #endregion
    }
}
