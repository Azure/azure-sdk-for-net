// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Core;
using System.Threading;
using System.Threading.Tasks;

namespace Proto.Compute
{
    /// <summary> A class representing the operations that can be performed over a specific VirtualMachineScaleSetRollingUpgrade. </summary>
    public partial class RollingUpgradeOperations : SingletonOperationsBase<ResourceGroupResourceIdentifier, RollingUpgrade>
    {
        /// <summary> Initializes a new instance of VirtualMachineScaleSetRollingUpgradeOperations for mocking. </summary>
        protected RollingUpgradeOperations()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualMachineOperations"/> class.
        /// </summary>
        /// <param name="operation"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        protected internal RollingUpgradeOperations(OperationsBase operation)
            : base(operation)
        {
        }

        public static readonly ResourceType ResourceType = "Microsoft.Compute/virtualMachineScaleSets";

        protected override ResourceType ValidResourceType => ResourceType.RootResourceType;

        private VirtualMachineScaleSetRollingUpgradesOperations Operations => new ComputeManagementClient(
            BaseUri,
            ParentId.SubscriptionId,
            Credential,
            ClientOptions.Convert<ComputeManagementClientOptions>()).VirtualMachineScaleSetRollingUpgrades;

        // Note: Singleton may have different operations such as GET/PUT/PATCH/POST or a combination of these
        // Individual methods will be generated as they are declared
        public Response<RollingUpgrade> Get(CancellationToken cancellationToken = default)
        {
            var response = Operations.GetLatest(ParentId.ResourceGroupName, ParentId.Name, cancellationToken);
            return Response.FromValue(new RollingUpgrade(Parent, new RollingUpgradeStatusInfo(response.Value)), response.GetRawResponse());
        }

        public async Task<Response<RollingUpgrade>> GetAsync(CancellationToken cancellationToken = default)
        {
            var response = await Operations.GetLatestAsync(ParentId.ResourceGroupName, ParentId.Name, cancellationToken).ConfigureAwait(false);
            return Response.FromValue(new RollingUpgrade(Parent, new RollingUpgradeStatusInfo(response.Value)), response.GetRawResponse());
        }

        // Note: Singleton may have different operations such as GET/PUT/PATCH/POST or a combination of these
        // Individual methods will be generated as they are declared
        public Response Cancel(CancellationToken cancellationToken = default)
        {
            return Operations
                .StartCancel(ParentId.ResourceGroupName, ParentId.Name, cancellationToken)
                .WaitForCompletionAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        public async Task<Response> CancelAsync(CancellationToken cancellationToken = default)
        {
            return (await Operations
                .StartCancel(ParentId.ResourceGroupName, ParentId.Name, cancellationToken)
                .WaitForCompletionAsync(cancellationToken));
        }
    }
}
