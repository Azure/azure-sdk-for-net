// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Core.Adapters;

namespace Proto.Compute
{
    /// <summary> Describes a Virtual Machine Extension Image. </summary>
    public partial class VirtualMachineExtensionImageData : TrackedResource<SubscriptionResourceIdentifier, Azure.ResourceManager.Compute.Models.VirtualMachineExtensionImage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualMachineData"/> class.
        /// </summary>
        /// <param name="vm"> The virtual machine to initialize. </param>
        public VirtualMachineExtensionImageData(Azure.ResourceManager.Compute.Models.VirtualMachineExtensionImage vmeExtensionImage) 
            : base(vmeExtensionImage.Id, vmeExtensionImage.Location, vmeExtensionImage)
        {
        }

        /// <summary> The operating system this extension supports. </summary>
        public string OperatingSystem { get; set; }
        /// <summary> The type of role (IaaS or PaaS) this extension supports. </summary>
        public string ComputeRole { get; set; }
        /// <summary> The schema defined by publisher, where extension consumers should provide settings in a matching schema. </summary>
        public string HandlerSchema { get; set; }
        /// <summary> Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS. </summary>
        public bool? VmScaleSetEnabled { get; set; }
        /// <summary> Whether the handler can support multiple extensions. </summary>
        public bool? SupportsMultipleExtensions { get; set; }
    }
}