// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The current status of the invoice. </summary>
    public readonly partial struct InvoiceStatus : IEquatable<InvoiceStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="InvoiceStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InvoiceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DueValue = "Due";
        private const string OverDueValue = "OverDue";
        private const string PaidValue = "Paid";
        private const string VoidValue = "Void";

        /// <summary> Due. </summary>
        public static InvoiceStatus Due { get; } = new InvoiceStatus(DueValue);
        /// <summary> OverDue. </summary>
        public static InvoiceStatus OverDue { get; } = new InvoiceStatus(OverDueValue);
        /// <summary> Paid. </summary>
        public static InvoiceStatus Paid { get; } = new InvoiceStatus(PaidValue);
        /// <summary> Void. </summary>
        public static InvoiceStatus Void { get; } = new InvoiceStatus(VoidValue);
        /// <summary> Determines if two <see cref="InvoiceStatus"/> values are the same. </summary>
        public static bool operator ==(InvoiceStatus left, InvoiceStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InvoiceStatus"/> values are not the same. </summary>
        public static bool operator !=(InvoiceStatus left, InvoiceStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InvoiceStatus"/>. </summary>
        public static implicit operator InvoiceStatus(string value) => new InvoiceStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InvoiceStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InvoiceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
