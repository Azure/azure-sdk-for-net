// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingRoleAssignment : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(PrincipalId))
            {
                writer.WritePropertyName("principalId");
                writer.WriteStringValue(PrincipalId);
            }
            if (Optional.IsDefined(PrincipalTenantId))
            {
                writer.WritePropertyName("principalTenantId");
                writer.WriteStringValue(PrincipalTenantId);
            }
            if (Optional.IsDefined(RoleDefinitionId))
            {
                writer.WritePropertyName("roleDefinitionId");
                writer.WriteStringValue(RoleDefinitionId);
            }
            if (Optional.IsDefined(UserAuthenticationType))
            {
                writer.WritePropertyName("userAuthenticationType");
                writer.WriteStringValue(UserAuthenticationType);
            }
            if (Optional.IsDefined(UserEmailAddress))
            {
                writer.WritePropertyName("userEmailAddress");
                writer.WriteStringValue(UserEmailAddress);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static BillingRoleAssignment DeserializeBillingRoleAssignment(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> createdOn = default;
            Optional<string> createdByPrincipalTenantId = default;
            Optional<string> createdByPrincipalId = default;
            Optional<string> createdByUserEmailAddress = default;
            Optional<string> principalId = default;
            Optional<string> principalTenantId = default;
            Optional<string> roleDefinitionId = default;
            Optional<string> scope = default;
            Optional<string> userAuthenticationType = default;
            Optional<string> userEmailAddress = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("createdOn"))
                        {
                            createdOn = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdByPrincipalTenantId"))
                        {
                            createdByPrincipalTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdByPrincipalId"))
                        {
                            createdByPrincipalId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdByUserEmailAddress"))
                        {
                            createdByUserEmailAddress = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("principalId"))
                        {
                            principalId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("principalTenantId"))
                        {
                            principalTenantId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("roleDefinitionId"))
                        {
                            roleDefinitionId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scope"))
                        {
                            scope = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("userAuthenticationType"))
                        {
                            userAuthenticationType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("userEmailAddress"))
                        {
                            userEmailAddress = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BillingRoleAssignment(id.Value, name.Value, type.Value, createdOn.Value, createdByPrincipalTenantId.Value, createdByPrincipalId.Value, createdByUserEmailAddress.Value, principalId.Value, principalTenantId.Value, roleDefinitionId.Value, scope.Value, userAuthenticationType.Value, userEmailAddress.Value);
        }
    }
}
