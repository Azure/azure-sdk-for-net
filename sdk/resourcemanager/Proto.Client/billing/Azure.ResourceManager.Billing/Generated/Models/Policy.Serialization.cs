// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class Policy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(MarketplacePurchases))
            {
                writer.WritePropertyName("marketplacePurchases");
                writer.WriteStringValue(MarketplacePurchases.Value.ToString());
            }
            if (Optional.IsDefined(ReservationPurchases))
            {
                writer.WritePropertyName("reservationPurchases");
                writer.WriteStringValue(ReservationPurchases.Value.ToString());
            }
            if (Optional.IsDefined(ViewCharges))
            {
                writer.WritePropertyName("viewCharges");
                writer.WriteStringValue(ViewCharges.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Policy DeserializePolicy(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<MarketplacePurchasesPolicy> marketplacePurchases = default;
            Optional<ReservationPurchasesPolicy> reservationPurchases = default;
            Optional<ViewChargesPolicy> viewCharges = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("marketplacePurchases"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            marketplacePurchases = new MarketplacePurchasesPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("reservationPurchases"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            reservationPurchases = new ReservationPurchasesPolicy(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("viewCharges"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            viewCharges = new ViewChargesPolicy(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Policy(id.Value, name.Value, type.Value, Optional.ToNullable(marketplacePurchases), Optional.ToNullable(reservationPurchases), Optional.ToNullable(viewCharges));
        }
    }
}
