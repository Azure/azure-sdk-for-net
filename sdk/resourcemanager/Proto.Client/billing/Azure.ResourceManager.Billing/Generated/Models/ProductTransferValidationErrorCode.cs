// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> Error code of the transfer validation response. </summary>
    public readonly partial struct ProductTransferValidationErrorCode : IEquatable<ProductTransferValidationErrorCode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ProductTransferValidationErrorCode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProductTransferValidationErrorCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidSourceValue = "InvalidSource";
        private const string ProductNotActiveValue = "ProductNotActive";
        private const string InsufficientPermissionOnSourceValue = "InsufficientPermissionOnSource";
        private const string InsufficientPermissionOnDestinationValue = "InsufficientPermissionOnDestination";
        private const string DestinationBillingProfilePastDueValue = "DestinationBillingProfilePastDue";
        private const string ProductTypeNotSupportedValue = "ProductTypeNotSupported";
        private const string CrossBillingAccountNotAllowedValue = "CrossBillingAccountNotAllowed";
        private const string NotAvailableForDestinationMarketValue = "NotAvailableForDestinationMarket";
        private const string OneTimePurchaseProductTransferNotAllowedValue = "OneTimePurchaseProductTransferNotAllowed";

        /// <summary> InvalidSource. </summary>
        public static ProductTransferValidationErrorCode InvalidSource { get; } = new ProductTransferValidationErrorCode(InvalidSourceValue);
        /// <summary> ProductNotActive. </summary>
        public static ProductTransferValidationErrorCode ProductNotActive { get; } = new ProductTransferValidationErrorCode(ProductNotActiveValue);
        /// <summary> InsufficientPermissionOnSource. </summary>
        public static ProductTransferValidationErrorCode InsufficientPermissionOnSource { get; } = new ProductTransferValidationErrorCode(InsufficientPermissionOnSourceValue);
        /// <summary> InsufficientPermissionOnDestination. </summary>
        public static ProductTransferValidationErrorCode InsufficientPermissionOnDestination { get; } = new ProductTransferValidationErrorCode(InsufficientPermissionOnDestinationValue);
        /// <summary> DestinationBillingProfilePastDue. </summary>
        public static ProductTransferValidationErrorCode DestinationBillingProfilePastDue { get; } = new ProductTransferValidationErrorCode(DestinationBillingProfilePastDueValue);
        /// <summary> ProductTypeNotSupported. </summary>
        public static ProductTransferValidationErrorCode ProductTypeNotSupported { get; } = new ProductTransferValidationErrorCode(ProductTypeNotSupportedValue);
        /// <summary> CrossBillingAccountNotAllowed. </summary>
        public static ProductTransferValidationErrorCode CrossBillingAccountNotAllowed { get; } = new ProductTransferValidationErrorCode(CrossBillingAccountNotAllowedValue);
        /// <summary> NotAvailableForDestinationMarket. </summary>
        public static ProductTransferValidationErrorCode NotAvailableForDestinationMarket { get; } = new ProductTransferValidationErrorCode(NotAvailableForDestinationMarketValue);
        /// <summary> OneTimePurchaseProductTransferNotAllowed. </summary>
        public static ProductTransferValidationErrorCode OneTimePurchaseProductTransferNotAllowed { get; } = new ProductTransferValidationErrorCode(OneTimePurchaseProductTransferNotAllowedValue);
        /// <summary> Determines if two <see cref="ProductTransferValidationErrorCode"/> values are the same. </summary>
        public static bool operator ==(ProductTransferValidationErrorCode left, ProductTransferValidationErrorCode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProductTransferValidationErrorCode"/> values are not the same. </summary>
        public static bool operator !=(ProductTransferValidationErrorCode left, ProductTransferValidationErrorCode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProductTransferValidationErrorCode"/>. </summary>
        public static implicit operator ProductTransferValidationErrorCode(string value) => new ProductTransferValidationErrorCode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProductTransferValidationErrorCode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProductTransferValidationErrorCode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
