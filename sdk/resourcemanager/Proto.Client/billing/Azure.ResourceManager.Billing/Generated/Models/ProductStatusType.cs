// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The current status of the product. </summary>
    public readonly partial struct ProductStatusType : IEquatable<ProductStatusType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ProductStatusType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProductStatusType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string InactiveValue = "Inactive";
        private const string PastDueValue = "PastDue";
        private const string ExpiringValue = "Expiring";
        private const string ExpiredValue = "Expired";
        private const string DisabledValue = "Disabled";
        private const string CancelledValue = "Cancelled";
        private const string AutoRenewValue = "AutoRenew";

        /// <summary> Active. </summary>
        public static ProductStatusType Active { get; } = new ProductStatusType(ActiveValue);
        /// <summary> Inactive. </summary>
        public static ProductStatusType Inactive { get; } = new ProductStatusType(InactiveValue);
        /// <summary> PastDue. </summary>
        public static ProductStatusType PastDue { get; } = new ProductStatusType(PastDueValue);
        /// <summary> Expiring. </summary>
        public static ProductStatusType Expiring { get; } = new ProductStatusType(ExpiringValue);
        /// <summary> Expired. </summary>
        public static ProductStatusType Expired { get; } = new ProductStatusType(ExpiredValue);
        /// <summary> Disabled. </summary>
        public static ProductStatusType Disabled { get; } = new ProductStatusType(DisabledValue);
        /// <summary> Cancelled. </summary>
        public static ProductStatusType Cancelled { get; } = new ProductStatusType(CancelledValue);
        /// <summary> AutoRenew. </summary>
        public static ProductStatusType AutoRenew { get; } = new ProductStatusType(AutoRenewValue);
        /// <summary> Determines if two <see cref="ProductStatusType"/> values are the same. </summary>
        public static bool operator ==(ProductStatusType left, ProductStatusType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProductStatusType"/> values are not the same. </summary>
        public static bool operator !=(ProductStatusType left, ProductStatusType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProductStatusType"/>. </summary>
        public static implicit operator ProductStatusType(string value) => new ProductStatusType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProductStatusType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProductStatusType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
