// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class Invoice : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Invoice DeserializeInvoice(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<DateTimeOffset> dueDate = default;
            Optional<DateTimeOffset> invoiceDate = default;
            Optional<InvoiceStatus> status = default;
            Optional<Amount> amountDue = default;
            Optional<Amount> azurePrepaymentApplied = default;
            Optional<Amount> billedAmount = default;
            Optional<Amount> creditAmount = default;
            Optional<Amount> freeAzureCreditApplied = default;
            Optional<Amount> subTotal = default;
            Optional<Amount> taxAmount = default;
            Optional<Amount> totalAmount = default;
            Optional<DateTimeOffset> invoicePeriodStartDate = default;
            Optional<DateTimeOffset> invoicePeriodEndDate = default;
            Optional<InvoiceType> invoiceType = default;
            Optional<bool> isMonthlyInvoice = default;
            Optional<string> billingProfileId = default;
            Optional<string> billingProfileDisplayName = default;
            Optional<string> purchaseOrderNumber = default;
            Optional<IReadOnlyList<Document>> documents = default;
            Optional<IReadOnlyList<PaymentProperties>> payments = default;
            Optional<IReadOnlyDictionary<string, RebillDetails>> rebillDetails = default;
            Optional<InvoiceDocumentType> documentType = default;
            Optional<string> billedDocumentId = default;
            Optional<string> creditForDocumentId = default;
            Optional<string> subscriptionId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("dueDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            dueDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("invoiceDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoiceDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = new InvoiceStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("amountDue"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            amountDue = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("azurePrepaymentApplied"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            azurePrepaymentApplied = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("billedAmount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            billedAmount = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("creditAmount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            creditAmount = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("freeAzureCreditApplied"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            freeAzureCreditApplied = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("subTotal"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            subTotal = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("taxAmount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            taxAmount = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("totalAmount"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            totalAmount = Amount.DeserializeAmount(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("invoicePeriodStartDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoicePeriodStartDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("invoicePeriodEndDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoicePeriodEndDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("invoiceType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoiceType = new InvoiceType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("isMonthlyInvoice"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isMonthlyInvoice = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("billingProfileId"))
                        {
                            billingProfileId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingProfileDisplayName"))
                        {
                            billingProfileDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("purchaseOrderNumber"))
                        {
                            purchaseOrderNumber = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("documents"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<Document> array = new List<Document>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Document.DeserializeDocument(item));
                            }
                            documents = array;
                            continue;
                        }
                        if (property0.NameEquals("payments"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<PaymentProperties> array = new List<PaymentProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(PaymentProperties.DeserializePaymentProperties(item));
                            }
                            payments = array;
                            continue;
                        }
                        if (property0.NameEquals("rebillDetails"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, RebillDetails> dictionary = new Dictionary<string, RebillDetails>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, Models.RebillDetails.DeserializeRebillDetails(property1.Value));
                            }
                            rebillDetails = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("documentType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            documentType = new InvoiceDocumentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("billedDocumentId"))
                        {
                            billedDocumentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("creditForDocumentId"))
                        {
                            creditForDocumentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionId"))
                        {
                            subscriptionId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Invoice(id.Value, name.Value, type.Value, Optional.ToNullable(dueDate), Optional.ToNullable(invoiceDate), Optional.ToNullable(status), amountDue.Value, azurePrepaymentApplied.Value, billedAmount.Value, creditAmount.Value, freeAzureCreditApplied.Value, subTotal.Value, taxAmount.Value, totalAmount.Value, Optional.ToNullable(invoicePeriodStartDate), Optional.ToNullable(invoicePeriodEndDate), Optional.ToNullable(invoiceType), Optional.ToNullable(isMonthlyInvoice), billingProfileId.Value, billingProfileDisplayName.Value, purchaseOrderNumber.Value, Optional.ToList(documents), Optional.ToList(payments), Optional.ToDictionary(rebillDetails), Optional.ToNullable(documentType), billedDocumentId.Value, creditForDocumentId.Value, subscriptionId.Value);
        }
    }
}
