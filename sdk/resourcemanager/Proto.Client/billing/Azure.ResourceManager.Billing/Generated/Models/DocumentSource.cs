// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The source of the document. ENF for Brazil and DRS for rest of the world. </summary>
    public readonly partial struct DocumentSource : IEquatable<DocumentSource>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DocumentSource"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DRSValue = "DRS";
        private const string ENFValue = "ENF";

        /// <summary> DRS. </summary>
        public static DocumentSource DRS { get; } = new DocumentSource(DRSValue);
        /// <summary> ENF. </summary>
        public static DocumentSource ENF { get; } = new DocumentSource(ENFValue);
        /// <summary> Determines if two <see cref="DocumentSource"/> values are the same. </summary>
        public static bool operator ==(DocumentSource left, DocumentSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentSource"/> values are not the same. </summary>
        public static bool operator !=(DocumentSource left, DocumentSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentSource"/>. </summary>
        public static implicit operator DocumentSource(string value) => new DocumentSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
