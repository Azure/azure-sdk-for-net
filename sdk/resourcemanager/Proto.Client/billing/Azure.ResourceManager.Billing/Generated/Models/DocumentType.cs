// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The type of the document. </summary>
    public readonly partial struct DocumentType : IEquatable<DocumentType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DocumentType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvoiceValue = "Invoice";
        private const string VoidNoteValue = "VoidNote";
        private const string TaxReceiptValue = "TaxReceipt";
        private const string CreditNoteValue = "CreditNote";

        /// <summary> Invoice. </summary>
        public static DocumentType Invoice { get; } = new DocumentType(InvoiceValue);
        /// <summary> VoidNote. </summary>
        public static DocumentType VoidNote { get; } = new DocumentType(VoidNoteValue);
        /// <summary> TaxReceipt. </summary>
        public static DocumentType TaxReceipt { get; } = new DocumentType(TaxReceiptValue);
        /// <summary> CreditNote. </summary>
        public static DocumentType CreditNote { get; } = new DocumentType(CreditNoteValue);
        /// <summary> Determines if two <see cref="DocumentType"/> values are the same. </summary>
        public static bool operator ==(DocumentType left, DocumentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentType"/> values are not the same. </summary>
        public static bool operator !=(DocumentType left, DocumentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DocumentType"/>. </summary>
        public static implicit operator DocumentType(string value) => new DocumentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
