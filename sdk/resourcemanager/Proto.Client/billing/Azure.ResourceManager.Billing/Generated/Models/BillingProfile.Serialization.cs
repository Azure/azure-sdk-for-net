// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(PoNumber))
            {
                writer.WritePropertyName("poNumber");
                writer.WriteStringValue(PoNumber);
            }
            if (Optional.IsDefined(BillTo))
            {
                writer.WritePropertyName("billTo");
                writer.WriteObjectValue(BillTo);
            }
            if (Optional.IsDefined(InvoiceEmailOptIn))
            {
                writer.WritePropertyName("invoiceEmailOptIn");
                writer.WriteBooleanValue(InvoiceEmailOptIn.Value);
            }
            if (Optional.IsCollectionDefined(EnabledAzurePlans))
            {
                writer.WritePropertyName("enabledAzurePlans");
                writer.WriteStartArray();
                foreach (var item in EnabledAzurePlans)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(InvoiceSections))
            {
                writer.WritePropertyName("invoiceSections");
                writer.WriteObjectValue(InvoiceSections);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static BillingProfile DeserializeBillingProfile(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> displayName = default;
            Optional<string> poNumber = default;
            Optional<BillingRelationshipType> billingRelationshipType = default;
            Optional<AddressDetails> billTo = default;
            Optional<IndirectRelationshipInfo> indirectRelationshipInfo = default;
            Optional<bool> invoiceEmailOptIn = default;
            Optional<int> invoiceDay = default;
            Optional<string> currency = default;
            Optional<IList<AzurePlan>> enabledAzurePlans = default;
            Optional<InvoiceSectionsOnExpand> invoiceSections = default;
            Optional<bool> hasReadAccess = default;
            Optional<string> systemId = default;
            Optional<BillingProfileStatus> status = default;
            Optional<StatusReasonCode> statusReasonCode = default;
            Optional<SpendingLimit> spendingLimit = default;
            Optional<IReadOnlyList<TargetCloud>> targetClouds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("poNumber"))
                        {
                            poNumber = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("billingRelationshipType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            billingRelationshipType = new BillingRelationshipType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("billTo"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            billTo = AddressDetails.DeserializeAddressDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("indirectRelationshipInfo"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            indirectRelationshipInfo = IndirectRelationshipInfo.DeserializeIndirectRelationshipInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("invoiceEmailOptIn"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoiceEmailOptIn = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("invoiceDay"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoiceDay = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("currency"))
                        {
                            currency = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("enabledAzurePlans"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<AzurePlan> array = new List<AzurePlan>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AzurePlan.DeserializeAzurePlan(item));
                            }
                            enabledAzurePlans = array;
                            continue;
                        }
                        if (property0.NameEquals("invoiceSections"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            invoiceSections = InvoiceSectionsOnExpand.DeserializeInvoiceSectionsOnExpand(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("hasReadAccess"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            hasReadAccess = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("systemId"))
                        {
                            systemId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = new BillingProfileStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("statusReasonCode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            statusReasonCode = new StatusReasonCode(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("spendingLimit"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            spendingLimit = new SpendingLimit(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("targetClouds"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<TargetCloud> array = new List<TargetCloud>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new TargetCloud(item.GetString()));
                            }
                            targetClouds = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BillingProfile(id.Value, name.Value, type.Value, displayName.Value, poNumber.Value, Optional.ToNullable(billingRelationshipType), billTo.Value, indirectRelationshipInfo.Value, Optional.ToNullable(invoiceEmailOptIn), Optional.ToNullable(invoiceDay), currency.Value, Optional.ToList(enabledAzurePlans), invoiceSections.Value, Optional.ToNullable(hasReadAccess), systemId.Value, Optional.ToNullable(status), Optional.ToNullable(statusReasonCode), Optional.ToNullable(spendingLimit), Optional.ToList(targetClouds));
        }
    }
}
