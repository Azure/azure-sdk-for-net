// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The type of agreement. </summary>
    public readonly partial struct AgreementType : IEquatable<AgreementType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AgreementType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgreementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftCustomerAgreementValue = "MicrosoftCustomerAgreement";
        private const string EnterpriseAgreementValue = "EnterpriseAgreement";
        private const string MicrosoftOnlineServicesProgramValue = "MicrosoftOnlineServicesProgram";
        private const string MicrosoftPartnerAgreementValue = "MicrosoftPartnerAgreement";

        /// <summary> MicrosoftCustomerAgreement. </summary>
        public static AgreementType MicrosoftCustomerAgreement { get; } = new AgreementType(MicrosoftCustomerAgreementValue);
        /// <summary> EnterpriseAgreement. </summary>
        public static AgreementType EnterpriseAgreement { get; } = new AgreementType(EnterpriseAgreementValue);
        /// <summary> MicrosoftOnlineServicesProgram. </summary>
        public static AgreementType MicrosoftOnlineServicesProgram { get; } = new AgreementType(MicrosoftOnlineServicesProgramValue);
        /// <summary> MicrosoftPartnerAgreement. </summary>
        public static AgreementType MicrosoftPartnerAgreement { get; } = new AgreementType(MicrosoftPartnerAgreementValue);
        /// <summary> Determines if two <see cref="AgreementType"/> values are the same. </summary>
        public static bool operator ==(AgreementType left, AgreementType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgreementType"/> values are not the same. </summary>
        public static bool operator !=(AgreementType left, AgreementType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AgreementType"/>. </summary>
        public static implicit operator AgreementType(string value) => new AgreementType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgreementType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgreementType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
