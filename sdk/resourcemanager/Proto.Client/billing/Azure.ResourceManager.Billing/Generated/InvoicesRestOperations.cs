// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Billing.Models;

namespace Azure.ResourceManager.Billing
{
    internal partial class InvoicesRestOperations
    {
        private string subscriptionId;
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of InvoicesRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID that uniquely identifies an Azure subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public InvoicesRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            endpoint ??= new Uri("https://management.azure.com");

            this.subscriptionId = subscriptionId;
            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListByBillingAccountRequest(string billingAccountName, string periodStartDate, string periodEndDate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/", false);
            uri.AppendPath(billingAccountName, true);
            uri.AppendPath("/invoices", false);
            uri.AppendQuery("api-version", "2020-05-01", true);
            uri.AppendQuery("periodStartDate", periodStartDate, true);
            uri.AppendQuery("periodEndDate", periodEndDate, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public async Task<Response<InvoiceListResult>> ListByBillingAccountAsync(string billingAccountName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingAccountRequest(billingAccountName, periodStartDate, periodEndDate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public Response<InvoiceListResult> ListByBillingAccount(string billingAccountName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingAccountRequest(billingAccountName, periodStartDate, periodEndDate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByBillingProfileRequest(string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/", false);
            uri.AppendPath(billingAccountName, true);
            uri.AppendPath("/billingProfiles/", false);
            uri.AppendPath(billingProfileName, true);
            uri.AppendPath("/invoices", false);
            uri.AppendQuery("api-version", "2020-05-01", true);
            uri.AppendQuery("periodStartDate", periodStartDate, true);
            uri.AppendQuery("periodEndDate", periodEndDate, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/>, <paramref name="billingProfileName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public async Task<Response<InvoiceListResult>> ListByBillingProfileAsync(string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (billingProfileName == null)
            {
                throw new ArgumentNullException(nameof(billingProfileName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingProfileRequest(billingAccountName, billingProfileName, periodStartDate, periodEndDate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/>, <paramref name="billingProfileName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public Response<InvoiceListResult> ListByBillingProfile(string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (billingProfileName == null)
            {
                throw new ArgumentNullException(nameof(billingProfileName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingProfileRequest(billingAccountName, billingProfileName, periodStartDate, periodEndDate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string billingAccountName, string invoiceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/", false);
            uri.AppendPath(billingAccountName, true);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(invoiceName, true);
            uri.AppendQuery("api-version", "2020-05-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/> or <paramref name="invoiceName"/> is null. </exception>
        public async Task<Response<Invoice>> GetAsync(string billingAccountName, string invoiceName, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }

            using var message = CreateGetRequest(billingAccountName, invoiceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/> or <paramref name="invoiceName"/> is null. </exception>
        public Response<Invoice> Get(string billingAccountName, string invoiceName, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }

            using var message = CreateGetRequest(billingAccountName, invoiceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetByIdRequest(string invoiceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/default/invoices/", false);
            uri.AppendPath(invoiceName, true);
            uri.AppendQuery("api-version", "2020-05-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceName"/> is null. </exception>
        public async Task<Response<Invoice>> GetByIdAsync(string invoiceName, CancellationToken cancellationToken = default)
        {
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }

            using var message = CreateGetByIdRequest(invoiceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceName"/> is null. </exception>
        public Response<Invoice> GetById(string invoiceName, CancellationToken cancellationToken = default)
        {
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }

            using var message = CreateGetByIdRequest(invoiceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDownloadInvoiceRequest(string billingAccountName, string invoiceName, string downloadToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/", false);
            uri.AppendPath(billingAccountName, true);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(invoiceName, true);
            uri.AppendPath("/download", false);
            uri.AppendQuery("api-version", "2020-05-01", true);
            uri.AppendQuery("downloadToken", downloadToken, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="downloadToken"> Download token with document source and document ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/>, <paramref name="invoiceName"/>, or <paramref name="downloadToken"/> is null. </exception>
        public async Task<ResponseWithHeaders<InvoicesDownloadInvoiceHeaders>> DownloadInvoiceAsync(string billingAccountName, string invoiceName, string downloadToken, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }
            if (downloadToken == null)
            {
                throw new ArgumentNullException(nameof(downloadToken));
            }

            using var message = CreateDownloadInvoiceRequest(billingAccountName, invoiceName, downloadToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new InvoicesDownloadInvoiceHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="downloadToken"> Download token with document source and document ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/>, <paramref name="invoiceName"/>, or <paramref name="downloadToken"/> is null. </exception>
        public ResponseWithHeaders<InvoicesDownloadInvoiceHeaders> DownloadInvoice(string billingAccountName, string invoiceName, string downloadToken, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }
            if (downloadToken == null)
            {
                throw new ArgumentNullException(nameof(downloadToken));
            }

            using var message = CreateDownloadInvoiceRequest(billingAccountName, invoiceName, downloadToken);
            _pipeline.Send(message, cancellationToken);
            var headers = new InvoicesDownloadInvoiceHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDownloadMultipleBillingProfileInvoicesRequest(string billingAccountName, IEnumerable<string> downloadUrls)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/", false);
            uri.AppendPath(billingAccountName, true);
            uri.AppendPath("/downloadDocuments", false);
            uri.AppendQuery("api-version", "2020-05-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in downloadUrls)
            {
                content.JsonWriter.WriteStringValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="downloadUrls"> An array of download urls for individual documents. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/> or <paramref name="downloadUrls"/> is null. </exception>
        public async Task<ResponseWithHeaders<InvoicesDownloadMultipleBillingProfileInvoicesHeaders>> DownloadMultipleBillingProfileInvoicesAsync(string billingAccountName, IEnumerable<string> downloadUrls, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (downloadUrls == null)
            {
                throw new ArgumentNullException(nameof(downloadUrls));
            }

            using var message = CreateDownloadMultipleBillingProfileInvoicesRequest(billingAccountName, downloadUrls);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new InvoicesDownloadMultipleBillingProfileInvoicesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="downloadUrls"> An array of download urls for individual documents. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/> or <paramref name="downloadUrls"/> is null. </exception>
        public ResponseWithHeaders<InvoicesDownloadMultipleBillingProfileInvoicesHeaders> DownloadMultipleBillingProfileInvoices(string billingAccountName, IEnumerable<string> downloadUrls, CancellationToken cancellationToken = default)
        {
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (downloadUrls == null)
            {
                throw new ArgumentNullException(nameof(downloadUrls));
            }

            using var message = CreateDownloadMultipleBillingProfileInvoicesRequest(billingAccountName, downloadUrls);
            _pipeline.Send(message, cancellationToken);
            var headers = new InvoicesDownloadMultipleBillingProfileInvoicesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByBillingSubscriptionRequest(string periodStartDate, string periodEndDate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/invoices", false);
            uri.AppendQuery("periodStartDate", periodStartDate, true);
            uri.AppendQuery("periodEndDate", periodEndDate, true);
            uri.AppendQuery("api-version", "2020-05-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the invoices for a subscription. </summary>
        /// <param name="periodStartDate"> Invoice period start date. </param>
        /// <param name="periodEndDate"> Invoice period end date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="periodStartDate"/> or <paramref name="periodEndDate"/> is null. </exception>
        public async Task<Response<InvoiceListResult>> ListByBillingSubscriptionAsync(string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingSubscriptionRequest(periodStartDate, periodEndDate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the invoices for a subscription. </summary>
        /// <param name="periodStartDate"> Invoice period start date. </param>
        /// <param name="periodEndDate"> Invoice period end date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="periodStartDate"/> or <paramref name="periodEndDate"/> is null. </exception>
        public Response<InvoiceListResult> ListByBillingSubscription(string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingSubscriptionRequest(periodStartDate, periodEndDate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetBySubscriptionAndInvoiceIdRequest(string invoiceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(invoiceName, true);
            uri.AppendQuery("api-version", "2020-05-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets an invoice by subscription ID and invoice ID. </summary>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceName"/> is null. </exception>
        public async Task<Response<Invoice>> GetBySubscriptionAndInvoiceIdAsync(string invoiceName, CancellationToken cancellationToken = default)
        {
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }

            using var message = CreateGetBySubscriptionAndInvoiceIdRequest(invoiceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets an invoice by subscription ID and invoice ID. </summary>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceName"/> is null. </exception>
        public Response<Invoice> GetBySubscriptionAndInvoiceId(string invoiceName, CancellationToken cancellationToken = default)
        {
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }

            using var message = CreateGetBySubscriptionAndInvoiceIdRequest(invoiceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Invoice value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Invoice.DeserializeInvoice(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDownloadBillingSubscriptionInvoiceRequest(string invoiceName, string downloadToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/invoices/", false);
            uri.AppendPath(invoiceName, true);
            uri.AppendPath("/download", false);
            uri.AppendQuery("api-version", "2020-05-01", true);
            uri.AppendQuery("downloadToken", downloadToken, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a URL to download an invoice. </summary>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="downloadToken"> Download token with document source and document ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceName"/> or <paramref name="downloadToken"/> is null. </exception>
        public async Task<ResponseWithHeaders<InvoicesDownloadBillingSubscriptionInvoiceHeaders>> DownloadBillingSubscriptionInvoiceAsync(string invoiceName, string downloadToken, CancellationToken cancellationToken = default)
        {
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }
            if (downloadToken == null)
            {
                throw new ArgumentNullException(nameof(downloadToken));
            }

            using var message = CreateDownloadBillingSubscriptionInvoiceRequest(invoiceName, downloadToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new InvoicesDownloadBillingSubscriptionInvoiceHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a URL to download an invoice. </summary>
        /// <param name="invoiceName"> The ID that uniquely identifies an invoice. </param>
        /// <param name="downloadToken"> Download token with document source and document ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="invoiceName"/> or <paramref name="downloadToken"/> is null. </exception>
        public ResponseWithHeaders<InvoicesDownloadBillingSubscriptionInvoiceHeaders> DownloadBillingSubscriptionInvoice(string invoiceName, string downloadToken, CancellationToken cancellationToken = default)
        {
            if (invoiceName == null)
            {
                throw new ArgumentNullException(nameof(invoiceName));
            }
            if (downloadToken == null)
            {
                throw new ArgumentNullException(nameof(downloadToken));
            }

            using var message = CreateDownloadBillingSubscriptionInvoiceRequest(invoiceName, downloadToken);
            _pipeline.Send(message, cancellationToken);
            var headers = new InvoicesDownloadBillingSubscriptionInvoiceHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDownloadMultipleBillingSubscriptionInvoicesRequest(IEnumerable<string> downloadUrls)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/downloadDocuments", false);
            uri.AppendQuery("api-version", "2020-05-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteStartArray();
            foreach (var item in downloadUrls)
            {
                content.JsonWriter.WriteStringValue(item);
            }
            content.JsonWriter.WriteEndArray();
            request.Content = content;
            return message;
        }

        /// <summary> Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file. </summary>
        /// <param name="downloadUrls"> An array of download urls for individual documents. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="downloadUrls"/> is null. </exception>
        public async Task<ResponseWithHeaders<InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders>> DownloadMultipleBillingSubscriptionInvoicesAsync(IEnumerable<string> downloadUrls, CancellationToken cancellationToken = default)
        {
            if (downloadUrls == null)
            {
                throw new ArgumentNullException(nameof(downloadUrls));
            }

            using var message = CreateDownloadMultipleBillingSubscriptionInvoicesRequest(downloadUrls);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file. </summary>
        /// <param name="downloadUrls"> An array of download urls for individual documents. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="downloadUrls"/> is null. </exception>
        public ResponseWithHeaders<InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders> DownloadMultipleBillingSubscriptionInvoices(IEnumerable<string> downloadUrls, CancellationToken cancellationToken = default)
        {
            if (downloadUrls == null)
            {
                throw new ArgumentNullException(nameof(downloadUrls));
            }

            using var message = CreateDownloadMultipleBillingSubscriptionInvoicesRequest(downloadUrls);
            _pipeline.Send(message, cancellationToken);
            var headers = new InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByBillingAccountNextPageRequest(string nextLink, string billingAccountName, string periodStartDate, string periodEndDate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="billingAccountName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public async Task<Response<InvoiceListResult>> ListByBillingAccountNextPageAsync(string nextLink, string billingAccountName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingAccountNextPageRequest(nextLink, billingAccountName, periodStartDate, periodEndDate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="billingAccountName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public Response<InvoiceListResult> ListByBillingAccountNextPage(string nextLink, string billingAccountName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingAccountNextPageRequest(nextLink, billingAccountName, periodStartDate, periodEndDate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByBillingProfileNextPageRequest(string nextLink, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="billingAccountName"/>, <paramref name="billingProfileName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public async Task<Response<InvoiceListResult>> ListByBillingProfileNextPageAsync(string nextLink, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (billingProfileName == null)
            {
                throw new ArgumentNullException(nameof(billingProfileName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingProfileNextPageRequest(nextLink, billingAccountName, billingProfileName, periodStartDate, periodEndDate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="periodStartDate"> The start date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="periodEndDate"> The end date to fetch the invoices. The date should be specified in MM-DD-YYYY format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="billingAccountName"/>, <paramref name="billingProfileName"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public Response<InvoiceListResult> ListByBillingProfileNextPage(string nextLink, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (billingAccountName == null)
            {
                throw new ArgumentNullException(nameof(billingAccountName));
            }
            if (billingProfileName == null)
            {
                throw new ArgumentNullException(nameof(billingProfileName));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingProfileNextPageRequest(nextLink, billingAccountName, billingProfileName, periodStartDate, periodEndDate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByBillingSubscriptionNextPageRequest(string nextLink, string periodStartDate, string periodEndDate)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the invoices for a subscription. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="periodStartDate"> Invoice period start date. </param>
        /// <param name="periodEndDate"> Invoice period end date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public async Task<Response<InvoiceListResult>> ListByBillingSubscriptionNextPageAsync(string nextLink, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingSubscriptionNextPageRequest(nextLink, periodStartDate, periodEndDate);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists the invoices for a subscription. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="periodStartDate"> Invoice period start date. </param>
        /// <param name="periodEndDate"> Invoice period end date. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="periodStartDate"/>, or <paramref name="periodEndDate"/> is null. </exception>
        public Response<InvoiceListResult> ListByBillingSubscriptionNextPage(string nextLink, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (periodStartDate == null)
            {
                throw new ArgumentNullException(nameof(periodStartDate));
            }
            if (periodEndDate == null)
            {
                throw new ArgumentNullException(nameof(periodEndDate));
            }

            using var message = CreateListByBillingSubscriptionNextPageRequest(nextLink, periodStartDate, periodEndDate);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InvoiceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InvoiceListResult.DeserializeInvoiceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
