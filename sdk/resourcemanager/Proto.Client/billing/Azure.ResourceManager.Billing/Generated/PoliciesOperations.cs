// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Billing.Models;

namespace Azure.ResourceManager.Billing
{
    /// <summary> The Policies service client. </summary>
    public partial class PoliciesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PoliciesRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of PoliciesOperations for mocking. </summary>
        protected PoliciesOperations()
        {
        }

        /// <summary> Initializes a new instance of PoliciesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal PoliciesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new PoliciesRestOperations(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Lists the policies for a billing profile. This operation is supported only for billing accounts with agreement type Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Policy>> GetByBillingProfileAsync(string billingAccountName, string billingProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.GetByBillingProfile");
            scope.Start();
            try
            {
                return await RestClient.GetByBillingProfileAsync(billingAccountName, billingProfileName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the policies for a billing profile. This operation is supported only for billing accounts with agreement type Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Policy> GetByBillingProfile(string billingAccountName, string billingProfileName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.GetByBillingProfile");
            scope.Start();
            try
            {
                return RestClient.GetByBillingProfile(billingAccountName, billingProfileName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the policies for a billing profile. This operation is supported only for billing accounts with agreement type Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="parameters"> Request parameters that are provided to the update policies operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Policy>> UpdateAsync(string billingAccountName, string billingProfileName, Policy parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.Update");
            scope.Start();
            try
            {
                return await RestClient.UpdateAsync(billingAccountName, billingProfileName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the policies for a billing profile. This operation is supported only for billing accounts with agreement type Microsoft Customer Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <param name="parameters"> Request parameters that are provided to the update policies operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Policy> Update(string billingAccountName, string billingProfileName, Policy parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.Update");
            scope.Start();
            try
            {
                return RestClient.Update(billingAccountName, billingProfileName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the policies for a customer. This operation is supported only for billing accounts with agreement type Microsoft Partner Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="customerName"> The ID that uniquely identifies a customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CustomerPolicy>> GetByCustomerAsync(string billingAccountName, string customerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.GetByCustomer");
            scope.Start();
            try
            {
                return await RestClient.GetByCustomerAsync(billingAccountName, customerName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the policies for a customer. This operation is supported only for billing accounts with agreement type Microsoft Partner Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="customerName"> The ID that uniquely identifies a customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CustomerPolicy> GetByCustomer(string billingAccountName, string customerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.GetByCustomer");
            scope.Start();
            try
            {
                return RestClient.GetByCustomer(billingAccountName, customerName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the policies for a customer. This operation is supported only for billing accounts with agreement type Microsoft Partner Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="customerName"> The ID that uniquely identifies a customer. </param>
        /// <param name="parameters"> Request parameters that are provided to the update policies operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CustomerPolicy>> UpdateCustomerAsync(string billingAccountName, string customerName, CustomerPolicy parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.UpdateCustomer");
            scope.Start();
            try
            {
                return await RestClient.UpdateCustomerAsync(billingAccountName, customerName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the policies for a customer. This operation is supported only for billing accounts with agreement type Microsoft Partner Agreement. </summary>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="customerName"> The ID that uniquely identifies a customer. </param>
        /// <param name="parameters"> Request parameters that are provided to the update policies operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CustomerPolicy> UpdateCustomer(string billingAccountName, string customerName, CustomerPolicy parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PoliciesOperations.UpdateCustomer");
            scope.Start();
            try
            {
                return RestClient.UpdateCustomer(billingAccountName, customerName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
