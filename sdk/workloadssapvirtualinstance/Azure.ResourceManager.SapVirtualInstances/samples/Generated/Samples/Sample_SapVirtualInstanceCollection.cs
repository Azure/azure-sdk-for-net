// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.SapVirtualInstances.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.SapVirtualInstances.Samples
{
    public partial class Sample_SapVirtualInstanceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnADistributedSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateDetectDS.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "PS_CLI_TF_RG";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("eastus2"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("{{resourcegrp}}", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app", new VirtualMachineConfiguration("Standard_E4ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "azureuser",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app", new VirtualMachineConfiguration("Standard_E4ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "azureuser",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    }), 2L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "azureuser",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    }), 1L))
                    {
                        IsSecondaryIPEnabled = true,
                    },
                    SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration
                    {
                        CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "sap.bpaas.com",
                    },
                }),
                Tags =
{
["created by"] = "azureuser"
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnAnHASystemWithAvailabilitySet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateDetectHaAvailabilitySet.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                    },
                    SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration
                    {
                        CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnAnHASystemWithAvailabilityZone()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateDetectHaAvailabilityZone.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                    },
                    SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration
                    {
                        CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnASingleServerSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateDetectSingleServer.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }))
                    {
                        IsSecondaryIPEnabled = true,
                        DatabaseType = SapDatabaseType.HANA,
                    },
                    SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration
                    {
                        CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationForDistributedSystemRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraDiskOsDSRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                        DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration
{
Count = 2L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["hana/data"] = new DiskVolumeConfiguration
{
Count = 4L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/log"] = new DiskVolumeConfiguration
{
Count = 3L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/shared"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["os"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 64L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["usr/sap"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
}
},
                    }),
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationForHASystemWithAvailabilitySetRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraDiskOsHaAvailabilitySetRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                        DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration
{
Count = 2L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["hana/data"] = new DiskVolumeConfiguration
{
Count = 4L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/log"] = new DiskVolumeConfiguration
{
Count = 3L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/shared"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["os"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 64L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["usr/sap"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
}
},
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationForHASystemWithAvailabilityZoneRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraDiskOsHaAvailabilityZoneRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                        DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration
{
Count = 2L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["hana/data"] = new DiskVolumeConfiguration
{
Count = 4L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/log"] = new DiskVolumeConfiguration
{
Count = 3L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/shared"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["os"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 64L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["usr/sap"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
}
},
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationsForSingleServerSystemRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraDiskOsSingleServerRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }))
                    {
                        IsSecondaryIPEnabled = true,
                        DatabaseType = SapDatabaseType.HANA,
                        DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration
{
Count = 2L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["hana/data"] = new DiskVolumeConfiguration
{
Count = 4L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/log"] = new DiskVolumeConfiguration
{
Count = 3L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
},
["hana/shared"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 256L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["os"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 64L,
SkuName = DiskSkuName.StandardSSDLRS,
},
["usr/sap"] = new DiskVolumeConfiguration
{
Count = 1L,
SizeGB = 128L,
SkuName = DiskSkuName.PremiumLRS,
}
},
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForDistributedSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraDS.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    }),
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForHASystemWithAvailabilitySet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraHaAvailabilitySet.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 5L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForHASystemWithAvailabilityZone()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraHaAvailabilityZone.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithAzureComputeGalleryImage()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsComputeGalleryImage.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Id = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/galleries/testgallery/images/rhelimagetest/versions/0.0.1"),
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Id = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/galleries/testgallery/images/rhelimagetest/versions/0.0.1"),
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Id = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/galleries/testgallery/images/rhelimagetest/versions/0.0.1"),
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForDistributedSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsCustomResourceNamesDS.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        CustomResourceNames = new ThreeTierFullResourceNames
                        {
                            CentralServer = new CentralServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "ascsvm",
HostName = "ascshostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "ascsnic",
}},
OSDiskName = "ascsosdisk",
DataDiskNames =
{
["default"] = {"ascsdisk0"}
},
}},
                            },
                            ApplicationServer = new ApplicationServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "appvm0",
HostName = "apphostName0",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "appnic0",
}},
OSDiskName = "app0osdisk",
DataDiskNames =
{
["default"] = {"app0disk0"}
},
}, new VirtualMachineResourceNames
{
VmName = "appvm1",
HostName = "apphostName1",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "appnic1",
}},
OSDiskName = "app1osdisk",
DataDiskNames =
{
["default"] = {"app1disk0"}
},
}},
                                AvailabilitySetName = "appAvSet",
                            },
                            DatabaseServer = new DatabaseServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "dbvm",
HostName = "dbhostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "dbnic",
}},
OSDiskName = "dbosdisk",
DataDiskNames =
{
["hanaData"] = {"hanadata0", "hanadata1"},
["hanaLog"] = {"hanalog0", "hanalog1", "hanalog2"},
["hanaShared"] = {"hanashared0", "hanashared1"},
["usrSap"] = {"usrsap0"}
},
}},
                            },
                            SharedStorage = new SharedStorageResourceNames
                            {
                                SharedStorageAccountName = "storageacc",
                                SharedStorageAccountPrivateEndPointName = "peForxNFS",
                            },
                        },
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForHASystemWithAvailabilitySet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsCustomResourceNamesHaAvailabilitySet.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                        CustomResourceNames = new ThreeTierFullResourceNames
                        {
                            CentralServer = new CentralServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "ascsvm",
HostName = "ascshostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "ascsnic",
}},
OSDiskName = "ascsosdisk",
}, new VirtualMachineResourceNames
{
VmName = "ersvm",
HostName = "ershostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "ersnic",
}},
OSDiskName = "ersosdisk",
}},
                                AvailabilitySetName = "csAvSet",
                                LoadBalancer = new LoadBalancerResourceNames
                                {
                                    LoadBalancerName = "ascslb",
                                    FrontendIPConfigurationNames = { "ascsip0", "ersip0" },
                                    BackendPoolNames = { "ascsBackendPool" },
                                    HealthProbeNames = { "ascsHealthProbe", "ersHealthProbe" },
                                },
                            },
                            ApplicationServer = new ApplicationServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "appvm0",
HostName = "apphostName0",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "appnic0",
}},
OSDiskName = "app0osdisk",
DataDiskNames =
{
["default"] = {"app0disk0"}
},
}, new VirtualMachineResourceNames
{
VmName = "appvm1",
HostName = "apphostName1",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "appnic1",
}},
OSDiskName = "app1osdisk",
DataDiskNames =
{
["default"] = {"app1disk0"}
},
}},
                                AvailabilitySetName = "appAvSet",
                            },
                            DatabaseServer = new DatabaseServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "dbvmpr",
HostName = "dbprhostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "dbprnic",
}},
OSDiskName = "dbprosdisk",
DataDiskNames =
{
["hanaData"] = {"hanadatapr0", "hanadatapr1"},
["hanaLog"] = {"hanalogpr0", "hanalogpr1", "hanalogpr2"},
["hanaShared"] = {"hanasharedpr0", "hanasharedpr1"},
["usrSap"] = {"usrsappr0"}
},
}, new VirtualMachineResourceNames
{
VmName = "dbvmsr",
HostName = "dbsrhostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "dbsrnic",
}},
OSDiskName = "dbsrosdisk",
DataDiskNames =
{
["hanaData"] = {"hanadatasr0", "hanadatasr1"},
["hanaLog"] = {"hanalogsr0", "hanalogsr1", "hanalogsr2"},
["hanaShared"] = {"hanasharedsr0", "hanasharedsr1"},
["usrSap"] = {"usrsapsr0"}
},
}},
                                AvailabilitySetName = "dbAvSet",
                                LoadBalancer = new LoadBalancerResourceNames
                                {
                                    LoadBalancerName = "dblb",
                                    FrontendIPConfigurationNames = { "dbip" },
                                    BackendPoolNames = { "dbBackendPool" },
                                    HealthProbeNames = { "dbHealthProbe" },
                                },
                            },
                            SharedStorage = new SharedStorageResourceNames
                            {
                                SharedStorageAccountName = "storageacc",
                                SharedStorageAccountPrivateEndPointName = "peForxNFS",
                            },
                        },
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForHASystemWithAvailabilityZone()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsCustomResourceNamesHaAvailabilityZone.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                        CustomResourceNames = new ThreeTierFullResourceNames
                        {
                            CentralServer = new CentralServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "ascsvm",
HostName = "ascshostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "ascsnic",
}},
OSDiskName = "ascsosdisk",
}, new VirtualMachineResourceNames
{
VmName = "ersvm",
HostName = "ershostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "ersnic",
}},
OSDiskName = "ersosdisk",
}},
                                LoadBalancer = new LoadBalancerResourceNames
                                {
                                    LoadBalancerName = "ascslb",
                                    FrontendIPConfigurationNames = { "ascsip0", "ersip0" },
                                    BackendPoolNames = { "ascsBackendPool" },
                                    HealthProbeNames = { "ascsHealthProbe", "ersHealthProbe" },
                                },
                            },
                            ApplicationServer = new ApplicationServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "appvm0",
HostName = "apphostName0",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "appnic0",
}},
OSDiskName = "app0osdisk",
DataDiskNames =
{
["default"] = {"app0disk0"}
},
}, new VirtualMachineResourceNames
{
VmName = "appvm1",
HostName = "apphostName1",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "appnic1",
}},
OSDiskName = "app1osdisk",
DataDiskNames =
{
["default"] = {"app1disk0"}
},
}},
                            },
                            DatabaseServer = new DatabaseServerFullResourceNames
                            {
                                VirtualMachines = {new VirtualMachineResourceNames
{
VmName = "dbvmpr",
HostName = "dbprhostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "dbprnic",
}},
OSDiskName = "dbprosdisk",
DataDiskNames =
{
["hanaData"] = {"hanadatapr0", "hanadatapr1"},
["hanaLog"] = {"hanalogpr0", "hanalogpr1", "hanalogpr2"},
["hanaShared"] = {"hanasharedpr0", "hanasharedpr1"},
["usrSap"] = {"usrsappr0"}
},
}, new VirtualMachineResourceNames
{
VmName = "dbvmsr",
HostName = "dbsrhostName",
NetworkInterfaces = {new NetworkInterfaceResourceNames
{
NetworkInterfaceName = "dbsrnic",
}},
OSDiskName = "dbsrosdisk",
DataDiskNames =
{
["hanaData"] = {"hanadatasr0", "hanadatasr1"},
["hanaLog"] = {"hanalogsr0", "hanalogsr1", "hanalogsr2"},
["hanaShared"] = {"hanasharedsr0", "hanasharedsr1"},
["usrSap"] = {"usrsapsr0"}
},
}},
                                LoadBalancer = new LoadBalancerResourceNames
                                {
                                    LoadBalancerName = "dblb",
                                    FrontendIPConfigurationNames = { "dbip" },
                                    BackendPoolNames = { "dbBackendPool" },
                                    HealthProbeNames = { "dbHealthProbe" },
                                },
                            },
                            SharedStorage = new SharedStorageResourceNames
                            {
                                SharedStorageAccountName = "storageacc",
                                SharedStorageAccountPrivateEndPointName = "peForxNFS",
                            },
                        },
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForSingleServerSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsCustomResourceNamesSingleServer.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }))
                    {
                        IsSecondaryIPEnabled = true,
                        DatabaseType = SapDatabaseType.HANA,
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForDistributedSystemRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsDSRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    }),
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForHASystemWithAvailabilitySetRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsHaAvailabilitySetRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForHASystemWithAvailabilityZoneRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsHaAvailabilityZoneRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 2L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForSingleServerSystemRecommended()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraOsSIngleServerRecommended.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }))
                    {
                        IsSecondaryIPEnabled = true,
                        DatabaseType = SapDatabaseType.HANA,
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForSingleServerSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraSingleServer.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DeploymentConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys = {new SshPublicKey
{
KeyData = "ssh-rsa public key",
}},
                        },
                    }))
                    {
                        IsSecondaryIPEnabled = true,
                        DatabaseType = SapDatabaseType.HANA,
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithAnExistingSAPTransportDirectoryFileshare()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraWithExistingFileshare.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        StorageTransportFileShareConfiguration = new MountFileShareConfiguration("/subscriptions/49d64d54-e888-4c46-a868-1936802b762c/resourceGroups/testrg/providers/Microsoft.Network/privateEndpoints/endpoint", "/subscriptions/49d64d54-e888-4c46-a868-1936802b762c/resourceGroups/testrg/providers/Microsoft.Network/privateEndpoints/endpoint"),
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithANewSAPTransportDirectoryFileshare()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraWithNewFileshare.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        StorageTransportFileShareConfiguration = new CreateAndMountFileShareConfiguration
                        {
                            ResourceGroup = "rgName",
                            StorageAccountName = "storageName",
                        },
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithTrustedAccessEnabled()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraWithOsTrustedAccess.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    }),
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                })
                {
                    ManagedResourcesNetworkAccessType = ManagedResourcesNetworkAccessType.Private,
                },
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreateInfrastructureWithoutASAPTransportDirectoryFileshare()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInfraWithoutFileshare.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 6L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP",
                        Sku = "84sapha-gen2",
                        Version = "latest",
                    }, new OSProfile
                    {
                        AdminUsername = "{your-username}",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "abc",
                                PrivateKey = "xyz",
                            },
                        },
                    }), 1L)
                    {
                        DatabaseType = SapDatabaseType.HANA,
                    })
                    {
                        StorageTransportFileShareConfiguration = new SkipFileShareConfiguration(),
                    },
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "xyz.test.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_InstallSAPSoftwareOnDistributedSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInstallDS.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("eastus2"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.Prod, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new ThreeTierConfiguration("{{resourcegrp}}", new CentralServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app", new VirtualMachineConfiguration("Standard_E4ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "8.2",
                        Version = "8.2.2021091201",
                    }, new OSProfile
                    {
                        AdminUsername = "azureuser",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    }), 1L), new ApplicationServerConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app", new VirtualMachineConfiguration("Standard_E4ds_v4", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "8.2",
                        Version = "8.2.2021091201",
                    }, new OSProfile
                    {
                        AdminUsername = "azureuser",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    }), 2L), new DatabaseConfiguration("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app", new VirtualMachineConfiguration("Standard_M32ts", new ImageReference
                    {
                        Publisher = "RedHat",
                        Offer = "RHEL-SAP-HA",
                        Sku = "8.2",
                        Version = "8.2.2021091201",
                    }, new OSProfile
                    {
                        AdminUsername = "azureuser",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    }), 1L))
                    {
                        IsSecondaryIPEnabled = true,
                    },
                    SoftwareConfiguration = new SapInstallWithoutOSConfigSoftwareConfiguration("https://teststorageaccount.blob.core.windows.net/sapbits/sapfiles/boms/S41909SPS03_v0011ms/S41909SPS03_v0011ms.yaml", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Storage/storageAccounts/teststorageaccount", "SAP S/4HANA 1909 SPS 03"),
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "sap.bpaas.com",
                    },
                }),
                Tags =
{
["created by"] = "azureuser"
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_InstallSAPSoftwareOnSingleServerSystem()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateInstallSingleServer.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("eastus2"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DeploymentWithOSConfiguration
                {
                    AppLocation = "eastus",
                    InfrastructureConfiguration = new SingleServerConfiguration("test-rg", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/testsubnet", new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference
                    {
                        Publisher = "SUSE",
                        Offer = "SLES-SAP",
                        Sku = "12-sp4-gen2",
                        Version = "2022.02.01",
                    }, new OSProfile
                    {
                        AdminUsername = "azureappadmin",
                        OSConfiguration = new LinuxConfiguration
                        {
                            DisablePasswordAuthentication = true,
                            SshKeyPair = new SshKeyPair
                            {
                                PublicKey = "{{sshkey}}",
                                PrivateKey = "{{privateKey}}",
                            },
                        },
                    })),
                    SoftwareConfiguration = new SapInstallWithoutOSConfigSoftwareConfiguration("https://teststorageaccount.blob.core.windows.net/sapbits/sapfiles/boms/S41909SPS03_v0011ms/S41909SPS03_v0011ms.yaml", "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Storage/storageAccounts/teststorageaccount", "SAP S/4HANA 1909 SPS 03"),
                    OSSapConfiguration = new OSSapConfiguration
                    {
                        SapFqdn = "sap.bpaas.com",
                    },
                }),
                Tags = { },
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_RegisterExistingSAPSystemAsVirtualInstanceForSAPSolutions()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateRegisterSapSolutions.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("northeurope"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DiscoveryConfiguration
                {
                    CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                }),
                Tags =
{
["createdby"] = "abc@microsoft.com",
["test"] = "abc"
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_RegisterExistingSAPSystemAsVirtualInstanceForSAPSolutionsWithOptionalCustomizations()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateRegisterSapSolutionsCustom.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("northeurope"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DiscoveryConfiguration
                {
                    CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                    ManagedRgStorageAccountName = "q20saacssgrs",
                }),
                Tags =
{
["createdby"] = "abc@microsoft.com",
["test"] = "abc"
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_RegisterWithTrustedAccessEnabled()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_CreateRegisterWithTrustedAccess.json
            // this example is just showing the usage of "SAPVirtualInstance_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("northeurope"))
            {
                Properties = new SapVirtualInstanceProperties(SapEnvironmentType.NonProd, SapProductType.S4HANA, new DiscoveryConfiguration
                {
                    CentralServerVmId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0",
                })
                {
                    ManagedResourcesNetworkAccessType = ManagedResourcesNetworkAccessType.Private,
                },
                Tags =
{
["createdby"] = "abc@microsoft.com",
["test"] = "abc"
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SAPVirtualInstancesGet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceResource result = await collection.GetAsync(sapVirtualInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SAPVirtualInstancesGetWithACSSInstallationBlocked()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_GetAcssInstallationBlocked.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceResource result = await collection.GetAsync(sapVirtualInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_SAPVirtualInstancesListByResourceGroup()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_ListByResourceGroup.json
            // this example is just showing the usage of "SAPVirtualInstance_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation and iterate over the result
            await foreach (SapVirtualInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapVirtualInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SAPVirtualInstancesGet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            bool result = await collection.ExistsAsync(sapVirtualInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_SAPVirtualInstancesGetWithACSSInstallationBlocked()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_GetAcssInstallationBlocked.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            bool result = await collection.ExistsAsync(sapVirtualInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SAPVirtualInstancesGet()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            NullableResponse<SapVirtualInstanceResource> response = await collection.GetIfExistsAsync(sapVirtualInstanceName);
            SapVirtualInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapVirtualInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_SAPVirtualInstancesGetWithACSSInstallationBlocked()
        {
            // Generated from example definition: 2024-09-01/SapVirtualInstances_GetAcssInstallationBlocked.json
            // this example is just showing the usage of "SAPVirtualInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "49d64d54-e966-4c46-a868-1999802b762c";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            NullableResponse<SapVirtualInstanceResource> response = await collection.GetIfExistsAsync(sapVirtualInstanceName);
            SapVirtualInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapVirtualInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
