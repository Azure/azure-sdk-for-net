// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.SapVirtualInstances.Models
{
    public partial class SapApplicationServerProperties : IUtf8JsonSerializable, IJsonModel<SapApplicationServerProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SapApplicationServerProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SapApplicationServerProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(InstanceNo))
            {
                writer.WritePropertyName("instanceNo"u8);
                writer.WriteStringValue(InstanceNo);
            }
            if (options.Format != "W" && Optional.IsDefined(Subnet))
            {
                writer.WritePropertyName("subnet"u8);
                writer.WriteStringValue(Subnet);
            }
            if (options.Format != "W" && Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname"u8);
                writer.WriteStringValue(Hostname);
            }
            if (options.Format != "W" && Optional.IsDefined(KernelVersion))
            {
                writer.WritePropertyName("kernelVersion"u8);
                writer.WriteStringValue(KernelVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(KernelPatch))
            {
                writer.WritePropertyName("kernelPatch"u8);
                writer.WriteStringValue(KernelPatch);
            }
            if (options.Format != "W" && Optional.IsDefined(IPAddress))
            {
                writer.WritePropertyName("ipAddress"u8);
                writer.WriteStringValue(IPAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(GatewayPort))
            {
                writer.WritePropertyName("gatewayPort"u8);
                writer.WriteNumberValue(GatewayPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IcmHttpPort))
            {
                writer.WritePropertyName("icmHttpPort"u8);
                writer.WriteNumberValue(IcmHttpPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IcmHttpsPort))
            {
                writer.WritePropertyName("icmHttpsPort"u8);
                writer.WriteNumberValue(IcmHttpsPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DispatcherStatus))
            {
                writer.WritePropertyName("dispatcherStatus"u8);
                writer.WriteStringValue(DispatcherStatus);
            }
            if (options.Format != "W" && Optional.IsDefined(LoadBalancerDetails))
            {
                writer.WritePropertyName("loadBalancerDetails"u8);
                JsonSerializer.Serialize(writer, LoadBalancerDetails);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VmDetails))
            {
                writer.WritePropertyName("vmDetails"u8);
                writer.WriteStartArray();
                foreach (var item in VmDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Health))
            {
                writer.WritePropertyName("health"u8);
                writer.WriteStringValue(Health.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteObjectValue(Errors, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SapApplicationServerProperties IJsonModel<SapApplicationServerProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSapApplicationServerProperties(document.RootElement, options);
        }

        internal static SapApplicationServerProperties DeserializeSapApplicationServerProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceNo = default;
            string subnet = default;
            string hostname = default;
            string kernelVersion = default;
            string kernelPatch = default;
            string ipAddress = default;
            long? gatewayPort = default;
            long? icmHttpPort = default;
            long? icmHttpsPort = default;
            string dispatcherStatus = default;
            SubResource loadBalancerDetails = default;
            IReadOnlyList<ApplicationServerVmDetails> vmDetails = default;
            SapVirtualInstanceStatus? status = default;
            SapHealthState? health = default;
            SapVirtualInstanceProvisioningState? provisioningState = default;
            SapVirtualInstanceError errors = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("instanceNo"u8))
                {
                    instanceNo = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnet"u8))
                {
                    subnet = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostname"u8))
                {
                    hostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kernelVersion"u8))
                {
                    kernelVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kernelPatch"u8))
                {
                    kernelPatch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gatewayPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gatewayPort = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("icmHttpPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    icmHttpPort = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("icmHttpsPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    icmHttpsPort = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("dispatcherStatus"u8))
                {
                    dispatcherStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("loadBalancerDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadBalancerDetails = JsonSerializer.Deserialize<SubResource>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("vmDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ApplicationServerVmDetails> array = new List<ApplicationServerVmDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ApplicationServerVmDetails.DeserializeApplicationServerVmDetails(item, options));
                    }
                    vmDetails = array;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new SapVirtualInstanceStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("health"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    health = new SapHealthState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new SapVirtualInstanceProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errors = SapVirtualInstanceError.DeserializeSapVirtualInstanceError(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new SapApplicationServerProperties(
                instanceNo,
                subnet,
                hostname,
                kernelVersion,
                kernelPatch,
                ipAddress,
                gatewayPort,
                icmHttpPort,
                icmHttpsPort,
                dispatcherStatus,
                loadBalancerDetails,
                vmDetails ?? new ChangeTrackingList<ApplicationServerVmDetails>(),
                status,
                health,
                provisioningState,
                errors,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SapApplicationServerProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support writing '{options.Format}' format.");
            }
        }

        SapApplicationServerProperties IPersistableModel<SapApplicationServerProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSapApplicationServerProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SapApplicationServerProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
