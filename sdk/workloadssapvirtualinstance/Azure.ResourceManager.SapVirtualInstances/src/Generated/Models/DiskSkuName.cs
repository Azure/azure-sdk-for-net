// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.SapVirtualInstances.Models
{
    /// <summary> Defines the disk sku name. </summary>
    public readonly partial struct DiskSkuName : IEquatable<DiskSkuName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiskSkuName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardLRSValue = "Standard_LRS";
        private const string PremiumLRSValue = "Premium_LRS";
        private const string StandardSSDLRSValue = "StandardSSD_LRS";
        private const string UltraSSDLRSValue = "UltraSSD_LRS";
        private const string PremiumZRSValue = "Premium_ZRS";
        private const string StandardSSDZRSValue = "StandardSSD_ZRS";
        private const string PremiumV2LRSValue = "PremiumV2_LRS";

        /// <summary> Standard LRS Disk SKU. </summary>
        public static DiskSkuName StandardLRS { get; } = new DiskSkuName(StandardLRSValue);
        /// <summary> Premium_LRS Disk SKU. </summary>
        public static DiskSkuName PremiumLRS { get; } = new DiskSkuName(PremiumLRSValue);
        /// <summary> StandardSSD_LRS Disk SKU. </summary>
        public static DiskSkuName StandardSSDLRS { get; } = new DiskSkuName(StandardSSDLRSValue);
        /// <summary> UltraSSD_LRS Disk SKU. </summary>
        public static DiskSkuName UltraSSDLRS { get; } = new DiskSkuName(UltraSSDLRSValue);
        /// <summary> Premium_ZRS Disk SKU. </summary>
        public static DiskSkuName PremiumZRS { get; } = new DiskSkuName(PremiumZRSValue);
        /// <summary> StandardSSD_ZRS Disk SKU. </summary>
        public static DiskSkuName StandardSSDZRS { get; } = new DiskSkuName(StandardSSDZRSValue);
        /// <summary> PremiumV2_LRS Disk SKU. </summary>
        public static DiskSkuName PremiumV2LRS { get; } = new DiskSkuName(PremiumV2LRSValue);
        /// <summary> Determines if two <see cref="DiskSkuName"/> values are the same. </summary>
        public static bool operator ==(DiskSkuName left, DiskSkuName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiskSkuName"/> values are not the same. </summary>
        public static bool operator !=(DiskSkuName left, DiskSkuName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DiskSkuName"/>. </summary>
        public static implicit operator DiskSkuName(string value) => new DiskSkuName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskSkuName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiskSkuName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
