// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> The SAP Software configuration Input when the software is to be installed by service without OS Configurations. </summary>
    internal partial class SapInstallWithoutOSConfigSoftwareConfiguration : IJsonModel<SapInstallWithoutOSConfigSoftwareConfiguration>
    {
        /// <summary> Initializes a new instance of <see cref="SapInstallWithoutOSConfigSoftwareConfiguration"/> for deserialization. </summary>
        internal SapInstallWithoutOSConfigSoftwareConfiguration()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<SapInstallWithoutOSConfigSoftwareConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SapInstallWithoutOSConfigSoftwareConfiguration)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("bomUrl"u8);
            writer.WriteStringValue(BomUri.AbsoluteUri);
            writer.WritePropertyName("sapBitsStorageAccountId"u8);
            writer.WriteStringValue(SapBitsStorageAccountId);
            writer.WritePropertyName("softwareVersion"u8);
            writer.WriteStringValue(SoftwareVersion);
            if (Optional.IsDefined(HighAvailabilitySoftwareConfiguration))
            {
                writer.WritePropertyName("highAvailabilitySoftwareConfiguration"u8);
                writer.WriteObjectValue(HighAvailabilitySoftwareConfiguration, options);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SapInstallWithoutOSConfigSoftwareConfiguration IJsonModel<SapInstallWithoutOSConfigSoftwareConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (SapInstallWithoutOSConfigSoftwareConfiguration)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SapSoftwareConfiguration JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SapInstallWithoutOSConfigSoftwareConfiguration)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSapInstallWithoutOSConfigSoftwareConfiguration(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static SapInstallWithoutOSConfigSoftwareConfiguration DeserializeSapInstallWithoutOSConfigSoftwareConfiguration(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SapSoftwareInstallationType softwareInstallationType = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            Uri bomUri = default;
            string sapBitsStorageAccountId = default;
            string softwareVersion = default;
            HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("softwareInstallationType"u8))
                {
                    softwareInstallationType = new SapSoftwareInstallationType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("bomUrl"u8))
                {
                    bomUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("sapBitsStorageAccountId"u8))
                {
                    sapBitsStorageAccountId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("softwareVersion"u8))
                {
                    softwareVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("highAvailabilitySoftwareConfiguration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    highAvailabilitySoftwareConfiguration = HighAvailabilitySoftwareConfiguration.DeserializeHighAvailabilitySoftwareConfiguration(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new SapInstallWithoutOSConfigSoftwareConfiguration(
                softwareInstallationType,
                additionalBinaryDataProperties,
                bomUri,
                sapBitsStorageAccountId,
                softwareVersion,
                highAvailabilitySoftwareConfiguration);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadsSapVirtualInstanceContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SapInstallWithoutOSConfigSoftwareConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SapInstallWithoutOSConfigSoftwareConfiguration IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options) => (SapInstallWithoutOSConfigSoftwareConfiguration)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SapSoftwareConfiguration PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeSapInstallWithoutOSConfigSoftwareConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SapInstallWithoutOSConfigSoftwareConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<SapInstallWithoutOSConfigSoftwareConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
