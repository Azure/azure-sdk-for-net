// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Defines the SAP Application Server instance properties. </summary>
    internal partial class SapApplicationServerProperties : IJsonModel<SapApplicationServerProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<SapApplicationServerProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(InstanceNo))
            {
                writer.WritePropertyName("instanceNo"u8);
                writer.WriteStringValue(InstanceNo);
            }
            if (options.Format != "W" && Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnet"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (options.Format != "W" && Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname"u8);
                writer.WriteStringValue(Hostname);
            }
            if (options.Format != "W" && Optional.IsDefined(KernelVersion))
            {
                writer.WritePropertyName("kernelVersion"u8);
                writer.WriteStringValue(KernelVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(KernelPatch))
            {
                writer.WritePropertyName("kernelPatch"u8);
                writer.WriteStringValue(KernelPatch);
            }
            if (options.Format != "W" && Optional.IsDefined(IpAddress))
            {
                writer.WritePropertyName("ipAddress"u8);
                writer.WriteStringValue(IpAddress.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(GatewayPort))
            {
                writer.WritePropertyName("gatewayPort"u8);
                writer.WriteNumberValue(GatewayPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IcmHttpPort))
            {
                writer.WritePropertyName("icmHttpPort"u8);
                writer.WriteNumberValue(IcmHttpPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IcmHttpsPort))
            {
                writer.WritePropertyName("icmHttpsPort"u8);
                writer.WriteNumberValue(IcmHttpsPort.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DispatcherStatus))
            {
                writer.WritePropertyName("dispatcherStatus"u8);
                writer.WriteStringValue(DispatcherStatus);
            }
            if (options.Format != "W" && Optional.IsDefined(LoadBalancerDetails))
            {
                writer.WritePropertyName("loadBalancerDetails"u8);
                writer.WriteObjectValue(LoadBalancerDetails, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(VmDetails))
            {
                writer.WritePropertyName("vmDetails"u8);
                writer.WriteStartArray();
                foreach (ApplicationServerVmDetails item in VmDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Health))
            {
                writer.WritePropertyName("health"u8);
                writer.WriteStringValue(Health.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Errors))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteObjectValue(Errors, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SapApplicationServerProperties IJsonModel<SapApplicationServerProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual SapApplicationServerProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSapApplicationServerProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static SapApplicationServerProperties DeserializeSapApplicationServerProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string instanceNo = default;
            ResourceIdentifier subnetId = default;
            string hostname = default;
            string kernelVersion = default;
            string kernelPatch = default;
            IPAddress ipAddress = default;
            long? gatewayPort = default;
            long? icmHttpPort = default;
            long? icmHttpsPort = default;
            string dispatcherStatus = default;
            LoadBalancerDetails loadBalancerDetails = default;
            IReadOnlyList<ApplicationServerVmDetails> vmDetails = default;
            SapVirtualInstanceStatus? status = default;
            SapHealthState? health = default;
            SapVirtualInstanceProvisioningState? provisioningState = default;
            SapVirtualInstanceError errors = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("instanceNo"u8))
                {
                    instanceNo = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("subnet"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subnetId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("hostname"u8))
                {
                    hostname = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("kernelVersion"u8))
                {
                    kernelVersion = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("kernelPatch"u8))
                {
                    kernelPatch = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("ipAddress"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipAddress = IPAddress.Parse(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("gatewayPort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gatewayPort = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("icmHttpPort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    icmHttpPort = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("icmHttpsPort"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    icmHttpsPort = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("dispatcherStatus"u8))
                {
                    dispatcherStatus = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("loadBalancerDetails"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    loadBalancerDetails = LoadBalancerDetails.DeserializeLoadBalancerDetails(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("vmDetails"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ApplicationServerVmDetails> array = new List<ApplicationServerVmDetails>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ApplicationServerVmDetails.DeserializeApplicationServerVmDetails(item, options));
                    }
                    vmDetails = array;
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new SapVirtualInstanceStatus(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("health"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    health = new SapHealthState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new SapVirtualInstanceProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("errors"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    errors = SapVirtualInstanceError.DeserializeSapVirtualInstanceError(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new SapApplicationServerProperties(
                instanceNo,
                subnetId,
                hostname,
                kernelVersion,
                kernelPatch,
                ipAddress,
                gatewayPort,
                icmHttpPort,
                icmHttpsPort,
                dispatcherStatus,
                loadBalancerDetails,
                vmDetails ?? new ChangeTrackingList<ApplicationServerVmDetails>(),
                status,
                health,
                provisioningState,
                errors,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<SapApplicationServerProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadsSapVirtualInstanceContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        SapApplicationServerProperties IPersistableModel<SapApplicationServerProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual SapApplicationServerProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<SapApplicationServerProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeSapApplicationServerProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SapApplicationServerProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<SapApplicationServerProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
