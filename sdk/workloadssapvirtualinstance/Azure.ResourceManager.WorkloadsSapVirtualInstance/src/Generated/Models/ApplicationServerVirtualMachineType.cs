// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Defines the type of application server VM. </summary>
    public readonly partial struct ApplicationServerVirtualMachineType : IEquatable<ApplicationServerVirtualMachineType>
    {
        private readonly string _value;
        /// <summary> Active Application server vm type. </summary>
        private const string ActiveValue = "Active";
        /// <summary> Standby Application server vm type. </summary>
        private const string StandbyValue = "Standby";
        /// <summary> Unknown Application server vm type. </summary>
        private const string UnknownValue = "Unknown";

        /// <summary> Initializes a new instance of <see cref="ApplicationServerVirtualMachineType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ApplicationServerVirtualMachineType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Active Application server vm type. </summary>
        public static ApplicationServerVirtualMachineType Active { get; } = new ApplicationServerVirtualMachineType(ActiveValue);

        /// <summary> Standby Application server vm type. </summary>
        public static ApplicationServerVirtualMachineType Standby { get; } = new ApplicationServerVirtualMachineType(StandbyValue);

        /// <summary> Unknown Application server vm type. </summary>
        public static ApplicationServerVirtualMachineType Unknown { get; } = new ApplicationServerVirtualMachineType(UnknownValue);

        /// <summary> Determines if two <see cref="ApplicationServerVirtualMachineType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(ApplicationServerVirtualMachineType left, ApplicationServerVirtualMachineType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="ApplicationServerVirtualMachineType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(ApplicationServerVirtualMachineType left, ApplicationServerVirtualMachineType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="ApplicationServerVirtualMachineType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ApplicationServerVirtualMachineType(string value) => new ApplicationServerVirtualMachineType(value);

        /// <summary> Converts a string to a <see cref="ApplicationServerVirtualMachineType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator ApplicationServerVirtualMachineType?(string value) => value == null ? null : new ApplicationServerVirtualMachineType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ApplicationServerVirtualMachineType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(ApplicationServerVirtualMachineType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
