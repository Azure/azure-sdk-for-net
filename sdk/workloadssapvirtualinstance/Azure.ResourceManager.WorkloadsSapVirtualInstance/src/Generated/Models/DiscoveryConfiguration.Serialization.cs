// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Discovery Details. </summary>
    internal partial class DiscoveryConfiguration : IJsonModel<DiscoveryConfiguration>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<DiscoveryConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DiscoveryConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DiscoveryConfiguration)} does not support writing '{format}' format.");
            }
            base.JsonModelWriteCore(writer, options);
            if (Optional.IsDefined(CentralServerVmId))
            {
                writer.WritePropertyName("centralServerVmId"u8);
                writer.WriteStringValue(CentralServerVmId);
            }
            if (Optional.IsDefined(ManagedRgStorageAccountName))
            {
                writer.WritePropertyName("managedRgStorageAccountName"u8);
                writer.WriteStringValue(ManagedRgStorageAccountName);
            }
            if (options.Format != "W" && Optional.IsDefined(AppLocation))
            {
                writer.WritePropertyName("appLocation"u8);
                writer.WriteStringValue(AppLocation.Value);
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DiscoveryConfiguration IJsonModel<DiscoveryConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => (DiscoveryConfiguration)JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SapConfiguration JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DiscoveryConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DiscoveryConfiguration)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDiscoveryConfiguration(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static DiscoveryConfiguration DeserializeDiscoveryConfiguration(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SapConfigurationType configurationType = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            ResourceIdentifier centralServerVmId = default;
            string managedRgStorageAccountName = default;
            AzureLocation? appLocation = default;
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("configurationType"u8))
                {
                    configurationType = new SapConfigurationType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("centralServerVmId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    centralServerVmId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("managedRgStorageAccountName"u8))
                {
                    managedRgStorageAccountName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("appLocation"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    appLocation = new AzureLocation(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new DiscoveryConfiguration(configurationType, additionalBinaryDataProperties, centralServerVmId, managedRgStorageAccountName, appLocation);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<DiscoveryConfiguration>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected override BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DiscoveryConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerWorkloadsSapVirtualInstanceContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DiscoveryConfiguration)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        DiscoveryConfiguration IPersistableModel<DiscoveryConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options) => (DiscoveryConfiguration)PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override SapConfiguration PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<DiscoveryConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeDiscoveryConfiguration(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DiscoveryConfiguration)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<DiscoveryConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
