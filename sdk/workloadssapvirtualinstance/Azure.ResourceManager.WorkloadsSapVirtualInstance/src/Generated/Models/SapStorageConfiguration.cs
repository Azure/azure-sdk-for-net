// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Gets or sets the storage configuration. </summary>
    internal partial class SapStorageConfiguration
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="SapStorageConfiguration"/>. </summary>
        public SapStorageConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SapStorageConfiguration"/>. </summary>
        /// <param name="transportFileShareConfiguration"> The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal SapStorageConfiguration(FileShareConfiguration transportFileShareConfiguration, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            TransportFileShareConfiguration = transportFileShareConfiguration;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing. </summary>
        internal FileShareConfiguration TransportFileShareConfiguration { get; set; }

        /// <summary> The type of file share config, eg: Mount/CreateAndMount/Skip. </summary>
        internal FileShareConfigurationType? TransportFileShareConfigurationType
        {
            get
            {
                return TransportFileShareConfiguration is null ? default : TransportFileShareConfiguration.ConfigurationType;
            }
            set
            {
                TransportFileShareConfiguration = value.HasValue ? new Models.FileShareConfiguration(value.Value) : default;
            }
        }
    }
}
