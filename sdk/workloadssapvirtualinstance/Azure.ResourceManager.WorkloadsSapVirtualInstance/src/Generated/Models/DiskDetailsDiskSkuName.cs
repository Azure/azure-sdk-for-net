// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Defines the disk sku name. </summary>
    internal readonly partial struct DiskDetailsDiskSkuName : IEquatable<DiskDetailsDiskSkuName>
    {
        private readonly string _value;
        /// <summary> Standard LRS Disk SKU. </summary>
        private const string StandardLrsValue = "Standard_LRS";
        /// <summary> Premium_LRS Disk SKU. </summary>
        private const string PremiumLrsValue = "Premium_LRS";
        /// <summary> StandardSSD_LRS Disk SKU. </summary>
        private const string StandardSsdLrsValue = "StandardSSD_LRS";
        /// <summary> UltraSSD_LRS Disk SKU. </summary>
        private const string UltraSsdLrsValue = "UltraSSD_LRS";
        /// <summary> Premium_ZRS Disk SKU. </summary>
        private const string PremiumZrsValue = "Premium_ZRS";
        /// <summary> StandardSSD_ZRS Disk SKU. </summary>
        private const string StandardSsdZrsValue = "StandardSSD_ZRS";
        /// <summary> PremiumV2_LRS Disk SKU. </summary>
        private const string PremiumV2LrsValue = "PremiumV2_LRS";

        /// <summary> Initializes a new instance of <see cref="DiskDetailsDiskSkuName"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskDetailsDiskSkuName(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Standard LRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName StandardLrs { get; } = new DiskDetailsDiskSkuName(StandardLrsValue);

        /// <summary> Premium_LRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName PremiumLrs { get; } = new DiskDetailsDiskSkuName(PremiumLrsValue);

        /// <summary> StandardSSD_LRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName StandardSsdLrs { get; } = new DiskDetailsDiskSkuName(StandardSsdLrsValue);

        /// <summary> UltraSSD_LRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName UltraSsdLrs { get; } = new DiskDetailsDiskSkuName(UltraSsdLrsValue);

        /// <summary> Premium_ZRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName PremiumZrs { get; } = new DiskDetailsDiskSkuName(PremiumZrsValue);

        /// <summary> StandardSSD_ZRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName StandardSsdZrs { get; } = new DiskDetailsDiskSkuName(StandardSsdZrsValue);

        /// <summary> PremiumV2_LRS Disk SKU. </summary>
        public static DiskDetailsDiskSkuName PremiumV2Lrs { get; } = new DiskDetailsDiskSkuName(PremiumV2LrsValue);

        /// <summary> Determines if two <see cref="DiskDetailsDiskSkuName"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(DiskDetailsDiskSkuName left, DiskDetailsDiskSkuName right) => left.Equals(right);

        /// <summary> Determines if two <see cref="DiskDetailsDiskSkuName"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(DiskDetailsDiskSkuName left, DiskDetailsDiskSkuName right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="DiskDetailsDiskSkuName"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DiskDetailsDiskSkuName(string value) => new DiskDetailsDiskSkuName(value);

        /// <summary> Converts a string to a <see cref="DiskDetailsDiskSkuName"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator DiskDetailsDiskSkuName?(string value) => value == null ? null : new DiskDetailsDiskSkuName(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskDetailsDiskSkuName other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(DiskDetailsDiskSkuName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
