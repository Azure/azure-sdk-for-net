// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Defines the SAP Instance status. </summary>
    public readonly partial struct SapVirtualInstanceStatus : IEquatable<SapVirtualInstanceStatus>
    {
        private readonly string _value;
        /// <summary> SAP system is getting started. </summary>
        private const string StartingValue = "Starting";
        /// <summary> SAP system is running. </summary>
        private const string RunningValue = "Running";
        /// <summary> SAP system is being stopped. </summary>
        private const string StoppingValue = "Stopping";
        /// <summary> SAP system is offline. </summary>
        private const string OfflineValue = "Offline";
        /// <summary> SAP system is partially running. </summary>
        private const string PartiallyRunningValue = "PartiallyRunning";
        /// <summary> SAP system status is unavailable. </summary>
        private const string UnavailableValue = "Unavailable";
        /// <summary> Soft shutdown of SAP system is initiated. </summary>
        private const string SoftShutdownValue = "SoftShutdown";

        /// <summary> Initializes a new instance of <see cref="SapVirtualInstanceStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SapVirtualInstanceStatus(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> SAP system is getting started. </summary>
        public static SapVirtualInstanceStatus Starting { get; } = new SapVirtualInstanceStatus(StartingValue);

        /// <summary> SAP system is running. </summary>
        public static SapVirtualInstanceStatus Running { get; } = new SapVirtualInstanceStatus(RunningValue);

        /// <summary> SAP system is being stopped. </summary>
        public static SapVirtualInstanceStatus Stopping { get; } = new SapVirtualInstanceStatus(StoppingValue);

        /// <summary> SAP system is offline. </summary>
        public static SapVirtualInstanceStatus Offline { get; } = new SapVirtualInstanceStatus(OfflineValue);

        /// <summary> SAP system is partially running. </summary>
        public static SapVirtualInstanceStatus PartiallyRunning { get; } = new SapVirtualInstanceStatus(PartiallyRunningValue);

        /// <summary> SAP system status is unavailable. </summary>
        public static SapVirtualInstanceStatus Unavailable { get; } = new SapVirtualInstanceStatus(UnavailableValue);

        /// <summary> Soft shutdown of SAP system is initiated. </summary>
        public static SapVirtualInstanceStatus SoftShutdown { get; } = new SapVirtualInstanceStatus(SoftShutdownValue);

        /// <summary> Determines if two <see cref="SapVirtualInstanceStatus"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(SapVirtualInstanceStatus left, SapVirtualInstanceStatus right) => left.Equals(right);

        /// <summary> Determines if two <see cref="SapVirtualInstanceStatus"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(SapVirtualInstanceStatus left, SapVirtualInstanceStatus right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="SapVirtualInstanceStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator SapVirtualInstanceStatus(string value) => new SapVirtualInstanceStatus(value);

        /// <summary> Converts a string to a <see cref="SapVirtualInstanceStatus"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator SapVirtualInstanceStatus?(string value) => value == null ? null : new SapVirtualInstanceStatus(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SapVirtualInstanceStatus other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(SapVirtualInstanceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
