// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Deployment Configuration. </summary>
    internal partial class DeploymentConfiguration : SapConfiguration
    {
        /// <summary> Initializes a new instance of <see cref="DeploymentConfiguration"/>. </summary>
        public DeploymentConfiguration() : base(SapConfigurationType.Deployment)
        {
        }

        /// <summary> Initializes a new instance of <see cref="DeploymentConfiguration"/>. </summary>
        /// <param name="configurationType"> The configuration type. Eg: Deployment/Discovery. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        /// <param name="appLocation"> The geo-location where the SAP system is to be created. </param>
        /// <param name="infrastructureConfiguration"> The infrastructure configuration. </param>
        /// <param name="softwareConfiguration"> The software configuration. </param>
        internal DeploymentConfiguration(SapConfigurationType configurationType, IDictionary<string, BinaryData> additionalBinaryDataProperties, AzureLocation? appLocation, InfrastructureConfiguration infrastructureConfiguration, SapSoftwareConfiguration softwareConfiguration) : base(configurationType, additionalBinaryDataProperties)
        {
            AppLocation = appLocation;
            InfrastructureConfiguration = infrastructureConfiguration;
            SoftwareConfiguration = softwareConfiguration;
        }

        /// <summary> The geo-location where the SAP system is to be created. </summary>
        public AzureLocation? AppLocation { get; set; }

        /// <summary> The infrastructure configuration. </summary>
        public InfrastructureConfiguration InfrastructureConfiguration { get; set; }

        /// <summary> The software configuration. </summary>
        internal SapSoftwareConfiguration SoftwareConfiguration { get; set; }

        /// <summary> The SAP software installation type. </summary>
        internal SapSoftwareInstallationType? SoftwareInstallationType
        {
            get
            {
                return SoftwareConfiguration is null ? default : SoftwareConfiguration.SoftwareInstallationType;
            }
            set
            {
                SoftwareConfiguration = value.HasValue ? new Models.SapSoftwareConfiguration(value.Value) : default;
            }
        }
    }
}
