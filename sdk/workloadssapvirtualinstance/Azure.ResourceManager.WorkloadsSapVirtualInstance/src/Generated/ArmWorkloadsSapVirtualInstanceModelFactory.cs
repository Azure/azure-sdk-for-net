// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmWorkloadsSapVirtualInstanceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="WorkloadsSapVirtualInstance.SapVirtualInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="environment"> Defines the environment type - Production/Non Production. </param>
        /// <param name="sapProduct"> Defines the SAP Product type. </param>
        /// <param name="managedResourcesNetworkAccessType"> Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228. </param>
        /// <param name="configuration">
        /// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
        /// Please note <see cref="SapConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeploymentConfiguration"/>, <see cref="DeploymentWithOSConfiguration"/> and <see cref="Models.DiscoveryConfiguration"/>.
        /// </param>
        /// <param name="managedResourceGroupName"> Managed resource group configuration. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <param name="state"> Defines the Virtual Instance for SAP state. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Indicates any errors on the Virtual Instance for SAP solutions resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapVirtualInstanceData"/> instance for mocking. </returns>
        public static SapVirtualInstanceData SapVirtualInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, SapEnvironmentType? environment = null, SapProductType? sapProduct = null, ManagedResourcesNetworkAccessType? managedResourcesNetworkAccessType = null, SapConfiguration configuration = null, string managedResourceGroupName = null, SapVirtualInstanceStatus? status = null, SapHealthState? health = null, SapVirtualInstanceState? state = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null, SapVirtualInstanceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SapVirtualInstanceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                environment,
                sapProduct,
                managedResourcesNetworkAccessType,
                configuration,
                managedResourceGroupName != null ? new ManagedRGConfiguration(managedResourceGroupName, serializedAdditionalRawData: null) : null,
                status,
                health,
                state,
                provisioningState,
                errorsProperties != null ? new SapVirtualInstanceError(errorsProperties, serializedAdditionalRawData: null) : null,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DiscoveryConfiguration"/>. </summary>
        /// <param name="centralServerVmId"> The virtual machine ID of the Central Server. </param>
        /// <param name="managedRgStorageAccountName"> The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.&lt;br&gt;&lt;br&gt;Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).&lt;br&gt;&lt;br&gt;If not provided, the service will create the storage account with a random name. </param>
        /// <param name="appLocation"> The geo-location where the SAP system exists. </param>
        /// <returns> A new <see cref="Models.DiscoveryConfiguration"/> instance for mocking. </returns>
        public static DiscoveryConfiguration DiscoveryConfiguration(ResourceIdentifier centralServerVmId = null, string managedRgStorageAccountName = null, AzureLocation? appLocation = null)
        {
            return new DiscoveryConfiguration(SapConfigurationType.Discovery, serializedAdditionalRawData: null, centralServerVmId, managedRgStorageAccountName, appLocation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapVirtualInstanceErrorDetail"/>. </summary>
        /// <param name="code"> Service specific error code which serves as the substatus for the HTTP error code. </param>
        /// <param name="message"> Description of the error. </param>
        /// <param name="details"> Internal error details. </param>
        /// <returns> A new <see cref="Models.SapVirtualInstanceErrorDetail"/> instance for mocking. </returns>
        public static SapVirtualInstanceErrorDetail SapVirtualInstanceErrorDetail(string code = null, string message = null, IEnumerable<SapVirtualInstanceErrorDetail> details = null)
        {
            details ??= new List<SapVirtualInstanceErrorDetail>();

            return new SapVirtualInstanceErrorDetail(code, message, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationStatusResult"/>. </summary>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="percentComplete"> Percent of the operation that is complete. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="operations"> The operations list. </param>
        /// <param name="error"> If present, details of the operation error. </param>
        /// <param name="resourceId"> Fully qualified ID of the resource against which the original async operation was started. </param>
        /// <returns> A new <see cref="Models.OperationStatusResult"/> instance for mocking. </returns>
        public static OperationStatusResult OperationStatusResult(ResourceIdentifier id = null, string name = null, string status = null, double? percentComplete = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<OperationStatusResult> operations = null, ResponseError error = null, ResourceIdentifier resourceId = null)
        {
            operations ??= new List<OperationStatusResult>();

            return new OperationStatusResult(
                id,
                name,
                status,
                percentComplete,
                startOn,
                endOn,
                operations?.ToList(),
                error,
                resourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapSizingRecommendationContent"/>. </summary>
        /// <param name="appLocation"> The geo-location where the resource is to be created. </param>
        /// <param name="environment"> Defines the environment type - Production/Non Production. </param>
        /// <param name="sapProduct"> Defines the SAP Product type. </param>
        /// <param name="deploymentType"> The deployment type. Eg: SingleServer/ThreeTier. </param>
        /// <param name="saps"> The SAP Application Performance Standard measurement. </param>
        /// <param name="dbMemory"> The database memory configuration. </param>
        /// <param name="databaseType"> The database type. </param>
        /// <param name="dbScaleMethod"> The DB scale method. </param>
        /// <param name="highAvailabilityType"> The high availability type. </param>
        /// <returns> A new <see cref="Models.SapSizingRecommendationContent"/> instance for mocking. </returns>
        public static SapSizingRecommendationContent SapSizingRecommendationContent(AzureLocation appLocation = default, SapEnvironmentType environment = default, SapProductType sapProduct = default, SapDeploymentType deploymentType = default, long saps = default, long dbMemory = default, SapDatabaseType databaseType = default, SapDatabaseScaleMethod? dbScaleMethod = null, SapHighAvailabilityType? highAvailabilityType = null)
        {
            return new SapSizingRecommendationContent(
                appLocation,
                environment,
                sapProduct,
                deploymentType,
                saps,
                dbMemory,
                databaseType,
                dbScaleMethod,
                highAvailabilityType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SingleServerRecommendationResult"/>. </summary>
        /// <param name="vmSku"> The recommended VM SKU for single server. </param>
        /// <returns> A new <see cref="Models.SingleServerRecommendationResult"/> instance for mocking. </returns>
        public static SingleServerRecommendationResult SingleServerRecommendationResult(string vmSku = null)
        {
            return new SingleServerRecommendationResult(SapDeploymentType.SingleServer, serializedAdditionalRawData: null, vmSku);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ThreeTierRecommendationResult"/>. </summary>
        /// <param name="dbVmSku"> The database VM SKU. </param>
        /// <param name="databaseInstanceCount"> The database server instance count. </param>
        /// <param name="centralServerVmSku"> The central server VM SKU. </param>
        /// <param name="centralServerInstanceCount"> The central server instance count. </param>
        /// <param name="applicationServerVmSku"> The application server VM SKU. </param>
        /// <param name="applicationServerInstanceCount"> The application server instance count. </param>
        /// <returns> A new <see cref="Models.ThreeTierRecommendationResult"/> instance for mocking. </returns>
        public static ThreeTierRecommendationResult ThreeTierRecommendationResult(string dbVmSku = null, long? databaseInstanceCount = null, string centralServerVmSku = null, long? centralServerInstanceCount = null, string applicationServerVmSku = null, long? applicationServerInstanceCount = null)
        {
            return new ThreeTierRecommendationResult(
                SapDeploymentType.ThreeTier,
                serializedAdditionalRawData: null,
                dbVmSku,
                databaseInstanceCount,
                centralServerVmSku,
                centralServerInstanceCount,
                applicationServerVmSku,
                applicationServerInstanceCount);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapSupportedSkusContent"/>. </summary>
        /// <param name="appLocation"> The geo-location where the resource is to be created. </param>
        /// <param name="environment"> Defines the environment type - Production/Non Production. </param>
        /// <param name="sapProduct"> Defines the SAP Product type. </param>
        /// <param name="deploymentType"> The deployment type. Eg: SingleServer/ThreeTier. </param>
        /// <param name="databaseType"> The database type. Eg: HANA, DB2, etc. </param>
        /// <param name="highAvailabilityType"> The high availability type. </param>
        /// <returns> A new <see cref="Models.SapSupportedSkusContent"/> instance for mocking. </returns>
        public static SapSupportedSkusContent SapSupportedSkusContent(AzureLocation appLocation = default, SapEnvironmentType environment = default, SapProductType sapProduct = default, SapDeploymentType deploymentType = default, SapDatabaseType databaseType = default, SapHighAvailabilityType? highAvailabilityType = null)
        {
            return new SapSupportedSkusContent(
                appLocation,
                environment,
                sapProduct,
                deploymentType,
                databaseType,
                highAvailabilityType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapSupportedResourceSkusResult"/>. </summary>
        /// <param name="supportedSkus"> Gets the list of SAP supported SKUs. </param>
        /// <returns> A new <see cref="Models.SapSupportedResourceSkusResult"/> instance for mocking. </returns>
        public static SapSupportedResourceSkusResult SapSupportedResourceSkusResult(IEnumerable<SapSupportedSku> supportedSkus = null)
        {
            supportedSkus ??= new List<SapSupportedSku>();

            return new SapSupportedResourceSkusResult(supportedSkus?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapSupportedSku"/>. </summary>
        /// <param name="vmSku"> The VM Sku. </param>
        /// <param name="isAppServerCertified"> True if the Sku is certified for App server in the SAP system. </param>
        /// <param name="isDatabaseCertified"> True if the Sku is certified for Database server in the SAP system. </param>
        /// <returns> A new <see cref="Models.SapSupportedSku"/> instance for mocking. </returns>
        public static SapSupportedSku SapSupportedSku(string vmSku = null, bool? isAppServerCertified = null, bool? isDatabaseCertified = null)
        {
            return new SapSupportedSku(vmSku, isAppServerCertified, isDatabaseCertified, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapDiskConfigurationsResult"/>. </summary>
        /// <param name="volumeConfigurations"> The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup']. </param>
        /// <returns> A new <see cref="Models.SapDiskConfigurationsResult"/> instance for mocking. </returns>
        public static SapDiskConfigurationsResult SapDiskConfigurationsResult(IReadOnlyDictionary<string, SapDiskConfiguration> volumeConfigurations = null)
        {
            volumeConfigurations ??= new Dictionary<string, SapDiskConfiguration>();

            return new SapDiskConfigurationsResult(volumeConfigurations, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapDiskConfiguration"/>. </summary>
        /// <param name="recommendedConfiguration"> The recommended disk details for a given VM Sku. </param>
        /// <param name="supportedConfigurations"> The list of supported disks for a given VM Sku. </param>
        /// <returns> A new <see cref="Models.SapDiskConfiguration"/> instance for mocking. </returns>
        public static SapDiskConfiguration SapDiskConfiguration(DiskVolumeConfiguration recommendedConfiguration = null, IEnumerable<SupportedConfigurationsDiskDetails> supportedConfigurations = null)
        {
            supportedConfigurations ??= new List<SupportedConfigurationsDiskDetails>();

            return new SapDiskConfiguration(recommendedConfiguration, supportedConfigurations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SupportedConfigurationsDiskDetails"/>. </summary>
        /// <param name="skuName"> The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS. </param>
        /// <param name="sizeInGB"> The disk size in GB. </param>
        /// <param name="minimumSupportedDiskCount"> The minimum supported disk count. </param>
        /// <param name="maximumSupportedDiskCount"> The maximum supported disk count. </param>
        /// <param name="iopsReadWrite"> The disk Iops. </param>
        /// <param name="mbpsReadWrite"> The disk provisioned throughput in MBps. </param>
        /// <param name="diskTier"> The disk tier, e.g. P10, E10. </param>
        /// <returns> A new <see cref="Models.SupportedConfigurationsDiskDetails"/> instance for mocking. </returns>
        public static SupportedConfigurationsDiskDetails SupportedConfigurationsDiskDetails(DiskDetailsDiskSkuName? skuName = null, long? sizeInGB = null, long? minimumSupportedDiskCount = null, long? maximumSupportedDiskCount = null, long? iopsReadWrite = null, long? mbpsReadWrite = null, string diskTier = null)
        {
            return new SupportedConfigurationsDiskDetails(
                skuName != null ? new SapDiskSku(skuName, serializedAdditionalRawData: null) : null,
                sizeInGB,
                minimumSupportedDiskCount,
                maximumSupportedDiskCount,
                iopsReadWrite,
                mbpsReadWrite,
                diskTier,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapAvailabilityZoneDetailsResult"/>. </summary>
        /// <param name="availabilityZonePairs"> Gets the list of availability zone pairs. </param>
        /// <returns> A new <see cref="Models.SapAvailabilityZoneDetailsResult"/> instance for mocking. </returns>
        public static SapAvailabilityZoneDetailsResult SapAvailabilityZoneDetailsResult(IEnumerable<SapAvailabilityZonePair> availabilityZonePairs = null)
        {
            availabilityZonePairs ??= new List<SapAvailabilityZonePair>();

            return new SapAvailabilityZoneDetailsResult(availabilityZonePairs?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SapAvailabilityZonePair"/>. </summary>
        /// <param name="zoneA"> The zone A. </param>
        /// <param name="zoneB"> The zone B. </param>
        /// <returns> A new <see cref="Models.SapAvailabilityZonePair"/> instance for mocking. </returns>
        public static SapAvailabilityZonePair SapAvailabilityZonePair(long? zoneA = null, long? zoneB = null)
        {
            return new SapAvailabilityZonePair(zoneA, zoneB, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadsSapVirtualInstance.SapCentralServerInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="instanceNo"> The central services instance number. </param>
        /// <param name="subnetId"> The central services instance subnet. </param>
        /// <param name="messageServerProperties"> Defines the SAP message server properties. </param>
        /// <param name="enqueueServerProperties"> Defines the SAP Enqueue Server properties. </param>
        /// <param name="gatewayServerProperties"> Defines the SAP Gateway Server properties. </param>
        /// <param name="enqueueReplicationServerProperties"> Defines the SAP Enqueue Replication Server (ERS) properties. </param>
        /// <param name="kernelVersion"> The central services instance Kernel Version. </param>
        /// <param name="kernelPatch"> The central services instance Kernel Patch level. </param>
        /// <param name="loadBalancerDetailsId"> The Load Balancer details such as LoadBalancer ID attached to ASCS Virtual Machines. </param>
        /// <param name="vmDetails"> The list of virtual machines corresponding to the Central Services instance. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the errors related to SAP Central Services Instance resource. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapCentralServerInstanceData"/> instance for mocking. </returns>
        public static SapCentralServerInstanceData SapCentralServerInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string instanceNo = null, ResourceIdentifier subnetId = null, MessageServerProperties messageServerProperties = null, EnqueueServerProperties enqueueServerProperties = null, GatewayServerProperties gatewayServerProperties = null, EnqueueReplicationServerProperties enqueueReplicationServerProperties = null, string kernelVersion = null, string kernelPatch = null, ResourceIdentifier loadBalancerDetailsId = null, IEnumerable<CentralServerVmDetails> vmDetails = null, SapVirtualInstanceStatus? status = null, SapHealthState? health = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            vmDetails ??= new List<CentralServerVmDetails>();

            return new SapCentralServerInstanceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                instanceNo,
                subnetId,
                messageServerProperties,
                enqueueServerProperties,
                gatewayServerProperties,
                enqueueReplicationServerProperties,
                kernelVersion,
                kernelPatch,
                loadBalancerDetailsId != null ? ResourceManagerModelFactory.SubResource(loadBalancerDetailsId) : null,
                vmDetails?.ToList(),
                status,
                health,
                provisioningState,
                errorsProperties != null ? new SapVirtualInstanceError(errorsProperties, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MessageServerProperties"/>. </summary>
        /// <param name="msPort"> message server port. </param>
        /// <param name="internalMsPort"> message server internal MS port. </param>
        /// <param name="httpPort"> message server HTTP Port. </param>
        /// <param name="httpsPort"> message server HTTPS Port. </param>
        /// <param name="hostname"> message server SAP Hostname. </param>
        /// <param name="ipAddress"> message server IP Address. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.MessageServerProperties"/> instance for mocking. </returns>
        public static MessageServerProperties MessageServerProperties(long? msPort = null, long? internalMsPort = null, long? httpPort = null, long? httpsPort = null, string hostname = null, IPAddress ipAddress = null, SapHealthState? health = null)
        {
            return new MessageServerProperties(
                msPort,
                internalMsPort,
                httpPort,
                httpsPort,
                hostname,
                ipAddress,
                health,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EnqueueServerProperties"/>. </summary>
        /// <param name="hostname"> Enqueue Server SAP Hostname. </param>
        /// <param name="ipAddress"> Enqueue Server SAP IP Address. </param>
        /// <param name="port"> Enqueue Server Port. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.EnqueueServerProperties"/> instance for mocking. </returns>
        public static EnqueueServerProperties EnqueueServerProperties(string hostname = null, IPAddress ipAddress = null, long? port = null, SapHealthState? health = null)
        {
            return new EnqueueServerProperties(hostname, ipAddress, port, health, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GatewayServerProperties"/>. </summary>
        /// <param name="port"> Gateway Port. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.GatewayServerProperties"/> instance for mocking. </returns>
        public static GatewayServerProperties GatewayServerProperties(long? port = null, SapHealthState? health = null)
        {
            return new GatewayServerProperties(port, health, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EnqueueReplicationServerProperties"/>. </summary>
        /// <param name="ersVersion"> Defines the type of Enqueue Replication Server. </param>
        /// <param name="instanceNo"> ERS Instance Number. </param>
        /// <param name="hostname"> ERS SAP Hostname. </param>
        /// <param name="kernelVersion"> ERS SAP Kernel Version. </param>
        /// <param name="kernelPatch"> ERS SAP Kernel Patch level. </param>
        /// <param name="ipAddress"> ERS SAP IP Address. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.EnqueueReplicationServerProperties"/> instance for mocking. </returns>
        public static EnqueueReplicationServerProperties EnqueueReplicationServerProperties(EnqueueReplicationServerType? ersVersion = null, string instanceNo = null, string hostname = null, string kernelVersion = null, string kernelPatch = null, IPAddress ipAddress = null, SapHealthState? health = null)
        {
            return new EnqueueReplicationServerProperties(
                ersVersion,
                instanceNo,
                hostname,
                kernelVersion,
                kernelPatch,
                ipAddress,
                health,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CentralServerVmDetails"/>. </summary>
        /// <param name="virtualMachineType"> Defines the type of central server VM. </param>
        /// <param name="virtualMachineId"> The virtual machine id. </param>
        /// <param name="storageDetails"> Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage. </param>
        /// <returns> A new <see cref="Models.CentralServerVmDetails"/> instance for mocking. </returns>
        public static CentralServerVmDetails CentralServerVmDetails(CentralServerVirtualMachineType? virtualMachineType = null, ResourceIdentifier virtualMachineId = null, IEnumerable<SubResource> storageDetails = null)
        {
            storageDetails ??= new List<SubResource>();

            return new CentralServerVmDetails(virtualMachineType, virtualMachineId, storageDetails?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadsSapVirtualInstance.SapDatabaseInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="subnetId"> Database subnet. </param>
        /// <param name="databaseSid"> Database SID name. </param>
        /// <param name="databaseType"> Database type, that is if the DB is HANA, DB2, Oracle, SAP ASE, Max DB or MS SQL Server. </param>
        /// <param name="ipAddress"> Database IP Address. </param>
        /// <param name="loadBalancerDetailsId"> The Load Balancer details such as LoadBalancer ID attached to Database Virtual Machines. </param>
        /// <param name="vmDetails"> The list of virtual machines corresponding to the Database resource. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the errors related to Database resource. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapDatabaseInstanceData"/> instance for mocking. </returns>
        public static SapDatabaseInstanceData SapDatabaseInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceIdentifier subnetId = null, string databaseSid = null, string databaseType = null, IPAddress ipAddress = null, ResourceIdentifier loadBalancerDetailsId = null, IEnumerable<DatabaseVmDetails> vmDetails = null, SapVirtualInstanceStatus? status = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            vmDetails ??= new List<DatabaseVmDetails>();

            return new SapDatabaseInstanceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                subnetId,
                databaseSid,
                databaseType,
                ipAddress,
                loadBalancerDetailsId != null ? ResourceManagerModelFactory.SubResource(loadBalancerDetailsId) : null,
                vmDetails?.ToList(),
                status,
                provisioningState,
                errorsProperties != null ? new SapVirtualInstanceError(errorsProperties, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatabaseVmDetails"/>. </summary>
        /// <param name="virtualMachineId"> The virtual machine id. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="storageDetails"> Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage. </param>
        /// <returns> A new <see cref="Models.DatabaseVmDetails"/> instance for mocking. </returns>
        public static DatabaseVmDetails DatabaseVmDetails(ResourceIdentifier virtualMachineId = null, SapVirtualInstanceStatus? status = null, IEnumerable<SubResource> storageDetails = null)
        {
            storageDetails ??= new List<SubResource>();

            return new DatabaseVmDetails(virtualMachineId, status, storageDetails?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="WorkloadsSapVirtualInstance.SapApplicationServerInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="instanceNo"> Application server Instance Number. </param>
        /// <param name="subnetId"> Application server Subnet. </param>
        /// <param name="hostname"> Application server instance SAP hostname. </param>
        /// <param name="kernelVersion"> Application server instance SAP Kernel Version. </param>
        /// <param name="kernelPatch"> Application server instance SAP Kernel Patch level. </param>
        /// <param name="ipAddress"> Application server instance SAP IP Address. </param>
        /// <param name="gatewayPort"> Application server instance gateway Port. </param>
        /// <param name="icmHttpPort"> Application server instance ICM HTTP Port. </param>
        /// <param name="icmHttpsPort"> Application server instance ICM HTTPS Port. </param>
        /// <param name="dispatcherStatus"> Application server instance dispatcher status. </param>
        /// <param name="loadBalancerDetailsId"> The Load Balancer details such as LoadBalancer ID attached to Application Server Virtual Machines. </param>
        /// <param name="vmDetails"> The list of virtual machines. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the Application Instance errors. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapApplicationServerInstanceData"/> instance for mocking. </returns>
        public static SapApplicationServerInstanceData SapApplicationServerInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string instanceNo = null, ResourceIdentifier subnetId = null, string hostname = null, string kernelVersion = null, string kernelPatch = null, IPAddress ipAddress = null, long? gatewayPort = null, long? icmHttpPort = null, long? icmHttpsPort = null, string dispatcherStatus = null, ResourceIdentifier loadBalancerDetailsId = null, IEnumerable<ApplicationServerVmDetails> vmDetails = null, SapVirtualInstanceStatus? status = null, SapHealthState? health = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            vmDetails ??= new List<ApplicationServerVmDetails>();

            return new SapApplicationServerInstanceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                instanceNo,
                subnetId,
                hostname,
                kernelVersion,
                kernelPatch,
                ipAddress,
                gatewayPort,
                icmHttpPort,
                icmHttpsPort,
                dispatcherStatus,
                loadBalancerDetailsId != null ? ResourceManagerModelFactory.SubResource(loadBalancerDetailsId) : null,
                vmDetails?.ToList(),
                status,
                health,
                provisioningState,
                errorsProperties != null ? new SapVirtualInstanceError(errorsProperties, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApplicationServerVmDetails"/>. </summary>
        /// <param name="virtualMachineType"> Defines the type of application server VM. </param>
        /// <param name="virtualMachineId"> The virtual machine id. </param>
        /// <param name="storageDetails"> Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage. </param>
        /// <returns> A new <see cref="Models.ApplicationServerVmDetails"/> instance for mocking. </returns>
        public static ApplicationServerVmDetails ApplicationServerVmDetails(ApplicationServerVirtualMachineType? virtualMachineType = null, ResourceIdentifier virtualMachineId = null, IEnumerable<SubResource> storageDetails = null)
        {
            storageDetails ??= new List<SubResource>();

            return new ApplicationServerVmDetails(virtualMachineType, virtualMachineId, storageDetails?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
