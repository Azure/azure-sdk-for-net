// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.WorkloadsSapVirtualInstance;

namespace Azure.ResourceManager.WorkloadsSapVirtualInstance.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmWorkloadsSapVirtualInstanceModelFactory
    {

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="environment"> Defines the environment type - Production/Non Production. </param>
        /// <param name="sapProduct"> Defines the SAP Product type. </param>
        /// <param name="managedResourcesNetworkAccessType"> Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <param name="state"> Defines the Virtual Instance for SAP state. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="managedResourceGroupName"> Managed resource group name. </param>
        /// <param name="errorsProperties"> The Virtual Instance for SAP error body. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapVirtualInstanceData"/> instance for mocking. </returns>
        public static SapVirtualInstanceData SapVirtualInstanceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, SapEnvironmentType? environment = default, SapProductType? sapProduct = default, ManagedResourcesNetworkAccessType? managedResourcesNetworkAccessType = default, SapVirtualInstanceStatus? status = default, SapHealthState? health = default, SapVirtualInstanceState? state = default, SapVirtualInstanceProvisioningState? provisioningState = default, string managedResourceGroupName = default, SapVirtualInstanceErrorDetail errorsProperties = default, SapVirtualInstanceIdentity identity = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapVirtualInstanceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                environment is null || sapProduct is null || managedResourcesNetworkAccessType is null || status is null || health is null || state is null || provisioningState is null || managedResourceGroupName is null || errorsProperties is null ? default : new SapVirtualInstanceProperties(
                    environment.Value,
                    sapProduct.Value,
                    managedResourcesNetworkAccessType,
                    new Models.SapConfiguration(configurationType.Value, new Dictionary<string, BinaryData>()),
                    new ManagedRGConfiguration(managedResourceGroupName, new Dictionary<string, BinaryData>()),
                    new Dictionary<string, BinaryData>()),
                identity);
        }

        /// <summary> Error definition. </summary>
        /// <param name="code"> Service specific error code which serves as the substatus for the HTTP error code. </param>
        /// <param name="message"> Description of the error. </param>
        /// <param name="details"> Internal error details. </param>
        /// <returns> A new <see cref="Models.SapVirtualInstanceErrorDetail"/> instance for mocking. </returns>
        public static SapVirtualInstanceErrorDetail SapVirtualInstanceErrorDetail(string code = default, string message = default, IEnumerable<SapVirtualInstanceErrorDetail> details = default)
        {
            details ??= new ChangeTrackingList<SapVirtualInstanceErrorDetail>();

            return new SapVirtualInstanceErrorDetail(code, message, details.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Managed service identity (user assigned identities). </summary>
        /// <param name="type"> The type of managed identity assigned to this resource. </param>
        /// <param name="userAssignedIdentities"> The identities assigned to this resource by the user. </param>
        /// <returns> A new <see cref="Models.SapVirtualInstanceIdentity"/> instance for mocking. </returns>
        public static SapVirtualInstanceIdentity SapVirtualInstanceIdentity(SapVirtualInstanceIdentityType @type = default, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = default)
        {
            userAssignedIdentities ??= new ChangeTrackingDictionary<string, UserAssignedIdentity>();

            return new SapVirtualInstanceIdentity(@type, userAssignedIdentities, additionalBinaryDataProperties: null);
        }

        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <param name="identity"> Managed service identity (user assigned identities). </param>
        /// <param name="updateSapVirtualInstanceManagedResourcesNetworkAccessType"> Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228. </param>
        /// <returns> A new <see cref="Models.SapVirtualInstancePatch"/> instance for mocking. </returns>
        public static SapVirtualInstancePatch SapVirtualInstancePatch(IDictionary<string, string> tags = default, SapVirtualInstanceIdentity identity = default, ManagedResourcesNetworkAccessType? updateSapVirtualInstanceManagedResourcesNetworkAccessType = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapVirtualInstancePatch(tags, identity, updateSapVirtualInstanceManagedResourcesNetworkAccessType is null ? default : new UpdateSapVirtualInstanceProperties(updateSapVirtualInstanceManagedResourcesNetworkAccessType, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="instanceNo"> The central services instance number. </param>
        /// <param name="subnetId"> The central services instance subnet. </param>
        /// <param name="messageServerProperties"> Defines the SAP message server properties. </param>
        /// <param name="enqueueServerProperties"> Defines the SAP Enqueue Server properties. </param>
        /// <param name="gatewayServerProperties"> Defines the SAP Gateway Server properties. </param>
        /// <param name="enqueueReplicationServerProperties"> Defines the SAP Enqueue Replication Server (ERS) properties. </param>
        /// <param name="kernelVersion"> The central services instance Kernel Version. </param>
        /// <param name="kernelPatch"> The central services instance Kernel Patch level. </param>
        /// <param name="vmDetails"> The list of virtual machines corresponding to the Central Services instance. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="loadBalancerDetailsId"> Fully qualified resource ID for the load balancer. </param>
        /// <param name="errorsProperties"> The Virtual Instance for SAP error body. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapCentralServerInstanceData"/> instance for mocking. </returns>
        public static SapCentralServerInstanceData SapCentralServerInstanceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, string instanceNo = default, ResourceIdentifier subnetId = default, MessageServerProperties messageServerProperties = default, EnqueueServerProperties enqueueServerProperties = default, GatewayServerProperties gatewayServerProperties = default, EnqueueReplicationServerProperties enqueueReplicationServerProperties = default, string kernelVersion = default, string kernelPatch = default, IReadOnlyList<CentralServerVmDetails> vmDetails = default, SapVirtualInstanceStatus? status = default, SapHealthState? health = default, SapVirtualInstanceProvisioningState? provisioningState = default, string loadBalancerDetailsId = default, SapVirtualInstanceErrorDetail errorsProperties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapCentralServerInstanceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                instanceNo is null || subnetId is null || messageServerProperties is null || enqueueServerProperties is null || gatewayServerProperties is null || enqueueReplicationServerProperties is null || kernelVersion is null || kernelPatch is null || vmDetails is null || status is null || health is null || provisioningState is null || loadBalancerDetailsId is null || errorsProperties is null ? default : new SapCentralServerProperties(
                    instanceNo,
                    subnetId,
                    messageServerProperties,
                    enqueueServerProperties,
                    gatewayServerProperties,
                    enqueueReplicationServerProperties,
                    kernelVersion,
                    kernelPatch,
                    new LoadBalancerDetails(loadBalancerDetailsId, new Dictionary<string, BinaryData>()),
                    new SapVirtualInstanceError(errorsProperties, new Dictionary<string, BinaryData>()),
                    new Dictionary<string, BinaryData>()));
        }

        /// <summary> Defines the SAP message server properties. </summary>
        /// <param name="msPort"> message server port. </param>
        /// <param name="internalMsPort"> message server internal MS port. </param>
        /// <param name="httpPort"> message server HTTP Port. </param>
        /// <param name="httpsPort"> message server HTTPS Port. </param>
        /// <param name="hostname"> message server SAP Hostname. </param>
        /// <param name="ipAddress"> message server IP Address. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.MessageServerProperties"/> instance for mocking. </returns>
        public static MessageServerProperties MessageServerProperties(long? msPort = default, long? internalMsPort = default, long? httpPort = default, long? httpsPort = default, string hostname = default, IPAddress ipAddress = default, SapHealthState? health = default)
        {
            return new MessageServerProperties(
                msPort,
                internalMsPort,
                httpPort,
                httpsPort,
                hostname,
                ipAddress,
                health,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the SAP Enqueue Server properties. </summary>
        /// <param name="hostname"> Enqueue Server SAP Hostname. </param>
        /// <param name="ipAddress"> Enqueue Server SAP IP Address. </param>
        /// <param name="port"> Enqueue Server Port. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.EnqueueServerProperties"/> instance for mocking. </returns>
        public static EnqueueServerProperties EnqueueServerProperties(string hostname = default, IPAddress ipAddress = default, long? port = default, SapHealthState? health = default)
        {
            return new EnqueueServerProperties(hostname, ipAddress, port, health, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the SAP Gateway Server properties. </summary>
        /// <param name="port"> Gateway Port. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.GatewayServerProperties"/> instance for mocking. </returns>
        public static GatewayServerProperties GatewayServerProperties(long? port = default, SapHealthState? health = default)
        {
            return new GatewayServerProperties(port, health, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the SAP Enqueue Replication Server (ERS) properties. </summary>
        /// <param name="ersVersion"> Defines the type of Enqueue Replication Server. </param>
        /// <param name="instanceNo"> ERS Instance Number. </param>
        /// <param name="hostname"> ERS SAP Hostname. </param>
        /// <param name="kernelVersion"> ERS SAP Kernel Version. </param>
        /// <param name="kernelPatch"> ERS SAP Kernel Patch level. </param>
        /// <param name="ipAddress"> ERS SAP IP Address. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <returns> A new <see cref="Models.EnqueueReplicationServerProperties"/> instance for mocking. </returns>
        public static EnqueueReplicationServerProperties EnqueueReplicationServerProperties(EnqueueReplicationServerType? ersVersion = default, string instanceNo = default, string hostname = default, string kernelVersion = default, string kernelPatch = default, IPAddress ipAddress = default, SapHealthState? health = default)
        {
            return new EnqueueReplicationServerProperties(
                ersVersion,
                instanceNo,
                hostname,
                kernelVersion,
                kernelPatch,
                ipAddress,
                health,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The SAP Central Services Instance VM details. </summary>
        /// <param name="virtualMachineType"> Defines the type of central server VM. </param>
        /// <param name="virtualMachineId"> The virtual machine id. </param>
        /// <param name="storageDetails"> Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage. </param>
        /// <returns> A new <see cref="Models.CentralServerVmDetails"/> instance for mocking. </returns>
        public static CentralServerVmDetails CentralServerVmDetails(CentralServerVirtualMachineType? virtualMachineType = default, ResourceIdentifier virtualMachineId = default, IEnumerable<StorageInformation> storageDetails = default)
        {
            storageDetails ??= new ChangeTrackingList<StorageInformation>();

            return new CentralServerVmDetails(virtualMachineType, virtualMachineId, storageDetails.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage. </summary>
        /// <param name="id"> Fully qualified resource ID for the storage account. </param>
        /// <returns> A new <see cref="Models.StorageInformation"/> instance for mocking. </returns>
        public static StorageInformation StorageInformation(string id = default)
        {
            return new StorageInformation(id, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the request body for updating SAP Central Instance. </summary>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <returns> A new <see cref="Models.SapCentralServerInstancePatch"/> instance for mocking. </returns>
        public static SapCentralServerInstancePatch SapCentralServerInstancePatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapCentralServerInstancePatch(tags, additionalBinaryDataProperties: null);
        }

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="subnetId"> Database subnet. </param>
        /// <param name="databaseSid"> Database SID name. </param>
        /// <param name="databaseType"> Database type, that is if the DB is HANA, DB2, Oracle, SAP ASE, Max DB or MS SQL Server. </param>
        /// <param name="ipAddress"> Database IP Address. </param>
        /// <param name="vmDetails"> The list of virtual machines corresponding to the Database resource. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="loadBalancerDetailsId"> Fully qualified resource ID for the load balancer. </param>
        /// <param name="errorsProperties"> The Virtual Instance for SAP error body. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapDatabaseInstanceData"/> instance for mocking. </returns>
        public static SapDatabaseInstanceData SapDatabaseInstanceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, ResourceIdentifier subnetId = default, string databaseSid = default, string databaseType = default, IPAddress ipAddress = default, IReadOnlyList<DatabaseVmDetails> vmDetails = default, SapVirtualInstanceStatus? status = default, SapVirtualInstanceProvisioningState? provisioningState = default, string loadBalancerDetailsId = default, SapVirtualInstanceErrorDetail errorsProperties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapDatabaseInstanceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                subnetId is null || databaseSid is null || databaseType is null || ipAddress is null || vmDetails is null || status is null || provisioningState is null || loadBalancerDetailsId is null || errorsProperties is null ? default : new SapDatabaseProperties(
                    subnetId,
                    databaseSid,
                    databaseType,
                    ipAddress,
                    new LoadBalancerDetails(loadBalancerDetailsId, new Dictionary<string, BinaryData>()),
                    new SapVirtualInstanceError(errorsProperties, new Dictionary<string, BinaryData>()),
                    new Dictionary<string, BinaryData>()));
        }

        /// <summary> Database VM details. </summary>
        /// <param name="virtualMachineId"> The virtual machine id. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="storageDetails"> Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage. </param>
        /// <returns> A new <see cref="Models.DatabaseVmDetails"/> instance for mocking. </returns>
        public static DatabaseVmDetails DatabaseVmDetails(ResourceIdentifier virtualMachineId = default, SapVirtualInstanceStatus? status = default, IEnumerable<StorageInformation> storageDetails = default)
        {
            storageDetails ??= new ChangeTrackingList<StorageInformation>();

            return new DatabaseVmDetails(virtualMachineId, status, storageDetails.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the request body for updating SAP Database Instance. </summary>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <returns> A new <see cref="Models.SapDatabaseInstancePatch"/> instance for mocking. </returns>
        public static SapDatabaseInstancePatch SapDatabaseInstancePatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapDatabaseInstancePatch(tags, additionalBinaryDataProperties: null);
        }

        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="instanceNo"> Application server Instance Number. </param>
        /// <param name="subnetId"> Application server Subnet. </param>
        /// <param name="hostname"> Application server instance SAP hostname. </param>
        /// <param name="kernelVersion"> Application server instance SAP Kernel Version. </param>
        /// <param name="kernelPatch"> Application server instance SAP Kernel Patch level. </param>
        /// <param name="ipAddress"> Application server instance SAP IP Address. </param>
        /// <param name="gatewayPort"> Application server instance gateway Port. </param>
        /// <param name="icmHttpPort"> Application server instance ICM HTTP Port. </param>
        /// <param name="icmHttpsPort"> Application server instance ICM HTTPS Port. </param>
        /// <param name="dispatcherStatus"> Application server instance dispatcher status. </param>
        /// <param name="vmDetails"> The list of virtual machines. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the health of SAP Instances. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="loadBalancerDetailsId"> Fully qualified resource ID for the load balancer. </param>
        /// <param name="errorsProperties"> The Virtual Instance for SAP error body. </param>
        /// <returns> A new <see cref="WorkloadsSapVirtualInstance.SapApplicationServerInstanceData"/> instance for mocking. </returns>
        public static SapApplicationServerInstanceData SapApplicationServerInstanceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, string instanceNo = default, ResourceIdentifier subnetId = default, string hostname = default, string kernelVersion = default, string kernelPatch = default, IPAddress ipAddress = default, long? gatewayPort = default, long? icmHttpPort = default, long? icmHttpsPort = default, string dispatcherStatus = default, IReadOnlyList<ApplicationServerVmDetails> vmDetails = default, SapVirtualInstanceStatus? status = default, SapHealthState? health = default, SapVirtualInstanceProvisioningState? provisioningState = default, string loadBalancerDetailsId = default, SapVirtualInstanceErrorDetail errorsProperties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapApplicationServerInstanceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                instanceNo is null || subnetId is null || hostname is null || kernelVersion is null || kernelPatch is null || ipAddress is null || gatewayPort is null || icmHttpPort is null || icmHttpsPort is null || dispatcherStatus is null || vmDetails is null || status is null || health is null || provisioningState is null || loadBalancerDetailsId is null || errorsProperties is null ? default : new SapApplicationServerProperties(
                    instanceNo,
                    subnetId,
                    hostname,
                    kernelVersion,
                    kernelPatch,
                    ipAddress,
                    gatewayPort,
                    icmHttpPort,
                    icmHttpsPort,
                    dispatcherStatus,
                    new LoadBalancerDetails(loadBalancerDetailsId, new Dictionary<string, BinaryData>()),
                    new SapVirtualInstanceError(errorsProperties, new Dictionary<string, BinaryData>()),
                    new Dictionary<string, BinaryData>()));
        }

        /// <summary> The Application Server VM Details. </summary>
        /// <param name="virtualMachineType"> Defines the type of application server VM. </param>
        /// <param name="virtualMachineId"> The virtual machine id. </param>
        /// <param name="storageDetails"> Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage. </param>
        /// <returns> A new <see cref="Models.ApplicationServerVmDetails"/> instance for mocking. </returns>
        public static ApplicationServerVmDetails ApplicationServerVmDetails(ApplicationServerVirtualMachineType? virtualMachineType = default, ResourceIdentifier virtualMachineId = default, IEnumerable<StorageInformation> storageDetails = default)
        {
            storageDetails ??= new ChangeTrackingList<StorageInformation>();

            return new ApplicationServerVmDetails(virtualMachineType, virtualMachineId, storageDetails.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the request body for updating SAP Application Instance. </summary>
        /// <param name="tags"> Gets or sets the Resource tags. </param>
        /// <returns> A new <see cref="Models.SapApplicationServerInstancePatch"/> instance for mocking. </returns>
        public static SapApplicationServerInstancePatch SapApplicationServerInstancePatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new SapApplicationServerInstancePatch(tags, additionalBinaryDataProperties: null);
        }
    }
}
