// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Search.Models
{
    /// <summary> The limits associated with this SKU offered in this region. </summary>
    public partial class SearchServiceSkuOfferingLimits
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SearchServiceSkuOfferingLimits"/>. </summary>
        internal SearchServiceSkuOfferingLimits()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SearchServiceSkuOfferingLimits"/>. </summary>
        /// <param name="indexes"> The maximum number of indexes available for this SKU. </param>
        /// <param name="indexers"> The maximum number of indexers available for this SKU. </param>
        /// <param name="partitionStorageInGigabytes"> The maximum storage size in Gigabytes available for this SKU per partition. </param>
        /// <param name="partitionVectorStorageInGigabytes"> The maximum vector storage size in Gigabytes available for this SKU per partition. </param>
        /// <param name="searchUnits"> The maximum number of search units available for this SKU. </param>
        /// <param name="replicas"> The maximum number of replicas available for this SKU. </param>
        /// <param name="partitions"> The maximum number of partitions available for this SKU. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SearchServiceSkuOfferingLimits(int? indexes, int? indexers, float? partitionStorageInGigabytes, float? partitionVectorStorageInGigabytes, int? searchUnits, int? replicas, int? partitions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Indexes = indexes;
            Indexers = indexers;
            PartitionStorageInGigabytes = partitionStorageInGigabytes;
            PartitionVectorStorageInGigabytes = partitionVectorStorageInGigabytes;
            SearchUnits = searchUnits;
            Replicas = replicas;
            Partitions = partitions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The maximum number of indexes available for this SKU. </summary>
        [WirePath("indexes")]
        public int? Indexes { get; }
        /// <summary> The maximum number of indexers available for this SKU. </summary>
        [WirePath("indexers")]
        public int? Indexers { get; }
        /// <summary> The maximum storage size in Gigabytes available for this SKU per partition. </summary>
        [WirePath("partitionStorageInGigabytes")]
        public float? PartitionStorageInGigabytes { get; }
        /// <summary> The maximum vector storage size in Gigabytes available for this SKU per partition. </summary>
        [WirePath("partitionVectorStorageInGigabytes")]
        public float? PartitionVectorStorageInGigabytes { get; }
        /// <summary> The maximum number of search units available for this SKU. </summary>
        [WirePath("searchUnits")]
        public int? SearchUnits { get; }
        /// <summary> The maximum number of replicas available for this SKU. </summary>
        [WirePath("replicas")]
        public int? Replicas { get; }
        /// <summary> The maximum number of partitions available for this SKU. </summary>
        [WirePath("partitions")]
        public int? Partitions { get; }
    }
}
