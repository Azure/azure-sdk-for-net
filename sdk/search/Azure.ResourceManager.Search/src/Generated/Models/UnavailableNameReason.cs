// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Search.Models
{
    /// <summary> The reason why the name is not available. &apos;Invalid&apos; indicates the name provided does not match the naming requirements (incorrect length, unsupported characters, etc.). &apos;AlreadyExists&apos; indicates that the name is already in use and is therefore unavailable. </summary>
    public readonly partial struct UnavailableNameReason : IEquatable<UnavailableNameReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UnavailableNameReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UnavailableNameReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string AlreadyExistsValue = "AlreadyExists";

        /// <summary> Invalid. </summary>
        public static UnavailableNameReason Invalid { get; } = new UnavailableNameReason(InvalidValue);
        /// <summary> AlreadyExists. </summary>
        public static UnavailableNameReason AlreadyExists { get; } = new UnavailableNameReason(AlreadyExistsValue);
        /// <summary> Determines if two <see cref="UnavailableNameReason"/> values are the same. </summary>
        public static bool operator ==(UnavailableNameReason left, UnavailableNameReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UnavailableNameReason"/> values are not the same. </summary>
        public static bool operator !=(UnavailableNameReason left, UnavailableNameReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UnavailableNameReason"/>. </summary>
        public static implicit operator UnavailableNameReason(string value) => new UnavailableNameReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UnavailableNameReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UnavailableNameReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
