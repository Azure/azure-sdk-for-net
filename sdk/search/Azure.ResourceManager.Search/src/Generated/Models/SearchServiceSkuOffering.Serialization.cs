// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
namespace Azure.ResourceManager.HybridCompute.Models
{
    public partial class HybridComputeProcessor : IUtf8JsonSerializable, IJsonModel<HybridComputeProcessor>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HybridComputeProcessor>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HybridComputeProcessor>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
========
namespace Azure.ResourceManager.Search.Models
{
    public partial class SearchServiceSkuOffering : IUtf8JsonSerializable, IJsonModel<SearchServiceSkuOffering>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SearchServiceSkuOffering>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SearchServiceSkuOffering>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
            var format = options.Format == "W" ? ((IPersistableModel<HybridComputeProcessor>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HybridComputeProcessor)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfCores))
            {
                writer.WritePropertyName("numberOfCores"u8);
                writer.WriteNumberValue(NumberOfCores.Value);
========
            var format = options.Format == "W" ? ((IPersistableModel<SearchServiceSkuOffering>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SearchServiceSkuOffering)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku, options);
            }
            if (Optional.IsDefined(Limits))
            {
                writer.WritePropertyName("limits"u8);
                writer.WriteObjectValue(Limits, options);
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
        HybridComputeProcessor IJsonModel<HybridComputeProcessor>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HybridComputeProcessor>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HybridComputeProcessor)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHybridComputeProcessor(document.RootElement, options);
        }

        internal static HybridComputeProcessor DeserializeHybridComputeProcessor(JsonElement element, ModelReaderWriterOptions options = null)
========
        SearchServiceSkuOffering IJsonModel<SearchServiceSkuOffering>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SearchServiceSkuOffering>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SearchServiceSkuOffering)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSearchServiceSkuOffering(document.RootElement, options);
        }

        internal static SearchServiceSkuOffering DeserializeSearchServiceSkuOffering(JsonElement element, ModelReaderWriterOptions options = null)
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
            string name = default;
            int? numberOfCores = default;
========
            SearchSku sku = default;
            SearchServiceSkuOfferingLimits limits = default;
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfCores"u8))
========
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = SearchSku.DeserializeSearchSku(property.Value, options);
                    continue;
                }
                if (property.NameEquals("limits"u8))
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
                    numberOfCores = property.Value.GetInt32();
========
                    limits = SearchServiceSkuOfferingLimits.DeserializeSearchServiceSkuOfferingLimits(property.Value, options);
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
            return new HybridComputeProcessor(name, numberOfCores, serializedAdditionalRawData);
========
            return new SearchServiceSkuOffering(sku, limits, serializedAdditionalRawData);
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Name), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  name: ");
========
            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue("SkuName", out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  sku: ");
                builder.AppendLine("{");
                builder.Append("    name: ");
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
                builder.AppendLine(propertyOverride);
                builder.AppendLine("  }");
            }
            else
            {
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
                if (Optional.IsDefined(Name))
                {
                    builder.Append("  name: ");
                    if (Name.Contains(Environment.NewLine))
                    {
                        builder.AppendLine("'''");
                        builder.AppendLine($"{Name}'''");
                    }
                    else
                    {
                        builder.AppendLine($"'{Name}'");
                    }
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(NumberOfCores), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  numberOfCores: ");
========
                if (Optional.IsDefined(Sku))
                {
                    builder.Append("  sku: ");
                    BicepSerializationHelpers.AppendChildObject(builder, Sku, options, 2, false, "  sku: ");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(Limits), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  limits: ");
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
                builder.AppendLine(propertyOverride);
            }
            else
            {
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
                if (Optional.IsDefined(NumberOfCores))
                {
                    builder.Append("  numberOfCores: ");
                    builder.AppendLine($"{NumberOfCores.Value}");
========
                if (Optional.IsDefined(Limits))
                {
                    builder.Append("  limits: ");
                    BicepSerializationHelpers.AppendChildObject(builder, Limits, options, 2, false, "  limits: ");
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
        BinaryData IPersistableModel<HybridComputeProcessor>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HybridComputeProcessor>)this).GetFormatFromOptions(options) : options.Format;
========
        BinaryData IPersistableModel<SearchServiceSkuOffering>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SearchServiceSkuOffering>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
                    throw new FormatException($"The model {nameof(HybridComputeProcessor)} does not support writing '{options.Format}' format.");
            }
        }

        HybridComputeProcessor IPersistableModel<HybridComputeProcessor>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HybridComputeProcessor>)this).GetFormatFromOptions(options) : options.Format;
========
                    throw new FormatException($"The model {nameof(SearchServiceSkuOffering)} does not support writing '{options.Format}' format.");
            }
        }

        SearchServiceSkuOffering IPersistableModel<SearchServiceSkuOffering>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SearchServiceSkuOffering>)this).GetFormatFromOptions(options) : options.Format;
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs

            switch (format)
            {
                case "J":
                    {
<<<<<<<< HEAD:sdk/hybridcompute/Azure.ResourceManager.HybridCompute/src/Generated/Models/HybridComputeProcessor.Serialization.cs
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeHybridComputeProcessor(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HybridComputeProcessor)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HybridComputeProcessor>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
========
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSearchServiceSkuOffering(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SearchServiceSkuOffering)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SearchServiceSkuOffering>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
>>>>>>>> main:sdk/search/Azure.ResourceManager.Search/src/Generated/Models/SearchServiceSkuOffering.Serialization.cs
    }
}
