// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Search.Models
{
    /// <summary> The SearchServiceSkuOffering. </summary>
    public partial class SearchServiceSkuOffering
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SearchServiceSkuOffering"/>. </summary>
        internal SearchServiceSkuOffering()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SearchServiceSkuOffering"/>. </summary>
        /// <param name="sku"> Defines the SKU of a search service, which determines billing rate and capacity limits. </param>
        /// <param name="limits"> The limits associated with this SKU offered in this region. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SearchServiceSkuOffering(SearchSku sku, SearchServiceSkuOfferingLimits limits, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Sku = sku;
            Limits = limits;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Defines the SKU of a search service, which determines billing rate and capacity limits. </summary>
        internal SearchSku Sku { get; }
        /// <summary> The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas. 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to 'highDensity'). 'storage_optimized_l1': Supports 1TB per partition, up to 12 partitions. 'storage_optimized_l2': Supports 2TB per partition, up to 12 partitions.'. </summary>
        [WirePath("sku.name")]
        public SearchServiceSkuName? SkuName
        {
            get => Sku?.Name;
        }

        /// <summary> The limits associated with this SKU offered in this region. </summary>
        [WirePath("limits")]
        public SearchServiceSkuOfferingLimits Limits { get; }
    }
}
