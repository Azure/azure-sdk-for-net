// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Search.Models
{
    /// <summary> The provisioning state of the private link service connection. Can be Updating, Deleting, Failed, Succeeded, or Incomplete. </summary>
    public readonly partial struct PrivateLinkServiceConnectionProvisioningState : IEquatable<PrivateLinkServiceConnectionProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PrivateLinkServiceConnectionProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PrivateLinkServiceConnectionProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";
        private const string IncompleteValue = "Incomplete";
        private const string CanceledValue = "Canceled";

        /// <summary> The private link service connection is in the process of being created along with other resources for it to be fully functional. </summary>
        public static PrivateLinkServiceConnectionProvisioningState Updating { get; } = new PrivateLinkServiceConnectionProvisioningState(UpdatingValue);
        /// <summary> The private link service connection is in the process of being deleted. </summary>
        public static PrivateLinkServiceConnectionProvisioningState Deleting { get; } = new PrivateLinkServiceConnectionProvisioningState(DeletingValue);
        /// <summary> The private link service connection has failed to be provisioned or deleted. </summary>
        public static PrivateLinkServiceConnectionProvisioningState Failed { get; } = new PrivateLinkServiceConnectionProvisioningState(FailedValue);
        /// <summary> The private link service connection has finished provisioning and is ready for approval. </summary>
        public static PrivateLinkServiceConnectionProvisioningState Succeeded { get; } = new PrivateLinkServiceConnectionProvisioningState(SucceededValue);
        /// <summary> Provisioning request for the private link service connection resource has been accepted but the process of creation has not commenced yet. </summary>
        public static PrivateLinkServiceConnectionProvisioningState Incomplete { get; } = new PrivateLinkServiceConnectionProvisioningState(IncompleteValue);
        /// <summary> Provisioning request for the private link service connection resource has been canceled. </summary>
        public static PrivateLinkServiceConnectionProvisioningState Canceled { get; } = new PrivateLinkServiceConnectionProvisioningState(CanceledValue);
        /// <summary> Determines if two <see cref="PrivateLinkServiceConnectionProvisioningState"/> values are the same. </summary>
        public static bool operator ==(PrivateLinkServiceConnectionProvisioningState left, PrivateLinkServiceConnectionProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PrivateLinkServiceConnectionProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(PrivateLinkServiceConnectionProvisioningState left, PrivateLinkServiceConnectionProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PrivateLinkServiceConnectionProvisioningState"/>. </summary>
        public static implicit operator PrivateLinkServiceConnectionProvisioningState(string value) => new PrivateLinkServiceConnectionProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PrivateLinkServiceConnectionProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PrivateLinkServiceConnectionProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
