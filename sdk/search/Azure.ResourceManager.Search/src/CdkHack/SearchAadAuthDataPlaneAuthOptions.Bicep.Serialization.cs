// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Search.Models
{
    public partial class SearchAadAuthDataPlaneAuthOptions : IModelJsonSerializable<SearchAadAuthDataPlaneAuthOptions>
    {
        void IModelJsonSerializable<SearchAadAuthDataPlaneAuthOptions>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        SearchAadAuthDataPlaneAuthOptions IModelJsonSerializable<SearchAadAuthDataPlaneAuthOptions>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var document = JsonDocument.ParseValue(ref reader);
            return DeserializeSearchAadAuthDataPlaneAuthOptions(document.RootElement);
        }

        BinaryData IModelSerializable<SearchAadAuthDataPlaneAuthOptions>.Serialize(ModelSerializerOptions options) => (options.Format.ToString()) switch
        {
            "J" or "W" => ModelSerializer.SerializeCore(this, options),
            "bicep" => SerializeBicep(options),
            _ => throw new FormatException($"Unsupported format {options.Format}")
        };

        SearchAadAuthDataPlaneAuthOptions IModelSerializable<SearchAadAuthDataPlaneAuthOptions>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeSearchAadAuthDataPlaneAuthOptions(document.RootElement);
        }

        private BinaryData SerializeBicep(ModelSerializerOptions options)
        {
            StringBuilder sb = new StringBuilder();
            if (Optional.IsDefined(ApiKeyOnly))
            {
                sb.AppendLine($"  apiKeyOnly: '{ApiKeyOnly.ToString()}'");
            }
            if (Optional.IsDefined(AadOrApiKey))
            {
                sb.AppendLine($"  aadOrApiKey: {{");
                sb.AppendChildObject(AadOrApiKey, options, true);
                sb.AppendLine($"  }}");
            }
            return new BinaryData(sb.ToString());
        }
    }
}
