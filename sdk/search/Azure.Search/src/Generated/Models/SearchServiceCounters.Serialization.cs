// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Models
{
    public partial class SearchServiceCounters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("documentCount");
            writer.WriteObjectValue(DocumentCounter);
            writer.WritePropertyName("indexesCount");
            writer.WriteObjectValue(IndexCounter);
            writer.WritePropertyName("indexersCount");
            writer.WriteObjectValue(IndexerCounter);
            writer.WritePropertyName("dataSourcesCount");
            writer.WriteObjectValue(DataSourceCounter);
            writer.WritePropertyName("storageSize");
            writer.WriteObjectValue(StorageSizeCounter);
            writer.WritePropertyName("synonymMaps");
            writer.WriteObjectValue(SynonymMapCounter);
            writer.WritePropertyName("skillsetCount");
            writer.WriteObjectValue(SkillsetCounter);
            writer.WriteEndObject();
        }
        internal static SearchServiceCounters DeserializeSearchServiceCounters(JsonElement element)
        {
            SearchServiceCounters result = new SearchServiceCounters();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("documentCount"))
                {
                    result.DocumentCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("indexesCount"))
                {
                    result.IndexCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("indexersCount"))
                {
                    result.IndexerCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("dataSourcesCount"))
                {
                    result.DataSourceCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("storageSize"))
                {
                    result.StorageSizeCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("synonymMaps"))
                {
                    result.SynonymMapCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("skillsetCount"))
                {
                    result.SkillsetCounter = SearchResourceCounter.DeserializeSearchResourceCounter(property.Value);
                    continue;
                }
            }
            return result;
        }
    }
}
