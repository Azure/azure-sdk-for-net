// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class IndexerLimits
    {
        /// <summary>
        /// Initializes a new instance of the IndexerLimits class.
        /// </summary>
        public IndexerLimits()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IndexerLimits class.
        /// </summary>
        /// <param name="maxRunTime">The maximum duration that the indexer is
        /// permitted to run for one execution.</param>
        /// <param name="maxDocumentExtractionSize">The maximum size of a
        /// document, in bytes, which will be considered valid for
        /// indexing.</param>
        /// <param name="maxDocumentContentCharactersToExtract">The maximum
        /// number of characters that will be extracted from a document picked
        /// up for indexing.</param>
        public IndexerLimits(System.TimeSpan? maxRunTime = default(System.TimeSpan?), double? maxDocumentExtractionSize = default(double?), double? maxDocumentContentCharactersToExtract = default(double?))
        {
            MaxRunTime = maxRunTime;
            MaxDocumentExtractionSize = maxDocumentExtractionSize;
            MaxDocumentContentCharactersToExtract = maxDocumentContentCharactersToExtract;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the maximum duration that the indexer is permitted to run for
        /// one execution.
        /// </summary>
        [JsonProperty(PropertyName = "maxRunTime")]
        public System.TimeSpan? MaxRunTime { get; private set; }

        /// <summary>
        /// Gets the maximum size of a document, in bytes, which will be
        /// considered valid for indexing.
        /// </summary>
        [JsonProperty(PropertyName = "maxDocumentExtractionSize")]
        public double? MaxDocumentExtractionSize { get; private set; }

        /// <summary>
        /// Gets the maximum number of characters that will be extracted from a
        /// document picked up for indexing.
        /// </summary>
        [JsonProperty(PropertyName = "maxDocumentContentCharactersToExtract")]
        public double? MaxDocumentContentCharactersToExtract { get; private set; }

    }
}
