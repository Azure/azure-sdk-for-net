// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents an indexer cache used to store intermediate skill outputs to
    /// allow for incremental enrichment.
    /// <see
    /// href="https://docs.microsoft.com/azure/search/cognitive-search-incremental-indexing-conceptual"
    /// />
    /// </summary>
    public partial class IndexerCache
    {
        /// <summary>
        /// Initializes a new instance of the IndexerCache class.
        /// </summary>
        public IndexerCache()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IndexerCache class.
        /// </summary>
        /// <param name="storageConnectionString">The connection string to the
        /// blob storage account that will be used to store the cache
        /// information.</param>
        /// <param name="id">Server-assigned guid identifier for this
        /// cache.</param>
        /// <param name="enableReprocessing">Flag as to whether skillset
        /// updates should reprocess old documents automatically.</param>
        public IndexerCache(string storageConnectionString, string id = default(string), bool? enableReprocessing = default(bool?))
        {
            ID = id;
            EnableReprocessing = enableReprocessing;
            StorageConnectionString = storageConnectionString;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets server-assigned guid identifier for this cache.
        /// </summary>
        [JsonProperty(PropertyName = "ID")]
        public string ID { get; private set; }

        /// <summary>
        /// Gets or sets flag as to whether skillset updates should reprocess
        /// old documents automatically.
        /// </summary>
        [JsonProperty(PropertyName = "enableReprocessing")]
        public bool? EnableReprocessing { get; set; }

        /// <summary>
        /// Gets or sets the connection string to the blob storage account that
        /// will be used to store the cache information.
        /// </summary>
        [JsonProperty(PropertyName = "storageConnectionString")]
        public string StorageConnectionString { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageConnectionString == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageConnectionString");
            }
        }
    }
}
