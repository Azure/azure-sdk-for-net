// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for KeyPhraseExtractionSkillLanguage.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(KeyPhraseExtractionSkillLanguageConverter))]
    public struct KeyPhraseExtractionSkillLanguage : System.IEquatable<KeyPhraseExtractionSkillLanguage>
    {
        private KeyPhraseExtractionSkillLanguage(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Danish
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Da = "da";

        /// <summary>
        /// Dutch
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Nl = "nl";

        /// <summary>
        /// English
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage En = "en";

        /// <summary>
        /// Finnish
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Fi = "fi";

        /// <summary>
        /// French
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Fr = "fr";

        /// <summary>
        /// German
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage De = "de";

        /// <summary>
        /// Italian
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage It = "it";

        /// <summary>
        /// Japanese
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Ja = "ja";

        /// <summary>
        /// Korean
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Ko = "ko";

        /// <summary>
        /// Norwegian (Bokmaal)
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage No = "no";

        /// <summary>
        /// Polish
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Pl = "pl";

        /// <summary>
        /// Portuguese (Portugal)
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage PtPT = "pt-PT";

        /// <summary>
        /// Portuguese (Brazil)
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage PtBR = "pt-BR";

        /// <summary>
        /// Russian
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Ru = "ru";

        /// <summary>
        /// Spanish
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Es = "es";

        /// <summary>
        /// Swedish
        /// </summary>
        public static readonly KeyPhraseExtractionSkillLanguage Sv = "sv";


        /// <summary>
        /// Underlying value of enum KeyPhraseExtractionSkillLanguage
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for KeyPhraseExtractionSkillLanguage
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type KeyPhraseExtractionSkillLanguage
        /// </summary>
        public bool Equals(KeyPhraseExtractionSkillLanguage e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to
        /// KeyPhraseExtractionSkillLanguage
        /// </summary>
        public static implicit operator KeyPhraseExtractionSkillLanguage(string value)
        {
            return new KeyPhraseExtractionSkillLanguage(value);
        }

        /// <summary>
        /// Implicit operator to convert KeyPhraseExtractionSkillLanguage to
        /// string
        /// </summary>
        public static implicit operator string(KeyPhraseExtractionSkillLanguage e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum KeyPhraseExtractionSkillLanguage
        /// </summary>
        public static bool operator == (KeyPhraseExtractionSkillLanguage e1, KeyPhraseExtractionSkillLanguage e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum KeyPhraseExtractionSkillLanguage
        /// </summary>
        public static bool operator != (KeyPhraseExtractionSkillLanguage e1, KeyPhraseExtractionSkillLanguage e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for KeyPhraseExtractionSkillLanguage
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is KeyPhraseExtractionSkillLanguage && Equals((KeyPhraseExtractionSkillLanguage)obj);
        }

        /// <summary>
        /// Returns for hashCode KeyPhraseExtractionSkillLanguage
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
