// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Extract content from a binary file.
    /// <see
    /// href="https://docs.microsoft.com/azure/search/cognitive-search-skill-document-extraction"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Skills.Util.DocumentExtractionSkill")]
    public partial class DocumentExtractionSkill : Skill
    {
        /// <summary>
        /// Initializes a new instance of the DocumentExtractionSkill class.
        /// </summary>
        public DocumentExtractionSkill()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentExtractionSkill class.
        /// </summary>
        /// <param name="inputs">Inputs of the skills could be a column in the
        /// source data set, or the output of an upstream skill.</param>
        /// <param name="outputs">The output of a skill is either a field in a
        /// search index, or a value that can be consumed as an input by
        /// another skill.</param>
        /// <param name="parsingMode">The mode with which to extract data from
        /// the document. Possible values include: 'default', 'text',
        /// 'json'</param>
        /// <param name="dataToExtract">What information to extract from the
        /// document. Possible values include: 'storageMetadata',
        /// 'allMetadata', 'contentAndMetadata'</param>
        /// <param name="name">The name of the skill which uniquely identifies
        /// it within the skillset. A skill with no name defined will be given
        /// a default name of its 1-based index in the skills array, prefixed
        /// with the character '#'.</param>
        /// <param name="description">The description of the skill which
        /// describes the inputs, outputs, and usage of the skill.</param>
        /// <param name="context">Represents the level at which operations take
        /// place, such as the document root or document content (for example,
        /// /document or /document/content). The default is /document.</param>
        /// <param name="configuration">A dictionary of other key value pair
        /// configurations.</param>
        public DocumentExtractionSkill(IList<InputFieldMappingEntry> inputs, IList<OutputFieldMappingEntry> outputs, string parsingMode, string dataToExtract, string name = default(string), string description = default(string), string context = default(string), IDictionary<string, object> configuration = default(IDictionary<string, object>))
            : base(inputs, outputs, name, description, context)
        {
            ParsingMode = parsingMode;
            DataToExtract = dataToExtract;
            Configuration = configuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the mode with which to extract data from the document.
        /// Possible values include: 'default', 'text', 'json'
        /// </summary>
        [JsonProperty(PropertyName = "parsingMode")]
        public string ParsingMode { get; set; }

        /// <summary>
        /// Gets or sets what information to extract from the document.
        /// Possible values include: 'storageMetadata', 'allMetadata',
        /// 'contentAndMetadata'
        /// </summary>
        [JsonProperty(PropertyName = "dataToExtract")]
        public string DataToExtract { get; set; }

        /// <summary>
        /// Gets or sets a dictionary of other key value pair configurations.
        /// </summary>
        [JsonProperty(PropertyName = "configuration")]
        public IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ParsingMode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParsingMode");
            }
            if (DataToExtract == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataToExtract");
            }
        }
    }
}
