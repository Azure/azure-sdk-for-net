// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for CustomEntityLookupSkillLanguage.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(CustomEntityLookupSkillLanguageConverter))]
    public struct CustomEntityLookupSkillLanguage : System.IEquatable<CustomEntityLookupSkillLanguage>
    {
        private CustomEntityLookupSkillLanguage(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Arabic
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Ar = "ar";

        /// <summary>
        /// Czech
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Cs = "cs";

        /// <summary>
        /// Chinese-Simplified
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage ZhHans = "zh-Hans";

        /// <summary>
        /// Chinese-Traditional
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage ZhHant = "zh-Hant";

        /// <summary>
        /// Danish
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Da = "da";

        /// <summary>
        /// Dutch
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Nl = "nl";

        /// <summary>
        /// English
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage En = "en";

        /// <summary>
        /// Finnish
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Fi = "fi";

        /// <summary>
        /// French
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Fr = "fr";

        /// <summary>
        /// German
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage De = "de";

        /// <summary>
        /// Greek
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage El = "el";

        /// <summary>
        /// Hungarian
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Hu = "hu";

        /// <summary>
        /// Italian
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage It = "it";

        /// <summary>
        /// Japanese
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Ja = "ja";

        /// <summary>
        /// Korean
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Ko = "ko";

        /// <summary>
        /// Norwegian (Bokmaal)
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage No = "no";

        /// <summary>
        /// Polish
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Pl = "pl";

        /// <summary>
        /// Portuguese (Portugal)
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage PtPT = "pt-PT";

        /// <summary>
        /// Portuguese (Brazil)
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage PtBR = "pt-BR";

        /// <summary>
        /// Russian
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Ru = "ru";

        /// <summary>
        /// Spanish
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Es = "es";

        /// <summary>
        /// Swedish
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Sv = "sv";

        /// <summary>
        /// Turkish
        /// </summary>
        public static readonly CustomEntityLookupSkillLanguage Tr = "tr";


        /// <summary>
        /// Underlying value of enum CustomEntityLookupSkillLanguage
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for CustomEntityLookupSkillLanguage
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type CustomEntityLookupSkillLanguage
        /// </summary>
        public bool Equals(CustomEntityLookupSkillLanguage e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to
        /// CustomEntityLookupSkillLanguage
        /// </summary>
        public static implicit operator CustomEntityLookupSkillLanguage(string value)
        {
            return new CustomEntityLookupSkillLanguage(value);
        }

        /// <summary>
        /// Implicit operator to convert CustomEntityLookupSkillLanguage to
        /// string
        /// </summary>
        public static implicit operator string(CustomEntityLookupSkillLanguage e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum CustomEntityLookupSkillLanguage
        /// </summary>
        public static bool operator == (CustomEntityLookupSkillLanguage e1, CustomEntityLookupSkillLanguage e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum CustomEntityLookupSkillLanguage
        /// </summary>
        public static bool operator != (CustomEntityLookupSkillLanguage e1, CustomEntityLookupSkillLanguage e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for CustomEntityLookupSkillLanguage
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is CustomEntityLookupSkillLanguage && Equals((CustomEntityLookupSkillLanguage)obj);
        }

        /// <summary>
        /// Returns for hashCode CustomEntityLookupSkillLanguage
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
