// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Matches single or multi-word synonyms in a token stream. This token
    /// filter is implemented using Apache Lucene.
    /// <see
    /// href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/synonym/SynonymFilter.html"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.Search.SynonymTokenFilter")]
    public partial class SynonymTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the SynonymTokenFilter class.
        /// </summary>
        public SynonymTokenFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynonymTokenFilter class.
        /// </summary>
        /// <param name="name">The name of the token filter. It must only
        /// contain letters, digits, spaces, dashes or underscores, can only
        /// start and end with alphanumeric characters, and is limited to 128
        /// characters.</param>
        /// <param name="synonyms">A list of synonyms in following one of two
        /// formats: 1. incredible, unbelievable, fabulous =&gt; amazing - all
        /// terms on the left side of =&gt; symbol will be replaced with all
        /// terms on its right side; 2. incredible, unbelievable, fabulous,
        /// amazing - comma separated list of equivalent words. Set the expand
        /// option to change how this list is interpreted.</param>
        /// <param name="ignoreCase">A value indicating whether to case-fold
        /// input for matching. Default is false.</param>
        /// <param name="expand">A value indicating whether all words in the
        /// list of synonyms (if =&gt; notation is not used) will map to one
        /// another. If true, all words in the list of synonyms (if =&gt;
        /// notation is not used) will map to one another. The following list:
        /// incredible, unbelievable, fabulous, amazing is equivalent to:
        /// incredible, unbelievable, fabulous, amazing =&gt; incredible,
        /// unbelievable, fabulous, amazing. If false, the following list:
        /// incredible, unbelievable, fabulous, amazing will be equivalent to:
        /// incredible, unbelievable, fabulous, amazing =&gt; incredible.
        /// Default is true.</param>
        public SynonymTokenFilter(string name, IList<string> synonyms, bool? ignoreCase = default(bool?), bool? expand = default(bool?))
            : base(name)
        {
            Synonyms = synonyms;
            IgnoreCase = ignoreCase;
            Expand = expand;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of synonyms in following one of two formats: 1.
        /// incredible, unbelievable, fabulous =&amp;gt; amazing - all terms on
        /// the left side of =&amp;gt; symbol will be replaced with all terms
        /// on its right side; 2. incredible, unbelievable, fabulous, amazing -
        /// comma separated list of equivalent words. Set the expand option to
        /// change how this list is interpreted.
        /// </summary>
        [JsonProperty(PropertyName = "synonyms")]
        public IList<string> Synonyms { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to case-fold input for
        /// matching. Default is false.
        /// </summary>
        [JsonProperty(PropertyName = "ignoreCase")]
        public bool? IgnoreCase { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether all words in the list of
        /// synonyms (if =&amp;gt; notation is not used) will map to one
        /// another. If true, all words in the list of synonyms (if =&amp;gt;
        /// notation is not used) will map to one another. The following list:
        /// incredible, unbelievable, fabulous, amazing is equivalent to:
        /// incredible, unbelievable, fabulous, amazing =&amp;gt; incredible,
        /// unbelievable, fabulous, amazing. If false, the following list:
        /// incredible, unbelievable, fabulous, amazing will be equivalent to:
        /// incredible, unbelievable, fabulous, amazing =&amp;gt; incredible.
        /// Default is true.
        /// </summary>
        [JsonProperty(PropertyName = "expand")]
        public bool? Expand { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Synonyms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Synonyms");
            }
        }
    }
}
