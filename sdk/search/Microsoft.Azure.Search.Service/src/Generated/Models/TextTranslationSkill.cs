// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A skill to translate text from one language to another.
    /// <see
    /// href="https://docs.microsoft.com/azure/search/cognitive-search-skill-text-translation"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Skills.Text.TranslationSkill")]
    public partial class TextTranslationSkill : Skill
    {
        /// <summary>
        /// Initializes a new instance of the TextTranslationSkill class.
        /// </summary>
        public TextTranslationSkill()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TextTranslationSkill class.
        /// </summary>
        /// <param name="inputs">Inputs of the skills could be a column in the
        /// source data set, or the output of an upstream skill.</param>
        /// <param name="outputs">The output of a skill is either a field in a
        /// search index, or a value that can be consumed as an input by
        /// another skill.</param>
        /// <param name="defaultToLanguageCode">The language code to translate
        /// documents into for documents that don't specify the to language
        /// explicitly. Possible values include: 'af', 'ar', 'bn', 'bs', 'bg',
        /// 'yue', 'ca', 'zh-Hans', 'zh-Hant', 'hr', 'cs', 'da', 'nl', 'en',
        /// 'et', 'fj', 'fil', 'fi', 'fr', 'de', 'el', 'ht', 'he', 'hi', 'mww',
        /// 'hu', 'is', 'id', 'it', 'ja', 'sw', 'tlh', 'ko', 'lv', 'lt', 'mg',
        /// 'ms', 'mt', 'nb', 'fa', 'pl', 'pt', 'otq', 'ro', 'ru', 'sm',
        /// 'sr-Cyrl', 'sr-Latn', 'sk', 'sl', 'es', 'sv', 'ty', 'ta', 'te',
        /// 'th', 'to', 'tr', 'uk', 'ur', 'vi', 'cy', 'yua'</param>
        /// <param name="name">The name of the skill which uniquely identifies
        /// it within the skillset. A skill with no name defined will be given
        /// a default name of its 1-based index in the skills array, prefixed
        /// with the character '#'.</param>
        /// <param name="description">The description of the skill which
        /// describes the inputs, outputs, and usage of the skill.</param>
        /// <param name="context">Represents the level at which operations take
        /// place, such as the document root or document content (for example,
        /// /document or /document/content). The default is /document.</param>
        /// <param name="defaultFromLanguageCode">The language code to
        /// translate documents from for documents that don't specify the from
        /// language explicitly. Possible values include: 'af', 'ar', 'bn',
        /// 'bs', 'bg', 'yue', 'ca', 'zh-Hans', 'zh-Hant', 'hr', 'cs', 'da',
        /// 'nl', 'en', 'et', 'fj', 'fil', 'fi', 'fr', 'de', 'el', 'ht', 'he',
        /// 'hi', 'mww', 'hu', 'is', 'id', 'it', 'ja', 'sw', 'tlh', 'ko', 'lv',
        /// 'lt', 'mg', 'ms', 'mt', 'nb', 'fa', 'pl', 'pt', 'otq', 'ro', 'ru',
        /// 'sm', 'sr-Cyrl', 'sr-Latn', 'sk', 'sl', 'es', 'sv', 'ty', 'ta',
        /// 'te', 'th', 'to', 'tr', 'uk', 'ur', 'vi', 'cy', 'yua'</param>
        /// <param name="suggestedFrom">The language code to translate
        /// documents from when neither the fromLanguageCode input nor the
        /// defaultFromLanguageCode parameter are provided, and the automatic
        /// language detection is unsuccessful. Default is en. Possible values
        /// include: 'af', 'ar', 'bn', 'bs', 'bg', 'yue', 'ca', 'zh-Hans',
        /// 'zh-Hant', 'hr', 'cs', 'da', 'nl', 'en', 'et', 'fj', 'fil', 'fi',
        /// 'fr', 'de', 'el', 'ht', 'he', 'hi', 'mww', 'hu', 'is', 'id', 'it',
        /// 'ja', 'sw', 'tlh', 'ko', 'lv', 'lt', 'mg', 'ms', 'mt', 'nb', 'fa',
        /// 'pl', 'pt', 'otq', 'ro', 'ru', 'sm', 'sr-Cyrl', 'sr-Latn', 'sk',
        /// 'sl', 'es', 'sv', 'ty', 'ta', 'te', 'th', 'to', 'tr', 'uk', 'ur',
        /// 'vi', 'cy', 'yua'</param>
        public TextTranslationSkill(IList<InputFieldMappingEntry> inputs, IList<OutputFieldMappingEntry> outputs, TextTranslationSkillLanguage defaultToLanguageCode, string name = default(string), string description = default(string), string context = default(string), TextTranslationSkillLanguage? defaultFromLanguageCode = default(TextTranslationSkillLanguage?), TextTranslationSkillLanguage? suggestedFrom = default(TextTranslationSkillLanguage?))
            : base(inputs, outputs, name, description, context)
        {
            DefaultToLanguageCode = defaultToLanguageCode;
            DefaultFromLanguageCode = defaultFromLanguageCode;
            SuggestedFrom = suggestedFrom;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the language code to translate documents into for
        /// documents that don't specify the to language explicitly. Possible
        /// values include: 'af', 'ar', 'bn', 'bs', 'bg', 'yue', 'ca',
        /// 'zh-Hans', 'zh-Hant', 'hr', 'cs', 'da', 'nl', 'en', 'et', 'fj',
        /// 'fil', 'fi', 'fr', 'de', 'el', 'ht', 'he', 'hi', 'mww', 'hu', 'is',
        /// 'id', 'it', 'ja', 'sw', 'tlh', 'ko', 'lv', 'lt', 'mg', 'ms', 'mt',
        /// 'nb', 'fa', 'pl', 'pt', 'otq', 'ro', 'ru', 'sm', 'sr-Cyrl',
        /// 'sr-Latn', 'sk', 'sl', 'es', 'sv', 'ty', 'ta', 'te', 'th', 'to',
        /// 'tr', 'uk', 'ur', 'vi', 'cy', 'yua'
        /// </summary>
        [JsonProperty(PropertyName = "defaultToLanguageCode")]
        public TextTranslationSkillLanguage DefaultToLanguageCode { get; set; }

        /// <summary>
        /// Gets or sets the language code to translate documents from for
        /// documents that don't specify the from language explicitly. Possible
        /// values include: 'af', 'ar', 'bn', 'bs', 'bg', 'yue', 'ca',
        /// 'zh-Hans', 'zh-Hant', 'hr', 'cs', 'da', 'nl', 'en', 'et', 'fj',
        /// 'fil', 'fi', 'fr', 'de', 'el', 'ht', 'he', 'hi', 'mww', 'hu', 'is',
        /// 'id', 'it', 'ja', 'sw', 'tlh', 'ko', 'lv', 'lt', 'mg', 'ms', 'mt',
        /// 'nb', 'fa', 'pl', 'pt', 'otq', 'ro', 'ru', 'sm', 'sr-Cyrl',
        /// 'sr-Latn', 'sk', 'sl', 'es', 'sv', 'ty', 'ta', 'te', 'th', 'to',
        /// 'tr', 'uk', 'ur', 'vi', 'cy', 'yua'
        /// </summary>
        [JsonProperty(PropertyName = "defaultFromLanguageCode")]
        public TextTranslationSkillLanguage? DefaultFromLanguageCode { get; set; }

        /// <summary>
        /// Gets or sets the language code to translate documents from when
        /// neither the fromLanguageCode input nor the defaultFromLanguageCode
        /// parameter are provided, and the automatic language detection is
        /// unsuccessful. Default is en. Possible values include: 'af', 'ar',
        /// 'bn', 'bs', 'bg', 'yue', 'ca', 'zh-Hans', 'zh-Hant', 'hr', 'cs',
        /// 'da', 'nl', 'en', 'et', 'fj', 'fil', 'fi', 'fr', 'de', 'el', 'ht',
        /// 'he', 'hi', 'mww', 'hu', 'is', 'id', 'it', 'ja', 'sw', 'tlh', 'ko',
        /// 'lv', 'lt', 'mg', 'ms', 'mt', 'nb', 'fa', 'pl', 'pt', 'otq', 'ro',
        /// 'ru', 'sm', 'sr-Cyrl', 'sr-Latn', 'sk', 'sl', 'es', 'sv', 'ty',
        /// 'ta', 'te', 'th', 'to', 'tr', 'uk', 'ur', 'vi', 'cy', 'yua'
        /// </summary>
        [JsonProperty(PropertyName = "suggestedFrom")]
        public TextTranslationSkillLanguage? SuggestedFrom { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
