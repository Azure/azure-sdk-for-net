// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Create tokens for phonetic matches. This token filter is implemented
    /// using Apache Lucene.
    /// <see
    /// href="https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.Search.PhoneticTokenFilter")]
    public partial class PhoneticTokenFilter : TokenFilter
    {
        /// <summary>
        /// Initializes a new instance of the PhoneticTokenFilter class.
        /// </summary>
        public PhoneticTokenFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PhoneticTokenFilter class.
        /// </summary>
        /// <param name="name">The name of the token filter. It must only
        /// contain letters, digits, spaces, dashes or underscores, can only
        /// start and end with alphanumeric characters, and is limited to 128
        /// characters.</param>
        /// <param name="encoder">The phonetic encoder to use. Default is
        /// "metaphone". Possible values include: 'metaphone',
        /// 'doubleMetaphone', 'soundex', 'refinedSoundex', 'caverphone1',
        /// 'caverphone2', 'cologne', 'nysiis', 'koelnerPhonetik',
        /// 'haasePhonetik', 'beiderMorse'</param>
        /// <param name="replaceOriginalTokens">A value indicating whether
        /// encoded tokens should replace original tokens. If false, encoded
        /// tokens are added as synonyms. Default is true.</param>
        public PhoneticTokenFilter(string name, PhoneticEncoder? encoder = default(PhoneticEncoder?), bool? replaceOriginalTokens = default(bool?))
            : base(name)
        {
            Encoder = encoder;
            ReplaceOriginalTokens = replaceOriginalTokens;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the phonetic encoder to use. Default is "metaphone".
        /// Possible values include: 'metaphone', 'doubleMetaphone', 'soundex',
        /// 'refinedSoundex', 'caverphone1', 'caverphone2', 'cologne',
        /// 'nysiis', 'koelnerPhonetik', 'haasePhonetik', 'beiderMorse'
        /// </summary>
        [JsonProperty(PropertyName = "encoder")]
        public PhoneticEncoder? Encoder { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether encoded tokens should
        /// replace original tokens. If false, encoded tokens are added as
        /// synonyms. Default is true.
        /// </summary>
        [JsonProperty(PropertyName = "replace")]
        public bool? ReplaceOriginalTokens { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
