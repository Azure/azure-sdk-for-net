// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a synonym map definition.
    /// </summary>
    public partial class SynonymMap
    {
        /// <summary>
        /// Initializes a new instance of the SynonymMap class.
        /// </summary>
        public SynonymMap()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynonymMap class.
        /// </summary>
        /// <param name="name">The name of the synonym map.</param>
        /// <param name="synonyms">A series of synonym rules in the specified
        /// synonym map format. The rules must be separated by
        /// newlines.</param>
        /// <param name="eTag">The ETag of the synonym map.</param>
        public SynonymMap(string name, string synonyms, string eTag = default(string))
        {
            Name = name;
            Synonyms = synonyms;
            ETag = eTag;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for SynonymMap class.
        /// </summary>
        static SynonymMap()
        {
            Format = "solr";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the synonym map.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a series of synonym rules in the specified synonym map
        /// format. The rules must be separated by newlines.
        /// </summary>
        [JsonProperty(PropertyName = "synonyms")]
        public string Synonyms { get; set; }

        /// <summary>
        /// Gets or sets the ETag of the synonym map.
        /// </summary>
        [JsonProperty(PropertyName = "@odata.etag")]
        public string ETag { get; set; }

        /// <summary>
        /// The format of the synonym map. Only the 'solr' format is currently
        /// supported.
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public static string Format { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Synonyms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Synonyms");
            }
        }
    }
}
