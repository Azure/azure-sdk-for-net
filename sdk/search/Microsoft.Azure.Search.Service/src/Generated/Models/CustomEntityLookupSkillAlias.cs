// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents an alternative spelling of a Custom Entity Lookup Skill
    /// entity.
    /// </summary>
    public partial class CustomEntityLookupSkillAlias
    {
        /// <summary>
        /// Initializes a new instance of the CustomEntityLookupSkillAlias
        /// class.
        /// </summary>
        public CustomEntityLookupSkillAlias()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomEntityLookupSkillAlias
        /// class.
        /// </summary>
        public CustomEntityLookupSkillAlias(string text, bool? caseSensitive = default(bool?), bool? accentSensitive = default(bool?), int? fuzzyEditDistance = default(int?))
        {
            Text = text;
            CaseSensitive = caseSensitive;
            AccentSensitive = accentSensitive;
            FuzzyEditDistance = fuzzyEditDistance;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "caseSensitive")]
        public bool? CaseSensitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accentSensitive")]
        public bool? AccentSensitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fuzzyEditDistance")]
        public int? FuzzyEditDistance { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (FuzzyEditDistance > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "FuzzyEditDistance", 5);
            }
        }
    }
}
