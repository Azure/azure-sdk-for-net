// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents various service level limits.
    /// </summary>
    public partial class ServiceLimits
    {
        /// <summary>
        /// Initializes a new instance of the ServiceLimits class.
        /// </summary>
        public ServiceLimits()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceLimits class.
        /// </summary>
        /// <param name="maxFieldsPerIndex">The maximum allowed fields per
        /// index.</param>
        /// <param name="maxFieldNestingDepthPerIndex">The maximum depth which
        /// you can nest sub-fields in an index, including the top-level
        /// complex field. For example, a/b/c has a nesting depth of 3.</param>
        /// <param name="maxComplexCollectionFieldsPerIndex">The maximum number
        /// of fields of type Collection(Edm.ComplexType) allowed in an
        /// index.</param>
        /// <param name="maxComplexObjectsInCollectionsPerDocument">The maximum
        /// number of objects in complex collections allowed per
        /// document.</param>
        public ServiceLimits(int? maxFieldsPerIndex = default(int?), int? maxFieldNestingDepthPerIndex = default(int?), int? maxComplexCollectionFieldsPerIndex = default(int?), int? maxComplexObjectsInCollectionsPerDocument = default(int?))
        {
            MaxFieldsPerIndex = maxFieldsPerIndex;
            MaxFieldNestingDepthPerIndex = maxFieldNestingDepthPerIndex;
            MaxComplexCollectionFieldsPerIndex = maxComplexCollectionFieldsPerIndex;
            MaxComplexObjectsInCollectionsPerDocument = maxComplexObjectsInCollectionsPerDocument;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the maximum allowed fields per index.
        /// </summary>
        [JsonProperty(PropertyName = "maxFieldsPerIndex")]
        public int? MaxFieldsPerIndex { get; set; }

        /// <summary>
        /// Gets or sets the maximum depth which you can nest sub-fields in an
        /// index, including the top-level complex field. For example, a/b/c
        /// has a nesting depth of 3.
        /// </summary>
        [JsonProperty(PropertyName = "maxFieldNestingDepthPerIndex")]
        public int? MaxFieldNestingDepthPerIndex { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of fields of type
        /// Collection(Edm.ComplexType) allowed in an index.
        /// </summary>
        [JsonProperty(PropertyName = "maxComplexCollectionFieldsPerIndex")]
        public int? MaxComplexCollectionFieldsPerIndex { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of objects in complex collections
        /// allowed per document.
        /// </summary>
        [JsonProperty(PropertyName = "maxComplexObjectsInCollectionsPerDocument")]
        public int? MaxComplexObjectsInCollectionsPerDocument { get; set; }

    }
}
