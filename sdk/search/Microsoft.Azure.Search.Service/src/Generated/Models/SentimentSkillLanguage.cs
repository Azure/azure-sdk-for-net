// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for SentimentSkillLanguage.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(SentimentSkillLanguageConverter))]
    public struct SentimentSkillLanguage : System.IEquatable<SentimentSkillLanguage>
    {
        private SentimentSkillLanguage(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Danish
        /// </summary>
        public static readonly SentimentSkillLanguage Da = "da";

        /// <summary>
        /// Dutch
        /// </summary>
        public static readonly SentimentSkillLanguage Nl = "nl";

        /// <summary>
        /// English
        /// </summary>
        public static readonly SentimentSkillLanguage En = "en";

        /// <summary>
        /// Finnish
        /// </summary>
        public static readonly SentimentSkillLanguage Fi = "fi";

        /// <summary>
        /// French
        /// </summary>
        public static readonly SentimentSkillLanguage Fr = "fr";

        /// <summary>
        /// German
        /// </summary>
        public static readonly SentimentSkillLanguage De = "de";

        /// <summary>
        /// Greek
        /// </summary>
        public static readonly SentimentSkillLanguage El = "el";

        /// <summary>
        /// Italian
        /// </summary>
        public static readonly SentimentSkillLanguage It = "it";

        /// <summary>
        /// Norwegian (Bokmaal)
        /// </summary>
        public static readonly SentimentSkillLanguage No = "no";

        /// <summary>
        /// Polish
        /// </summary>
        public static readonly SentimentSkillLanguage Pl = "pl";

        /// <summary>
        /// Portuguese (Portugal)
        /// </summary>
        public static readonly SentimentSkillLanguage PtPT = "pt-PT";

        /// <summary>
        /// Russian
        /// </summary>
        public static readonly SentimentSkillLanguage Ru = "ru";

        /// <summary>
        /// Spanish
        /// </summary>
        public static readonly SentimentSkillLanguage Es = "es";

        /// <summary>
        /// Swedish
        /// </summary>
        public static readonly SentimentSkillLanguage Sv = "sv";

        /// <summary>
        /// Turkish
        /// </summary>
        public static readonly SentimentSkillLanguage Tr = "tr";


        /// <summary>
        /// Underlying value of enum SentimentSkillLanguage
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for SentimentSkillLanguage
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type SentimentSkillLanguage
        /// </summary>
        public bool Equals(SentimentSkillLanguage e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to SentimentSkillLanguage
        /// </summary>
        public static implicit operator SentimentSkillLanguage(string value)
        {
            return new SentimentSkillLanguage(value);
        }

        /// <summary>
        /// Implicit operator to convert SentimentSkillLanguage to string
        /// </summary>
        public static implicit operator string(SentimentSkillLanguage e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum SentimentSkillLanguage
        /// </summary>
        public static bool operator == (SentimentSkillLanguage e1, SentimentSkillLanguage e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum SentimentSkillLanguage
        /// </summary>
        public static bool operator != (SentimentSkillLanguage e1, SentimentSkillLanguage e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for SentimentSkillLanguage
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is SentimentSkillLanguage && Equals((SentimentSkillLanguage)obj);
        }

        /// <summary>
        /// Returns for hashCode SentimentSkillLanguage
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
