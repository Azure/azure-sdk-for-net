// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for SplitSkillLanguage.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(SplitSkillLanguageConverter))]
    public struct SplitSkillLanguage : System.IEquatable<SplitSkillLanguage>
    {
        private SplitSkillLanguage(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Danish
        /// </summary>
        public static readonly SplitSkillLanguage Da = "da";

        /// <summary>
        /// German
        /// </summary>
        public static readonly SplitSkillLanguage De = "de";

        /// <summary>
        /// English
        /// </summary>
        public static readonly SplitSkillLanguage En = "en";

        /// <summary>
        /// Spanish
        /// </summary>
        public static readonly SplitSkillLanguage Es = "es";

        /// <summary>
        /// Finnish
        /// </summary>
        public static readonly SplitSkillLanguage Fi = "fi";

        /// <summary>
        /// French
        /// </summary>
        public static readonly SplitSkillLanguage Fr = "fr";

        /// <summary>
        /// Italian
        /// </summary>
        public static readonly SplitSkillLanguage It = "it";

        /// <summary>
        /// Korean
        /// </summary>
        public static readonly SplitSkillLanguage Ko = "ko";

        /// <summary>
        /// Portuguese
        /// </summary>
        public static readonly SplitSkillLanguage Pt = "pt";


        /// <summary>
        /// Underlying value of enum SplitSkillLanguage
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for SplitSkillLanguage
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type SplitSkillLanguage
        /// </summary>
        public bool Equals(SplitSkillLanguage e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to SplitSkillLanguage
        /// </summary>
        public static implicit operator SplitSkillLanguage(string value)
        {
            return new SplitSkillLanguage(value);
        }

        /// <summary>
        /// Implicit operator to convert SplitSkillLanguage to string
        /// </summary>
        public static implicit operator string(SplitSkillLanguage e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum SplitSkillLanguage
        /// </summary>
        public static bool operator == (SplitSkillLanguage e1, SplitSkillLanguage e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum SplitSkillLanguage
        /// </summary>
        public static bool operator != (SplitSkillLanguage e1, SplitSkillLanguage e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for SplitSkillLanguage
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is SplitSkillLanguage && Equals((SplitSkillLanguage)obj);
        }

        /// <summary>
        /// Returns for hashCode SplitSkillLanguage
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
