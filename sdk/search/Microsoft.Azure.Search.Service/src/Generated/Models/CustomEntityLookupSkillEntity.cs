// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents a single Custom Entity Lookup Skill entity.
    /// </summary>
    public partial class CustomEntityLookupSkillEntity
    {
        /// <summary>
        /// Initializes a new instance of the CustomEntityLookupSkillEntity
        /// class.
        /// </summary>
        public CustomEntityLookupSkillEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomEntityLookupSkillEntity
        /// class.
        /// </summary>
        public CustomEntityLookupSkillEntity(string name, string description = default(string), string type = default(string), string subtype = default(string), string id = default(string), bool? caseSensitive = default(bool?), bool? accentSensitive = default(bool?), int? fuzzyEditDistance = default(int?), bool? defaultCaseSensitive = default(bool?), bool? defaultAccentSensitive = default(bool?), int? defaultFuzzyEditDistance = default(int?), IList<CustomEntityLookupSkillAlias> aliases = default(IList<CustomEntityLookupSkillAlias>))
        {
            Name = name;
            Description = description;
            Type = type;
            Subtype = subtype;
            Id = id;
            CaseSensitive = caseSensitive;
            AccentSensitive = accentSensitive;
            FuzzyEditDistance = fuzzyEditDistance;
            DefaultCaseSensitive = defaultCaseSensitive;
            DefaultAccentSensitive = defaultAccentSensitive;
            DefaultFuzzyEditDistance = defaultFuzzyEditDistance;
            Aliases = aliases;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subtype")]
        public string Subtype { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "caseSensitive")]
        public bool? CaseSensitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accentSensitive")]
        public bool? AccentSensitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fuzzyEditDistance")]
        public int? FuzzyEditDistance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultCaseSensitive")]
        public bool? DefaultCaseSensitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultAccentSensitive")]
        public bool? DefaultAccentSensitive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultFuzzyEditDistance")]
        public int? DefaultFuzzyEditDistance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aliases")]
        public IList<CustomEntityLookupSkillAlias> Aliases { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (FuzzyEditDistance > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "FuzzyEditDistance", 5);
            }
            if (DefaultFuzzyEditDistance > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "DefaultFuzzyEditDistance", 5);
            }
            if (Aliases != null)
            {
                foreach (var element in Aliases)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
