// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Search.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Standard Apache Lucene analyzer; Composed of the standard tokenizer,
    /// lowercase filter and stop filter.
    /// <see
    /// href="http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardAnalyzer.html"
    /// />
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Azure.Search.StandardAnalyzer")]
    public partial class StandardAnalyzer : Analyzer
    {
        /// <summary>
        /// Initializes a new instance of the StandardAnalyzer class.
        /// </summary>
        public StandardAnalyzer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StandardAnalyzer class.
        /// </summary>
        /// <param name="name">The name of the analyzer. It must only contain
        /// letters, digits, spaces, dashes or underscores, can only start and
        /// end with alphanumeric characters, and is limited to 128
        /// characters.</param>
        /// <param name="maxTokenLength">The maximum token length. Default is
        /// 255. Tokens longer than the maximum length are split. The maximum
        /// token length that can be used is 300 characters.</param>
        /// <param name="stopwords">A list of stopwords.</param>
        public StandardAnalyzer(string name, int? maxTokenLength = default(int?), IList<string> stopwords = default(IList<string>))
            : base(name)
        {
            MaxTokenLength = maxTokenLength;
            Stopwords = stopwords;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the maximum token length. Default is 255. Tokens
        /// longer than the maximum length are split. The maximum token length
        /// that can be used is 300 characters.
        /// </summary>
        [JsonProperty(PropertyName = "maxTokenLength")]
        public int? MaxTokenLength { get; set; }

        /// <summary>
        /// Gets or sets a list of stopwords.
        /// </summary>
        [JsonProperty(PropertyName = "stopwords")]
        public IList<string> Stopwords { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (MaxTokenLength > 300)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "MaxTokenLength", 300);
            }
        }
    }
}
