// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class SearchIndexer : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("dataSourceName");
            writer.WriteStringValue(DataSourceName);
            if (Optional.IsDefined(SkillsetName))
            {
                writer.WritePropertyName("skillsetName");
                writer.WriteStringValue(SkillsetName);
            }
            writer.WritePropertyName("targetIndexName");
            writer.WriteStringValue(TargetIndexName);
            if (Optional.IsDefined(Schedule))
            {
                writer.WritePropertyName("schedule");
                writer.WriteObjectValue(Schedule);
            }
            if (Optional.IsDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteObjectValue(Parameters);
            }
            if (Optional.IsDefined(FieldMappings))
            {
                writer.WritePropertyName("fieldMappings");
                writer.WriteStartArray();
                foreach (var item in FieldMappings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(OutputFieldMappings))
            {
                writer.WritePropertyName("outputFieldMappings");
                writer.WriteStartArray();
                foreach (var item in OutputFieldMappings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IsDisabled))
            {
                writer.WritePropertyName("disabled");
                writer.WriteBooleanValue(IsDisabled.Value);
            }
            if (Optional.IsDefined(_etag))
            {
                writer.WritePropertyName("@odata.etag");
                writer.WriteStringValue(_etag);
            }
            writer.WriteEndObject();
        }

        internal static SearchIndexer DeserializeSearchIndexer(JsonElement element)
        {
            string name = default;
            Optional<string> description = default;
            string dataSourceName = default;
            Optional<string> skillsetName = default;
            string targetIndexName = default;
            Optional<IndexingSchedule> schedule = default;
            Optional<IndexingParameters> parameters = default;
            Optional<IList<FieldMapping>> fieldMappings = default;
            Optional<IList<FieldMapping>> outputFieldMappings = default;
            Optional<bool> disabled = default;
            Optional<string> odataEtag = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataSourceName"))
                {
                    dataSourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("skillsetName"))
                {
                    skillsetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetIndexName"))
                {
                    targetIndexName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schedule"))
                {
                    schedule = IndexingSchedule.DeserializeIndexingSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("parameters"))
                {
                    parameters = IndexingParameters.DeserializeIndexingParameters(property.Value);
                    continue;
                }
                if (property.NameEquals("fieldMappings"))
                {
                    List<FieldMapping> array = new List<FieldMapping>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(FieldMapping.DeserializeFieldMapping(item));
                        }
                    }
                    fieldMappings = array;
                    continue;
                }
                if (property.NameEquals("outputFieldMappings"))
                {
                    List<FieldMapping> array = new List<FieldMapping>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(FieldMapping.DeserializeFieldMapping(item));
                        }
                    }
                    outputFieldMappings = array;
                    continue;
                }
                if (property.NameEquals("disabled"))
                {
                    disabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("@odata.etag"))
                {
                    odataEtag = property.Value.GetString();
                    continue;
                }
            }
            return new SearchIndexer(name, description.HasValue ? description.Value : null, dataSourceName, skillsetName.HasValue ? skillsetName.Value : null, targetIndexName, schedule.HasValue ? schedule.Value : null, parameters.HasValue ? parameters.Value : null, new ChangeTrackingList<FieldMapping>(fieldMappings), new ChangeTrackingList<FieldMapping>(outputFieldMappings), disabled.HasValue ? disabled.Value : (bool?)null, odataEtag.HasValue ? odataEtag.Value : null);
        }
    }
}
