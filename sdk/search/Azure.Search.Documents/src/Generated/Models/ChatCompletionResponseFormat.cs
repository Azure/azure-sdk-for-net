// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Search.Documents.Models;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> Determines how the language model's response should be serialized. Defaults to 'text'. </summary>
    public partial class ChatCompletionResponseFormat
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ChatCompletionResponseFormat"/>. </summary>
        public ChatCompletionResponseFormat()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ChatCompletionResponseFormat"/>. </summary>
        /// <param name="type"> Specifies how the LLM should format the response. Possible values: 'text' (plain string), 'json_object' (arbitrary JSON), or 'json_schema' (adheres to provided schema). </param>
        /// <param name="chatCompletionSchemaProperties"> An open dictionary for extended properties. Required if 'type' == 'json_schema'. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ChatCompletionResponseFormat(ChatCompletionResponseFormatType? type, ChatCompletionResponseFormatJsonSchemaProperties chatCompletionSchemaProperties, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            ChatCompletionSchemaProperties = chatCompletionSchemaProperties;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Specifies how the LLM should format the response. Possible values: 'text' (plain string), 'json_object' (arbitrary JSON), or 'json_schema' (adheres to provided schema). </summary>
        public ChatCompletionResponseFormatType? Type { get; set; }
        /// <summary> An open dictionary for extended properties. Required if 'type' == 'json_schema'. </summary>
        public ChatCompletionResponseFormatJsonSchemaProperties ChatCompletionSchemaProperties { get; set; }
    }
}
