// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class HnswParameters : IUtf8JsonSerializable, IModelJsonSerializable<HnswParameters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<HnswParameters>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<HnswParameters>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HnswParameters>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(M))
            {
                if (M != null)
                {
                    writer.WritePropertyName("m"u8);
                    writer.WriteNumberValue(M.Value);
                }
                else
                {
                    writer.WriteNull("m");
                }
            }
            if (Optional.IsDefined(EfConstruction))
            {
                if (EfConstruction != null)
                {
                    writer.WritePropertyName("efConstruction"u8);
                    writer.WriteNumberValue(EfConstruction.Value);
                }
                else
                {
                    writer.WriteNull("efConstruction");
                }
            }
            if (Optional.IsDefined(EfSearch))
            {
                if (EfSearch != null)
                {
                    writer.WritePropertyName("efSearch"u8);
                    writer.WriteNumberValue(EfSearch.Value);
                }
                else
                {
                    writer.WriteNull("efSearch");
                }
            }
            if (Optional.IsDefined(Metric))
            {
                if (Metric != null)
                {
                    writer.WritePropertyName("metric"u8);
                    writer.WriteStringValue(Metric.Value.ToString());
                }
                else
                {
                    writer.WriteNull("metric");
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static HnswParameters DeserializeHnswParameters(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int?> m = default;
            Optional<int?> efConstruction = default;
            Optional<int?> efSearch = default;
            Optional<VectorSearchAlgorithmMetric?> metric = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("m"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        m = null;
                        continue;
                    }
                    m = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("efConstruction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        efConstruction = null;
                        continue;
                    }
                    efConstruction = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("efSearch"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        efSearch = null;
                        continue;
                    }
                    efSearch = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("metric"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        metric = null;
                        continue;
                    }
                    metric = new VectorSearchAlgorithmMetric(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new HnswParameters(Optional.ToNullable(m), Optional.ToNullable(efConstruction), Optional.ToNullable(efSearch), Optional.ToNullable(metric), rawData);
        }

        HnswParameters IModelJsonSerializable<HnswParameters>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HnswParameters>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeHnswParameters(doc.RootElement, options);
        }

        BinaryData IModelSerializable<HnswParameters>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HnswParameters>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        HnswParameters IModelSerializable<HnswParameters>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<HnswParameters>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeHnswParameters(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="HnswParameters"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="HnswParameters"/> to convert. </param>
        public static implicit operator RequestContent(HnswParameters model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="HnswParameters"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator HnswParameters(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeHnswParameters(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
