// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> Response from a List SynonymMaps request. If successful, it includes the full definitions of all synonym maps. </summary>
    internal partial class ListSynonymMapsResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ListSynonymMapsResult"/>. </summary>
        /// <param name="synonymMaps"> The synonym maps in the Search service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="synonymMaps"/> is null. </exception>
        internal ListSynonymMapsResult(IEnumerable<SynonymMap> synonymMaps)
        {
            Argument.AssertNotNull(synonymMaps, nameof(synonymMaps));

            SynonymMaps = synonymMaps.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="ListSynonymMapsResult"/>. </summary>
        /// <param name="synonymMaps"> The synonym maps in the Search service. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ListSynonymMapsResult(IReadOnlyList<SynonymMap> synonymMaps, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            SynonymMaps = synonymMaps;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ListSynonymMapsResult"/> for deserialization. </summary>
        internal ListSynonymMapsResult()
        {
        }

        /// <summary> The synonym maps in the Search service. </summary>
        public IReadOnlyList<SynonymMap> SynonymMaps { get; }
    }
}
