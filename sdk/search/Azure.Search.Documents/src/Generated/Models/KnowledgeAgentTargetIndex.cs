// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> The KnowledgeAgentTargetIndex. </summary>
    public partial class KnowledgeAgentTargetIndex
    {
        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentTargetIndex"/>. </summary>
        /// <param name="indexName"> The name of the target index. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="indexName"/> is null. </exception>
        public KnowledgeAgentTargetIndex(string indexName)
        {
            Argument.AssertNotNull(indexName, nameof(indexName));

            IndexName = indexName;
        }

        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentTargetIndex"/>. </summary>
        /// <param name="indexName"> The name of the target index. </param>
        /// <param name="defaultRerankerThreshold"> A threshold for reranking results (range: 0-4). </param>
        /// <param name="defaultIncludeReferenceSourceData"> Indicates whether reference source data should be included. </param>
        /// <param name="defaultMaxDocsForReranker"> Limits the number of documents considered for ranking. </param>
        internal KnowledgeAgentTargetIndex(string indexName, float? defaultRerankerThreshold, bool? defaultIncludeReferenceSourceData, int? defaultMaxDocsForReranker)
        {
            IndexName = indexName;
            DefaultRerankerThreshold = defaultRerankerThreshold;
            DefaultIncludeReferenceSourceData = defaultIncludeReferenceSourceData;
            DefaultMaxDocsForReranker = defaultMaxDocsForReranker;
        }

        /// <summary> The name of the target index. </summary>
        public string IndexName { get; set; }
        /// <summary> A threshold for reranking results (range: 0-4). </summary>
        public float? DefaultRerankerThreshold { get; set; }
        /// <summary> Indicates whether reference source data should be included. </summary>
        public bool? DefaultIncludeReferenceSourceData { get; set; }
        /// <summary> Limits the number of documents considered for ranking. </summary>
        public int? DefaultMaxDocsForReranker { get; set; }
    }
}
