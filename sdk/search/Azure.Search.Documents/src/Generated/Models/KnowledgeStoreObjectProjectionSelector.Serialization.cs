// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class KnowledgeStoreObjectProjectionSelector : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("storageContainer"u8);
            writer.WriteStringValue(StorageContainer);
            if (Core.Optional.IsDefined(ReferenceKeyName))
            {
                writer.WritePropertyName("referenceKeyName"u8);
                writer.WriteStringValue(ReferenceKeyName);
            }
            if (Core.Optional.IsDefined(GeneratedKeyName))
            {
                writer.WritePropertyName("generatedKeyName"u8);
                writer.WriteStringValue(GeneratedKeyName);
            }
            if (Core.Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source"u8);
                writer.WriteStringValue(Source);
            }
            if (Core.Optional.IsDefined(SourceContext))
            {
                writer.WritePropertyName("sourceContext"u8);
                writer.WriteStringValue(SourceContext);
            }
            if (Core.Optional.IsCollectionDefined(Inputs))
            {
                writer.WritePropertyName("inputs"u8);
                writer.WriteStartArray();
                foreach (var item in Inputs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static KnowledgeStoreObjectProjectionSelector DeserializeKnowledgeStoreObjectProjectionSelector(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string storageContainer = default;
            Core.Optional<string> referenceKeyName = default;
            Core.Optional<string> generatedKeyName = default;
            Core.Optional<string> source = default;
            Core.Optional<string> sourceContext = default;
            Core.Optional<IList<InputFieldMappingEntry>> inputs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("storageContainer"u8))
                {
                    storageContainer = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("referenceKeyName"u8))
                {
                    referenceKeyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("generatedKeyName"u8))
                {
                    generatedKeyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceContext"u8))
                {
                    sourceContext = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InputFieldMappingEntry> array = new List<InputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InputFieldMappingEntry.DeserializeInputFieldMappingEntry(item));
                    }
                    inputs = array;
                    continue;
                }
            }
            return new KnowledgeStoreObjectProjectionSelector(referenceKeyName.Value, generatedKeyName.Value, source.Value, sourceContext.Value, Core.Optional.ToList(inputs), storageContainer);
        }
    }
}
