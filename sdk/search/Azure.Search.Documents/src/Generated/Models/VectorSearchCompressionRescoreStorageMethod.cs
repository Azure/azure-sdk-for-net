// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> The storage method for the original full-precision vectors used for rescoring and internal index operations. </summary>
    public readonly partial struct VectorSearchCompressionRescoreStorageMethod : IEquatable<VectorSearchCompressionRescoreStorageMethod>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VectorSearchCompressionRescoreStorageMethod"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VectorSearchCompressionRescoreStorageMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PreserveOriginalsValue = "preserveOriginals";
        private const string DiscardOriginalsValue = "discardOriginals";

        /// <summary> This option preserves the original full-precision vectors. Choose this option for maximum flexibility and highest quality of compressed search results. This consumes more storage but allows for rescoring and oversampling. </summary>
        public static VectorSearchCompressionRescoreStorageMethod PreserveOriginals { get; } = new VectorSearchCompressionRescoreStorageMethod(PreserveOriginalsValue);
        /// <summary> This option discards the original full-precision vectors. Choose this option for maximum storage savings. Since this option does not allow for rescoring and oversampling, it will often cause slight to moderate reductions in quality. </summary>
        public static VectorSearchCompressionRescoreStorageMethod DiscardOriginals { get; } = new VectorSearchCompressionRescoreStorageMethod(DiscardOriginalsValue);
        /// <summary> Determines if two <see cref="VectorSearchCompressionRescoreStorageMethod"/> values are the same. </summary>
        public static bool operator ==(VectorSearchCompressionRescoreStorageMethod left, VectorSearchCompressionRescoreStorageMethod right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VectorSearchCompressionRescoreStorageMethod"/> values are not the same. </summary>
        public static bool operator !=(VectorSearchCompressionRescoreStorageMethod left, VectorSearchCompressionRescoreStorageMethod right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VectorSearchCompressionRescoreStorageMethod"/>. </summary>
        public static implicit operator VectorSearchCompressionRescoreStorageMethod(string value) => new VectorSearchCompressionRescoreStorageMethod(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VectorSearchCompressionRescoreStorageMethod other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VectorSearchCompressionRescoreStorageMethod other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
