// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.Search.Documents.Models
{
    /// <summary> The query parameters to use for vector search when a raw vector value is provided. </summary>
    public partial class RawVectorQuery : VectorQuery
    {
        /// <summary> Initializes a new instance of RawVectorQuery. </summary>
        public RawVectorQuery()
        {
            Vector = new ChangeTrackingList<float>();
            Kind = VectorQueryKind.Vector;
        }

        /// <summary> Initializes a new instance of RawVectorQuery. </summary>
        /// <param name="kind"> The kind of vector query being performed. </param>
        /// <param name="kNearestNeighborsCount"> Number of nearest neighbors to return as top hits. </param>
        /// <param name="fieldsRaw"> Vector Fields of type Collection(Edm.Single) to be included in the vector searched. </param>
        /// <param name="exhaustive"> When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios where exact matches are critical, such as determining ground truth values. </param>
        /// <param name="vector"> The vector representation of a search query. </param>
        internal RawVectorQuery(VectorQueryKind kind, int? kNearestNeighborsCount, string fieldsRaw, bool? exhaustive, IReadOnlyList<float> vector) : base(kind, kNearestNeighborsCount, fieldsRaw, exhaustive)
        {
            Vector = vector;
            Kind = kind;
        }
    }
}
