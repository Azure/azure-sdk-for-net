// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class CustomEntityLookupSkill : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DefaultLanguageCode))
            {
                if (DefaultLanguageCode != null)
                {
                    writer.WritePropertyName("defaultLanguageCode");
                    writer.WriteStringValue(DefaultLanguageCode.Value.ToString());
                }
                else
                {
                    writer.WriteNull("defaultLanguageCode");
                }
            }
            if (Optional.IsDefined(EntitiesDefinitionUri))
            {
                if (EntitiesDefinitionUri != null)
                {
                    writer.WritePropertyName("entitiesDefinitionUri");
                    writer.WriteStringValue(EntitiesDefinitionUri);
                }
                else
                {
                    writer.WriteNull("entitiesDefinitionUri");
                }
            }
            if (Optional.IsCollectionDefined(InlineEntitiesDefinition))
            {
                if (InlineEntitiesDefinition != null)
                {
                    writer.WritePropertyName("inlineEntitiesDefinition");
                    writer.WriteStartArray();
                    foreach (var item in InlineEntitiesDefinition)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("inlineEntitiesDefinition");
                }
            }
            if (Optional.IsDefined(GlobalDefaultCaseSensitive))
            {
                if (GlobalDefaultCaseSensitive != null)
                {
                    writer.WritePropertyName("globalDefaultCaseSensitive");
                    writer.WriteBooleanValue(GlobalDefaultCaseSensitive.Value);
                }
                else
                {
                    writer.WriteNull("globalDefaultCaseSensitive");
                }
            }
            if (Optional.IsDefined(GlobalDefaultAccentSensitive))
            {
                if (GlobalDefaultAccentSensitive != null)
                {
                    writer.WritePropertyName("globalDefaultAccentSensitive");
                    writer.WriteBooleanValue(GlobalDefaultAccentSensitive.Value);
                }
                else
                {
                    writer.WriteNull("globalDefaultAccentSensitive");
                }
            }
            if (Optional.IsDefined(GlobalDefaultFuzzyEditDistance))
            {
                if (GlobalDefaultFuzzyEditDistance != null)
                {
                    writer.WritePropertyName("globalDefaultFuzzyEditDistance");
                    writer.WriteNumberValue(GlobalDefaultFuzzyEditDistance.Value);
                }
                else
                {
                    writer.WriteNull("globalDefaultFuzzyEditDistance");
                }
            }
            writer.WritePropertyName("@odata.type");
            writer.WriteStringValue(ODataType);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Context))
            {
                writer.WritePropertyName("context");
                writer.WriteStringValue(Context);
            }
            writer.WritePropertyName("inputs");
            writer.WriteStartArray();
            foreach (var item in Inputs)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("outputs");
            writer.WriteStartArray();
            foreach (var item in Outputs)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static CustomEntityLookupSkill DeserializeCustomEntityLookupSkill(JsonElement element)
        {
            Optional<CustomEntityLookupSkillLanguage?> defaultLanguageCode = default;
            Optional<string> entitiesDefinitionUri = default;
            Optional<IList<CustomEntity>> inlineEntitiesDefinition = default;
            Optional<bool?> globalDefaultCaseSensitive = default;
            Optional<bool?> globalDefaultAccentSensitive = default;
            Optional<int?> globalDefaultFuzzyEditDistance = default;
            string odataType = default;
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<string> context = default;
            IList<InputFieldMappingEntry> inputs = default;
            IList<OutputFieldMappingEntry> outputs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("defaultLanguageCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        defaultLanguageCode = null;
                        continue;
                    }
                    defaultLanguageCode = new CustomEntityLookupSkillLanguage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("entitiesDefinitionUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        entitiesDefinitionUri = null;
                        continue;
                    }
                    entitiesDefinitionUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inlineEntitiesDefinition"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        inlineEntitiesDefinition = null;
                        continue;
                    }
                    List<CustomEntity> array = new List<CustomEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CustomEntity.DeserializeCustomEntity(item));
                    }
                    inlineEntitiesDefinition = array;
                    continue;
                }
                if (property.NameEquals("globalDefaultCaseSensitive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        globalDefaultCaseSensitive = null;
                        continue;
                    }
                    globalDefaultCaseSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("globalDefaultAccentSensitive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        globalDefaultAccentSensitive = null;
                        continue;
                    }
                    globalDefaultAccentSensitive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("globalDefaultFuzzyEditDistance"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        globalDefaultFuzzyEditDistance = null;
                        continue;
                    }
                    globalDefaultFuzzyEditDistance = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("@odata.type"))
                {
                    odataType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("context"))
                {
                    context = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputs"))
                {
                    List<InputFieldMappingEntry> array = new List<InputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InputFieldMappingEntry.DeserializeInputFieldMappingEntry(item));
                    }
                    inputs = array;
                    continue;
                }
                if (property.NameEquals("outputs"))
                {
                    List<OutputFieldMappingEntry> array = new List<OutputFieldMappingEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OutputFieldMappingEntry.DeserializeOutputFieldMappingEntry(item));
                    }
                    outputs = array;
                    continue;
                }
            }
            return new CustomEntityLookupSkill(odataType, name.Value, description.Value, context.Value, inputs, outputs, Optional.ToNullable(defaultLanguageCode), entitiesDefinitionUri.Value, Optional.ToList(inlineEntitiesDefinition), Optional.ToNullable(globalDefaultCaseSensitive), Optional.ToNullable(globalDefaultAccentSensitive), Optional.ToNullable(globalDefaultFuzzyEditDistance));
        }
    }
}
