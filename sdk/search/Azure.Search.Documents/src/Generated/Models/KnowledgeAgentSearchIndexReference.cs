// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Agents.Models
{
    /// <summary> Represents an Azure Search document reference. </summary>
    public partial class KnowledgeAgentSearchIndexReference : KnowledgeAgentReference
    {
        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentSearchIndexReference"/>. </summary>
        /// <param name="id"> The ID of the reference. </param>
        /// <param name="activitySource"> The source activity ID for the reference. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        internal KnowledgeAgentSearchIndexReference(string id, int activitySource) : base(id, activitySource)
        {
            Argument.AssertNotNull(id, nameof(id));

            Type = "searchIndex";
        }

        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentSearchIndexReference"/>. </summary>
        /// <param name="type"> The type of the reference. </param>
        /// <param name="id"> The ID of the reference. </param>
        /// <param name="activitySource"> The source activity ID for the reference. </param>
        /// <param name="sourceData"> Dictionary of &lt;any&gt;. </param>
        /// <param name="rerankerScore"> The reranker score for the document reference. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="docKey"> The document key for the reference. </param>
        internal KnowledgeAgentSearchIndexReference(string type, string id, int activitySource, IReadOnlyDictionary<string, object> sourceData, float? rerankerScore, IDictionary<string, BinaryData> serializedAdditionalRawData, string docKey) : base(type, id, activitySource, sourceData, rerankerScore, serializedAdditionalRawData)
        {
            DocKey = docKey;
            Type = type ?? "searchIndex";
        }

        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentSearchIndexReference"/> for deserialization. </summary>
        internal KnowledgeAgentSearchIndexReference()
        {
        }

        /// <summary> The document key for the reference. </summary>
        public string DocKey { get; }
    }
}
