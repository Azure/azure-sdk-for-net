// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> Specifies the submode that will determine whether a markdown file will be parsed into exactly one search document or multiple search documents. Default is `oneToMany`. </summary>
    public readonly partial struct MarkdownParsingSubmode : IEquatable<MarkdownParsingSubmode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MarkdownParsingSubmode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MarkdownParsingSubmode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneToManyValue = "oneToMany";
        private const string OneToOneValue = "oneToOne";

        /// <summary> Indicates that each section of the markdown file (up to a specified depth) will be parsed into individual search documents. This can result in a single markdown file producing multiple search documents. This is the default sub-mode. </summary>
        public static MarkdownParsingSubmode OneToMany { get; } = new MarkdownParsingSubmode(OneToManyValue);
        /// <summary> Indicates that each markdown file will be parsed into a single search document. </summary>
        public static MarkdownParsingSubmode OneToOne { get; } = new MarkdownParsingSubmode(OneToOneValue);
        /// <summary> Determines if two <see cref="MarkdownParsingSubmode"/> values are the same. </summary>
        public static bool operator ==(MarkdownParsingSubmode left, MarkdownParsingSubmode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MarkdownParsingSubmode"/> values are not the same. </summary>
        public static bool operator !=(MarkdownParsingSubmode left, MarkdownParsingSubmode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MarkdownParsingSubmode"/>. </summary>
        public static implicit operator MarkdownParsingSubmode(string value) => new MarkdownParsingSubmode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MarkdownParsingSubmode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MarkdownParsingSubmode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
