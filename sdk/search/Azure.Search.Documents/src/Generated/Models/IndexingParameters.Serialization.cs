// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class IndexingParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BatchSize))
            {
                if (BatchSize != null)
                {
                    writer.WritePropertyName("batchSize");
                    writer.WriteNumberValue(BatchSize.Value);
                }
                else
                {
                    writer.WriteNull("batchSize");
                }
            }
            if (Optional.IsDefined(MaxFailedItems))
            {
                if (MaxFailedItems != null)
                {
                    writer.WritePropertyName("maxFailedItems");
                    writer.WriteNumberValue(MaxFailedItems.Value);
                }
                else
                {
                    writer.WriteNull("maxFailedItems");
                }
            }
            if (Optional.IsDefined(MaxFailedItemsPerBatch))
            {
                if (MaxFailedItemsPerBatch != null)
                {
                    writer.WritePropertyName("maxFailedItemsPerBatch");
                    writer.WriteNumberValue(MaxFailedItemsPerBatch.Value);
                }
                else
                {
                    writer.WriteNull("maxFailedItemsPerBatch");
                }
            }
            if (Optional.IsCollectionDefined(Configuration))
            {
                writer.WritePropertyName("configuration");
                writer.WriteStartObject();
                foreach (var item in Configuration)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static IndexingParameters DeserializeIndexingParameters(JsonElement element)
        {
            Optional<int?> batchSize = default;
            Optional<int?> maxFailedItems = default;
            Optional<int?> maxFailedItemsPerBatch = default;
            Optional<IDictionary<string, object>> configuration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("batchSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        batchSize = null;
                        continue;
                    }
                    batchSize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxFailedItems"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxFailedItems = null;
                        continue;
                    }
                    maxFailedItems = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxFailedItemsPerBatch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxFailedItemsPerBatch = null;
                        continue;
                    }
                    maxFailedItemsPerBatch = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("configuration"))
                {
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    configuration = dictionary;
                    continue;
                }
            }
            return new IndexingParameters(Optional.ToNullable(batchSize), Optional.ToNullable(maxFailedItems), Optional.ToNullable(maxFailedItemsPerBatch), Optional.ToDictionary(configuration));
        }
    }
}
