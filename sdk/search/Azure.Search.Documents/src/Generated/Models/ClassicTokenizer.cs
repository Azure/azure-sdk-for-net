// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Search.Documents.Models
{
    /// <summary> Grammar-based tokenizer that is suitable for processing most European-language documents. This tokenizer is implemented using Apache Lucene. </summary>
    public partial class ClassicTokenizer : Tokenizer
    {
        /// <summary> Initializes a new instance of ClassicTokenizer. </summary>
        public ClassicTokenizer()
        {
            ODataType = "#Microsoft.Azure.Search.ClassicTokenizer";
        }

        /// <summary> Initializes a new instance of ClassicTokenizer. </summary>
        /// <param name="maxTokenLength"> The maximum token length. Default is 255. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters. </param>
        /// <param name="oDataType"> The model type. </param>
        /// <param name="name"> The name of the tokenizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters. </param>
        internal ClassicTokenizer(int? maxTokenLength, string oDataType, string name) : base(oDataType, name)
        {
            MaxTokenLength = maxTokenLength;
            ODataType = "#Microsoft.Azure.Search.ClassicTokenizer";
        }

        /// <summary> The maximum token length. Default is 255. Tokens longer than the maximum length are split. The maximum token length that can be used is 300 characters. </summary>
        public int? MaxTokenLength { get; set; }
    }
}
