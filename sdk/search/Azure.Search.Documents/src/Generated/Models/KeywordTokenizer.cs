// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Search.Documents.Models
{
    /// <summary> Emits the entire input as a single token. This tokenizer is implemented using Apache Lucene. </summary>
    public partial class KeywordTokenizer : LexicalTokenizer
    {
        /// <summary> Initializes a new instance of KeywordTokenizer. </summary>
        /// <param name="name"> The name of the tokenizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters. </param>
        public KeywordTokenizer(string name) : base(name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            ODataType = "#Microsoft.Azure.Search.KeywordTokenizer";
        }

        /// <summary> Initializes a new instance of KeywordTokenizer. </summary>
        /// <param name="oDataType"> Identifies the concrete type of the tokenizer. </param>
        /// <param name="name"> The name of the tokenizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters. </param>
        /// <param name="bufferSize"> The read buffer size in bytes. Default is 256. </param>
        internal KeywordTokenizer(string oDataType, string name, int? bufferSize) : base(oDataType, name)
        {
            BufferSize = bufferSize;
            ODataType = oDataType ?? "#Microsoft.Azure.Search.KeywordTokenizer";
        }

        /// <summary> The read buffer size in bytes. Default is 256. </summary>
        public int? BufferSize { get; set; }
    }
}
