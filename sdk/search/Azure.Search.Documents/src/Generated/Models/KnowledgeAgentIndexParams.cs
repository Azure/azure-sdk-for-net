// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Search.Documents.Agents.Models
{
    /// <summary> The KnowledgeAgentIndexParams. </summary>
    public partial class KnowledgeAgentIndexParams
    {
        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentIndexParams"/>. </summary>
        public KnowledgeAgentIndexParams()
        {
        }

        /// <summary> Initializes a new instance of <see cref="KnowledgeAgentIndexParams"/>. </summary>
        /// <param name="indexName"> The name of the index the params apply to. </param>
        /// <param name="filterAddOn"> A filter condition applied to the index (e.g., 'State eq VA'). </param>
        /// <param name="maxDocsForReranker"> Limits the number of documents considered for ranking. </param>
        /// <param name="rerankerThreshold"> A threshold for reranking results (range: 0-4). </param>
        /// <param name="includeReferenceSourceData"> Indicates whether reference source data should be included. </param>
        internal KnowledgeAgentIndexParams(string indexName, string filterAddOn, int? maxDocsForReranker, float? rerankerThreshold, bool? includeReferenceSourceData)
        {
            IndexName = indexName;
            FilterAddOn = filterAddOn;
            MaxDocsForReranker = maxDocsForReranker;
            RerankerThreshold = rerankerThreshold;
            IncludeReferenceSourceData = includeReferenceSourceData;
        }

        /// <summary> The name of the index the params apply to. </summary>
        public string IndexName { get; set; }
        /// <summary> A filter condition applied to the index (e.g., 'State eq VA'). </summary>
        public string FilterAddOn { get; set; }
        /// <summary> Limits the number of documents considered for ranking. </summary>
        public int? MaxDocsForReranker { get; set; }
        /// <summary> A threshold for reranking results (range: 0-4). </summary>
        public float? RerankerThreshold { get; set; }
        /// <summary> Indicates whether reference source data should be included. </summary>
        public bool? IncludeReferenceSourceData { get; set; }
    }
}
