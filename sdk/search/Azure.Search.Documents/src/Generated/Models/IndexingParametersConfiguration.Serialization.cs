// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class IndexingParametersConfiguration : IUtf8JsonSerializable, IJsonModel<IndexingParametersConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<IndexingParametersConfiguration>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<IndexingParametersConfiguration>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<IndexingParametersConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(IndexingParametersConfiguration)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(ParsingMode))
            {
                writer.WritePropertyName("parsingMode"u8);
                writer.WriteStringValue(ParsingMode.Value.ToString());
            }
            if (Optional.IsDefined(ExcludedFileNameExtensions))
            {
                writer.WritePropertyName("excludedFileNameExtensions"u8);
                writer.WriteStringValue(ExcludedFileNameExtensions);
            }
            if (Optional.IsDefined(IndexedFileNameExtensions))
            {
                writer.WritePropertyName("indexedFileNameExtensions"u8);
                writer.WriteStringValue(IndexedFileNameExtensions);
            }
            if (Optional.IsDefined(FailOnUnsupportedContentType))
            {
                writer.WritePropertyName("failOnUnsupportedContentType"u8);
                writer.WriteBooleanValue(FailOnUnsupportedContentType.Value);
            }
            if (Optional.IsDefined(FailOnUnprocessableDocument))
            {
                writer.WritePropertyName("failOnUnprocessableDocument"u8);
                writer.WriteBooleanValue(FailOnUnprocessableDocument.Value);
            }
            if (Optional.IsDefined(IndexStorageMetadataOnlyForOversizedDocuments))
            {
                writer.WritePropertyName("indexStorageMetadataOnlyForOversizedDocuments"u8);
                writer.WriteBooleanValue(IndexStorageMetadataOnlyForOversizedDocuments.Value);
            }
            if (Optional.IsDefined(DelimitedTextHeaders))
            {
                writer.WritePropertyName("delimitedTextHeaders"u8);
                writer.WriteStringValue(DelimitedTextHeaders);
            }
            if (Optional.IsDefined(DelimitedTextDelimiter))
            {
                writer.WritePropertyName("delimitedTextDelimiter"u8);
                writer.WriteStringValue(DelimitedTextDelimiter);
            }
            if (Optional.IsDefined(FirstLineContainsHeaders))
            {
                writer.WritePropertyName("firstLineContainsHeaders"u8);
                writer.WriteBooleanValue(FirstLineContainsHeaders.Value);
            }
            if (Optional.IsDefined(DocumentRoot))
            {
                writer.WritePropertyName("documentRoot"u8);
                writer.WriteStringValue(DocumentRoot);
            }
            if (Optional.IsDefined(DataToExtract))
            {
                writer.WritePropertyName("dataToExtract"u8);
                writer.WriteStringValue(DataToExtract.Value.ToString());
            }
            if (Optional.IsDefined(ImageAction))
            {
                writer.WritePropertyName("imageAction"u8);
                writer.WriteStringValue(ImageAction.Value.ToString());
            }
            if (Optional.IsDefined(AllowSkillsetToReadFileData))
            {
                writer.WritePropertyName("allowSkillsetToReadFileData"u8);
                writer.WriteBooleanValue(AllowSkillsetToReadFileData.Value);
            }
            if (Optional.IsDefined(PdfTextRotationAlgorithm))
            {
                writer.WritePropertyName("pdfTextRotationAlgorithm"u8);
                writer.WriteStringValue(PdfTextRotationAlgorithm.Value.ToString());
            }
            if (Optional.IsDefined(ExecutionEnvironment))
            {
                writer.WritePropertyName("executionEnvironment"u8);
                writer.WriteStringValue(ExecutionEnvironment.Value.ToString());
            }
            if (Optional.IsDefined(_queryTimeout))
            {
                writer.WritePropertyName("queryTimeout"u8);
                writer.WriteStringValue(_queryTimeout);
            }
            if (AdditionalProperties != null)
            {
                foreach (var item in AdditionalProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
            }
            writer.WriteEndObject();
        }

        IndexingParametersConfiguration IJsonModel<IndexingParametersConfiguration>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<IndexingParametersConfiguration>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(IndexingParametersConfiguration)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeIndexingParametersConfiguration(document.RootElement, options);
        }

        internal static IndexingParametersConfiguration DeserializeIndexingParametersConfiguration(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<BlobIndexerParsingMode> parsingMode = default;
            Optional<string> excludedFileNameExtensions = default;
            Optional<string> indexedFileNameExtensions = default;
            Optional<bool> failOnUnsupportedContentType = default;
            Optional<bool> failOnUnprocessableDocument = default;
            Optional<bool> indexStorageMetadataOnlyForOversizedDocuments = default;
            Optional<string> delimitedTextHeaders = default;
            Optional<string> delimitedTextDelimiter = default;
            Optional<bool> firstLineContainsHeaders = default;
            Optional<string> documentRoot = default;
            Optional<BlobIndexerDataToExtract> dataToExtract = default;
            Optional<BlobIndexerImageAction> imageAction = default;
            Optional<bool> allowSkillsetToReadFileData = default;
            Optional<BlobIndexerPdfTextRotationAlgorithm> pdfTextRotationAlgorithm = default;
            Optional<IndexerExecutionEnvironment> executionEnvironment = default;
            Optional<string> queryTimeout = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("parsingMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    parsingMode = new BlobIndexerParsingMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("excludedFileNameExtensions"u8))
                {
                    excludedFileNameExtensions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("indexedFileNameExtensions"u8))
                {
                    indexedFileNameExtensions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failOnUnsupportedContentType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failOnUnsupportedContentType = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("failOnUnprocessableDocument"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failOnUnprocessableDocument = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("indexStorageMetadataOnlyForOversizedDocuments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    indexStorageMetadataOnlyForOversizedDocuments = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("delimitedTextHeaders"u8))
                {
                    delimitedTextHeaders = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("delimitedTextDelimiter"u8))
                {
                    delimitedTextDelimiter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firstLineContainsHeaders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    firstLineContainsHeaders = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("documentRoot"u8))
                {
                    documentRoot = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataToExtract"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataToExtract = new BlobIndexerDataToExtract(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("imageAction"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    imageAction = new BlobIndexerImageAction(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allowSkillsetToReadFileData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowSkillsetToReadFileData = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("pdfTextRotationAlgorithm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pdfTextRotationAlgorithm = new BlobIndexerPdfTextRotationAlgorithm(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("executionEnvironment"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    executionEnvironment = new IndexerExecutionEnvironment(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("queryTimeout"u8))
                {
                    queryTimeout = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new IndexingParametersConfiguration(Optional.ToNullable(parsingMode), excludedFileNameExtensions.Value, indexedFileNameExtensions.Value, Optional.ToNullable(failOnUnsupportedContentType), Optional.ToNullable(failOnUnprocessableDocument), Optional.ToNullable(indexStorageMetadataOnlyForOversizedDocuments), delimitedTextHeaders.Value, delimitedTextDelimiter.Value, Optional.ToNullable(firstLineContainsHeaders), documentRoot.Value, Optional.ToNullable(dataToExtract), Optional.ToNullable(imageAction), Optional.ToNullable(allowSkillsetToReadFileData), Optional.ToNullable(pdfTextRotationAlgorithm), Optional.ToNullable(executionEnvironment), queryTimeout.Value, additionalProperties);
        }

        BinaryData IPersistableModel<IndexingParametersConfiguration>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<IndexingParametersConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(IndexingParametersConfiguration)} does not support '{options.Format}' format.");
            }
        }

        IndexingParametersConfiguration IPersistableModel<IndexingParametersConfiguration>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<IndexingParametersConfiguration>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeIndexingParametersConfiguration(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(IndexingParametersConfiguration)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<IndexingParametersConfiguration>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
