// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Search.Documents.Indexes.Models;

namespace Azure.Search.Documents.Agents.Models
{
    /// <summary> Specifies runtime parameters for a search index knowledge source. </summary>
    public partial class SearchIndexKnowledgeSourceParams : KnowledgeSourceParams
    {
        /// <summary> Initializes a new instance of <see cref="SearchIndexKnowledgeSourceParams"/>. </summary>
        /// <param name="knowledgeSourceName"> The name of the index the params apply to. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="knowledgeSourceName"/> is null. </exception>
        public SearchIndexKnowledgeSourceParams(string knowledgeSourceName) : base(knowledgeSourceName)
        {
            Argument.AssertNotNull(knowledgeSourceName, nameof(knowledgeSourceName));

            Kind = KnowledgeSourceKind.SearchIndex;
        }

        /// <summary> Initializes a new instance of <see cref="SearchIndexKnowledgeSourceParams"/>. </summary>
        /// <param name="knowledgeSourceName"> The name of the index the params apply to. </param>
        /// <param name="kind"> The type of the knowledge source. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="filterAddOn"> A filter condition applied to the index (e.g., 'State eq VA'). </param>
        internal SearchIndexKnowledgeSourceParams(string knowledgeSourceName, KnowledgeSourceKind kind, IDictionary<string, BinaryData> serializedAdditionalRawData, string filterAddOn) : base(knowledgeSourceName, kind, serializedAdditionalRawData)
        {
            FilterAddOn = filterAddOn;
            Kind = kind;
        }

        /// <summary> Initializes a new instance of <see cref="SearchIndexKnowledgeSourceParams"/> for deserialization. </summary>
        internal SearchIndexKnowledgeSourceParams()
        {
        }

        /// <summary> A filter condition applied to the index (e.g., 'State eq VA'). </summary>
        public string FilterAddOn { get; set; }
    }
}
