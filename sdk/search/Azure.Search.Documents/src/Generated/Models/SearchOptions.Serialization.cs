// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Search.Documents.Models;

namespace Azure.Search.Documents
{
    public partial class SearchOptions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (IncludeTotalCount.HasValue)
            {
                writer.WritePropertyName("count"u8);
                writer.WriteBooleanValue(IncludeTotalCount.Value);
            }
            if (!(Facets is ChangeTrackingList<string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("facets"u8);
                writer.WriteStartArray();
                foreach (var item in Facets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Filter != null)
            {
                writer.WritePropertyName("filter"u8);
                writer.WriteStringValue(Filter);
            }
            if (HighlightFieldsRaw != null)
            {
                writer.WritePropertyName("highlight"u8);
                writer.WriteStringValue(HighlightFieldsRaw);
            }
            if (HighlightPostTag != null)
            {
                writer.WritePropertyName("highlightPostTag"u8);
                writer.WriteStringValue(HighlightPostTag);
            }
            if (HighlightPreTag != null)
            {
                writer.WritePropertyName("highlightPreTag"u8);
                writer.WriteStringValue(HighlightPreTag);
            }
            if (MinimumCoverage.HasValue)
            {
                writer.WritePropertyName("minimumCoverage"u8);
                writer.WriteNumberValue(MinimumCoverage.Value);
            }
            if (OrderByRaw != null)
            {
                writer.WritePropertyName("orderby"u8);
                writer.WriteStringValue(OrderByRaw);
            }
            if (QueryType.HasValue)
            {
                writer.WritePropertyName("queryType"u8);
                writer.WriteStringValue(QueryType.Value.ToSerialString());
            }
            if (ScoringStatistics.HasValue)
            {
                writer.WritePropertyName("scoringStatistics"u8);
                writer.WriteStringValue(ScoringStatistics.Value.ToSerialString());
            }
            if (SessionId != null)
            {
                writer.WritePropertyName("sessionId"u8);
                writer.WriteStringValue(SessionId);
            }
            if (!(ScoringParameters is ChangeTrackingList<string> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("scoringParameters"u8);
                writer.WriteStartArray();
                foreach (var item in ScoringParameters)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (ScoringProfile != null)
            {
                writer.WritePropertyName("scoringProfile"u8);
                writer.WriteStringValue(ScoringProfile);
            }
            if (SemanticQuery != null)
            {
                writer.WritePropertyName("semanticQuery"u8);
                writer.WriteStringValue(SemanticQuery);
            }
            if (SemanticConfigurationName != null)
            {
                writer.WritePropertyName("semanticConfiguration"u8);
                writer.WriteStringValue(SemanticConfigurationName);
            }
            if (SemanticErrorMode.HasValue)
            {
                writer.WritePropertyName("semanticErrorHandling"u8);
                writer.WriteStringValue(SemanticErrorMode.Value.ToString());
            }
            if (SemanticMaxWaitInMilliseconds.HasValue)
            {
                if (SemanticMaxWaitInMilliseconds != null)
                {
                    writer.WritePropertyName("semanticMaxWaitInMilliseconds"u8);
                    writer.WriteNumberValue(SemanticMaxWaitInMilliseconds.Value);
                }
                else
                {
                    writer.WriteNull("semanticMaxWaitInMilliseconds");
                }
            }
            if (Debug.HasValue)
            {
                writer.WritePropertyName("debug"u8);
                writer.WriteStringValue(Debug.Value.ToString());
            }
            if (SearchText != null)
            {
                writer.WritePropertyName("search"u8);
                writer.WriteStringValue(SearchText);
            }
            if (SearchFieldsRaw != null)
            {
                writer.WritePropertyName("searchFields"u8);
                writer.WriteStringValue(SearchFieldsRaw);
            }
            if (SearchMode.HasValue)
            {
                writer.WritePropertyName("searchMode"u8);
                writer.WriteStringValue(SearchMode.Value.ToSerialString());
            }
            if (QueryLanguage.HasValue)
            {
                writer.WritePropertyName("queryLanguage"u8);
                writer.WriteStringValue(QueryLanguage.Value.ToString());
            }
            if (QuerySpeller.HasValue)
            {
                writer.WritePropertyName("speller"u8);
                writer.WriteStringValue(QuerySpeller.Value.ToString());
            }
            if (QueryAnswerRaw != null)
            {
                writer.WritePropertyName("answers"u8);
                writer.WriteStringValue(QueryAnswerRaw);
            }
            if (SelectRaw != null)
            {
                writer.WritePropertyName("select"u8);
                writer.WriteStringValue(SelectRaw);
            }
            if (Skip.HasValue)
            {
                writer.WritePropertyName("skip"u8);
                writer.WriteNumberValue(Skip.Value);
            }
            if (Size.HasValue)
            {
                writer.WritePropertyName("top"u8);
                writer.WriteNumberValue(Size.Value);
            }
            if (QueryCaptionRaw != null)
            {
                writer.WritePropertyName("captions"u8);
                writer.WriteStringValue(QueryCaptionRaw);
            }
            if (SemanticFieldsRaw != null)
            {
                writer.WritePropertyName("semanticFields"u8);
                writer.WriteStringValue(SemanticFieldsRaw);
            }
            if (!(VectorQueries is ChangeTrackingList<VectorQuery> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("vectorQueries"u8);
                writer.WriteStartArray();
                foreach (var item in VectorQueries)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (FilterMode.HasValue)
            {
                writer.WritePropertyName("vectorFilterMode"u8);
                writer.WriteStringValue(FilterMode.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static SearchOptions DeserializeSearchOptions(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> count = default;
            IList<string> facets = default;
            Optional<string> filter = default;
            Optional<string> highlight = default;
            Optional<string> highlightPostTag = default;
            Optional<string> highlightPreTag = default;
            Optional<double> minimumCoverage = default;
            Optional<string> orderby = default;
            Optional<SearchQueryType> queryType = default;
            Optional<ScoringStatistics> scoringStatistics = default;
            Optional<string> sessionId = default;
            IList<string> scoringParameters = default;
            Optional<string> scoringProfile = default;
            Optional<string> semanticQuery = default;
            Optional<string> semanticConfiguration = default;
            Optional<SemanticErrorMode> semanticErrorHandling = default;
            Optional<int?> semanticMaxWaitInMilliseconds = default;
            Optional<QueryDebugMode> debug = default;
            Optional<string> search = default;
            Optional<string> searchFields = default;
            Optional<SearchMode> searchMode = default;
            Optional<QueryLanguage> queryLanguage = default;
            Optional<QuerySpellerType> speller = default;
            Optional<string> answers = default;
            Optional<string> select = default;
            Optional<int> skip = default;
            Optional<int> top = default;
            Optional<string> captions = default;
            Optional<string> semanticFields = default;
            IList<VectorQuery> vectorQueries = default;
            Optional<VectorFilterMode> vectorFilterMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("facets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    facets = array;
                    continue;
                }
                if (property.NameEquals("filter"u8))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlight"u8))
                {
                    highlight = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlightPostTag"u8))
                {
                    highlightPostTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlightPreTag"u8))
                {
                    highlightPreTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumCoverage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumCoverage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("orderby"u8))
                {
                    orderby = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryType = property.Value.GetString().ToSearchQueryType();
                    continue;
                }
                if (property.NameEquals("scoringStatistics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scoringStatistics = property.Value.GetString().ToScoringStatistics();
                    continue;
                }
                if (property.NameEquals("sessionId"u8))
                {
                    sessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scoringParameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    scoringParameters = array;
                    continue;
                }
                if (property.NameEquals("scoringProfile"u8))
                {
                    scoringProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("semanticQuery"u8))
                {
                    semanticQuery = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("semanticConfiguration"u8))
                {
                    semanticConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("semanticErrorHandling"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    semanticErrorHandling = new SemanticErrorMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("semanticMaxWaitInMilliseconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        semanticMaxWaitInMilliseconds = null;
                        continue;
                    }
                    semanticMaxWaitInMilliseconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("debug"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    debug = new QueryDebugMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("search"u8))
                {
                    search = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchFields"u8))
                {
                    searchFields = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchMode = property.Value.GetString().ToSearchMode();
                    continue;
                }
                if (property.NameEquals("queryLanguage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryLanguage = new QueryLanguage(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("speller"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    speller = new QuerySpellerType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("answers"u8))
                {
                    answers = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("select"u8))
                {
                    select = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("skip"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    skip = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("top"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    top = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("captions"u8))
                {
                    captions = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("semanticFields"u8))
                {
                    semanticFields = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vectorQueries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VectorQuery> array = new List<VectorQuery>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VectorQuery.DeserializeVectorQuery(item));
                    }
                    vectorQueries = array;
                    continue;
                }
                if (property.NameEquals("vectorFilterMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vectorFilterMode = new VectorFilterMode(property.Value.GetString());
                    continue;
                }
            }
            return new SearchOptions(
                Optional.ToNullable(count),
                facets ?? new ChangeTrackingList<string>(),
                filter.Value,
                highlight.Value,
                highlightPostTag.Value,
                highlightPreTag.Value,
                Optional.ToNullable(minimumCoverage),
                orderby.Value,
                Optional.ToNullable(queryType),
                Optional.ToNullable(scoringStatistics),
                sessionId.Value,
                scoringParameters ?? new ChangeTrackingList<string>(),
                scoringProfile.Value,
                semanticQuery.Value,
                semanticConfiguration.Value,
                Optional.ToNullable(semanticErrorHandling),
                Optional.ToNullable(semanticMaxWaitInMilliseconds),
                Optional.ToNullable(debug),
                search.Value,
                searchFields.Value,
                Optional.ToNullable(searchMode),
                Optional.ToNullable(queryLanguage),
                Optional.ToNullable(speller),
                answers.Value,
                select.Value,
                Optional.ToNullable(skip),
                Optional.ToNullable(top),
                captions.Value,
                semanticFields.Value,
                vectorQueries ?? new ChangeTrackingList<VectorQuery>(),
                Optional.ToNullable(vectorFilterMode));
        }
    }
}
