// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Models
{
    public partial class SearchField : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(Type.ToString());
            if (IsKey != null)
            {
                writer.WritePropertyName("key");
                writer.WriteBooleanValue(IsKey.Value);
            }
            if (IsRetrievable != null)
            {
                writer.WritePropertyName("retrievable");
                writer.WriteBooleanValue(IsRetrievable.Value);
            }
            if (IsSearchable != null)
            {
                writer.WritePropertyName("searchable");
                writer.WriteBooleanValue(IsSearchable.Value);
            }
            if (IsFilterable != null)
            {
                writer.WritePropertyName("filterable");
                writer.WriteBooleanValue(IsFilterable.Value);
            }
            if (IsSortable != null)
            {
                writer.WritePropertyName("sortable");
                writer.WriteBooleanValue(IsSortable.Value);
            }
            if (IsFacetable != null)
            {
                writer.WritePropertyName("facetable");
                writer.WriteBooleanValue(IsFacetable.Value);
            }
            if (Analyzer != null)
            {
                writer.WritePropertyName("analyzer");
                writer.WriteStringValue(Analyzer.Value.ToString());
            }
            if (SearchAnalyzer != null)
            {
                writer.WritePropertyName("searchAnalyzer");
                writer.WriteStringValue(SearchAnalyzer.Value.ToString());
            }
            if (IndexAnalyzer != null)
            {
                writer.WritePropertyName("indexAnalyzer");
                writer.WriteStringValue(IndexAnalyzer.Value.ToString());
            }
            if (SynonymMaps != null)
            {
                writer.WritePropertyName("synonymMaps");
                writer.WriteStartArray();
                foreach (var item in SynonymMaps)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Fields != null)
            {
                writer.WritePropertyName("fields");
                writer.WriteStartArray();
                foreach (var item in Fields)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SearchField DeserializeSearchField(JsonElement element)
        {
            string name = default;
            DataType type = default;
            bool? key = default;
            bool? retrievable = default;
            bool? searchable = default;
            bool? filterable = default;
            bool? sortable = default;
            bool? facetable = default;
            AnalyzerName? analyzer = default;
            AnalyzerName? searchAnalyzer = default;
            AnalyzerName? indexAnalyzer = default;
            IList<string> synonymMaps = default;
            IList<SearchField> fields = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new DataType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("key"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    key = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("retrievable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retrievable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("searchable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("filterable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sortable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sortable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("facetable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    facetable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("analyzer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    analyzer = new AnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("searchAnalyzer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchAnalyzer = new AnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("indexAnalyzer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    indexAnalyzer = new AnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("synonymMaps"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    synonymMaps = array;
                    continue;
                }
                if (property.NameEquals("fields"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchField> array = new List<SearchField>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(DeserializeSearchField(item));
                        }
                    }
                    fields = array;
                    continue;
                }
            }
            return new SearchField(name, type, key, retrievable, searchable, filterable, sortable, facetable, analyzer, searchAnalyzer, indexAnalyzer, synonymMaps, fields);
        }
    }
}
