// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class SearchField : IUtf8JsonSerializable, IModelJsonSerializable<SearchField>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SearchField>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SearchField>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SearchField>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(IsKey))
            {
                writer.WritePropertyName("key"u8);
                writer.WriteBooleanValue(IsKey.Value);
            }
            if (Optional.IsDefined(IsRetrievable))
            {
                writer.WritePropertyName("retrievable"u8);
                writer.WriteBooleanValue(IsRetrievable.Value);
            }
            if (Optional.IsDefined(IsSearchable))
            {
                writer.WritePropertyName("searchable"u8);
                writer.WriteBooleanValue(IsSearchable.Value);
            }
            if (Optional.IsDefined(IsFilterable))
            {
                writer.WritePropertyName("filterable"u8);
                writer.WriteBooleanValue(IsFilterable.Value);
            }
            if (Optional.IsDefined(IsSortable))
            {
                writer.WritePropertyName("sortable"u8);
                writer.WriteBooleanValue(IsSortable.Value);
            }
            if (Optional.IsDefined(IsFacetable))
            {
                writer.WritePropertyName("facetable"u8);
                writer.WriteBooleanValue(IsFacetable.Value);
            }
            if (Optional.IsDefined(AnalyzerName))
            {
                if (AnalyzerName != null)
                {
                    writer.WritePropertyName("analyzer"u8);
                    writer.WriteStringValue(AnalyzerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("analyzer");
                }
            }
            if (Optional.IsDefined(SearchAnalyzerName))
            {
                if (SearchAnalyzerName != null)
                {
                    writer.WritePropertyName("searchAnalyzer"u8);
                    writer.WriteStringValue(SearchAnalyzerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("searchAnalyzer");
                }
            }
            if (Optional.IsDefined(IndexAnalyzerName))
            {
                if (IndexAnalyzerName != null)
                {
                    writer.WritePropertyName("indexAnalyzer"u8);
                    writer.WriteStringValue(IndexAnalyzerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("indexAnalyzer");
                }
            }
            if (Optional.IsDefined(NormalizerName))
            {
                if (NormalizerName != null)
                {
                    writer.WritePropertyName("normalizer"u8);
                    writer.WriteStringValue(NormalizerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("normalizer");
                }
            }
            if (Optional.IsDefined(VectorSearchDimensions))
            {
                if (VectorSearchDimensions != null)
                {
                    writer.WritePropertyName("dimensions"u8);
                    writer.WriteNumberValue(VectorSearchDimensions.Value);
                }
                else
                {
                    writer.WriteNull("dimensions");
                }
            }
            if (Optional.IsDefined(VectorSearchConfiguration))
            {
                if (VectorSearchConfiguration != null)
                {
                    writer.WritePropertyName("vectorSearchConfiguration"u8);
                    writer.WriteStringValue(VectorSearchConfiguration);
                }
                else
                {
                    writer.WriteNull("vectorSearchConfiguration");
                }
            }
            if (Optional.IsCollectionDefined(SynonymMapNames))
            {
                writer.WritePropertyName("synonymMaps"u8);
                writer.WriteStartArray();
                foreach (var item in SynonymMapNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Fields))
            {
                writer.WritePropertyName("fields"u8);
                writer.WriteStartArray();
                foreach (var item in Fields)
                {
                    if (item is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<SearchField>)item).Serialize(writer, options);
                    }
                }
                writer.WriteEndArray();
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SearchField DeserializeSearchField(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            SearchFieldDataType type = default;
            Optional<bool> key = default;
            Optional<bool> retrievable = default;
            Optional<bool> searchable = default;
            Optional<bool> filterable = default;
            Optional<bool> sortable = default;
            Optional<bool> facetable = default;
            Optional<LexicalAnalyzerName?> analyzer = default;
            Optional<LexicalAnalyzerName?> searchAnalyzer = default;
            Optional<LexicalAnalyzerName?> indexAnalyzer = default;
            Optional<LexicalNormalizerName?> normalizer = default;
            Optional<int?> dimensions = default;
            Optional<string> vectorSearchConfiguration = default;
            Optional<IList<string>> synonymMaps = default;
            Optional<IList<SearchField>> fields = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new SearchFieldDataType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("key"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    key = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("retrievable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retrievable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("searchable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("filterable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sortable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sortable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("facetable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    facetable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("analyzer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        analyzer = null;
                        continue;
                    }
                    analyzer = new LexicalAnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("searchAnalyzer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        searchAnalyzer = null;
                        continue;
                    }
                    searchAnalyzer = new LexicalAnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("indexAnalyzer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        indexAnalyzer = null;
                        continue;
                    }
                    indexAnalyzer = new LexicalAnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("normalizer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        normalizer = null;
                        continue;
                    }
                    normalizer = new LexicalNormalizerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dimensions = null;
                        continue;
                    }
                    dimensions = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vectorSearchConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vectorSearchConfiguration = null;
                        continue;
                    }
                    vectorSearchConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("synonymMaps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    synonymMaps = array;
                    continue;
                }
                if (property.NameEquals("fields"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchField> array = new List<SearchField>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeSearchField(item));
                    }
                    fields = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SearchField(name, type, Optional.ToNullable(key), Optional.ToNullable(retrievable), Optional.ToNullable(searchable), Optional.ToNullable(filterable), Optional.ToNullable(sortable), Optional.ToNullable(facetable), Optional.ToNullable(analyzer), Optional.ToNullable(searchAnalyzer), Optional.ToNullable(indexAnalyzer), Optional.ToNullable(normalizer), Optional.ToNullable(dimensions), vectorSearchConfiguration.Value, Optional.ToList(synonymMaps), Optional.ToList(fields), rawData);
        }

        SearchField IModelJsonSerializable<SearchField>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SearchField>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSearchField(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SearchField>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SearchField>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SearchField IModelSerializable<SearchField>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SearchField>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSearchField(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SearchField"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SearchField"/> to convert. </param>
        public static implicit operator RequestContent(SearchField model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SearchField"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SearchField(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSearchField(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
