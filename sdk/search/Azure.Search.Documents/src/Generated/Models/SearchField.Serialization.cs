// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class SearchField : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Core.Optional.IsDefined(IsKey))
            {
                writer.WritePropertyName("key"u8);
                writer.WriteBooleanValue(IsKey.Value);
            }
            if (Core.Optional.IsDefined(IsRetrievable))
            {
                writer.WritePropertyName("retrievable"u8);
                writer.WriteBooleanValue(IsRetrievable.Value);
            }
            if (Core.Optional.IsDefined(IsSearchable))
            {
                writer.WritePropertyName("searchable"u8);
                writer.WriteBooleanValue(IsSearchable.Value);
            }
            if (Core.Optional.IsDefined(IsFilterable))
            {
                writer.WritePropertyName("filterable"u8);
                writer.WriteBooleanValue(IsFilterable.Value);
            }
            if (Core.Optional.IsDefined(IsSortable))
            {
                writer.WritePropertyName("sortable"u8);
                writer.WriteBooleanValue(IsSortable.Value);
            }
            if (Core.Optional.IsDefined(IsFacetable))
            {
                writer.WritePropertyName("facetable"u8);
                writer.WriteBooleanValue(IsFacetable.Value);
            }
            if (Core.Optional.IsDefined(AnalyzerName))
            {
                if (AnalyzerName != null)
                {
                    writer.WritePropertyName("analyzer"u8);
                    writer.WriteStringValue(AnalyzerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("analyzer");
                }
            }
            if (Core.Optional.IsDefined(SearchAnalyzerName))
            {
                if (SearchAnalyzerName != null)
                {
                    writer.WritePropertyName("searchAnalyzer"u8);
                    writer.WriteStringValue(SearchAnalyzerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("searchAnalyzer");
                }
            }
            if (Core.Optional.IsDefined(IndexAnalyzerName))
            {
                if (IndexAnalyzerName != null)
                {
                    writer.WritePropertyName("indexAnalyzer"u8);
                    writer.WriteStringValue(IndexAnalyzerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("indexAnalyzer");
                }
            }
            if (Core.Optional.IsDefined(NormalizerName))
            {
                if (NormalizerName != null)
                {
                    writer.WritePropertyName("normalizer"u8);
                    writer.WriteStringValue(NormalizerName.Value.ToString());
                }
                else
                {
                    writer.WriteNull("normalizer");
                }
            }
            if (Core.Optional.IsDefined(VectorSearchDimensions))
            {
                if (VectorSearchDimensions != null)
                {
                    writer.WritePropertyName("dimensions"u8);
                    writer.WriteNumberValue(VectorSearchDimensions.Value);
                }
                else
                {
                    writer.WriteNull("dimensions");
                }
            }
            if (Core.Optional.IsDefined(VectorSearchConfiguration))
            {
                if (VectorSearchConfiguration != null)
                {
                    writer.WritePropertyName("vectorSearchConfiguration"u8);
                    writer.WriteStringValue(VectorSearchConfiguration);
                }
                else
                {
                    writer.WriteNull("vectorSearchConfiguration");
                }
            }
            if (Core.Optional.IsCollectionDefined(SynonymMapNames))
            {
                writer.WritePropertyName("synonymMaps"u8);
                writer.WriteStartArray();
                foreach (var item in SynonymMapNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(Fields))
            {
                writer.WritePropertyName("fields"u8);
                writer.WriteStartArray();
                foreach (var item in Fields)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SearchField DeserializeSearchField(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            SearchFieldDataType type = default;
            Core.Optional<bool> key = default;
            Core.Optional<bool> retrievable = default;
            Core.Optional<bool> searchable = default;
            Core.Optional<bool> filterable = default;
            Core.Optional<bool> sortable = default;
            Core.Optional<bool> facetable = default;
            Core.Optional<LexicalAnalyzerName?> analyzer = default;
            Core.Optional<LexicalAnalyzerName?> searchAnalyzer = default;
            Core.Optional<LexicalAnalyzerName?> indexAnalyzer = default;
            Core.Optional<LexicalNormalizerName?> normalizer = default;
            Core.Optional<int?> dimensions = default;
            Core.Optional<string> vectorSearchConfiguration = default;
            Core.Optional<IList<string>> synonymMaps = default;
            Core.Optional<IList<SearchField>> fields = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new SearchFieldDataType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("key"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    key = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("retrievable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retrievable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("searchable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    searchable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("filterable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filterable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sortable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sortable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("facetable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    facetable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("analyzer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        analyzer = null;
                        continue;
                    }
                    analyzer = new LexicalAnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("searchAnalyzer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        searchAnalyzer = null;
                        continue;
                    }
                    searchAnalyzer = new LexicalAnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("indexAnalyzer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        indexAnalyzer = null;
                        continue;
                    }
                    indexAnalyzer = new LexicalAnalyzerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("normalizer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        normalizer = null;
                        continue;
                    }
                    normalizer = new LexicalNormalizerName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dimensions = null;
                        continue;
                    }
                    dimensions = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("vectorSearchConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vectorSearchConfiguration = null;
                        continue;
                    }
                    vectorSearchConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("synonymMaps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    synonymMaps = array;
                    continue;
                }
                if (property.NameEquals("fields"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SearchField> array = new List<SearchField>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeSearchField(item));
                    }
                    fields = array;
                    continue;
                }
            }
            return new SearchField(name, type, Core.Optional.ToNullable(key), Core.Optional.ToNullable(retrievable), Core.Optional.ToNullable(searchable), Core.Optional.ToNullable(filterable), Core.Optional.ToNullable(sortable), Core.Optional.ToNullable(facetable), Core.Optional.ToNullable(analyzer), Core.Optional.ToNullable(searchAnalyzer), Core.Optional.ToNullable(indexAnalyzer), Core.Optional.ToNullable(normalizer), Core.Optional.ToNullable(dimensions), vectorSearchConfiguration.Value, Core.Optional.ToList(synonymMaps), Core.Optional.ToList(fields));
        }
    }
}
