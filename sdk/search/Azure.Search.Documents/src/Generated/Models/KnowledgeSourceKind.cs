// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> The kind of the knowledge source. </summary>
    internal readonly partial struct KnowledgeSourceKind : IEquatable<KnowledgeSourceKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="KnowledgeSourceKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public KnowledgeSourceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SearchIndexValue = "searchIndex";
        private const string AzureBlobValue = "azureBlob";

        /// <summary> A knowledge source that reads data from a Search Index. </summary>
        public static KnowledgeSourceKind SearchIndex { get; } = new KnowledgeSourceKind(SearchIndexValue);
        /// <summary> A knowledge source that read and ingest data from Azure Blob Storage to a Search Index. </summary>
        public static KnowledgeSourceKind AzureBlob { get; } = new KnowledgeSourceKind(AzureBlobValue);
        /// <summary> Determines if two <see cref="KnowledgeSourceKind"/> values are the same. </summary>
        public static bool operator ==(KnowledgeSourceKind left, KnowledgeSourceKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KnowledgeSourceKind"/> values are not the same. </summary>
        public static bool operator !=(KnowledgeSourceKind left, KnowledgeSourceKind right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="KnowledgeSourceKind"/>. </summary>
        public static implicit operator KnowledgeSourceKind(string value) => new KnowledgeSourceKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KnowledgeSourceKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KnowledgeSourceKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
