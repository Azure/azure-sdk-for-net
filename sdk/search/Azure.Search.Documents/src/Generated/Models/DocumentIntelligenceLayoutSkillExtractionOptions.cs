// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> Controls the cardinality of the content extracted from the document by the skill. </summary>
    public readonly partial struct DocumentIntelligenceLayoutSkillExtractionOptions : IEquatable<DocumentIntelligenceLayoutSkillExtractionOptions>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligenceLayoutSkillExtractionOptions"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentIntelligenceLayoutSkillExtractionOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ImagesValue = "images";
        private const string LocationMetadataValue = "locationMetadata";

        /// <summary> Specify that image content should be extracted from the document. </summary>
        public static DocumentIntelligenceLayoutSkillExtractionOptions Images { get; } = new DocumentIntelligenceLayoutSkillExtractionOptions(ImagesValue);
        /// <summary> Specify that location metadata should be extracted from the document. </summary>
        public static DocumentIntelligenceLayoutSkillExtractionOptions LocationMetadata { get; } = new DocumentIntelligenceLayoutSkillExtractionOptions(LocationMetadataValue);
        /// <summary> Determines if two <see cref="DocumentIntelligenceLayoutSkillExtractionOptions"/> values are the same. </summary>
        public static bool operator ==(DocumentIntelligenceLayoutSkillExtractionOptions left, DocumentIntelligenceLayoutSkillExtractionOptions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentIntelligenceLayoutSkillExtractionOptions"/> values are not the same. </summary>
        public static bool operator !=(DocumentIntelligenceLayoutSkillExtractionOptions left, DocumentIntelligenceLayoutSkillExtractionOptions right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DocumentIntelligenceLayoutSkillExtractionOptions"/>. </summary>
        public static implicit operator DocumentIntelligenceLayoutSkillExtractionOptions(string value) => new DocumentIntelligenceLayoutSkillExtractionOptions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentIntelligenceLayoutSkillExtractionOptions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentIntelligenceLayoutSkillExtractionOptions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
