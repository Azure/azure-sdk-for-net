// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> Controls the cardinality of the output format. Default is 'markdown'. </summary>
    public readonly partial struct DocumentIntelligenceLayoutSkillOutputFormat : IEquatable<DocumentIntelligenceLayoutSkillOutputFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DocumentIntelligenceLayoutSkillOutputFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DocumentIntelligenceLayoutSkillOutputFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TextValue = "text";
        private const string MarkdownValue = "markdown";

        /// <summary> Specify the format of the output as text. </summary>
        public static DocumentIntelligenceLayoutSkillOutputFormat Text { get; } = new DocumentIntelligenceLayoutSkillOutputFormat(TextValue);
        /// <summary> Specify the format of the output as markdown. </summary>
        public static DocumentIntelligenceLayoutSkillOutputFormat Markdown { get; } = new DocumentIntelligenceLayoutSkillOutputFormat(MarkdownValue);
        /// <summary> Determines if two <see cref="DocumentIntelligenceLayoutSkillOutputFormat"/> values are the same. </summary>
        public static bool operator ==(DocumentIntelligenceLayoutSkillOutputFormat left, DocumentIntelligenceLayoutSkillOutputFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DocumentIntelligenceLayoutSkillOutputFormat"/> values are not the same. </summary>
        public static bool operator !=(DocumentIntelligenceLayoutSkillOutputFormat left, DocumentIntelligenceLayoutSkillOutputFormat right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DocumentIntelligenceLayoutSkillOutputFormat"/>. </summary>
        public static implicit operator DocumentIntelligenceLayoutSkillOutputFormat(string value) => new DocumentIntelligenceLayoutSkillOutputFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DocumentIntelligenceLayoutSkillOutputFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DocumentIntelligenceLayoutSkillOutputFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
