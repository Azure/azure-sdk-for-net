// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Models
{
    /// <summary> Reason that a partial response was returned for a semantic search request. </summary>
    public readonly partial struct SemanticPartialResponseReason : IEquatable<SemanticPartialResponseReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SemanticPartialResponseReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SemanticPartialResponseReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MaxWaitExceededValue = "maxWaitExceeded";
        private const string CapacityOverloadedValue = "capacityOverloaded";
        private const string TransientValue = "transient";

        /// <summary> If &apos;semanticMaxWaitInMilliseconds&apos; was set and the semantic processing duration exceeded that value. Only the base results were returned. </summary>
        public static SemanticPartialResponseReason MaxWaitExceeded { get; } = new SemanticPartialResponseReason(MaxWaitExceededValue);
        /// <summary> The request was throttled. Only the base results were returned. </summary>
        public static SemanticPartialResponseReason CapacityOverloaded { get; } = new SemanticPartialResponseReason(CapacityOverloadedValue);
        /// <summary> At least one step of the semantic process failed. </summary>
        public static SemanticPartialResponseReason Transient { get; } = new SemanticPartialResponseReason(TransientValue);
        /// <summary> Determines if two <see cref="SemanticPartialResponseReason"/> values are the same. </summary>
        public static bool operator ==(SemanticPartialResponseReason left, SemanticPartialResponseReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SemanticPartialResponseReason"/> values are not the same. </summary>
        public static bool operator !=(SemanticPartialResponseReason left, SemanticPartialResponseReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SemanticPartialResponseReason"/>. </summary>
        public static implicit operator SemanticPartialResponseReason(string value) => new SemanticPartialResponseReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SemanticPartialResponseReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SemanticPartialResponseReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
