// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class AzureBlobKnowledgeSourceParameters : IUtf8JsonSerializable, IJsonModel<AzureBlobKnowledgeSourceParameters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AzureBlobKnowledgeSourceParameters>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<AzureBlobKnowledgeSourceParameters>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureBlobKnowledgeSourceParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureBlobKnowledgeSourceParameters)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Identity))
            {
                if (Identity != null)
                {
                    writer.WritePropertyName("identity"u8);
                    writer.WriteObjectValue(Identity, options);
                }
                else
                {
                    writer.WriteNull("identity");
                }
            }
            writer.WritePropertyName("connectionString"u8);
            writer.WriteStringValue(ConnectionString);
            writer.WritePropertyName("containerName"u8);
            writer.WriteStringValue(ContainerName);
            if (Optional.IsDefined(FolderPath))
            {
                writer.WritePropertyName("folderPath"u8);
                writer.WriteStringValue(FolderPath);
            }
            if (Optional.IsDefined(EmbeddingModel))
            {
                if (EmbeddingModel != null)
                {
                    writer.WritePropertyName("embeddingModel"u8);
                    writer.WriteObjectValue(EmbeddingModel, options);
                }
                else
                {
                    writer.WriteNull("embeddingModel");
                }
            }
            if (Optional.IsDefined(ChatCompletionModel))
            {
                if (ChatCompletionModel != null)
                {
                    writer.WritePropertyName("chatCompletionModel"u8);
                    writer.WriteObjectValue(ChatCompletionModel, options);
                }
                else
                {
                    writer.WriteNull("chatCompletionModel");
                }
            }
            if (Optional.IsDefined(IngestionSchedule))
            {
                if (IngestionSchedule != null)
                {
                    writer.WritePropertyName("ingestionSchedule"u8);
                    writer.WriteObjectValue(IngestionSchedule, options);
                }
                else
                {
                    writer.WriteNull("ingestionSchedule");
                }
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(CreatedResources))
            {
                writer.WritePropertyName("createdResources"u8);
                writer.WriteStartObject();
                foreach (var item in CreatedResources)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(DisableImageVerbalization))
            {
                writer.WritePropertyName("disableImageVerbalization"u8);
                writer.WriteBooleanValue(DisableImageVerbalization.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        AzureBlobKnowledgeSourceParameters IJsonModel<AzureBlobKnowledgeSourceParameters>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureBlobKnowledgeSourceParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(AzureBlobKnowledgeSourceParameters)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAzureBlobKnowledgeSourceParameters(document.RootElement, options);
        }

        internal static AzureBlobKnowledgeSourceParameters DeserializeAzureBlobKnowledgeSourceParameters(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SearchIndexerDataIdentity identity = default;
            string connectionString = default;
            string containerName = default;
            string folderPath = default;
            VectorSearchVectorizer embeddingModel = default;
            KnowledgeAgentModel chatCompletionModel = default;
            IndexingSchedule ingestionSchedule = default;
            IReadOnlyDictionary<string, string> createdResources = default;
            bool? disableImageVerbalization = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        identity = null;
                        continue;
                    }
                    identity = SearchIndexerDataIdentity.DeserializeSearchIndexerDataIdentity(property.Value, options);
                    continue;
                }
                if (property.NameEquals("connectionString"u8))
                {
                    connectionString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("containerName"u8))
                {
                    containerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("folderPath"u8))
                {
                    folderPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("embeddingModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        embeddingModel = null;
                        continue;
                    }
                    embeddingModel = VectorSearchVectorizer.DeserializeVectorSearchVectorizer(property.Value, options);
                    continue;
                }
                if (property.NameEquals("chatCompletionModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        chatCompletionModel = null;
                        continue;
                    }
                    chatCompletionModel = KnowledgeAgentModel.DeserializeKnowledgeAgentModel(property.Value, options);
                    continue;
                }
                if (property.NameEquals("ingestionSchedule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ingestionSchedule = null;
                        continue;
                    }
                    ingestionSchedule = IndexingSchedule.DeserializeIndexingSchedule(property.Value, options);
                    continue;
                }
                if (property.NameEquals("createdResources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    createdResources = dictionary;
                    continue;
                }
                if (property.NameEquals("disableImageVerbalization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disableImageVerbalization = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new AzureBlobKnowledgeSourceParameters(
                identity,
                connectionString,
                containerName,
                folderPath,
                embeddingModel,
                chatCompletionModel,
                ingestionSchedule,
                createdResources ?? new ChangeTrackingDictionary<string, string>(),
                disableImageVerbalization,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<AzureBlobKnowledgeSourceParameters>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureBlobKnowledgeSourceParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureSearchDocumentsContext.Default);
                default:
                    throw new FormatException($"The model {nameof(AzureBlobKnowledgeSourceParameters)} does not support writing '{options.Format}' format.");
            }
        }

        AzureBlobKnowledgeSourceParameters IPersistableModel<AzureBlobKnowledgeSourceParameters>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AzureBlobKnowledgeSourceParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeAzureBlobKnowledgeSourceParameters(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(AzureBlobKnowledgeSourceParameters)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<AzureBlobKnowledgeSourceParameters>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AzureBlobKnowledgeSourceParameters FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeAzureBlobKnowledgeSourceParameters(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
