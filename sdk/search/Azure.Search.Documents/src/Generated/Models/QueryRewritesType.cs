// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Search.Documents.Models
{
    /// <summary> This parameter is only valid if the query type is `semantic`. When QueryRewrites is set to `generative`, the query terms are sent to a generate model which will produce 10 (default) rewrites to help increase the recall of the request. The requested count can be configured by appending the pipe character `|` followed by the `count-&lt;number of rewrites&gt;` option, such as `generative|count-3`. Defaults to `None`. </summary>
    public readonly partial struct QueryRewritesType : IEquatable<QueryRewritesType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QueryRewritesType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QueryRewritesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string GenerativeValue = "generative";

        /// <summary> Do not generate additional query rewrites for this query. </summary>
        public static QueryRewritesType None { get; } = new QueryRewritesType(NoneValue);
        /// <summary> Generate alternative query terms to increase the recall of a search request. </summary>
        public static QueryRewritesType Generative { get; } = new QueryRewritesType(GenerativeValue);
        /// <summary> Determines if two <see cref="QueryRewritesType"/> values are the same. </summary>
        public static bool operator ==(QueryRewritesType left, QueryRewritesType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QueryRewritesType"/> values are not the same. </summary>
        public static bool operator !=(QueryRewritesType left, QueryRewritesType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="QueryRewritesType"/>. </summary>
        public static implicit operator QueryRewritesType(string value) => new QueryRewritesType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QueryRewritesType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QueryRewritesType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
