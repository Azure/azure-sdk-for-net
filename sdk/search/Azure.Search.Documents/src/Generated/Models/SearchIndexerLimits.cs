// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Search.Documents.Indexes.Models
{
    /// <summary> The SearchIndexerLimits. </summary>
    public partial class SearchIndexerLimits
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SearchIndexerLimits"/>. </summary>
        internal SearchIndexerLimits()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SearchIndexerLimits"/>. </summary>
        /// <param name="maxRunTime"> The maximum duration that the indexer is permitted to run for one execution. </param>
        /// <param name="maxDocumentExtractionSize"> The maximum size of a document, in bytes, which will be considered valid for indexing. </param>
        /// <param name="maxDocumentContentCharactersToExtract"> The maximum number of characters that will be extracted from a document picked up for indexing. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SearchIndexerLimits(TimeSpan? maxRunTime, long? maxDocumentExtractionSize, long? maxDocumentContentCharactersToExtract, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MaxRunTime = maxRunTime;
            MaxDocumentExtractionSize = maxDocumentExtractionSize;
            MaxDocumentContentCharactersToExtract = maxDocumentContentCharactersToExtract;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The maximum duration that the indexer is permitted to run for one execution. </summary>
        public TimeSpan? MaxRunTime { get; }
        /// <summary> The maximum size of a document, in bytes, which will be considered valid for indexing. </summary>
        public long? MaxDocumentExtractionSize { get; }
        /// <summary> The maximum number of characters that will be extracted from a document picked up for indexing. </summary>
        public long? MaxDocumentContentCharactersToExtract { get; }
    }
}
