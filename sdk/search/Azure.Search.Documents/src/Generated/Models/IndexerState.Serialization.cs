// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Search.Documents.Indexes.Models
{
    public partial class IndexerState
    {
        internal static IndexerState DeserializeIndexerState(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IndexingMode? mode = default;
            string allDocsInitialTrackingState = default;
            string allDocsFinalTrackingState = default;
            string resetDocsInitialTrackingState = default;
            string resetDocsFinalTrackingState = default;
            IReadOnlyList<string> resetDocumentKeys = default;
            IReadOnlyList<string> resetDatasourceDocumentIds = default;
            string resyncInitialTrackingState = default;
            string resyncFinalTrackingState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mode = new IndexingMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allDocsInitialTrackingState"u8))
                {
                    allDocsInitialTrackingState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("allDocsFinalTrackingState"u8))
                {
                    allDocsFinalTrackingState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resetDocsInitialTrackingState"u8))
                {
                    resetDocsInitialTrackingState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resetDocsFinalTrackingState"u8))
                {
                    resetDocsFinalTrackingState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resetDocumentKeys"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resetDocumentKeys = array;
                    continue;
                }
                if (property.NameEquals("resetDatasourceDocumentIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resetDatasourceDocumentIds = array;
                    continue;
                }
                if (property.NameEquals("resyncInitialTrackingState"u8))
                {
                    resyncInitialTrackingState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resyncFinalTrackingState"u8))
                {
                    resyncFinalTrackingState = property.Value.GetString();
                    continue;
                }
            }
            return new IndexerState(
                mode,
                allDocsInitialTrackingState,
                allDocsFinalTrackingState,
                resetDocsInitialTrackingState,
                resetDocsFinalTrackingState,
                resetDocumentKeys ?? new ChangeTrackingList<string>(),
                resetDatasourceDocumentIds ?? new ChangeTrackingList<string>(),
                resyncInitialTrackingState,
                resyncFinalTrackingState);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static IndexerState FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeIndexerState(document.RootElement);
        }
    }
}
