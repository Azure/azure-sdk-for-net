// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkspacesOperations.
    /// </summary>
    public static partial class WorkspacesOperationsExtensions
    {
            /// <summary>
            /// Gets a list of Workspaces associated with the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspacesListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Workspace> List(this IWorkspacesOperations operations, WorkspacesListOptions workspacesListOptions = default(WorkspacesListOptions))
            {
                return operations.ListAsync(workspacesListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Workspaces associated with the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspacesListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Workspace>> ListAsync(this IWorkspacesOperations operations, WorkspacesListOptions workspacesListOptions = default(WorkspacesListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(workspacesListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of Workspaces within the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspacesListByResourceGroupOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Workspace> ListByResourceGroup(this IWorkspacesOperations operations, string resourceGroupName, WorkspacesListByResourceGroupOptions workspacesListByResourceGroupOptions = default(WorkspacesListByResourceGroupOptions))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, workspacesListByResourceGroupOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Workspaces within the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspacesListByResourceGroupOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Workspace>> ListByResourceGroupAsync(this IWorkspacesOperations operations, string resourceGroupName, WorkspacesListByResourceGroupOptions workspacesListByResourceGroupOptions = default(WorkspacesListByResourceGroupOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, workspacesListByResourceGroupOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// Workspace creation parameters.
            /// </param>
            public static Workspace Create(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, WorkspaceCreateParameters parameters)
            {
                return operations.CreateAsync(resourceGroupName, workspaceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// Workspace creation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Workspace> CreateAsync(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, WorkspaceCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates properties of a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='tags'>
            /// Tags. The user specified tags associated with the Workspace.
            /// </param>
            public static Workspace Update(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, workspaceName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates properties of a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='tags'>
            /// Tags. The user specified tags associated with the Workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Workspace> UpdateAsync(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            public static void Delete(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            public static Workspace Get(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Workspace> GetAsync(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// Workspace creation parameters.
            /// </param>
            public static Workspace BeginCreate(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, WorkspaceCreateParameters parameters)
            {
                return operations.BeginCreateAsync(resourceGroupName, workspaceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='parameters'>
            /// Workspace creation parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Workspace> BeginCreateAsync(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, WorkspaceCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, workspaceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            public static void BeginDelete(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace. Workspace names can only contain a combination
            /// of alphanumeric characters along with dash (-) and underscore (_). The name
            /// must be from 1 through 64 characters long.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IWorkspacesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of Workspaces associated with the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Workspace> ListNext(this IWorkspacesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Workspaces associated with the given subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Workspace>> ListNextAsync(this IWorkspacesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of Workspaces within the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Workspace> ListByResourceGroupNext(this IWorkspacesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of Workspaces within the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Workspace>> ListByResourceGroupNextAsync(this IWorkspacesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
