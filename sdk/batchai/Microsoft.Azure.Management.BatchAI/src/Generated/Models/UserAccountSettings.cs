// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Settings for user account that gets created on each on the nodes of a
    /// cluster.
    /// </summary>
    public partial class UserAccountSettings
    {
        /// <summary>
        /// Initializes a new instance of the UserAccountSettings class.
        /// </summary>
        public UserAccountSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserAccountSettings class.
        /// </summary>
        /// <param name="adminUserName">User name.</param>
        /// <param name="adminUserSshPublicKey">SSH public key.</param>
        /// <param name="adminUserPassword">Password.</param>
        public UserAccountSettings(string adminUserName, string adminUserSshPublicKey = default(string), string adminUserPassword = default(string))
        {
            AdminUserName = adminUserName;
            AdminUserSshPublicKey = adminUserSshPublicKey;
            AdminUserPassword = adminUserPassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user name.
        /// </summary>
        /// <remarks>
        /// Name of the administrator user account which can be used to SSH to
        /// nodes.
        /// </remarks>
        [JsonProperty(PropertyName = "adminUserName")]
        public string AdminUserName { get; set; }

        /// <summary>
        /// Gets or sets SSH public key.
        /// </summary>
        /// <remarks>
        /// SSH public key of the administrator user account.
        /// </remarks>
        [JsonProperty(PropertyName = "adminUserSshPublicKey")]
        public string AdminUserSshPublicKey { get; set; }

        /// <summary>
        /// Gets or sets password.
        /// </summary>
        /// <remarks>
        /// Password of the administrator user account.
        /// </remarks>
        [JsonProperty(PropertyName = "adminUserPassword")]
        public string AdminUserPassword { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AdminUserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AdminUserName");
            }
        }
    }
}
