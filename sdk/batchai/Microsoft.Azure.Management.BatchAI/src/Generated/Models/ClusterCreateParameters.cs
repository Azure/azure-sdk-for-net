// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.BatchAI.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Cluster creation operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ClusterCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the ClusterCreateParameters class.
        /// </summary>
        public ClusterCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterCreateParameters class.
        /// </summary>
        /// <param name="vmSize">VM size.</param>
        /// <param name="userAccountSettings">User account settings.</param>
        /// <param name="vmPriority">VM priority.</param>
        /// <param name="scaleSettings">Scale settings.</param>
        /// <param name="virtualMachineConfiguration">VM configuration.</param>
        /// <param name="nodeSetup">Node setup.</param>
        /// <param name="subnet">Subnet.</param>
        public ClusterCreateParameters(string vmSize, UserAccountSettings userAccountSettings, VmPriority? vmPriority = default(VmPriority?), ScaleSettings scaleSettings = default(ScaleSettings), VirtualMachineConfiguration virtualMachineConfiguration = default(VirtualMachineConfiguration), NodeSetup nodeSetup = default(NodeSetup), ResourceId subnet = default(ResourceId))
        {
            VmSize = vmSize;
            VmPriority = vmPriority;
            ScaleSettings = scaleSettings;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            NodeSetup = nodeSetup;
            UserAccountSettings = userAccountSettings;
            Subnet = subnet;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets VM size.
        /// </summary>
        /// <remarks>
        /// The size of the virtual machines in the cluster. All nodes in a
        /// cluster have the same VM size. For information about available VM
        /// sizes for clusters using images from the Virtual Machines
        /// Marketplace see Sizes for Virtual Machines (Linux). Batch AI
        /// service supports all Azure VM sizes except STANDARD_A0 and those
        /// with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </remarks>
        [JsonProperty(PropertyName = "properties.vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets VM priority.
        /// </summary>
        /// <remarks>
        /// VM priority. Allowed values are: dedicated (default) and
        /// lowpriority. Possible values include: 'dedicated', 'lowpriority'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.vmPriority")]
        public VmPriority? VmPriority { get; set; }

        /// <summary>
        /// Gets or sets scale settings.
        /// </summary>
        /// <remarks>
        /// Scale settings for the cluster. Batch AI service supports manual
        /// and auto scale clusters.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.scaleSettings")]
        public ScaleSettings ScaleSettings { get; set; }

        /// <summary>
        /// Gets or sets VM configuration.
        /// </summary>
        /// <remarks>
        /// OS image configuration for cluster nodes. All nodes in a cluster
        /// have the same OS image.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.virtualMachineConfiguration")]
        public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }

        /// <summary>
        /// Gets or sets node setup.
        /// </summary>
        /// <remarks>
        /// Setup to be performed on each compute node in the cluster.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.nodeSetup")]
        public NodeSetup NodeSetup { get; set; }

        /// <summary>
        /// Gets or sets user account settings.
        /// </summary>
        /// <remarks>
        /// Settings for an administrator user account that will be created on
        /// each compute node in the cluster.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.userAccountSettings")]
        public UserAccountSettings UserAccountSettings { get; set; }

        /// <summary>
        /// Gets or sets subnet.
        /// </summary>
        /// <remarks>
        /// Existing virtual network subnet to put the cluster nodes in. Note,
        /// if a File Server mount configured in node setup, the File Server's
        /// subnet will be used automatically.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.subnet")]
        public ResourceId Subnet { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VmSize == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VmSize");
            }
            if (UserAccountSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserAccountSettings");
            }
            if (ScaleSettings != null)
            {
                ScaleSettings.Validate();
            }
            if (VirtualMachineConfiguration != null)
            {
                VirtualMachineConfiguration.Validate();
            }
            if (NodeSetup != null)
            {
                NodeSetup.Validate();
            }
            if (UserAccountSettings != null)
            {
                UserAccountSettings.Validate();
            }
            if (Subnet != null)
            {
                Subnet.Validate();
            }
        }
    }
}
