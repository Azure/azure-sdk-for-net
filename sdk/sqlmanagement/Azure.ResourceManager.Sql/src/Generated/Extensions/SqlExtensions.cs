// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Sql. </summary>
    public static partial class SqlExtensions
    {
        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary> Gets a collection of DeletedServers in the DeletedServer. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An object representing collection of DeletedServers and their operations over a DeletedServer. </returns>
        public static DeletedServerCollection GetDeletedServers(this Subscription subscription, string locationName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetDeletedServers(locationName);
        }

        /// <summary>
        /// Gets a deleted server.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}
        /// Operation Id: DeletedServers_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="deletedServerName"> The name of the deleted server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="deletedServerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="deletedServerName"/> is null. </exception>
        public static async Task<Response<DeletedServer>> GetDeletedServerAsync(this Subscription subscription, string locationName, string deletedServerName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetDeletedServers(locationName).GetAsync(deletedServerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deleted server.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}
        /// Operation Id: DeletedServers_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="deletedServerName"> The name of the deleted server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="deletedServerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="deletedServerName"/> is null. </exception>
        public static Response<DeletedServer> GetDeletedServer(this Subscription subscription, string locationName, string deletedServerName, CancellationToken cancellationToken = default)
        {
            return subscription.GetDeletedServers(locationName).Get(deletedServerName, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionLongTermRetentionBackups in the SubscriptionLongTermRetentionBackup. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/> or <paramref name="longTermRetentionDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/> or <paramref name="longTermRetentionDatabaseName"/> is null. </exception>
        /// <returns> An object representing collection of SubscriptionLongTermRetentionBackups and their operations over a SubscriptionLongTermRetentionBackup. </returns>
        public static SubscriptionLongTermRetentionBackupCollection GetSubscriptionLongTermRetentionBackups(this Subscription subscription, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(longTermRetentionServerName, nameof(longTermRetentionServerName));
            Argument.AssertNotNullOrEmpty(longTermRetentionDatabaseName, nameof(longTermRetentionDatabaseName));

            return GetExtensionClient(subscription).GetSubscriptionLongTermRetentionBackups(locationName, longTermRetentionServerName, longTermRetentionDatabaseName);
        }

        /// <summary>
        /// Gets a long term retention backup.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
        /// Operation Id: LongTermRetentionBackups_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static async Task<Response<SubscriptionLongTermRetentionBackup>> GetSubscriptionLongTermRetentionBackupAsync(this Subscription subscription, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetSubscriptionLongTermRetentionBackups(locationName, longTermRetentionServerName, longTermRetentionDatabaseName).GetAsync(backupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a long term retention backup.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
        /// Operation Id: LongTermRetentionBackups_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static Response<SubscriptionLongTermRetentionBackup> GetSubscriptionLongTermRetentionBackup(this Subscription subscription, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return subscription.GetSubscriptionLongTermRetentionBackups(locationName, longTermRetentionServerName, longTermRetentionDatabaseName).Get(backupName, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionLongTermRetentionManagedInstanceBackups in the SubscriptionLongTermRetentionManagedInstanceBackup. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="databaseName"> The name of the managed database. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/> or <paramref name="databaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/> or <paramref name="databaseName"/> is null. </exception>
        /// <returns> An object representing collection of SubscriptionLongTermRetentionManagedInstanceBackups and their operations over a SubscriptionLongTermRetentionManagedInstanceBackup. </returns>
        public static SubscriptionLongTermRetentionManagedInstanceBackupCollection GetSubscriptionLongTermRetentionManagedInstanceBackups(this Subscription subscription, string locationName, string managedInstanceName, string databaseName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(managedInstanceName, nameof(managedInstanceName));
            Argument.AssertNotNullOrEmpty(databaseName, nameof(databaseName));

            return GetExtensionClient(subscription).GetSubscriptionLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName);
        }

        /// <summary>
        /// Gets a long term retention backup for a managed database.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}
        /// Operation Id: LongTermRetentionManagedInstanceBackups_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="databaseName"> The name of the managed database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static async Task<Response<SubscriptionLongTermRetentionManagedInstanceBackup>> GetSubscriptionLongTermRetentionManagedInstanceBackupAsync(this Subscription subscription, string locationName, string managedInstanceName, string databaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetSubscriptionLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName).GetAsync(backupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a long term retention backup for a managed database.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}
        /// Operation Id: LongTermRetentionManagedInstanceBackups_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="databaseName"> The name of the managed database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static Response<SubscriptionLongTermRetentionManagedInstanceBackup> GetSubscriptionLongTermRetentionManagedInstanceBackup(this Subscription subscription, string locationName, string managedInstanceName, string databaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return subscription.GetSubscriptionLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName).Get(backupName, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionUsages in the SubscriptionUsage. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An object representing collection of SubscriptionUsages and their operations over a SubscriptionUsage. </returns>
        public static SubscriptionUsageCollection GetSubscriptionUsages(this Subscription subscription, string locationName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetSubscriptionUsages(locationName);
        }

        /// <summary>
        /// Gets a subscription usage metric.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}
        /// Operation Id: SubscriptionUsages_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="usageName"> Name of usage metric to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="usageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="usageName"/> is null. </exception>
        public static async Task<Response<SubscriptionUsage>> GetSubscriptionUsageAsync(this Subscription subscription, string locationName, string usageName, CancellationToken cancellationToken = default)
        {
            return await subscription.GetSubscriptionUsages(locationName).GetAsync(usageName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a subscription usage metric.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}
        /// Operation Id: SubscriptionUsages_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="usageName"> Name of usage metric to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="usageName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="usageName"/> is null. </exception>
        public static Response<SubscriptionUsage> GetSubscriptionUsage(this Subscription subscription, string locationName, string usageName, CancellationToken cancellationToken = default)
        {
            return subscription.GetSubscriptionUsages(locationName).Get(usageName, cancellationToken);
        }

        /// <summary> Gets a collection of SqlTimeZones in the SqlTimeZone. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The String to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An object representing collection of SqlTimeZones and their operations over a SqlTimeZone. </returns>
        public static SqlTimeZoneCollection GetSqlTimeZones(this Subscription subscription, string locationName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetSqlTimeZones(locationName);
        }

        /// <summary>
        /// Gets a managed instance time zone.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/timeZones/{timeZoneId}
        /// Operation Id: TimeZones_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The String to use. </param>
        /// <param name="timeZoneId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="timeZoneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="timeZoneId"/> is null. </exception>
        public static async Task<Response<SqlTimeZone>> GetSqlTimeZoneAsync(this Subscription subscription, string locationName, string timeZoneId, CancellationToken cancellationToken = default)
        {
            return await subscription.GetSqlTimeZones(locationName).GetAsync(timeZoneId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a managed instance time zone.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/timeZones/{timeZoneId}
        /// Operation Id: TimeZones_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The String to use. </param>
        /// <param name="timeZoneId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="timeZoneId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="timeZoneId"/> is null. </exception>
        public static Response<SqlTimeZone> GetSqlTimeZone(this Subscription subscription, string locationName, string timeZoneId, CancellationToken cancellationToken = default)
        {
            return subscription.GetSqlTimeZones(locationName).Get(timeZoneId, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all deleted servers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/deletedServers
        /// Operation Id: DeletedServers_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DeletedServer" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DeletedServer> GetDeletedServersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDeletedServersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all deleted servers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/deletedServers
        /// Operation Id: DeletedServers_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeletedServer" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DeletedServer> GetDeletedServers(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDeletedServers(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all instance pools in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/instancePools
        /// Operation Id: InstancePools_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="InstancePool" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<InstancePool> GetInstancePoolsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetInstancePoolsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all instance pools in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/instancePools
        /// Operation Id: InstancePools_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InstancePool" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<InstancePool> GetInstancePools(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetInstancePools(cancellationToken);
        }

        /// <summary>
        /// Gets the subscription capabilities available for the specified location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities
        /// Operation Id: Capabilities_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location name whose capabilities are retrieved. </param>
        /// <param name="include"> If specified, restricts the response to only include the selected item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        public static async Task<Response<LocationCapabilities>> GetByLocationCapabilityAsync(this Subscription subscription, string locationName, CapabilityGroup? include = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return await GetExtensionClient(subscription).GetByLocationCapabilityAsync(locationName, include, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the subscription capabilities available for the specified location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities
        /// Operation Id: Capabilities_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location name whose capabilities are retrieved. </param>
        /// <param name="include"> If specified, restricts the response to only include the selected item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        public static Response<LocationCapabilities> GetByLocationCapability(this Subscription subscription, string locationName, CapabilityGroup? include = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetByLocationCapability(locationName, include, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByLocationAsync(this Subscription subscription, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetLongTermRetentionBackupsByLocationAsync(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByLocation(this Subscription subscription, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetLongTermRetentionBackupsByLocation(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByServer
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByServerAsync(this Subscription subscription, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(longTermRetentionServerName, nameof(longTermRetentionServerName));

            return GetExtensionClient(subscription).GetLongTermRetentionBackupsByServerAsync(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByServer
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByServer(this Subscription subscription, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(longTermRetentionServerName, nameof(longTermRetentionServerName));

            return GetExtensionClient(subscription).GetLongTermRetentionBackupsByServer(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given managed instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByInstance
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByInstanceAsync(this Subscription subscription, string locationName, string managedInstanceName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(managedInstanceName, nameof(managedInstanceName));

            return GetExtensionClient(subscription).GetLongTermRetentionManagedInstanceBackupsByInstanceAsync(locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given managed instance.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByInstance
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByInstance(this Subscription subscription, string locationName, string managedInstanceName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(managedInstanceName, nameof(managedInstanceName));

            return GetExtensionClient(subscription).GetLongTermRetentionManagedInstanceBackupsByInstance(locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for managed databases in a given location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByLocationAsync(this Subscription subscription, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetLongTermRetentionManagedInstanceBackupsByLocationAsync(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for managed databases in a given location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByLocation(this Subscription subscription, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetLongTermRetentionManagedInstanceBackupsByLocation(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all managed instances in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances
        /// Operation Id: ManagedInstances_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagedInstance" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ManagedInstance> GetManagedInstancesAsync(this Subscription subscription, string expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetManagedInstancesAsync(expand, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all managed instances in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances
        /// Operation Id: ManagedInstances_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagedInstance" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ManagedInstance> GetManagedInstances(this Subscription subscription, string expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetManagedInstances(expand, cancellationToken);
        }

        /// <summary>
        /// Gets a service operation health status.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/operationsHealth
        /// Operation Id: OperationsHealth_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="OperationsHealth" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<OperationsHealth> GetOperationsHealthsByLocationAsync(this Subscription subscription, string locationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetOperationsHealthsByLocationAsync(locationName, cancellationToken);
        }

        /// <summary>
        /// Gets a service operation health status.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/operationsHealth
        /// Operation Id: OperationsHealth_ListByLocation
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> A collection of <see cref="OperationsHealth" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<OperationsHealth> GetOperationsHealthsByLocation(this Subscription subscription, string locationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetOperationsHealthsByLocation(locationName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of sync database ids.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds
        /// Operation Id: SyncGroups_ListSyncDatabaseIds
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubResource> GetSyncDatabaseIdsSyncGroupsAsync(this Subscription subscription, string locationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetSyncDatabaseIdsSyncGroupsAsync(locationName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of sync database ids.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds
        /// Operation Id: SyncGroups_ListSyncDatabaseIds
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubResource> GetSyncDatabaseIdsSyncGroups(this Subscription subscription, string locationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(subscription).GetSyncDatabaseIdsSyncGroups(locationName, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all virtualClusters in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/virtualClusters
        /// Operation Id: VirtualClusters_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualCluster" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualCluster> GetVirtualClustersAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualClustersAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all virtualClusters in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/virtualClusters
        /// Operation Id: VirtualClusters_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualCluster" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualCluster> GetVirtualClusters(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualClusters(cancellationToken);
        }

        /// <summary>
        /// Gets a list of all servers in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers
        /// Operation Id: Servers_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SqlServer" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SqlServer> GetSqlServersAsync(this Subscription subscription, string expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetSqlServersAsync(expand, cancellationToken);
        }

        /// <summary>
        /// Gets a list of all servers in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers
        /// Operation Id: Servers_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SqlServer" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SqlServer> GetSqlServers(this Subscription subscription, string expand = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetSqlServers(expand, cancellationToken);
        }

        /// <summary>
        /// Determines whether a resource can be created with the specified name.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability
        /// Operation Id: Servers_CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> The name availability request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityResponse>> CheckNameAvailabilityServerAsync(this Subscription subscription, CheckNameAvailabilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return await GetExtensionClient(subscription).CheckNameAvailabilityServerAsync(parameters, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Determines whether a resource can be created with the specified name.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability
        /// Operation Id: Servers_CheckNameAvailability
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="parameters"> The name availability request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public static Response<CheckNameAvailabilityResponse> CheckNameAvailabilityServer(this Subscription subscription, CheckNameAvailabilityRequest parameters, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameters, nameof(parameters));

            return GetExtensionClient(subscription).CheckNameAvailabilityServer(parameters, cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of InstanceFailoverGroups in the InstanceFailoverGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An object representing collection of InstanceFailoverGroups and their operations over a InstanceFailoverGroup. </returns>
        public static InstanceFailoverGroupCollection GetInstanceFailoverGroups(this ResourceGroup resourceGroup, string locationName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(resourceGroup).GetInstanceFailoverGroups(locationName);
        }

        /// <summary>
        /// Gets a failover group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}
        /// Operation Id: InstanceFailoverGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="failoverGroupName"> The name of the failover group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="failoverGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="failoverGroupName"/> is null. </exception>
        public static async Task<Response<InstanceFailoverGroup>> GetInstanceFailoverGroupAsync(this ResourceGroup resourceGroup, string locationName, string failoverGroupName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetInstanceFailoverGroups(locationName).GetAsync(failoverGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a failover group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}
        /// Operation Id: InstanceFailoverGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="failoverGroupName"> The name of the failover group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="failoverGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="failoverGroupName"/> is null. </exception>
        public static Response<InstanceFailoverGroup> GetInstanceFailoverGroup(this ResourceGroup resourceGroup, string locationName, string failoverGroupName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetInstanceFailoverGroups(locationName).Get(failoverGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of InstancePools in the InstancePool. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of InstancePools and their operations over a InstancePool. </returns>
        public static InstancePoolCollection GetInstancePools(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetInstancePools();
        }

        /// <summary>
        /// Gets an instance pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}
        /// Operation Id: InstancePools_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="instancePoolName"> The name of the instance pool to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instancePoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instancePoolName"/> is null. </exception>
        public static async Task<Response<InstancePool>> GetInstancePoolAsync(this ResourceGroup resourceGroup, string instancePoolName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetInstancePools().GetAsync(instancePoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an instance pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}
        /// Operation Id: InstancePools_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="instancePoolName"> The name of the instance pool to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="instancePoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="instancePoolName"/> is null. </exception>
        public static Response<InstancePool> GetInstancePool(this ResourceGroup resourceGroup, string instancePoolName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetInstancePools().Get(instancePoolName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceGroupLongTermRetentionBackups in the ResourceGroupLongTermRetentionBackup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/> or <paramref name="longTermRetentionDatabaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/> or <paramref name="longTermRetentionDatabaseName"/> is null. </exception>
        /// <returns> An object representing collection of ResourceGroupLongTermRetentionBackups and their operations over a ResourceGroupLongTermRetentionBackup. </returns>
        public static ResourceGroupLongTermRetentionBackupCollection GetResourceGroupLongTermRetentionBackups(this ResourceGroup resourceGroup, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(longTermRetentionServerName, nameof(longTermRetentionServerName));
            Argument.AssertNotNullOrEmpty(longTermRetentionDatabaseName, nameof(longTermRetentionDatabaseName));

            return GetExtensionClient(resourceGroup).GetResourceGroupLongTermRetentionBackups(locationName, longTermRetentionServerName, longTermRetentionDatabaseName);
        }

        /// <summary>
        /// Gets a long term retention backup.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
        /// Operation Id: LongTermRetentionBackups_GetByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static async Task<Response<ResourceGroupLongTermRetentionBackup>> GetResourceGroupLongTermRetentionBackupAsync(this ResourceGroup resourceGroup, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetResourceGroupLongTermRetentionBackups(locationName, longTermRetentionServerName, longTermRetentionDatabaseName).GetAsync(backupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a long term retention backup.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}
        /// Operation Id: LongTermRetentionBackups_GetByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="longTermRetentionServerName"/>, <paramref name="longTermRetentionDatabaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static Response<ResourceGroupLongTermRetentionBackup> GetResourceGroupLongTermRetentionBackup(this ResourceGroup resourceGroup, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetResourceGroupLongTermRetentionBackups(locationName, longTermRetentionServerName, longTermRetentionDatabaseName).Get(backupName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceGroupLongTermRetentionManagedInstanceBackups in the ResourceGroupLongTermRetentionManagedInstanceBackup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="databaseName"> The name of the managed database. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/> or <paramref name="databaseName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/> or <paramref name="databaseName"/> is null. </exception>
        /// <returns> An object representing collection of ResourceGroupLongTermRetentionManagedInstanceBackups and their operations over a ResourceGroupLongTermRetentionManagedInstanceBackup. </returns>
        public static ResourceGroupLongTermRetentionManagedInstanceBackupCollection GetResourceGroupLongTermRetentionManagedInstanceBackups(this ResourceGroup resourceGroup, string locationName, string managedInstanceName, string databaseName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(managedInstanceName, nameof(managedInstanceName));
            Argument.AssertNotNullOrEmpty(databaseName, nameof(databaseName));

            return GetExtensionClient(resourceGroup).GetResourceGroupLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName);
        }

        /// <summary>
        /// Gets a long term retention backup for a managed database.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}
        /// Operation Id: LongTermRetentionManagedInstanceBackups_GetByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="databaseName"> The name of the managed database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static async Task<Response<ResourceGroupLongTermRetentionManagedInstanceBackup>> GetResourceGroupLongTermRetentionManagedInstanceBackupAsync(this ResourceGroup resourceGroup, string locationName, string managedInstanceName, string databaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetResourceGroupLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName).GetAsync(backupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a long term retention backup for a managed database.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}
        /// Operation Id: LongTermRetentionManagedInstanceBackups_GetByResourceGroup
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="databaseName"> The name of the managed database. </param>
        /// <param name="backupName"> The backup name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/>, <paramref name="managedInstanceName"/>, <paramref name="databaseName"/> or <paramref name="backupName"/> is null. </exception>
        public static Response<ResourceGroupLongTermRetentionManagedInstanceBackup> GetResourceGroupLongTermRetentionManagedInstanceBackup(this ResourceGroup resourceGroup, string locationName, string managedInstanceName, string databaseName, string backupName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetResourceGroupLongTermRetentionManagedInstanceBackups(locationName, managedInstanceName, databaseName).Get(backupName, cancellationToken);
        }

        /// <summary> Gets a collection of ManagedInstances in the ManagedInstance. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ManagedInstances and their operations over a ManagedInstance. </returns>
        public static ManagedInstanceCollection GetManagedInstances(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetManagedInstances();
        }

        /// <summary>
        /// Gets a managed instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}
        /// Operation Id: ManagedInstances_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="managedInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="managedInstanceName"/> is null. </exception>
        public static async Task<Response<ManagedInstance>> GetManagedInstanceAsync(this ResourceGroup resourceGroup, string managedInstanceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetManagedInstances().GetAsync(managedInstanceName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a managed instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}
        /// Operation Id: ManagedInstances_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="managedInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="managedInstanceName"/> is null. </exception>
        public static Response<ManagedInstance> GetManagedInstance(this ResourceGroup resourceGroup, string managedInstanceName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetManagedInstances().Get(managedInstanceName, expand, cancellationToken);
        }

        /// <summary> Gets a collection of ServerTrustGroups in the ServerTrustGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An object representing collection of ServerTrustGroups and their operations over a ServerTrustGroup. </returns>
        public static ServerTrustGroupCollection GetServerTrustGroups(this ResourceGroup resourceGroup, string locationName)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(resourceGroup).GetServerTrustGroups(locationName);
        }

        /// <summary>
        /// Gets a server trust group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/serverTrustGroups/{serverTrustGroupName}
        /// Operation Id: ServerTrustGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="serverTrustGroupName"> The name of the server trust group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="serverTrustGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="serverTrustGroupName"/> is null. </exception>
        public static async Task<Response<ServerTrustGroup>> GetServerTrustGroupAsync(this ResourceGroup resourceGroup, string locationName, string serverTrustGroupName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetServerTrustGroups(locationName).GetAsync(serverTrustGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a server trust group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/serverTrustGroups/{serverTrustGroupName}
        /// Operation Id: ServerTrustGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The name of the region where the resource is located. </param>
        /// <param name="serverTrustGroupName"> The name of the server trust group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="serverTrustGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="serverTrustGroupName"/> is null. </exception>
        public static Response<ServerTrustGroup> GetServerTrustGroup(this ResourceGroup resourceGroup, string locationName, string serverTrustGroupName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetServerTrustGroups(locationName).Get(serverTrustGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualClusters in the VirtualCluster. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualClusters and their operations over a VirtualCluster. </returns>
        public static VirtualClusterCollection GetVirtualClusters(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualClusters();
        }

        /// <summary>
        /// Gets a virtual cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}
        /// Operation Id: VirtualClusters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualClusterName"> The name of the virtual cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualClusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualClusterName"/> is null. </exception>
        public static async Task<Response<VirtualCluster>> GetVirtualClusterAsync(this ResourceGroup resourceGroup, string virtualClusterName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualClusters().GetAsync(virtualClusterName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a virtual cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}
        /// Operation Id: VirtualClusters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="virtualClusterName"> The name of the virtual cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="virtualClusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualClusterName"/> is null. </exception>
        public static Response<VirtualCluster> GetVirtualCluster(this ResourceGroup resourceGroup, string virtualClusterName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualClusters().Get(virtualClusterName, cancellationToken);
        }

        /// <summary> Gets a collection of SqlServers in the SqlServer. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SqlServers and their operations over a SqlServer. </returns>
        public static SqlServerCollection GetSqlServers(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetSqlServers();
        }

        /// <summary>
        /// Gets a server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// Operation Id: Servers_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serverName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serverName"/> is null. </exception>
        public static async Task<Response<SqlServer>> GetSqlServerAsync(this ResourceGroup resourceGroup, string serverName, string expand = null, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetSqlServers().GetAsync(serverName, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// Operation Id: Servers_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serverName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serverName"/> is null. </exception>
        public static Response<SqlServer> GetSqlServer(this ResourceGroup resourceGroup, string serverName, string expand = null, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetSqlServers().Get(serverName, expand, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByResourceGroupLocation
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByResourceGroupLocationAsync(this ResourceGroup resourceGroup, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionBackupsByResourceGroupLocationAsync(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByResourceGroupLocation
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByResourceGroupLocation(this ResourceGroup resourceGroup, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionBackupsByResourceGroupLocation(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByResourceGroupServer
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByResourceGroupServerAsync(this ResourceGroup resourceGroup, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(longTermRetentionServerName, nameof(longTermRetentionServerName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionBackupsByResourceGroupServerAsync(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
        /// Operation Id: LongTermRetentionBackups_ListByResourceGroupServer
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="longTermRetentionServerName"> The name of the server. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="longTermRetentionServerName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionBackup> GetLongTermRetentionBackupsByResourceGroupServer(this ResourceGroup resourceGroup, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(longTermRetentionServerName, nameof(longTermRetentionServerName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionBackupsByResourceGroupServer(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given managed instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByResourceGroupInstance
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByResourceGroupInstanceAsync(this ResourceGroup resourceGroup, string locationName, string managedInstanceName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(managedInstanceName, nameof(managedInstanceName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionManagedInstanceBackupsByResourceGroupInstanceAsync(locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for a given managed instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByResourceGroupInstance
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="managedInstanceName"> The name of the managed instance. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> or <paramref name="managedInstanceName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByResourceGroupInstance(this ResourceGroup resourceGroup, string locationName, string managedInstanceName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));
            Argument.AssertNotNullOrEmpty(managedInstanceName, nameof(managedInstanceName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionManagedInstanceBackupsByResourceGroupInstance(locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for managed databases in a given location.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByResourceGroupLocation
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByResourceGroupLocationAsync(this ResourceGroup resourceGroup, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionManagedInstanceBackupsByResourceGroupLocationAsync(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        /// <summary>
        /// Lists the long term retention backups for managed databases in a given location.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups
        /// Operation Id: LongTermRetentionManagedInstanceBackups_ListByResourceGroupLocation
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="locationName"> The location of the database. </param>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        /// <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationName"/> is null. </exception>
        /// <returns> A collection of <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SubscriptionLongTermRetentionManagedInstanceBackup> GetLongTermRetentionManagedInstanceBackupsByResourceGroupLocation(this ResourceGroup resourceGroup, string locationName, bool? onlyLatestPerDatabase = null, DatabaseState? databaseState = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationName, nameof(locationName));

            return GetExtensionClient(resourceGroup).GetLongTermRetentionManagedInstanceBackupsByResourceGroupLocation(locationName, onlyLatestPerDatabase, databaseState, cancellationToken);
        }

        #region RecoverableDatabase
        /// <summary>
        /// Gets an object representing a <see cref="RecoverableDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RecoverableDatabase.CreateResourceIdentifier" /> to create a <see cref="RecoverableDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RecoverableDatabase" /> object. </returns>
        public static RecoverableDatabase GetRecoverableDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RecoverableDatabase.ValidateResourceId(id);
                return new RecoverableDatabase(client, id);
            }
            );
        }
        #endregion

        #region DataMaskingPolicy
        /// <summary>
        /// Gets an object representing a <see cref="DataMaskingPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataMaskingPolicy.CreateResourceIdentifier" /> to create a <see cref="DataMaskingPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataMaskingPolicy" /> object. </returns>
        public static DataMaskingPolicy GetDataMaskingPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataMaskingPolicy.ValidateResourceId(id);
                return new DataMaskingPolicy(client, id);
            }
            );
        }
        #endregion

        #region GeoBackupPolicy
        /// <summary>
        /// Gets an object representing a <see cref="GeoBackupPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GeoBackupPolicy.CreateResourceIdentifier" /> to create a <see cref="GeoBackupPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GeoBackupPolicy" /> object. </returns>
        public static GeoBackupPolicy GetGeoBackupPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GeoBackupPolicy.ValidateResourceId(id);
                return new GeoBackupPolicy(client, id);
            }
            );
        }
        #endregion

        #region SqlDatabase
        /// <summary>
        /// Gets an object representing a <see cref="SqlDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlDatabase.CreateResourceIdentifier" /> to create a <see cref="SqlDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlDatabase" /> object. </returns>
        public static SqlDatabase GetSqlDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlDatabase.ValidateResourceId(id);
                return new SqlDatabase(client, id);
            }
            );
        }
        #endregion

        #region ElasticPool
        /// <summary>
        /// Gets an object representing an <see cref="ElasticPool" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ElasticPool.CreateResourceIdentifier" /> to create an <see cref="ElasticPool" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ElasticPool" /> object. </returns>
        public static ElasticPool GetElasticPool(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ElasticPool.ValidateResourceId(id);
                return new ElasticPool(client, id);
            }
            );
        }
        #endregion

        #region ReplicationLink
        /// <summary>
        /// Gets an object representing a <see cref="ReplicationLink" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ReplicationLink.CreateResourceIdentifier" /> to create a <see cref="ReplicationLink" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ReplicationLink" /> object. </returns>
        public static ReplicationLink GetReplicationLink(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ReplicationLink.ValidateResourceId(id);
                return new ReplicationLink(client, id);
            }
            );
        }
        #endregion

        #region ServerCommunicationLink
        /// <summary>
        /// Gets an object representing a <see cref="ServerCommunicationLink" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerCommunicationLink.CreateResourceIdentifier" /> to create a <see cref="ServerCommunicationLink" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerCommunicationLink" /> object. </returns>
        public static ServerCommunicationLink GetServerCommunicationLink(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerCommunicationLink.ValidateResourceId(id);
                return new ServerCommunicationLink(client, id);
            }
            );
        }
        #endregion

        #region ServiceObjective
        /// <summary>
        /// Gets an object representing a <see cref="ServiceObjective" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceObjective.CreateResourceIdentifier" /> to create a <see cref="ServiceObjective" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceObjective" /> object. </returns>
        public static ServiceObjective GetServiceObjective(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceObjective.ValidateResourceId(id);
                return new ServiceObjective(client, id);
            }
            );
        }
        #endregion

        #region ExtendedDatabaseBlobAuditingPolicy
        /// <summary>
        /// Gets an object representing an <see cref="ExtendedDatabaseBlobAuditingPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExtendedDatabaseBlobAuditingPolicy.CreateResourceIdentifier" /> to create an <see cref="ExtendedDatabaseBlobAuditingPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExtendedDatabaseBlobAuditingPolicy" /> object. </returns>
        public static ExtendedDatabaseBlobAuditingPolicy GetExtendedDatabaseBlobAuditingPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExtendedDatabaseBlobAuditingPolicy.ValidateResourceId(id);
                return new ExtendedDatabaseBlobAuditingPolicy(client, id);
            }
            );
        }
        #endregion

        #region ExtendedServerBlobAuditingPolicy
        /// <summary>
        /// Gets an object representing an <see cref="ExtendedServerBlobAuditingPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExtendedServerBlobAuditingPolicy.CreateResourceIdentifier" /> to create an <see cref="ExtendedServerBlobAuditingPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ExtendedServerBlobAuditingPolicy" /> object. </returns>
        public static ExtendedServerBlobAuditingPolicy GetExtendedServerBlobAuditingPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ExtendedServerBlobAuditingPolicy.ValidateResourceId(id);
                return new ExtendedServerBlobAuditingPolicy(client, id);
            }
            );
        }
        #endregion

        #region ServerBlobAuditingPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ServerBlobAuditingPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerBlobAuditingPolicy.CreateResourceIdentifier" /> to create a <see cref="ServerBlobAuditingPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerBlobAuditingPolicy" /> object. </returns>
        public static ServerBlobAuditingPolicy GetServerBlobAuditingPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerBlobAuditingPolicy.ValidateResourceId(id);
                return new ServerBlobAuditingPolicy(client, id);
            }
            );
        }
        #endregion

        #region DatabaseBlobAuditingPolicy
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseBlobAuditingPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseBlobAuditingPolicy.CreateResourceIdentifier" /> to create a <see cref="DatabaseBlobAuditingPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseBlobAuditingPolicy" /> object. </returns>
        public static DatabaseBlobAuditingPolicy GetDatabaseBlobAuditingPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseBlobAuditingPolicy.ValidateResourceId(id);
                return new DatabaseBlobAuditingPolicy(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseAdvisor
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseAdvisor" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseAdvisor.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseAdvisor" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseAdvisor" /> object. </returns>
        public static ServerDatabaseAdvisor GetServerDatabaseAdvisor(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseAdvisor.ValidateResourceId(id);
                return new ServerDatabaseAdvisor(client, id);
            }
            );
        }
        #endregion

        #region ServerAdvisor
        /// <summary>
        /// Gets an object representing a <see cref="ServerAdvisor" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerAdvisor.CreateResourceIdentifier" /> to create a <see cref="ServerAdvisor" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerAdvisor" /> object. </returns>
        public static ServerAdvisor GetServerAdvisor(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerAdvisor.ValidateResourceId(id);
                return new ServerAdvisor(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAutomaticTuning
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAutomaticTuning" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAutomaticTuning.CreateResourceIdentifier" /> to create a <see cref="DatabaseAutomaticTuning" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAutomaticTuning" /> object. </returns>
        public static DatabaseAutomaticTuning GetDatabaseAutomaticTuning(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAutomaticTuning.ValidateResourceId(id);
                return new DatabaseAutomaticTuning(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseSchemaTableColumn
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseSchemaTableColumn" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseSchemaTableColumn.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseSchemaTableColumn" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseSchemaTableColumn" /> object. </returns>
        public static ServerDatabaseSchemaTableColumn GetServerDatabaseSchemaTableColumn(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseSchemaTableColumn.ValidateResourceId(id);
                return new ServerDatabaseSchemaTableColumn(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseSchemaTableColumn
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseSchemaTableColumn" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseSchemaTableColumn.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseSchemaTableColumn" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseSchemaTableColumn" /> object. </returns>
        public static ManagedInstanceDatabaseSchemaTableColumn GetManagedInstanceDatabaseSchemaTableColumn(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseSchemaTableColumn.ValidateResourceId(id);
                return new ManagedInstanceDatabaseSchemaTableColumn(client, id);
            }
            );
        }
        #endregion

        #region RecommendedAction
        /// <summary>
        /// Gets an object representing a <see cref="RecommendedAction" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RecommendedAction.CreateResourceIdentifier" /> to create a <see cref="RecommendedAction" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RecommendedAction" /> object. </returns>
        public static RecommendedAction GetRecommendedAction(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RecommendedAction.ValidateResourceId(id);
                return new RecommendedAction(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseSchema
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseSchema" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseSchema.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseSchema" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseSchema" /> object. </returns>
        public static ServerDatabaseSchema GetServerDatabaseSchema(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseSchema.ValidateResourceId(id);
                return new ServerDatabaseSchema(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseSchema
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseSchema" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseSchema.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseSchema" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseSchema" /> object. </returns>
        public static ManagedInstanceDatabaseSchema GetManagedInstanceDatabaseSchema(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseSchema.ValidateResourceId(id);
                return new ManagedInstanceDatabaseSchema(client, id);
            }
            );
        }
        #endregion

        #region DatabaseSecurityAlertPolicy
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseSecurityAlertPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseSecurityAlertPolicy.CreateResourceIdentifier" /> to create a <see cref="DatabaseSecurityAlertPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseSecurityAlertPolicy" /> object. </returns>
        public static DatabaseSecurityAlertPolicy GetDatabaseSecurityAlertPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseSecurityAlertPolicy.ValidateResourceId(id);
                return new DatabaseSecurityAlertPolicy(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseSchemaTable
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseSchemaTable" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseSchemaTable.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseSchemaTable" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseSchemaTable" /> object. </returns>
        public static ServerDatabaseSchemaTable GetServerDatabaseSchemaTable(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseSchemaTable.ValidateResourceId(id);
                return new ServerDatabaseSchemaTable(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseSchemaTable
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseSchemaTable" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseSchemaTable.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseSchemaTable" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseSchemaTable" /> object. </returns>
        public static ManagedInstanceDatabaseSchemaTable GetManagedInstanceDatabaseSchemaTable(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseSchemaTable.ValidateResourceId(id);
                return new ManagedInstanceDatabaseSchemaTable(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseVulnerabilityAssessmentRuleBaseline
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseVulnerabilityAssessmentRuleBaseline" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseVulnerabilityAssessmentRuleBaseline.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseVulnerabilityAssessmentRuleBaseline" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseVulnerabilityAssessmentRuleBaseline" /> object. </returns>
        public static ServerDatabaseVulnerabilityAssessmentRuleBaseline GetServerDatabaseVulnerabilityAssessmentRuleBaseline(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseVulnerabilityAssessmentRuleBaseline.ValidateResourceId(id);
                return new ServerDatabaseVulnerabilityAssessmentRuleBaseline(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline" /> object. </returns>
        public static ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline GetManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline.ValidateResourceId(id);
                return new ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaseline(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseVulnerabilityAssessment
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseVulnerabilityAssessment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseVulnerabilityAssessment.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseVulnerabilityAssessment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseVulnerabilityAssessment" /> object. </returns>
        public static ServerDatabaseVulnerabilityAssessment GetServerDatabaseVulnerabilityAssessment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseVulnerabilityAssessment.ValidateResourceId(id);
                return new ServerDatabaseVulnerabilityAssessment(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseVulnerabilityAssessment
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseVulnerabilityAssessment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseVulnerabilityAssessment.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseVulnerabilityAssessment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseVulnerabilityAssessment" /> object. </returns>
        public static ManagedInstanceDatabaseVulnerabilityAssessment GetManagedInstanceDatabaseVulnerabilityAssessment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseVulnerabilityAssessment.ValidateResourceId(id);
                return new ManagedInstanceDatabaseVulnerabilityAssessment(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseVulnerabilityAssessmentScan
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseVulnerabilityAssessmentScan" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseVulnerabilityAssessmentScan.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseVulnerabilityAssessmentScan" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseVulnerabilityAssessmentScan" /> object. </returns>
        public static ServerDatabaseVulnerabilityAssessmentScan GetServerDatabaseVulnerabilityAssessmentScan(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseVulnerabilityAssessmentScan.ValidateResourceId(id);
                return new ServerDatabaseVulnerabilityAssessmentScan(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseVulnerabilityAssessmentScan
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentScan" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentScan.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentScan" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseVulnerabilityAssessmentScan" /> object. </returns>
        public static ManagedInstanceDatabaseVulnerabilityAssessmentScan GetManagedInstanceDatabaseVulnerabilityAssessmentScan(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseVulnerabilityAssessmentScan.ValidateResourceId(id);
                return new ManagedInstanceDatabaseVulnerabilityAssessmentScan(client, id);
            }
            );
        }
        #endregion

        #region DataWarehouseUserActivities
        /// <summary>
        /// Gets an object representing a <see cref="DataWarehouseUserActivities" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataWarehouseUserActivities.CreateResourceIdentifier" /> to create a <see cref="DataWarehouseUserActivities" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataWarehouseUserActivities" /> object. </returns>
        public static DataWarehouseUserActivities GetDataWarehouseUserActivities(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataWarehouseUserActivities.ValidateResourceId(id);
                return new DataWarehouseUserActivities(client, id);
            }
            );
        }
        #endregion

        #region DeletedServer
        /// <summary>
        /// Gets an object representing a <see cref="DeletedServer" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeletedServer.CreateResourceIdentifier" /> to create a <see cref="DeletedServer" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeletedServer" /> object. </returns>
        public static DeletedServer GetDeletedServer(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DeletedServer.ValidateResourceId(id);
                return new DeletedServer(client, id);
            }
            );
        }
        #endregion

        #region EncryptionProtector
        /// <summary>
        /// Gets an object representing an <see cref="EncryptionProtector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EncryptionProtector.CreateResourceIdentifier" /> to create an <see cref="EncryptionProtector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EncryptionProtector" /> object. </returns>
        public static EncryptionProtector GetEncryptionProtector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                EncryptionProtector.ValidateResourceId(id);
                return new EncryptionProtector(client, id);
            }
            );
        }
        #endregion

        #region FailoverGroup
        /// <summary>
        /// Gets an object representing a <see cref="FailoverGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FailoverGroup.CreateResourceIdentifier" /> to create a <see cref="FailoverGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FailoverGroup" /> object. </returns>
        public static FailoverGroup GetFailoverGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FailoverGroup.ValidateResourceId(id);
                return new FailoverGroup(client, id);
            }
            );
        }
        #endregion

        #region FirewallRule
        /// <summary>
        /// Gets an object representing a <see cref="FirewallRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="FirewallRule.CreateResourceIdentifier" /> to create a <see cref="FirewallRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="FirewallRule" /> object. </returns>
        public static FirewallRule GetFirewallRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                FirewallRule.ValidateResourceId(id);
                return new FirewallRule(client, id);
            }
            );
        }
        #endregion

        #region InstanceFailoverGroup
        /// <summary>
        /// Gets an object representing an <see cref="InstanceFailoverGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="InstanceFailoverGroup.CreateResourceIdentifier" /> to create an <see cref="InstanceFailoverGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InstanceFailoverGroup" /> object. </returns>
        public static InstanceFailoverGroup GetInstanceFailoverGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                InstanceFailoverGroup.ValidateResourceId(id);
                return new InstanceFailoverGroup(client, id);
            }
            );
        }
        #endregion

        #region InstancePool
        /// <summary>
        /// Gets an object representing an <see cref="InstancePool" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="InstancePool.CreateResourceIdentifier" /> to create an <see cref="InstancePool" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="InstancePool" /> object. </returns>
        public static InstancePool GetInstancePool(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                InstancePool.ValidateResourceId(id);
                return new InstancePool(client, id);
            }
            );
        }
        #endregion

        #region JobAgent
        /// <summary>
        /// Gets an object representing a <see cref="JobAgent" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JobAgent.CreateResourceIdentifier" /> to create a <see cref="JobAgent" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JobAgent" /> object. </returns>
        public static JobAgent GetJobAgent(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JobAgent.ValidateResourceId(id);
                return new JobAgent(client, id);
            }
            );
        }
        #endregion

        #region JobCredential
        /// <summary>
        /// Gets an object representing a <see cref="JobCredential" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JobCredential.CreateResourceIdentifier" /> to create a <see cref="JobCredential" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JobCredential" /> object. </returns>
        public static JobCredential GetJobCredential(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JobCredential.ValidateResourceId(id);
                return new JobCredential(client, id);
            }
            );
        }
        #endregion

        #region ServerJobAgentJobExecution
        /// <summary>
        /// Gets an object representing a <see cref="ServerJobAgentJobExecution" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerJobAgentJobExecution.CreateResourceIdentifier" /> to create a <see cref="ServerJobAgentJobExecution" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerJobAgentJobExecution" /> object. </returns>
        public static ServerJobAgentJobExecution GetServerJobAgentJobExecution(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerJobAgentJobExecution.ValidateResourceId(id);
                return new ServerJobAgentJobExecution(client, id);
            }
            );
        }
        #endregion

        #region ServerJobAgentJobExecutionStep
        /// <summary>
        /// Gets an object representing a <see cref="ServerJobAgentJobExecutionStep" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerJobAgentJobExecutionStep.CreateResourceIdentifier" /> to create a <see cref="ServerJobAgentJobExecutionStep" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerJobAgentJobExecutionStep" /> object. </returns>
        public static ServerJobAgentJobExecutionStep GetServerJobAgentJobExecutionStep(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerJobAgentJobExecutionStep.ValidateResourceId(id);
                return new ServerJobAgentJobExecutionStep(client, id);
            }
            );
        }
        #endregion

        #region ServerJobAgentJobExecutionStepTarget
        /// <summary>
        /// Gets an object representing a <see cref="ServerJobAgentJobExecutionStepTarget" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerJobAgentJobExecutionStepTarget.CreateResourceIdentifier" /> to create a <see cref="ServerJobAgentJobExecutionStepTarget" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerJobAgentJobExecutionStepTarget" /> object. </returns>
        public static ServerJobAgentJobExecutionStepTarget GetServerJobAgentJobExecutionStepTarget(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerJobAgentJobExecutionStepTarget.ValidateResourceId(id);
                return new ServerJobAgentJobExecutionStepTarget(client, id);
            }
            );
        }
        #endregion

        #region SqlJob
        /// <summary>
        /// Gets an object representing a <see cref="SqlJob" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlJob.CreateResourceIdentifier" /> to create a <see cref="SqlJob" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlJob" /> object. </returns>
        public static SqlJob GetSqlJob(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlJob.ValidateResourceId(id);
                return new SqlJob(client, id);
            }
            );
        }
        #endregion

        #region ServerJobAgentJobVersionStep
        /// <summary>
        /// Gets an object representing a <see cref="ServerJobAgentJobVersionStep" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerJobAgentJobVersionStep.CreateResourceIdentifier" /> to create a <see cref="ServerJobAgentJobVersionStep" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerJobAgentJobVersionStep" /> object. </returns>
        public static ServerJobAgentJobVersionStep GetServerJobAgentJobVersionStep(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerJobAgentJobVersionStep.ValidateResourceId(id);
                return new ServerJobAgentJobVersionStep(client, id);
            }
            );
        }
        #endregion

        #region ServerJobAgentJobStep
        /// <summary>
        /// Gets an object representing a <see cref="ServerJobAgentJobStep" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerJobAgentJobStep.CreateResourceIdentifier" /> to create a <see cref="ServerJobAgentJobStep" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerJobAgentJobStep" /> object. </returns>
        public static ServerJobAgentJobStep GetServerJobAgentJobStep(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerJobAgentJobStep.ValidateResourceId(id);
                return new ServerJobAgentJobStep(client, id);
            }
            );
        }
        #endregion

        #region JobTargetGroup
        /// <summary>
        /// Gets an object representing a <see cref="JobTargetGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JobTargetGroup.CreateResourceIdentifier" /> to create a <see cref="JobTargetGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JobTargetGroup" /> object. </returns>
        public static JobTargetGroup GetJobTargetGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JobTargetGroup.ValidateResourceId(id);
                return new JobTargetGroup(client, id);
            }
            );
        }
        #endregion

        #region JobVersion
        /// <summary>
        /// Gets an object representing a <see cref="JobVersion" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="JobVersion.CreateResourceIdentifier" /> to create a <see cref="JobVersion" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="JobVersion" /> object. </returns>
        public static JobVersion GetJobVersion(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                JobVersion.ValidateResourceId(id);
                return new JobVersion(client, id);
            }
            );
        }
        #endregion

        #region SubscriptionLongTermRetentionBackup
        /// <summary>
        /// Gets an object representing a <see cref="SubscriptionLongTermRetentionBackup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubscriptionLongTermRetentionBackup.CreateResourceIdentifier" /> to create a <see cref="SubscriptionLongTermRetentionBackup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubscriptionLongTermRetentionBackup" /> object. </returns>
        public static SubscriptionLongTermRetentionBackup GetSubscriptionLongTermRetentionBackup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SubscriptionLongTermRetentionBackup.ValidateResourceId(id);
                return new SubscriptionLongTermRetentionBackup(client, id);
            }
            );
        }
        #endregion

        #region ResourceGroupLongTermRetentionBackup
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGroupLongTermRetentionBackup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGroupLongTermRetentionBackup.CreateResourceIdentifier" /> to create a <see cref="ResourceGroupLongTermRetentionBackup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGroupLongTermRetentionBackup" /> object. </returns>
        public static ResourceGroupLongTermRetentionBackup GetResourceGroupLongTermRetentionBackup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGroupLongTermRetentionBackup.ValidateResourceId(id);
                return new ResourceGroupLongTermRetentionBackup(client, id);
            }
            );
        }
        #endregion

        #region SubscriptionLongTermRetentionManagedInstanceBackup
        /// <summary>
        /// Gets an object representing a <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubscriptionLongTermRetentionManagedInstanceBackup.CreateResourceIdentifier" /> to create a <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubscriptionLongTermRetentionManagedInstanceBackup" /> object. </returns>
        public static SubscriptionLongTermRetentionManagedInstanceBackup GetSubscriptionLongTermRetentionManagedInstanceBackup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SubscriptionLongTermRetentionManagedInstanceBackup.ValidateResourceId(id);
                return new SubscriptionLongTermRetentionManagedInstanceBackup(client, id);
            }
            );
        }
        #endregion

        #region ResourceGroupLongTermRetentionManagedInstanceBackup
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGroupLongTermRetentionManagedInstanceBackup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGroupLongTermRetentionManagedInstanceBackup.CreateResourceIdentifier" /> to create a <see cref="ResourceGroupLongTermRetentionManagedInstanceBackup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGroupLongTermRetentionManagedInstanceBackup" /> object. </returns>
        public static ResourceGroupLongTermRetentionManagedInstanceBackup GetResourceGroupLongTermRetentionManagedInstanceBackup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGroupLongTermRetentionManagedInstanceBackup.ValidateResourceId(id);
                return new ResourceGroupLongTermRetentionManagedInstanceBackup(client, id);
            }
            );
        }
        #endregion

        #region LongTermRetentionPolicy
        /// <summary>
        /// Gets an object representing a <see cref="LongTermRetentionPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LongTermRetentionPolicy.CreateResourceIdentifier" /> to create a <see cref="LongTermRetentionPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LongTermRetentionPolicy" /> object. </returns>
        public static LongTermRetentionPolicy GetLongTermRetentionPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LongTermRetentionPolicy.ValidateResourceId(id);
                return new LongTermRetentionPolicy(client, id);
            }
            );
        }
        #endregion

        #region MaintenanceWindowOptions
        /// <summary>
        /// Gets an object representing a <see cref="MaintenanceWindowOptions" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MaintenanceWindowOptions.CreateResourceIdentifier" /> to create a <see cref="MaintenanceWindowOptions" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MaintenanceWindowOptions" /> object. </returns>
        public static MaintenanceWindowOptions GetMaintenanceWindowOptions(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MaintenanceWindowOptions.ValidateResourceId(id);
                return new MaintenanceWindowOptions(client, id);
            }
            );
        }
        #endregion

        #region MaintenanceWindows
        /// <summary>
        /// Gets an object representing a <see cref="MaintenanceWindows" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MaintenanceWindows.CreateResourceIdentifier" /> to create a <see cref="MaintenanceWindows" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MaintenanceWindows" /> object. </returns>
        public static MaintenanceWindows GetMaintenanceWindows(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MaintenanceWindows.ValidateResourceId(id);
                return new MaintenanceWindows(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseBackupShortTermRetentionPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseBackupShortTermRetentionPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseBackupShortTermRetentionPolicy.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseBackupShortTermRetentionPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseBackupShortTermRetentionPolicy" /> object. </returns>
        public static ManagedInstanceDatabaseBackupShortTermRetentionPolicy GetManagedInstanceDatabaseBackupShortTermRetentionPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseBackupShortTermRetentionPolicy.ValidateResourceId(id);
                return new ManagedInstanceDatabaseBackupShortTermRetentionPolicy(client, id);
            }
            );
        }
        #endregion

        #region ManagedRestorableDroppedDbBackupShortTermRetentionPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ManagedRestorableDroppedDbBackupShortTermRetentionPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedRestorableDroppedDbBackupShortTermRetentionPolicy.CreateResourceIdentifier" /> to create a <see cref="ManagedRestorableDroppedDbBackupShortTermRetentionPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedRestorableDroppedDbBackupShortTermRetentionPolicy" /> object. </returns>
        public static ManagedRestorableDroppedDbBackupShortTermRetentionPolicy GetManagedRestorableDroppedDbBackupShortTermRetentionPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedRestorableDroppedDbBackupShortTermRetentionPolicy.ValidateResourceId(id);
                return new ManagedRestorableDroppedDbBackupShortTermRetentionPolicy(client, id);
            }
            );
        }
        #endregion

        #region ManagedDatabaseRestoreDetailsResult
        /// <summary>
        /// Gets an object representing a <see cref="ManagedDatabaseRestoreDetailsResult" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedDatabaseRestoreDetailsResult.CreateResourceIdentifier" /> to create a <see cref="ManagedDatabaseRestoreDetailsResult" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedDatabaseRestoreDetailsResult" /> object. </returns>
        public static ManagedDatabaseRestoreDetailsResult GetManagedDatabaseRestoreDetailsResult(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedDatabaseRestoreDetailsResult.ValidateResourceId(id);
                return new ManagedDatabaseRestoreDetailsResult(client, id);
            }
            );
        }
        #endregion

        #region ManagedDatabase
        /// <summary>
        /// Gets an object representing a <see cref="ManagedDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedDatabase.CreateResourceIdentifier" /> to create a <see cref="ManagedDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedDatabase" /> object. </returns>
        public static ManagedDatabase GetManagedDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedDatabase.ValidateResourceId(id);
                return new ManagedDatabase(client, id);
            }
            );
        }
        #endregion

        #region ManagedDatabaseSecurityAlertPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ManagedDatabaseSecurityAlertPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedDatabaseSecurityAlertPolicy.CreateResourceIdentifier" /> to create a <see cref="ManagedDatabaseSecurityAlertPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedDatabaseSecurityAlertPolicy" /> object. </returns>
        public static ManagedDatabaseSecurityAlertPolicy GetManagedDatabaseSecurityAlertPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedDatabaseSecurityAlertPolicy.ValidateResourceId(id);
                return new ManagedDatabaseSecurityAlertPolicy(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel" /> object. </returns>
        public static ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel GetManagedInstanceDatabaseSchemaTableColumnSensitivityLabel(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel.ValidateResourceId(id);
                return new ManagedInstanceDatabaseSchemaTableColumnSensitivityLabel(client, id);
            }
            );
        }
        #endregion

        #region ServerDatabaseSchemaTableColumnSensitivityLabel
        /// <summary>
        /// Gets an object representing a <see cref="ServerDatabaseSchemaTableColumnSensitivityLabel" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDatabaseSchemaTableColumnSensitivityLabel.CreateResourceIdentifier" /> to create a <see cref="ServerDatabaseSchemaTableColumnSensitivityLabel" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDatabaseSchemaTableColumnSensitivityLabel" /> object. </returns>
        public static ServerDatabaseSchemaTableColumnSensitivityLabel GetServerDatabaseSchemaTableColumnSensitivityLabel(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDatabaseSchemaTableColumnSensitivityLabel.ValidateResourceId(id);
                return new ServerDatabaseSchemaTableColumnSensitivityLabel(client, id);
            }
            );
        }
        #endregion

        #region ManagedTransparentDataEncryption
        /// <summary>
        /// Gets an object representing a <see cref="ManagedTransparentDataEncryption" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedTransparentDataEncryption.CreateResourceIdentifier" /> to create a <see cref="ManagedTransparentDataEncryption" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedTransparentDataEncryption" /> object. </returns>
        public static ManagedTransparentDataEncryption GetManagedTransparentDataEncryption(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedTransparentDataEncryption.ValidateResourceId(id);
                return new ManagedTransparentDataEncryption(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceAdministrator
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceAdministrator" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceAdministrator.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceAdministrator" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceAdministrator" /> object. </returns>
        public static ManagedInstanceAdministrator GetManagedInstanceAdministrator(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceAdministrator.ValidateResourceId(id);
                return new ManagedInstanceAdministrator(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceAzureADOnlyAuthentication
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceAzureADOnlyAuthentication" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceAzureADOnlyAuthentication.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceAzureADOnlyAuthentication" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceAzureADOnlyAuthentication" /> object. </returns>
        public static ManagedInstanceAzureADOnlyAuthentication GetManagedInstanceAzureADOnlyAuthentication(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceAzureADOnlyAuthentication.ValidateResourceId(id);
                return new ManagedInstanceAzureADOnlyAuthentication(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceEncryptionProtector
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceEncryptionProtector" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceEncryptionProtector.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceEncryptionProtector" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceEncryptionProtector" /> object. </returns>
        public static ManagedInstanceEncryptionProtector GetManagedInstanceEncryptionProtector(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceEncryptionProtector.ValidateResourceId(id);
                return new ManagedInstanceEncryptionProtector(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceKey
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceKey" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceKey.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceKey" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceKey" /> object. </returns>
        public static ManagedInstanceKey GetManagedInstanceKey(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceKey.ValidateResourceId(id);
                return new ManagedInstanceKey(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceLongTermRetentionPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceLongTermRetentionPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceLongTermRetentionPolicy.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceLongTermRetentionPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceLongTermRetentionPolicy" /> object. </returns>
        public static ManagedInstanceLongTermRetentionPolicy GetManagedInstanceLongTermRetentionPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceLongTermRetentionPolicy.ValidateResourceId(id);
                return new ManagedInstanceLongTermRetentionPolicy(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceOperation
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceOperation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceOperation.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceOperation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceOperation" /> object. </returns>
        public static ManagedInstanceOperation GetManagedInstanceOperation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceOperation.ValidateResourceId(id);
                return new ManagedInstanceOperation(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstancePrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstancePrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstancePrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="ManagedInstancePrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstancePrivateEndpointConnection" /> object. </returns>
        public static ManagedInstancePrivateEndpointConnection GetManagedInstancePrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstancePrivateEndpointConnection.ValidateResourceId(id);
                return new ManagedInstancePrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstancePrivateLink
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstancePrivateLink" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstancePrivateLink.CreateResourceIdentifier" /> to create a <see cref="ManagedInstancePrivateLink" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstancePrivateLink" /> object. </returns>
        public static ManagedInstancePrivateLink GetManagedInstancePrivateLink(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstancePrivateLink.ValidateResourceId(id);
                return new ManagedInstancePrivateLink(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstance
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstance" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstance.CreateResourceIdentifier" /> to create a <see cref="ManagedInstance" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstance" /> object. </returns>
        public static ManagedInstance GetManagedInstance(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstance.ValidateResourceId(id);
                return new ManagedInstance(client, id);
            }
            );
        }
        #endregion

        #region ManagedInstanceVulnerabilityAssessment
        /// <summary>
        /// Gets an object representing a <see cref="ManagedInstanceVulnerabilityAssessment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedInstanceVulnerabilityAssessment.CreateResourceIdentifier" /> to create a <see cref="ManagedInstanceVulnerabilityAssessment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedInstanceVulnerabilityAssessment" /> object. </returns>
        public static ManagedInstanceVulnerabilityAssessment GetManagedInstanceVulnerabilityAssessment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedInstanceVulnerabilityAssessment.ValidateResourceId(id);
                return new ManagedInstanceVulnerabilityAssessment(client, id);
            }
            );
        }
        #endregion

        #region ManagedServerSecurityAlertPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ManagedServerSecurityAlertPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ManagedServerSecurityAlertPolicy.CreateResourceIdentifier" /> to create a <see cref="ManagedServerSecurityAlertPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ManagedServerSecurityAlertPolicy" /> object. </returns>
        public static ManagedServerSecurityAlertPolicy GetManagedServerSecurityAlertPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ManagedServerSecurityAlertPolicy.ValidateResourceId(id);
                return new ManagedServerSecurityAlertPolicy(client, id);
            }
            );
        }
        #endregion

        #region PrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="PrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="PrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpointConnection" /> object. </returns>
        public static PrivateEndpointConnection GetPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateEndpointConnection.ValidateResourceId(id);
                return new PrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region PrivateLinkResource
        /// <summary>
        /// Gets an object representing a <see cref="PrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateLinkResource.CreateResourceIdentifier" /> to create a <see cref="PrivateLinkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateLinkResource" /> object. </returns>
        public static PrivateLinkResource GetPrivateLinkResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateLinkResource.ValidateResourceId(id);
                return new PrivateLinkResource(client, id);
            }
            );
        }
        #endregion

        #region RecoverableManagedDatabase
        /// <summary>
        /// Gets an object representing a <see cref="RecoverableManagedDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RecoverableManagedDatabase.CreateResourceIdentifier" /> to create a <see cref="RecoverableManagedDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RecoverableManagedDatabase" /> object. </returns>
        public static RecoverableManagedDatabase GetRecoverableManagedDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RecoverableManagedDatabase.ValidateResourceId(id);
                return new RecoverableManagedDatabase(client, id);
            }
            );
        }
        #endregion

        #region RestorePoint
        /// <summary>
        /// Gets an object representing a <see cref="RestorePoint" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RestorePoint.CreateResourceIdentifier" /> to create a <see cref="RestorePoint" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RestorePoint" /> object. </returns>
        public static RestorePoint GetRestorePoint(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RestorePoint.ValidateResourceId(id);
                return new RestorePoint(client, id);
            }
            );
        }
        #endregion

        #region ServerAutomaticTuning
        /// <summary>
        /// Gets an object representing a <see cref="ServerAutomaticTuning" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerAutomaticTuning.CreateResourceIdentifier" /> to create a <see cref="ServerAutomaticTuning" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerAutomaticTuning" /> object. </returns>
        public static ServerAutomaticTuning GetServerAutomaticTuning(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerAutomaticTuning.ValidateResourceId(id);
                return new ServerAutomaticTuning(client, id);
            }
            );
        }
        #endregion

        #region ServerAzureADAdministrator
        /// <summary>
        /// Gets an object representing a <see cref="ServerAzureADAdministrator" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerAzureADAdministrator.CreateResourceIdentifier" /> to create a <see cref="ServerAzureADAdministrator" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerAzureADAdministrator" /> object. </returns>
        public static ServerAzureADAdministrator GetServerAzureADAdministrator(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerAzureADAdministrator.ValidateResourceId(id);
                return new ServerAzureADAdministrator(client, id);
            }
            );
        }
        #endregion

        #region ServerAzureADOnlyAuthentication
        /// <summary>
        /// Gets an object representing a <see cref="ServerAzureADOnlyAuthentication" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerAzureADOnlyAuthentication.CreateResourceIdentifier" /> to create a <see cref="ServerAzureADOnlyAuthentication" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerAzureADOnlyAuthentication" /> object. </returns>
        public static ServerAzureADOnlyAuthentication GetServerAzureADOnlyAuthentication(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerAzureADOnlyAuthentication.ValidateResourceId(id);
                return new ServerAzureADOnlyAuthentication(client, id);
            }
            );
        }
        #endregion

        #region ServerDevOpsAuditingSettings
        /// <summary>
        /// Gets an object representing a <see cref="ServerDevOpsAuditingSettings" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDevOpsAuditingSettings.CreateResourceIdentifier" /> to create a <see cref="ServerDevOpsAuditingSettings" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDevOpsAuditingSettings" /> object. </returns>
        public static ServerDevOpsAuditingSettings GetServerDevOpsAuditingSettings(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDevOpsAuditingSettings.ValidateResourceId(id);
                return new ServerDevOpsAuditingSettings(client, id);
            }
            );
        }
        #endregion

        #region ServerDnsAlias
        /// <summary>
        /// Gets an object representing a <see cref="ServerDnsAlias" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerDnsAlias.CreateResourceIdentifier" /> to create a <see cref="ServerDnsAlias" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerDnsAlias" /> object. </returns>
        public static ServerDnsAlias GetServerDnsAlias(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerDnsAlias.ValidateResourceId(id);
                return new ServerDnsAlias(client, id);
            }
            );
        }
        #endregion

        #region ServerKey
        /// <summary>
        /// Gets an object representing a <see cref="ServerKey" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerKey.CreateResourceIdentifier" /> to create a <see cref="ServerKey" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerKey" /> object. </returns>
        public static ServerKey GetServerKey(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerKey.ValidateResourceId(id);
                return new ServerKey(client, id);
            }
            );
        }
        #endregion

        #region ServerSecurityAlertPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ServerSecurityAlertPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerSecurityAlertPolicy.CreateResourceIdentifier" /> to create a <see cref="ServerSecurityAlertPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerSecurityAlertPolicy" /> object. </returns>
        public static ServerSecurityAlertPolicy GetServerSecurityAlertPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerSecurityAlertPolicy.ValidateResourceId(id);
                return new ServerSecurityAlertPolicy(client, id);
            }
            );
        }
        #endregion

        #region ServerTrustGroup
        /// <summary>
        /// Gets an object representing a <see cref="ServerTrustGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerTrustGroup.CreateResourceIdentifier" /> to create a <see cref="ServerTrustGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerTrustGroup" /> object. </returns>
        public static ServerTrustGroup GetServerTrustGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerTrustGroup.ValidateResourceId(id);
                return new ServerTrustGroup(client, id);
            }
            );
        }
        #endregion

        #region ServerVulnerabilityAssessment
        /// <summary>
        /// Gets an object representing a <see cref="ServerVulnerabilityAssessment" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerVulnerabilityAssessment.CreateResourceIdentifier" /> to create a <see cref="ServerVulnerabilityAssessment" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerVulnerabilityAssessment" /> object. </returns>
        public static ServerVulnerabilityAssessment GetServerVulnerabilityAssessment(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerVulnerabilityAssessment.ValidateResourceId(id);
                return new ServerVulnerabilityAssessment(client, id);
            }
            );
        }
        #endregion

        #region SqlAgentConfiguration
        /// <summary>
        /// Gets an object representing a <see cref="SqlAgentConfiguration" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlAgentConfiguration.CreateResourceIdentifier" /> to create a <see cref="SqlAgentConfiguration" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlAgentConfiguration" /> object. </returns>
        public static SqlAgentConfiguration GetSqlAgentConfiguration(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlAgentConfiguration.ValidateResourceId(id);
                return new SqlAgentConfiguration(client, id);
            }
            );
        }
        #endregion

        #region SubscriptionUsage
        /// <summary>
        /// Gets an object representing a <see cref="SubscriptionUsage" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SubscriptionUsage.CreateResourceIdentifier" /> to create a <see cref="SubscriptionUsage" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SubscriptionUsage" /> object. </returns>
        public static SubscriptionUsage GetSubscriptionUsage(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SubscriptionUsage.ValidateResourceId(id);
                return new SubscriptionUsage(client, id);
            }
            );
        }
        #endregion

        #region SyncAgent
        /// <summary>
        /// Gets an object representing a <see cref="SyncAgent" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SyncAgent.CreateResourceIdentifier" /> to create a <see cref="SyncAgent" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SyncAgent" /> object. </returns>
        public static SyncAgent GetSyncAgent(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SyncAgent.ValidateResourceId(id);
                return new SyncAgent(client, id);
            }
            );
        }
        #endregion

        #region SyncGroup
        /// <summary>
        /// Gets an object representing a <see cref="SyncGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SyncGroup.CreateResourceIdentifier" /> to create a <see cref="SyncGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SyncGroup" /> object. </returns>
        public static SyncGroup GetSyncGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SyncGroup.ValidateResourceId(id);
                return new SyncGroup(client, id);
            }
            );
        }
        #endregion

        #region SyncMember
        /// <summary>
        /// Gets an object representing a <see cref="SyncMember" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SyncMember.CreateResourceIdentifier" /> to create a <see cref="SyncMember" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SyncMember" /> object. </returns>
        public static SyncMember GetSyncMember(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SyncMember.ValidateResourceId(id);
                return new SyncMember(client, id);
            }
            );
        }
        #endregion

        #region SqlTimeZone
        /// <summary>
        /// Gets an object representing a <see cref="SqlTimeZone" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlTimeZone.CreateResourceIdentifier" /> to create a <see cref="SqlTimeZone" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlTimeZone" /> object. </returns>
        public static SqlTimeZone GetSqlTimeZone(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlTimeZone.ValidateResourceId(id);
                return new SqlTimeZone(client, id);
            }
            );
        }
        #endregion

        #region VirtualCluster
        /// <summary>
        /// Gets an object representing a <see cref="VirtualCluster" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualCluster.CreateResourceIdentifier" /> to create a <see cref="VirtualCluster" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualCluster" /> object. </returns>
        public static VirtualCluster GetVirtualCluster(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualCluster.ValidateResourceId(id);
                return new VirtualCluster(client, id);
            }
            );
        }
        #endregion

        #region VirtualNetworkRule
        /// <summary>
        /// Gets an object representing a <see cref="VirtualNetworkRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="VirtualNetworkRule.CreateResourceIdentifier" /> to create a <see cref="VirtualNetworkRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualNetworkRule" /> object. </returns>
        public static VirtualNetworkRule GetVirtualNetworkRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualNetworkRule.ValidateResourceId(id);
                return new VirtualNetworkRule(client, id);
            }
            );
        }
        #endregion

        #region WorkloadClassifier
        /// <summary>
        /// Gets an object representing a <see cref="WorkloadClassifier" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkloadClassifier.CreateResourceIdentifier" /> to create a <see cref="WorkloadClassifier" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkloadClassifier" /> object. </returns>
        public static WorkloadClassifier GetWorkloadClassifier(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WorkloadClassifier.ValidateResourceId(id);
                return new WorkloadClassifier(client, id);
            }
            );
        }
        #endregion

        #region WorkloadGroup
        /// <summary>
        /// Gets an object representing a <see cref="WorkloadGroup" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WorkloadGroup.CreateResourceIdentifier" /> to create a <see cref="WorkloadGroup" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WorkloadGroup" /> object. </returns>
        public static WorkloadGroup GetWorkloadGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WorkloadGroup.ValidateResourceId(id);
                return new WorkloadGroup(client, id);
            }
            );
        }
        #endregion

        #region LogicalDatabaseTransparentDataEncryption
        /// <summary>
        /// Gets an object representing a <see cref="LogicalDatabaseTransparentDataEncryption" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LogicalDatabaseTransparentDataEncryption.CreateResourceIdentifier" /> to create a <see cref="LogicalDatabaseTransparentDataEncryption" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LogicalDatabaseTransparentDataEncryption" /> object. </returns>
        public static LogicalDatabaseTransparentDataEncryption GetLogicalDatabaseTransparentDataEncryption(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LogicalDatabaseTransparentDataEncryption.ValidateResourceId(id);
                return new LogicalDatabaseTransparentDataEncryption(client, id);
            }
            );
        }
        #endregion

        #region BackupShortTermRetentionPolicy
        /// <summary>
        /// Gets an object representing a <see cref="BackupShortTermRetentionPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BackupShortTermRetentionPolicy.CreateResourceIdentifier" /> to create a <see cref="BackupShortTermRetentionPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BackupShortTermRetentionPolicy" /> object. </returns>
        public static BackupShortTermRetentionPolicy GetBackupShortTermRetentionPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BackupShortTermRetentionPolicy.ValidateResourceId(id);
                return new BackupShortTermRetentionPolicy(client, id);
            }
            );
        }
        #endregion

        #region LedgerDigestUploads
        /// <summary>
        /// Gets an object representing a <see cref="LedgerDigestUploads" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="LedgerDigestUploads.CreateResourceIdentifier" /> to create a <see cref="LedgerDigestUploads" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="LedgerDigestUploads" /> object. </returns>
        public static LedgerDigestUploads GetLedgerDigestUploads(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                LedgerDigestUploads.ValidateResourceId(id);
                return new LedgerDigestUploads(client, id);
            }
            );
        }
        #endregion

        #region OutboundFirewallRule
        /// <summary>
        /// Gets an object representing an <see cref="OutboundFirewallRule" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OutboundFirewallRule.CreateResourceIdentifier" /> to create an <see cref="OutboundFirewallRule" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="OutboundFirewallRule" /> object. </returns>
        public static OutboundFirewallRule GetOutboundFirewallRule(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                OutboundFirewallRule.ValidateResourceId(id);
                return new OutboundFirewallRule(client, id);
            }
            );
        }
        #endregion

        #region RestorableDroppedDatabase
        /// <summary>
        /// Gets an object representing a <see cref="RestorableDroppedDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RestorableDroppedDatabase.CreateResourceIdentifier" /> to create a <see cref="RestorableDroppedDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RestorableDroppedDatabase" /> object. </returns>
        public static RestorableDroppedDatabase GetRestorableDroppedDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RestorableDroppedDatabase.ValidateResourceId(id);
                return new RestorableDroppedDatabase(client, id);
            }
            );
        }
        #endregion

        #region RestorableDroppedManagedDatabase
        /// <summary>
        /// Gets an object representing a <see cref="RestorableDroppedManagedDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RestorableDroppedManagedDatabase.CreateResourceIdentifier" /> to create a <see cref="RestorableDroppedManagedDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RestorableDroppedManagedDatabase" /> object. </returns>
        public static RestorableDroppedManagedDatabase GetRestorableDroppedManagedDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RestorableDroppedManagedDatabase.ValidateResourceId(id);
                return new RestorableDroppedManagedDatabase(client, id);
            }
            );
        }
        #endregion

        #region SqlServer
        /// <summary>
        /// Gets an object representing a <see cref="SqlServer" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlServer.CreateResourceIdentifier" /> to create a <see cref="SqlServer" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlServer" /> object. </returns>
        public static SqlServer GetSqlServer(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlServer.ValidateResourceId(id);
                return new SqlServer(client, id);
            }
            );
        }
        #endregion

        #region ServerConnectionPolicy
        /// <summary>
        /// Gets an object representing a <see cref="ServerConnectionPolicy" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServerConnectionPolicy.CreateResourceIdentifier" /> to create a <see cref="ServerConnectionPolicy" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServerConnectionPolicy" /> object. </returns>
        public static ServerConnectionPolicy GetServerConnectionPolicy(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServerConnectionPolicy.ValidateResourceId(id);
                return new ServerConnectionPolicy(client, id);
            }
            );
        }
        #endregion
    }
}
