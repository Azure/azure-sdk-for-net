// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing a collection of <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineResource" /> and their operations.
    /// Each <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineResource" /> in the collection will belong to the same instance of <see cref="SqlDatabaseResource" />.
    /// To get a <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection" /> instance call the GetServerDatabaseSqlVulnerabilityAssessmentBaselines method from an instance of <see cref="SqlDatabaseResource" />.
    /// </summary>
    public partial class ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection : ArmCollection, IEnumerable<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>, IAsyncEnumerable<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>
    {
        private readonly ClientDiagnostics _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics;
        private readonly DatabaseSqlVulnerabilityAssessmentBaselinesRestOperations _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient;
        private readonly VulnerabilityAssessmentName _vulnerabilityAssessmentName;

        /// <summary> Initializes a new instance of the <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection"/> class for mocking. </summary>
        protected ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        internal ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection(ArmClient client, ResourceIdentifier id, VulnerabilityAssessmentName vulnerabilityAssessmentName) : base(client, id)
        {
            _vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", ServerDatabaseSqlVulnerabilityAssessmentBaselineResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServerDatabaseSqlVulnerabilityAssessmentBaselineResource.ResourceType, out string serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesApiVersion);
            _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient = new DatabaseSqlVulnerabilityAssessmentBaselinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SqlDatabaseResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SqlDatabaseResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Add a database&apos;s vulnerability assessment rule baseline list.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="input"> The requested rule baseline resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual async Task<ArmOperation<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>> CreateOrUpdateAsync(WaitUntil waitUntil, BaselineName baselineName, DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, baselineName, input, cancellationToken).ConfigureAwait(false);
                var operation = new SqlArmOperation<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>(Response.FromValue(new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a database&apos;s vulnerability assessment rule baseline list.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="input"> The requested rule baseline resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual ArmOperation<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> CreateOrUpdate(WaitUntil waitUntil, BaselineName baselineName, DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, baselineName, input, cancellationToken);
                var operation = new SqlArmOperation<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>(Response.FromValue(new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>> GetAsync(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.Get");
            scope.Start();
            try
            {
                var response = await _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> Get(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.Get");
            scope.Start();
            try
            {
                var response = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_ListBySqlVulnerabilityAssessment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.ListBySqlVulnerabilityAssessmentAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.ListBySqlVulnerabilityAssessmentNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_ListBySqlVulnerabilityAssessment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerDatabaseSqlVulnerabilityAssessmentBaselineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.ListBySqlVulnerabilityAssessment(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.ListBySqlVulnerabilityAssessmentNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ServerDatabaseSqlVulnerabilityAssessmentBaselineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentBaselines_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentBaselineCollection.Exists");
            scope.Start();
            try
            {
                var response = _serverDatabaseSqlVulnerabilityAssessmentBaselineDatabaseSqlVulnerabilityAssessmentBaselinesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> IEnumerable<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource> IAsyncEnumerable<ServerDatabaseSqlVulnerabilityAssessmentBaselineResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
