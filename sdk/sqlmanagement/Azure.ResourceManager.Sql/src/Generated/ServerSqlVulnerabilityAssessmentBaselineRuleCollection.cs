// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing a collection of <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleResource" /> and their operations.
    /// Each <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleResource" /> in the collection will belong to the same instance of <see cref="ServerSqlVulnerabilityAssessmentBaselineResource" />.
    /// To get a <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleCollection" /> instance call the GetServerSqlVulnerabilityAssessmentBaselineRules method from an instance of <see cref="ServerSqlVulnerabilityAssessmentBaselineResource" />.
    /// </summary>
    public partial class ServerSqlVulnerabilityAssessmentBaselineRuleCollection : ArmCollection, IEnumerable<ServerSqlVulnerabilityAssessmentBaselineRuleResource>, IAsyncEnumerable<ServerSqlVulnerabilityAssessmentBaselineRuleResource>
    {
        private readonly ClientDiagnostics _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentRuleBaselineRestOperations _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient;

        /// <summary> Initializes a new instance of the <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleCollection"/> class for mocking. </summary>
        protected ServerSqlVulnerabilityAssessmentBaselineRuleCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ServerSqlVulnerabilityAssessmentBaselineRuleCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", ServerSqlVulnerabilityAssessmentBaselineRuleResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServerSqlVulnerabilityAssessmentBaselineRuleResource.ResourceType, out string serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineApiVersion);
            _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient = new SqlVulnerabilityAssessmentRuleBaselineRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ServerSqlVulnerabilityAssessmentBaselineResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ServerSqlVulnerabilityAssessmentBaselineResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates a database&apos;s vulnerability assessment rule baseline.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ruleId"> The vulnerability assessment rule ID. </param>
        /// <param name="input"> The requested rule baseline resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="input"/> is null. </exception>
        public virtual async Task<ArmOperation<ServerSqlVulnerabilityAssessmentBaselineRuleResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string ruleId, DatabaseSqlVulnerabilityAssessmentRuleBaselineInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, ruleId, input, cancellationToken).ConfigureAwait(false);
                var operation = new SqlArmOperation<ServerSqlVulnerabilityAssessmentBaselineRuleResource>(Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineRuleResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates a database&apos;s vulnerability assessment rule baseline.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ruleId"> The vulnerability assessment rule ID. </param>
        /// <param name="input"> The requested rule baseline resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> or <paramref name="input"/> is null. </exception>
        public virtual ArmOperation<ServerSqlVulnerabilityAssessmentBaselineRuleResource> CreateOrUpdate(WaitUntil waitUntil, string ruleId, DatabaseSqlVulnerabilityAssessmentRuleBaselineInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineRuleCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, ruleId, input, cancellationToken);
                var operation = new SqlArmOperation<ServerSqlVulnerabilityAssessmentBaselineRuleResource>(Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineRuleResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a system database&apos;s sql vulnerability assessment rule baseline.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_Get
        /// </summary>
        /// <param name="ruleId"> The vulnerability assessment rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual async Task<Response<ServerSqlVulnerabilityAssessmentBaselineRuleResource>> GetAsync(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineRuleCollection.Get");
            scope.Start();
            try
            {
                var response = await _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, ruleId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a system database&apos;s sql vulnerability assessment rule baseline.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_Get
        /// </summary>
        /// <param name="ruleId"> The vulnerability assessment rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual Response<ServerSqlVulnerabilityAssessmentBaselineRuleResource> Get(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineRuleCollection.Get");
            scope.Start();
            try
            {
                var response = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, ruleId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineRuleResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a system database&apos;s sql vulnerability assessment rule baseline.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_ListByBaseline
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerSqlVulnerabilityAssessmentBaselineRuleResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.CreateListByBaselineRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.CreateListByBaselineNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ServerSqlVulnerabilityAssessmentBaselineRuleResource(Client, DatabaseSqlVulnerabilityAssessmentRuleBaselineData.DeserializeDatabaseSqlVulnerabilityAssessmentRuleBaselineData(e)), _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics, Pipeline, "ServerSqlVulnerabilityAssessmentBaselineRuleCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Gets a system database&apos;s sql vulnerability assessment rule baseline.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_ListByBaseline
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerSqlVulnerabilityAssessmentBaselineRuleResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerSqlVulnerabilityAssessmentBaselineRuleResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.CreateListByBaselineRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.CreateListByBaselineNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ServerSqlVulnerabilityAssessmentBaselineRuleResource(Client, DatabaseSqlVulnerabilityAssessmentRuleBaselineData.DeserializeDatabaseSqlVulnerabilityAssessmentRuleBaselineData(e)), _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics, Pipeline, "ServerSqlVulnerabilityAssessmentBaselineRuleCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_Get
        /// </summary>
        /// <param name="ruleId"> The vulnerability assessment rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, ruleId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}
        /// Operation Id: SqlVulnerabilityAssessmentRuleBaseline_Get
        /// </summary>
        /// <param name="ruleId"> The vulnerability assessment rule ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleId"/> is null. </exception>
        public virtual Response<bool> Exists(string ruleId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(ruleId, nameof(ruleId));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineRuleCollection.Exists");
            scope.Start();
            try
            {
                var response = _serverSqlVulnerabilityAssessmentBaselineRuleSqlVulnerabilityAssessmentRuleBaselineRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, ruleId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServerSqlVulnerabilityAssessmentBaselineRuleResource> IEnumerable<ServerSqlVulnerabilityAssessmentBaselineRuleResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServerSqlVulnerabilityAssessmentBaselineRuleResource> IAsyncEnumerable<ServerSqlVulnerabilityAssessmentBaselineRuleResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
