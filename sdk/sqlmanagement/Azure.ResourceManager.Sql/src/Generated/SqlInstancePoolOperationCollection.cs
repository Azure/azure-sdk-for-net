// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing a collection of <see cref="SqlInstancePoolOperationResource"/> and their operations.
    /// Each <see cref="SqlInstancePoolOperationResource"/> in the collection will belong to the same instance of <see cref="InstancePoolResource"/>.
    /// To get a <see cref="SqlInstancePoolOperationCollection"/> instance call the GetSqlInstancePoolOperations method from an instance of <see cref="InstancePoolResource"/>.
    /// </summary>
    public partial class SqlInstancePoolOperationCollection : ArmCollection, IEnumerable<SqlInstancePoolOperationResource>, IAsyncEnumerable<SqlInstancePoolOperationResource>
    {
        private readonly ClientDiagnostics _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics;
        private readonly InstancePoolRestOperations _sqlInstancePoolOperationInstancePoolOperationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SqlInstancePoolOperationCollection"/> class for mocking. </summary>
        protected SqlInstancePoolOperationCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SqlInstancePoolOperationCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SqlInstancePoolOperationCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", SqlInstancePoolOperationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SqlInstancePoolOperationResource.ResourceType, out string sqlInstancePoolOperationInstancePoolOperationsApiVersion);
            _sqlInstancePoolOperationInstancePoolOperationsRestClient = new InstancePoolRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, sqlInstancePoolOperationInstancePoolOperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != InstancePoolResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, InstancePoolResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a management operation on a instance pool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SqlInstancePoolOperationResource>> GetAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics.CreateScope("SqlInstancePoolOperationCollection.Get");
            scope.Start();
            try
            {
                var response = await _sqlInstancePoolOperationInstancePoolOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SqlInstancePoolOperationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a management operation on a instance pool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SqlInstancePoolOperationResource> Get(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics.CreateScope("SqlInstancePoolOperationCollection.Get");
            scope.Start();
            try
            {
                var response = _sqlInstancePoolOperationInstancePoolOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SqlInstancePoolOperationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of operations performed on the instance pool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_ListByInstancePool</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SqlInstancePoolOperationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SqlInstancePoolOperationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _sqlInstancePoolOperationInstancePoolOperationsRestClient.CreateListByInstancePoolRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _sqlInstancePoolOperationInstancePoolOperationsRestClient.CreateListByInstancePoolNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SqlInstancePoolOperationResource(Client, SqlInstancePoolOperationData.DeserializeSqlInstancePoolOperationData(e)), _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics, Pipeline, "SqlInstancePoolOperationCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of operations performed on the instance pool.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_ListByInstancePool</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SqlInstancePoolOperationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SqlInstancePoolOperationResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _sqlInstancePoolOperationInstancePoolOperationsRestClient.CreateListByInstancePoolRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _sqlInstancePoolOperationInstancePoolOperationsRestClient.CreateListByInstancePoolNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SqlInstancePoolOperationResource(Client, SqlInstancePoolOperationData.DeserializeSqlInstancePoolOperationData(e)), _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics, Pipeline, "SqlInstancePoolOperationCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics.CreateScope("SqlInstancePoolOperationCollection.Exists");
            scope.Start();
            try
            {
                var response = await _sqlInstancePoolOperationInstancePoolOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics.CreateScope("SqlInstancePoolOperationCollection.Exists");
            scope.Start();
            try
            {
                var response = _sqlInstancePoolOperationInstancePoolOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<SqlInstancePoolOperationResource>> GetIfExistsAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics.CreateScope("SqlInstancePoolOperationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _sqlInstancePoolOperationInstancePoolOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<SqlInstancePoolOperationResource>(response.GetRawResponse());
                return Response.FromValue(new SqlInstancePoolOperationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/operations/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InstancePoolOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SqlInstancePoolOperationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<SqlInstancePoolOperationResource> GetIfExists(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _sqlInstancePoolOperationInstancePoolOperationsClientDiagnostics.CreateScope("SqlInstancePoolOperationCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _sqlInstancePoolOperationInstancePoolOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<SqlInstancePoolOperationResource>(response.GetRawResponse());
                return Response.FromValue(new SqlInstancePoolOperationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SqlInstancePoolOperationResource> IEnumerable<SqlInstancePoolOperationResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SqlInstancePoolOperationResource> IAsyncEnumerable<SqlInstancePoolOperationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
