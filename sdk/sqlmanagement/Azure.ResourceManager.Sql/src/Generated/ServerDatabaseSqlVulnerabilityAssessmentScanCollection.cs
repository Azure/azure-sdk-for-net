// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing a collection of <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanResource" /> and their operations.
    /// Each <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanResource" /> in the collection will belong to the same instance of <see cref="SqlDatabaseResource" />.
    /// To get a <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanCollection" /> instance call the GetServerDatabaseSqlVulnerabilityAssessmentScans method from an instance of <see cref="SqlDatabaseResource" />.
    /// </summary>
    public partial class ServerDatabaseSqlVulnerabilityAssessmentScanCollection : ArmCollection, IEnumerable<ServerDatabaseSqlVulnerabilityAssessmentScanResource>, IAsyncEnumerable<ServerDatabaseSqlVulnerabilityAssessmentScanResource>
    {
        private readonly ClientDiagnostics _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics;
        private readonly DatabaseSqlVulnerabilityAssessmentScansRestOperations _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient;
        private readonly VulnerabilityAssessmentName _vulnerabilityAssessmentName;

        /// <summary> Initializes a new instance of the <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanCollection"/> class for mocking. </summary>
        protected ServerDatabaseSqlVulnerabilityAssessmentScanCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        internal ServerDatabaseSqlVulnerabilityAssessmentScanCollection(ArmClient client, ResourceIdentifier id, VulnerabilityAssessmentName vulnerabilityAssessmentName) : base(client, id)
        {
            _vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", ServerDatabaseSqlVulnerabilityAssessmentScanResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServerDatabaseSqlVulnerabilityAssessmentScanResource.ResourceType, out string serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansApiVersion);
            _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient = new DatabaseSqlVulnerabilityAssessmentScansRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SqlDatabaseResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SqlDatabaseResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a database vulnerability assessment scan result.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The vulnerability assessment scan Id of the scan to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual async Task<Response<ServerDatabaseSqlVulnerabilityAssessmentScanResource>> GetAsync(string scanId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentScanCollection.Get");
            scope.Start();
            try
            {
                var response = await _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, scanId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerDatabaseSqlVulnerabilityAssessmentScanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a database vulnerability assessment scan result.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The vulnerability assessment scan Id of the scan to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual Response<ServerDatabaseSqlVulnerabilityAssessmentScanResource> Get(string scanId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentScanCollection.Get");
            scope.Start();
            try
            {
                var response = _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, scanId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerDatabaseSqlVulnerabilityAssessmentScanResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the vulnerability assessment scans of a database.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentScans_ListBySqlVulnerabilityAssessments
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerDatabaseSqlVulnerabilityAssessmentScanResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.CreateListBySqlVulnerabilityAssessmentsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.CreateListBySqlVulnerabilityAssessmentsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ServerDatabaseSqlVulnerabilityAssessmentScanResource(Client, SqlVulnerabilityAssessmentScanRecordData.DeserializeSqlVulnerabilityAssessmentScanRecordData(e)), _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics, Pipeline, "ServerDatabaseSqlVulnerabilityAssessmentScanCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Lists the vulnerability assessment scans of a database.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentScans_ListBySqlVulnerabilityAssessments
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerDatabaseSqlVulnerabilityAssessmentScanResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerDatabaseSqlVulnerabilityAssessmentScanResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.CreateListBySqlVulnerabilityAssessmentsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.CreateListBySqlVulnerabilityAssessmentsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ServerDatabaseSqlVulnerabilityAssessmentScanResource(Client, SqlVulnerabilityAssessmentScanRecordData.DeserializeSqlVulnerabilityAssessmentScanRecordData(e)), _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics, Pipeline, "ServerDatabaseSqlVulnerabilityAssessmentScanCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The vulnerability assessment scan Id of the scan to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string scanId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentScanCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, scanId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}
        /// Operation Id: DatabaseSqlVulnerabilityAssessmentScans_Get
        /// </summary>
        /// <param name="scanId"> The vulnerability assessment scan Id of the scan to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scanId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scanId"/> is null. </exception>
        public virtual Response<bool> Exists(string scanId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(scanId, nameof(scanId));

            using var scope = _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansClientDiagnostics.CreateScope("ServerDatabaseSqlVulnerabilityAssessmentScanCollection.Exists");
            scope.Start();
            try
            {
                var response = _serverDatabaseSqlVulnerabilityAssessmentScanDatabaseSqlVulnerabilityAssessmentScansRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, _vulnerabilityAssessmentName, scanId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServerDatabaseSqlVulnerabilityAssessmentScanResource> IEnumerable<ServerDatabaseSqlVulnerabilityAssessmentScanResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServerDatabaseSqlVulnerabilityAssessmentScanResource> IAsyncEnumerable<ServerDatabaseSqlVulnerabilityAssessmentScanResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
