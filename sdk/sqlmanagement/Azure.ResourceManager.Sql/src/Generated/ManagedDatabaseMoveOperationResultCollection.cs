// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing a collection of <see cref="ManagedDatabaseMoveOperationResultResource" /> and their operations.
    /// Each <see cref="ManagedDatabaseMoveOperationResultResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get a <see cref="ManagedDatabaseMoveOperationResultCollection" /> instance call the GetManagedDatabaseMoveOperationResults method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class ManagedDatabaseMoveOperationResultCollection : ArmCollection, IEnumerable<ManagedDatabaseMoveOperationResultResource>, IAsyncEnumerable<ManagedDatabaseMoveOperationResultResource>
    {
        private readonly ClientDiagnostics _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics;
        private readonly ManagedDatabaseMoveRestOperations _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient;
        private readonly AzureLocation _locationName;

        /// <summary> Initializes a new instance of the <see cref="ManagedDatabaseMoveOperationResultCollection"/> class for mocking. </summary>
        protected ManagedDatabaseMoveOperationResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ManagedDatabaseMoveOperationResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="locationName"> The String to use. </param>
        internal ManagedDatabaseMoveOperationResultCollection(ArmClient client, ResourceIdentifier id, AzureLocation locationName) : base(client, id)
        {
            _locationName = locationName;
            _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", ManagedDatabaseMoveOperationResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ManagedDatabaseMoveOperationResultResource.ResourceType, out string managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsApiVersion);
            _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient = new ManagedDatabaseMoveRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a managed database move operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults/{operationId}
        /// Operation Id: ManagedDatabaseMoveOperations_Get
        /// </summary>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagedDatabaseMoveOperationResultResource>> GetAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics.CreateScope("ManagedDatabaseMoveOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), operationId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagedDatabaseMoveOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a managed database move operation.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults/{operationId}
        /// Operation Id: ManagedDatabaseMoveOperations_Get
        /// </summary>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagedDatabaseMoveOperationResultResource> Get(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics.CreateScope("ManagedDatabaseMoveOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), operationId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagedDatabaseMoveOperationResultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists managed database move operations.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults
        /// Operation Id: ManagedDatabaseMoveOperations_ListByLocation
        /// </summary>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest operation for each database. Has higher priority than $filter. </param>
        /// <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagedDatabaseMoveOperationResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagedDatabaseMoveOperationResultResource> GetAllAsync(bool? onlyLatestPerDatabase = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.CreateListByLocationRequest(Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), onlyLatestPerDatabase, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), onlyLatestPerDatabase, filter);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ManagedDatabaseMoveOperationResultResource(Client, ManagedDatabaseMoveOperationResultData.DeserializeManagedDatabaseMoveOperationResultData(e)), _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics, Pipeline, "ManagedDatabaseMoveOperationResultCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Lists managed database move operations.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults
        /// Operation Id: ManagedDatabaseMoveOperations_ListByLocation
        /// </summary>
        /// <param name="onlyLatestPerDatabase"> Whether or not to only get the latest operation for each database. Has higher priority than $filter. </param>
        /// <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagedDatabaseMoveOperationResultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagedDatabaseMoveOperationResultResource> GetAll(bool? onlyLatestPerDatabase = null, string filter = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.CreateListByLocationRequest(Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), onlyLatestPerDatabase, filter);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), onlyLatestPerDatabase, filter);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ManagedDatabaseMoveOperationResultResource(Client, ManagedDatabaseMoveOperationResultData.DeserializeManagedDatabaseMoveOperationResultData(e)), _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics, Pipeline, "ManagedDatabaseMoveOperationResultCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults/{operationId}
        /// Operation Id: ManagedDatabaseMoveOperations_Get
        /// </summary>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics.CreateScope("ManagedDatabaseMoveOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults/{operationId}
        /// Operation Id: ManagedDatabaseMoveOperations_Get
        /// </summary>
        /// <param name="operationId"> The Uuid to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsClientDiagnostics.CreateScope("ManagedDatabaseMoveOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _managedDatabaseMoveOperationResultManagedDatabaseMoveOperationsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, new AzureLocation(_locationName), operationId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ManagedDatabaseMoveOperationResultResource> IEnumerable<ManagedDatabaseMoveOperationResultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ManagedDatabaseMoveOperationResultResource> IAsyncEnumerable<ManagedDatabaseMoveOperationResultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
