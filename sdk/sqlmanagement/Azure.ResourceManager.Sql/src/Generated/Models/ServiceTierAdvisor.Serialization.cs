// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class ServiceTierAdvisor : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ServiceTierAdvisor DeserializeServiceTierAdvisor(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<DateTimeOffset> observationPeriodStart = default;
            Optional<DateTimeOffset> observationPeriodEnd = default;
            Optional<double> activeTimeRatio = default;
            Optional<double> minDtu = default;
            Optional<double> avgDtu = default;
            Optional<double> maxDtu = default;
            Optional<double> maxSizeInGB = default;
            Optional<IReadOnlyList<SloUsageMetric>> serviceLevelObjectiveUsageMetrics = default;
            Optional<string> currentServiceLevelObjective = default;
            Optional<Guid> currentServiceLevelObjectiveId = default;
            Optional<string> usageBasedRecommendationServiceLevelObjective = default;
            Optional<Guid> usageBasedRecommendationServiceLevelObjectiveId = default;
            Optional<string> databaseSizeBasedRecommendationServiceLevelObjective = default;
            Optional<Guid> databaseSizeBasedRecommendationServiceLevelObjectiveId = default;
            Optional<string> disasterPlanBasedRecommendationServiceLevelObjective = default;
            Optional<Guid> disasterPlanBasedRecommendationServiceLevelObjectiveId = default;
            Optional<string> overallRecommendationServiceLevelObjective = default;
            Optional<Guid> overallRecommendationServiceLevelObjectiveId = default;
            Optional<double> confidence = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("observationPeriodStart"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            observationPeriodStart = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("observationPeriodEnd"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            observationPeriodEnd = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("activeTimeRatio"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            activeTimeRatio = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("minDtu"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            minDtu = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("avgDtu"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            avgDtu = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("maxDtu"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            maxDtu = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("maxSizeInGB"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            maxSizeInGB = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("serviceLevelObjectiveUsageMetrics"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<SloUsageMetric> array = new List<SloUsageMetric>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SloUsageMetric.DeserializeSloUsageMetric(item));
                            }
                            serviceLevelObjectiveUsageMetrics = array;
                            continue;
                        }
                        if (property0.NameEquals("currentServiceLevelObjective"))
                        {
                            currentServiceLevelObjective = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("currentServiceLevelObjectiveId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            currentServiceLevelObjectiveId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("usageBasedRecommendationServiceLevelObjective"))
                        {
                            usageBasedRecommendationServiceLevelObjective = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("usageBasedRecommendationServiceLevelObjectiveId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            usageBasedRecommendationServiceLevelObjectiveId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("databaseSizeBasedRecommendationServiceLevelObjective"))
                        {
                            databaseSizeBasedRecommendationServiceLevelObjective = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("databaseSizeBasedRecommendationServiceLevelObjectiveId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            databaseSizeBasedRecommendationServiceLevelObjectiveId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("disasterPlanBasedRecommendationServiceLevelObjective"))
                        {
                            disasterPlanBasedRecommendationServiceLevelObjective = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("disasterPlanBasedRecommendationServiceLevelObjectiveId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            disasterPlanBasedRecommendationServiceLevelObjectiveId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("overallRecommendationServiceLevelObjective"))
                        {
                            overallRecommendationServiceLevelObjective = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("overallRecommendationServiceLevelObjectiveId"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            overallRecommendationServiceLevelObjectiveId = property0.Value.GetGuid();
                            continue;
                        }
                        if (property0.NameEquals("confidence"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            confidence = property0.Value.GetDouble();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ServiceTierAdvisor(id.Value, name.Value, type.Value, Optional.ToNullable(observationPeriodStart), Optional.ToNullable(observationPeriodEnd), Optional.ToNullable(activeTimeRatio), Optional.ToNullable(minDtu), Optional.ToNullable(avgDtu), Optional.ToNullable(maxDtu), Optional.ToNullable(maxSizeInGB), Optional.ToList(serviceLevelObjectiveUsageMetrics), currentServiceLevelObjective.Value, Optional.ToNullable(currentServiceLevelObjectiveId), usageBasedRecommendationServiceLevelObjective.Value, Optional.ToNullable(usageBasedRecommendationServiceLevelObjectiveId), databaseSizeBasedRecommendationServiceLevelObjective.Value, Optional.ToNullable(databaseSizeBasedRecommendationServiceLevelObjectiveId), disasterPlanBasedRecommendationServiceLevelObjective.Value, Optional.ToNullable(disasterPlanBasedRecommendationServiceLevelObjectiveId), overallRecommendationServiceLevelObjective.Value, Optional.ToNullable(overallRecommendationServiceLevelObjectiveId), Optional.ToNullable(confidence));
        }
    }
}
