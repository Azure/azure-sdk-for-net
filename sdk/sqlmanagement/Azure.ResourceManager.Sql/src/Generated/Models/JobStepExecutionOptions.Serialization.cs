// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class JobStepExecutionOptions : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TimeoutSeconds))
            {
                writer.WritePropertyName("timeoutSeconds"u8);
                writer.WriteNumberValue(TimeoutSeconds.Value);
            }
            if (Optional.IsDefined(RetryAttempts))
            {
                writer.WritePropertyName("retryAttempts"u8);
                writer.WriteNumberValue(RetryAttempts.Value);
            }
            if (Optional.IsDefined(InitialRetryIntervalSeconds))
            {
                writer.WritePropertyName("initialRetryIntervalSeconds"u8);
                writer.WriteNumberValue(InitialRetryIntervalSeconds.Value);
            }
            if (Optional.IsDefined(MaximumRetryIntervalSeconds))
            {
                writer.WritePropertyName("maximumRetryIntervalSeconds"u8);
                writer.WriteNumberValue(MaximumRetryIntervalSeconds.Value);
            }
            if (Optional.IsDefined(RetryIntervalBackoffMultiplier))
            {
                writer.WritePropertyName("retryIntervalBackoffMultiplier"u8);
                writer.WriteNumberValue(RetryIntervalBackoffMultiplier.Value);
            }
            writer.WriteEndObject();
        }

        internal static JobStepExecutionOptions DeserializeJobStepExecutionOptions(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> timeoutSeconds = default;
            Optional<int> retryAttempts = default;
            Optional<int> initialRetryIntervalSeconds = default;
            Optional<int> maximumRetryIntervalSeconds = default;
            Optional<float> retryIntervalBackoffMultiplier = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeoutSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeoutSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("retryAttempts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retryAttempts = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("initialRetryIntervalSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialRetryIntervalSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maximumRetryIntervalSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumRetryIntervalSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("retryIntervalBackoffMultiplier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retryIntervalBackoffMultiplier = property.Value.GetSingle();
                    continue;
                }
            }
            return new JobStepExecutionOptions(Optional.ToNullable(timeoutSeconds), Optional.ToNullable(retryAttempts), Optional.ToNullable(initialRetryIntervalSeconds), Optional.ToNullable(maximumRetryIntervalSeconds), Optional.ToNullable(retryIntervalBackoffMultiplier));
        }
    }
}
