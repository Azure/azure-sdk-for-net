// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class TopQueries
    {
        internal static TopQueries DeserializeTopQueries(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> numberOfQueries = default;
            Optional<string> aggregationFunction = default;
            Optional<string> observationMetric = default;
            Optional<QueryTimeGrainType> intervalType = default;
            Optional<string> startTime = default;
            Optional<string> endTime = default;
            Optional<IReadOnlyList<QueryStatisticsProperties>> queries = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("numberOfQueries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfQueries = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("aggregationFunction"u8))
                {
                    aggregationFunction = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("observationMetric"u8))
                {
                    observationMetric = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("intervalType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intervalType = new QueryTimeGrainType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    endTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<QueryStatisticsProperties> array = new List<QueryStatisticsProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QueryStatisticsProperties.DeserializeQueryStatisticsProperties(item));
                    }
                    queries = array;
                    continue;
                }
            }
            return new TopQueries(Optional.ToNullable(numberOfQueries), aggregationFunction.Value, observationMetric.Value, Optional.ToNullable(intervalType), startTime.Value, endTime.Value, Optional.ToList(queries));
        }
    }
}
