// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class VulnerabilityAssessmentRecurringScansProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("isEnabled");
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(EmailSubscriptionAdmins))
            {
                writer.WritePropertyName("emailSubscriptionAdmins");
                writer.WriteBooleanValue(EmailSubscriptionAdmins.Value);
            }
            if (Optional.IsCollectionDefined(Emails))
            {
                writer.WritePropertyName("emails");
                writer.WriteStartArray();
                foreach (var item in Emails)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static VulnerabilityAssessmentRecurringScansProperties DeserializeVulnerabilityAssessmentRecurringScansProperties(JsonElement element)
        {
            Optional<bool> isEnabled = default;
            Optional<bool> emailSubscriptionAdmins = default;
            Optional<IList<string>> emails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("emailSubscriptionAdmins"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    emailSubscriptionAdmins = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("emails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    emails = array;
                    continue;
                }
            }
            return new VulnerabilityAssessmentRecurringScansProperties(Optional.ToNullable(isEnabled), Optional.ToNullable(emailSubscriptionAdmins), Optional.ToList(emails));
        }
    }
}
