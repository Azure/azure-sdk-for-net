// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be &apos;Enabled&apos; or &apos;Disabled&apos;. </summary>
    public readonly partial struct ServerPublicNetworkAccess : IEquatable<ServerPublicNetworkAccess>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ServerPublicNetworkAccess"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServerPublicNetworkAccess(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";

        /// <summary> Enabled. </summary>
        public static ServerPublicNetworkAccess Enabled { get; } = new ServerPublicNetworkAccess(EnabledValue);
        /// <summary> Disabled. </summary>
        public static ServerPublicNetworkAccess Disabled { get; } = new ServerPublicNetworkAccess(DisabledValue);
        /// <summary> Determines if two <see cref="ServerPublicNetworkAccess"/> values are the same. </summary>
        public static bool operator ==(ServerPublicNetworkAccess left, ServerPublicNetworkAccess right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServerPublicNetworkAccess"/> values are not the same. </summary>
        public static bool operator !=(ServerPublicNetworkAccess left, ServerPublicNetworkAccess right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServerPublicNetworkAccess"/>. </summary>
        public static implicit operator ServerPublicNetworkAccess(string value) => new ServerPublicNetworkAccess(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServerPublicNetworkAccess other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServerPublicNetworkAccess other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
