// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions. </summary>
    public readonly partial struct ElasticPoolEdition : IEquatable<ElasticPoolEdition>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ElasticPoolEdition"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ElasticPoolEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BasicValue = "Basic";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";
        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string BusinessCriticalValue = "BusinessCritical";

        /// <summary> Basic. </summary>
        public static ElasticPoolEdition Basic { get; } = new ElasticPoolEdition(BasicValue);
        /// <summary> Standard. </summary>
        public static ElasticPoolEdition Standard { get; } = new ElasticPoolEdition(StandardValue);
        /// <summary> Premium. </summary>
        public static ElasticPoolEdition Premium { get; } = new ElasticPoolEdition(PremiumValue);
        /// <summary> GeneralPurpose. </summary>
        public static ElasticPoolEdition GeneralPurpose { get; } = new ElasticPoolEdition(GeneralPurposeValue);
        /// <summary> BusinessCritical. </summary>
        public static ElasticPoolEdition BusinessCritical { get; } = new ElasticPoolEdition(BusinessCriticalValue);
        /// <summary> Determines if two <see cref="ElasticPoolEdition"/> values are the same. </summary>
        public static bool operator ==(ElasticPoolEdition left, ElasticPoolEdition right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ElasticPoolEdition"/> values are not the same. </summary>
        public static bool operator !=(ElasticPoolEdition left, ElasticPoolEdition right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ElasticPoolEdition"/>. </summary>
        public static implicit operator ElasticPoolEdition(string value) => new ElasticPoolEdition(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ElasticPoolEdition other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ElasticPoolEdition other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
