// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    public partial class SqlVulnerabilityAssessmentScanResultData : IUtf8JsonSerializable, IModelJsonSerializable<SqlVulnerabilityAssessmentScanResultData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SqlVulnerabilityAssessmentScanResultData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SqlVulnerabilityAssessmentScanResultData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVulnerabilityAssessmentScanResultData>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SqlVulnerabilityAssessmentScanResultData DeserializeSqlVulnerabilityAssessmentScanResultData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> ruleId = default;
            Optional<SqlVulnerabilityAssessmentRuleStatus> status = default;
            Optional<string> errorMessage = default;
            Optional<bool> isTrimmed = default;
            Optional<IReadOnlyList<IList<string>>> queryResults = default;
            Optional<SqlVulnerabilityAssessmentRemediation> remediation = default;
            Optional<SqlVulnerabilityAssessmentBaselineAdjustedResult> baselineAdjustedResult = default;
            Optional<SqlVulnerabilityAssessmentRuleMetadata> ruleMetadata = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ruleId"u8))
                        {
                            ruleId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            status = new SqlVulnerabilityAssessmentRuleStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("errorMessage"u8))
                        {
                            errorMessage = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isTrimmed"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isTrimmed = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("queryResults"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<IList<string>> array = new List<IList<string>>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    List<string> array0 = new List<string>();
                                    foreach (var item0 in item.EnumerateArray())
                                    {
                                        array0.Add(item0.GetString());
                                    }
                                    array.Add(array0);
                                }
                            }
                            queryResults = array;
                            continue;
                        }
                        if (property0.NameEquals("remediation"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            remediation = SqlVulnerabilityAssessmentRemediation.DeserializeSqlVulnerabilityAssessmentRemediation(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("baselineAdjustedResult"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            baselineAdjustedResult = SqlVulnerabilityAssessmentBaselineAdjustedResult.DeserializeSqlVulnerabilityAssessmentBaselineAdjustedResult(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("ruleMetadata"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ruleMetadata = SqlVulnerabilityAssessmentRuleMetadata.DeserializeSqlVulnerabilityAssessmentRuleMetadata(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SqlVulnerabilityAssessmentScanResultData(id, name, type, systemData.Value, ruleId.Value, Optional.ToNullable(status), errorMessage.Value, Optional.ToNullable(isTrimmed), Optional.ToList(queryResults), remediation.Value, baselineAdjustedResult.Value, ruleMetadata.Value, rawData);
        }

        SqlVulnerabilityAssessmentScanResultData IModelJsonSerializable<SqlVulnerabilityAssessmentScanResultData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVulnerabilityAssessmentScanResultData>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlVulnerabilityAssessmentScanResultData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SqlVulnerabilityAssessmentScanResultData>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVulnerabilityAssessmentScanResultData>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SqlVulnerabilityAssessmentScanResultData IModelSerializable<SqlVulnerabilityAssessmentScanResultData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<SqlVulnerabilityAssessmentScanResultData>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSqlVulnerabilityAssessmentScanResultData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SqlVulnerabilityAssessmentScanResultData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SqlVulnerabilityAssessmentScanResultData"/> to convert. </param>
        public static implicit operator RequestContent(SqlVulnerabilityAssessmentScanResultData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SqlVulnerabilityAssessmentScanResultData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SqlVulnerabilityAssessmentScanResultData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSqlVulnerabilityAssessmentScanResultData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
