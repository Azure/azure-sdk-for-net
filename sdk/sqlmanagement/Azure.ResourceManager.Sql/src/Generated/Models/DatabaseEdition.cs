// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary>
    /// The edition for the database being created.
    /// 
    /// 
    /// 
    /// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
    /// 
    /// 
    /// 
    /// ```azurecli
    /// 
    /// az sql db list-editions -l &lt;location&gt; -o table
    /// 
    /// ````
    /// 
    /// 
    /// 
    /// ```powershell
    /// 
    /// Get-AzSqlServerServiceObjective -Location &lt;location&gt;
    /// 
    /// ````
    /// 
    /// .
    /// </summary>
    public readonly partial struct DatabaseEdition : IEquatable<DatabaseEdition>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DatabaseEdition"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DatabaseEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WebValue = "Web";
        private const string BusinessValue = "Business";
        private const string BasicValue = "Basic";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";
        private const string PremiumRSValue = "PremiumRS";
        private const string FreeValue = "Free";
        private const string StretchValue = "Stretch";
        private const string DataWarehouseValue = "DataWarehouse";
        private const string SystemValue = "System";
        private const string System2Value = "System2";
        private const string GeneralPurposeValue = "GeneralPurpose";
        private const string BusinessCriticalValue = "BusinessCritical";
        private const string HyperscaleValue = "Hyperscale";

        /// <summary> Web. </summary>
        public static DatabaseEdition Web { get; } = new DatabaseEdition(WebValue);
        /// <summary> Business. </summary>
        public static DatabaseEdition Business { get; } = new DatabaseEdition(BusinessValue);
        /// <summary> Basic. </summary>
        public static DatabaseEdition Basic { get; } = new DatabaseEdition(BasicValue);
        /// <summary> Standard. </summary>
        public static DatabaseEdition Standard { get; } = new DatabaseEdition(StandardValue);
        /// <summary> Premium. </summary>
        public static DatabaseEdition Premium { get; } = new DatabaseEdition(PremiumValue);
        /// <summary> PremiumRS. </summary>
        public static DatabaseEdition PremiumRS { get; } = new DatabaseEdition(PremiumRSValue);
        /// <summary> Free. </summary>
        public static DatabaseEdition Free { get; } = new DatabaseEdition(FreeValue);
        /// <summary> Stretch. </summary>
        public static DatabaseEdition Stretch { get; } = new DatabaseEdition(StretchValue);
        /// <summary> DataWarehouse. </summary>
        public static DatabaseEdition DataWarehouse { get; } = new DatabaseEdition(DataWarehouseValue);
        /// <summary> System. </summary>
        public static DatabaseEdition System { get; } = new DatabaseEdition(SystemValue);
        /// <summary> System2. </summary>
        public static DatabaseEdition System2 { get; } = new DatabaseEdition(System2Value);
        /// <summary> GeneralPurpose. </summary>
        public static DatabaseEdition GeneralPurpose { get; } = new DatabaseEdition(GeneralPurposeValue);
        /// <summary> BusinessCritical. </summary>
        public static DatabaseEdition BusinessCritical { get; } = new DatabaseEdition(BusinessCriticalValue);
        /// <summary> Hyperscale. </summary>
        public static DatabaseEdition Hyperscale { get; } = new DatabaseEdition(HyperscaleValue);
        /// <summary> Determines if two <see cref="DatabaseEdition"/> values are the same. </summary>
        public static bool operator ==(DatabaseEdition left, DatabaseEdition right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DatabaseEdition"/> values are not the same. </summary>
        public static bool operator !=(DatabaseEdition left, DatabaseEdition right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DatabaseEdition"/>. </summary>
        public static implicit operator DatabaseEdition(string value) => new DatabaseEdition(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DatabaseEdition other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DatabaseEdition other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
