// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The MetricType. </summary>
    public readonly partial struct MetricType : IEquatable<MetricType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MetricType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CpuValue = "cpu";
        private const string IoValue = "io";
        private const string LogIoValue = "logIo";
        private const string DurationValue = "duration";
        private const string DtuValue = "dtu";

        /// <summary> cpu. </summary>
        public static MetricType Cpu { get; } = new MetricType(CpuValue);
        /// <summary> io. </summary>
        public static MetricType Io { get; } = new MetricType(IoValue);
        /// <summary> logIo. </summary>
        public static MetricType LogIo { get; } = new MetricType(LogIoValue);
        /// <summary> duration. </summary>
        public static MetricType Duration { get; } = new MetricType(DurationValue);
        /// <summary> dtu. </summary>
        public static MetricType Dtu { get; } = new MetricType(DtuValue);
        /// <summary> Determines if two <see cref="MetricType"/> values are the same. </summary>
        public static bool operator ==(MetricType left, MetricType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetricType"/> values are not the same. </summary>
        public static bool operator !=(MetricType left, MetricType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MetricType"/>. </summary>
        public static implicit operator MetricType(string value) => new MetricType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetricType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetricType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
