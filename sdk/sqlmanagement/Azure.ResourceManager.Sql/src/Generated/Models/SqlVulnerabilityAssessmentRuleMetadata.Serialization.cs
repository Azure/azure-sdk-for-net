// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class SqlVulnerabilityAssessmentRuleMetadata
    {
        internal static SqlVulnerabilityAssessmentRuleMetadata DeserializeSqlVulnerabilityAssessmentRuleMetadata(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> ruleId = default;
            Core.Optional<SqlVulnerabilityAssessmentRuleSeverity> severity = default;
            Core.Optional<string> category = default;
            Core.Optional<SqlVulnerabilityAssessmentRuleType> ruleType = default;
            Core.Optional<string> title = default;
            Core.Optional<string> description = default;
            Core.Optional<string> rationale = default;
            Core.Optional<SqlVulnerabilityAssessmentQueryCheck> queryCheck = default;
            Core.Optional<IReadOnlyList<SqlVulnerabilityAssessmentBenchmarkReference>> benchmarkReferences = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleId"u8))
                {
                    ruleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    severity = new SqlVulnerabilityAssessmentRuleSeverity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ruleType = new SqlVulnerabilityAssessmentRuleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rationale"u8))
                {
                    rationale = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryCheck"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    queryCheck = SqlVulnerabilityAssessmentQueryCheck.DeserializeSqlVulnerabilityAssessmentQueryCheck(property.Value);
                    continue;
                }
                if (property.NameEquals("benchmarkReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SqlVulnerabilityAssessmentBenchmarkReference> array = new List<SqlVulnerabilityAssessmentBenchmarkReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlVulnerabilityAssessmentBenchmarkReference.DeserializeSqlVulnerabilityAssessmentBenchmarkReference(item));
                    }
                    benchmarkReferences = array;
                    continue;
                }
            }
            return new SqlVulnerabilityAssessmentRuleMetadata(ruleId.Value, Core.Optional.ToNullable(severity), category.Value, Core.Optional.ToNullable(ruleType), title.Value, description.Value, rationale.Value, queryCheck.Value, Core.Optional.ToList(benchmarkReferences));
        }
    }
}
