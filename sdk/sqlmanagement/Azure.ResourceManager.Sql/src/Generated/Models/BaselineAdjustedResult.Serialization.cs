// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class BaselineAdjustedResult
    {
        internal static BaselineAdjustedResult DeserializeBaselineAdjustedResult(JsonElement element)
        {
            Optional<Baseline> baseline = default;
            Optional<RuleStatus> status = default;
            Optional<IReadOnlyList<IList<string>>> resultsNotInBaseline = default;
            Optional<IReadOnlyList<IList<string>>> resultsOnlyInBaseline = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("baseline"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    baseline = Baseline.DeserializeBaseline(property.Value);
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new RuleStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resultsNotInBaseline"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<string> array0 = new List<string>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(item0.GetString());
                        }
                        array.Add(array0);
                    }
                    resultsNotInBaseline = array;
                    continue;
                }
                if (property.NameEquals("resultsOnlyInBaseline"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<string> array0 = new List<string>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(item0.GetString());
                        }
                        array.Add(array0);
                    }
                    resultsOnlyInBaseline = array;
                    continue;
                }
            }
            return new BaselineAdjustedResult(baseline.Value, Optional.ToNullable(status), Optional.ToList(resultsNotInBaseline), Optional.ToList(resultsOnlyInBaseline));
        }
    }
}
