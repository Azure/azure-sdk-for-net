// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The Enum77. </summary>
    public readonly partial struct Enum77 : IEquatable<Enum77>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Enum77"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum77(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllValue = "All";
        private const string ErrorValue = "Error";
        private const string WarningValue = "Warning";
        private const string SuccessValue = "Success";

        /// <summary> All. </summary>
        public static Enum77 All { get; } = new Enum77(AllValue);
        /// <summary> Error. </summary>
        public static Enum77 Error { get; } = new Enum77(ErrorValue);
        /// <summary> Warning. </summary>
        public static Enum77 Warning { get; } = new Enum77(WarningValue);
        /// <summary> Success. </summary>
        public static Enum77 Success { get; } = new Enum77(SuccessValue);
        /// <summary> Determines if two <see cref="Enum77"/> values are the same. </summary>
        public static bool operator ==(Enum77 left, Enum77 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum77"/> values are not the same. </summary>
        public static bool operator !=(Enum77 left, Enum77 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum77"/>. </summary>
        public static implicit operator Enum77(string value) => new Enum77(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum77 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum77 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
