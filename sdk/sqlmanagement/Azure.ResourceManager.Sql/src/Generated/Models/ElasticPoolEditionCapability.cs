// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The elastic pool edition capability. </summary>
    public partial class ElasticPoolEditionCapability
    {
        /// <summary> Initializes a new instance of <see cref="ElasticPoolEditionCapability"/>. </summary>
        internal ElasticPoolEditionCapability()
        {
            SupportedElasticPoolPerformanceLevels = new ChangeTrackingList<ElasticPoolPerformanceLevelCapability>();
        }

        /// <summary> Initializes a new instance of <see cref="ElasticPoolEditionCapability"/>. </summary>
        /// <param name="name"> The elastic pool edition name. </param>
        /// <param name="supportedElasticPoolPerformanceLevels"> The list of supported elastic pool DTU levels for the edition. </param>
        /// <param name="isZoneRedundant"> Whether or not zone redundancy is supported for the edition. </param>
        /// <param name="status"> The status of the capability. </param>
        /// <param name="reason"> The reason for the capability not being available. </param>
        internal ElasticPoolEditionCapability(string name, IReadOnlyList<ElasticPoolPerformanceLevelCapability> supportedElasticPoolPerformanceLevels, bool? isZoneRedundant, SqlCapabilityStatus? status, string reason)
        {
            Name = name;
            SupportedElasticPoolPerformanceLevels = supportedElasticPoolPerformanceLevels;
            IsZoneRedundant = isZoneRedundant;
            Status = status;
            Reason = reason;
        }

        /// <summary> The elastic pool edition name. </summary>
        public string Name { get; }
        /// <summary> The list of supported elastic pool DTU levels for the edition. </summary>
        public IReadOnlyList<ElasticPoolPerformanceLevelCapability> SupportedElasticPoolPerformanceLevels { get; }
        /// <summary> Whether or not zone redundancy is supported for the edition. </summary>
        public bool? IsZoneRedundant { get; }
        /// <summary> The status of the capability. </summary>
        public SqlCapabilityStatus? Status { get; }
        /// <summary> The reason for the capability not being available. </summary>
        public string Reason { get; }
    }
}
