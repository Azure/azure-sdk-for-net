// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The SubscriptionResourceGetLongTermRetentionManagedInstanceBackupsWithLocationOptions. </summary>
    public partial class SubscriptionResourceGetLongTermRetentionManagedInstanceBackupsWithLocationOptions
    {
        /// <summary> Initializes a new instance of <see cref="SubscriptionResourceGetLongTermRetentionManagedInstanceBackupsWithLocationOptions"/>. </summary>
        /// <param name="locationName"> The location of the database. </param>
        public SubscriptionResourceGetLongTermRetentionManagedInstanceBackupsWithLocationOptions(AzureLocation locationName)
        {
            LocationName = locationName;
        }

        /// <summary> Initializes a new instance of <see cref="SubscriptionResourceGetLongTermRetentionManagedInstanceBackupsWithLocationOptions"/> for deserialization. </summary>
        internal SubscriptionResourceGetLongTermRetentionManagedInstanceBackupsWithLocationOptions()
        {
        }

        /// <summary> The location of the database. </summary>
        [WirePath("locationName")]
        public AzureLocation LocationName { get; }
        /// <summary> Whether or not to only get the latest backup for each database. </summary>
        [WirePath("onlyLatestPerDatabase")]
        public bool? OnlyLatestPerDatabase { get; set; }
        /// <summary> Whether to query against just live databases, just deleted databases, or all databases. </summary>
        [WirePath("databaseState")]
        public SqlDatabaseState? DatabaseState { get; set; }
        /// <summary> The number of elements in the collection to skip. </summary>
        [WirePath("skip")]
        public long? Skip { get; set; }
        /// <summary> The number of elements to return from the collection. </summary>
        [WirePath("top")]
        public long? Top { get; set; }
        /// <summary> An OData filter expression that filters elements in the collection. </summary>
        [WirePath("filter")]
        public string Filter { get; set; }
    }
}
