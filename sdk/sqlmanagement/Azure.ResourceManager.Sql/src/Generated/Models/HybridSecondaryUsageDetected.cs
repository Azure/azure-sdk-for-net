// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Hybrid secondary usage detected. Possible values are 'Active' (customer does not meet the requirements to use the secondary as Passive DR) and 'Passive' (customer meets the requirements to use the secondary as Passive DR). </summary>
    public readonly partial struct HybridSecondaryUsageDetected : IEquatable<HybridSecondaryUsageDetected>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HybridSecondaryUsageDetected"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HybridSecondaryUsageDetected(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string PassiveValue = "Passive";

        /// <summary> Active. </summary>
        public static HybridSecondaryUsageDetected Active { get; } = new HybridSecondaryUsageDetected(ActiveValue);
        /// <summary> Passive. </summary>
        public static HybridSecondaryUsageDetected Passive { get; } = new HybridSecondaryUsageDetected(PassiveValue);
        /// <summary> Determines if two <see cref="HybridSecondaryUsageDetected"/> values are the same. </summary>
        public static bool operator ==(HybridSecondaryUsageDetected left, HybridSecondaryUsageDetected right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HybridSecondaryUsageDetected"/> values are not the same. </summary>
        public static bool operator !=(HybridSecondaryUsageDetected left, HybridSecondaryUsageDetected right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HybridSecondaryUsageDetected"/>. </summary>
        public static implicit operator HybridSecondaryUsageDetected(string value) => new HybridSecondaryUsageDetected(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HybridSecondaryUsageDetected other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HybridSecondaryUsageDetected other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
