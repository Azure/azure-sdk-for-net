// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The setting for whether or not time-based immutability is enabled for the LTR backup. When time-based immutability is enabled and locked, the backup cannot be deleted until BackupExpirationTime. </summary>
    public readonly partial struct TimeBasedImmutability : IEquatable<TimeBasedImmutability>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TimeBasedImmutability"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TimeBasedImmutability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";

        /// <summary> Enabled. </summary>
        public static TimeBasedImmutability Enabled { get; } = new TimeBasedImmutability(EnabledValue);
        /// <summary> Disabled. </summary>
        public static TimeBasedImmutability Disabled { get; } = new TimeBasedImmutability(DisabledValue);
        /// <summary> Determines if two <see cref="TimeBasedImmutability"/> values are the same. </summary>
        public static bool operator ==(TimeBasedImmutability left, TimeBasedImmutability right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TimeBasedImmutability"/> values are not the same. </summary>
        public static bool operator !=(TimeBasedImmutability left, TimeBasedImmutability right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TimeBasedImmutability"/>. </summary>
        public static implicit operator TimeBasedImmutability(string value) => new TimeBasedImmutability(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TimeBasedImmutability other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TimeBasedImmutability other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
