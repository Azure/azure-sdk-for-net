// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The failover type, can be ForcedAllowDataLoss or Planned. </summary>
    public readonly partial struct FailoverType : IEquatable<FailoverType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FailoverType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FailoverType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ForcedAllowDataLossValue = "ForcedAllowDataLoss";
        private const string PlannedValue = "Planned";

        /// <summary> ForcedAllowDataLoss. </summary>
        public static FailoverType ForcedAllowDataLoss { get; } = new FailoverType(ForcedAllowDataLossValue);
        /// <summary> Planned. </summary>
        public static FailoverType Planned { get; } = new FailoverType(PlannedValue);
        /// <summary> Determines if two <see cref="FailoverType"/> values are the same. </summary>
        public static bool operator ==(FailoverType left, FailoverType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FailoverType"/> values are not the same. </summary>
        public static bool operator !=(FailoverType left, FailoverType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FailoverType"/>. </summary>
        public static implicit operator FailoverType(string value) => new FailoverType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FailoverType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FailoverType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
