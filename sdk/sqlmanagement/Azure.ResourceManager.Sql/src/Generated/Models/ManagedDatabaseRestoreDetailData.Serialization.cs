// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    public partial class ManagedDatabaseRestoreDetailData : IUtf8JsonSerializable, IModelJsonSerializable<ManagedDatabaseRestoreDetailData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ManagedDatabaseRestoreDetailData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ManagedDatabaseRestoreDetailData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ManagedDatabaseRestoreDetailData DeserializeManagedDatabaseRestoreDetailData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> type0 = default;
            Optional<string> status = default;
            Optional<string> blockReason = default;
            Optional<string> lastUploadedFileName = default;
            Optional<DateTimeOffset> lastUploadedFileTime = default;
            Optional<string> lastRestoredFileName = default;
            Optional<DateTimeOffset> lastRestoredFileTime = default;
            Optional<int> percentCompleted = default;
            Optional<int> currentRestoredSizeMB = default;
            Optional<int> currentRestorePlanSizeMB = default;
            Optional<string> currentBackupType = default;
            Optional<string> currentRestoringFileName = default;
            Optional<int> numberOfFilesDetected = default;
            Optional<int> numberOfFilesQueued = default;
            Optional<int> numberOfFilesSkipped = default;
            Optional<int> numberOfFilesRestoring = default;
            Optional<int> numberOfFilesRestored = default;
            Optional<int> numberOfFilesUnrestorable = default;
            Optional<IReadOnlyList<ManagedDatabaseRestoreDetailBackupSetProperties>> fullBackupSets = default;
            Optional<IReadOnlyList<ManagedDatabaseRestoreDetailBackupSetProperties>> diffBackupSets = default;
            Optional<IReadOnlyList<ManagedDatabaseRestoreDetailBackupSetProperties>> logBackupSets = default;
            Optional<IReadOnlyList<ManagedDatabaseRestoreDetailUnrestorableFileProperties>> unrestorableFiles = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("type"u8))
                        {
                            type0 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            status = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("blockReason"u8))
                        {
                            blockReason = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastUploadedFileName"u8))
                        {
                            lastUploadedFileName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastUploadedFileTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastUploadedFileTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastRestoredFileName"u8))
                        {
                            lastRestoredFileName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastRestoredFileTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastRestoredFileTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("percentCompleted"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            percentCompleted = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("currentRestoredSizeMB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currentRestoredSizeMB = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("currentRestorePlanSizeMB"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            currentRestorePlanSizeMB = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("currentBackupType"u8))
                        {
                            currentBackupType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("currentRestoringFileName"u8))
                        {
                            currentRestoringFileName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFilesDetected"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFilesDetected = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFilesQueued"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFilesQueued = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFilesSkipped"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFilesSkipped = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFilesRestoring"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFilesRestoring = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFilesRestored"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFilesRestored = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFilesUnrestorable"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            numberOfFilesUnrestorable = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("fullBackupSets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ManagedDatabaseRestoreDetailBackupSetProperties> array = new List<ManagedDatabaseRestoreDetailBackupSetProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ManagedDatabaseRestoreDetailBackupSetProperties.DeserializeManagedDatabaseRestoreDetailBackupSetProperties(item));
                            }
                            fullBackupSets = array;
                            continue;
                        }
                        if (property0.NameEquals("diffBackupSets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ManagedDatabaseRestoreDetailBackupSetProperties> array = new List<ManagedDatabaseRestoreDetailBackupSetProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ManagedDatabaseRestoreDetailBackupSetProperties.DeserializeManagedDatabaseRestoreDetailBackupSetProperties(item));
                            }
                            diffBackupSets = array;
                            continue;
                        }
                        if (property0.NameEquals("logBackupSets"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ManagedDatabaseRestoreDetailBackupSetProperties> array = new List<ManagedDatabaseRestoreDetailBackupSetProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ManagedDatabaseRestoreDetailBackupSetProperties.DeserializeManagedDatabaseRestoreDetailBackupSetProperties(item));
                            }
                            logBackupSets = array;
                            continue;
                        }
                        if (property0.NameEquals("unrestorableFiles"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<ManagedDatabaseRestoreDetailUnrestorableFileProperties> array = new List<ManagedDatabaseRestoreDetailUnrestorableFileProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ManagedDatabaseRestoreDetailUnrestorableFileProperties.DeserializeManagedDatabaseRestoreDetailUnrestorableFileProperties(item));
                            }
                            unrestorableFiles = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ManagedDatabaseRestoreDetailData(id, name, type, systemData.Value, type0.Value, status.Value, blockReason.Value, lastUploadedFileName.Value, Optional.ToNullable(lastUploadedFileTime), lastRestoredFileName.Value, Optional.ToNullable(lastRestoredFileTime), Optional.ToNullable(percentCompleted), Optional.ToNullable(currentRestoredSizeMB), Optional.ToNullable(currentRestorePlanSizeMB), currentBackupType.Value, currentRestoringFileName.Value, Optional.ToNullable(numberOfFilesDetected), Optional.ToNullable(numberOfFilesQueued), Optional.ToNullable(numberOfFilesSkipped), Optional.ToNullable(numberOfFilesRestoring), Optional.ToNullable(numberOfFilesRestored), Optional.ToNullable(numberOfFilesUnrestorable), Optional.ToList(fullBackupSets), Optional.ToList(diffBackupSets), Optional.ToList(logBackupSets), Optional.ToList(unrestorableFiles), rawData);
        }

        ManagedDatabaseRestoreDetailData IModelJsonSerializable<ManagedDatabaseRestoreDetailData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeManagedDatabaseRestoreDetailData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ManagedDatabaseRestoreDetailData>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ManagedDatabaseRestoreDetailData IModelSerializable<ManagedDatabaseRestoreDetailData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeManagedDatabaseRestoreDetailData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="ManagedDatabaseRestoreDetailData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="ManagedDatabaseRestoreDetailData"/> to convert. </param>
        public static implicit operator RequestContent(ManagedDatabaseRestoreDetailData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="ManagedDatabaseRestoreDetailData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator ManagedDatabaseRestoreDetailData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeManagedDatabaseRestoreDetailData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
