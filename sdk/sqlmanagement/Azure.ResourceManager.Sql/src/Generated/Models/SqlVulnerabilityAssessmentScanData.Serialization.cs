// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    public partial class SqlVulnerabilityAssessmentScanData : IUtf8JsonSerializable, IJsonModel<SqlVulnerabilityAssessmentScanData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SqlVulnerabilityAssessmentScanData>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<SqlVulnerabilityAssessmentScanData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(SystemData))
                {
                    writer.WritePropertyName("systemData"u8);
                    JsonSerializer.Serialize(writer, SystemData);
                }
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(ScanId))
                {
                    writer.WritePropertyName("scanId"u8);
                    writer.WriteStringValue(ScanId);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TriggerType))
                {
                    writer.WritePropertyName("triggerType"u8);
                    writer.WriteStringValue(TriggerType.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(State))
                {
                    writer.WritePropertyName("state"u8);
                    writer.WriteStringValue(State.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(StartOn))
                {
                    writer.WritePropertyName("startTime"u8);
                    writer.WriteStringValue(StartOn.Value, "O");
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(EndOn))
                {
                    writer.WritePropertyName("endTime"u8);
                    writer.WriteStringValue(EndOn.Value, "O");
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsCollectionDefined(Errors))
                {
                    writer.WritePropertyName("errors"u8);
                    writer.WriteStartArray();
                    foreach (var item in Errors)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(Server))
                {
                    writer.WritePropertyName("server"u8);
                    writer.WriteStringValue(Server);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(Database))
                {
                    writer.WritePropertyName("database"u8);
                    writer.WriteStringValue(Database);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(SqlVersion))
                {
                    writer.WritePropertyName("sqlVersion"u8);
                    writer.WriteStringValue(SqlVersion);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(HighSeverityFailedRulesCount))
                {
                    writer.WritePropertyName("highSeverityFailedRulesCount"u8);
                    writer.WriteNumberValue(HighSeverityFailedRulesCount.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(MediumSeverityFailedRulesCount))
                {
                    writer.WritePropertyName("mediumSeverityFailedRulesCount"u8);
                    writer.WriteNumberValue(MediumSeverityFailedRulesCount.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(LowSeverityFailedRulesCount))
                {
                    writer.WritePropertyName("lowSeverityFailedRulesCount"u8);
                    writer.WriteNumberValue(LowSeverityFailedRulesCount.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TotalPassedRulesCount))
                {
                    writer.WritePropertyName("totalPassedRulesCount"u8);
                    writer.WriteNumberValue(TotalPassedRulesCount.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TotalFailedRulesCount))
                {
                    writer.WritePropertyName("totalFailedRulesCount"u8);
                    writer.WriteNumberValue(TotalFailedRulesCount.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TotalRulesCount))
                {
                    writer.WritePropertyName("totalRulesCount"u8);
                    writer.WriteNumberValue(TotalRulesCount.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(IsBaselineApplied))
                {
                    writer.WritePropertyName("isBaselineApplied"u8);
                    writer.WriteBooleanValue(IsBaselineApplied.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(LastScanOn))
                {
                    writer.WritePropertyName("lastScanTime"u8);
                    writer.WriteStringValue(LastScanOn.Value, "O");
                }
            }
            writer.WriteEndObject();
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SqlVulnerabilityAssessmentScanData IJsonModel<SqlVulnerabilityAssessmentScanData>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SqlVulnerabilityAssessmentScanData)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSqlVulnerabilityAssessmentScanData(document.RootElement, options);
        }

        internal static SqlVulnerabilityAssessmentScanData DeserializeSqlVulnerabilityAssessmentScanData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> scanId = default;
            Optional<VulnerabilityAssessmentScanTriggerType> triggerType = default;
            Optional<VulnerabilityAssessmentScanState> state = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<IReadOnlyList<SqlVulnerabilityAssessmentScanError>> errors = default;
            Optional<string> server = default;
            Optional<string> database = default;
            Optional<string> sqlVersion = default;
            Optional<int> highSeverityFailedRulesCount = default;
            Optional<int> mediumSeverityFailedRulesCount = default;
            Optional<int> lowSeverityFailedRulesCount = default;
            Optional<int> totalPassedRulesCount = default;
            Optional<int> totalFailedRulesCount = default;
            Optional<int> totalRulesCount = default;
            Optional<bool> isBaselineApplied = default;
            Optional<DateTimeOffset> lastScanTime = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("scanId"u8))
                        {
                            scanId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("triggerType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            triggerType = new VulnerabilityAssessmentScanTriggerType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            state = new VulnerabilityAssessmentScanState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("startTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            startTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("endTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            endTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("errors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<SqlVulnerabilityAssessmentScanError> array = new List<SqlVulnerabilityAssessmentScanError>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SqlVulnerabilityAssessmentScanError.DeserializeSqlVulnerabilityAssessmentScanError(item));
                            }
                            errors = array;
                            continue;
                        }
                        if (property0.NameEquals("server"u8))
                        {
                            server = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("database"u8))
                        {
                            database = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlVersion"u8))
                        {
                            sqlVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("highSeverityFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            highSeverityFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("mediumSeverityFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            mediumSeverityFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("lowSeverityFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lowSeverityFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalPassedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalPassedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("isBaselineApplied"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isBaselineApplied = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("lastScanTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastScanTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SqlVulnerabilityAssessmentScanData(id, name, type, systemData.Value, scanId.Value, Optional.ToNullable(triggerType), Optional.ToNullable(state), Optional.ToNullable(startTime), Optional.ToNullable(endTime), Optional.ToList(errors), server.Value, database.Value, sqlVersion.Value, Optional.ToNullable(highSeverityFailedRulesCount), Optional.ToNullable(mediumSeverityFailedRulesCount), Optional.ToNullable(lowSeverityFailedRulesCount), Optional.ToNullable(totalPassedRulesCount), Optional.ToNullable(totalFailedRulesCount), Optional.ToNullable(totalRulesCount), Optional.ToNullable(isBaselineApplied), Optional.ToNullable(lastScanTime), serializedAdditionalRawData);
        }

        BinaryData IModel<SqlVulnerabilityAssessmentScanData>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SqlVulnerabilityAssessmentScanData)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SqlVulnerabilityAssessmentScanData IModel<SqlVulnerabilityAssessmentScanData>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SqlVulnerabilityAssessmentScanData)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSqlVulnerabilityAssessmentScanData(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<SqlVulnerabilityAssessmentScanData>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
