// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    public partial class SqlVulnerabilityAssessmentScanData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SqlVulnerabilityAssessmentScanData DeserializeSqlVulnerabilityAssessmentScanData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> scanId = default;
            Optional<VulnerabilityAssessmentScanTriggerType> triggerType = default;
            Optional<VulnerabilityAssessmentScanState> state = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<IReadOnlyList<SqlVulnerabilityAssessmentScanError>> errors = default;
            Optional<string> server = default;
            Optional<string> database = default;
            Optional<string> sqlVersion = default;
            Optional<int> highSeverityFailedRulesCount = default;
            Optional<int> mediumSeverityFailedRulesCount = default;
            Optional<int> lowSeverityFailedRulesCount = default;
            Optional<int> totalPassedRulesCount = default;
            Optional<int> totalFailedRulesCount = default;
            Optional<int> totalRulesCount = default;
            Optional<bool> isBaselineApplied = default;
            Optional<DateTimeOffset> lastScanTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("scanId"u8))
                        {
                            scanId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("triggerType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            triggerType = new VulnerabilityAssessmentScanTriggerType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            state = new VulnerabilityAssessmentScanState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("startTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            startTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("endTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            endTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("errors"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<SqlVulnerabilityAssessmentScanError> array = new List<SqlVulnerabilityAssessmentScanError>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SqlVulnerabilityAssessmentScanError.DeserializeSqlVulnerabilityAssessmentScanError(item));
                            }
                            errors = array;
                            continue;
                        }
                        if (property0.NameEquals("server"u8))
                        {
                            server = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("database"u8))
                        {
                            database = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sqlVersion"u8))
                        {
                            sqlVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("highSeverityFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            highSeverityFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("mediumSeverityFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            mediumSeverityFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("lowSeverityFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lowSeverityFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalPassedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalPassedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalFailedRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalFailedRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("totalRulesCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            totalRulesCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("isBaselineApplied"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            isBaselineApplied = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("lastScanTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            lastScanTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SqlVulnerabilityAssessmentScanData(id, name, type, systemData.Value, scanId.Value, Optional.ToNullable(triggerType), Optional.ToNullable(state), Optional.ToNullable(startTime), Optional.ToNullable(endTime), Optional.ToList(errors), server.Value, database.Value, sqlVersion.Value, Optional.ToNullable(highSeverityFailedRulesCount), Optional.ToNullable(mediumSeverityFailedRulesCount), Optional.ToNullable(lowSeverityFailedRulesCount), Optional.ToNullable(totalPassedRulesCount), Optional.ToNullable(totalFailedRulesCount), Optional.ToNullable(totalRulesCount), Optional.ToNullable(isBaselineApplied), Optional.ToNullable(lastScanTime));
        }
    }
}
