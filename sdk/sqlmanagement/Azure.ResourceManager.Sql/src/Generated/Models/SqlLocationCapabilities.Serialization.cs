// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class SqlLocationCapabilities
    {
        internal static SqlLocationCapabilities DeserializeSqlLocationCapabilities(JsonElement element)
        {
            Optional<string> name = default;
            Optional<IReadOnlyList<SqlServerVersionCapability>> supportedServerVersions = default;
            Optional<IReadOnlyList<ManagedInstanceVersionCapability>> supportedManagedInstanceVersions = default;
            Optional<SqlCapabilityStatus> status = default;
            Optional<string> reason = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("supportedServerVersions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SqlServerVersionCapability> array = new List<SqlServerVersionCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlServerVersionCapability.DeserializeSqlServerVersionCapability(item));
                    }
                    supportedServerVersions = array;
                    continue;
                }
                if (property.NameEquals("supportedManagedInstanceVersions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ManagedInstanceVersionCapability> array = new List<ManagedInstanceVersionCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ManagedInstanceVersionCapability.DeserializeManagedInstanceVersionCapability(item));
                    }
                    supportedManagedInstanceVersions = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = property.Value.GetString().ToSqlCapabilityStatus();
                    continue;
                }
                if (property.NameEquals("reason"))
                {
                    reason = property.Value.GetString();
                    continue;
                }
            }
            return new SqlLocationCapabilities(name.Value, Optional.ToList(supportedServerVersions), Optional.ToList(supportedManagedInstanceVersions), Optional.ToNullable(status), reason.Value);
        }
    }
}
