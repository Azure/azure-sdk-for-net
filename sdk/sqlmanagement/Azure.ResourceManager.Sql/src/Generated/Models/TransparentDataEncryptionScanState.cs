// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Specifies the encryption scan state of the transparent data encryption. </summary>
    public readonly partial struct TransparentDataEncryptionScanState : IEquatable<TransparentDataEncryptionScanState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TransparentDataEncryptionScanState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransparentDataEncryptionScanState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ResumeValue = "Resume";
        private const string RunningValue = "Running";
        private const string SuspendValue = "Suspend";
        private const string AbortedValue = "Aborted";
        private const string CompletedValue = "Completed";

        /// <summary> None. </summary>
        public static TransparentDataEncryptionScanState None { get; } = new TransparentDataEncryptionScanState(NoneValue);
        /// <summary> Resume. </summary>
        public static TransparentDataEncryptionScanState Resume { get; } = new TransparentDataEncryptionScanState(ResumeValue);
        /// <summary> Running. </summary>
        public static TransparentDataEncryptionScanState Running { get; } = new TransparentDataEncryptionScanState(RunningValue);
        /// <summary> Suspend. </summary>
        public static TransparentDataEncryptionScanState Suspend { get; } = new TransparentDataEncryptionScanState(SuspendValue);
        /// <summary> Aborted. </summary>
        public static TransparentDataEncryptionScanState Aborted { get; } = new TransparentDataEncryptionScanState(AbortedValue);
        /// <summary> Completed. </summary>
        public static TransparentDataEncryptionScanState Completed { get; } = new TransparentDataEncryptionScanState(CompletedValue);
        /// <summary> Determines if two <see cref="TransparentDataEncryptionScanState"/> values are the same. </summary>
        public static bool operator ==(TransparentDataEncryptionScanState left, TransparentDataEncryptionScanState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransparentDataEncryptionScanState"/> values are not the same. </summary>
        public static bool operator !=(TransparentDataEncryptionScanState left, TransparentDataEncryptionScanState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="TransparentDataEncryptionScanState"/>. </summary>
        public static implicit operator TransparentDataEncryptionScanState(string value) => new TransparentDataEncryptionScanState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransparentDataEncryptionScanState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransparentDataEncryptionScanState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
