// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Root cause kind. Allowed values are “TransparentDataEncryption”, “DatabaseReplication”, and “Unknown”. </summary>
    public readonly partial struct InaccessibilityReason : IEquatable<InaccessibilityReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InaccessibilityReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InaccessibilityReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string TransparentDataEncryptionValue = "TransparentDataEncryption";
        private const string DatabaseReplicationValue = "DatabaseReplication";

        /// <summary> Unknown. </summary>
        public static InaccessibilityReason Unknown { get; } = new InaccessibilityReason(UnknownValue);
        /// <summary> TransparentDataEncryption. </summary>
        public static InaccessibilityReason TransparentDataEncryption { get; } = new InaccessibilityReason(TransparentDataEncryptionValue);
        /// <summary> DatabaseReplication. </summary>
        public static InaccessibilityReason DatabaseReplication { get; } = new InaccessibilityReason(DatabaseReplicationValue);
        /// <summary> Determines if two <see cref="InaccessibilityReason"/> values are the same. </summary>
        public static bool operator ==(InaccessibilityReason left, InaccessibilityReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InaccessibilityReason"/> values are not the same. </summary>
        public static bool operator !=(InaccessibilityReason left, InaccessibilityReason right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="InaccessibilityReason"/>. </summary>
        public static implicit operator InaccessibilityReason(string value) => new InaccessibilityReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InaccessibilityReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InaccessibilityReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
