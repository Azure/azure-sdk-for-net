// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Replication mode of the link. </summary>
    public readonly partial struct ReplicationModeType : IEquatable<ReplicationModeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ReplicationModeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ReplicationModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AsyncValue = "Async";
        private const string SyncValue = "Sync";

        /// <summary> Async. </summary>
        public static ReplicationModeType Async { get; } = new ReplicationModeType(AsyncValue);
        /// <summary> Sync. </summary>
        public static ReplicationModeType Sync { get; } = new ReplicationModeType(SyncValue);
        /// <summary> Determines if two <see cref="ReplicationModeType"/> values are the same. </summary>
        public static bool operator ==(ReplicationModeType left, ReplicationModeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ReplicationModeType"/> values are not the same. </summary>
        public static bool operator !=(ReplicationModeType left, ReplicationModeType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ReplicationModeType"/>. </summary>
        public static implicit operator ReplicationModeType(string value) => new ReplicationModeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ReplicationModeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ReplicationModeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
