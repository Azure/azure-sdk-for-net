// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> Database specific information. </summary>
    public partial class DistributedAvailabilityGroupDatabase
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DistributedAvailabilityGroupDatabase"/>. </summary>
        public DistributedAvailabilityGroupDatabase()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DistributedAvailabilityGroupDatabase"/>. </summary>
        /// <param name="databaseName"> The name of the database in link. </param>
        /// <param name="instanceReplicaId"> Managed instance replica id. </param>
        /// <param name="partnerReplicaId"> SQL server replica id. </param>
        /// <param name="replicaState"> Current link state. </param>
        /// <param name="seedingProgress"> Seeding progress. </param>
        /// <param name="synchronizationHealth"> Link health state. </param>
        /// <param name="connectedState"> Link connected state. </param>
        /// <param name="lastReceivedLsn"> Last received LSN. </param>
        /// <param name="lastReceivedOn"> Last received LSN time. </param>
        /// <param name="lastSentLsn"> Last sent LSN. </param>
        /// <param name="lastSentOn"> Last sent LSN time. </param>
        /// <param name="lastCommitLsn"> Last commit LSN. </param>
        /// <param name="lastCommitOn"> Last commit LSN time. </param>
        /// <param name="lastHardenedLsn"> Last hardened LSN. </param>
        /// <param name="lastHardenedOn"> Last hardened LSN time. </param>
        /// <param name="lastBackupLsn"> Last backup LSN. </param>
        /// <param name="lastBackupOn"> Last backup LSN time. </param>
        /// <param name="mostRecentLinkError"> The most recent link connection error description. </param>
        /// <param name="partnerAuthCertValidity"> SQL server certificate validity. </param>
        /// <param name="instanceSendReplicationLagSeconds"> Replication lag when Managed Instance link side is primary. </param>
        /// <param name="instanceRedoReplicationLagSeconds"> Redo lag when Managed Instance link side is primary. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DistributedAvailabilityGroupDatabase(string databaseName, Guid? instanceReplicaId, Guid? partnerReplicaId, string replicaState, string seedingProgress, ReplicaSynchronizationHealth? synchronizationHealth, ReplicaConnectedState? connectedState, string lastReceivedLsn, DateTimeOffset? lastReceivedOn, string lastSentLsn, DateTimeOffset? lastSentOn, string lastCommitLsn, DateTimeOffset? lastCommitOn, string lastHardenedLsn, DateTimeOffset? lastHardenedOn, string lastBackupLsn, DateTimeOffset? lastBackupOn, string mostRecentLinkError, CertificateInfo partnerAuthCertValidity, int? instanceSendReplicationLagSeconds, int? instanceRedoReplicationLagSeconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DatabaseName = databaseName;
            InstanceReplicaId = instanceReplicaId;
            PartnerReplicaId = partnerReplicaId;
            ReplicaState = replicaState;
            SeedingProgress = seedingProgress;
            SynchronizationHealth = synchronizationHealth;
            ConnectedState = connectedState;
            LastReceivedLsn = lastReceivedLsn;
            LastReceivedOn = lastReceivedOn;
            LastSentLsn = lastSentLsn;
            LastSentOn = lastSentOn;
            LastCommitLsn = lastCommitLsn;
            LastCommitOn = lastCommitOn;
            LastHardenedLsn = lastHardenedLsn;
            LastHardenedOn = lastHardenedOn;
            LastBackupLsn = lastBackupLsn;
            LastBackupOn = lastBackupOn;
            MostRecentLinkError = mostRecentLinkError;
            PartnerAuthCertValidity = partnerAuthCertValidity;
            InstanceSendReplicationLagSeconds = instanceSendReplicationLagSeconds;
            InstanceRedoReplicationLagSeconds = instanceRedoReplicationLagSeconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The name of the database in link. </summary>
        [WirePath("databaseName")]
        public string DatabaseName { get; set; }
        /// <summary> Managed instance replica id. </summary>
        [WirePath("instanceReplicaId")]
        public Guid? InstanceReplicaId { get; }
        /// <summary> SQL server replica id. </summary>
        [WirePath("partnerReplicaId")]
        public Guid? PartnerReplicaId { get; }
        /// <summary> Current link state. </summary>
        [WirePath("replicaState")]
        public string ReplicaState { get; }
        /// <summary> Seeding progress. </summary>
        [WirePath("seedingProgress")]
        public string SeedingProgress { get; }
        /// <summary> Link health state. </summary>
        [WirePath("synchronizationHealth")]
        public ReplicaSynchronizationHealth? SynchronizationHealth { get; }
        /// <summary> Link connected state. </summary>
        [WirePath("connectedState")]
        public ReplicaConnectedState? ConnectedState { get; }
        /// <summary> Last received LSN. </summary>
        [WirePath("lastReceivedLsn")]
        public string LastReceivedLsn { get; }
        /// <summary> Last received LSN time. </summary>
        [WirePath("lastReceivedTime")]
        public DateTimeOffset? LastReceivedOn { get; }
        /// <summary> Last sent LSN. </summary>
        [WirePath("lastSentLsn")]
        public string LastSentLsn { get; }
        /// <summary> Last sent LSN time. </summary>
        [WirePath("lastSentTime")]
        public DateTimeOffset? LastSentOn { get; }
        /// <summary> Last commit LSN. </summary>
        [WirePath("lastCommitLsn")]
        public string LastCommitLsn { get; }
        /// <summary> Last commit LSN time. </summary>
        [WirePath("lastCommitTime")]
        public DateTimeOffset? LastCommitOn { get; }
        /// <summary> Last hardened LSN. </summary>
        [WirePath("lastHardenedLsn")]
        public string LastHardenedLsn { get; }
        /// <summary> Last hardened LSN time. </summary>
        [WirePath("lastHardenedTime")]
        public DateTimeOffset? LastHardenedOn { get; }
        /// <summary> Last backup LSN. </summary>
        [WirePath("lastBackupLsn")]
        public string LastBackupLsn { get; }
        /// <summary> Last backup LSN time. </summary>
        [WirePath("lastBackupTime")]
        public DateTimeOffset? LastBackupOn { get; }
        /// <summary> The most recent link connection error description. </summary>
        [WirePath("mostRecentLinkError")]
        public string MostRecentLinkError { get; }
        /// <summary> SQL server certificate validity. </summary>
        [WirePath("partnerAuthCertValidity")]
        public CertificateInfo PartnerAuthCertValidity { get; }
        /// <summary> Replication lag when Managed Instance link side is primary. </summary>
        [WirePath("instanceSendReplicationLagSeconds")]
        public int? InstanceSendReplicationLagSeconds { get; }
        /// <summary> Redo lag when Managed Instance link side is primary. </summary>
        [WirePath("instanceRedoReplicationLagSeconds")]
        public int? InstanceRedoReplicationLagSeconds { get; }
    }
}
