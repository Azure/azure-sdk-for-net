// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> An Import, Export, or PolybaseImport resource. </summary>
    public partial class SqlDatabaseExtension : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SqlDatabaseExtension"/>. </summary>
        public SqlDatabaseExtension()
        {
        }

        /// <summary> Initializes a new instance of <see cref="SqlDatabaseExtension"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="operationMode"> Operation mode of the operation: Import, Export, or PolybaseImport. </param>
        /// <param name="storageKeyType"> Storage key type: StorageAccessKey or SharedAccessKey. </param>
        /// <param name="storageKey"> Storage key for the storage account. </param>
        /// <param name="storageUri"> Storage Uri for the storage account. </param>
        /// <param name="administratorLogin"> Administrator login name. </param>
        /// <param name="administratorLoginPassword"> Administrator login password. </param>
        /// <param name="authenticationType"> Authentication type: SQL authentication or AD password. </param>
        /// <param name="databaseEdition"> Database edition for the newly created database in the case of an import operation. </param>
        /// <param name="serviceObjectiveName"> Database service level objective for the newly created database in the case of an import operation. </param>
        /// <param name="maxSizeBytes"> Database max size in bytes for the newly created database in the case of an import operation. </param>
        /// <param name="networkIsolation"> Optional resource information to enable network isolation for request. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SqlDatabaseExtension(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, DatabaseExtensionOperationMode? operationMode, StorageKeyType? storageKeyType, string storageKey, Uri storageUri, string administratorLogin, string administratorLoginPassword, string authenticationType, string databaseEdition, string serviceObjectiveName, string maxSizeBytes, NetworkIsolationSettings networkIsolation, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            OperationMode = operationMode;
            StorageKeyType = storageKeyType;
            StorageKey = storageKey;
            StorageUri = storageUri;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            AuthenticationType = authenticationType;
            DatabaseEdition = databaseEdition;
            ServiceObjectiveName = serviceObjectiveName;
            MaxSizeBytes = maxSizeBytes;
            NetworkIsolation = networkIsolation;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Operation mode of the operation: Import, Export, or PolybaseImport. </summary>
        [WirePath("properties.operationMode")]
        public DatabaseExtensionOperationMode? OperationMode { get; set; }
        /// <summary> Storage key type: StorageAccessKey or SharedAccessKey. </summary>
        [WirePath("properties.storageKeyType")]
        public StorageKeyType? StorageKeyType { get; set; }
        /// <summary> Storage key for the storage account. </summary>
        [WirePath("properties.storageKey")]
        public string StorageKey { get; set; }
        /// <summary> Storage Uri for the storage account. </summary>
        [WirePath("properties.storageUri")]
        public Uri StorageUri { get; set; }
        /// <summary> Administrator login name. </summary>
        [WirePath("properties.administratorLogin")]
        public string AdministratorLogin { get; set; }
        /// <summary> Administrator login password. </summary>
        [WirePath("properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }
        /// <summary> Authentication type: SQL authentication or AD password. </summary>
        [WirePath("properties.authenticationType")]
        public string AuthenticationType { get; set; }
        /// <summary> Database edition for the newly created database in the case of an import operation. </summary>
        [WirePath("properties.databaseEdition")]
        public string DatabaseEdition { get; set; }
        /// <summary> Database service level objective for the newly created database in the case of an import operation. </summary>
        [WirePath("properties.serviceObjectiveName")]
        public string ServiceObjectiveName { get; set; }
        /// <summary> Database max size in bytes for the newly created database in the case of an import operation. </summary>
        [WirePath("properties.maxSizeBytes")]
        public string MaxSizeBytes { get; set; }
        /// <summary> Optional resource information to enable network isolation for request. </summary>
        [WirePath("properties.networkIsolation")]
        public NetworkIsolationSettings NetworkIsolation { get; set; }
    }
}
