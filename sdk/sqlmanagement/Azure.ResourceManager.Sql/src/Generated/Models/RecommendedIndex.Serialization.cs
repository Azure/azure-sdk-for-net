// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sql.Models
{
    public partial class RecommendedIndex : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static RecommendedIndex DeserializeRecommendedIndex(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<RecommendedIndexAction> action = default;
            Optional<RecommendedIndexState> state = default;
            Optional<DateTimeOffset> created = default;
            Optional<DateTimeOffset> lastModified = default;
            Optional<RecommendedIndexType> indexType = default;
            Optional<string> schema = default;
            Optional<string> table = default;
            Optional<IReadOnlyList<string>> columns = default;
            Optional<IReadOnlyList<string>> includedColumns = default;
            Optional<string> indexScript = default;
            Optional<IReadOnlyList<OperationImpact>> estimatedImpact = default;
            Optional<IReadOnlyList<OperationImpact>> reportedImpact = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("action"))
                        {
                            action = property0.Value.GetString().ToRecommendedIndexAction();
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            state = property0.Value.GetString().ToRecommendedIndexState();
                            continue;
                        }
                        if (property0.NameEquals("created"))
                        {
                            created = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastModified"))
                        {
                            lastModified = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("indexType"))
                        {
                            indexType = property0.Value.GetString().ToRecommendedIndexType();
                            continue;
                        }
                        if (property0.NameEquals("schema"))
                        {
                            schema = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("table"))
                        {
                            table = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("columns"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            columns = array;
                            continue;
                        }
                        if (property0.NameEquals("includedColumns"))
                        {
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            includedColumns = array;
                            continue;
                        }
                        if (property0.NameEquals("indexScript"))
                        {
                            indexScript = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("estimatedImpact"))
                        {
                            List<OperationImpact> array = new List<OperationImpact>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(OperationImpact.DeserializeOperationImpact(item));
                            }
                            estimatedImpact = array;
                            continue;
                        }
                        if (property0.NameEquals("reportedImpact"))
                        {
                            List<OperationImpact> array = new List<OperationImpact>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(OperationImpact.DeserializeOperationImpact(item));
                            }
                            reportedImpact = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new RecommendedIndex(id.Value, name.Value, type.Value, Optional.ToNullable(action), Optional.ToNullable(state), Optional.ToNullable(created), Optional.ToNullable(lastModified), Optional.ToNullable(indexType), schema.Value, table.Value, Optional.ToList(columns), Optional.ToList(includedColumns), indexScript.Value, Optional.ToList(estimatedImpact), Optional.ToList(reportedImpact));
        }
    }
}
