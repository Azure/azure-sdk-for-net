// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Sql.Models
{
    /// <summary> The UpsertManagedServerOperationStepWithEstimatesAndDurationStatus. </summary>
    public readonly partial struct UpsertManagedServerOperationStepWithEstimatesAndDurationStatus : IEquatable<UpsertManagedServerOperationStepWithEstimatesAndDurationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UpsertManagedServerOperationStepWithEstimatesAndDurationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string InProgressValue = "InProgress";
        private const string SlowedDownValue = "SlowedDown";
        private const string CompletedValue = "Completed";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";

        /// <summary> NotStarted. </summary>
        public static UpsertManagedServerOperationStepWithEstimatesAndDurationStatus NotStarted { get; } = new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(NotStartedValue);
        /// <summary> InProgress. </summary>
        public static UpsertManagedServerOperationStepWithEstimatesAndDurationStatus InProgress { get; } = new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(InProgressValue);
        /// <summary> SlowedDown. </summary>
        public static UpsertManagedServerOperationStepWithEstimatesAndDurationStatus SlowedDown { get; } = new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(SlowedDownValue);
        /// <summary> Completed. </summary>
        public static UpsertManagedServerOperationStepWithEstimatesAndDurationStatus Completed { get; } = new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(CompletedValue);
        /// <summary> Failed. </summary>
        public static UpsertManagedServerOperationStepWithEstimatesAndDurationStatus Failed { get; } = new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(FailedValue);
        /// <summary> Canceled. </summary>
        public static UpsertManagedServerOperationStepWithEstimatesAndDurationStatus Canceled { get; } = new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(CanceledValue);
        /// <summary> Determines if two <see cref="UpsertManagedServerOperationStepWithEstimatesAndDurationStatus"/> values are the same. </summary>
        public static bool operator ==(UpsertManagedServerOperationStepWithEstimatesAndDurationStatus left, UpsertManagedServerOperationStepWithEstimatesAndDurationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpsertManagedServerOperationStepWithEstimatesAndDurationStatus"/> values are not the same. </summary>
        public static bool operator !=(UpsertManagedServerOperationStepWithEstimatesAndDurationStatus left, UpsertManagedServerOperationStepWithEstimatesAndDurationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="UpsertManagedServerOperationStepWithEstimatesAndDurationStatus"/>. </summary>
        public static implicit operator UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(string value) => new UpsertManagedServerOperationStepWithEstimatesAndDurationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpsertManagedServerOperationStepWithEstimatesAndDurationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpsertManagedServerOperationStepWithEstimatesAndDurationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
