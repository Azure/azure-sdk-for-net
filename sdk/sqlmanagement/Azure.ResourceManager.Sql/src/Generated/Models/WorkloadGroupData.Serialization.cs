// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Sql
{
    public partial class WorkloadGroupData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(MinResourcePercent))
            {
                writer.WritePropertyName("minResourcePercent"u8);
                writer.WriteNumberValue(MinResourcePercent.Value);
            }
            if (Core.Optional.IsDefined(MaxResourcePercent))
            {
                writer.WritePropertyName("maxResourcePercent"u8);
                writer.WriteNumberValue(MaxResourcePercent.Value);
            }
            if (Core.Optional.IsDefined(MinResourcePercentPerRequest))
            {
                writer.WritePropertyName("minResourcePercentPerRequest"u8);
                writer.WriteNumberValue(MinResourcePercentPerRequest.Value);
            }
            if (Core.Optional.IsDefined(MaxResourcePercentPerRequest))
            {
                writer.WritePropertyName("maxResourcePercentPerRequest"u8);
                writer.WriteNumberValue(MaxResourcePercentPerRequest.Value);
            }
            if (Core.Optional.IsDefined(Importance))
            {
                writer.WritePropertyName("importance"u8);
                writer.WriteStringValue(Importance);
            }
            if (Core.Optional.IsDefined(QueryExecutionTimeout))
            {
                writer.WritePropertyName("queryExecutionTimeout"u8);
                writer.WriteNumberValue(QueryExecutionTimeout.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static WorkloadGroupData DeserializeWorkloadGroupData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<int> minResourcePercent = default;
            Core.Optional<int> maxResourcePercent = default;
            Core.Optional<double> minResourcePercentPerRequest = default;
            Core.Optional<double> maxResourcePercentPerRequest = default;
            Core.Optional<string> importance = default;
            Core.Optional<int> queryExecutionTimeout = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("minResourcePercent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minResourcePercent = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("maxResourcePercent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxResourcePercent = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("minResourcePercentPerRequest"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            minResourcePercentPerRequest = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("maxResourcePercentPerRequest"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxResourcePercentPerRequest = property0.Value.GetDouble();
                            continue;
                        }
                        if (property0.NameEquals("importance"u8))
                        {
                            importance = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("queryExecutionTimeout"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            queryExecutionTimeout = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new WorkloadGroupData(id, name, type, systemData.Value, Core.Optional.ToNullable(minResourcePercent), Core.Optional.ToNullable(maxResourcePercent), Core.Optional.ToNullable(minResourcePercentPerRequest), Core.Optional.ToNullable(maxResourcePercentPerRequest), importance.Value, Core.Optional.ToNullable(queryExecutionTimeout));
        }
    }
}
