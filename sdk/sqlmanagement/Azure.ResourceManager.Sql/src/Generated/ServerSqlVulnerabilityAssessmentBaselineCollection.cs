// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing a collection of <see cref="ServerSqlVulnerabilityAssessmentBaselineResource" /> and their operations.
    /// Each <see cref="ServerSqlVulnerabilityAssessmentBaselineResource" /> in the collection will belong to the same instance of <see cref="SqlServerResource" />.
    /// To get a <see cref="ServerSqlVulnerabilityAssessmentBaselineCollection" /> instance call the GetServerSqlVulnerabilityAssessmentBaselines method from an instance of <see cref="SqlServerResource" />.
    /// </summary>
    public partial class ServerSqlVulnerabilityAssessmentBaselineCollection : ArmCollection, IEnumerable<ServerSqlVulnerabilityAssessmentBaselineResource>, IAsyncEnumerable<ServerSqlVulnerabilityAssessmentBaselineResource>
    {
        private readonly ClientDiagnostics _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentBaselinesRestOperations _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesRestClient;
        private readonly ClientDiagnostics _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics;
        private readonly SqlVulnerabilityAssessmentBaselineRestOperations _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient;
        private readonly VulnerabilityAssessmentName _vulnerabilityAssessmentName;

        /// <summary> Initializes a new instance of the <see cref="ServerSqlVulnerabilityAssessmentBaselineCollection"/> class for mocking. </summary>
        protected ServerSqlVulnerabilityAssessmentBaselineCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ServerSqlVulnerabilityAssessmentBaselineCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        internal ServerSqlVulnerabilityAssessmentBaselineCollection(ArmClient client, ResourceIdentifier id, VulnerabilityAssessmentName vulnerabilityAssessmentName) : base(client, id)
        {
            _vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", ServerSqlVulnerabilityAssessmentBaselineResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServerSqlVulnerabilityAssessmentBaselineResource.ResourceType, out string serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesApiVersion);
            _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesRestClient = new SqlVulnerabilityAssessmentBaselinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesApiVersion);
            _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Sql", ServerSqlVulnerabilityAssessmentBaselineResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ServerSqlVulnerabilityAssessmentBaselineResource.ResourceType, out string serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineApiVersion);
            _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient = new SqlVulnerabilityAssessmentBaselineRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SqlServerResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SqlServerResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Add a database&apos;s vulnerability assessment rule baseline list.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: SqlVulnerabilityAssessmentBaselines_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="input"> The requested rule baseline resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual async Task<ArmOperation<ServerSqlVulnerabilityAssessmentBaselineResource>> CreateOrUpdateAsync(WaitUntil waitUntil, BaselineName baselineName, DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName, baselineName, input, cancellationToken).ConfigureAwait(false);
                var operation = new SqlArmOperation<ServerSqlVulnerabilityAssessmentBaselineResource>(Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a database&apos;s vulnerability assessment rule baseline list.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: SqlVulnerabilityAssessmentBaselines_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="input"> The requested rule baseline resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual ArmOperation<ServerSqlVulnerabilityAssessmentBaselineResource> CreateOrUpdate(WaitUntil waitUntil, BaselineName baselineName, DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselinesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName, baselineName, input, cancellationToken);
                var operation = new SqlArmOperation<ServerSqlVulnerabilityAssessmentBaselineResource>(Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: SqlVulnerabilityAssessmentBaseline_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerSqlVulnerabilityAssessmentBaselineResource>> GetAsync(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineCollection.Get");
            scope.Start();
            try
            {
                var response = await _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: SqlVulnerabilityAssessmentBaseline_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerSqlVulnerabilityAssessmentBaselineResource> Get(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineCollection.Get");
            scope.Start();
            try
            {
                var response = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ServerSqlVulnerabilityAssessmentBaselineResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines
        /// Operation Id: SqlVulnerabilityAssessmentBaseline_ListBySqlVulnerabilityAssessment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerSqlVulnerabilityAssessmentBaselineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerSqlVulnerabilityAssessmentBaselineResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.CreateListBySqlVulnerabilityAssessmentRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.CreateListBySqlVulnerabilityAssessmentNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ServerSqlVulnerabilityAssessmentBaselineResource(Client, DatabaseSqlVulnerabilityAssessmentBaselineSetData.DeserializeDatabaseSqlVulnerabilityAssessmentBaselineSetData(e)), _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics, Pipeline, "ServerSqlVulnerabilityAssessmentBaselineCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Gets a list of database&apos;s sql vulnerability assessment rule baselines.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines
        /// Operation Id: SqlVulnerabilityAssessmentBaseline_ListBySqlVulnerabilityAssessment
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerSqlVulnerabilityAssessmentBaselineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerSqlVulnerabilityAssessmentBaselineResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.CreateListBySqlVulnerabilityAssessmentRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.CreateListBySqlVulnerabilityAssessmentNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ServerSqlVulnerabilityAssessmentBaselineResource(Client, DatabaseSqlVulnerabilityAssessmentBaselineSetData.DeserializeDatabaseSqlVulnerabilityAssessmentBaselineSetData(e)), _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics, Pipeline, "ServerSqlVulnerabilityAssessmentBaselineCollection.GetAll", "value", "nextLink");
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: SqlVulnerabilityAssessmentBaseline_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineCollection.Exists");
            scope.Start();
            try
            {
                var response = await _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}
        /// Operation Id: SqlVulnerabilityAssessmentBaseline_Get
        /// </summary>
        /// <param name="baselineName"> The BaselineName to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(BaselineName baselineName, CancellationToken cancellationToken = default)
        {
            using var scope = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineClientDiagnostics.CreateScope("ServerSqlVulnerabilityAssessmentBaselineCollection.Exists");
            scope.Start();
            try
            {
                var response = _serverSqlVulnerabilityAssessmentBaselineSqlVulnerabilityAssessmentBaselineRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, _vulnerabilityAssessmentName, baselineName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ServerSqlVulnerabilityAssessmentBaselineResource> IEnumerable<ServerSqlVulnerabilityAssessmentBaselineResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ServerSqlVulnerabilityAssessmentBaselineResource> IAsyncEnumerable<ServerSqlVulnerabilityAssessmentBaselineResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
