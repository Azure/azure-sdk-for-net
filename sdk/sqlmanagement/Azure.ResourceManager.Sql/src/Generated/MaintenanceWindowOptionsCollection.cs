// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace SqlManagementClient
{
    /// <summary> A class representing collection of MaintenanceWindowOptions and their operations over its parent. </summary>
    public partial class MaintenanceWindowOptionsCollection : ArmCollection
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly MaintenanceWindowOptionsRestOperations _maintenanceWindowOptionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MaintenanceWindowOptionsCollection"/> class for mocking. </summary>
        protected MaintenanceWindowOptionsCollection()
        {
        }

        /// <summary> Initializes a new instance of MaintenanceWindowOptionsCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal MaintenanceWindowOptionsCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _maintenanceWindowOptionsRestClient = new MaintenanceWindowOptionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Database.ResourceType;

        // Collection level operations.

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/maintenanceWindowOptions/current
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
        /// OperationId: MaintenanceWindowOptions_Get
        /// <summary> Gets a list of available maintenance windows. </summary>
        /// <param name="maintenanceWindowOptionsName"> Maintenance window options name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceWindowOptionsName"/> is null. </exception>
        public virtual Response<MaintenanceWindowOptions> Get(string maintenanceWindowOptionsName, CancellationToken cancellationToken = default)
        {
            if (maintenanceWindowOptionsName == null)
            {
                throw new ArgumentNullException(nameof(maintenanceWindowOptionsName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceWindowOptionsCollection.Get");
            scope.Start();
            try
            {
                var response = _maintenanceWindowOptionsRestClient.Get(Id.ResourceGroupName, Id.Parent.Name, Id.Name, maintenanceWindowOptionsName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new MaintenanceWindowOptions(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/maintenanceWindowOptions/current
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
        /// OperationId: MaintenanceWindowOptions_Get
        /// <summary> Gets a list of available maintenance windows. </summary>
        /// <param name="maintenanceWindowOptionsName"> Maintenance window options name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceWindowOptionsName"/> is null. </exception>
        public async virtual Task<Response<MaintenanceWindowOptions>> GetAsync(string maintenanceWindowOptionsName, CancellationToken cancellationToken = default)
        {
            if (maintenanceWindowOptionsName == null)
            {
                throw new ArgumentNullException(nameof(maintenanceWindowOptionsName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceWindowOptionsCollection.Get");
            scope.Start();
            try
            {
                var response = await _maintenanceWindowOptionsRestClient.GetAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, maintenanceWindowOptionsName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new MaintenanceWindowOptions(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="maintenanceWindowOptionsName"> Maintenance window options name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceWindowOptionsName"/> is null. </exception>
        public virtual Response<MaintenanceWindowOptions> GetIfExists(string maintenanceWindowOptionsName, CancellationToken cancellationToken = default)
        {
            if (maintenanceWindowOptionsName == null)
            {
                throw new ArgumentNullException(nameof(maintenanceWindowOptionsName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceWindowOptionsCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _maintenanceWindowOptionsRestClient.Get(Id.ResourceGroupName, Id.Parent.Name, Id.Name, maintenanceWindowOptionsName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<MaintenanceWindowOptions>(null, response.GetRawResponse())
                    : Response.FromValue(new MaintenanceWindowOptions(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="maintenanceWindowOptionsName"> Maintenance window options name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceWindowOptionsName"/> is null. </exception>
        public async virtual Task<Response<MaintenanceWindowOptions>> GetIfExistsAsync(string maintenanceWindowOptionsName, CancellationToken cancellationToken = default)
        {
            if (maintenanceWindowOptionsName == null)
            {
                throw new ArgumentNullException(nameof(maintenanceWindowOptionsName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceWindowOptionsCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _maintenanceWindowOptionsRestClient.GetAsync(Id.ResourceGroupName, Id.Parent.Name, Id.Name, maintenanceWindowOptionsName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<MaintenanceWindowOptions>(null, response.GetRawResponse())
                    : Response.FromValue(new MaintenanceWindowOptions(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="maintenanceWindowOptionsName"> Maintenance window options name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceWindowOptionsName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string maintenanceWindowOptionsName, CancellationToken cancellationToken = default)
        {
            if (maintenanceWindowOptionsName == null)
            {
                throw new ArgumentNullException(nameof(maintenanceWindowOptionsName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceWindowOptionsCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(maintenanceWindowOptionsName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="maintenanceWindowOptionsName"> Maintenance window options name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="maintenanceWindowOptionsName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string maintenanceWindowOptionsName, CancellationToken cancellationToken = default)
        {
            if (maintenanceWindowOptionsName == null)
            {
                throw new ArgumentNullException(nameof(maintenanceWindowOptionsName));
            }

            using var scope = _clientDiagnostics.CreateScope("MaintenanceWindowOptionsCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(maintenanceWindowOptionsName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, MaintenanceWindowOptions, MaintenanceWindowOptionsData> Construct() { }
    }
}
