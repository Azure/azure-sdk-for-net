// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Sql.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary> The SyncMembers service client. </summary>
    public partial class SyncMembersOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SyncMembersRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of SyncMembersOperations for mocking. </summary>
        protected SyncMembersOperations()
        {
        }
        /// <summary> Initializes a new instance of SyncMembersOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The subscription ID that identifies an Azure subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal SyncMembersOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new SyncMembersRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets a sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SyncMember>> GetAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SyncMember> Get(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists sync members in the given sync group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, or <paramref name="syncGroupName"/> is null. </exception>
        public virtual AsyncPageable<SyncMember> ListBySyncGroupAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }

            async Task<Page<SyncMember>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListBySyncGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListBySyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SyncMember>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListBySyncGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListBySyncGroupNextPageAsync(nextLink, resourceGroupName, serverName, databaseName, syncGroupName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists sync members in the given sync group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, or <paramref name="syncGroupName"/> is null. </exception>
        public virtual Pageable<SyncMember> ListBySyncGroup(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }

            Page<SyncMember> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListBySyncGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListBySyncGroup(resourceGroupName, serverName, databaseName, syncGroupName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SyncMember> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListBySyncGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListBySyncGroupNextPage(nextLink, resourceGroupName, serverName, databaseName, syncGroupName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a sync member database schema. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, or <paramref name="syncMemberName"/> is null. </exception>
        public virtual AsyncPageable<SyncFullSchemaProperties> ListMemberSchemasAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }

            async Task<Page<SyncFullSchemaProperties>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListMemberSchemas");
                scope.Start();
                try
                {
                    var response = await RestClient.ListMemberSchemasAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SyncFullSchemaProperties>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListMemberSchemas");
                scope.Start();
                try
                {
                    var response = await RestClient.ListMemberSchemasNextPageAsync(nextLink, resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a sync member database schema. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, or <paramref name="syncMemberName"/> is null. </exception>
        public virtual Pageable<SyncFullSchemaProperties> ListMemberSchemas(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }

            Page<SyncFullSchemaProperties> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListMemberSchemas");
                scope.Start();
                try
                {
                    var response = RestClient.ListMemberSchemas(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SyncFullSchemaProperties> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.ListMemberSchemas");
                scope.Start();
                try
                {
                    var response = RestClient.ListMemberSchemasNextPage(nextLink, resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Creates or updates a sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="parameters"> The requested sync member resource state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, <paramref name="syncMemberName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<SyncMembersCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, SyncMember parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrUpdateAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, cancellationToken).ConfigureAwait(false);
                return new SyncMembersCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="parameters"> The requested sync member resource state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, <paramref name="syncMemberName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual SyncMembersCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, SyncMember parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, cancellationToken);
                return new SyncMembersCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, or <paramref name="syncMemberName"/> is null. </exception>
        public virtual async Task<SyncMembersDeleteOperation> StartDeleteAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken).ConfigureAwait(false);
                return new SyncMembersDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, or <paramref name="syncMemberName"/> is null. </exception>
        public virtual SyncMembersDeleteOperation StartDelete(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken);
                return new SyncMembersDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an existing sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="parameters"> The requested sync member resource state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, <paramref name="syncMemberName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<SyncMembersUpdateOperation> StartUpdateAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, SyncMember parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, cancellationToken).ConfigureAwait(false);
                return new SyncMembersUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an existing sync member. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="parameters"> The requested sync member resource state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, <paramref name="syncMemberName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual SyncMembersUpdateOperation StartUpdate(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, SyncMember parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Update(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters, cancellationToken);
                return new SyncMembersUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Refreshes a sync member database schema. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, or <paramref name="syncMemberName"/> is null. </exception>
        public virtual async Task<SyncMembersRefreshMemberSchemaOperation> StartRefreshMemberSchemaAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartRefreshMemberSchema");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.RefreshMemberSchemaAsync(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken).ConfigureAwait(false);
                return new SyncMembersRefreshMemberSchemaOperation(_clientDiagnostics, _pipeline, RestClient.CreateRefreshMemberSchemaRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Refreshes a sync member database schema. </summary>
        /// <param name="resourceGroupName"> The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="databaseName"> The name of the database on which the sync group is hosted. </param>
        /// <param name="syncGroupName"> The name of the sync group on which the sync member is hosted. </param>
        /// <param name="syncMemberName"> The name of the sync member. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="serverName"/>, <paramref name="databaseName"/>, <paramref name="syncGroupName"/>, or <paramref name="syncMemberName"/> is null. </exception>
        public virtual SyncMembersRefreshMemberSchemaOperation StartRefreshMemberSchema(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string syncMemberName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (serverName == null)
            {
                throw new ArgumentNullException(nameof(serverName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException(nameof(syncGroupName));
            }
            if (syncMemberName == null)
            {
                throw new ArgumentNullException(nameof(syncMemberName));
            }

            using var scope = _clientDiagnostics.CreateScope("SyncMembersOperations.StartRefreshMemberSchema");
            scope.Start();
            try
            {
                var originalResponse = RestClient.RefreshMemberSchema(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, cancellationToken);
                return new SyncMembersRefreshMemberSchemaOperation(_clientDiagnostics, _pipeline, RestClient.CreateRefreshMemberSchemaRequest(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
