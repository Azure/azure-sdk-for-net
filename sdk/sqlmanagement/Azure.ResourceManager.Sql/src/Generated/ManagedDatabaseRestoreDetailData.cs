// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Sql
{
    /// <summary>
    /// A class representing the ManagedDatabaseRestoreDetail data model.
    /// A managed database restore details.
    /// </summary>
    public partial class ManagedDatabaseRestoreDetailData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ManagedDatabaseRestoreDetailData"/>. </summary>
        public ManagedDatabaseRestoreDetailData()
        {
            UnrestorableFileList = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="ManagedDatabaseRestoreDetailData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> Restore status. </param>
        /// <param name="currentRestoringFileName"> Current restoring file name. </param>
        /// <param name="lastRestoredFileName"> Last restored file name. </param>
        /// <param name="lastRestoredFileOn"> Last restored file time. </param>
        /// <param name="completedPercent"> Percent completed. </param>
        /// <param name="unrestorableFileList"> List of unrestorable files. </param>
        /// <param name="numberOfFilesFound"> Number of files detected. </param>
        /// <param name="lastUploadedFileName"> Last uploaded file name. </param>
        /// <param name="lastUploadedFileOn"> Last uploaded file time. </param>
        /// <param name="blockReason"> The reason why restore is in Blocked state. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ManagedDatabaseRestoreDetailData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string status, string currentRestoringFileName, string lastRestoredFileName, DateTimeOffset? lastRestoredFileOn, double? completedPercent, IReadOnlyList<string> unrestorableFileList, long? numberOfFilesFound, string lastUploadedFileName, DateTimeOffset? lastUploadedFileOn, string blockReason, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Status = status;
            CurrentRestoringFileName = currentRestoringFileName;
            LastRestoredFileName = lastRestoredFileName;
            LastRestoredFileOn = lastRestoredFileOn;
            CompletedPercent = completedPercent;
            UnrestorableFileList = unrestorableFileList;
            NumberOfFilesFound = numberOfFilesFound;
            LastUploadedFileName = lastUploadedFileName;
            LastUploadedFileOn = lastUploadedFileOn;
            BlockReason = blockReason;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Restore status. </summary>
        [WirePath("properties.status")]
        public string Status { get; }
        /// <summary> Current restoring file name. </summary>
        [WirePath("properties.currentRestoringFileName")]
        public string CurrentRestoringFileName { get; }
        /// <summary> Last restored file name. </summary>
        [WirePath("properties.lastRestoredFileName")]
        public string LastRestoredFileName { get; }
        /// <summary> Last restored file time. </summary>
        [WirePath("properties.lastRestoredFileTime")]
        public DateTimeOffset? LastRestoredFileOn { get; }
        /// <summary> Percent completed. </summary>
        [WirePath("properties.percentCompleted")]
        public double? CompletedPercent { get; }
        /// <summary> List of unrestorable files. </summary>
        [WirePath("properties.unrestorableFiles")]
        public IReadOnlyList<string> UnrestorableFileList { get; }
        /// <summary> Number of files detected. </summary>
        [WirePath("properties.numberOfFilesDetected")]
        public long? NumberOfFilesFound { get; }
        /// <summary> Last uploaded file name. </summary>
        [WirePath("properties.lastUploadedFileName")]
        public string LastUploadedFileName { get; }
        /// <summary> Last uploaded file time. </summary>
        [WirePath("properties.lastUploadedFileTime")]
        public DateTimeOffset? LastUploadedFileOn { get; }
        /// <summary> The reason why restore is in Blocked state. </summary>
        [WirePath("properties.blockReason")]
        public string BlockReason { get; }
    }
}
