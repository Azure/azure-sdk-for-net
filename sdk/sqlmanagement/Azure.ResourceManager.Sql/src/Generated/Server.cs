// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;
using SqlManagementClient.Models;

namespace SqlManagementClient
{
    /// <summary> A Class representing a Server along with the instance operations that can be performed on it. </summary>
    public partial class Server : ArmResource
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ServersRestOperations _serversRestClient;
        private readonly DatabasesRestOperations _databasesRestClient;
        private readonly ReplicationLinksRestOperations _replicationLinksRestClient;
        private readonly ServerUsagesRestOperations _serverUsagesRestClient;
        private readonly ServerRestOperations _serverOperationsRestClient;
        private readonly TdeCertificatesRestOperations _tdeCertificatesRestClient;
        private readonly ServerData _data;

        /// <summary> Initializes a new instance of the <see cref="Server"/> class for mocking. </summary>
        protected Server()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "Server"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal Server(ArmResource options, ServerData resource) : base(options, resource.Id)
        {
            HasData = true;
            _data = resource;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _serversRestClient = new ServersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _databasesRestClient = new DatabasesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _replicationLinksRestClient = new ReplicationLinksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _serverUsagesRestClient = new ServerUsagesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _serverOperationsRestClient = new ServerRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _tdeCertificatesRestClient = new TdeCertificatesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="Server"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Server(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _serversRestClient = new ServersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _databasesRestClient = new DatabasesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _replicationLinksRestClient = new ReplicationLinksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _serverUsagesRestClient = new ServerUsagesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _serverOperationsRestClient = new ServerRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _tdeCertificatesRestClient = new TdeCertificatesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="Server"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal Server(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _serversRestClient = new ServersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _databasesRestClient = new DatabasesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _replicationLinksRestClient = new ReplicationLinksRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _serverUsagesRestClient = new ServerUsagesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _serverOperationsRestClient = new ServerRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
            _tdeCertificatesRestClient = new TdeCertificatesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Sql/servers";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ServerData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_Get
        /// <summary> Gets a server. </summary>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Server>> GetAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Server.Get");
            scope.Start();
            try
            {
                var response = await _serversRestClient.GetAsync(Id.ResourceGroupName, Id.Name, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Server(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_Get
        /// <summary> Gets a server. </summary>
        /// <param name="expand"> The child resources to include in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Server> Get(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Server.Get");
            scope.Start();
            try
            {
                var response = _serversRestClient.Get(Id.ResourceGroupName, Id.Name, expand, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Server(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_Delete
        /// <summary> Deletes a server. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ServerDeleteOperation> DeleteAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Server.Delete");
            scope.Start();
            try
            {
                var response = await _serversRestClient.DeleteAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new ServerDeleteOperation(_clientDiagnostics, Pipeline, _serversRestClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_Delete
        /// <summary> Deletes a server. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ServerDeleteOperation Delete(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("Server.Delete");
            scope.Start();
            try
            {
                var response = _serversRestClient.Delete(Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new ServerDeleteOperation(_clientDiagnostics, Pipeline, _serversRestClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a tag to the current resource. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag added. </returns>
        public async virtual Task<Response<Server>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException($"{nameof(key)} provided cannot be null or a whitespace.", nameof(key));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.AddTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue[key] = value;
                await TagResource.CreateOrUpdateAsync(originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _serversRestClient.GetAsync(Id.ResourceGroupName, Id.Name, null, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Server(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a tag to the current resource. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag added. </returns>
        public virtual Response<Server> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException($"{nameof(key)} provided cannot be null or a whitespace.", nameof(key));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.AddTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue[key] = value;
                TagResource.CreateOrUpdate(originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _serversRestClient.Get(Id.ResourceGroupName, Id.Name, null, cancellationToken);
                return Response.FromValue(new Server(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace the tags on the resource with the given set. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tags replaced. </returns>
        public async virtual Task<Response<Server>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException($"{nameof(tags)} provided cannot be null.", nameof(tags));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.SetTags");
            scope.Start();
            try
            {
                await TagResource.DeleteAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue.ReplaceWith(tags);
                await TagResource.CreateOrUpdateAsync(originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _serversRestClient.GetAsync(Id.ResourceGroupName, Id.Name, null, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Server(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Replace the tags on the resource with the given set. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tags replaced. </returns>
        public virtual Response<Server> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            if (tags == null)
            {
                throw new ArgumentNullException($"{nameof(tags)} provided cannot be null.", nameof(tags));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.SetTags");
            scope.Start();
            try
            {
                TagResource.Delete(cancellationToken: cancellationToken);
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue.ReplaceWith(tags);
                TagResource.CreateOrUpdate(originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _serversRestClient.Get(Id.ResourceGroupName, Id.Name, null, cancellationToken);
                return Response.FromValue(new Server(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes a tag by key from the resource. </summary>
        /// <param name="key"> The key of the tag to remove. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag removed. </returns>
        public async virtual Task<Response<Server>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException($"{nameof(key)} provided cannot be null or a whitespace.", nameof(key));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await TagResource.GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.Properties.TagsValue.Remove(key);
                await TagResource.CreateOrUpdateAsync(originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _serversRestClient.GetAsync(Id.ResourceGroupName, Id.Name, null, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Server(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes a tag by key from the resource. </summary>
        /// <param name="key"> The key of the tag to remove. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> The updated resource with the tag removed. </returns>
        public virtual Response<Server> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(key))
            {
                throw new ArgumentNullException($"{nameof(key)} provided cannot be null or a whitespace.", nameof(key));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = TagResource.Get(cancellationToken);
                originalTags.Value.Data.Properties.TagsValue.Remove(key);
                TagResource.CreateOrUpdate(originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _serversRestClient.Get(Id.ResourceGroupName, Id.Name, null, cancellationToken);
                return Response.FromValue(new Server(this, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_Update
        /// <summary> Updates a server. </summary>
        /// <param name="parameters"> The requested server resource state. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ServerUpdateOperation> UpdateAsync(ServerUpdate parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.Update");
            scope.Start();
            try
            {
                var response = await _serversRestClient.UpdateAsync(Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ServerUpdateOperation(this, _clientDiagnostics, Pipeline, _serversRestClient.CreateUpdateRequest(Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_Update
        /// <summary> Updates a server. </summary>
        /// <param name="parameters"> The requested server resource state. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual ServerUpdateOperation Update(ServerUpdate parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.Update");
            scope.Start();
            try
            {
                var response = _serversRestClient.Update(Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                var operation = new ServerUpdateOperation(this, _clientDiagnostics, Pipeline, _serversRestClient.CreateUpdateRequest(Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/inaccessibleDatabases
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Databases_ListInaccessibleByServer
        /// <summary> Gets a list of inaccessible databases in a logical server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DatabaseData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DatabaseData> GetInaccessibleByServerDatabasesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DatabaseData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetInaccessibleByServerDatabases");
                scope.Start();
                try
                {
                    var response = await _databasesRestClient.ListInaccessibleByServerAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DatabaseData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetInaccessibleByServerDatabases");
                scope.Start();
                try
                {
                    var response = await _databasesRestClient.ListInaccessibleByServerNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/inaccessibleDatabases
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Databases_ListInaccessibleByServer
        /// <summary> Gets a list of inaccessible databases in a logical server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DatabaseData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DatabaseData> GetInaccessibleByServerDatabases(CancellationToken cancellationToken = default)
        {
            Page<DatabaseData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetInaccessibleByServerDatabases");
                scope.Start();
                try
                {
                    var response = _databasesRestClient.ListInaccessibleByServer(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DatabaseData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetInaccessibleByServerDatabases");
                scope.Start();
                try
                {
                    var response = _databasesRestClient.ListInaccessibleByServerNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/replicationLinks
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: ReplicationLinks_ListByServer
        /// <summary> Gets a list of replication links. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReplicationLinkData" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReplicationLinkData> GetByServerReplicationLinksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ReplicationLinkData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerReplicationLinks");
                scope.Start();
                try
                {
                    var response = await _replicationLinksRestClient.ListByServerAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ReplicationLinkData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerReplicationLinks");
                scope.Start();
                try
                {
                    var response = await _replicationLinksRestClient.ListByServerNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/replicationLinks
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: ReplicationLinks_ListByServer
        /// <summary> Gets a list of replication links. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReplicationLinkData" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReplicationLinkData> GetByServerReplicationLinks(CancellationToken cancellationToken = default)
        {
            Page<ReplicationLinkData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerReplicationLinks");
                scope.Start();
                try
                {
                    var response = _replicationLinksRestClient.ListByServer(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ReplicationLinkData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerReplicationLinks");
                scope.Start();
                try
                {
                    var response = _replicationLinksRestClient.ListByServerNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/usages
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: ServerUsages_ListByServer
        /// <summary> Returns server usages. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerUsage> GetByServerServerUsagesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ServerUsage>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerServerUsages");
                scope.Start();
                try
                {
                    var response = await _serverUsagesRestClient.ListByServerAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/usages
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: ServerUsages_ListByServer
        /// <summary> Returns server usages. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerUsage> GetByServerServerUsages(CancellationToken cancellationToken = default)
        {
            Page<ServerUsage> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerServerUsages");
                scope.Start();
                try
                {
                    var response = _serverUsagesRestClient.ListByServer(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/operations
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: ServerOperations_ListByServer
        /// <summary> Gets a list of operations performed on the server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerOperation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerOperation> GetByServerServerOperationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ServerOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerServerOperations");
                scope.Start();
                try
                {
                    var response = await _serverOperationsRestClient.ListByServerAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServerOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerServerOperations");
                scope.Start();
                try
                {
                    var response = await _serverOperationsRestClient.ListByServerNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/operations
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: ServerOperations_ListByServer
        /// <summary> Gets a list of operations performed on the server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerOperation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerOperation> GetByServerServerOperations(CancellationToken cancellationToken = default)
        {
            Page<ServerOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerServerOperations");
                scope.Start();
                try
                {
                    var response = _serverOperationsRestClient.ListByServer(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServerOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("Server.GetByServerServerOperations");
                scope.Start();
                try
                {
                    var response = _serverOperationsRestClient.ListByServerNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/tdeCertificates
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: TdeCertificates_Create
        /// <summary> Creates a TDE certificate for a given server. </summary>
        /// <param name="parameters"> The requested TDE certificate to be created or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public async virtual Task<TdeCertificateCreateOperation> CreateTdeCertificateAsync(TdeCertificate parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.CreateTdeCertificate");
            scope.Start();
            try
            {
                var response = await _tdeCertificatesRestClient.CreateAsync(Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new TdeCertificateCreateOperation(_clientDiagnostics, Pipeline, _tdeCertificatesRestClient.CreateCreateRequest(Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/tdeCertificates
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: TdeCertificates_Create
        /// <summary> Creates a TDE certificate for a given server. </summary>
        /// <param name="parameters"> The requested TDE certificate to be created or updated. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual TdeCertificateCreateOperation CreateTdeCertificate(TdeCertificate parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.CreateTdeCertificate");
            scope.Start();
            try
            {
                var response = _tdeCertificatesRestClient.Create(Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                var operation = new TdeCertificateCreateOperation(_clientDiagnostics, Pipeline, _tdeCertificatesRestClient.CreateCreateRequest(Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_ImportDatabase
        /// <summary> Imports a bacpac into a new database. </summary>
        /// <param name="parameters"> The database import request parameters. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ServerImportDatabaseOperation> ImportDatabaseAsync(ImportNewDatabaseDefinition parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.ImportDatabase");
            scope.Start();
            try
            {
                var response = await _serversRestClient.ImportDatabaseAsync(Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new ServerImportDatabaseOperation(_clientDiagnostics, Pipeline, _serversRestClient.CreateImportDatabaseRequest(Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import
        /// ContextualPath: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}
        /// OperationId: Servers_ImportDatabase
        /// <summary> Imports a bacpac into a new database. </summary>
        /// <param name="parameters"> The database import request parameters. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual ServerImportDatabaseOperation ImportDatabase(ImportNewDatabaseDefinition parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("Server.ImportDatabase");
            scope.Start();
            try
            {
                var response = _serversRestClient.ImportDatabase(Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                var operation = new ServerImportDatabaseOperation(_clientDiagnostics, Pipeline, _serversRestClient.CreateImportDatabaseRequest(Id.ResourceGroupName, Id.Name, parameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region RecoverableDatabase

        /// <summary> Gets a collection of RecoverableDatabases in the Server. </summary>
        /// <returns> An object representing collection of RecoverableDatabases and their operations over a Server. </returns>
        public RecoverableDatabaseCollection GetRecoverableDatabases()
        {
            return new RecoverableDatabaseCollection(this);
        }
        #endregion

        #region ServerConnectionPolicy

        /// <summary> Gets a collection of ServerConnectionPolicies in the Server. </summary>
        /// <returns> An object representing collection of ServerConnectionPolicies and their operations over a Server. </returns>
        public ServerConnectionPolicyCollection GetServerConnectionPolicies()
        {
            return new ServerConnectionPolicyCollection(this);
        }
        #endregion

        #region Database

        /// <summary> Gets a collection of Databases in the Server. </summary>
        /// <returns> An object representing collection of Databases and their operations over a Server. </returns>
        public DatabaseCollection GetDatabases()
        {
            return new DatabaseCollection(this);
        }
        #endregion

        #region ElasticPool

        /// <summary> Gets a collection of ElasticPools in the Server. </summary>
        /// <returns> An object representing collection of ElasticPools and their operations over a Server. </returns>
        public ElasticPoolCollection GetElasticPools()
        {
            return new ElasticPoolCollection(this);
        }
        #endregion

        #region ServerCommunicationLink

        /// <summary> Gets a collection of ServerCommunicationLinks in the Server. </summary>
        /// <returns> An object representing collection of ServerCommunicationLinks and their operations over a Server. </returns>
        public ServerCommunicationLinkCollection GetServerCommunicationLinks()
        {
            return new ServerCommunicationLinkCollection(this);
        }
        #endregion

        #region ServiceObjective

        /// <summary> Gets a collection of ServiceObjectives in the Server. </summary>
        /// <returns> An object representing collection of ServiceObjectives and their operations over a Server. </returns>
        public ServiceObjectiveCollection GetServiceObjectives()
        {
            return new ServiceObjectiveCollection(this);
        }
        #endregion

        #region ExtendedServerBlobAuditingPolicy

        /// <summary> Gets a collection of ExtendedServerBlobAuditingPolicies in the Server. </summary>
        /// <returns> An object representing collection of ExtendedServerBlobAuditingPolicies and their operations over a Server. </returns>
        public ExtendedServerBlobAuditingPolicyCollection GetExtendedServerBlobAuditingPolicies()
        {
            return new ExtendedServerBlobAuditingPolicyCollection(this);
        }
        #endregion

        #region ServerBlobAuditingPolicy

        /// <summary> Gets a collection of ServerBlobAuditingPolicies in the Server. </summary>
        /// <returns> An object representing collection of ServerBlobAuditingPolicies and their operations over a Server. </returns>
        public ServerBlobAuditingPolicyCollection GetServerBlobAuditingPolicies()
        {
            return new ServerBlobAuditingPolicyCollection(this);
        }
        #endregion

        #region ServerAdvisor

        /// <summary> Gets a collection of ServerAdvisors in the Server. </summary>
        /// <returns> An object representing collection of ServerAdvisors and their operations over a Server. </returns>
        public ServerAdvisorCollection GetServerAdvisors()
        {
            return new ServerAdvisorCollection(this);
        }
        #endregion

        #region EncryptionProtector

        /// <summary> Gets a collection of EncryptionProtectors in the Server. </summary>
        /// <returns> An object representing collection of EncryptionProtectors and their operations over a Server. </returns>
        public EncryptionProtectorCollection GetEncryptionProtectors()
        {
            return new EncryptionProtectorCollection(this);
        }
        #endregion

        #region FailoverGroup

        /// <summary> Gets a collection of FailoverGroups in the Server. </summary>
        /// <returns> An object representing collection of FailoverGroups and their operations over a Server. </returns>
        public FailoverGroupCollection GetFailoverGroups()
        {
            return new FailoverGroupCollection(this);
        }
        #endregion

        #region FirewallRule

        /// <summary> Gets a collection of FirewallRules in the Server. </summary>
        /// <returns> An object representing collection of FirewallRules and their operations over a Server. </returns>
        public FirewallRuleCollection GetFirewallRules()
        {
            return new FirewallRuleCollection(this);
        }
        #endregion

        #region JobAgent

        /// <summary> Gets a collection of JobAgents in the Server. </summary>
        /// <returns> An object representing collection of JobAgents and their operations over a Server. </returns>
        public JobAgentCollection GetJobAgents()
        {
            return new JobAgentCollection(this);
        }
        #endregion

        #region PrivateEndpointConnection

        /// <summary> Gets a collection of PrivateEndpointConnections in the Server. </summary>
        /// <returns> An object representing collection of PrivateEndpointConnections and their operations over a Server. </returns>
        public PrivateEndpointConnectionCollection GetPrivateEndpointConnections()
        {
            return new PrivateEndpointConnectionCollection(this);
        }
        #endregion

        #region PrivateLinkResource

        /// <summary> Gets a collection of PrivateLinkResources in the Server. </summary>
        /// <returns> An object representing collection of PrivateLinkResources and their operations over a Server. </returns>
        public PrivateLinkResourceCollection GetPrivateLinkResources()
        {
            return new PrivateLinkResourceCollection(this);
        }
        #endregion

        #region ServerAutomaticTuning

        /// <summary> Gets an object representing a ServerAutomaticTuning along with the instance operations that can be performed on it in the Server. </summary>
        /// <returns> Returns a <see cref="ServerAutomaticTuning" /> object. </returns>
        public ServerAutomaticTuning GetServerAutomaticTuning()
        {
            return new ServerAutomaticTuning(this, Id + "/automaticTuning/current");
        }
        #endregion

        #region ServerAzureADAdministrator

        /// <summary> Gets a collection of ServerAzureADAdministrators in the Server. </summary>
        /// <returns> An object representing collection of ServerAzureADAdministrators and their operations over a Server. </returns>
        public ServerAzureADAdministratorCollection GetServerAzureADAdministrators()
        {
            return new ServerAzureADAdministratorCollection(this);
        }
        #endregion

        #region ServerAzureADOnlyAuthentication

        /// <summary> Gets a collection of ServerAzureADOnlyAuthentications in the Server. </summary>
        /// <returns> An object representing collection of ServerAzureADOnlyAuthentications and their operations over a Server. </returns>
        public ServerAzureADOnlyAuthenticationCollection GetServerAzureADOnlyAuthentications()
        {
            return new ServerAzureADOnlyAuthenticationCollection(this);
        }
        #endregion

        #region ServerDevOpsAuditingSettings

        /// <summary> Gets a collection of ServerDevOpsAuditingSettings in the Server. </summary>
        /// <returns> An object representing collection of ServerDevOpsAuditingSettings and their operations over a Server. </returns>
        public ServerDevOpsAuditingSettingsCollection GetServerDevOpsAuditingSettings()
        {
            return new ServerDevOpsAuditingSettingsCollection(this);
        }
        #endregion

        #region ServerDnsAlias

        /// <summary> Gets a collection of ServerDnsAliases in the Server. </summary>
        /// <returns> An object representing collection of ServerDnsAliases and their operations over a Server. </returns>
        public ServerDnsAliasCollection GetServerDnsAliases()
        {
            return new ServerDnsAliasCollection(this);
        }
        #endregion

        #region ServerKey

        /// <summary> Gets a collection of ServerKeys in the Server. </summary>
        /// <returns> An object representing collection of ServerKeys and their operations over a Server. </returns>
        public ServerKeyCollection GetServerKeys()
        {
            return new ServerKeyCollection(this);
        }
        #endregion

        #region ServerSecurityAlertPolicy

        /// <summary> Gets a collection of ServerSecurityAlertPolicies in the Server. </summary>
        /// <returns> An object representing collection of ServerSecurityAlertPolicies and their operations over a Server. </returns>
        public ServerSecurityAlertPolicyCollection GetServerSecurityAlertPolicies()
        {
            return new ServerSecurityAlertPolicyCollection(this);
        }
        #endregion

        #region ServerVulnerabilityAssessment

        /// <summary> Gets a collection of ServerVulnerabilityAssessments in the Server. </summary>
        /// <returns> An object representing collection of ServerVulnerabilityAssessments and their operations over a Server. </returns>
        public ServerVulnerabilityAssessmentCollection GetServerVulnerabilityAssessments()
        {
            return new ServerVulnerabilityAssessmentCollection(this);
        }
        #endregion

        #region SyncAgent

        /// <summary> Gets a collection of SyncAgents in the Server. </summary>
        /// <returns> An object representing collection of SyncAgents and their operations over a Server. </returns>
        public SyncAgentCollection GetSyncAgents()
        {
            return new SyncAgentCollection(this);
        }
        #endregion

        #region VirtualNetworkRule

        /// <summary> Gets a collection of VirtualNetworkRules in the Server. </summary>
        /// <returns> An object representing collection of VirtualNetworkRules and their operations over a Server. </returns>
        public VirtualNetworkRuleCollection GetVirtualNetworkRules()
        {
            return new VirtualNetworkRuleCollection(this);
        }
        #endregion

        #region OutboundFirewallRule

        /// <summary> Gets a collection of OutboundFirewallRules in the Server. </summary>
        /// <returns> An object representing collection of OutboundFirewallRules and their operations over a Server. </returns>
        public OutboundFirewallRuleCollection GetOutboundFirewallRules()
        {
            return new OutboundFirewallRuleCollection(this);
        }
        #endregion

        #region RestorableDroppedDatabase

        /// <summary> Gets a collection of RestorableDroppedDatabases in the Server. </summary>
        /// <returns> An object representing collection of RestorableDroppedDatabases and their operations over a Server. </returns>
        public RestorableDroppedDatabaseCollection GetRestorableDroppedDatabases()
        {
            return new RestorableDroppedDatabaseCollection(this);
        }
        #endregion
    }
}
