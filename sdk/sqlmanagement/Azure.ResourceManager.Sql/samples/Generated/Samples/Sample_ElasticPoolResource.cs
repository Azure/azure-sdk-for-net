// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Sql.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Sql.Samples
{
    public partial class Sample_ElasticPoolResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAHyperscaleElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/HyperscaleElasticPoolGet.json
            // this example is just showing the usage of "ElasticPools_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolResource result = await elasticPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAnElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolGet.json
            // this example is just showing the usage of "ElasticPools_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolResource result = await elasticPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAnElasticPoolWithAvailabilityZone()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/GetElasticPoolWithAvailabilityZone.json
            // this example is just showing the usage of "ElasticPools_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolResource result = await elasticPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAnElasticPoolWithPreferredEnclaveTypeParameter()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolGetWithPreferredEnclaveType.json
            // this example is just showing the usage of "ElasticPools_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolResource result = await elasticPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetAnElasticPoolWithServerlessProperties()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/GetElasticPoolWithServerlessProperties.json
            // this example is just showing the usage of "ElasticPools_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolResource result = await elasticPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteAnElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolDelete.json
            // this example is just showing the usage of "ElasticPools_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-3129";
            string serverName = "sqlcrudtest-228";
            string elasticPoolName = "sqlcrudtest-3851";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            await elasticPool.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_AssignsMaintenanceConfigurationToAnElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateAssignMaintenanceConfiguration.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                MaintenanceConfigurationId = new ResourceIdentifier("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1"),
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_ResetsMaintenanceConfigurationOfAnElasticPoolToDefault()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateResetMaintenanceConfiguration.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                MaintenanceConfigurationId = new ResourceIdentifier("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default"),
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAnElasticPoolWithAllParameter()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateMax.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                Sku = new SqlSku("BC_Gen4")
                {
                    Tier = "BusinessCritical",
                    Capacity = 2,
                },
                PerDatabaseSettings = new ElasticPoolPerDatabaseSettings
                {
                    MinCapacity = 0.25,
                    MaxCapacity = 1,
                },
                IsZoneRedundant = true,
                LicenseType = ElasticPoolLicenseType.LicenseIncluded,
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAnElasticPoolWithMinimumParameters()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateMin.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch();
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAnElasticPoolWithPreferredEnclaveTypeParameterAsDefault()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateWithDefaultPreferredEnclaveType.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                Sku = new SqlSku("GP_Gen5_4"),
                PreferredEnclaveType = SqlAlwaysEncryptedEnclaveType.Default,
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAnElasticPoolWithPreferredEnclaveTypeParameterAsVBS()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateWithVBSPreferredEnclaveType.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                Sku = new SqlSku("GP_Gen5_4"),
                PreferredEnclaveType = SqlAlwaysEncryptedEnclaveType.Vbs,
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateAnElasticPoolWithServerlessProperties()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ElasticPoolUpdateServerlessProperties.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                Sku = new SqlSku("GP_S_Gen5_2")
                {
                    Tier = "GeneralPurpose",
                    Capacity = 2,
                },
                MinCapacity = 0.5,
                PerDatabaseSettings = new ElasticPoolPerDatabaseSettings
                {
                    MinCapacity = 0,
                    MaxCapacity = 2,
                    AutoPauseDelay = 80,
                },
                AutoPauseDelay = 60,
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateHighAvailabilityReplicaCountOfAHyperscaleElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/HyperscaleElasticPoolUpdateSetHighAvailabilityReplicaCount.json
            // this example is just showing the usage of "ElasticPools_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-2369";
            string serverName = "sqlcrudtest-8069";
            string elasticPoolName = "sqlcrudtest-8102";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            ElasticPoolPatch patch = new ElasticPoolPatch
            {
                HighAvailabilityReplicaCount = 2,
            };
            ArmOperation<ElasticPoolResource> lro = await elasticPool.UpdateAsync(WaitUntil.Completed, patch);
            ElasticPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ElasticPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetDatabases_GetsAListOfDatabasesInAnElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ListDatabasesByElasticPool.json
            // this example is just showing the usage of "Databases_ListByElasticPool" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "Default-SQL-SouthEastAsia";
            string serverName = "testsvr";
            string elasticPoolName = "pool1";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation and iterate over the result
            await foreach (SqlDatabaseResource item in elasticPool.GetDatabasesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SqlDatabaseData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetElasticPoolOperations_ListTheElasticPoolManagementOperations()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/ListElasticPoolOperations.json
            // this example is just showing the usage of "ElasticPoolOperations_ListByElasticPool" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtestgroup";
            string serverName = "sqlcrudtestserver";
            string elasticPoolName = "testpool";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation and iterate over the result
            await foreach (ElasticPoolOperationData item in elasticPool.GetElasticPoolOperationsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CancelElasticPoolOperation_CancelTheElasticPoolManagementOperation()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/CancelElasticPoolOperation.json
            // this example is just showing the usage of "ElasticPoolOperations_Cancel" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-7398";
            string serverName = "sqlcrudtest-6661";
            string elasticPoolName = "testpool";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            Guid operationId = Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");
            await elasticPool.CancelElasticPoolOperationAsync(operationId);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Failover_FailoverAnElasticPool()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/FailoverElasticPool.json
            // this example is just showing the usage of "ElasticPools_Failover" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ElasticPoolResource created on azure
            // for more information of creating ElasticPoolResource, please refer to the document of ElasticPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "group1";
            string serverName = "testServer";
            string elasticPoolName = "testElasticPool";
            ResourceIdentifier elasticPoolResourceId = ElasticPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, serverName, elasticPoolName);
            ElasticPoolResource elasticPool = client.GetElasticPoolResource(elasticPoolResourceId);

            // invoke the operation
            await elasticPool.FailoverAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }
    }
}
