// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Sql;

namespace Azure.ResourceManager.Sql.Samples
{
    public partial class Sample_ResourceGroupLongTermRetentionManagedInstanceBackupResource
    {
        // Get the long term retention backup.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetTheLongTermRetentionBackup()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupGet.json
            // this example is just showing the usage of "LongTermRetentionManagedInstanceBackups_GetByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupLongTermRetentionManagedInstanceBackupResource created on azure
            // for more information of creating ResourceGroupLongTermRetentionManagedInstanceBackupResource, please refer to the document of ResourceGroupLongTermRetentionManagedInstanceBackupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testResourceGroup";
            AzureLocation locationName = new AzureLocation("japaneast");
            string managedInstanceName = "testInstance";
            string databaseName = "testDatabase";
            string backupName = "55555555-6666-7777-8888-999999999999;131637960820000000";
            ResourceIdentifier resourceGroupLongTermRetentionManagedInstanceBackupResourceId = ResourceGroupLongTermRetentionManagedInstanceBackupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, locationName, managedInstanceName, databaseName, backupName);
            ResourceGroupLongTermRetentionManagedInstanceBackupResource resourceGroupLongTermRetentionManagedInstanceBackup = client.GetResourceGroupLongTermRetentionManagedInstanceBackupResource(resourceGroupLongTermRetentionManagedInstanceBackupResourceId);

            // invoke the operation
            ResourceGroupLongTermRetentionManagedInstanceBackupResource result = await resourceGroupLongTermRetentionManagedInstanceBackup.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ManagedInstanceLongTermRetentionBackupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete the long term retention backup.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteTheLongTermRetentionBackup()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/preview/2021-05-01-preview/examples/ResourceGroupBasedManagedInstanceLongTermRetentionBackupDelete.json
            // this example is just showing the usage of "LongTermRetentionManagedInstanceBackups_DeleteByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupLongTermRetentionManagedInstanceBackupResource created on azure
            // for more information of creating ResourceGroupLongTermRetentionManagedInstanceBackupResource, please refer to the document of ResourceGroupLongTermRetentionManagedInstanceBackupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testResourceGroup";
            AzureLocation locationName = new AzureLocation("japaneast");
            string managedInstanceName = "testInstance";
            string databaseName = "testDatabase";
            string backupName = "55555555-6666-7777-8888-999999999999;131637960820000000";
            ResourceIdentifier resourceGroupLongTermRetentionManagedInstanceBackupResourceId = ResourceGroupLongTermRetentionManagedInstanceBackupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, locationName, managedInstanceName, databaseName, backupName);
            ResourceGroupLongTermRetentionManagedInstanceBackupResource resourceGroupLongTermRetentionManagedInstanceBackup = client.GetResourceGroupLongTermRetentionManagedInstanceBackupResource(resourceGroupLongTermRetentionManagedInstanceBackupResourceId);

            // invoke the operation
            await resourceGroupLongTermRetentionManagedInstanceBackup.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
