// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Sql.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Sql.Samples
{
    public partial class Sample_SqlDistributedAvailabilityGroupResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsTheDistributedAvailabilityGroupInfo()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/DistributedAvailabilityGroupsGet.json
            // this example is just showing the usage of "DistributedAvailabilityGroups_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlDistributedAvailabilityGroupResource created on azure
            // for more information of creating SqlDistributedAvailabilityGroupResource, please refer to the document of SqlDistributedAvailabilityGroupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string managedInstanceName = "testcl";
            string distributedAvailabilityGroupName = "dag";
            ResourceIdentifier sqlDistributedAvailabilityGroupResourceId = SqlDistributedAvailabilityGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
            SqlDistributedAvailabilityGroupResource sqlDistributedAvailabilityGroup = client.GetSqlDistributedAvailabilityGroupResource(sqlDistributedAvailabilityGroupResourceId);

            // invoke the operation
            SqlDistributedAvailabilityGroupResource result = await sqlDistributedAvailabilityGroup.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlDistributedAvailabilityGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_InitiateADistributedAvailabilityGroupDrop()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/DistributedAvailabilityGroupsDelete.json
            // this example is just showing the usage of "DistributedAvailabilityGroups_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlDistributedAvailabilityGroupResource created on azure
            // for more information of creating SqlDistributedAvailabilityGroupResource, please refer to the document of SqlDistributedAvailabilityGroupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string managedInstanceName = "testcl";
            string distributedAvailabilityGroupName = "dag";
            ResourceIdentifier sqlDistributedAvailabilityGroupResourceId = SqlDistributedAvailabilityGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
            SqlDistributedAvailabilityGroupResource sqlDistributedAvailabilityGroup = client.GetSqlDistributedAvailabilityGroupResource(sqlDistributedAvailabilityGroupResourceId);

            // invoke the operation
            await sqlDistributedAvailabilityGroup.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateTheDistributedAvailabilityGroupReplicationModeBeforeDeletingIt()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/DistributedAvailabilityGroupsUpdate.json
            // this example is just showing the usage of "DistributedAvailabilityGroups_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlDistributedAvailabilityGroupResource created on azure
            // for more information of creating SqlDistributedAvailabilityGroupResource, please refer to the document of SqlDistributedAvailabilityGroupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string managedInstanceName = "testcl";
            string distributedAvailabilityGroupName = "dag";
            ResourceIdentifier sqlDistributedAvailabilityGroupResourceId = SqlDistributedAvailabilityGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
            SqlDistributedAvailabilityGroupResource sqlDistributedAvailabilityGroup = client.GetSqlDistributedAvailabilityGroupResource(sqlDistributedAvailabilityGroupResourceId);

            // invoke the operation
            SqlDistributedAvailabilityGroupData data = new SqlDistributedAvailabilityGroupData
            {
                ReplicationMode = SqlReplicationModeType.Sync,
            };
            ArmOperation<SqlDistributedAvailabilityGroupResource> lro = await sqlDistributedAvailabilityGroup.UpdateAsync(WaitUntil.Completed, data);
            SqlDistributedAvailabilityGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlDistributedAvailabilityGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Failover_FailoverADistributedAvailabilityGroup()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/DistributedAvailabilityGroupsFailover.json
            // this example is just showing the usage of "DistributedAvailabilityGroups_Failover" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlDistributedAvailabilityGroupResource created on azure
            // for more information of creating SqlDistributedAvailabilityGroupResource, please refer to the document of SqlDistributedAvailabilityGroupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string managedInstanceName = "testcl";
            string distributedAvailabilityGroupName = "dag";
            ResourceIdentifier sqlDistributedAvailabilityGroupResourceId = SqlDistributedAvailabilityGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
            SqlDistributedAvailabilityGroupResource sqlDistributedAvailabilityGroup = client.GetSqlDistributedAvailabilityGroupResource(sqlDistributedAvailabilityGroupResourceId);

            // invoke the operation
            DistributedAvailabilityGroupsFailoverContent content = new DistributedAvailabilityGroupsFailoverContent(SqlServerFailoverType.ForcedAllowDataLoss);
            ArmOperation<SqlDistributedAvailabilityGroupResource> lro = await sqlDistributedAvailabilityGroup.FailoverAsync(WaitUntil.Completed, content);
            SqlDistributedAvailabilityGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlDistributedAvailabilityGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task SetRole_SetDistributedAvailabilityGroupPrimaryReplicaToManagedInstance()
        {
            // Generated from example definition: specification/sql/resource-manager/Microsoft.Sql/stable/2023-08-01/examples/DistributedAvailabilityGroupsSetRole.json
            // this example is just showing the usage of "DistributedAvailabilityGroups_SetRole" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SqlDistributedAvailabilityGroupResource created on azure
            // for more information of creating SqlDistributedAvailabilityGroupResource, please refer to the document of SqlDistributedAvailabilityGroupResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string managedInstanceName = "testcl";
            string distributedAvailabilityGroupName = "dag";
            ResourceIdentifier sqlDistributedAvailabilityGroupResourceId = SqlDistributedAvailabilityGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, managedInstanceName, distributedAvailabilityGroupName);
            SqlDistributedAvailabilityGroupResource sqlDistributedAvailabilityGroup = client.GetSqlDistributedAvailabilityGroupResource(sqlDistributedAvailabilityGroupResourceId);

            // invoke the operation
            DistributedAvailabilityGroupSetRole distributedAvailabilityGroupSetRole = new DistributedAvailabilityGroupSetRole(DistributedAvailabilityGroupManagedInstanceRole.Primary, DistributedAvailabilityGroupRoleChangeType.Forced);
            ArmOperation<SqlDistributedAvailabilityGroupResource> lro = await sqlDistributedAvailabilityGroup.SetRoleAsync(WaitUntil.Completed, distributedAvailabilityGroupSetRole);
            SqlDistributedAvailabilityGroupResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlDistributedAvailabilityGroupData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
