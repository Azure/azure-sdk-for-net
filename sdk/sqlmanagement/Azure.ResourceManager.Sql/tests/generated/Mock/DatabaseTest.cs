// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for Database. </summary>
    public partial class DatabaseMockTests : MockTestBase
    {

        public DatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public DatabaseMockTests() : this(false)
        {
        }

        private async Task<Sql.DatabaseCollection> GetDatabaseCollectionAsync(string resourceGroupName, string serverName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServerCollection serverCollection = resourceGroup.GetServers();
            var serverOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverCollection, serverName);
            Server server = serverOperation.Value;
            DatabaseCollection databaseCollection = server.GetDatabases();
            return databaseCollection;
        }

        private async Task<Sql.Database> GetDatabaseAsync()
        {
            var collection = await GetDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "testdb");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database.
            var resource = await GetDatabaseAsync();

            await resource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Deletes a database.
            var resource = await GetDatabaseAsync();

            await resource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Assigns maintenance window to a database.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku("BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            };

            await resource.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetMetricsAsync()
        {
            // Example: List database usage metrics
            var resource = await GetDatabaseAsync();
            var filter = "name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'";

            resource.GetMetricsAsync(filter);
        }

        [RecordedTest]
        public async Task GetMetricDefinitionsAsync()
        {
            // Example: List database usage metrics
            var resource = await GetDatabaseAsync();

            resource.GetMetricDefinitionsAsync();
        }

        [RecordedTest]
        public async Task FailoverAsync()
        {
            // Example: Failover an database
            var resource = await GetDatabaseAsync();
            var replicaType = new Sql.Models.ReplicaType("Primary");

            await resource.FailoverAsync(replicaType);
        }

        [RecordedTest]
        public async Task PauseAsync()
        {
            // Example: Pauses a database.
            var resource = await GetDatabaseAsync();

            await resource.PauseAsync();
        }

        [RecordedTest]
        public async Task ResumeAsync()
        {
            // Example: Resumes a database.
            var resource = await GetDatabaseAsync();

            await resource.ResumeAsync();
        }

        [RecordedTest]
        public async Task UpgradeDataWarehouseAsync()
        {
            // Example: Upgrades a data warehouse.
            var resource = await GetDatabaseAsync();

            await resource.UpgradeDataWarehouseAsync();
        }

        [RecordedTest]
        public async Task RenameAsync()
        {
            // Example: Renames a database.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.ResourceMoveDefinition("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/newtestdb");

            await resource.RenameAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportAsync()
        {
            // Example: Imports to an existing empty database, using private link to communicate with SQL server and storage account.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.ImportExistingDatabaseDefinition(new Sql.Models.StorageKeyType("StorageAccessKey"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", "https://test.blob.core.windows.net/test.bacpac", "login", "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await resource.ImportAsync(parameters);
        }

        [RecordedTest]
        public async Task ExportAsync()
        {
            // Example: Exports a database, using private link to communicate with SQL server and storage account.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.ExportDatabaseDefinition(new Sql.Models.StorageKeyType("StorageAccessKey"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", "https://test.blob.core.windows.net/test.bacpac", "login", "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await resource.ExportAsync(parameters);
        }

        [RecordedTest]
        public async Task GetByDatabaseDatabaseColumnsAsync()
        {
            // Example: Filter database columns
            var resource = await GetDatabaseAsync();
            var schema = new List<string>()
{
"dbo",};
            var table = new List<string>()
{
"customer","address",};
            var column = new List<string>()
{
"username",};
            var orderBy = new List<string>()
{
"schema asc","table","column desc",};
            string skiptoken = null;

            resource.GetByDatabaseDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken);
        }

        [RecordedTest]
        public async Task CreateRestorePointAsync()
        {
            // Example: Creates datawarehouse database restore point.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.CreateDatabaseRestorePointDefinition("mylabel");

            await resource.CreateRestorePointAsync(parameters);
        }

        [RecordedTest]
        public async Task GetCurrentByDatabaseSensitivityLabelsAsync()
        {
            // Example: Gets the current sensitivity labels of a given database
            var resource = await GetDatabaseAsync();
            string skipToken = null;
            bool? count = null;
            string filter = null;

            resource.GetCurrentByDatabaseSensitivityLabelsAsync(skipToken, count, filter);
        }

        [RecordedTest]
        public async Task UpdateSensitivityLabelAsync()
        {
            // Example: Update sensitivity labels of a given database using an operations batch.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.SensitivityLabelUpdateList();

            await resource.UpdateSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task GetRecommendedByDatabaseSensitivityLabelsAsync()
        {
            // Example: Gets the recommended sensitivity labels of a given database
            var resource = await GetDatabaseAsync();
            string skipToken = null;
            bool? includeDisabledRecommendations = null;
            string filter = null;

            resource.GetRecommendedByDatabaseSensitivityLabelsAsync(skipToken, includeDisabledRecommendations, filter);
        }

        [RecordedTest]
        public async Task UpdateRecommendedSensitivityLabelAsync()
        {
            // Example: Update recommended sensitivity labels of a given database using an operations batch.
            var resource = await GetDatabaseAsync();
            var parameters = new Sql.Models.RecommendedSensitivityLabelUpdateList();

            await resource.UpdateRecommendedSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDatabaseExtensionAsync()
        {
            // Example: Create or Update database extensions.
            var resource = await GetDatabaseAsync();
            var extensionName = "polybaseimport";
            var parameters = new Sql.Models.DatabaseExtensions()
            {
                OperationMode = new Sql.Models.OperationMode("PolybaseImport"),
                StorageKeyType = new Sql.Models.StorageKeyType("StorageAccessKey"),
                StorageKey = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                StorageUri = "https://teststorage.blob.core.windows.net/testcontainer/Manifest.xml",
            };

            await resource.CreateOrUpdateDatabaseExtensionAsync(extensionName, parameters);
        }

        [RecordedTest]
        public async Task GetByDatabaseDatabaseExtensionsAsync()
        {
            // Example: List database extensions.
            var resource = await GetDatabaseAsync();

            resource.GetByDatabaseDatabaseExtensionsAsync();
        }

        [RecordedTest]
        public async Task CancelDatabaseOperationAsync()
        {
            // Example: Cancel the database management operation
            var resource = await GetDatabaseAsync();
            var operationId = System.Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");

            await resource.CancelDatabaseOperationAsync(operationId);
        }

        [RecordedTest]
        public async Task GetByDatabaseDatabaseOperationsAsync()
        {
            // Example: List the database management operations
            var resource = await GetDatabaseAsync();

            resource.GetByDatabaseDatabaseOperationsAsync();
        }

        [RecordedTest]
        public async Task GetByDatabaseDatabaseUsagesAsync()
        {
            // Example: Gets database usages.
            var resource = await GetDatabaseAsync();

            resource.GetByDatabaseDatabaseUsagesAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningGetAsync()
        {
            // Example: Get a database's automatic tuning settings
            var resource = await GetDatabaseAsync();
            var childResource = resource.GetDatabaseAutomaticTuning();

            await childResource.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdateAsync()
        {
            // Example: Updates database automatic tuning settings with all properties
            var resource = await GetDatabaseAsync();
            var childResource = resource.GetDatabaseAutomaticTuning();
            var parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = AutomaticTuningMode.Auto,
            };

            await childResource.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task MaintenanceWindowOptionsGetAsync()
        {
            // Example: Gets a list of available maintenance windows for a selected database.
            var resource = await GetDatabaseAsync();
            var childResource = resource.GetMaintenanceWindowOptions();
            var maintenanceWindowOptionsName = "current";

            await childResource.GetAsync(maintenanceWindowOptionsName);
        }

        [RecordedTest]
        public async Task MaintenanceWindowsGetAsync()
        {
            // Example: Gets maintenance window settings for a selected database.
            var resource = await GetDatabaseAsync();
            var childResource = resource.GetMaintenanceWindows();
            var maintenanceWindowName = "current";

            await childResource.GetAsync(maintenanceWindowName);
        }
    }
}
