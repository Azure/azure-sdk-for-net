// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for DatabaseVulnerabilityAssessmentRuleBaseline. </summary>
    public partial class ServerDatabaseVulnerabilityAssessmentRuleBaselineMockTests : MockTestBase
    {
        public ServerDatabaseVulnerabilityAssessmentRuleBaselineMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ServerDatabaseVulnerabilityAssessmentRuleBaselineCollection> GetServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServerCollection serverCollection = resourceGroup.GetServers();
            var serverOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverCollection, serverName);
            Server server = serverOperation.Value;
            DatabaseCollection databaseCollection = server.GetDatabases();
            var databaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(databaseCollection, databaseName);
            Database database = databaseOperation.Value;
            ServerDatabaseVulnerabilityAssessmentCollection serverDatabaseVulnerabilityAssessmentCollection = database.GetServerDatabaseVulnerabilityAssessments();
            var serverDatabaseVulnerabilityAssessmentOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverDatabaseVulnerabilityAssessmentCollection);
            ServerDatabaseVulnerabilityAssessment serverDatabaseVulnerabilityAssessment = serverDatabaseVulnerabilityAssessmentOperation.Value;
            ServerDatabaseVulnerabilityAssessmentRuleBaselineCollection serverDatabaseVulnerabilityAssessmentRuleBaselineCollection = serverDatabaseVulnerabilityAssessment.GetServerDatabaseVulnerabilityAssessmentRuleBaselines();
            return serverDatabaseVulnerabilityAssessmentRuleBaselineCollection;
        }

        private async Task<Sql.ServerDatabaseVulnerabilityAssessmentRuleBaseline> GetServerDatabaseVulnerabilityAssessmentRuleBaselineAsync()
        {
            var collection = await GetServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "VA1001");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database's vulnerability assessment rule baseline.
            var serverDatabaseVulnerabilityAssessmentRuleBaseline = await GetServerDatabaseVulnerabilityAssessmentRuleBaselineAsync();

            await serverDatabaseVulnerabilityAssessmentRuleBaseline.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Removes a database's vulnerability assessment rule baseline.
            var serverDatabaseVulnerabilityAssessmentRuleBaseline = await GetServerDatabaseVulnerabilityAssessmentRuleBaselineAsync();

            await serverDatabaseVulnerabilityAssessmentRuleBaseline.DeleteAsync();
        }
    }
}
