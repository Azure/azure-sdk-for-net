// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for DataMaskingPolicy. </summary>
    public partial class DataMaskingPolicyMockTests : MockTestBase
    {
        public DataMaskingPolicyMockTests(bool isAsync) : base(isAsync)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public DataMaskingPolicyMockTests() : this(false)
        {
        }

        private async Task<Sql.DataMaskingPolicyCollection> GetDataMaskingPolicyCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServerCollection serverCollection = resourceGroup.GetServers();
            var serverOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverCollection, serverName);
            Server server = serverOperation.Value;
            DatabaseCollection databaseCollection = server.GetDatabases();
            var databaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(databaseCollection, databaseName);
            Database database = databaseOperation.Value;
            DataMaskingPolicyCollection dataMaskingPolicyCollection = database.GetDataMaskingPolicies();
            return dataMaskingPolicyCollection;
        }

        private async Task<Sql.DataMaskingPolicy> GetDataMaskingPolicyAsync()
        {
            var collection = await GetDataMaskingPolicyCollectionAsync("sqlcrudtest-6852", "sqlcrudtest-2080", "sqlcrudtest-331");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection);
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get data masking policy
            var resource = await GetDataMaskingPolicyAsync();

            await resource.GetAsync();
        }

        [RecordedTest]
        public async Task CreateOrUpdateDataMaskingRuleAsync()
        {
            // Example: Create/Update data masking rule for default max
            var resource = await GetDataMaskingPolicyAsync();
            var dataMaskingRuleName = "rule1";
            var parameters = new Sql.Models.DataMaskingRule()
            {
                AliasName = "nickname",
                RuleState = DataMaskingRuleState.Enabled,
                SchemaName = "dbo",
                TableName = "Table_1",
                ColumnName = "test1",
                MaskingFunction = DataMaskingFunction.Default,
            };

            await resource.CreateOrUpdateDataMaskingRuleAsync(dataMaskingRuleName, parameters);
        }

        [RecordedTest]
        public async Task GetDataMaskingRulesByDatabaseAsync()
        {
            // Example: List data masking rules
            var resource = await GetDataMaskingPolicyAsync();

            resource.GetDataMaskingRulesByDatabaseAsync();
        }
    }
}
