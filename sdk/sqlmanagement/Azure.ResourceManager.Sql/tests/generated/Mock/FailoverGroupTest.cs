// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for FailoverGroup. </summary>
    public partial class FailoverGroupMockTests : MockTestBase
    {
        public FailoverGroupMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.FailoverGroupCollection> GetFailoverGroupCollectionAsync(string resourceGroupName, string serverName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServerCollection serverCollection = resourceGroup.GetServers();
            var serverOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverCollection, serverName);
            Server server = serverOperation.Value;
            FailoverGroupCollection failoverGroupCollection = server.GetFailoverGroups();
            return failoverGroupCollection;
        }

        private async Task<Sql.FailoverGroup> GetFailoverGroupAsync()
        {
            var collection = await GetFailoverGroupCollectionAsync("Default", "failover-group-primary-server");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "failover-group-test-3");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get failover group
            var failoverGroup = await GetFailoverGroupAsync();

            await failoverGroup.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete failover group
            var failoverGroup = await GetFailoverGroupAsync();

            await failoverGroup.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update failover group
            var failoverGroup = await GetFailoverGroupAsync();
            Sql.Models.FailoverGroupUpdate parameters = new Sql.Models.FailoverGroupUpdate()
            {
                ReadWriteEndpoint = new Sql.Models.FailoverGroupReadWriteEndpoint(new Sql.Models.ReadWriteEndpointFailoverPolicy("Automatic"))
                {
                    FailoverWithDataLossGracePeriodMinutes = 120,
                },
            };

            await failoverGroup.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task FailoverAsync()
        {
            // Example: Planned failover of a failover group
            var failoverGroup = await GetFailoverGroupAsync();

            await failoverGroup.FailoverAsync();
        }

        [RecordedTest]
        public async Task ForceFailoverAllowDataLossAsync()
        {
            // Example: Forced failover of a failover group allowing data loss
            var failoverGroup = await GetFailoverGroupAsync();

            await failoverGroup.ForceFailoverAllowDataLossAsync();
        }
    }
}
