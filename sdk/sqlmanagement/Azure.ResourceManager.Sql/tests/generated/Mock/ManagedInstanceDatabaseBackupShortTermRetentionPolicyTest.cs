// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedBackupShortTermRetentionPolicy. </summary>
    public partial class ManagedInstanceDatabaseBackupShortTermRetentionPolicyMockTests : MockTestBase
    {
        public ManagedInstanceDatabaseBackupShortTermRetentionPolicyMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ManagedInstanceDatabaseBackupShortTermRetentionPolicyCollection> GetManagedInstanceDatabaseBackupShortTermRetentionPolicyCollectionAsync(string resourceGroupName, string managedInstanceName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ManagedInstanceCollection managedInstanceCollection = resourceGroup.GetManagedInstances();
            var managedInstanceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedInstanceCollection, managedInstanceName);
            ManagedInstance managedInstance = managedInstanceOperation.Value;
            ManagedDatabaseCollection managedDatabaseCollection = managedInstance.GetManagedDatabases();
            var managedDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedDatabaseCollection, databaseName);
            ManagedDatabase managedDatabase = managedDatabaseOperation.Value;
            ManagedInstanceDatabaseBackupShortTermRetentionPolicyCollection managedInstanceDatabaseBackupShortTermRetentionPolicyCollection = managedDatabase.GetManagedInstanceDatabaseBackupShortTermRetentionPolicies();
            return managedInstanceDatabaseBackupShortTermRetentionPolicyCollection;
        }

        private async Task<Sql.ManagedInstanceDatabaseBackupShortTermRetentionPolicy> GetManagedInstanceDatabaseBackupShortTermRetentionPolicyAsync()
        {
            var collection = await GetManagedInstanceDatabaseBackupShortTermRetentionPolicyCollectionAsync("resourceGroup", "testsvr", "testdb");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection);
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get the short term retention policy for the database.
            var managedInstanceDatabaseBackupShortTermRetentionPolicy = await GetManagedInstanceDatabaseBackupShortTermRetentionPolicyAsync();

            await managedInstanceDatabaseBackupShortTermRetentionPolicy.GetAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update the short term retention policy for the database.
            var managedInstanceDatabaseBackupShortTermRetentionPolicy = await GetManagedInstanceDatabaseBackupShortTermRetentionPolicyAsync();
            Sql.ManagedBackupShortTermRetentionPolicyData parameters = new Sql.ManagedBackupShortTermRetentionPolicyData()
            {
                RetentionDays = 14,
            };

            await managedInstanceDatabaseBackupShortTermRetentionPolicy.UpdateAsync(parameters);
        }
    }
}
