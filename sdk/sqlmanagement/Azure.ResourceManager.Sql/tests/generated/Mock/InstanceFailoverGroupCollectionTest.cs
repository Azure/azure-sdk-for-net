// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for InstanceFailoverGroup. </summary>
    public partial class InstanceFailoverGroupCollectionMockTests : MockTestBase
    {
        public InstanceFailoverGroupCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public InstanceFailoverGroupCollectionMockTests() : this(false)
        {
        }

        private async Task<Sql.InstanceFailoverGroupCollection> GetInstanceFailoverGroupCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            InstanceFailoverGroupCollection instanceFailoverGroupCollection = resourceGroup.GetInstanceFailoverGroups();
            return instanceFailoverGroupCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create failover group
            var collection = await GetInstanceFailoverGroupCollectionAsync("Default");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "Japan East", "failover-group-test-3");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: List failover group
            var collection = await GetInstanceFailoverGroupCollectionAsync("Default");
            TestHelper.GetAllExampleInstanceAsync(collection, "Japan East").AsPages();
        }
    }
}
