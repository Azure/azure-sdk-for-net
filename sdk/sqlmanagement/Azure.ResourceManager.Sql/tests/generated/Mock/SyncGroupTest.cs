// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SyncGroup. </summary>
    public partial class SyncGroupMockTests : MockTestBase
    {
        public SyncGroupMockTests(bool isAsync) : base(isAsync)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public SyncGroupMockTests() : this(false)
        {
        }

        private async Task<Sql.SyncGroupCollection> GetSyncGroupCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServerCollection serverCollection = resourceGroup.GetServers();
            var serverOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverCollection, serverName);
            Server server = serverOperation.Value;
            DatabaseCollection databaseCollection = server.GetDatabases();
            var databaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(databaseCollection, databaseName);
            Database database = databaseOperation.Value;
            SyncGroupCollection syncGroupCollection = database.GetSyncGroups();
            return syncGroupCollection;
        }

        private async Task<Sql.SyncGroup> GetSyncGroupAsync()
        {
            var collection = await GetSyncGroupCollectionAsync("syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "syncgroupcrud-3187");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a sync group
            var resource = await GetSyncGroupAsync();

            await resource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a sync group
            var resource = await GetSyncGroupAsync();

            await resource.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update a sync group
            var resource = await GetSyncGroupAsync();
            var parameters = new Sql.SyncGroupData()
            {
                Interval = -1,
                ConflictResolutionPolicy = new Sql.Models.SyncConflictResolutionPolicy("HubWin"),
                SyncDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-3521/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328",
                HubDatabaseUserName = "hubUser",
                HubDatabasePassword = "hubPassword",
                UsePrivateLinkConnection = true,
            };

            await resource.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task RefreshHubSchemaAsync()
        {
            // Example: Refresh a hub database schema.
            var resource = await GetSyncGroupAsync();

            await resource.RefreshHubSchemaAsync();
        }

        [RecordedTest]
        public async Task GetHubSchemasAsync()
        {
            // Example: Get a hub database schema.
            var resource = await GetSyncGroupAsync();

            resource.GetHubSchemasAsync();
        }

        [RecordedTest]
        public async Task GetLogsAsync()
        {
            // Example: Get sync group logs
            var resource = await GetSyncGroupAsync();
            var startTime = "2017-01-01T00:00:00";
            var endTime = "2017-12-31T00:00:00";
            var type = new Sql.Models.Enum76("All");
            string continuationToken = null;

            resource.GetLogsAsync(startTime, endTime, type, continuationToken);
        }

        [RecordedTest]
        public async Task CancelSyncAsync()
        {
            // Example: Cancel a sync group synchronization
            var resource = await GetSyncGroupAsync();

            await resource.CancelSyncAsync();
        }

        [RecordedTest]
        public async Task TriggerSyncAsync()
        {
            // Example: Trigger a sync group synchronization.
            var resource = await GetSyncGroupAsync();

            await resource.TriggerSyncAsync();
        }
    }
}
