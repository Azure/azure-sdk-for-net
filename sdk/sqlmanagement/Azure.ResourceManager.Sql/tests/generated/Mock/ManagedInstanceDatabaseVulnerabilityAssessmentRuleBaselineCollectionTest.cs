// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for DatabaseVulnerabilityAssessmentRuleBaseline. </summary>
    public partial class ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollectionMockTests : MockTestBase
    {
        public ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollection> GetManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync(string resourceGroupName, string managedInstanceName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ManagedInstanceCollection managedInstanceCollection = resourceGroup.GetManagedInstances();
            var managedInstanceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedInstanceCollection, managedInstanceName);
            ManagedInstance managedInstance = managedInstanceOperation.Value;
            ManagedDatabaseCollection managedDatabaseCollection = managedInstance.GetManagedDatabases();
            var managedDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedDatabaseCollection, databaseName);
            ManagedDatabase managedDatabase = managedDatabaseOperation.Value;
            ManagedInstanceDatabaseVulnerabilityAssessmentCollection managedInstanceDatabaseVulnerabilityAssessmentCollection = managedDatabase.GetManagedInstanceDatabaseVulnerabilityAssessments();
            var managedInstanceDatabaseVulnerabilityAssessmentOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedInstanceDatabaseVulnerabilityAssessmentCollection);
            ManagedInstanceDatabaseVulnerabilityAssessment managedInstanceDatabaseVulnerabilityAssessment = managedInstanceDatabaseVulnerabilityAssessmentOperation.Value;
            ManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollection managedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollection = managedInstanceDatabaseVulnerabilityAssessment.GetManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselines();
            return managedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Creates or updates a database's vulnerability assessment rule baseline.
            var collection = await GetManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "VA1001");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database's vulnerability assessment rule baseline.
            var collection = await GetManagedInstanceDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync("vulnerabilityaseessmenttest-4711", "vulnerabilityaseessmenttest-6411", "testdb");
            await TestHelper.GetExampleInstanceAsync(collection, "VA1001");
        }
    }
}
