// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for DatabaseVulnerabilityAssessmentRuleBaseline. </summary>
    public partial class ServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionMockTests : MockTestBase
    {
        public ServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public ServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionMockTests() : this(false)
        {
        }

        private async Task<Sql.ServerDatabaseVulnerabilityAssessmentRuleBaselineCollection> GetServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ServerCollection serverCollection = resourceGroup.GetServers();
            var serverOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverCollection, serverName);
            Server server = serverOperation.Value;
            DatabaseCollection databaseCollection = server.GetDatabases();
            var databaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(databaseCollection, databaseName);
            Database database = databaseOperation.Value;
            ServerDatabaseVulnerabilityAssessmentCollection serverDatabaseVulnerabilityAssessmentCollection = database.GetServerDatabaseVulnerabilityAssessments();
            var databaseVulnerabilityAssessmentOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverDatabaseVulnerabilityAssessmentCollection);
            ServerDatabaseVulnerabilityAssessment databaseVulnerabilityAssessment = databaseVulnerabilityAssessmentOperation.Value;
            ServerDatabaseVulnerabilityAssessmentRuleBaselineCollection serverDatabaseVulnerabilityAssessmentRuleBaselineCollection = databaseVulnerabilityAssessment.GetServerDatabaseVulnerabilityAssessmentRuleBaselines();
            return serverDatabaseVulnerabilityAssessmentRuleBaselineCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Creates or updates a database's vulnerability assessment rule baseline.
            var collection = await GetServerDatabaseVulnerabilityAssessmentRuleBaselineCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "VA1001");
        }
    }
}
