// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedTransparentDataEncryption. </summary>
    public partial class ManagedTransparentDataEncryptionCollectionMockTests : MockTestBase
    {
        public ManagedTransparentDataEncryptionCollectionMockTests(bool isAsync) : base(isAsync)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public ManagedTransparentDataEncryptionCollectionMockTests() : this(false)
        {
        }

        private async Task<Sql.ManagedTransparentDataEncryptionCollection> GetManagedTransparentDataEncryptionCollectionAsync(string resourceGroupName, string managedInstanceName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ManagedInstanceCollection managedInstanceCollection = resourceGroup.GetManagedInstances();
            var managedInstanceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedInstanceCollection, managedInstanceName);
            ManagedInstance managedInstance = managedInstanceOperation.Value;
            ManagedDatabaseCollection managedDatabaseCollection = managedInstance.GetManagedDatabases();
            var managedDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedDatabaseCollection, databaseName);
            ManagedDatabase managedDatabase = managedDatabaseOperation.Value;
            ManagedTransparentDataEncryptionCollection managedTransparentDataEncryptionCollection = managedDatabase.GetManagedTransparentDataEncryptions();
            return managedTransparentDataEncryptionCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Update a database's Transparent Data Encryption state with minimal parameters
            var collection = await GetManagedTransparentDataEncryptionCollectionAsync("securitytde-42-rg", "securitytde-42", "testdb");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection);
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: Get a list of the database's transparent data encryptions
            var collection = await GetManagedTransparentDataEncryptionCollectionAsync("security-tde-resourcegroup", "securitytde", "testdb");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
