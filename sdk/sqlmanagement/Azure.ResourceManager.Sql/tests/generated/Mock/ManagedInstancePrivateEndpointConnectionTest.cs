// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstancePrivateEndpointConnection. </summary>
    public partial class ManagedInstancePrivateEndpointConnectionMockTests : MockTestBase
    {
        public ManagedInstancePrivateEndpointConnectionMockTests(bool isAsync) : base(isAsync)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public ManagedInstancePrivateEndpointConnectionMockTests() : this(false)
        {
        }

        private async Task<Sql.ManagedInstancePrivateEndpointConnectionCollection> GetManagedInstancePrivateEndpointConnectionCollectionAsync(string resourceGroupName, string managedInstanceName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ManagedInstanceCollection managedInstanceCollection = resourceGroup.GetManagedInstances();
            var managedInstanceOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(managedInstanceCollection, managedInstanceName);
            ManagedInstance managedInstance = managedInstanceOperation.Value;
            ManagedInstancePrivateEndpointConnectionCollection managedInstancePrivateEndpointConnectionCollection = managedInstance.GetManagedInstancePrivateEndpointConnections();
            return managedInstancePrivateEndpointConnectionCollection;
        }

        private async Task<Sql.ManagedInstancePrivateEndpointConnection> GetManagedInstancePrivateEndpointConnectionAsync()
        {
            var collection = await GetManagedInstancePrivateEndpointConnectionCollectionAsync("Default", "test-cl");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "private-endpoint-connection-name");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets private endpoint connection.
            var resource = await GetManagedInstancePrivateEndpointConnectionAsync();

            await resource.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Deletes a private endpoint connection with a given name.
            var resource = await GetManagedInstancePrivateEndpointConnectionAsync();

            await resource.DeleteAsync();
        }
    }
}
