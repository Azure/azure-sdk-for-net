// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlDatabase. </summary>
    public partial class SqlDatabaseMockTests : MockTestBase
    {
        public SqlDatabaseMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.SqlDatabaseCollection> GetSqlDatabaseCollectionAsync(string resourceGroupName, string serverName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            return sqlDatabaseCollection;
        }

        private async Task<Sql.SqlDatabase> GetSqlDatabaseAsync()
        {
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "testdb");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database.
            var sqlDatabase = await GetSqlDatabaseAsync();

            await sqlDatabase.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Deletes a database.
            var sqlDatabase = await GetSqlDatabaseAsync();

            await sqlDatabase.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Assigns maintenance window to a database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku("BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            };

            await sqlDatabase.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync2()
        {
            // Example: Resets maintenance window of a database to default.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku("BC_Gen5_4"),
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await sqlDatabase.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync3()
        {
            // Example: Updates a database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.DatabaseUpdate parameters = new Sql.Models.DatabaseUpdate()
            {
                Sku = new Sql.Models.Sku("BC_Gen4_4"),
                MaxSizeBytes = 1073741824,
                LicenseType = new Sql.Models.DatabaseLicenseType("LicenseIncluded"),
            };

            await sqlDatabase.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetMetricsAsync()
        {
            // Example: List database usage metrics
            var sqlDatabase = await GetSqlDatabaseAsync();
            string filter = "name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'";

            sqlDatabase.GetMetricsAsync(filter);
        }

        [RecordedTest]
        public async Task GetMetricDefinitionsAsync()
        {
            // Example: List database usage metrics
            var sqlDatabase = await GetSqlDatabaseAsync();

            sqlDatabase.GetMetricDefinitionsAsync();
        }

        [RecordedTest]
        public async Task FailoverAsync()
        {
            // Example: Failover an database
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.ReplicaType? replicaType = new Sql.Models.ReplicaType("Primary");

            await sqlDatabase.FailoverAsync(replicaType);
        }

        [RecordedTest]
        public async Task PauseAsync()
        {
            // Example: Pauses a database.
            var sqlDatabase = await GetSqlDatabaseAsync();

            await sqlDatabase.PauseAsync();
        }

        [RecordedTest]
        public async Task ResumeAsync()
        {
            // Example: Resumes a database.
            var sqlDatabase = await GetSqlDatabaseAsync();

            await sqlDatabase.ResumeAsync();
        }

        [RecordedTest]
        public async Task UpgradeDataWarehouseAsync()
        {
            // Example: Upgrades a data warehouse.
            var sqlDatabase = await GetSqlDatabaseAsync();

            await sqlDatabase.UpgradeDataWarehouseAsync();
        }

        [RecordedTest]
        public async Task RenameAsync()
        {
            // Example: Renames a database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.ResourceMoveDefinition parameters = new Sql.Models.ResourceMoveDefinition("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/newtestdb");

            await sqlDatabase.RenameAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportAsync()
        {
            // Example: Imports to an existing empty database, using private link to communicate with SQL server and storage account.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.ImportExistingDatabaseDefinition parameters = new Sql.Models.ImportExistingDatabaseDefinition(new Sql.Models.StorageKeyType("StorageAccessKey"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", "https://test.blob.core.windows.net/test.bacpac", "login", "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlDatabase.ImportAsync(parameters);
        }

        [RecordedTest]
        public async Task ImportAsync2()
        {
            // Example: Imports to an existing empty database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.ImportExistingDatabaseDefinition parameters = new Sql.Models.ImportExistingDatabaseDefinition(new Sql.Models.StorageKeyType("StorageAccessKey"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", "https://test.blob.core.windows.net/test.bacpac", "login", "password")
            {
                AuthenticationType = "Sql",
            };

            await sqlDatabase.ImportAsync(parameters);
        }

        [RecordedTest]
        public async Task ExportAsync()
        {
            // Example: Exports a database, using private link to communicate with SQL server and storage account.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.ExportDatabaseDefinition parameters = new Sql.Models.ExportDatabaseDefinition(new Sql.Models.StorageKeyType("StorageAccessKey"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", "https://test.blob.core.windows.net/test.bacpac", "login", "password")
            {
                AuthenticationType = "Sql",
                NetworkIsolation = new Sql.Models.NetworkIsolationSettings()
                {
                    StorageAccountResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Storage/storageAccounts/test-privatelink",
                    SqlServerResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr",
                },
            };

            await sqlDatabase.ExportAsync(parameters);
        }

        [RecordedTest]
        public async Task ExportAsync2()
        {
            // Example: Exports a database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.ExportDatabaseDefinition parameters = new Sql.Models.ExportDatabaseDefinition(new Sql.Models.StorageKeyType("StorageAccessKey"), "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx==", "https://test.blob.core.windows.net/test.bacpac", "login", "password")
            {
                AuthenticationType = "Sql",
            };

            await sqlDatabase.ExportAsync(parameters);
        }

        [RecordedTest]
        public async Task GetDatabaseColumnsAsync()
        {
            // Example: Filter database columns
            var sqlDatabase = await GetSqlDatabaseAsync();
            IEnumerable<string> schema = new List<string>()
{
"dbo",};
            IEnumerable<string> table = new List<string>()
{
"customer","address",};
            IEnumerable<string> column = new List<string>()
{
"username",};
            IEnumerable<string> orderBy = new List<string>()
{
"schema asc","table","column desc",};
            string skiptoken = null;

            sqlDatabase.GetDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken);
        }

        [RecordedTest]
        public async Task GetDatabaseColumnsAsync2()
        {
            // Example: List database columns
            var sqlDatabase = await GetSqlDatabaseAsync();
            IEnumerable<string> schema = null;
            IEnumerable<string> table = null;
            IEnumerable<string> column = null;
            IEnumerable<string> orderBy = null;
            string skiptoken = null;

            sqlDatabase.GetDatabaseColumnsAsync(schema, table, column, orderBy, skiptoken);
        }

        [RecordedTest]
        public async Task CreateRestorePointAsync()
        {
            // Example: Creates datawarehouse database restore point.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.CreateDatabaseRestorePointDefinition parameters = new Sql.Models.CreateDatabaseRestorePointDefinition("mylabel");

            await sqlDatabase.CreateRestorePointAsync(parameters);
        }

        [RecordedTest]
        public async Task GetCurrentSensitivityLabelsAsync()
        {
            // Example: Gets the current sensitivity labels of a given database
            var sqlDatabase = await GetSqlDatabaseAsync();
            string skipToken = null;
            bool? count = null;
            string filter = null;

            sqlDatabase.GetCurrentSensitivityLabelsAsync(skipToken, count, filter);
        }

        [RecordedTest]
        public async Task UpdateSensitivityLabelAsync()
        {
            // Example: Update sensitivity labels of a given database using an operations batch.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.SensitivityLabelUpdateList parameters = new Sql.Models.SensitivityLabelUpdateList();

            await sqlDatabase.UpdateSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task GetRecommendedSensitivityLabelsAsync()
        {
            // Example: Gets the recommended sensitivity labels of a given database
            var sqlDatabase = await GetSqlDatabaseAsync();
            string skipToken = null;
            bool? includeDisabledRecommendations = null;
            string filter = null;

            sqlDatabase.GetRecommendedSensitivityLabelsAsync(skipToken, includeDisabledRecommendations, filter);
        }

        [RecordedTest]
        public async Task UpdateRecommendedSensitivityLabelAsync()
        {
            // Example: Update recommended sensitivity labels of a given database using an operations batch.
            var sqlDatabase = await GetSqlDatabaseAsync();
            Sql.Models.RecommendedSensitivityLabelUpdateList parameters = new Sql.Models.RecommendedSensitivityLabelUpdateList();

            await sqlDatabase.UpdateRecommendedSensitivityLabelAsync(parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateDatabaseExtensionAsync()
        {
            // Example: Create or Update database extensions.
            var sqlDatabase = await GetSqlDatabaseAsync();
            string extensionName = "polybaseimport";
            Sql.Models.DatabaseExtensions parameters = new Sql.Models.DatabaseExtensions()
            {
                OperationMode = new Sql.Models.OperationMode("PolybaseImport"),
                StorageKeyType = new Sql.Models.StorageKeyType("StorageAccessKey"),
                StorageKey = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                StorageUri = "https://teststorage.blob.core.windows.net/testcontainer/Manifest.xml",
            };

            await sqlDatabase.CreateOrUpdateDatabaseExtensionAsync(extensionName, parameters);
        }

        [RecordedTest]
        public async Task GetDatabaseExtensionsAsync()
        {
            // Example: List database extensions.
            var sqlDatabase = await GetSqlDatabaseAsync();

            sqlDatabase.GetDatabaseExtensionsAsync();
        }

        [RecordedTest]
        public async Task CancelDatabaseOperationAsync()
        {
            // Example: Cancel the database management operation
            var sqlDatabase = await GetSqlDatabaseAsync();
            Guid operationId = Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");

            await sqlDatabase.CancelDatabaseOperationAsync(operationId);
        }

        [RecordedTest]
        public async Task GetDatabaseOperationsAsync()
        {
            // Example: List the database management operations
            var sqlDatabase = await GetSqlDatabaseAsync();

            sqlDatabase.GetDatabaseOperationsAsync();
        }

        [RecordedTest]
        public async Task GetDatabaseUsagesAsync()
        {
            // Example: Gets database usages.
            var sqlDatabase = await GetSqlDatabaseAsync();

            sqlDatabase.GetDatabaseUsagesAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningGetAsync()
        {
            // Example: Get a database's automatic tuning settings
            var sqlDatabase = await GetSqlDatabaseAsync();
            var databaseAutomaticTuning = sqlDatabase.GetDatabaseAutomaticTuning();

            await databaseAutomaticTuning.GetAsync();
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdateAsync()
        {
            // Example: Updates database automatic tuning settings with all properties
            var sqlDatabase = await GetSqlDatabaseAsync();
            var databaseAutomaticTuning = sqlDatabase.GetDatabaseAutomaticTuning();
            Sql.DatabaseAutomaticTuningData parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningMode.Auto,
            };

            await databaseAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task DatabaseAutomaticTuningUpdateAsync2()
        {
            // Example: Updates database automatic tuning settings with minimal properties
            var sqlDatabase = await GetSqlDatabaseAsync();
            var databaseAutomaticTuning = sqlDatabase.GetDatabaseAutomaticTuning();
            Sql.DatabaseAutomaticTuningData parameters = new Sql.DatabaseAutomaticTuningData()
            {
                DesiredState = Sql.Models.AutomaticTuningMode.Auto,
            };

            await databaseAutomaticTuning.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task MaintenanceWindowOptionsGetAsync()
        {
            // Example: Gets a list of available maintenance windows for a selected database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            var maintenanceWindowOptions = sqlDatabase.GetMaintenanceWindowOptions();
            string maintenanceWindowOptionsName = "current";

            await maintenanceWindowOptions.GetAsync(maintenanceWindowOptionsName);
        }

        [RecordedTest]
        public async Task MaintenanceWindowsGetAsync()
        {
            // Example: Gets maintenance window settings for a selected database.
            var sqlDatabase = await GetSqlDatabaseAsync();
            var maintenanceWindows = sqlDatabase.GetMaintenanceWindows();
            string maintenanceWindowName = "current";

            await maintenanceWindows.GetAsync(maintenanceWindowName);
        }
    }
}
