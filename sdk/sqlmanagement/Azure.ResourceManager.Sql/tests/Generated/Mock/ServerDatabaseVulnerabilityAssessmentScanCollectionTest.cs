// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for VulnerabilityAssessmentScanRecord. </summary>
    public partial class ServerDatabaseVulnerabilityAssessmentScanCollectionMockTests : MockTestBase
    {
        public ServerDatabaseVulnerabilityAssessmentScanCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ServerDatabaseVulnerabilityAssessmentScanCollection> GetServerDatabaseVulnerabilityAssessmentScanCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            var sqlDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlDatabaseCollection, databaseName);
            SqlDatabase sqlDatabase = sqlDatabaseOperation.Value;
            ServerDatabaseVulnerabilityAssessmentCollection serverDatabaseVulnerabilityAssessmentCollection = sqlDatabase.GetServerDatabaseVulnerabilityAssessments();
            var serverDatabaseVulnerabilityAssessmentOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(serverDatabaseVulnerabilityAssessmentCollection);
            ServerDatabaseVulnerabilityAssessment serverDatabaseVulnerabilityAssessment = serverDatabaseVulnerabilityAssessmentOperation.Value;
            ServerDatabaseVulnerabilityAssessmentScanCollection serverDatabaseVulnerabilityAssessmentScanCollection = serverDatabaseVulnerabilityAssessment.GetServerDatabaseVulnerabilityAssessmentScans();
            return serverDatabaseVulnerabilityAssessmentScanCollection;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database vulnerability assessment scan record by scan ID
            var collection = await GetServerDatabaseVulnerabilityAssessmentScanCollectionAsync("vulnerabilityassessmenttest-4711", "vulnerabilityassessmenttest-6411", "testdb");
            await TestHelper.GetExampleInstanceAsync(collection, "scan001");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: Gets the list of a database vulnerability assessment scan records
            var collection = await GetServerDatabaseVulnerabilityAssessmentScanCollectionAsync("vulnerabilityassessmenttest-4711", "vulnerabilityassessmenttest-6411", "testdb");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
