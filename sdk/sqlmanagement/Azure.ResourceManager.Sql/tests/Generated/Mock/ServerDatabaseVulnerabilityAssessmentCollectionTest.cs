// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for DatabaseVulnerabilityAssessment. </summary>
    public partial class ServerDatabaseVulnerabilityAssessmentCollectionMockTests : MockTestBase
    {
        public ServerDatabaseVulnerabilityAssessmentCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ServerDatabaseVulnerabilityAssessmentCollection> GetServerDatabaseVulnerabilityAssessmentCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            var sqlDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlDatabaseCollection, databaseName);
            SqlDatabase sqlDatabase = sqlDatabaseOperation.Value;
            ServerDatabaseVulnerabilityAssessmentCollection serverDatabaseVulnerabilityAssessmentCollection = sqlDatabase.GetServerDatabaseVulnerabilityAssessments();
            return serverDatabaseVulnerabilityAssessmentCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a database's vulnerability assessment with all parameters
            var collection = await GetServerDatabaseVulnerabilityAssessmentCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
            var collection = await GetServerDatabaseVulnerabilityAssessmentCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName = new Sql.Models.VulnerabilityAssessmentName("default");
            Sql.DatabaseVulnerabilityAssessmentData parameters = new Sql.DatabaseVulnerabilityAssessmentData()
            {
                StorageContainerPath = "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
                StorageAccountAccessKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            };

            await collection.CreateOrUpdateAsync(vulnerabilityAssessmentName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
            var collection = await GetServerDatabaseVulnerabilityAssessmentCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName = new Sql.Models.VulnerabilityAssessmentName("default");
            Sql.DatabaseVulnerabilityAssessmentData parameters = new Sql.DatabaseVulnerabilityAssessmentData()
            {
                StorageContainerPath = "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
                StorageContainerSasKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            };

            await collection.CreateOrUpdateAsync(vulnerabilityAssessmentName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a database's vulnerability assessment
            var collection = await GetServerDatabaseVulnerabilityAssessmentCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            await TestHelper.GetExampleInstanceAsync(collection);
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: Get the database's vulnerability assessment policies
            var collection = await GetServerDatabaseVulnerabilityAssessmentCollectionAsync("vulnerabilityaseessmenttest-4799", "vulnerabilityaseessmenttest-6440", "testdb");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
