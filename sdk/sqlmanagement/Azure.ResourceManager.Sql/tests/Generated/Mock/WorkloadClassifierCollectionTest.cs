// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for WorkloadClassifier. </summary>
    public partial class WorkloadClassifierCollectionMockTests : MockTestBase
    {
        public WorkloadClassifierCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.WorkloadClassifierCollection> GetWorkloadClassifierCollectionAsync(string resourceGroupName, string serverName, string databaseName, string workloadGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            var sqlDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlDatabaseCollection, databaseName);
            SqlDatabase sqlDatabase = sqlDatabaseOperation.Value;
            WorkloadGroupCollection workloadGroupCollection = sqlDatabase.GetWorkloadGroups();
            var workloadGroupOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(workloadGroupCollection, workloadGroupName);
            WorkloadGroup workloadGroup = workloadGroupOperation.Value;
            WorkloadClassifierCollection workloadClassifierCollection = workloadGroup.GetWorkloadClassifiers();
            return workloadClassifierCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a workload group with all properties specified.
            var collection = await GetWorkloadClassifierCollectionAsync("Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "wlm_workloadclassifier");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a workload group with the required properties specified.
            var collection = await GetWorkloadClassifierCollectionAsync("Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            string workloadClassifierName = "wlm_workloadclassifier";
            Sql.WorkloadClassifierData parameters = new Sql.WorkloadClassifierData()
            {
                MemberName = "dbo",
            };

            await collection.CreateOrUpdateAsync(workloadClassifierName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a workload classifier for a data warehouse
            var collection = await GetWorkloadClassifierCollectionAsync("Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            await TestHelper.GetExampleInstanceAsync(collection, "wlm_classifier");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: Get the list of workload classifiers for a workload group
            var collection = await GetWorkloadClassifierCollectionAsync("Default-SQL-SouthEastAsia", "testsvr", "testdb", "wlm_workloadgroup");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
