// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstance. </summary>
    public partial class ManagedInstanceMockTests : MockTestBase
    {
        public ManagedInstanceMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ManagedInstanceCollection> GetManagedInstanceCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ManagedInstanceCollection managedInstanceCollection = resourceGroup.GetManagedInstances();
            return managedInstanceCollection;
        }

        private async Task<Sql.ManagedInstance> GetManagedInstanceAsync()
        {
            var collection = await GetManagedInstanceCollectionAsync("testrg");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "testinstance");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get managed instance
            var managedInstance = await GetManagedInstanceAsync();
            string expand = null;

            await managedInstance.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get managed instance with $expand=administrators
            var managedInstance = await GetManagedInstanceAsync();
            string expand = null;

            await managedInstance.GetAsync(expand);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete managed instance
            var managedInstance = await GetManagedInstanceAsync();

            await managedInstance.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Remove maintenance policy from managed instance (select default maintenance policy)
            var managedInstance = await GetManagedInstanceAsync();
            Sql.Models.ManagedInstanceUpdate parameters = new Sql.Models.ManagedInstanceUpdate()
            {
                MaintenanceConfigurationId = "/subscriptions/20d7082a-0fc7-4468-82bd-542694d5042b/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await managedInstance.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync2()
        {
            // Example: Update managed instance with all properties
            var managedInstance = await GetManagedInstanceAsync();
            Sql.Models.ManagedInstanceUpdate parameters = new Sql.Models.ManagedInstanceUpdate()
            {
                Sku = new Sql.Models.Sku("GP_Gen4")
                {
                    Tier = "GeneralPurpose",
                    Capacity = 8,
                },
                AdministratorLogin = "dummylogin",
                AdministratorLoginPassword = "PLACEHOLDER",
                LicenseType = new Sql.Models.ManagedInstanceLicenseType("BasePrice"),
                VCores = 8,
                StorageSizeInGB = 448,
                Collation = "SQL_Latin1_General_CP1_CI_AS",
                PublicDataEndpointEnabled = false,
                ProxyOverride = new Sql.Models.ManagedInstanceProxyOverride("Redirect"),
                MaintenanceConfigurationId = "/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_MI_1",
                MinimalTlsVersion = "1.2",
            };

            await managedInstance.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync3()
        {
            // Example: Update managed instance with minimal properties
            var managedInstance = await GetManagedInstanceAsync();
            Sql.Models.ManagedInstanceUpdate parameters = new Sql.Models.ManagedInstanceUpdate();

            await managedInstance.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetInaccessibleManagedDatabasesAsync()
        {
            // Example: List inaccessible managed databases by managed instances
            var managedInstance = await GetManagedInstanceAsync();

            managedInstance.GetInaccessibleManagedDatabasesAsync();
        }

        [RecordedTest]
        public async Task GetTopQueriesAsync()
        {
            // Example: Obtain list of instance's top resource consuming queries.
            var managedInstance = await GetManagedInstanceAsync();
            int? numberOfQueries = null;
            string databases = null;
            string startTime = null;
            string endTime = null;
            Sql.Models.QueryTimeGrainType? interval = new Sql.Models.QueryTimeGrainType("PT1H");
            Sql.Models.AggregationFunctionType? aggregationFunction = null;
            Sql.Models.MetricType? observationMetric = new Sql.Models.MetricType("duration");

            managedInstance.GetTopQueriesAsync(numberOfQueries, databases, startTime, endTime, interval, aggregationFunction, observationMetric);
        }

        [RecordedTest]
        public async Task GetTopQueriesAsync2()
        {
            // Example: Obtain list of instance's top resource consuming queries. Full-blown request and response.
            var managedInstance = await GetManagedInstanceAsync();
            int? numberOfQueries = null;
            string databases = "db1,db2";
            string startTime = "2020-03-10T12:00:00Z";
            string endTime = "2020-03-12T12:00:00Z";
            Sql.Models.QueryTimeGrainType? interval = new Sql.Models.QueryTimeGrainType("P1D");
            Sql.Models.AggregationFunctionType? aggregationFunction = null;
            Sql.Models.MetricType? observationMetric = new Sql.Models.MetricType("cpu");

            managedInstance.GetTopQueriesAsync(numberOfQueries, databases, startTime, endTime, interval, aggregationFunction, observationMetric);
        }

        [RecordedTest]
        public async Task GetTopQueriesAsync3()
        {
            // Example: Obtain list of instance's top resource consuming queries. Minimal request and response.
            var managedInstance = await GetManagedInstanceAsync();
            int? numberOfQueries = null;
            string databases = null;
            string startTime = null;
            string endTime = null;
            Sql.Models.QueryTimeGrainType? interval = null;
            Sql.Models.AggregationFunctionType? aggregationFunction = null;
            Sql.Models.MetricType? observationMetric = null;

            managedInstance.GetTopQueriesAsync(numberOfQueries, databases, startTime, endTime, interval, aggregationFunction, observationMetric);
        }

        [RecordedTest]
        public async Task FailoverAsync()
        {
            // Example: Failover a managed instance.
            var managedInstance = await GetManagedInstanceAsync();
            Sql.Models.ReplicaType? replicaType = new Sql.Models.ReplicaType("Primary");

            await managedInstance.FailoverAsync(replicaType);
        }

        [RecordedTest]
        public async Task CreateManagedInstanceTdeCertificateAsync()
        {
            // Example: Upload a TDE certificate
            var managedInstance = await GetManagedInstanceAsync();
            Sql.Models.TdeCertificate parameters = new Sql.Models.TdeCertificate()
            {
                PrivateBlob = "MIIXXXXXXXX",
            };

            await managedInstance.CreateManagedInstanceTdeCertificateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetServerTrustGroupsAsync()
        {
            // Example: List server trust groups by managed instance
            var managedInstance = await GetManagedInstanceAsync();

            managedInstance.GetServerTrustGroupsAsync();
        }

        [RecordedTest]
        public async Task SqlAgentConfigurationGetAsync()
        {
            // Example: Gets current instance sql agent configuration.
            var managedInstance = await GetManagedInstanceAsync();
            var sqlAgentConfiguration = managedInstance.GetSqlAgentConfiguration();

            await sqlAgentConfiguration.GetAsync();
        }
    }
}
