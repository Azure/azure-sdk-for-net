// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ElasticPool. </summary>
    public partial class ElasticPoolMockTests : MockTestBase
    {
        public ElasticPoolMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ElasticPoolCollection> GetElasticPoolCollectionAsync(string resourceGroupName, string serverName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            ElasticPoolCollection elasticPoolCollection = sqlServer.GetElasticPools();
            return elasticPoolCollection;
        }

        private async Task<Sql.ElasticPool> GetElasticPoolAsync()
        {
            var collection = await GetElasticPoolCollectionAsync("sqlcrudtest-2369", "sqlcrudtest-8069");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "sqlcrudtest-8102");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get an elastic pool
            var elasticPool = await GetElasticPoolAsync();

            await elasticPool.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete an elastic pool
            var elasticPool = await GetElasticPoolAsync();

            await elasticPool.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Assigns maintenance configuration to an elastic pool.
            var elasticPool = await GetElasticPoolAsync();
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate()
            {
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1",
            };

            await elasticPool.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync2()
        {
            // Example: Resets maintenance configuration of an elastic pool to default.
            var elasticPool = await GetElasticPoolAsync();
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate()
            {
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            };

            await elasticPool.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync3()
        {
            // Example: Update an elastic pool with all parameter
            var elasticPool = await GetElasticPoolAsync();
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate()
            {
                Sku = new Sql.Models.Sku("BC_Gen4")
                {
                    Tier = "BusinessCritical",
                    Capacity = 2,
                },
                PerDatabaseSettings = new Sql.Models.ElasticPoolPerDatabaseSettings()
                {
                    MinCapacity = 0.25,
                    MaxCapacity = 1,
                },
                ZoneRedundant = true,
                LicenseType = new Sql.Models.ElasticPoolLicenseType("LicenseIncluded"),
            };

            await elasticPool.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task UpdateAsync4()
        {
            // Example: Update an elastic pool with minimum parameters
            var elasticPool = await GetElasticPoolAsync();
            Sql.Models.ElasticPoolUpdate parameters = new Sql.Models.ElasticPoolUpdate();

            await elasticPool.UpdateAsync(parameters);
        }

        [RecordedTest]
        public async Task GetDatabasesAsync()
        {
            // Example: Gets a list of databases in an elastic pool.
            var elasticPool = await GetElasticPoolAsync();

            elasticPool.GetDatabasesAsync();
        }

        [RecordedTest]
        public async Task GetMetricsAsync()
        {
            // Example: List database usage metrics
            var elasticPool = await GetElasticPoolAsync();
            string filter = "name/value eq 'cpu_percent' and timeGrain eq '00:10:00' and startTime eq '2017-06-02T18:35:00Z' and endTime eq '2017-06-02T18:55:00Z'";

            elasticPool.GetMetricsAsync(filter);
        }

        [RecordedTest]
        public async Task GetMetricDefinitionsAsync()
        {
            // Example: List database usage metrics
            var elasticPool = await GetElasticPoolAsync();

            elasticPool.GetMetricDefinitionsAsync();
        }

        [RecordedTest]
        public async Task FailoverAsync()
        {
            // Example: Failover an elastic pool
            var elasticPool = await GetElasticPoolAsync();

            await elasticPool.FailoverAsync();
        }

        [RecordedTest]
        public async Task GetElasticPoolActivitiesAsync()
        {
            // Example: List Elastic pool activity
            var elasticPool = await GetElasticPoolAsync();

            elasticPool.GetElasticPoolActivitiesAsync();
        }

        [RecordedTest]
        public async Task GetElasticPoolDatabaseActivitiesAsync()
        {
            // Example: List elastic pool database activity
            var elasticPool = await GetElasticPoolAsync();

            elasticPool.GetElasticPoolDatabaseActivitiesAsync();
        }

        [RecordedTest]
        public async Task CancelElasticPoolOperationAsync()
        {
            // Example: Cancel the elastic pool management operation
            var elasticPool = await GetElasticPoolAsync();
            Guid operationId = Guid.Parse("f779414b-e748-4925-8cfe-c8598f7660ae");

            await elasticPool.CancelElasticPoolOperationAsync(operationId);
        }

        [RecordedTest]
        public async Task GetElasticPoolOperationsAsync()
        {
            // Example: List the elastic pool management operations
            var elasticPool = await GetElasticPoolAsync();

            elasticPool.GetElasticPoolOperationsAsync();
        }
    }
}
