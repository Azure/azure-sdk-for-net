// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ManagedInstance. </summary>
    public partial class ManagedInstanceCollectionMockTests : MockTestBase
    {
        public ManagedInstanceCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ManagedInstanceCollection> GetManagedInstanceCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ManagedInstanceCollection managedInstanceCollection = resourceGroup.GetManagedInstances();
            return managedInstanceCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create managed instance with all properties
            var collection = await GetManagedInstanceCollectionAsync("testrg");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "testinstance");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create managed instance with minimal properties
            var collection = await GetManagedInstanceCollectionAsync("testrg");
            string managedInstanceName = "testinstance";
            Sql.ManagedInstanceData parameters = new Sql.ManagedInstanceData("Japan East")
            {
                Sku = new Sql.Models.Sku("GP_Gen4")
                {
                    Tier = "GeneralPurpose",
                },
                AdministratorLogin = "dummylogin",
                AdministratorLoginPassword = "PLACEHOLDER",
                SubnetId = "/subscriptions/20D7082A-0FC7-4468-82BD-542694D5042B/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1",
                LicenseType = new Sql.Models.ManagedInstanceLicenseType("LicenseIncluded"),
                VCores = 8,
                StorageSizeInGB = 1024,
            };

            await collection.CreateOrUpdateAsync(managedInstanceName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get managed instance
            var collection = await GetManagedInstanceCollectionAsync("testrg");
            await TestHelper.GetExampleInstanceAsync(collection, "testinstance");
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get managed instance with $expand=administrators
            var collection = await GetManagedInstanceCollectionAsync("testrg");
            string managedInstanceName = "testinstance";
            string expand = null;

            await collection.GetAsync(managedInstanceName, expand);
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: List managed instances by resource group
            var collection = await GetManagedInstanceCollectionAsync("Test1");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }

        [RecordedTest]
        public async Task GetAllAsync2()
        {
            // Example: List managed instances by resource group with $expand=administrators
            var collection = await GetManagedInstanceCollectionAsync("Test1");
            string expand = null;

            collection.GetAllAsync(expand);
        }
    }
}
