// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ElasticPool. </summary>
    public partial class ElasticPoolCollectionMockTests : MockTestBase
    {
        public ElasticPoolCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ElasticPoolCollection> GetElasticPoolCollectionAsync(string resourceGroupName, string serverName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            ElasticPoolCollection elasticPoolCollection = sqlServer.GetElasticPools();
            return elasticPoolCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update elastic pool with all parameter
            var collection = await GetElasticPoolCollectionAsync("sqlcrudtest-2369", "sqlcrudtest-8069");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "sqlcrudtest-8102");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create or update elastic pool with maintenance configuration parameter
            var collection = await GetElasticPoolCollectionAsync("sqlcrudtest-2369", "sqlcrudtest-8069");
            string elasticPoolName = "sqlcrudtest-8102";
            Sql.ElasticPoolData parameters = new Sql.ElasticPoolData("Japan East")
            {
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_JapanEast_1",
            };

            await collection.CreateOrUpdateAsync(elasticPoolName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create or update elastic pool with minimum parameters
            var collection = await GetElasticPoolCollectionAsync("sqlcrudtest-2369", "sqlcrudtest-8069");
            string elasticPoolName = "sqlcrudtest-8102";
            Sql.ElasticPoolData parameters = new Sql.ElasticPoolData("Japan East");

            await collection.CreateOrUpdateAsync(elasticPoolName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get an elastic pool
            var collection = await GetElasticPoolCollectionAsync("sqlcrudtest-2369", "sqlcrudtest-8069");
            await TestHelper.GetExampleInstanceAsync(collection, "sqlcrudtest-8102");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: Get all elastic pools in a server
            var collection = await GetElasticPoolCollectionAsync("sqlcrudtest-2369", "sqlcrudtest-8069");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
