// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for ExtendedDatabaseBlobAuditingPolicy. </summary>
    public partial class ExtendedDatabaseBlobAuditingPolicyCollectionMockTests : MockTestBase
    {
        public ExtendedDatabaseBlobAuditingPolicyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.ExtendedDatabaseBlobAuditingPolicyCollection> GetExtendedDatabaseBlobAuditingPolicyCollectionAsync(string resourceGroupName, string serverName, string databaseName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            var sqlDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlDatabaseCollection, databaseName);
            SqlDatabase sqlDatabase = sqlDatabaseOperation.Value;
            ExtendedDatabaseBlobAuditingPolicyCollection extendedDatabaseBlobAuditingPolicyCollection = sqlDatabase.GetExtendedDatabaseBlobAuditingPolicies();
            return extendedDatabaseBlobAuditingPolicyCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update an extended database's azure monitor auditing policy with minimal parameters
            var collection = await GetExtendedDatabaseBlobAuditingPolicyCollectionAsync("blobauditingtest-4799", "blobauditingtest-6440", "testdb");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create or update an extended database's blob auditing policy with all parameters
            var collection = await GetExtendedDatabaseBlobAuditingPolicyCollectionAsync("blobauditingtest-4799", "blobauditingtest-6440", "testdb");
            Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName = new Sql.Models.BlobAuditingPolicyName("default");
            Sql.ExtendedDatabaseBlobAuditingPolicyData parameters = new Sql.ExtendedDatabaseBlobAuditingPolicyData()
            {
                PredicateExpression = "statement = 'select 1'",
                RetentionDays = 6,
                IsStorageSecondaryKeyInUse = false,
                IsAzureMonitorTargetEnabled = true,
                QueueDelayMs = 4000,
                State = Sql.Models.BlobAuditingPolicyState.Enabled,
                StorageEndpoint = "https://mystorage.blob.core.windows.net",
                StorageAccountAccessKey = "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
                StorageAccountSubscriptionId = System.Guid.Parse("00000000-1234-0000-5678-000000000000"),
            };

            await collection.CreateOrUpdateAsync(blobAuditingPolicyName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create or update an extended database's blob auditing policy with minimal parameters
            var collection = await GetExtendedDatabaseBlobAuditingPolicyCollectionAsync("blobauditingtest-4799", "blobauditingtest-6440", "testdb");
            Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName = new Sql.Models.BlobAuditingPolicyName("default");
            Sql.ExtendedDatabaseBlobAuditingPolicyData parameters = new Sql.ExtendedDatabaseBlobAuditingPolicyData()
            {
                State = Sql.Models.BlobAuditingPolicyState.Enabled,
                StorageEndpoint = "https://mystorage.blob.core.windows.net",
                StorageAccountAccessKey = "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
            };

            await collection.CreateOrUpdateAsync(blobAuditingPolicyName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get an extended database's blob auditing policy
            var collection = await GetExtendedDatabaseBlobAuditingPolicyCollectionAsync("blobauditingtest-6852", "blobauditingtest-2080", "testdb");
            await TestHelper.GetExampleInstanceAsync(collection);
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: List extended auditing settings of a database
            var collection = await GetExtendedDatabaseBlobAuditingPolicyCollectionAsync("blobauditingtest-6852", "blobauditingtest-2080", "testdb");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
