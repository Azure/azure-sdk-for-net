// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SyncMember. </summary>
    public partial class SyncMemberCollectionMockTests : MockTestBase
    {
        public SyncMemberCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.SyncMemberCollection> GetSyncMemberCollectionAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            var sqlDatabaseOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlDatabaseCollection, databaseName);
            SqlDatabase sqlDatabase = sqlDatabaseOperation.Value;
            SyncGroupCollection syncGroupCollection = sqlDatabase.GetSyncGroups();
            var syncGroupOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(syncGroupCollection, syncGroupName);
            SyncGroup syncGroup = syncGroupOperation.Value;
            SyncMemberCollection syncMemberCollection = syncGroup.GetSyncMembers();
            return syncMemberCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a new sync member
            var collection = await GetSyncMemberCollectionAsync("syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "syncmembercrud-4879");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Update a sync member
            var collection = await GetSyncMemberCollectionAsync("syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            string syncMemberName = "syncmembercrud-4879";
            Sql.SyncMemberData parameters = new Sql.SyncMemberData()
            {
                DatabaseType = new Sql.Models.SyncMemberDbType("AzureSqlDatabase"),
                SyncMemberAzureDatabaseResourceId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/syncgroupcrud-65440/providers/Microsoft.Sql/servers/syncgroupcrud-8475/databases/syncgroupcrud-4328",
                UsePrivateLinkConnection = true,
                ServerName = "syncgroupcrud-3379.database.windows.net",
                DatabaseName = "syncgroupcrud-7421",
                UserName = "myUser",
                SyncDirection = new Sql.Models.SyncDirection("Bidirectional"),
            };

            await collection.CreateOrUpdateAsync(syncMemberName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a sync member
            var collection = await GetSyncMemberCollectionAsync("syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            await TestHelper.GetExampleInstanceAsync(collection, "syncmembercrud-4879");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: List sync members under a sync group
            var collection = await GetSyncMemberCollectionAsync("syncgroupcrud-65440", "syncgroupcrud-8475", "syncgroupcrud-4328", "syncgroupcrud-3187");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
