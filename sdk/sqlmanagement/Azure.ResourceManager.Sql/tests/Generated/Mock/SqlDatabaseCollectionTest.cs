// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Sql;
using Azure.ResourceManager.Sql.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Sql.Tests.Mock
{
    /// <summary> Test for SqlDatabase. </summary>
    public partial class SqlDatabaseCollectionMockTests : MockTestBase
    {
        public SqlDatabaseCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Sql.SqlDatabaseCollection> GetSqlDatabaseCollectionAsync(string resourceGroupName, string serverName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SqlServerCollection sqlServerCollection = resourceGroup.GetSqlServers();
            var sqlServerOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(sqlServerCollection, serverName);
            SqlServer sqlServer = sqlServerOperation.Value;
            SqlDatabaseCollection sqlDatabaseCollection = sqlServer.GetSqlDatabases();
            return sqlDatabaseCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Creates a VCore database by specifying service objective name.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "testdb");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Creates a VCore database by specifying sku name and capacity.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                Sku = new Sql.Models.Sku("BC_Gen4")
                {
                    Capacity = 2,
                },
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Creates a database as a copy.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "dbcopy";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                Sku = new Sql.Models.Sku("S0")
                {
                    Tier = "Standard",
                },
                CreateMode = new Sql.Models.CreateMode("Copy"),
                SourceDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb",
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync4()
        {
            // Example: Creates a database as an on-line secondary.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                Sku = new Sql.Models.Sku("S0")
                {
                    Tier = "Standard",
                },
                CreateMode = new Sql.Models.CreateMode("Secondary"),
                SourceDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/testdb",
                SecondaryType = new Sql.Models.SecondaryType("Geo"),
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync5()
        {
            // Example: Creates a database as named replica secondary.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                Sku = new Sql.Models.Sku("HS_Gen4")
                {
                    Tier = "Hyperscale",
                    Capacity = 2,
                },
                CreateMode = new Sql.Models.CreateMode("Secondary"),
                SourceDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/primarydb",
                SecondaryType = new Sql.Models.SecondaryType("Named"),
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync6()
        {
            // Example: Creates a database from PointInTimeRestore.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "dbpitr";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                CreateMode = new Sql.Models.CreateMode("PointInTimeRestore"),
                SourceDatabaseId = "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SoutheastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb",
                RestorePointInTime = DateTimeOffset.Parse("2020-10-22T05:35:31.503Z"),
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync7()
        {
            // Example: Creates a database with default mode.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                Sku = new Sql.Models.Sku("S0")
                {
                    Tier = "Standard",
                },
                CreateMode = new Sql.Models.CreateMode("Default"),
                Collation = "SQL_Latin1_General_CP1_CI_AS",
                MaxSizeBytes = 1073741824,
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync8()
        {
            // Example: Creates a database with ledger on.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                IsLedgerOn = true,
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync9()
        {
            // Example: Creates a database with minimum number of parameters.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia");

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync10()
        {
            // Example: Creates a database with preferred maintenance window.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                Sku = new Sql.Models.Sku("S2")
                {
                    Tier = "Standard",
                },
                CreateMode = new Sql.Models.CreateMode("Default"),
                Collation = "SQL_Latin1_General_CP1_CI_AS",
                MaxSizeBytes = 1073741824,
                MaintenanceConfigurationId = "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync11()
        {
            // Example: Creates a database with specified backup storage redundancy.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            string databaseName = "testdb";
            Sql.SqlDatabaseData parameters = new Sql.SqlDatabaseData("southeastasia")
            {
                RequestedBackupStorageRedundancy = new Sql.Models.RequestedBackupStorageRedundancy("Zone"),
            };

            await collection.CreateOrUpdateAsync(databaseName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Gets a database.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            await TestHelper.GetExampleInstanceAsync(collection, "testdb");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: Gets a list of databases.
            var collection = await GetSqlDatabaseCollectionAsync("Default-SQL-SouthEastAsia", "testsvr");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
