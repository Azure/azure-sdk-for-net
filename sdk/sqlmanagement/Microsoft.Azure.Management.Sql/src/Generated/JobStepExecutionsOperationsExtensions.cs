// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobStepExecutionsOperations.
    /// </summary>
    public static partial class JobStepExecutionsOperationsExtensions
    {
            /// <summary>
            /// Lists the step executions of a job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='jobAgentName'>
            /// The name of the job agent.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job to get.
            /// </param>
            /// <param name='jobExecutionId'>
            /// The id of the job execution
            /// </param>
            /// <param name='createTimeMin'>
            /// If specified, only job executions created at or after the specified time
            /// are included.
            /// </param>
            /// <param name='createTimeMax'>
            /// If specified, only job executions created before the specified time are
            /// included.
            /// </param>
            /// <param name='endTimeMin'>
            /// If specified, only job executions completed at or after the specified time
            /// are included.
            /// </param>
            /// <param name='endTimeMax'>
            /// If specified, only job executions completed before the specified time are
            /// included.
            /// </param>
            /// <param name='isActive'>
            /// If specified, only active or only completed job executions are included.
            /// </param>
            /// <param name='skip'>
            /// The number of elements in the collection to skip.
            /// </param>
            /// <param name='top'>
            /// The number of elements to return from the collection.
            /// </param>
            public static IPage<JobExecution> ListByJobExecution(this IJobStepExecutionsOperations operations, string resourceGroupName, string serverName, string jobAgentName, string jobName, System.Guid jobExecutionId, System.DateTime? createTimeMin = default(System.DateTime?), System.DateTime? createTimeMax = default(System.DateTime?), System.DateTime? endTimeMin = default(System.DateTime?), System.DateTime? endTimeMax = default(System.DateTime?), bool? isActive = default(bool?), int? skip = default(int?), int? top = default(int?))
            {
                return operations.ListByJobExecutionAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the step executions of a job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='jobAgentName'>
            /// The name of the job agent.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job to get.
            /// </param>
            /// <param name='jobExecutionId'>
            /// The id of the job execution
            /// </param>
            /// <param name='createTimeMin'>
            /// If specified, only job executions created at or after the specified time
            /// are included.
            /// </param>
            /// <param name='createTimeMax'>
            /// If specified, only job executions created before the specified time are
            /// included.
            /// </param>
            /// <param name='endTimeMin'>
            /// If specified, only job executions completed at or after the specified time
            /// are included.
            /// </param>
            /// <param name='endTimeMax'>
            /// If specified, only job executions completed before the specified time are
            /// included.
            /// </param>
            /// <param name='isActive'>
            /// If specified, only active or only completed job executions are included.
            /// </param>
            /// <param name='skip'>
            /// The number of elements in the collection to skip.
            /// </param>
            /// <param name='top'>
            /// The number of elements to return from the collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobExecution>> ListByJobExecutionAsync(this IJobStepExecutionsOperations operations, string resourceGroupName, string serverName, string jobAgentName, string jobName, System.Guid jobExecutionId, System.DateTime? createTimeMin = default(System.DateTime?), System.DateTime? createTimeMax = default(System.DateTime?), System.DateTime? endTimeMin = default(System.DateTime?), System.DateTime? endTimeMax = default(System.DateTime?), bool? isActive = default(bool?), int? skip = default(int?), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByJobExecutionWithHttpMessagesAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a step execution of a job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='jobAgentName'>
            /// The name of the job agent.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job to get.
            /// </param>
            /// <param name='jobExecutionId'>
            /// The unique id of the job execution
            /// </param>
            /// <param name='stepName'>
            /// The name of the step.
            /// </param>
            public static JobExecution Get(this IJobStepExecutionsOperations operations, string resourceGroupName, string serverName, string jobAgentName, string jobName, System.Guid jobExecutionId, string stepName)
            {
                return operations.GetAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a step execution of a job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource. You can obtain
            /// this value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='serverName'>
            /// The name of the server.
            /// </param>
            /// <param name='jobAgentName'>
            /// The name of the job agent.
            /// </param>
            /// <param name='jobName'>
            /// The name of the job to get.
            /// </param>
            /// <param name='jobExecutionId'>
            /// The unique id of the job execution
            /// </param>
            /// <param name='stepName'>
            /// The name of the step.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobExecution> GetAsync(this IJobStepExecutionsOperations operations, string resourceGroupName, string serverName, string jobAgentName, string jobName, System.Guid jobExecutionId, string stepName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serverName, jobAgentName, jobName, jobExecutionId, stepName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the step executions of a job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<JobExecution> ListByJobExecutionNext(this IJobStepExecutionsOperations operations, string nextPageLink)
            {
                return operations.ListByJobExecutionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the step executions of a job execution.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobExecution>> ListByJobExecutionNextAsync(this IJobStepExecutionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByJobExecutionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
