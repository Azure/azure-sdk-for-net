// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An update request for an Azure SQL Database managed instance.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ManagedInstanceUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ManagedInstanceUpdate class.
        /// </summary>
        public ManagedInstanceUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedInstanceUpdate class.
        /// </summary>
        /// <param name="sku">Managed instance sku</param>
        /// <param name="identity">Managed instance identity</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Creating', 'Deleting', 'Updating', 'Unknown', 'Succeeded',
        /// 'Failed'</param>
        /// <param name="managedInstanceCreateMode">Specifies the mode of
        /// database creation.
        ///
        /// Default: Regular instance creation.
        ///
        /// Restore: Creates an instance by restoring a set of backups to
        /// specific point in time. RestorePointInTime and
        /// SourceManagedInstanceId must be specified. Possible values include:
        /// 'Default', 'PointInTimeRestore'</param>
        /// <param name="fullyQualifiedDomainName">The fully qualified domain
        /// name of the managed instance.</param>
        /// <param name="administratorLogin">Administrator username for the
        /// managed instance. Can only be specified when the managed instance
        /// is being created (and is required for creation).</param>
        /// <param name="administratorLoginPassword">The administrator login
        /// password (required for managed instance creation).</param>
        /// <param name="subnetId">Subnet resource ID for the managed
        /// instance.</param>
        /// <param name="state">The state of the managed instance.</param>
        /// <param name="licenseType">The license type. Possible values are
        /// 'LicenseIncluded' (regular price inclusive of a new SQL license)
        /// and 'BasePrice' (discounted AHB price for bringing your own SQL
        /// licenses). Possible values include: 'LicenseIncluded',
        /// 'BasePrice'</param>
        /// <param name="vCores">The number of vCores. Allowed values: 8, 16,
        /// 24, 32, 40, 64, 80.</param>
        /// <param name="storageSizeInGB">Storage size in GB. Minimum value:
        /// 32. Maximum value: 8192. Increments of 32 GB allowed only.</param>
        /// <param name="collation">Collation of the managed instance.</param>
        /// <param name="dnsZone">The Dns Zone that the managed instance is
        /// in.</param>
        /// <param name="dnsZonePartner">The resource id of another managed
        /// instance whose DNS zone this managed instance will share after
        /// creation.</param>
        /// <param name="publicDataEndpointEnabled">Whether or not the public
        /// data endpoint is enabled.</param>
        /// <param name="sourceManagedInstanceId">The resource identifier of
        /// the source managed instance associated with create operation of
        /// this instance.</param>
        /// <param name="restorePointInTime">Specifies the point in time
        /// (ISO8601 format) of the source database that will be restored to
        /// create the new database.</param>
        /// <param name="proxyOverride">Connection type used for connecting to
        /// the instance. Possible values include: 'Proxy', 'Redirect',
        /// 'Default'</param>
        /// <param name="timezoneId">Id of the timezone. Allowed values are
        /// timezones supported by Windows.
        /// Windows keeps details on supported timezones, including the id, in
        /// registry under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time
        /// Zones.
        /// You can get those registry values via SQL Server by querying SELECT
        /// name AS timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is "Pacific Standard Time" or "W.
        /// Europe Standard Time".</param>
        /// <param name="instancePoolId">The Id of the instance pool this
        /// managed server belongs to.</param>
        /// <param name="maintenanceConfigurationId">Specifies maintenance
        /// configuration id to apply to this managed instance.</param>
        /// <param name="privateEndpointConnections">List of private endpoint
        /// connections on a managed instance.</param>
        /// <param name="minimalTlsVersion">Minimal TLS version. Allowed
        /// values: 'None', '1.0', '1.1', '1.2'</param>
        /// <param name="storageAccountType">The storage account type used to
        /// store backups for this instance. The options are LRS
        /// (LocallyRedundantStorage), ZRS (ZoneRedundantStorage) and GRS
        /// (GeoRedundantStorage). Possible values include: 'GRS', 'LRS',
        /// 'ZRS'</param>
        /// <param name="zoneRedundant">Whether or not the multi-az is
        /// enabled.</param>
        /// <param name="primaryUserAssignedIdentityId">The resource id of a
        /// user assigned identity to be used by default.</param>
        /// <param name="keyId">A CMK URI of the key to use for
        /// encryption.</param>
        /// <param name="administrators">The Azure Active Directory
        /// administrator of the server.</param>
        /// <param name="tags">Resource tags.</param>
        public ManagedInstanceUpdate(Sku sku = default(Sku), ResourceIdentity identity = default(ResourceIdentity), string provisioningState = default(string), string managedInstanceCreateMode = default(string), string fullyQualifiedDomainName = default(string), string administratorLogin = default(string), string administratorLoginPassword = default(string), string subnetId = default(string), string state = default(string), string licenseType = default(string), int? vCores = default(int?), int? storageSizeInGB = default(int?), string collation = default(string), string dnsZone = default(string), string dnsZonePartner = default(string), bool? publicDataEndpointEnabled = default(bool?), string sourceManagedInstanceId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), string proxyOverride = default(string), string timezoneId = default(string), string instancePoolId = default(string), string maintenanceConfigurationId = default(string), IList<ManagedInstancePecProperty> privateEndpointConnections = default(IList<ManagedInstancePecProperty>), string minimalTlsVersion = default(string), string storageAccountType = default(string), bool? zoneRedundant = default(bool?), string primaryUserAssignedIdentityId = default(string), string keyId = default(string), ManagedInstanceExternalAdministrator administrators = default(ManagedInstanceExternalAdministrator), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Sku = sku;
            Identity = identity;
            ProvisioningState = provisioningState;
            ManagedInstanceCreateMode = managedInstanceCreateMode;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            SubnetId = subnetId;
            State = state;
            LicenseType = licenseType;
            VCores = vCores;
            StorageSizeInGB = storageSizeInGB;
            Collation = collation;
            DnsZone = dnsZone;
            DnsZonePartner = dnsZonePartner;
            PublicDataEndpointEnabled = publicDataEndpointEnabled;
            SourceManagedInstanceId = sourceManagedInstanceId;
            RestorePointInTime = restorePointInTime;
            ProxyOverride = proxyOverride;
            TimezoneId = timezoneId;
            InstancePoolId = instancePoolId;
            MaintenanceConfigurationId = maintenanceConfigurationId;
            PrivateEndpointConnections = privateEndpointConnections;
            MinimalTlsVersion = minimalTlsVersion;
            StorageAccountType = storageAccountType;
            ZoneRedundant = zoneRedundant;
            PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            KeyId = keyId;
            Administrators = administrators;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets managed instance sku
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets managed instance identity
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ResourceIdentity Identity { get; set; }

        /// <summary>
        /// Gets possible values include: 'Creating', 'Deleting', 'Updating',
        /// 'Unknown', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets specifies the mode of database creation.
        ///
        /// Default: Regular instance creation.
        ///
        /// Restore: Creates an instance by restoring a set of backups to
        /// specific point in time. RestorePointInTime and
        /// SourceManagedInstanceId must be specified. Possible values include:
        /// 'Default', 'PointInTimeRestore'
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedInstanceCreateMode")]
        public string ManagedInstanceCreateMode { get; set; }

        /// <summary>
        /// Gets the fully qualified domain name of the managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; private set; }

        /// <summary>
        /// Gets or sets administrator username for the managed instance. Can
        /// only be specified when the managed instance is being created (and
        /// is required for creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets the administrator login password (required for managed
        /// instance creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets subnet resource ID for the managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnetId")]
        public string SubnetId { get; set; }

        /// <summary>
        /// Gets the state of the managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets or sets the license type. Possible values are
        /// 'LicenseIncluded' (regular price inclusive of a new SQL license)
        /// and 'BasePrice' (discounted AHB price for bringing your own SQL
        /// licenses). Possible values include: 'LicenseIncluded', 'BasePrice'
        /// </summary>
        [JsonProperty(PropertyName = "properties.licenseType")]
        public string LicenseType { get; set; }

        /// <summary>
        /// Gets or sets the number of vCores. Allowed values: 8, 16, 24, 32,
        /// 40, 64, 80.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vCores")]
        public int? VCores { get; set; }

        /// <summary>
        /// Gets or sets storage size in GB. Minimum value: 32. Maximum value:
        /// 8192. Increments of 32 GB allowed only.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageSizeInGB")]
        public int? StorageSizeInGB { get; set; }

        /// <summary>
        /// Gets or sets collation of the managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.collation")]
        public string Collation { get; set; }

        /// <summary>
        /// Gets the Dns Zone that the managed instance is in.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsZone")]
        public string DnsZone { get; private set; }

        /// <summary>
        /// Gets or sets the resource id of another managed instance whose DNS
        /// zone this managed instance will share after creation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsZonePartner")]
        public string DnsZonePartner { get; set; }

        /// <summary>
        /// Gets or sets whether or not the public data endpoint is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicDataEndpointEnabled")]
        public bool? PublicDataEndpointEnabled { get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source managed instance
        /// associated with create operation of this instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceManagedInstanceId")]
        public string SourceManagedInstanceId { get; set; }

        /// <summary>
        /// Gets or sets specifies the point in time (ISO8601 format) of the
        /// source database that will be restored to create the new database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.restorePointInTime")]
        public System.DateTime? RestorePointInTime { get; set; }

        /// <summary>
        /// Gets or sets connection type used for connecting to the instance.
        /// Possible values include: 'Proxy', 'Redirect', 'Default'
        /// </summary>
        [JsonProperty(PropertyName = "properties.proxyOverride")]
        public string ProxyOverride { get; set; }

        /// <summary>
        /// Gets or sets id of the timezone. Allowed values are timezones
        /// supported by Windows.
        /// Windows keeps details on supported timezones, including the id, in
        /// registry under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time
        /// Zones.
        /// You can get those registry values via SQL Server by querying SELECT
        /// name AS timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is "Pacific Standard Time" or "W.
        /// Europe Standard Time".
        /// </summary>
        [JsonProperty(PropertyName = "properties.timezoneId")]
        public string TimezoneId { get; set; }

        /// <summary>
        /// Gets or sets the Id of the instance pool this managed server
        /// belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instancePoolId")]
        public string InstancePoolId { get; set; }

        /// <summary>
        /// Gets or sets specifies maintenance configuration id to apply to
        /// this managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maintenanceConfigurationId")]
        public string MaintenanceConfigurationId { get; set; }

        /// <summary>
        /// Gets list of private endpoint connections on a managed instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public IList<ManagedInstancePecProperty> PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Gets or sets minimal TLS version. Allowed values: 'None', '1.0',
        /// '1.1', '1.2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.minimalTlsVersion")]
        public string MinimalTlsVersion { get; set; }

        /// <summary>
        /// Gets or sets the storage account type used to store backups for
        /// this instance. The options are LRS (LocallyRedundantStorage), ZRS
        /// (ZoneRedundantStorage) and GRS (GeoRedundantStorage). Possible
        /// values include: 'GRS', 'LRS', 'ZRS'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountType")]
        public string StorageAccountType { get; set; }

        /// <summary>
        /// Gets or sets whether or not the multi-az is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.zoneRedundant")]
        public bool? ZoneRedundant { get; set; }

        /// <summary>
        /// Gets or sets the resource id of a user assigned identity to be used
        /// by default.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryUserAssignedIdentityId")]
        public string PrimaryUserAssignedIdentityId { get; set; }

        /// <summary>
        /// Gets or sets a CMK URI of the key to use for encryption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyId")]
        public string KeyId { get; set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory administrator of the
        /// server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administrators")]
        public ManagedInstanceExternalAdministrator Administrators { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (PrivateEndpointConnections != null)
            {
                foreach (var element in PrivateEndpointConnections)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
