// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A database table resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseTable : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseTable class.
        /// </summary>
        public DatabaseTable()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseTable class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="temporalType">The table temporal type. Possible values
        /// include: 'NonTemporalTable', 'HistoryTable',
        /// 'SystemVersionedTemporalTable'</param>
        /// <param name="memoryOptimized">Whether or not the table is memory
        /// optimized.</param>
        public DatabaseTable(string id = default(string), string name = default(string), string type = default(string), string temporalType = default(string), bool? memoryOptimized = default(bool?))
            : base(id, name, type)
        {
            TemporalType = temporalType;
            MemoryOptimized = memoryOptimized;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the table temporal type. Possible values include:
        /// 'NonTemporalTable', 'HistoryTable', 'SystemVersionedTemporalTable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.temporalType")]
        public string TemporalType { get; set; }

        /// <summary>
        /// Gets or sets whether or not the table is memory optimized.
        /// </summary>
        [JsonProperty(PropertyName = "properties.memoryOptimized")]
        public bool? MemoryOptimized { get; set; }

    }
}
