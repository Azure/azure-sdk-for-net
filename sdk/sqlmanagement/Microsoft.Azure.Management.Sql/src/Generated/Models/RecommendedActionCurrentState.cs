// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for RecommendedActionCurrentState.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(RecommendedActionCurrentStateConverter))]
    public struct RecommendedActionCurrentState : System.IEquatable<RecommendedActionCurrentState>
    {
        private RecommendedActionCurrentState(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly RecommendedActionCurrentState Active = "Active";

        public static readonly RecommendedActionCurrentState Pending = "Pending";

        public static readonly RecommendedActionCurrentState Executing = "Executing";

        public static readonly RecommendedActionCurrentState Verifying = "Verifying";

        public static readonly RecommendedActionCurrentState PendingRevert = "PendingRevert";

        public static readonly RecommendedActionCurrentState RevertCancelled = "RevertCancelled";

        public static readonly RecommendedActionCurrentState Reverting = "Reverting";

        public static readonly RecommendedActionCurrentState Reverted = "Reverted";

        public static readonly RecommendedActionCurrentState Ignored = "Ignored";

        public static readonly RecommendedActionCurrentState Expired = "Expired";

        public static readonly RecommendedActionCurrentState Monitoring = "Monitoring";

        public static readonly RecommendedActionCurrentState Resolved = "Resolved";

        public static readonly RecommendedActionCurrentState Success = "Success";

        public static readonly RecommendedActionCurrentState Error = "Error";


        /// <summary>
        /// Underlying value of enum RecommendedActionCurrentState
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for RecommendedActionCurrentState
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type RecommendedActionCurrentState
        /// </summary>
        public bool Equals(RecommendedActionCurrentState e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to
        /// RecommendedActionCurrentState
        /// </summary>
        public static implicit operator RecommendedActionCurrentState(string value)
        {
            return new RecommendedActionCurrentState(value);
        }

        /// <summary>
        /// Implicit operator to convert RecommendedActionCurrentState to
        /// string
        /// </summary>
        public static implicit operator string(RecommendedActionCurrentState e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum RecommendedActionCurrentState
        /// </summary>
        public static bool operator == (RecommendedActionCurrentState e1, RecommendedActionCurrentState e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum RecommendedActionCurrentState
        /// </summary>
        public static bool operator != (RecommendedActionCurrentState e1, RecommendedActionCurrentState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for RecommendedActionCurrentState
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is RecommendedActionCurrentState && Equals((RecommendedActionCurrentState)obj);
        }

        /// <summary>
        /// Returns for hashCode RecommendedActionCurrentState
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
