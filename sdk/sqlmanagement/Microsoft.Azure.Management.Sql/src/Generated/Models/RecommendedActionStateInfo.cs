// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contains information of current state for an Azure SQL Database, Server
    /// or Elastic Pool Recommended Action.
    /// </summary>
    public partial class RecommendedActionStateInfo
    {
        /// <summary>
        /// Initializes a new instance of the RecommendedActionStateInfo class.
        /// </summary>
        public RecommendedActionStateInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RecommendedActionStateInfo class.
        /// </summary>
        /// <param name="currentValue">Current state the recommended action is
        /// in. Some commonly used states are: Active      -&gt; recommended
        /// action is active and no action has been taken yet. Pending
        /// -&gt; recommended action is approved for and is awaiting execution.
        /// Executing   -&gt; recommended action is being applied on the user
        /// database. Verifying   -&gt; recommended action was applied and is
        /// being verified of its usefulness by the system. Success     -&gt;
        /// recommended action was applied and improvement found during
        /// verification. Pending Revert  -&gt; verification found little or no
        /// improvement so recommended action is queued for revert or user has
        /// manually reverted. Reverting   -&gt; changes made while applying
        /// recommended action are being reverted on the user database.
        /// Reverted    -&gt; successfully reverted the changes made by
        /// recommended action on user database. Ignored     -&gt; user
        /// explicitly ignored/discarded the recommended action. Possible
        /// values include: 'Active', 'Pending', 'Executing', 'Verifying',
        /// 'PendingRevert', 'RevertCancelled', 'Reverting', 'Reverted',
        /// 'Ignored', 'Expired', 'Monitoring', 'Resolved', 'Success',
        /// 'Error'</param>
        /// <param name="actionInitiatedBy">Gets who initiated the execution of
        /// this recommended action. Possible Value are: User    -&gt; When
        /// user explicity notified system to apply the recommended action.
        /// System  -&gt; When auto-execute status of this advisor was set to
        /// 'Enabled', in which case the system applied it. Possible values
        /// include: 'User', 'System'</param>
        /// <param name="lastModified">Gets the time when the state was last
        /// modified</param>
        public RecommendedActionStateInfo(string currentValue, RecommendedActionInitiatedBy? actionInitiatedBy = default(RecommendedActionInitiatedBy?), System.DateTime? lastModified = default(System.DateTime?))
        {
            CurrentValue = currentValue;
            ActionInitiatedBy = actionInitiatedBy;
            LastModified = lastModified;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets current state the recommended action is in. Some
        /// commonly used states are: Active      -&amp;gt; recommended action
        /// is active and no action has been taken yet. Pending     -&amp;gt;
        /// recommended action is approved for and is awaiting execution.
        /// Executing   -&amp;gt; recommended action is being applied on the
        /// user database. Verifying   -&amp;gt; recommended action was applied
        /// and is being verified of its usefulness by the system. Success
        /// -&amp;gt; recommended action was applied and improvement found
        /// during verification. Pending Revert  -&amp;gt; verification found
        /// little or no improvement so recommended action is queued for revert
        /// or user has manually reverted. Reverting   -&amp;gt; changes made
        /// while applying recommended action are being reverted on the user
        /// database. Reverted    -&amp;gt; successfully reverted the changes
        /// made by recommended action on user database. Ignored     -&amp;gt;
        /// user explicitly ignored/discarded the recommended action. Possible
        /// values include: 'Active', 'Pending', 'Executing', 'Verifying',
        /// 'PendingRevert', 'RevertCancelled', 'Reverting', 'Reverted',
        /// 'Ignored', 'Expired', 'Monitoring', 'Resolved', 'Success', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "currentValue")]
        public string CurrentValue { get; set; }

        /// <summary>
        /// Gets who initiated the execution of this recommended action.
        /// Possible Value are: User    -&amp;gt; When user explicity notified
        /// system to apply the recommended action. System  -&amp;gt; When
        /// auto-execute status of this advisor was set to 'Enabled', in which
        /// case the system applied it. Possible values include: 'User',
        /// 'System'
        /// </summary>
        [JsonProperty(PropertyName = "actionInitiatedBy")]
        public RecommendedActionInitiatedBy? ActionInitiatedBy { get; private set; }

        /// <summary>
        /// Gets the time when the state was last modified
        /// </summary>
        [JsonProperty(PropertyName = "lastModified")]
        public System.DateTime? LastModified { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CurrentValue == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CurrentValue");
            }
        }
    }
}
