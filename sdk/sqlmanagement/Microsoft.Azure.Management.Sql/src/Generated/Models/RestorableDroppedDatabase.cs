// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A restorable dropped database resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RestorableDroppedDatabase : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RestorableDroppedDatabase class.
        /// </summary>
        public RestorableDroppedDatabase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestorableDroppedDatabase class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="sku">The name and tier of the SKU.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="databaseName">The name of the database.</param>
        /// <param name="maxSizeBytes">The max size of the database expressed
        /// in bytes.</param>
        /// <param name="elasticPoolId">DEPRECATED: The resource name of the
        /// elastic pool containing this database. This property is deprecated
        /// and the value will always be null.</param>
        /// <param name="creationDate">The creation date of the database
        /// (ISO8601 format).</param>
        /// <param name="deletionDate">The deletion date of the database
        /// (ISO8601 format).</param>
        /// <param name="earliestRestoreDate">The earliest restore date of the
        /// database (ISO8601 format).</param>
        /// <param name="backupStorageRedundancy">The storage account type used
        /// to store backups for this database. Possible values include: 'Geo',
        /// 'Local', 'Zone'</param>
        public RestorableDroppedDatabase(string id = default(string), string name = default(string), string type = default(string), Sku sku = default(Sku), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string databaseName = default(string), long? maxSizeBytes = default(long?), string elasticPoolId = default(string), System.DateTime? creationDate = default(System.DateTime?), System.DateTime? deletionDate = default(System.DateTime?), System.DateTime? earliestRestoreDate = default(System.DateTime?), string backupStorageRedundancy = default(string))
            : base(id, name, type)
        {
            Sku = sku;
            Location = location;
            Tags = tags;
            DatabaseName = databaseName;
            MaxSizeBytes = maxSizeBytes;
            ElasticPoolId = elasticPoolId;
            CreationDate = creationDate;
            DeletionDate = deletionDate;
            EarliestRestoreDate = earliestRestoreDate;
            BackupStorageRedundancy = backupStorageRedundancy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name and tier of the SKU.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets resource location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets the name of the database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName { get; private set; }

        /// <summary>
        /// Gets the max size of the database expressed in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxSizeBytes")]
        public long? MaxSizeBytes { get; private set; }

        /// <summary>
        /// Gets DEPRECATED: The resource name of the elastic pool containing
        /// this database. This property is deprecated and the value will
        /// always be null.
        /// </summary>
        [JsonProperty(PropertyName = "properties.elasticPoolId")]
        public string ElasticPoolId { get; private set; }

        /// <summary>
        /// Gets the creation date of the database (ISO8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets the deletion date of the database (ISO8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "properties.deletionDate")]
        public System.DateTime? DeletionDate { get; private set; }

        /// <summary>
        /// Gets the earliest restore date of the database (ISO8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "properties.earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate { get; private set; }

        /// <summary>
        /// Gets the storage account type used to store backups for this
        /// database. Possible values include: 'Geo', 'Local', 'Zone'
        /// </summary>
        [JsonProperty(PropertyName = "properties.backupStorageRedundancy")]
        public string BackupStorageRedundancy { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
