// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An update request for an Azure SQL Database server.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ServerUpdate class.
        /// </summary>
        public ServerUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerUpdate class.
        /// </summary>
        /// <param name="identity">Server identity</param>
        /// <param name="administratorLogin">Administrator username for the
        /// server. Once created it cannot be changed.</param>
        /// <param name="administratorLoginPassword">The administrator login
        /// password (required for server creation).</param>
        /// <param name="version">The version of the server.</param>
        /// <param name="state">The state of the server.</param>
        /// <param name="fullyQualifiedDomainName">The fully qualified domain
        /// name of the server.</param>
        /// <param name="privateEndpointConnections">List of private endpoint
        /// connections on a server</param>
        /// <param name="minimalTlsVersion">Minimal TLS version. Allowed
        /// values: '1.0', '1.1', '1.2'</param>
        /// <param name="publicNetworkAccess">Whether or not public endpoint
        /// access is allowed for this server.  Value is optional but if passed
        /// in, must be 'Enabled' or 'Disabled'. Possible values include:
        /// 'Enabled', 'Disabled'</param>
        /// <param name="workspaceFeature">Whether or not existing server has a
        /// workspace created and if it allows connection from workspace.
        /// Possible values include: 'Connected', 'Disconnected'</param>
        /// <param name="primaryUserAssignedIdentityId">The resource id of a
        /// user assigned identity to be used by default.</param>
        /// <param name="keyId">A CMK URI of the key to use for
        /// encryption.</param>
        /// <param name="administrators">The Azure Active Directory identity of
        /// the server.</param>
        /// <param name="tags">Resource tags.</param>
        public ServerUpdate(ResourceIdentityWithUserAssignedIdentities identity = default(ResourceIdentityWithUserAssignedIdentities), string administratorLogin = default(string), string administratorLoginPassword = default(string), string version = default(string), string state = default(string), string fullyQualifiedDomainName = default(string), IList<ServerPrivateEndpointConnection> privateEndpointConnections = default(IList<ServerPrivateEndpointConnection>), string minimalTlsVersion = default(string), string publicNetworkAccess = default(string), string workspaceFeature = default(string), string primaryUserAssignedIdentityId = default(string), string keyId = default(string), ServerExternalAdministrator administrators = default(ServerExternalAdministrator), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            Identity = identity;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            Version = version;
            State = state;
            FullyQualifiedDomainName = fullyQualifiedDomainName;
            PrivateEndpointConnections = privateEndpointConnections;
            MinimalTlsVersion = minimalTlsVersion;
            PublicNetworkAccess = publicNetworkAccess;
            WorkspaceFeature = workspaceFeature;
            PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            KeyId = keyId;
            Administrators = administrators;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets server identity
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ResourceIdentityWithUserAssignedIdentities Identity { get; set; }

        /// <summary>
        /// Gets or sets administrator username for the server. Once created it
        /// cannot be changed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets the administrator login password (required for server
        /// creation).
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets the version of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets the state of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets the fully qualified domain name of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName { get; private set; }

        /// <summary>
        /// Gets list of private endpoint connections on a server
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public IList<ServerPrivateEndpointConnection> PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Gets or sets minimal TLS version. Allowed values: '1.0', '1.1',
        /// '1.2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.minimalTlsVersion")]
        public string MinimalTlsVersion { get; set; }

        /// <summary>
        /// Gets or sets whether or not public endpoint access is allowed for
        /// this server.  Value is optional but if passed in, must be 'Enabled'
        /// or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess { get; set; }

        /// <summary>
        /// Gets whether or not existing server has a workspace created and if
        /// it allows connection from workspace. Possible values include:
        /// 'Connected', 'Disconnected'
        /// </summary>
        [JsonProperty(PropertyName = "properties.workspaceFeature")]
        public string WorkspaceFeature { get; private set; }

        /// <summary>
        /// Gets or sets the resource id of a user assigned identity to be used
        /// by default.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryUserAssignedIdentityId")]
        public string PrimaryUserAssignedIdentityId { get; set; }

        /// <summary>
        /// Gets or sets a CMK URI of the key to use for encryption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyId")]
        public string KeyId { get; set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory identity of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administrators")]
        public ServerExternalAdministrator Administrators { get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
