// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An Import, Export, or PolybaseImport resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseExtensions : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseExtensions class.
        /// </summary>
        public DatabaseExtensions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseExtensions class.
        /// </summary>
        /// <param name="operationMode">Operation mode of the operation:
        /// Import, Export, or PolybaseImport. Possible values include:
        /// 'PolybaseImport', 'Import', 'Export'</param>
        /// <param name="storageKeyType">Storage key type: StorageAccessKey or
        /// SharedAccessKey. Possible values include: 'SharedAccessKey',
        /// 'StorageAccessKey'</param>
        /// <param name="storageKey">Storage key for the storage
        /// account.</param>
        /// <param name="storageUri">Storage Uri for the storage
        /// account.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="administratorLogin">Administrator login name.</param>
        /// <param name="administratorLoginPassword">Administrator login
        /// password.</param>
        /// <param name="authenticationType">Authentication type: SQL
        /// authentication or AD password.</param>
        /// <param name="databaseEdition">Database edition for the newly
        /// created database in the case of an import operation.</param>
        /// <param name="serviceObjectiveName">Database service level objective
        /// for the newly created database in the case of an import
        /// operation.</param>
        /// <param name="maxSizeBytes">Database max size in bytes for the newly
        /// created database in the case of an import operation.</param>
        /// <param name="networkIsolation">Optional resource information to
        /// enable network isolation for request.</param>
        public DatabaseExtensions(string operationMode, string storageKeyType, string storageKey, string storageUri, string id = default(string), string name = default(string), string type = default(string), string administratorLogin = default(string), string administratorLoginPassword = default(string), string authenticationType = default(string), string databaseEdition = default(string), string serviceObjectiveName = default(string), string maxSizeBytes = default(string), NetworkIsolationSettings networkIsolation = default(NetworkIsolationSettings))
            : base(id, name, type)
        {
            OperationMode = operationMode;
            StorageKeyType = storageKeyType;
            StorageKey = storageKey;
            StorageUri = storageUri;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            AuthenticationType = authenticationType;
            DatabaseEdition = databaseEdition;
            ServiceObjectiveName = serviceObjectiveName;
            MaxSizeBytes = maxSizeBytes;
            NetworkIsolation = networkIsolation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets operation mode of the operation: Import, Export, or
        /// PolybaseImport. Possible values include: 'PolybaseImport',
        /// 'Import', 'Export'
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationMode")]
        public string OperationMode { get; set; }

        /// <summary>
        /// Gets or sets storage key type: StorageAccessKey or SharedAccessKey.
        /// Possible values include: 'SharedAccessKey', 'StorageAccessKey'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageKeyType")]
        public string StorageKeyType { get; set; }

        /// <summary>
        /// Gets or sets storage key for the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageKey")]
        public string StorageKey { get; set; }

        /// <summary>
        /// Gets or sets storage Uri for the storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageUri")]
        public string StorageUri { get; set; }

        /// <summary>
        /// Gets or sets administrator login name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin { get; set; }

        /// <summary>
        /// Gets or sets administrator login password.
        /// </summary>
        [JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }

        /// <summary>
        /// Gets or sets authentication type: SQL authentication or AD
        /// password.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authenticationType")]
        public string AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets database edition for the newly created database in the
        /// case of an import operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseEdition")]
        public string DatabaseEdition { get; set; }

        /// <summary>
        /// Gets or sets database service level objective for the newly created
        /// database in the case of an import operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceObjectiveName")]
        public string ServiceObjectiveName { get; set; }

        /// <summary>
        /// Gets or sets database max size in bytes for the newly created
        /// database in the case of an import operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxSizeBytes")]
        public string MaxSizeBytes { get; set; }

        /// <summary>
        /// Gets or sets optional resource information to enable network
        /// isolation for request.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkIsolation")]
        public NetworkIsolationSettings NetworkIsolation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OperationMode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperationMode");
            }
            if (StorageKeyType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageKeyType");
            }
            if (StorageKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageKey");
            }
            if (StorageUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageUri");
            }
        }
    }
}
