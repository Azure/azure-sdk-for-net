// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An export managed database operation result resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseExtensions : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseExtensions class.
        /// </summary>
        public DatabaseExtensions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseExtensions class.
        /// </summary>
        /// <param name="storageKeyType">Storage key type. Possible values
        /// include: 'SharedAccessKey', 'StorageAccessKey'</param>
        /// <param name="storageKey">Storage key.</param>
        /// <param name="storageUri">Storage Uri.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        public DatabaseExtensions(string storageKeyType, string storageKey, string storageUri, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            StorageKeyType = storageKeyType;
            StorageKey = storageKey;
            StorageUri = storageUri;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for DatabaseExtensions class.
        /// </summary>
        static DatabaseExtensions()
        {
            OperationMode = "PolybaseImport";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets storage key type. Possible values include:
        /// 'SharedAccessKey', 'StorageAccessKey'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageKeyType")]
        public string StorageKeyType { get; set; }

        /// <summary>
        /// Gets or sets storage key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageKey")]
        public string StorageKey { get; set; }

        /// <summary>
        /// Gets or sets storage Uri.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageUri")]
        public string StorageUri { get; set; }

        /// <summary>
        /// Operation Mode.
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationMode")]
        public static string OperationMode { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageKeyType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageKeyType");
            }
            if (StorageKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageKey");
            }
            if (StorageUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageUri");
            }
        }
    }
}
