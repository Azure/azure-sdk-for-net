// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The service objectives capability.
    /// </summary>
    public partial class ServiceObjectiveCapability
    {
        /// <summary>
        /// Initializes a new instance of the ServiceObjectiveCapability class.
        /// </summary>
        public ServiceObjectiveCapability()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceObjectiveCapability class.
        /// </summary>
        /// <param name="id">The unique ID of the service objective.</param>
        /// <param name="name">The service objective name.</param>
        /// <param name="supportedMaxSizes">The list of supported maximum
        /// database sizes.</param>
        /// <param name="performanceLevel">The performance level.</param>
        /// <param name="sku">The sku.</param>
        /// <param name="supportedLicenseTypes">List of supported license
        /// types.</param>
        /// <param name="includedMaxSize">The included (free) max size.</param>
        /// <param name="zoneRedundant">Whether or not zone redundancy is
        /// supported for the service objective.</param>
        /// <param name="supportedAutoPauseDelay">Supported time range for auto
        /// pause delay</param>
        /// <param name="supportedMinCapacities">List of supported min
        /// capacities</param>
        /// <param name="computeModel">The compute model</param>
        /// <param name="supportedMaintenanceConfigurations">List of supported
        /// maintenance configurations</param>
        /// <param name="status">The status of the capability. Possible values
        /// include: 'Visible', 'Available', 'Default', 'Disabled'</param>
        /// <param name="reason">The reason for the capability not being
        /// available.</param>
        public ServiceObjectiveCapability(System.Guid? id = default(System.Guid?), string name = default(string), IList<MaxSizeRangeCapability> supportedMaxSizes = default(IList<MaxSizeRangeCapability>), PerformanceLevelCapability performanceLevel = default(PerformanceLevelCapability), Sku sku = default(Sku), IList<LicenseTypeCapability> supportedLicenseTypes = default(IList<LicenseTypeCapability>), MaxSizeCapability includedMaxSize = default(MaxSizeCapability), bool? zoneRedundant = default(bool?), AutoPauseDelayTimeRange supportedAutoPauseDelay = default(AutoPauseDelayTimeRange), IList<MinCapacityCapability> supportedMinCapacities = default(IList<MinCapacityCapability>), string computeModel = default(string), IList<MaintenanceConfigurationCapability> supportedMaintenanceConfigurations = default(IList<MaintenanceConfigurationCapability>), CapabilityStatus? status = default(CapabilityStatus?), string reason = default(string))
        {
            Id = id;
            Name = name;
            SupportedMaxSizes = supportedMaxSizes;
            PerformanceLevel = performanceLevel;
            Sku = sku;
            SupportedLicenseTypes = supportedLicenseTypes;
            IncludedMaxSize = includedMaxSize;
            ZoneRedundant = zoneRedundant;
            SupportedAutoPauseDelay = supportedAutoPauseDelay;
            SupportedMinCapacities = supportedMinCapacities;
            ComputeModel = computeModel;
            SupportedMaintenanceConfigurations = supportedMaintenanceConfigurations;
            Status = status;
            Reason = reason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the unique ID of the service objective.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; private set; }

        /// <summary>
        /// Gets the service objective name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the list of supported maximum database sizes.
        /// </summary>
        [JsonProperty(PropertyName = "supportedMaxSizes")]
        public IList<MaxSizeRangeCapability> SupportedMaxSizes { get; private set; }

        /// <summary>
        /// Gets the performance level.
        /// </summary>
        [JsonProperty(PropertyName = "performanceLevel")]
        public PerformanceLevelCapability PerformanceLevel { get; private set; }

        /// <summary>
        /// Gets the sku.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; private set; }

        /// <summary>
        /// Gets list of supported license types.
        /// </summary>
        [JsonProperty(PropertyName = "supportedLicenseTypes")]
        public IList<LicenseTypeCapability> SupportedLicenseTypes { get; private set; }

        /// <summary>
        /// Gets the included (free) max size.
        /// </summary>
        [JsonProperty(PropertyName = "includedMaxSize")]
        public MaxSizeCapability IncludedMaxSize { get; private set; }

        /// <summary>
        /// Gets whether or not zone redundancy is supported for the service
        /// objective.
        /// </summary>
        [JsonProperty(PropertyName = "zoneRedundant")]
        public bool? ZoneRedundant { get; private set; }

        /// <summary>
        /// Gets supported time range for auto pause delay
        /// </summary>
        [JsonProperty(PropertyName = "supportedAutoPauseDelay")]
        public AutoPauseDelayTimeRange SupportedAutoPauseDelay { get; private set; }

        /// <summary>
        /// Gets list of supported min capacities
        /// </summary>
        [JsonProperty(PropertyName = "supportedMinCapacities")]
        public IList<MinCapacityCapability> SupportedMinCapacities { get; private set; }

        /// <summary>
        /// Gets the compute model
        /// </summary>
        [JsonProperty(PropertyName = "computeModel")]
        public string ComputeModel { get; private set; }

        /// <summary>
        /// Gets list of supported maintenance configurations
        /// </summary>
        [JsonProperty(PropertyName = "supportedMaintenanceConfigurations")]
        public IList<MaintenanceConfigurationCapability> SupportedMaintenanceConfigurations { get; private set; }

        /// <summary>
        /// Gets the status of the capability. Possible values include:
        /// 'Visible', 'Available', 'Default', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public CapabilityStatus? Status { get; private set; }

        /// <summary>
        /// Gets or sets the reason for the capability not being available.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
