// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A managed database move operation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ManagedDatabaseMoveOperationResult : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ManagedDatabaseMoveOperationResult class.
        /// </summary>
        public ManagedDatabaseMoveOperationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ManagedDatabaseMoveOperationResult class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="operation">The name of operation.</param>
        /// <param name="operationFriendlyName">The friendly name of
        /// operation.</param>
        /// <param name="startTime">The operation start time.</param>
        /// <param name="state">The operation state. Possible values include:
        /// 'Pending', 'InProgress', 'Succeeded', 'Failed', 'CancelInProgress',
        /// 'Cancelled'</param>
        /// <param name="operationMode">Operation mode. Possible values
        /// include: 'Move', 'Copy'</param>
        /// <param name="sourceManagedInstanceName">Source Managed Instance
        /// name.</param>
        /// <param name="targetManagedInstanceName">Target Managed Instance
        /// name.</param>
        /// <param name="sourceManagedInstanceId">Source Managed Instance
        /// resource id.</param>
        /// <param name="targetManagedInstanceId">Target Managed instance
        /// resource id.</param>
        /// <param name="sourceDatabaseName">Source database name.</param>
        /// <param name="targetDatabaseName">Target database name.</param>
        /// <param name="isCancellable">Is move operation cancellable.</param>
        /// <param name="errorCode">The operation error code.</param>
        /// <param name="errorDescription">The operation error
        /// description.</param>
        /// <param name="errorSeverity">The operation error severity.</param>
        /// <param name="isUserError">Whether or not the error is a user
        /// error.</param>
        public ManagedDatabaseMoveOperationResult(string id = default(string), string name = default(string), string type = default(string), string operation = default(string), string operationFriendlyName = default(string), System.DateTime? startTime = default(System.DateTime?), string state = default(string), string operationMode = default(string), string sourceManagedInstanceName = default(string), string targetManagedInstanceName = default(string), string sourceManagedInstanceId = default(string), string targetManagedInstanceId = default(string), string sourceDatabaseName = default(string), string targetDatabaseName = default(string), bool? isCancellable = default(bool?), int? errorCode = default(int?), string errorDescription = default(string), int? errorSeverity = default(int?), bool? isUserError = default(bool?))
            : base(id, name, type)
        {
            Operation = operation;
            OperationFriendlyName = operationFriendlyName;
            StartTime = startTime;
            State = state;
            OperationMode = operationMode;
            SourceManagedInstanceName = sourceManagedInstanceName;
            TargetManagedInstanceName = targetManagedInstanceName;
            SourceManagedInstanceId = sourceManagedInstanceId;
            TargetManagedInstanceId = targetManagedInstanceId;
            SourceDatabaseName = sourceDatabaseName;
            TargetDatabaseName = targetDatabaseName;
            IsCancellable = isCancellable;
            ErrorCode = errorCode;
            ErrorDescription = errorDescription;
            ErrorSeverity = errorSeverity;
            IsUserError = isUserError;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name of operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.operation")]
        public string Operation { get; private set; }

        /// <summary>
        /// Gets the friendly name of operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationFriendlyName")]
        public string OperationFriendlyName { get; private set; }

        /// <summary>
        /// Gets the operation start time.
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; private set; }

        /// <summary>
        /// Gets the operation state. Possible values include: 'Pending',
        /// 'InProgress', 'Succeeded', 'Failed', 'CancelInProgress',
        /// 'Cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets operation mode. Possible values include: 'Move', 'Copy'
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationMode")]
        public string OperationMode { get; private set; }

        /// <summary>
        /// Gets source Managed Instance name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceManagedInstanceName")]
        public string SourceManagedInstanceName { get; private set; }

        /// <summary>
        /// Gets target Managed Instance name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetManagedInstanceName")]
        public string TargetManagedInstanceName { get; private set; }

        /// <summary>
        /// Gets source Managed Instance resource id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceManagedInstanceId")]
        public string SourceManagedInstanceId { get; private set; }

        /// <summary>
        /// Gets target Managed instance resource id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetManagedInstanceId")]
        public string TargetManagedInstanceId { get; private set; }

        /// <summary>
        /// Gets source database name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceDatabaseName")]
        public string SourceDatabaseName { get; private set; }

        /// <summary>
        /// Gets target database name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetDatabaseName")]
        public string TargetDatabaseName { get; private set; }

        /// <summary>
        /// Gets is move operation cancellable.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isCancellable")]
        public bool? IsCancellable { get; private set; }

        /// <summary>
        /// Gets the operation error code.
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorCode")]
        public int? ErrorCode { get; private set; }

        /// <summary>
        /// Gets the operation error description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorDescription")]
        public string ErrorDescription { get; private set; }

        /// <summary>
        /// Gets the operation error severity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.errorSeverity")]
        public int? ErrorSeverity { get; private set; }

        /// <summary>
        /// Gets whether or not the error is a user error.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isUserError")]
        public bool? IsUserError { get; private set; }

    }
}
