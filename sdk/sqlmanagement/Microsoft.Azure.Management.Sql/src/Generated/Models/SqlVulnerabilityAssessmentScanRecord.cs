// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A vulnerability assessment scan record.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SqlVulnerabilityAssessmentScanRecord : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SqlVulnerabilityAssessmentScanRecord class.
        /// </summary>
        public SqlVulnerabilityAssessmentScanRecord()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// SqlVulnerabilityAssessmentScanRecord class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="systemData">SystemData of
        /// SqlVulnerabilityAssessmentScanRecordResource.</param>
        /// <param name="scanId">The scan ID.</param>
        /// <param name="triggerType">The scan trigger type. Possible values
        /// include: 'OnDemand', 'Recurring'</param>
        /// <param name="state">The scan status. Possible values include:
        /// 'Passed', 'Failed', 'FailedToRun', 'InProgress'</param>
        /// <param name="startTime">The scan start time (UTC).</param>
        /// <param name="endTime">The scan end time (UTC).</param>
        /// <param name="errors">The scan errors.</param>
        /// <param name="server">The server name.</param>
        /// <param name="database">The database name.</param>
        /// <param name="sqlVersion">The SQL version.</param>
        /// <param name="highSeverityFailedRulesCount">The number of failed
        /// rules with high severity.</param>
        /// <param name="mediumSeverityFailedRulesCount">The number of failed
        /// rules with medium severity.</param>
        /// <param name="lowSeverityFailedRulesCount">The number of failed
        /// rules with low severity.</param>
        /// <param name="totalPassedRulesCount">The number of total passed
        /// rules.</param>
        /// <param name="totalFailedRulesCount">The number of total failed
        /// rules.</param>
        /// <param name="totalRulesCount">The number of total rules
        /// assessed.</param>
        /// <param name="isBaselineApplied">Baseline created for this database,
        /// and has one or more rules.</param>
        public SqlVulnerabilityAssessmentScanRecord(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string scanId = default(string), string triggerType = default(string), string state = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), IList<SqlVulnerabilityAssessmentScanError> errors = default(IList<SqlVulnerabilityAssessmentScanError>), string server = default(string), string database = default(string), string sqlVersion = default(string), int? highSeverityFailedRulesCount = default(int?), int? mediumSeverityFailedRulesCount = default(int?), int? lowSeverityFailedRulesCount = default(int?), int? totalPassedRulesCount = default(int?), int? totalFailedRulesCount = default(int?), int? totalRulesCount = default(int?), bool? isBaselineApplied = default(bool?))
            : base(id, name, type)
        {
            SystemData = systemData;
            ScanId = scanId;
            TriggerType = triggerType;
            State = state;
            StartTime = startTime;
            EndTime = endTime;
            Errors = errors;
            Server = server;
            Database = database;
            SqlVersion = sqlVersion;
            HighSeverityFailedRulesCount = highSeverityFailedRulesCount;
            MediumSeverityFailedRulesCount = mediumSeverityFailedRulesCount;
            LowSeverityFailedRulesCount = lowSeverityFailedRulesCount;
            TotalPassedRulesCount = totalPassedRulesCount;
            TotalFailedRulesCount = totalFailedRulesCount;
            TotalRulesCount = totalRulesCount;
            IsBaselineApplied = isBaselineApplied;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets systemData of SqlVulnerabilityAssessmentScanRecordResource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets the scan ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scanId")]
        public string ScanId { get; private set; }

        /// <summary>
        /// Gets the scan trigger type. Possible values include: 'OnDemand',
        /// 'Recurring'
        /// </summary>
        [JsonProperty(PropertyName = "properties.triggerType")]
        public string TriggerType { get; private set; }

        /// <summary>
        /// Gets the scan status. Possible values include: 'Passed', 'Failed',
        /// 'FailedToRun', 'InProgress'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets the scan start time (UTC).
        /// </summary>
        [JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; private set; }

        /// <summary>
        /// Gets the scan end time (UTC).
        /// </summary>
        [JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime { get; private set; }

        /// <summary>
        /// Gets the scan errors.
        /// </summary>
        [JsonProperty(PropertyName = "properties.errors")]
        public IList<SqlVulnerabilityAssessmentScanError> Errors { get; private set; }

        /// <summary>
        /// Gets the server name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.server")]
        public string Server { get; private set; }

        /// <summary>
        /// Gets the database name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.database")]
        public string Database { get; private set; }

        /// <summary>
        /// Gets the SQL version.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sqlVersion")]
        public string SqlVersion { get; private set; }

        /// <summary>
        /// Gets the number of failed rules with high severity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.highSeverityFailedRulesCount")]
        public int? HighSeverityFailedRulesCount { get; private set; }

        /// <summary>
        /// Gets the number of failed rules with medium severity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mediumSeverityFailedRulesCount")]
        public int? MediumSeverityFailedRulesCount { get; private set; }

        /// <summary>
        /// Gets the number of failed rules with low severity.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lowSeverityFailedRulesCount")]
        public int? LowSeverityFailedRulesCount { get; private set; }

        /// <summary>
        /// Gets the number of total passed rules.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalPassedRulesCount")]
        public int? TotalPassedRulesCount { get; private set; }

        /// <summary>
        /// Gets the number of total failed rules.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalFailedRulesCount")]
        public int? TotalFailedRulesCount { get; private set; }

        /// <summary>
        /// Gets the number of total rules assessed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalRulesCount")]
        public int? TotalRulesCount { get; private set; }

        /// <summary>
        /// Gets baseline created for this database, and has one or more rules.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isBaselineApplied")]
        public bool? IsBaselineApplied { get; private set; }

    }
}
