// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A security event.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SecurityEvent : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SecurityEvent class.
        /// </summary>
        public SecurityEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityEvent class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="eventTime">The time when the security event
        /// occurred.</param>
        /// <param name="securityEventType">The type of the security event.
        /// Possible values include: 'Undefined', 'SqlInjectionVulnerability',
        /// 'SqlInjectionExploit'</param>
        /// <param name="subscription">The subscription name</param>
        /// <param name="server">The server name</param>
        /// <param name="database">The database name</param>
        /// <param name="clientIp">The IP address of the client who executed
        /// the statement.</param>
        /// <param name="applicationName">The application used to execute the
        /// statement.</param>
        /// <param name="principalName">The principal user who executed the
        /// statement</param>
        /// <param name="securityEventSqlInjectionAdditionalProperties">The sql
        /// injection additional properties, populated only if the type of the
        /// security event is sql injection.</param>
        public SecurityEvent(string id = default(string), string name = default(string), string type = default(string), System.DateTime? eventTime = default(System.DateTime?), SecurityEventType? securityEventType = default(SecurityEventType?), string subscription = default(string), string server = default(string), string database = default(string), string clientIp = default(string), string applicationName = default(string), string principalName = default(string), SecurityEventSqlInjectionAdditionalProperties securityEventSqlInjectionAdditionalProperties = default(SecurityEventSqlInjectionAdditionalProperties))
            : base(id, name, type)
        {
            EventTime = eventTime;
            SecurityEventType = securityEventType;
            Subscription = subscription;
            Server = server;
            Database = database;
            ClientIp = clientIp;
            ApplicationName = applicationName;
            PrincipalName = principalName;
            SecurityEventSqlInjectionAdditionalProperties = securityEventSqlInjectionAdditionalProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the time when the security event occurred.
        /// </summary>
        [JsonProperty(PropertyName = "properties.eventTime")]
        public System.DateTime? EventTime { get; private set; }

        /// <summary>
        /// Gets the type of the security event. Possible values include:
        /// 'Undefined', 'SqlInjectionVulnerability', 'SqlInjectionExploit'
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityEventType")]
        public SecurityEventType? SecurityEventType { get; private set; }

        /// <summary>
        /// Gets the subscription name
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscription")]
        public string Subscription { get; private set; }

        /// <summary>
        /// Gets the server name
        /// </summary>
        [JsonProperty(PropertyName = "properties.server")]
        public string Server { get; private set; }

        /// <summary>
        /// Gets the database name
        /// </summary>
        [JsonProperty(PropertyName = "properties.database")]
        public string Database { get; private set; }

        /// <summary>
        /// Gets the IP address of the client who executed the statement.
        /// </summary>
        [JsonProperty(PropertyName = "properties.clientIp")]
        public string ClientIp { get; private set; }

        /// <summary>
        /// Gets the application used to execute the statement.
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicationName")]
        public string ApplicationName { get; private set; }

        /// <summary>
        /// Gets the principal user who executed the statement
        /// </summary>
        [JsonProperty(PropertyName = "properties.principalName")]
        public string PrincipalName { get; private set; }

        /// <summary>
        /// Gets the sql injection additional properties, populated only if the
        /// type of the security event is sql injection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityEventSqlInjectionAdditionalProperties")]
        public SecurityEventSqlInjectionAdditionalProperties SecurityEventSqlInjectionAdditionalProperties { get; private set; }

    }
}
