// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of a topquery metric in one interval.
    /// </summary>
    public partial class QueryMetricProperties
    {
        /// <summary>
        /// Initializes a new instance of the QueryMetricProperties class.
        /// </summary>
        public QueryMetricProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryMetricProperties class.
        /// </summary>
        /// <param name="name">The name information for the metric.</param>
        /// <param name="displayName">The UI appropriate name for the
        /// metric.</param>
        /// <param name="unit">The unit of the metric. Possible values include:
        /// 'percentage', 'KB', 'microseconds', 'count'</param>
        /// <param name="value">The value of the metric.</param>
        /// <param name="min">Metric value when min() aggregate function is
        /// used over the interval.</param>
        /// <param name="max">Metric value when max() aggregate function is
        /// used over the interval.</param>
        /// <param name="avg">Metric value when avg() aggregate function is
        /// used over the interval.</param>
        /// <param name="sum">Metric value when sum() aggregate function is
        /// used over the interval.</param>
        /// <param name="stdev">Metric value when stdev aggregate function is
        /// used over the interval.</param>
        public QueryMetricProperties(string name = default(string), string displayName = default(string), string unit = default(string), double? value = default(double?), double? min = default(double?), double? max = default(double?), double? avg = default(double?), double? sum = default(double?), double? stdev = default(double?))
        {
            Name = name;
            DisplayName = displayName;
            Unit = unit;
            Value = value;
            Min = min;
            Max = max;
            Avg = avg;
            Sum = sum;
            Stdev = stdev;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name information for the metric.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the UI appropriate name for the metric.
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets the unit of the metric. Possible values include: 'percentage',
        /// 'KB', 'microseconds', 'count'
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public string Unit { get; private set; }

        /// <summary>
        /// Gets the value of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double? Value { get; private set; }

        /// <summary>
        /// Gets metric value when min() aggregate function is used over the
        /// interval.
        /// </summary>
        [JsonProperty(PropertyName = "min")]
        public double? Min { get; private set; }

        /// <summary>
        /// Gets metric value when max() aggregate function is used over the
        /// interval.
        /// </summary>
        [JsonProperty(PropertyName = "max")]
        public double? Max { get; private set; }

        /// <summary>
        /// Gets metric value when avg() aggregate function is used over the
        /// interval.
        /// </summary>
        [JsonProperty(PropertyName = "avg")]
        public double? Avg { get; private set; }

        /// <summary>
        /// Gets metric value when sum() aggregate function is used over the
        /// interval.
        /// </summary>
        [JsonProperty(PropertyName = "sum")]
        public double? Sum { get; private set; }

        /// <summary>
        /// Gets metric value when stdev aggregate function is used over the
        /// interval.
        /// </summary>
        [JsonProperty(PropertyName = "stdev")]
        public double? Stdev { get; private set; }

    }
}
