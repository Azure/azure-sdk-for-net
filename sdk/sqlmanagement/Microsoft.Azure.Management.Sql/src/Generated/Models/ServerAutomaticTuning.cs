// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Server-level Automatic Tuning.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerAutomaticTuning : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ServerAutomaticTuning class.
        /// </summary>
        public ServerAutomaticTuning()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerAutomaticTuning class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="desiredState">Automatic tuning desired state. Possible
        /// values include: 'Custom', 'Auto', 'Unspecified'</param>
        /// <param name="actualState">Automatic tuning actual state. Possible
        /// values include: 'Custom', 'Auto', 'Unspecified'</param>
        /// <param name="options">Automatic tuning options definition.</param>
        public ServerAutomaticTuning(string id = default(string), string name = default(string), string type = default(string), AutomaticTuningServerMode? desiredState = default(AutomaticTuningServerMode?), AutomaticTuningServerMode? actualState = default(AutomaticTuningServerMode?), IDictionary<string, AutomaticTuningServerOptions> options = default(IDictionary<string, AutomaticTuningServerOptions>))
            : base(id, name, type)
        {
            DesiredState = desiredState;
            ActualState = actualState;
            Options = options;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets automatic tuning desired state. Possible values
        /// include: 'Custom', 'Auto', 'Unspecified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.desiredState")]
        public AutomaticTuningServerMode? DesiredState { get; set; }

        /// <summary>
        /// Gets automatic tuning actual state. Possible values include:
        /// 'Custom', 'Auto', 'Unspecified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.actualState")]
        public AutomaticTuningServerMode? ActualState { get; private set; }

        /// <summary>
        /// Gets or sets automatic tuning options definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.options")]
        public IDictionary<string, AutomaticTuningServerOptions> Options { get; set; }

    }
}
