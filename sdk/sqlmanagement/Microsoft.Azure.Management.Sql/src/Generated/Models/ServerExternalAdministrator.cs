// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of a active directory administrator.
    /// </summary>
    public partial class ServerExternalAdministrator
    {
        /// <summary>
        /// Initializes a new instance of the ServerExternalAdministrator
        /// class.
        /// </summary>
        public ServerExternalAdministrator()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerExternalAdministrator
        /// class.
        /// </summary>
        /// <param name="administratorType">Type of the sever administrator.
        /// Possible values include: 'ActiveDirectory'</param>
        /// <param name="principalType">Principal Type of the sever
        /// administrator. Possible values include: 'User', 'Group',
        /// 'Application'</param>
        /// <param name="login">Login name of the server administrator.</param>
        /// <param name="sid">SID (object ID) of the server
        /// administrator.</param>
        /// <param name="tenantId">Tenant ID of the administrator.</param>
        /// <param name="azureADOnlyAuthentication">Azure Active Directory only
        /// Authentication enabled.</param>
        public ServerExternalAdministrator(string administratorType = default(string), string principalType = default(string), string login = default(string), System.Guid? sid = default(System.Guid?), System.Guid? tenantId = default(System.Guid?), bool? azureADOnlyAuthentication = default(bool?))
        {
            AdministratorType = administratorType;
            PrincipalType = principalType;
            Login = login;
            Sid = sid;
            TenantId = tenantId;
            AzureADOnlyAuthentication = azureADOnlyAuthentication;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of the sever administrator. Possible values
        /// include: 'ActiveDirectory'
        /// </summary>
        [JsonProperty(PropertyName = "administratorType")]
        public string AdministratorType { get; set; }

        /// <summary>
        /// Gets or sets principal Type of the sever administrator. Possible
        /// values include: 'User', 'Group', 'Application'
        /// </summary>
        [JsonProperty(PropertyName = "principalType")]
        public string PrincipalType { get; set; }

        /// <summary>
        /// Gets or sets login name of the server administrator.
        /// </summary>
        [JsonProperty(PropertyName = "login")]
        public string Login { get; set; }

        /// <summary>
        /// Gets or sets SID (object ID) of the server administrator.
        /// </summary>
        [JsonProperty(PropertyName = "sid")]
        public System.Guid? Sid { get; set; }

        /// <summary>
        /// Gets or sets tenant ID of the administrator.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId { get; set; }

        /// <summary>
        /// Gets or sets azure Active Directory only Authentication enabled.
        /// </summary>
        [JsonProperty(PropertyName = "azureADOnlyAuthentication")]
        public bool? AzureADOnlyAuthentication { get; set; }

    }
}
