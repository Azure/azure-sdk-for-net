// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Usage metric of a database.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseUsage : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseUsage class.
        /// </summary>
        public DatabaseUsage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseUsage class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="displayName">User-readable name of the metric.</param>
        /// <param name="currentValue">Current value of the metric.</param>
        /// <param name="limit">Boundary value of the metric.</param>
        /// <param name="unit">Unit of the metric.</param>
        public DatabaseUsage(string id = default(string), string name = default(string), string type = default(string), string displayName = default(string), double? currentValue = default(double?), double? limit = default(double?), string unit = default(string))
            : base(id, name, type)
        {
            DisplayName = displayName;
            CurrentValue = currentValue;
            Limit = limit;
            Unit = unit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets user-readable name of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets current value of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentValue")]
        public double? CurrentValue { get; private set; }

        /// <summary>
        /// Gets boundary value of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "properties.limit")]
        public double? Limit { get; private set; }

        /// <summary>
        /// Gets unit of the metric.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unit")]
        public string Unit { get; private set; }

    }
}
