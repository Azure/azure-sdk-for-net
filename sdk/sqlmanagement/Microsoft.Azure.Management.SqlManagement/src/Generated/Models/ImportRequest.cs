// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Import database parameters.
    /// </summary>
    public partial class ImportRequest : ExportRequest
    {
        /// <summary>
        /// Initializes a new instance of the ImportRequest class.
        /// </summary>
        public ImportRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImportRequest class.
        /// </summary>
        /// <param name="storageKeyType">The type of the storage key to use.
        /// Possible values include: 'StorageAccessKey',
        /// 'SharedAccessKey'</param>
        /// <param name="storageKey">The storage key to use.  If storage key
        /// type is SharedAccessKey, it must be preceded with a "?."</param>
        /// <param name="storageUri">The storage uri to use.</param>
        /// <param name="administratorLogin">The name of the SQL
        /// administrator.</param>
        /// <param name="administratorLoginPassword">The password of the SQL
        /// administrator.</param>
        /// <param name="databaseName">The name of the database to
        /// import.</param>
        /// <param name="edition">The edition for the database being created.
        /// Possible values include: 'Web', 'Business', 'Basic', 'Standard',
        /// 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse',
        /// 'System', 'System2'</param>
        /// <param name="serviceObjectiveName">The name of the service
        /// objective to assign to the database. Possible values include:
        /// 'System', 'System0', 'System1', 'System2', 'System3', 'System4',
        /// 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1',
        /// 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4',
        /// 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100',
        /// 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200',
        /// 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000',
        /// 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c',
        /// 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300',
        /// 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000',
        /// 'ElasticPool'</param>
        /// <param name="maxSizeBytes">The maximum size for the newly imported
        /// database.</param>
        /// <param name="authenticationType">The authentication type. Possible
        /// values include: 'SQL', 'ADPassword'</param>
        public ImportRequest(StorageKeyType storageKeyType, string storageKey, string storageUri, string administratorLogin, string administratorLoginPassword, string databaseName, string edition, string serviceObjectiveName, string maxSizeBytes, AuthenticationType? authenticationType = default(AuthenticationType?))
            : base(storageKeyType, storageKey, storageUri, administratorLogin, administratorLoginPassword, authenticationType)
        {
            DatabaseName = databaseName;
            Edition = edition;
            ServiceObjectiveName = serviceObjectiveName;
            MaxSizeBytes = maxSizeBytes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the database to import.
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets the edition for the database being created. Possible
        /// values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium',
        /// 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System',
        /// 'System2'
        /// </summary>
        [JsonProperty(PropertyName = "edition")]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or sets the name of the service objective to assign to the
        /// database. Possible values include: 'System', 'System0', 'System1',
        /// 'System2', 'System3', 'System4', 'System2L', 'System3L',
        /// 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6',
        /// 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15',
        /// 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400',
        /// 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500',
        /// 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c',
        /// 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c',
        /// 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600',
        /// 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
        /// </summary>
        [JsonProperty(PropertyName = "serviceObjectiveName")]
        public string ServiceObjectiveName { get; set; }

        /// <summary>
        /// Gets or sets the maximum size for the newly imported database.
        /// </summary>
        [JsonProperty(PropertyName = "maxSizeBytes")]
        public string MaxSizeBytes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DatabaseName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (Edition == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Edition");
            }
            if (ServiceObjectiveName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ServiceObjectiveName");
            }
            if (MaxSizeBytes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MaxSizeBytes");
            }
        }
    }
}
