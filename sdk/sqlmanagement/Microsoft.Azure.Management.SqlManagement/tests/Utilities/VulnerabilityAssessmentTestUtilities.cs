// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using Microsoft.Azure.Management.Storage;
using Microsoft.Azure.Management.Storage.Models;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Sql.Tests
{
    public class VulnerabilityAssessmentTestUtilities
    {
        public struct StorageContainerInfo
        {
            public string StorageAccountAccessKey;
            public Uri StorageContainerPath;
        }

        public static async Task<StorageContainerInfo> CreateStorageContainer(SqlManagementTestContext context, Microsoft.Azure.Management.ResourceManager.Models.ResourceGroup resourceGroup)
        {
            StorageManagementClient storageClient = context.GetClient<StorageManagementClient>();
            StorageAccount storageAccount = await storageClient.StorageAccounts.CreateAsync(
                resourceGroup.Name,
                accountName: SqlManagementTestUtilities.GenerateName(prefix: "sqlvatest"),
                parameters: new StorageAccountCreateParameters(
                    new Sku(SkuName.StandardLRS, SkuTier.Standard),
                    Kind.BlobStorage,
                    resourceGroup.Location,
                    accessTier: AccessTier.Cool));

            StorageAccountListKeysResult keys =
                storageClient.StorageAccounts.ListKeys(resourceGroup.Name, storageAccount.Name);
            string key = keys.Keys.First().Value;

            string containerName = "vulnerability-assessment";

            return new StorageContainerInfo
            {
                StorageAccountAccessKey = key,
                StorageContainerPath = new Uri(storageAccount.PrimaryEndpoints.Blob + containerName)
            };
        }
    }
}
