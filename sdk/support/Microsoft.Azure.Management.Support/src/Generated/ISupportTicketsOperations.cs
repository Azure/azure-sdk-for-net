// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SupportTicketsOperations operations.
    /// </summary>
    public partial interface ISupportTicketsOperations
    {
        /// <summary>
        /// Check the availability of a resource name. This API should to be
        /// used to check the uniqueness of the name for support ticket
        /// creation for the selected subscription.
        /// </summary>
        /// <param name='checkNameAvailabilityInput'>
        /// Input to check.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<CheckNameAvailabilityOutput>> CheckNameAvailabilityWithHttpMessagesAsync(CheckNameAvailabilityInput checkNameAvailabilityInput, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists all the support tickets for an Azure subscription.
        /// &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by
        /// &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using
        /// the $filter parameter. Output will be a paged result with
        /// &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next
        /// set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data
        /// is available for 12 months after ticket creation. If a ticket was
        /// created more than 12 months ago, a request for data might cause an
        /// error.
        /// </summary>
        /// <param name='top'>
        /// The number of values to return in the collection. Default is 25 and
        /// max is 100.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. We support 'odata v4.0'
        /// filter semantics. &lt;a target='_blank'
        /// href='https://docs.microsoft.com/odata/concepts/queryoptions-overview'&gt;Learn
        /// more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only
        /// be used with 'eq' operator. For &lt;i&gt;CreatedDate&lt;/i&gt;
        /// filter, the supported operators are 'gt' and 'ge'. When using both
        /// filters, combine them using the logical 'AND'.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<SupportTicketDetails>>> ListWithHttpMessagesAsync(int? top = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets details for a specific support ticket in an Azure
        /// subscription. &lt;br/&gt;&lt;br/&gt;Support ticket data is
        /// available for 12 months after ticket creation. If a ticket was
        /// created more than 12 months ago, a request for data might cause an
        /// error.
        /// </summary>
        /// <param name='supportTicketName'>
        /// Support ticket name
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<SupportTicketDetails>> GetWithHttpMessagesAsync(string supportTicketName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// This API allows you to update the severity level or your contact
        /// information in the support ticket. &lt;br/&gt;&lt;br/&gt; Note: The
        /// severity levels cannot be changed if a support ticket is actively
        /// being worked upon by an Azure support engineer. In such a case,
        /// contact your support engineer to request severity update by adding
        /// a new communication using the Communications API.
        /// </summary>
        /// <param name='supportTicketName'>
        /// Support ticket name
        /// </param>
        /// <param name='updateSupportTicket'>
        /// UpdateSupportTicket object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<SupportTicketDetails>> UpdateWithHttpMessagesAsync(string supportTicketName, UpdateSupportTicket updateSupportTicket, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new support ticket for Quota increase, Technical,
        /// Billing, and Subscription Management issues for the specified
        /// subscription. &lt;br/&gt;&lt;br/&gt;A paid technical support plan
        /// is required to create a support ticket using this API. &lt;a
        /// href='https://aka.ms/supportticketAPI'&gt;Learn more&lt;/a&gt;
        /// &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right
        /// Service Id to the issue type. For example: For billing tickets set
        /// *serviceId* to
        /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.
        /// &lt;br/&gt; For Technical issues, the Service id will map to the
        /// Azure service you want to raise a support ticket for.
        /// &lt;br/&gt;&lt;br/&gt;Always call the Services and
        /// ProblemClassifications API to get the most recent set of services
        /// and problem categories required for support ticket creation.
        /// </summary>
        /// <param name='supportTicketName'>
        /// Support ticket name.
        /// </param>
        /// <param name='createSupportTicketParameters'>
        /// Support ticket request payload.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<SupportTicketDetails>> CreateWithHttpMessagesAsync(string supportTicketName, SupportTicketDetails createSupportTicketParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new support ticket for Quota increase, Technical,
        /// Billing, and Subscription Management issues for the specified
        /// subscription. &lt;br/&gt;&lt;br/&gt;A paid technical support plan
        /// is required to create a support ticket using this API. &lt;a
        /// href='https://aka.ms/supportticketAPI'&gt;Learn more&lt;/a&gt;
        /// &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right
        /// Service Id to the issue type. For example: For billing tickets set
        /// *serviceId* to
        /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.
        /// &lt;br/&gt; For Technical issues, the Service id will map to the
        /// Azure service you want to raise a support ticket for.
        /// &lt;br/&gt;&lt;br/&gt;Always call the Services and
        /// ProblemClassifications API to get the most recent set of services
        /// and problem categories required for support ticket creation.
        /// </summary>
        /// <param name='supportTicketName'>
        /// Support ticket name.
        /// </param>
        /// <param name='createSupportTicketParameters'>
        /// Support ticket request payload.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<SupportTicketDetails>> BeginCreateWithHttpMessagesAsync(string supportTicketName, SupportTicketDetails createSupportTicketParameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists all the support tickets for an Azure subscription.
        /// &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by
        /// &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using
        /// the $filter parameter. Output will be a paged result with
        /// &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next
        /// set of support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data
        /// is available for 12 months after ticket creation. If a ticket was
        /// created more than 12 months ago, a request for data might cause an
        /// error.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ExceptionResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<SupportTicketDetails>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
