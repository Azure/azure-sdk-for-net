// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SupportTicketsOperations.
    /// </summary>
    public static partial class SupportTicketsOperationsExtensions
    {
            /// <summary>
            /// Lists all the support tickets for an Azure subscription. Support tickets
            /// older than 6 months cannot be retrieved using this API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 25 and max is
            /// 100.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static IPage<SupportTicketDetails> ListBySubscription(this ISupportTicketsOperations operations, int? top = default(int?), string filter = default(string))
            {
                return operations.ListBySubscriptionAsync(top, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription. Support tickets
            /// older than 6 months cannot be retrieved using this API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 25 and max is
            /// 100.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SupportTicketDetails>> ListBySubscriptionAsync(this ISupportTicketsOperations operations, int? top = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(top, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details of a specific support ticket in an Azure subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            public static SupportTicketDetails GetBySubscription(this ISupportTicketsOperations operations, string supportTicketName)
            {
                return operations.GetBySubscriptionAsync(supportTicketName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details of a specific support ticket in an Azure subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> GetBySubscriptionAsync(this ISupportTicketsOperations operations, string supportTicketName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBySubscriptionWithHttpMessagesAsync(supportTicketName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription. Support tickets
            /// older than 6 months cannot be retrieved using this API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SupportTicketDetails> ListBySubscriptionNext(this ISupportTicketsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription. Support tickets
            /// older than 6 months cannot be retrieved using this API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SupportTicketDetails>> ListBySubscriptionNextAsync(this ISupportTicketsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
