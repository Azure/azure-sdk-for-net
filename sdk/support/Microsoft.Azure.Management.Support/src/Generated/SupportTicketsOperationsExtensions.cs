// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SupportTicketsOperations.
    /// </summary>
    public static partial class SupportTicketsOperationsExtensions
    {
            /// <summary>
            /// Check the availability of a resource name. This API should to be used to
            /// check the uniqueness of the name for support ticket creation for the
            /// selected subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailability(this ISupportTicketsOperations operations, CheckNameAvailabilityInput checkNameAvailabilityInput)
            {
                return operations.CheckNameAvailabilityAsync(checkNameAvailabilityInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the availability of a resource name. This API should to be used to
            /// check the uniqueness of the name for support ticket creation for the
            /// selected subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityAsync(this ISupportTicketsOperations operations, CheckNameAvailabilityInput checkNameAvailabilityInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(checkNameAvailabilityInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription.
            /// &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by
            /// &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the
            /// $filter parameter. Output will be a paged result with
            /// &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of
            /// support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for
            /// 12 months after ticket creation. If a ticket was created more than 12
            /// months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 25 and max is
            /// 100.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. We support 'odata v4.0' filter
            /// semantics. &lt;a target='_blank'
            /// href='https://docs.microsoft.com/odata/concepts/queryoptions-overview'&gt;Learn
            /// more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only be used
            /// with 'eq' operator. For &lt;i&gt;CreatedDate&lt;/i&gt; filter, the
            /// supported operators are 'gt' and 'ge'. When using both filters, combine
            /// them using the logical 'AND'.
            /// </param>
            public static IPage<SupportTicketDetails> List(this ISupportTicketsOperations operations, int? top = default(int?), string filter = default(string))
            {
                return operations.ListAsync(top, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription.
            /// &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by
            /// &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the
            /// $filter parameter. Output will be a paged result with
            /// &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of
            /// support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for
            /// 12 months after ticket creation. If a ticket was created more than 12
            /// months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 25 and max is
            /// 100.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. We support 'odata v4.0' filter
            /// semantics. &lt;a target='_blank'
            /// href='https://docs.microsoft.com/odata/concepts/queryoptions-overview'&gt;Learn
            /// more&lt;/a&gt; &lt;br/&gt;&lt;i&gt;Status&lt;/i&gt; filter can only be used
            /// with 'eq' operator. For &lt;i&gt;CreatedDate&lt;/i&gt; filter, the
            /// supported operators are 'gt' and 'ge'. When using both filters, combine
            /// them using the logical 'AND'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SupportTicketDetails>> ListAsync(this ISupportTicketsOperations operations, int? top = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(top, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details for a specific support ticket in an Azure subscription.
            /// &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after
            /// ticket creation. If a ticket was created more than 12 months ago, a request
            /// for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name
            /// </param>
            public static SupportTicketDetails Get(this ISupportTicketsOperations operations, string supportTicketName)
            {
                return operations.GetAsync(supportTicketName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details for a specific support ticket in an Azure subscription.
            /// &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 12 months after
            /// ticket creation. If a ticket was created more than 12 months ago, a request
            /// for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> GetAsync(this ISupportTicketsOperations operations, string supportTicketName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(supportTicketName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This API allows you to update the severity level or your contact
            /// information in the support ticket. &lt;br/&gt;&lt;br/&gt; Note: The
            /// severity levels cannot be changed if a support ticket is actively being
            /// worked upon by an Azure support engineer. In such a case, contact your
            /// support engineer to request severity update by adding a new communication
            /// using the Communications API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name
            /// </param>
            /// <param name='updateSupportTicket'>
            /// UpdateSupportTicket object
            /// </param>
            public static SupportTicketDetails Update(this ISupportTicketsOperations operations, string supportTicketName, UpdateSupportTicket updateSupportTicket)
            {
                return operations.UpdateAsync(supportTicketName, updateSupportTicket).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This API allows you to update the severity level or your contact
            /// information in the support ticket. &lt;br/&gt;&lt;br/&gt; Note: The
            /// severity levels cannot be changed if a support ticket is actively being
            /// worked upon by an Azure support engineer. In such a case, contact your
            /// support engineer to request severity update by adding a new communication
            /// using the Communications API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name
            /// </param>
            /// <param name='updateSupportTicket'>
            /// UpdateSupportTicket object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> UpdateAsync(this ISupportTicketsOperations operations, string supportTicketName, UpdateSupportTicket updateSupportTicket, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(supportTicketName, updateSupportTicket, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new support ticket for Quota increase, Technical, Billing, and
            /// Subscription Management issues for the specified subscription.
            /// &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a
            /// support ticket using this API. &lt;a
            /// href='https://aka.ms/supportticketAPI'&gt;Learn more&lt;/a&gt;
            /// &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to
            /// the issue type. For example: For billing tickets set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.
            /// &lt;br/&gt; For Technical issues, the Service id will map to the Azure
            /// service you want to raise a support ticket for.
            /// &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications
            /// API to get the most recent set of services and problem categories required
            /// for support ticket creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            public static SupportTicketDetails Create(this ISupportTicketsOperations operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters)
            {
                return operations.CreateAsync(supportTicketName, createSupportTicketParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new support ticket for Quota increase, Technical, Billing, and
            /// Subscription Management issues for the specified subscription.
            /// &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a
            /// support ticket using this API. &lt;a
            /// href='https://aka.ms/supportticketAPI'&gt;Learn more&lt;/a&gt;
            /// &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to
            /// the issue type. For example: For billing tickets set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.
            /// &lt;br/&gt; For Technical issues, the Service id will map to the Azure
            /// service you want to raise a support ticket for.
            /// &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications
            /// API to get the most recent set of services and problem categories required
            /// for support ticket creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> CreateAsync(this ISupportTicketsOperations operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(supportTicketName, createSupportTicketParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new support ticket for Quota increase, Technical, Billing, and
            /// Subscription Management issues for the specified subscription.
            /// &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a
            /// support ticket using this API. &lt;a
            /// href='https://aka.ms/supportticketAPI'&gt;Learn more&lt;/a&gt;
            /// &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to
            /// the issue type. For example: For billing tickets set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.
            /// &lt;br/&gt; For Technical issues, the Service id will map to the Azure
            /// service you want to raise a support ticket for.
            /// &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications
            /// API to get the most recent set of services and problem categories required
            /// for support ticket creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            public static SupportTicketDetails BeginCreate(this ISupportTicketsOperations operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters)
            {
                return operations.BeginCreateAsync(supportTicketName, createSupportTicketParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new support ticket for Quota increase, Technical, Billing, and
            /// Subscription Management issues for the specified subscription.
            /// &lt;br/&gt;&lt;br/&gt;A paid technical support plan is required to create a
            /// support ticket using this API. &lt;a
            /// href='https://aka.ms/supportticketAPI'&gt;Learn more&lt;/a&gt;
            /// &lt;br/&gt;&lt;br/&gt; Use the Services API to map the right Service Id to
            /// the issue type. For example: For billing tickets set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.
            /// &lt;br/&gt; For Technical issues, the Service id will map to the Azure
            /// service you want to raise a support ticket for.
            /// &lt;br/&gt;&lt;br/&gt;Always call the Services and ProblemClassifications
            /// API to get the most recent set of services and problem categories required
            /// for support ticket creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> BeginCreateAsync(this ISupportTicketsOperations operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(supportTicketName, createSupportTicketParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription.
            /// &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by
            /// &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the
            /// $filter parameter. Output will be a paged result with
            /// &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of
            /// support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for
            /// 12 months after ticket creation. If a ticket was created more than 12
            /// months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SupportTicketDetails> ListNext(this ISupportTicketsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the support tickets for an Azure subscription.
            /// &lt;br/&gt;&lt;br/&gt;You can also filter the support tickets by
            /// &lt;i&gt;Status&lt;/i&gt; or &lt;i&gt;CreatedDate&lt;/i&gt; using the
            /// $filter parameter. Output will be a paged result with
            /// &lt;i&gt;nextLink&lt;/i&gt;, using which you can retrieve the next set of
            /// support tickets. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for
            /// 12 months after ticket creation. If a ticket was created more than 12
            /// months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SupportTicketDetails>> ListNextAsync(this ISupportTicketsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
