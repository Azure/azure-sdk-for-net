// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CommunicationsOperations.
    /// </summary>
    public static partial class CommunicationsOperationsExtensions
    {
            /// <summary>
            /// Check the availability of a resource name. This API should be used to check
            /// the uniqueness of the name for adding a new communication to the support
            /// ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailability(this ICommunicationsOperations operations, string supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput)
            {
                return operations.CheckNameAvailabilityAsync(supportTicketName, checkNameAvailabilityInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the availability of a resource name. This API should be used to check
            /// the uniqueness of the name for adding a new communication to the support
            /// ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityAsync(this ICommunicationsOperations operations, string supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(supportTicketName, checkNameAvailabilityInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all communications (attachments not included) for a support ticket.
            /// &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by
            /// _CreatedDate_ or _CommunicationType_ using the $filter parameter. The only
            /// type of communication supported today is _Web_. Output will be a paged
            /// result with _nextLink_, using which you can retrieve the next set of
            /// Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is
            /// available for 12 months after ticket creation. If a ticket was created more
            /// than 12 months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 10 and max is
            /// 10.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. You can filter by communicationType
            /// and createdDate properties. CommunicationType supports Equals ('eq')
            /// operator and createdDate supports Greater Than ('gt') and Greater Than or
            /// Equals ('ge') operators. You may combine the CommunicationType and
            /// CreatedDate filters by Logical And ('and') operator.
            /// </param>
            public static IPage<CommunicationDetails> List(this ICommunicationsOperations operations, string supportTicketName, int? top = default(int?), string filter = default(string))
            {
                return operations.ListAsync(supportTicketName, top, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all communications (attachments not included) for a support ticket.
            /// &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by
            /// _CreatedDate_ or _CommunicationType_ using the $filter parameter. The only
            /// type of communication supported today is _Web_. Output will be a paged
            /// result with _nextLink_, using which you can retrieve the next set of
            /// Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is
            /// available for 12 months after ticket creation. If a ticket was created more
            /// than 12 months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 10 and max is
            /// 10.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation. You can filter by communicationType
            /// and createdDate properties. CommunicationType supports Equals ('eq')
            /// operator and createdDate supports Greater Than ('gt') and Greater Than or
            /// Equals ('ge') operators. You may combine the CommunicationType and
            /// CreatedDate filters by Logical And ('and') operator.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationDetails>> ListAsync(this ICommunicationsOperations operations, string supportTicketName, int? top = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(supportTicketName, top, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns communication details for a support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            public static CommunicationDetails Get(this ICommunicationsOperations operations, string supportTicketName, string communicationName)
            {
                return operations.GetAsync(supportTicketName, communicationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns communication details for a support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationDetails> GetAsync(this ICommunicationsOperations operations, string supportTicketName, string communicationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(supportTicketName, communicationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new customer communication to an Azure support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            public static CommunicationDetails Create(this ICommunicationsOperations operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters)
            {
                return operations.CreateAsync(supportTicketName, communicationName, createCommunicationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new customer communication to an Azure support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationDetails> CreateAsync(this ICommunicationsOperations operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(supportTicketName, communicationName, createCommunicationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new customer communication to an Azure support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            public static CommunicationDetails BeginCreate(this ICommunicationsOperations operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters)
            {
                return operations.BeginCreateAsync(supportTicketName, communicationName, createCommunicationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new customer communication to an Azure support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationDetails> BeginCreateAsync(this ICommunicationsOperations operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(supportTicketName, communicationName, createCommunicationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all communications (attachments not included) for a support ticket.
            /// &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by
            /// _CreatedDate_ or _CommunicationType_ using the $filter parameter. The only
            /// type of communication supported today is _Web_. Output will be a paged
            /// result with _nextLink_, using which you can retrieve the next set of
            /// Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is
            /// available for 12 months after ticket creation. If a ticket was created more
            /// than 12 months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CommunicationDetails> ListNext(this ICommunicationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all communications (attachments not included) for a support ticket.
            /// &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by
            /// _CreatedDate_ or _CommunicationType_ using the $filter parameter. The only
            /// type of communication supported today is _Web_. Output will be a paged
            /// result with _nextLink_, using which you can retrieve the next set of
            /// Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is
            /// available for 12 months after ticket creation. If a ticket was created more
            /// than 12 months ago, a request for data might cause an error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationDetails>> ListNextAsync(this ICommunicationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
