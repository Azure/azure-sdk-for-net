// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CommunicationsOperations.
    /// </summary>
    public static partial class CommunicationsOperationsExtensions
    {
            /// <summary>
            /// Lists all communications for a support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 10 and max is
            /// 10.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static IPage<CommunicationDetails> ListBySubscriptionTicket(this ICommunicationsOperations operations, string supportTicketName, int? top = default(int?), string filter = default(string))
            {
                return operations.ListBySubscriptionTicketAsync(supportTicketName, top, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all communications for a support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='top'>
            /// The number of values to return in the collection. Default is 10 and max is
            /// 10.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationDetails>> ListBySubscriptionTicketAsync(this ICommunicationsOperations operations, string supportTicketName, int? top = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionTicketWithHttpMessagesAsync(supportTicketName, top, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details of a specific communication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            public static CommunicationDetails GetBySubscriptionTicket(this ICommunicationsOperations operations, string supportTicketName, string communicationName)
            {
                return operations.GetBySubscriptionTicketAsync(supportTicketName, communicationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details of a specific communication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationDetails> GetBySubscriptionTicketAsync(this ICommunicationsOperations operations, string supportTicketName, string communicationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBySubscriptionTicketWithHttpMessagesAsync(supportTicketName, communicationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all communications for a support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CommunicationDetails> ListBySubscriptionTicketNext(this ICommunicationsOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionTicketNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all communications for a support ticket.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunicationDetails>> ListBySubscriptionTicketNextAsync(this ICommunicationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionTicketNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
