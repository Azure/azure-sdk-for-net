// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Support
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MicrosoftSupportClient.
    /// </summary>
    public static partial class MicrosoftSupportClientExtensions
    {
            /// <summary>
            /// Check the availability of a resource name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailabilityWithSubscription(this IMicrosoftSupportClient operations, CheckNameAvailabilityInput checkNameAvailabilityInput)
            {
                return operations.CheckNameAvailabilityWithSubscriptionAsync(checkNameAvailabilityInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the availability of a resource name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityWithSubscriptionAsync(this IMicrosoftSupportClient operations, CheckNameAvailabilityInput checkNameAvailabilityInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithSubscriptionWithHttpMessagesAsync(checkNameAvailabilityInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a support ticket for a subscription.
            /// </summary>
            /// <remarks>
            /// A paid support plan is required to use this API to create a support ticket.
            /// Users can create tickets for issues relating to Billing, Subscription
            /// Management, Quota or any of the supported Azure technical services as
            /// indicated by the 'serviceId' in the request.
            /// &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues,
            /// user must set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription
            /// Management tickets**&lt;br/&gt; For issues relating to subscription
            /// management, *serviceId* should be set to
            /// *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical
            /// tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId*
            /// to one of the technical service ids and must provide additional information
            /// in TechnicalScopingInformation. &lt;br/&gt;Users must also provide
            /// problemClassificationId when creating a support ticket.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            public static SupportTicketDetails CreateSupportTicketForSubscription(this IMicrosoftSupportClient operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters)
            {
                return operations.CreateSupportTicketForSubscriptionAsync(supportTicketName, createSupportTicketParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a support ticket for a subscription.
            /// </summary>
            /// <remarks>
            /// A paid support plan is required to use this API to create a support ticket.
            /// Users can create tickets for issues relating to Billing, Subscription
            /// Management, Quota or any of the supported Azure technical services as
            /// indicated by the 'serviceId' in the request.
            /// &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues,
            /// user must set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription
            /// Management tickets**&lt;br/&gt; For issues relating to subscription
            /// management, *serviceId* should be set to
            /// *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical
            /// tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId*
            /// to one of the technical service ids and must provide additional information
            /// in TechnicalScopingInformation. &lt;br/&gt;Users must also provide
            /// problemClassificationId when creating a support ticket.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> CreateSupportTicketForSubscriptionAsync(this IMicrosoftSupportClient operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSupportTicketForSubscriptionWithHttpMessagesAsync(supportTicketName, createSupportTicketParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check the availability of a resource name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            public static CheckNameAvailabilityOutput CheckNameAvailabilityForSupportTicketCommunication(this IMicrosoftSupportClient operations, string supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput)
            {
                return operations.CheckNameAvailabilityForSupportTicketCommunicationAsync(supportTicketName, checkNameAvailabilityInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check the availability of a resource name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='checkNameAvailabilityInput'>
            /// Input to check.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityOutput> CheckNameAvailabilityForSupportTicketCommunicationAsync(this IMicrosoftSupportClient operations, string supportTicketName, CheckNameAvailabilityInput checkNameAvailabilityInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityForSupportTicketCommunicationWithHttpMessagesAsync(supportTicketName, checkNameAvailabilityInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a support ticket communication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            public static CommunicationDetails CreateSupportTicketCommunication(this IMicrosoftSupportClient operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters)
            {
                return operations.CreateSupportTicketCommunicationAsync(supportTicketName, communicationName, createCommunicationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a support ticket communication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationDetails> CreateSupportTicketCommunicationAsync(this IMicrosoftSupportClient operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSupportTicketCommunicationWithHttpMessagesAsync(supportTicketName, communicationName, createCommunicationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a support ticket for a subscription.
            /// </summary>
            /// <remarks>
            /// A paid support plan is required to use this API to create a support ticket.
            /// Users can create tickets for issues relating to Billing, Subscription
            /// Management, Quota or any of the supported Azure technical services as
            /// indicated by the 'serviceId' in the request.
            /// &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues,
            /// user must set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription
            /// Management tickets**&lt;br/&gt; For issues relating to subscription
            /// management, *serviceId* should be set to
            /// *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical
            /// tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId*
            /// to one of the technical service ids and must provide additional information
            /// in TechnicalScopingInformation. &lt;br/&gt;Users must also provide
            /// problemClassificationId when creating a support ticket.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            public static SupportTicketDetails BeginCreateSupportTicketForSubscription(this IMicrosoftSupportClient operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters)
            {
                return operations.BeginCreateSupportTicketForSubscriptionAsync(supportTicketName, createSupportTicketParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a support ticket for a subscription.
            /// </summary>
            /// <remarks>
            /// A paid support plan is required to use this API to create a support ticket.
            /// Users can create tickets for issues relating to Billing, Subscription
            /// Management, Quota or any of the supported Azure technical services as
            /// indicated by the 'serviceId' in the request.
            /// &lt;br/&gt;&lt;br/&gt;**Billing tickets**&lt;br/&gt;For billing issues,
            /// user must set *serviceId* to
            /// *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.&lt;br/&gt;&lt;br/&gt;**Subscription
            /// Management tickets**&lt;br/&gt; For issues relating to subscription
            /// management, *serviceId* should be set to
            /// *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.&lt;br/&gt;&lt;br/&gt;**Technical
            /// tickets**&lt;br/&gt;For technical support ticket, user must set *serviceId*
            /// to one of the technical service ids and must provide additional information
            /// in TechnicalScopingInformation. &lt;br/&gt;Users must also provide
            /// problemClassificationId when creating a support ticket.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='createSupportTicketParameters'>
            /// Support ticket request payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupportTicketDetails> BeginCreateSupportTicketForSubscriptionAsync(this IMicrosoftSupportClient operations, string supportTicketName, SupportTicketDetails createSupportTicketParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateSupportTicketForSubscriptionWithHttpMessagesAsync(supportTicketName, createSupportTicketParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a support ticket communication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            public static CommunicationDetails BeginCreateSupportTicketCommunication(this IMicrosoftSupportClient operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters)
            {
                return operations.BeginCreateSupportTicketCommunicationAsync(supportTicketName, communicationName, createCommunicationParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a support ticket communication.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supportTicketName'>
            /// Support ticket name.
            /// </param>
            /// <param name='communicationName'>
            /// Communication name.
            /// </param>
            /// <param name='createCommunicationParameters'>
            /// Communication object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunicationDetails> BeginCreateSupportTicketCommunicationAsync(this IMicrosoftSupportClient operations, string supportTicketName, string communicationName, CommunicationDetails createCommunicationParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateSupportTicketCommunicationWithHttpMessagesAsync(supportTicketName, communicationName, createCommunicationParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
