// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Support.Models;

namespace Azure.ResourceManager.Support
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _supportTicketDetailSupportTicketsClientDiagnostics;
        private SupportTicketsRestOperations _supportTicketDetailSupportTicketsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SupportTicketDetailSupportTicketsClientDiagnostics => _supportTicketDetailSupportTicketsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Support", SupportTicketDetailResource.ResourceType.Namespace, Diagnostics);
        private SupportTicketsRestOperations SupportTicketDetailSupportTicketsRestClient => _supportTicketDetailSupportTicketsRestClient ??= new SupportTicketsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SupportTicketDetailResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of SupportTicketDetailResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of SupportTicketDetailResources and their operations over a SupportTicketDetailResource. </returns>
        public virtual SupportTicketDetailCollection GetSupportTicketDetails()
        {
            return GetCachedClient(Client => new SupportTicketDetailCollection(Client, Id));
        }

        /// <summary>
        /// Check the availability of a resource name. This API should be used to check the uniqueness of the name for support ticket creation for the selected subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability
        /// Operation Id: SupportTickets_CheckNameAvailability
        /// </summary>
        /// <param name="input"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckNameAvailabilityOutput>> CheckNameAvailabilitySupportTicketAsync(CheckNameAvailabilityInput input, CancellationToken cancellationToken = default)
        {
            using var scope = SupportTicketDetailSupportTicketsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilitySupportTicket");
            scope.Start();
            try
            {
                var response = await SupportTicketDetailSupportTicketsRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, input, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check the availability of a resource name. This API should be used to check the uniqueness of the name for support ticket creation for the selected subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability
        /// Operation Id: SupportTickets_CheckNameAvailability
        /// </summary>
        /// <param name="input"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameAvailabilityOutput> CheckNameAvailabilitySupportTicket(CheckNameAvailabilityInput input, CancellationToken cancellationToken = default)
        {
            using var scope = SupportTicketDetailSupportTicketsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilitySupportTicket");
            scope.Start();
            try
            {
                var response = SupportTicketDetailSupportTicketsRestClient.CheckNameAvailability(Id.SubscriptionId, input, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
