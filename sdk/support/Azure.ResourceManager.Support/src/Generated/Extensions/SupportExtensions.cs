// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Support.Models;

namespace Azure.ResourceManager.Support
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Support. </summary>
    public static partial class SupportExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of ServiceResources in the TenantResource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ServiceResources and their operations over a ServiceResource. </returns>
        public static ServiceCollection GetServices(this TenantResource tenantResource)
        {
            return GetExtensionClient(tenantResource).GetServices();
        }

        /// <summary>
        /// Gets a specific Azure service for support ticket creation.
        /// Request Path: /providers/Microsoft.Support/services/{serviceName}
        /// Operation Id: Services_Get
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="serviceName"> Name of the Azure service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ServiceResource>> GetServiceAsync(this TenantResource tenantResource, string serviceName, CancellationToken cancellationToken = default)
        {
            return await tenantResource.GetServices().GetAsync(serviceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a specific Azure service for support ticket creation.
        /// Request Path: /providers/Microsoft.Support/services/{serviceName}
        /// Operation Id: Services_Get
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="serviceName"> Name of the Azure service. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ServiceResource> GetService(this TenantResource tenantResource, string serviceName, CancellationToken cancellationToken = default)
        {
            return tenantResource.GetServices().Get(serviceName, cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of SupportTicketDetailResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SupportTicketDetailResources and their operations over a SupportTicketDetailResource. </returns>
        public static SupportTicketDetailCollection GetSupportTicketDetails(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetSupportTicketDetails();
        }

        /// <summary>
        /// Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
        /// Operation Id: SupportTickets_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="supportTicketName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SupportTicketDetailResource>> GetSupportTicketDetailAsync(this SubscriptionResource subscriptionResource, string supportTicketName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetSupportTicketDetails().GetAsync(supportTicketName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
        /// Operation Id: SupportTickets_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="supportTicketName"> Support ticket name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="supportTicketName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="supportTicketName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SupportTicketDetailResource> GetSupportTicketDetail(this SubscriptionResource subscriptionResource, string supportTicketName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetSupportTicketDetails().Get(supportTicketName, cancellationToken);
        }

        /// <summary>
        /// Check the availability of a resource name. This API should be used to check the uniqueness of the name for support ticket creation for the selected subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability
        /// Operation Id: SupportTickets_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="input"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityOutput>> CheckNameAvailabilitySupportTicketAsync(this SubscriptionResource subscriptionResource, CheckNameAvailabilityInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            return await GetExtensionClient(subscriptionResource).CheckNameAvailabilitySupportTicketAsync(input, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check the availability of a resource name. This API should be used to check the uniqueness of the name for support ticket creation for the selected subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability
        /// Operation Id: SupportTickets_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="input"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public static Response<CheckNameAvailabilityOutput> CheckNameAvailabilitySupportTicket(this SubscriptionResource subscriptionResource, CheckNameAvailabilityInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            return GetExtensionClient(subscriptionResource).CheckNameAvailabilitySupportTicket(input, cancellationToken);
        }

        #region ServiceResource
        /// <summary>
        /// Gets an object representing a <see cref="ServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ServiceResource.CreateResourceIdentifier" /> to create a <see cref="ServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ServiceResource" /> object. </returns>
        public static ServiceResource GetServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ServiceResource.ValidateResourceId(id);
                return new ServiceResource(client, id);
            }
            );
        }
        #endregion

        #region ProblemClassificationResource
        /// <summary>
        /// Gets an object representing a <see cref="ProblemClassificationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProblemClassificationResource.CreateResourceIdentifier" /> to create a <see cref="ProblemClassificationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProblemClassificationResource" /> object. </returns>
        public static ProblemClassificationResource GetProblemClassificationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProblemClassificationResource.ValidateResourceId(id);
                return new ProblemClassificationResource(client, id);
            }
            );
        }
        #endregion

        #region SupportTicketDetailResource
        /// <summary>
        /// Gets an object representing a <see cref="SupportTicketDetailResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SupportTicketDetailResource.CreateResourceIdentifier" /> to create a <see cref="SupportTicketDetailResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SupportTicketDetailResource" /> object. </returns>
        public static SupportTicketDetailResource GetSupportTicketDetailResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SupportTicketDetailResource.ValidateResourceId(id);
                return new SupportTicketDetailResource(client, id);
            }
            );
        }
        #endregion

        #region CommunicationDetailResource
        /// <summary>
        /// Gets an object representing a <see cref="CommunicationDetailResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CommunicationDetailResource.CreateResourceIdentifier" /> to create a <see cref="CommunicationDetailResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CommunicationDetailResource" /> object. </returns>
        public static CommunicationDetailResource GetCommunicationDetailResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CommunicationDetailResource.ValidateResourceId(id);
                return new CommunicationDetailResource(client, id);
            }
            );
        }
        #endregion
    }
}
