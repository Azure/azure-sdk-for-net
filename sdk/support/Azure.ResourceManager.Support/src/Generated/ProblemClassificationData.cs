// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Support.Models;

namespace Azure.ResourceManager.Support
{
    /// <summary>
    /// A class representing the ProblemClassification data model.
    /// ProblemClassification resource object.
    /// </summary>
    public partial class ProblemClassificationData : ResourceData
    {
        /// <summary> Initializes a new instance of <see cref="ProblemClassificationData"/>. </summary>
        internal ProblemClassificationData()
        {
            SecondaryConsentEnabled = new ChangeTrackingList<SecondaryConsentEnabled>();
        }

        /// <summary> Initializes a new instance of <see cref="ProblemClassificationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> Localized name of problem classification. </param>
        /// <param name="secondaryConsentEnabled"> This property indicates whether secondary consent is present for problem classification. </param>
        internal ProblemClassificationData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string displayName, IReadOnlyList<SecondaryConsentEnabled> secondaryConsentEnabled) : base(id, name, resourceType, systemData)
        {
            DisplayName = displayName;
            SecondaryConsentEnabled = secondaryConsentEnabled;
        }

        /// <summary> Localized name of problem classification. </summary>
        public string DisplayName { get; }
        /// <summary> This property indicates whether secondary consent is present for problem classification. </summary>
        public IReadOnlyList<SecondaryConsentEnabled> SecondaryConsentEnabled { get; }
    }
}
