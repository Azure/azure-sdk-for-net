// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Support
{
    /// <summary>
    /// A class representing a collection of <see cref="CommunicationDetailResource" /> and their operations.
    /// Each <see cref="CommunicationDetailResource" /> in the collection will belong to the same instance of <see cref="SupportTicketDetailResource" />.
    /// To get a <see cref="CommunicationDetailCollection" /> instance call the GetCommunicationDetails method from an instance of <see cref="SupportTicketDetailResource" />.
    /// </summary>
    public partial class CommunicationDetailCollection : ArmCollection, IEnumerable<CommunicationDetailResource>, IAsyncEnumerable<CommunicationDetailResource>
    {
        private readonly ClientDiagnostics _communicationDetailCommunicationsClientDiagnostics;
        private readonly CommunicationsRestOperations _communicationDetailCommunicationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="CommunicationDetailCollection"/> class for mocking. </summary>
        protected CommunicationDetailCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CommunicationDetailCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal CommunicationDetailCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _communicationDetailCommunicationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Support", CommunicationDetailResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CommunicationDetailResource.ResourceType, out string communicationDetailCommunicationsApiVersion);
            _communicationDetailCommunicationsRestClient = new CommunicationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, communicationDetailCommunicationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SupportTicketDetailResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SupportTicketDetailResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Adds a new customer communication to an Azure support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="data"> Communication object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<CommunicationDetailResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string communicationName, CommunicationDetailData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communicationName, nameof(communicationName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _communicationDetailCommunicationsRestClient.CreateAsync(Id.SubscriptionId, Id.Name, communicationName, data, cancellationToken).ConfigureAwait(false);
                var operation = new SupportArmOperation<CommunicationDetailResource>(new CommunicationDetailOperationSource(Client), _communicationDetailCommunicationsClientDiagnostics, Pipeline, _communicationDetailCommunicationsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.Name, communicationName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Adds a new customer communication to an Azure support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="data"> Communication object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<CommunicationDetailResource> CreateOrUpdate(WaitUntil waitUntil, string communicationName, CommunicationDetailData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communicationName, nameof(communicationName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _communicationDetailCommunicationsRestClient.Create(Id.SubscriptionId, Id.Name, communicationName, data, cancellationToken);
                var operation = new SupportArmOperation<CommunicationDetailResource>(new CommunicationDetailOperationSource(Client), _communicationDetailCommunicationsClientDiagnostics, Pipeline, _communicationDetailCommunicationsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.Name, communicationName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns communication details for a support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Get
        /// </summary>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> is null. </exception>
        public virtual async Task<Response<CommunicationDetailResource>> GetAsync(string communicationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communicationName, nameof(communicationName));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.Get");
            scope.Start();
            try
            {
                var response = await _communicationDetailCommunicationsRestClient.GetAsync(Id.SubscriptionId, Id.Name, communicationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CommunicationDetailResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns communication details for a support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Get
        /// </summary>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> is null. </exception>
        public virtual Response<CommunicationDetailResource> Get(string communicationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communicationName, nameof(communicationName));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.Get");
            scope.Start();
            try
            {
                var response = _communicationDetailCommunicationsRestClient.Get(Id.SubscriptionId, Id.Name, communicationName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new CommunicationDetailResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications
        /// Operation Id: Communications_List
        /// </summary>
        /// <param name="top"> The number of values to return in the collection. Default is 10 and max is 10. </param>
        /// <param name="filter"> The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals (&apos;eq&apos;) operator and createdDate supports Greater Than (&apos;gt&apos;) and Greater Than or Equals (&apos;ge&apos;) operators. You may combine the CommunicationType and CreatedDate filters by Logical And (&apos;and&apos;) operator. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CommunicationDetailResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CommunicationDetailResource> GetAllAsync(int? top = null, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<CommunicationDetailResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _communicationDetailCommunicationsRestClient.ListAsync(Id.SubscriptionId, Id.Name, top, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CommunicationDetailResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CommunicationDetailResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _communicationDetailCommunicationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.Name, top, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new CommunicationDetailResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all communications (attachments not included) for a support ticket. &lt;br/&gt;&lt;/br&gt; You can also filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter parameter. The only type of communication supported today is _Web_. Output will be a paged result with _nextLink_, using which you can retrieve the next set of Communication results. &lt;br/&gt;&lt;br/&gt;Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications
        /// Operation Id: Communications_List
        /// </summary>
        /// <param name="top"> The number of values to return in the collection. Default is 10 and max is 10. </param>
        /// <param name="filter"> The filter to apply on the operation. You can filter by communicationType and createdDate properties. CommunicationType supports Equals (&apos;eq&apos;) operator and createdDate supports Greater Than (&apos;gt&apos;) and Greater Than or Equals (&apos;ge&apos;) operators. You may combine the CommunicationType and CreatedDate filters by Logical And (&apos;and&apos;) operator. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CommunicationDetailResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CommunicationDetailResource> GetAll(int? top = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<CommunicationDetailResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _communicationDetailCommunicationsRestClient.List(Id.SubscriptionId, Id.Name, top, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CommunicationDetailResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CommunicationDetailResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _communicationDetailCommunicationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.Name, top, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new CommunicationDetailResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Get
        /// </summary>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string communicationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communicationName, nameof(communicationName));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.Exists");
            scope.Start();
            try
            {
                var response = await _communicationDetailCommunicationsRestClient.GetAsync(Id.SubscriptionId, Id.Name, communicationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Get
        /// </summary>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> is null. </exception>
        public virtual Response<bool> Exists(string communicationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(communicationName, nameof(communicationName));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("CommunicationDetailCollection.Exists");
            scope.Start();
            try
            {
                var response = _communicationDetailCommunicationsRestClient.Get(Id.SubscriptionId, Id.Name, communicationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<CommunicationDetailResource> IEnumerable<CommunicationDetailResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<CommunicationDetailResource> IAsyncEnumerable<CommunicationDetailResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
