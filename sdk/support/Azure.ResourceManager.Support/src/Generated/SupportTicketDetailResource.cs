// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Support.Models;

namespace Azure.ResourceManager.Support
{
    /// <summary>
    /// A Class representing a SupportTicketDetail along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="SupportTicketDetailResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetSupportTicketDetailResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource" /> using the GetSupportTicketDetail method.
    /// </summary>
    public partial class SupportTicketDetailResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SupportTicketDetailResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string supportTicketName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _supportTicketDetailSupportTicketsClientDiagnostics;
        private readonly SupportTicketsRestOperations _supportTicketDetailSupportTicketsRestClient;
        private readonly ClientDiagnostics _communicationDetailCommunicationsClientDiagnostics;
        private readonly CommunicationsRestOperations _communicationDetailCommunicationsRestClient;
        private readonly SupportTicketDetailData _data;

        /// <summary> Initializes a new instance of the <see cref="SupportTicketDetailResource"/> class for mocking. </summary>
        protected SupportTicketDetailResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SupportTicketDetailResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal SupportTicketDetailResource(ArmClient client, SupportTicketDetailData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="SupportTicketDetailResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SupportTicketDetailResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _supportTicketDetailSupportTicketsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Support", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string supportTicketDetailSupportTicketsApiVersion);
            _supportTicketDetailSupportTicketsRestClient = new SupportTicketsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, supportTicketDetailSupportTicketsApiVersion);
            _communicationDetailCommunicationsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Support", CommunicationDetailResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CommunicationDetailResource.ResourceType, out string communicationDetailCommunicationsApiVersion);
            _communicationDetailCommunicationsRestClient = new CommunicationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, communicationDetailCommunicationsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Support/supportTickets";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual SupportTicketDetailData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of CommunicationDetailResources in the SupportTicketDetail. </summary>
        /// <returns> An object representing collection of CommunicationDetailResources and their operations over a CommunicationDetailResource. </returns>
        public virtual CommunicationDetailCollection GetCommunicationDetails()
        {
            return GetCachedClient(Client => new CommunicationDetailCollection(Client, Id));
        }

        /// <summary>
        /// Returns communication details for a support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Get
        /// </summary>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CommunicationDetailResource>> GetCommunicationDetailAsync(string communicationName, CancellationToken cancellationToken = default)
        {
            return await GetCommunicationDetails().GetAsync(communicationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns communication details for a support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}
        /// Operation Id: Communications_Get
        /// </summary>
        /// <param name="communicationName"> Communication name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="communicationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="communicationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CommunicationDetailResource> GetCommunicationDetail(string communicationName, CancellationToken cancellationToken = default)
        {
            return GetCommunicationDetails().Get(communicationName, cancellationToken);
        }

        /// <summary>
        /// Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
        /// Operation Id: SupportTickets_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SupportTicketDetailResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _supportTicketDetailSupportTicketsClientDiagnostics.CreateScope("SupportTicketDetailResource.Get");
            scope.Start();
            try
            {
                var response = await _supportTicketDetailSupportTicketsRestClient.GetAsync(Id.SubscriptionId, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SupportTicketDetailResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an error.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
        /// Operation Id: SupportTickets_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SupportTicketDetailResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _supportTicketDetailSupportTicketsClientDiagnostics.CreateScope("SupportTicketDetailResource.Get");
            scope.Start();
            try
            {
                var response = _supportTicketDetailSupportTicketsRestClient.Get(Id.SubscriptionId, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SupportTicketDetailResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API allows you to update the severity level, ticket status, and your contact information in the support ticket.&lt;br/&gt;&lt;br/&gt;Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.&lt;br/&gt;&lt;br/&gt;Changing the ticket status to _closed_ is allowed only on an unassigned case. When an engineer is actively working on the ticket, send your ticket closure request by sending a note to your engineer.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
        /// Operation Id: SupportTickets_Update
        /// </summary>
        /// <param name="patch"> UpdateSupportTicket object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<SupportTicketDetailResource>> UpdateAsync(SupportTicketDetailPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _supportTicketDetailSupportTicketsClientDiagnostics.CreateScope("SupportTicketDetailResource.Update");
            scope.Start();
            try
            {
                var response = await _supportTicketDetailSupportTicketsRestClient.UpdateAsync(Id.SubscriptionId, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SupportTicketDetailResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API allows you to update the severity level, ticket status, and your contact information in the support ticket.&lt;br/&gt;&lt;br/&gt;Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.&lt;br/&gt;&lt;br/&gt;Changing the ticket status to _closed_ is allowed only on an unassigned case. When an engineer is actively working on the ticket, send your ticket closure request by sending a note to your engineer.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}
        /// Operation Id: SupportTickets_Update
        /// </summary>
        /// <param name="patch"> UpdateSupportTicket object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual Response<SupportTicketDetailResource> Update(SupportTicketDetailPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _supportTicketDetailSupportTicketsClientDiagnostics.CreateScope("SupportTicketDetailResource.Update");
            scope.Start();
            try
            {
                var response = _supportTicketDetailSupportTicketsRestClient.Update(Id.SubscriptionId, Id.Name, patch, cancellationToken);
                return Response.FromValue(new SupportTicketDetailResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check the availability of a resource name. This API should be used to check the uniqueness of the name for adding a new communication to the support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability
        /// Operation Id: Communications_CheckNameAvailability
        /// </summary>
        /// <param name="input"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual async Task<Response<CheckNameAvailabilityOutput>> CheckNameAvailabilityCommunicationAsync(CheckNameAvailabilityInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("SupportTicketDetailResource.CheckNameAvailabilityCommunication");
            scope.Start();
            try
            {
                var response = await _communicationDetailCommunicationsRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, Id.Name, input, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check the availability of a resource name. This API should be used to check the uniqueness of the name for adding a new communication to the support ticket.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability
        /// Operation Id: Communications_CheckNameAvailability
        /// </summary>
        /// <param name="input"> Input to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual Response<CheckNameAvailabilityOutput> CheckNameAvailabilityCommunication(CheckNameAvailabilityInput input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using var scope = _communicationDetailCommunicationsClientDiagnostics.CreateScope("SupportTicketDetailResource.CheckNameAvailabilityCommunication");
            scope.Start();
            try
            {
                var response = _communicationDetailCommunicationsRestClient.CheckNameAvailability(Id.SubscriptionId, Id.Name, input, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
