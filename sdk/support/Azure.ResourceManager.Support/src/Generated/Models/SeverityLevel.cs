// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Support.Models
{
    /// <summary> A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure. Note: &apos;Highest critical impact&apos;, also known as the &apos;Emergency - Severe impact&apos; level in the Azure portal is reserved only for our Premium customers. </summary>
    public readonly partial struct SeverityLevel : IEquatable<SeverityLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SeverityLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SeverityLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MinimalValue = "minimal";
        private const string ModerateValue = "moderate";
        private const string CriticalValue = "critical";
        private const string HighestcriticalimpactValue = "highestcriticalimpact";

        /// <summary> minimal. </summary>
        public static SeverityLevel Minimal { get; } = new SeverityLevel(MinimalValue);
        /// <summary> moderate. </summary>
        public static SeverityLevel Moderate { get; } = new SeverityLevel(ModerateValue);
        /// <summary> critical. </summary>
        public static SeverityLevel Critical { get; } = new SeverityLevel(CriticalValue);
        /// <summary> highestcriticalimpact. </summary>
        public static SeverityLevel Highestcriticalimpact { get; } = new SeverityLevel(HighestcriticalimpactValue);
        /// <summary> Determines if two <see cref="SeverityLevel"/> values are the same. </summary>
        public static bool operator ==(SeverityLevel left, SeverityLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SeverityLevel"/> values are not the same. </summary>
        public static bool operator !=(SeverityLevel left, SeverityLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SeverityLevel"/>. </summary>
        public static implicit operator SeverityLevel(string value) => new SeverityLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SeverityLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SeverityLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
