// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Support.Models;

namespace Azure.ResourceManager.Support
{
    public partial class SupportTicketData : IUtf8JsonSerializable, IJsonModel<SupportTicketData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SupportTicketData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SupportTicketData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportTicketData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SupportTicketData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(SupportTicketId))
            {
                writer.WritePropertyName("supportTicketId"u8);
                writer.WriteStringValue(SupportTicketId);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(ProblemClassificationId))
            {
                writer.WritePropertyName("problemClassificationId"u8);
                writer.WriteStringValue(ProblemClassificationId);
            }
            if (options.Format != "W" && Optional.IsDefined(ProblemClassificationDisplayName))
            {
                writer.WritePropertyName("problemClassificationDisplayName"u8);
                writer.WriteStringValue(ProblemClassificationDisplayName);
            }
            if (Optional.IsDefined(Severity))
            {
                writer.WritePropertyName("severity"u8);
                writer.WriteStringValue(Severity.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(EnrollmentId))
            {
                writer.WritePropertyName("enrollmentId"u8);
                writer.WriteStringValue(EnrollmentId);
            }
            if (Optional.IsDefined(Require24X7Response))
            {
                writer.WritePropertyName("require24X7Response"u8);
                writer.WriteBooleanValue(Require24X7Response.Value);
            }
            if (Optional.IsDefined(AdvancedDiagnosticConsent))
            {
                writer.WritePropertyName("advancedDiagnosticConsent"u8);
                writer.WriteStringValue(AdvancedDiagnosticConsent.Value.ToString());
            }
            if (Optional.IsDefined(ProblemScopingQuestions))
            {
                writer.WritePropertyName("problemScopingQuestions"u8);
                writer.WriteStringValue(ProblemScopingQuestions);
            }
            if (Optional.IsDefined(SupportPlanId))
            {
                writer.WritePropertyName("supportPlanId"u8);
                writer.WriteStringValue(SupportPlanId);
            }
            if (Optional.IsDefined(ContactDetails))
            {
                writer.WritePropertyName("contactDetails"u8);
                writer.WriteObjectValue(ContactDetails);
            }
            if (Optional.IsDefined(ServiceLevelAgreement))
            {
                writer.WritePropertyName("serviceLevelAgreement"u8);
                writer.WriteObjectValue(ServiceLevelAgreement);
            }
            if (Optional.IsDefined(SupportEngineer))
            {
                writer.WritePropertyName("supportEngineer"u8);
                writer.WriteObjectValue(SupportEngineer);
            }
            if (options.Format != "W" && Optional.IsDefined(SupportPlanType))
            {
                writer.WritePropertyName("supportPlanType"u8);
                writer.WriteStringValue(SupportPlanType);
            }
            if (options.Format != "W" && Optional.IsDefined(SupportPlanDisplayName))
            {
                writer.WritePropertyName("supportPlanDisplayName"u8);
                writer.WriteStringValue(SupportPlanDisplayName);
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(ProblemStartOn))
            {
                writer.WritePropertyName("problemStartTime"u8);
                writer.WriteStringValue(ProblemStartOn.Value, "O");
            }
            if (Optional.IsDefined(ServiceId))
            {
                writer.WritePropertyName("serviceId"u8);
                writer.WriteStringValue(ServiceId);
            }
            if (options.Format != "W" && Optional.IsDefined(ServiceDisplayName))
            {
                writer.WritePropertyName("serviceDisplayName"u8);
                writer.WriteStringValue(ServiceDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdDate"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ModifiedOn))
            {
                writer.WritePropertyName("modifiedDate"u8);
                writer.WriteStringValue(ModifiedOn.Value, "O");
            }
            if (Optional.IsDefined(FileWorkspaceName))
            {
                writer.WritePropertyName("fileWorkspaceName"u8);
                writer.WriteStringValue(FileWorkspaceName);
            }
            if (Optional.IsDefined(TechnicalTicketDetails))
            {
                writer.WritePropertyName("technicalTicketDetails"u8);
                writer.WriteObjectValue(TechnicalTicketDetails);
            }
            if (Optional.IsDefined(QuotaTicketDetails))
            {
                writer.WritePropertyName("quotaTicketDetails"u8);
                writer.WriteObjectValue(QuotaTicketDetails);
            }
            if (Optional.IsCollectionDefined(SecondaryConsent))
            {
                writer.WritePropertyName("secondaryConsent"u8);
                writer.WriteStartArray();
                foreach (var item in SecondaryConsent)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SupportTicketData IJsonModel<SupportTicketData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportTicketData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SupportTicketData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSupportTicketData(document.RootElement, options);
        }

        internal static SupportTicketData DeserializeSupportTicketData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> supportTicketId = default;
            Optional<string> description = default;
            Optional<string> problemClassificationId = default;
            Optional<string> problemClassificationDisplayName = default;
            Optional<SupportSeverityLevel> severity = default;
            Optional<string> enrollmentId = default;
            Optional<bool> require24X7Response = default;
            Optional<AdvancedDiagnosticConsent> advancedDiagnosticConsent = default;
            Optional<string> problemScopingQuestions = default;
            Optional<string> supportPlanId = default;
            Optional<SupportContactProfile> contactDetails = default;
            Optional<SupportServiceLevelAgreement> serviceLevelAgreement = default;
            Optional<SupportEngineer> supportEngineer = default;
            Optional<string> supportPlanType = default;
            Optional<string> supportPlanDisplayName = default;
            Optional<string> title = default;
            Optional<DateTimeOffset> problemStartTime = default;
            Optional<string> serviceId = default;
            Optional<string> serviceDisplayName = default;
            Optional<string> status = default;
            Optional<DateTimeOffset> createdDate = default;
            Optional<DateTimeOffset> modifiedDate = default;
            Optional<string> fileWorkspaceName = default;
            Optional<TechnicalTicketDetails> technicalTicketDetails = default;
            Optional<QuotaTicketDetails> quotaTicketDetails = default;
            Optional<IList<SecondaryConsent>> secondaryConsent = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("supportTicketId"u8))
                        {
                            supportTicketId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("problemClassificationId"u8))
                        {
                            problemClassificationId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("problemClassificationDisplayName"u8))
                        {
                            problemClassificationDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("severity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            severity = new SupportSeverityLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("enrollmentId"u8))
                        {
                            enrollmentId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("require24X7Response"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            require24X7Response = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("advancedDiagnosticConsent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            advancedDiagnosticConsent = new AdvancedDiagnosticConsent(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("problemScopingQuestions"u8))
                        {
                            problemScopingQuestions = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("supportPlanId"u8))
                        {
                            supportPlanId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("contactDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            contactDetails = SupportContactProfile.DeserializeSupportContactProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("serviceLevelAgreement"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            serviceLevelAgreement = SupportServiceLevelAgreement.DeserializeSupportServiceLevelAgreement(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("supportEngineer"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            supportEngineer = SupportEngineer.DeserializeSupportEngineer(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("supportPlanType"u8))
                        {
                            supportPlanType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("supportPlanDisplayName"u8))
                        {
                            supportPlanDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("title"u8))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("problemStartTime"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            problemStartTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("serviceId"u8))
                        {
                            serviceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceDisplayName"u8))
                        {
                            serviceDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"u8))
                        {
                            status = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("modifiedDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            modifiedDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("fileWorkspaceName"u8))
                        {
                            fileWorkspaceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("technicalTicketDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            technicalTicketDetails = TechnicalTicketDetails.DeserializeTechnicalTicketDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("quotaTicketDetails"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            quotaTicketDetails = QuotaTicketDetails.DeserializeQuotaTicketDetails(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("secondaryConsent"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<SecondaryConsent> array = new List<SecondaryConsent>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(Models.SecondaryConsent.DeserializeSecondaryConsent(item));
                            }
                            secondaryConsent = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SupportTicketData(id, name, type, systemData.Value, supportTicketId.Value, description.Value, problemClassificationId.Value, problemClassificationDisplayName.Value, Optional.ToNullable(severity), enrollmentId.Value, Optional.ToNullable(require24X7Response), Optional.ToNullable(advancedDiagnosticConsent), problemScopingQuestions.Value, supportPlanId.Value, contactDetails.Value, serviceLevelAgreement.Value, supportEngineer.Value, supportPlanType.Value, supportPlanDisplayName.Value, title.Value, Optional.ToNullable(problemStartTime), serviceId.Value, serviceDisplayName.Value, status.Value, Optional.ToNullable(createdDate), Optional.ToNullable(modifiedDate), fileWorkspaceName.Value, technicalTicketDetails.Value, quotaTicketDetails.Value, Optional.ToList(secondaryConsent), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Id))
            {
                builder.Append("  id:");
                builder.AppendLine($" '{Id.ToString()}'");
            }

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                builder.AppendLine($" '{Name}'");
            }

            if (Optional.IsDefined(ResourceType))
            {
                builder.Append("  type:");
                builder.AppendLine($" '{ResourceType.ToString()}'");
            }

            if (Optional.IsDefined(SystemData))
            {
                builder.Append("  systemData:");
                builder.AppendLine($" '{SystemData.ToString()}'");
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(SupportTicketId))
            {
                builder.Append("    supportTicketId:");
                builder.AppendLine($" '{SupportTicketId}'");
            }

            if (Optional.IsDefined(Description))
            {
                builder.Append("    description:");
                builder.AppendLine($" '{Description}'");
            }

            if (Optional.IsDefined(ProblemClassificationId))
            {
                builder.Append("    problemClassificationId:");
                builder.AppendLine($" '{ProblemClassificationId}'");
            }

            if (Optional.IsDefined(ProblemClassificationDisplayName))
            {
                builder.Append("    problemClassificationDisplayName:");
                builder.AppendLine($" '{ProblemClassificationDisplayName}'");
            }

            if (Optional.IsDefined(Severity))
            {
                builder.Append("    severity:");
                builder.AppendLine($" '{Severity.ToString()}'");
            }

            if (Optional.IsDefined(EnrollmentId))
            {
                builder.Append("    enrollmentId:");
                builder.AppendLine($" '{EnrollmentId}'");
            }

            if (Optional.IsDefined(Require24X7Response))
            {
                builder.Append("    require24X7Response:");
                var boolValue = Require24X7Response.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(AdvancedDiagnosticConsent))
            {
                builder.Append("    advancedDiagnosticConsent:");
                builder.AppendLine($" '{AdvancedDiagnosticConsent.ToString()}'");
            }

            if (Optional.IsDefined(ProblemScopingQuestions))
            {
                builder.Append("    problemScopingQuestions:");
                builder.AppendLine($" '{ProblemScopingQuestions}'");
            }

            if (Optional.IsDefined(SupportPlanId))
            {
                builder.Append("    supportPlanId:");
                builder.AppendLine($" '{SupportPlanId}'");
            }

            if (Optional.IsDefined(ContactDetails))
            {
                builder.Append("    contactDetails:");
                AppendChildObject(builder, ContactDetails, options, 4, false);
            }

            if (Optional.IsDefined(ServiceLevelAgreement))
            {
                builder.Append("    serviceLevelAgreement:");
                AppendChildObject(builder, ServiceLevelAgreement, options, 4, false);
            }

            if (Optional.IsDefined(SupportEngineer))
            {
                builder.Append("    supportEngineer:");
                AppendChildObject(builder, SupportEngineer, options, 4, false);
            }

            if (Optional.IsDefined(SupportPlanType))
            {
                builder.Append("    supportPlanType:");
                builder.AppendLine($" '{SupportPlanType}'");
            }

            if (Optional.IsDefined(SupportPlanDisplayName))
            {
                builder.Append("    supportPlanDisplayName:");
                builder.AppendLine($" '{SupportPlanDisplayName}'");
            }

            if (Optional.IsDefined(Title))
            {
                builder.Append("    title:");
                builder.AppendLine($" '{Title}'");
            }

            if (Optional.IsDefined(ProblemStartOn))
            {
                builder.Append("    problemStartTime:");
                var formattedDateTimeString = TypeFormatters.ToString(ProblemStartOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(ServiceId))
            {
                builder.Append("    serviceId:");
                builder.AppendLine($" '{ServiceId}'");
            }

            if (Optional.IsDefined(ServiceDisplayName))
            {
                builder.Append("    serviceDisplayName:");
                builder.AppendLine($" '{ServiceDisplayName}'");
            }

            if (Optional.IsDefined(Status))
            {
                builder.Append("    status:");
                builder.AppendLine($" '{Status}'");
            }

            if (Optional.IsDefined(CreatedOn))
            {
                builder.Append("    createdDate:");
                var formattedDateTimeString = TypeFormatters.ToString(CreatedOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(ModifiedOn))
            {
                builder.Append("    modifiedDate:");
                var formattedDateTimeString = TypeFormatters.ToString(ModifiedOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(FileWorkspaceName))
            {
                builder.Append("    fileWorkspaceName:");
                builder.AppendLine($" '{FileWorkspaceName}'");
            }

            if (Optional.IsDefined(TechnicalTicketDetails))
            {
                builder.Append("    technicalTicketDetails:");
                AppendChildObject(builder, TechnicalTicketDetails, options, 4, false);
            }

            if (Optional.IsDefined(QuotaTicketDetails))
            {
                builder.Append("    quotaTicketDetails:");
                AppendChildObject(builder, QuotaTicketDetails, options, 4, false);
            }

            if (Optional.IsCollectionDefined(SecondaryConsent))
            {
                if (SecondaryConsent.Any())
                {
                    builder.Append("    secondaryConsent:");
                    builder.AppendLine(" [");
                    foreach (var item in SecondaryConsent)
                    {
                        AppendChildObject(builder, item, options, 6, true);
                    }
                    builder.AppendLine("    ]");
                }
            }

            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<SupportTicketData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportTicketData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(SupportTicketData)} does not support '{options.Format}' format.");
            }
        }

        SupportTicketData IPersistableModel<SupportTicketData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SupportTicketData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSupportTicketData(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(SupportTicketData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SupportTicketData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
