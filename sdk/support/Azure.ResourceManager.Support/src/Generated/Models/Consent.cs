// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Support.Models
{
    /// <summary> Advanced diagnostic consent to be updated on the support ticket. </summary>
    public readonly partial struct Consent : IEquatable<Consent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Consent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Consent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string YesValue = "Yes";
        private const string NoValue = "No";

        /// <summary> Yes. </summary>
        public static Consent Yes { get; } = new Consent(YesValue);
        /// <summary> No. </summary>
        public static Consent No { get; } = new Consent(NoValue);
        /// <summary> Determines if two <see cref="Consent"/> values are the same. </summary>
        public static bool operator ==(Consent left, Consent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Consent"/> values are not the same. </summary>
        public static bool operator !=(Consent left, Consent right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Consent"/>. </summary>
        public static implicit operator Consent(string value) => new Consent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Consent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Consent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
