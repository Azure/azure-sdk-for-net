// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Support.Models
{
    public partial class ProblemClassificationsClassificationResult : IUtf8JsonSerializable, IJsonModel<ProblemClassificationsClassificationResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProblemClassificationsClassificationResult>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ProblemClassificationsClassificationResult>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProblemClassificationsClassificationResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProblemClassificationsClassificationResult)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && ProblemId != null)
            {
                writer.WritePropertyName("problemId"u8);
                writer.WriteStringValue(ProblemId);
            }
            if (options.Format != "W" && Title != null)
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (options.Format != "W" && Description != null)
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (options.Format != "W" && ServiceId != null)
            {
                writer.WritePropertyName("serviceId"u8);
                writer.WriteStringValue(ServiceId);
            }
            if (options.Format != "W" && ProblemClassificationId != null)
            {
                writer.WritePropertyName("problemClassificationId"u8);
                writer.WriteStringValue(ProblemClassificationId);
            }
            writer.WritePropertyName("relatedService"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && ServiceIdRelatedServiceId != null)
            {
                writer.WritePropertyName("serviceId"u8);
                writer.WriteStringValue(ServiceIdRelatedServiceId);
            }
            if (options.Format != "W" && DisplayName != null)
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (!(ResourceTypes is ChangeTrackingList<string> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("resourceTypes"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceTypes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProblemClassificationsClassificationResult IJsonModel<ProblemClassificationsClassificationResult>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProblemClassificationsClassificationResult>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ProblemClassificationsClassificationResult)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProblemClassificationsClassificationResult(document.RootElement, options);
        }

        internal static ProblemClassificationsClassificationResult DeserializeProblemClassificationsClassificationResult(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string problemId = default;
            string title = default;
            string description = default;
            string serviceId = default;
            string problemClassificationId = default;
            ResourceIdentifier serviceId0 = default;
            string displayName = default;
            IReadOnlyList<string> resourceTypes = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("problemId"u8))
                {
                    problemId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceId"u8))
                {
                    serviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("problemClassificationId"u8))
                {
                    problemClassificationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relatedService"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("serviceId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            serviceId0 = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceTypes"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            resourceTypes = array;
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ProblemClassificationsClassificationResult(
                problemId,
                title,
                description,
                serviceId,
                problemClassificationId,
                serviceId0,
                displayName,
                resourceTypes ?? new ChangeTrackingList<string>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ProblemClassificationsClassificationResult>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProblemClassificationsClassificationResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ProblemClassificationsClassificationResult)} does not support '{options.Format}' format.");
            }
        }

        ProblemClassificationsClassificationResult IPersistableModel<ProblemClassificationsClassificationResult>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ProblemClassificationsClassificationResult>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeProblemClassificationsClassificationResult(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ProblemClassificationsClassificationResult)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ProblemClassificationsClassificationResult>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
