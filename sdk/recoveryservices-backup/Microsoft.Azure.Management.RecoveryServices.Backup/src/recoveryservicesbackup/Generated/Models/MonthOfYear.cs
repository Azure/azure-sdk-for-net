// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for MonthOfYear.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MonthOfYear
    {
        [EnumMember(Value = "Invalid")]
        Invalid,
        [EnumMember(Value = "January")]
        January,
        [EnumMember(Value = "February")]
        February,
        [EnumMember(Value = "March")]
        March,
        [EnumMember(Value = "April")]
        April,
        [EnumMember(Value = "May")]
        May,
        [EnumMember(Value = "June")]
        June,
        [EnumMember(Value = "July")]
        July,
        [EnumMember(Value = "August")]
        August,
        [EnumMember(Value = "September")]
        September,
        [EnumMember(Value = "October")]
        October,
        [EnumMember(Value = "November")]
        November,
        [EnumMember(Value = "December")]
        December
    }
    internal static class MonthOfYearEnumExtension
    {
        internal static string ToSerializedValue(this MonthOfYear? value)
        {
            return value == null ? null : ((MonthOfYear)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this MonthOfYear value)
        {
            switch( value )
            {
                case MonthOfYear.Invalid:
                    return "Invalid";
                case MonthOfYear.January:
                    return "January";
                case MonthOfYear.February:
                    return "February";
                case MonthOfYear.March:
                    return "March";
                case MonthOfYear.April:
                    return "April";
                case MonthOfYear.May:
                    return "May";
                case MonthOfYear.June:
                    return "June";
                case MonthOfYear.July:
                    return "July";
                case MonthOfYear.August:
                    return "August";
                case MonthOfYear.September:
                    return "September";
                case MonthOfYear.October:
                    return "October";
                case MonthOfYear.November:
                    return "November";
                case MonthOfYear.December:
                    return "December";
            }
            return null;
        }

        internal static MonthOfYear? ParseMonthOfYear(this string value)
        {
            switch( value )
            {
                case "Invalid":
                    return MonthOfYear.Invalid;
                case "January":
                    return MonthOfYear.January;
                case "February":
                    return MonthOfYear.February;
                case "March":
                    return MonthOfYear.March;
                case "April":
                    return MonthOfYear.April;
                case "May":
                    return MonthOfYear.May;
                case "June":
                    return MonthOfYear.June;
                case "July":
                    return MonthOfYear.July;
                case "August":
                    return MonthOfYear.August;
                case "September":
                    return MonthOfYear.September;
                case "October":
                    return MonthOfYear.October;
                case "November":
                    return MonthOfYear.November;
                case "December":
                    return MonthOfYear.December;
            }
            return null;
        }
    }
}
