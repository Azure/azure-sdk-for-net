// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class BackupResourceEncryptionConfigExtended : BackupResourceEncryptionConfig
    {
        /// <summary>
        /// Initializes a new instance of the
        /// BackupResourceEncryptionConfigExtended class.
        /// </summary>
        public BackupResourceEncryptionConfigExtended()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// BackupResourceEncryptionConfigExtended class.
        /// </summary>
        /// <param name="encryptionAtRestType">Encryption At Rest Type.
        /// Possible values include: 'Invalid', 'MicrosoftManaged',
        /// 'CustomerManaged'</param>
        /// <param name="keyUri">Key Vault Key URI</param>
        /// <param name="subscriptionId">Key Vault Subscription Id</param>
        /// <param name="lastUpdateStatus">Possible values include: 'Invalid',
        /// 'NotEnabled', 'PartiallySucceeded', 'PartiallyFailed', 'Failed',
        /// 'Succeeded', 'Initialized', 'FirstInitialization'</param>
        /// <param name="infrastructureEncryptionState">Possible values
        /// include: 'Invalid', 'Disabled', 'Enabled'</param>
        /// <param name="userAssignedIdentity">User Assigned Identity
        /// Id</param>
        /// <param name="useSystemAssignedIdentity">bool to indicate whether to
        /// use system Assigned Identity or not</param>
        public BackupResourceEncryptionConfigExtended(string encryptionAtRestType = default(string), string keyUri = default(string), string subscriptionId = default(string), string lastUpdateStatus = default(string), string infrastructureEncryptionState = default(string), string userAssignedIdentity = default(string), bool? useSystemAssignedIdentity = default(bool?))
            : base(encryptionAtRestType, keyUri, subscriptionId, lastUpdateStatus, infrastructureEncryptionState)
        {
            UserAssignedIdentity = userAssignedIdentity;
            UseSystemAssignedIdentity = useSystemAssignedIdentity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user Assigned Identity Id
        /// </summary>
        [JsonProperty(PropertyName = "userAssignedIdentity")]
        public string UserAssignedIdentity { get; set; }

        /// <summary>
        /// Gets or sets bool to indicate whether to use system Assigned
        /// Identity or not
        /// </summary>
        [JsonProperty(PropertyName = "useSystemAssignedIdentity")]
        public bool? UseSystemAssignedIdentity { get; set; }

    }
}
