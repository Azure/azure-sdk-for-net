// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Prepare DataMove Request
    /// </summary>
    public partial class PrepareDataMoveRequest
    {
        /// <summary>
        /// Initializes a new instance of the PrepareDataMoveRequest class.
        /// </summary>
        public PrepareDataMoveRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrepareDataMoveRequest class.
        /// </summary>
        /// <param name="targetResourceId">ARM Id of target vault</param>
        /// <param name="targetRegion">Target Region</param>
        /// <param name="dataMoveLevel">DataMove Level. Possible values
        /// include: 'Invalid', 'Vault', 'Container'</param>
        /// <param name="sourceContainerArmIds">Source Container ArmIds
        /// This needs to be populated only if DataMoveLevel is set to
        /// container</param>
        /// <param name="ignoreMoved">Ignore the artifacts which are already
        /// moved.</param>
        public PrepareDataMoveRequest(string targetResourceId, string targetRegion, string dataMoveLevel, IList<string> sourceContainerArmIds = default(IList<string>), bool? ignoreMoved = default(bool?))
        {
            TargetResourceId = targetResourceId;
            TargetRegion = targetRegion;
            DataMoveLevel = dataMoveLevel;
            SourceContainerArmIds = sourceContainerArmIds;
            IgnoreMoved = ignoreMoved;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM Id of target vault
        /// </summary>
        [JsonProperty(PropertyName = "targetResourceId")]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets or sets target Region
        /// </summary>
        [JsonProperty(PropertyName = "targetRegion")]
        public string TargetRegion { get; set; }

        /// <summary>
        /// Gets or sets dataMove Level. Possible values include: 'Invalid',
        /// 'Vault', 'Container'
        /// </summary>
        [JsonProperty(PropertyName = "dataMoveLevel")]
        public string DataMoveLevel { get; set; }

        /// <summary>
        /// Gets or sets source Container ArmIds
        /// This needs to be populated only if DataMoveLevel is set to
        /// container
        /// </summary>
        [JsonProperty(PropertyName = "sourceContainerArmIds")]
        public IList<string> SourceContainerArmIds { get; set; }

        /// <summary>
        /// Gets or sets ignore the artifacts which are already moved.
        /// </summary>
        [JsonProperty(PropertyName = "ignoreMoved")]
        public bool? IgnoreMoved { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetResourceId");
            }
            if (TargetRegion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetRegion");
            }
            if (DataMoveLevel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataMoveLevel");
            }
        }
    }
}
