// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The query filters that can be used with the list containers API.
    /// </summary>
    public partial class BMSContainerQueryObject
    {
        /// <summary>
        /// Initializes a new instance of the BMSContainerQueryObject class.
        /// </summary>
        public BMSContainerQueryObject()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BMSContainerQueryObject class.
        /// </summary>
        /// <param name="backupManagementType">Backup management type for this
        /// container. Possible values include: 'Invalid', 'AzureIaasVM',
        /// 'MAB', 'DPM', 'AzureBackupServer', 'AzureSql', 'AzureStorage',
        /// 'AzureWorkload', 'DefaultBackup'</param>
        /// <param name="containerType">Type of container for filter. Possible
        /// values include: 'Invalid', 'Unknown', 'IaasVMContainer',
        /// 'IaasVMServiceContainer', 'DPMContainer',
        /// 'AzureBackupServerContainer', 'MABContainer', 'Cluster',
        /// 'AzureSqlContainer', 'Windows', 'VCenter', 'VMAppContainer',
        /// 'SQLAGWorkLoadContainer', 'StorageContainer',
        /// 'GenericContainer'</param>
        /// <param name="backupEngineName">Backup engine name</param>
        /// <param name="fabricName">Fabric name for filter</param>
        /// <param name="status">Status of registration of this container with
        /// the Recovery Services Vault.</param>
        /// <param name="friendlyName">Friendly name of this container.</param>
        public BMSContainerQueryObject(string backupManagementType, string containerType = default(string), string backupEngineName = default(string), string fabricName = default(string), string status = default(string), string friendlyName = default(string))
        {
            BackupManagementType = backupManagementType;
            ContainerType = containerType;
            BackupEngineName = backupEngineName;
            FabricName = fabricName;
            Status = status;
            FriendlyName = friendlyName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets backup management type for this container. Possible
        /// values include: 'Invalid', 'AzureIaasVM', 'MAB', 'DPM',
        /// 'AzureBackupServer', 'AzureSql', 'AzureStorage', 'AzureWorkload',
        /// 'DefaultBackup'
        /// </summary>
        [JsonProperty(PropertyName = "backupManagementType")]
        public string BackupManagementType { get; set; }

        /// <summary>
        /// Gets or sets type of container for filter. Possible values include:
        /// 'Invalid', 'Unknown', 'IaasVMContainer', 'IaasVMServiceContainer',
        /// 'DPMContainer', 'AzureBackupServerContainer', 'MABContainer',
        /// 'Cluster', 'AzureSqlContainer', 'Windows', 'VCenter',
        /// 'VMAppContainer', 'SQLAGWorkLoadContainer', 'StorageContainer',
        /// 'GenericContainer'
        /// </summary>
        [JsonProperty(PropertyName = "containerType")]
        public string ContainerType { get; set; }

        /// <summary>
        /// Gets or sets backup engine name
        /// </summary>
        [JsonProperty(PropertyName = "backupEngineName")]
        public string BackupEngineName { get; set; }

        /// <summary>
        /// Gets or sets fabric name for filter
        /// </summary>
        [JsonProperty(PropertyName = "fabricName")]
        public string FabricName { get; set; }

        /// <summary>
        /// Gets or sets status of registration of this container with the
        /// Recovery Services Vault.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets friendly name of this container.
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BackupManagementType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackupManagementType");
            }
        }
    }
}
