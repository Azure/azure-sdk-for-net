// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Trigger DataMove Request
    /// </summary>
    public partial class TriggerDataMoveRequest
    {
        /// <summary>
        /// Initializes a new instance of the TriggerDataMoveRequest class.
        /// </summary>
        public TriggerDataMoveRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TriggerDataMoveRequest class.
        /// </summary>
        /// <param name="sourceResourceId">ARM Id of source vault</param>
        /// <param name="sourceRegion">Source Region</param>
        /// <param name="dataMoveLevel">DataMove Level. Possible values
        /// include: 'Invalid', 'Vault', 'Container'</param>
        /// <param name="correlationId">Correlation Id</param>
        /// <param name="sourceContainerArmIds">Source Container ArmIds</param>
        /// <param name="pauseGC">Pause GC</param>
        public TriggerDataMoveRequest(string sourceResourceId, string sourceRegion, string dataMoveLevel, string correlationId, IList<string> sourceContainerArmIds = default(IList<string>), bool? pauseGC = default(bool?))
        {
            SourceResourceId = sourceResourceId;
            SourceRegion = sourceRegion;
            DataMoveLevel = dataMoveLevel;
            CorrelationId = correlationId;
            SourceContainerArmIds = sourceContainerArmIds;
            PauseGC = pauseGC;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM Id of source vault
        /// </summary>
        [JsonProperty(PropertyName = "sourceResourceId")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Gets or sets source Region
        /// </summary>
        [JsonProperty(PropertyName = "sourceRegion")]
        public string SourceRegion { get; set; }

        /// <summary>
        /// Gets or sets dataMove Level. Possible values include: 'Invalid',
        /// 'Vault', 'Container'
        /// </summary>
        [JsonProperty(PropertyName = "dataMoveLevel")]
        public string DataMoveLevel { get; set; }

        /// <summary>
        /// Gets or sets correlation Id
        /// </summary>
        [JsonProperty(PropertyName = "correlationId")]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or sets source Container ArmIds
        /// </summary>
        [JsonProperty(PropertyName = "sourceContainerArmIds")]
        public IList<string> SourceContainerArmIds { get; set; }

        /// <summary>
        /// Gets or sets pause GC
        /// </summary>
        [JsonProperty(PropertyName = "pauseGC")]
        public bool? PauseGC { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceResourceId");
            }
            if (SourceRegion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceRegion");
            }
            if (DataMoveLevel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataMoveLevel");
            }
            if (CorrelationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CorrelationId");
            }
        }
    }
}
