// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Request parameters for tiering cost info for protected item
    /// </summary>
    [Newtonsoft.Json.JsonObject("FetchTieringCostSavingsInfoForProtectedItemRequest")]
    public partial class FetchTieringCostSavingsInfoForProtectedItemRequest : FetchTieringCostInfoRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// FetchTieringCostSavingsInfoForProtectedItemRequest class.
        /// </summary>
        public FetchTieringCostSavingsInfoForProtectedItemRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// FetchTieringCostSavingsInfoForProtectedItemRequest class.
        /// </summary>
        /// <param name="sourceTierType">Source tier for the request. Possible
        /// values include: 'Invalid', 'InstantRP', 'HardenedRP',
        /// 'ArchivedRP'</param>
        /// <param name="targetTierType">target tier for the request. Possible
        /// values include: 'Invalid', 'InstantRP', 'HardenedRP',
        /// 'ArchivedRP'</param>
        /// <param name="containerName">Name of the protected item
        /// container</param>
        /// <param name="protectedItemName">Name of the
        /// protectedItemName</param>
        public FetchTieringCostSavingsInfoForProtectedItemRequest(RecoveryPointTierType sourceTierType, RecoveryPointTierType targetTierType, string containerName, string protectedItemName)
            : base(sourceTierType, targetTierType)
        {
            ContainerName = containerName;
            ProtectedItemName = protectedItemName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the protected item container
        /// </summary>
        [JsonProperty(PropertyName = "containerName")]
        public string ContainerName { get; set; }

        /// <summary>
        /// Gets or sets name of the protectedItemName
        /// </summary>
        [JsonProperty(PropertyName = "protectedItemName")]
        public string ProtectedItemName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ContainerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContainerName");
            }
            if (ProtectedItemName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProtectedItemName");
            }
        }
    }
}
