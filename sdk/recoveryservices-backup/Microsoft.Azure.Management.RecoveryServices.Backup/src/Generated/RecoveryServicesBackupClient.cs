// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Open API 2.0 Specs for Azure RecoveryServices Backup service
    /// </summary>
    public partial class RecoveryServicesBackupClient : ServiceClient<RecoveryServicesBackupClient>, IRecoveryServicesBackupClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The subscription Id.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionOperations PrivateEndpointConnection { get; private set; }

        /// <summary>
        /// Gets the IBackupResourceVaultConfigsOperations.
        /// </summary>
        public virtual IBackupResourceVaultConfigsOperations BackupResourceVaultConfigs { get; private set; }

        /// <summary>
        /// Gets the IProtectedItemsOperations.
        /// </summary>
        public virtual IProtectedItemsOperations ProtectedItems { get; private set; }

        /// <summary>
        /// Gets the IProtectedItemOperationResultsOperations.
        /// </summary>
        public virtual IProtectedItemOperationResultsOperations ProtectedItemOperationResults { get; private set; }

        /// <summary>
        /// Gets the IRecoveryPointsOperations.
        /// </summary>
        public virtual IRecoveryPointsOperations RecoveryPoints { get; private set; }

        /// <summary>
        /// Gets the IRestoresOperations.
        /// </summary>
        public virtual IRestoresOperations Restores { get; private set; }

        /// <summary>
        /// Gets the IBackupPoliciesOperations.
        /// </summary>
        public virtual IBackupPoliciesOperations BackupPolicies { get; private set; }

        /// <summary>
        /// Gets the IProtectionPoliciesOperations.
        /// </summary>
        public virtual IProtectionPoliciesOperations ProtectionPolicies { get; private set; }

        /// <summary>
        /// Gets the IProtectionPolicyOperationResultsOperations.
        /// </summary>
        public virtual IProtectionPolicyOperationResultsOperations ProtectionPolicyOperationResults { get; private set; }

        /// <summary>
        /// Gets the IBackupJobsOperations.
        /// </summary>
        public virtual IBackupJobsOperations BackupJobs { get; private set; }

        /// <summary>
        /// Gets the IJobDetailsOperations.
        /// </summary>
        public virtual IJobDetailsOperations JobDetails { get; private set; }

        /// <summary>
        /// Gets the IJobCancellationsOperations.
        /// </summary>
        public virtual IJobCancellationsOperations JobCancellations { get; private set; }

        /// <summary>
        /// Gets the IJobOperationResultsOperations.
        /// </summary>
        public virtual IJobOperationResultsOperations JobOperationResults { get; private set; }

        /// <summary>
        /// Gets the IExportJobsOperationResultsOperations.
        /// </summary>
        public virtual IExportJobsOperationResultsOperations ExportJobsOperationResults { get; private set; }

        /// <summary>
        /// Gets the IJobsOperations.
        /// </summary>
        public virtual IJobsOperations Jobs { get; private set; }

        /// <summary>
        /// Gets the IBackupProtectedItemsOperations.
        /// </summary>
        public virtual IBackupProtectedItemsOperations BackupProtectedItems { get; private set; }

        /// <summary>
        /// Gets the IOperationOperations.
        /// </summary>
        public virtual IOperationOperations Operation { get; private set; }

        /// <summary>
        /// Gets the IAadPropertiesOperations.
        /// </summary>
        public virtual IAadPropertiesOperations AadProperties { get; private set; }

        /// <summary>
        /// Gets the ICrossRegionRestoreOperations.
        /// </summary>
        public virtual ICrossRegionRestoreOperations CrossRegionRestore { get; private set; }

        /// <summary>
        /// Gets the IBackupCrrJobDetailsOperations.
        /// </summary>
        public virtual IBackupCrrJobDetailsOperations BackupCrrJobDetails { get; private set; }

        /// <summary>
        /// Gets the IBackupCrrJobsOperations.
        /// </summary>
        public virtual IBackupCrrJobsOperations BackupCrrJobs { get; private set; }

        /// <summary>
        /// Gets the ICrrOperationResultsOperations.
        /// </summary>
        public virtual ICrrOperationResultsOperations CrrOperationResults { get; private set; }

        /// <summary>
        /// Gets the ICrrOperationStatusOperations.
        /// </summary>
        public virtual ICrrOperationStatusOperations CrrOperationStatus { get; private set; }

        /// <summary>
        /// Gets the IRecoveryPointsCrrOperations.
        /// </summary>
        public virtual IRecoveryPointsCrrOperations RecoveryPointsCrr { get; private set; }

        /// <summary>
        /// Gets the IBackupProtectedItemsCrrOperations.
        /// </summary>
        public virtual IBackupProtectedItemsCrrOperations BackupProtectedItemsCrr { get; private set; }

        /// <summary>
        /// Gets the IProtectionIntentOperations.
        /// </summary>
        public virtual IProtectionIntentOperations ProtectionIntent { get; private set; }

        /// <summary>
        /// Gets the IBackupStatusOperations.
        /// </summary>
        public virtual IBackupStatusOperations BackupStatus { get; private set; }

        /// <summary>
        /// Gets the IFeatureSupportOperations.
        /// </summary>
        public virtual IFeatureSupportOperations FeatureSupport { get; private set; }

        /// <summary>
        /// Gets the IBackupProtectionIntentOperations.
        /// </summary>
        public virtual IBackupProtectionIntentOperations BackupProtectionIntent { get; private set; }

        /// <summary>
        /// Gets the IBackupUsageSummariesOperations.
        /// </summary>
        public virtual IBackupUsageSummariesOperations BackupUsageSummaries { get; private set; }

        /// <summary>
        /// Gets the IBackupEnginesOperations.
        /// </summary>
        public virtual IBackupEnginesOperations BackupEngines { get; private set; }

        /// <summary>
        /// Gets the IProtectionContainerRefreshOperationResultsOperations.
        /// </summary>
        public virtual IProtectionContainerRefreshOperationResultsOperations ProtectionContainerRefreshOperationResults { get; private set; }

        /// <summary>
        /// Gets the IProtectableContainersOperations.
        /// </summary>
        public virtual IProtectableContainersOperations ProtectableContainers { get; private set; }

        /// <summary>
        /// Gets the IProtectionContainersOperations.
        /// </summary>
        public virtual IProtectionContainersOperations ProtectionContainers { get; private set; }

        /// <summary>
        /// Gets the IBackupWorkloadItemsOperations.
        /// </summary>
        public virtual IBackupWorkloadItemsOperations BackupWorkloadItems { get; private set; }

        /// <summary>
        /// Gets the IProtectionContainerOperationResultsOperations.
        /// </summary>
        public virtual IProtectionContainerOperationResultsOperations ProtectionContainerOperationResults { get; private set; }

        /// <summary>
        /// Gets the IBackupsOperations.
        /// </summary>
        public virtual IBackupsOperations Backups { get; private set; }

        /// <summary>
        /// Gets the IProtectedItemOperationStatusesOperations.
        /// </summary>
        public virtual IProtectedItemOperationStatusesOperations ProtectedItemOperationStatuses { get; private set; }

        /// <summary>
        /// Gets the IItemLevelRecoveryConnectionsOperations.
        /// </summary>
        public virtual IItemLevelRecoveryConnectionsOperations ItemLevelRecoveryConnections { get; private set; }

        /// <summary>
        /// Gets the IBackupOperationResultsOperations.
        /// </summary>
        public virtual IBackupOperationResultsOperations BackupOperationResults { get; private set; }

        /// <summary>
        /// Gets the IBackupOperationStatusesOperations.
        /// </summary>
        public virtual IBackupOperationStatusesOperations BackupOperationStatuses { get; private set; }

        /// <summary>
        /// Gets the IProtectionPolicyOperationStatusesOperations.
        /// </summary>
        public virtual IProtectionPolicyOperationStatusesOperations ProtectionPolicyOperationStatuses { get; private set; }

        /// <summary>
        /// Gets the IBackupProtectableItemsOperations.
        /// </summary>
        public virtual IBackupProtectableItemsOperations BackupProtectableItems { get; private set; }

        /// <summary>
        /// Gets the IBackupProtectionContainersOperations.
        /// </summary>
        public virtual IBackupProtectionContainersOperations BackupProtectionContainers { get; private set; }

        /// <summary>
        /// Gets the ISecurityPINsOperations.
        /// </summary>
        public virtual ISecurityPINsOperations SecurityPINs { get; private set; }

        /// <summary>
        /// Gets the IBackupResourceStorageConfigsOperations.
        /// </summary>
        public virtual IBackupResourceStorageConfigsOperations BackupResourceStorageConfigs { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling RecoveryServicesBackupClient.Dispose(). False: will not dispose provided httpClient</param>
        protected RecoveryServicesBackupClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected RecoveryServicesBackupClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected RecoveryServicesBackupClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected RecoveryServicesBackupClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected RecoveryServicesBackupClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling RecoveryServicesBackupClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the RecoveryServicesBackupClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RecoveryServicesBackupClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            PrivateEndpointConnection = new PrivateEndpointConnectionOperations(this);
            BackupResourceVaultConfigs = new BackupResourceVaultConfigsOperations(this);
            ProtectedItems = new ProtectedItemsOperations(this);
            ProtectedItemOperationResults = new ProtectedItemOperationResultsOperations(this);
            RecoveryPoints = new RecoveryPointsOperations(this);
            Restores = new RestoresOperations(this);
            BackupPolicies = new BackupPoliciesOperations(this);
            ProtectionPolicies = new ProtectionPoliciesOperations(this);
            ProtectionPolicyOperationResults = new ProtectionPolicyOperationResultsOperations(this);
            BackupJobs = new BackupJobsOperations(this);
            JobDetails = new JobDetailsOperations(this);
            JobCancellations = new JobCancellationsOperations(this);
            JobOperationResults = new JobOperationResultsOperations(this);
            ExportJobsOperationResults = new ExportJobsOperationResultsOperations(this);
            Jobs = new JobsOperations(this);
            BackupProtectedItems = new BackupProtectedItemsOperations(this);
            Operation = new OperationOperations(this);
            AadProperties = new AadPropertiesOperations(this);
            CrossRegionRestore = new CrossRegionRestoreOperations(this);
            BackupCrrJobDetails = new BackupCrrJobDetailsOperations(this);
            BackupCrrJobs = new BackupCrrJobsOperations(this);
            CrrOperationResults = new CrrOperationResultsOperations(this);
            CrrOperationStatus = new CrrOperationStatusOperations(this);
            RecoveryPointsCrr = new RecoveryPointsCrrOperations(this);
            BackupProtectedItemsCrr = new BackupProtectedItemsCrrOperations(this);
            ProtectionIntent = new ProtectionIntentOperations(this);
            BackupStatus = new BackupStatusOperations(this);
            FeatureSupport = new FeatureSupportOperations(this);
            BackupProtectionIntent = new BackupProtectionIntentOperations(this);
            BackupUsageSummaries = new BackupUsageSummariesOperations(this);
            BackupEngines = new BackupEnginesOperations(this);
            ProtectionContainerRefreshOperationResults = new ProtectionContainerRefreshOperationResultsOperations(this);
            ProtectableContainers = new ProtectableContainersOperations(this);
            ProtectionContainers = new ProtectionContainersOperations(this);
            BackupWorkloadItems = new BackupWorkloadItemsOperations(this);
            ProtectionContainerOperationResults = new ProtectionContainerOperationResultsOperations(this);
            Backups = new BackupsOperations(this);
            ProtectedItemOperationStatuses = new ProtectedItemOperationStatusesOperations(this);
            ItemLevelRecoveryConnections = new ItemLevelRecoveryConnectionsOperations(this);
            BackupOperationResults = new BackupOperationResultsOperations(this);
            BackupOperationStatuses = new BackupOperationStatusesOperations(this);
            ProtectionPolicyOperationStatuses = new ProtectionPolicyOperationStatusesOperations(this);
            BackupProtectableItems = new BackupProtectableItemsOperations(this);
            BackupProtectionContainers = new BackupProtectionContainersOperations(this);
            SecurityPINs = new SecurityPINsOperations(this);
            BackupResourceStorageConfigs = new BackupResourceStorageConfigsOperations(this);
            Operations = new Operations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<OperationStatusExtendedInfo>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<OperationStatusExtendedInfo>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<SchedulePolicy>("schedulePolicyType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<SchedulePolicy>("schedulePolicyType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RetentionPolicy>("retentionPolicyType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RetentionPolicy>("retentionPolicyType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Job>("jobType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Job>("jobType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<OperationResultInfoBase>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<OperationResultInfoBase>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProtectedItem>("protectedItemType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProtectedItem>("protectedItemType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProtectionPolicy>("backupManagementType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProtectionPolicy>("backupManagementType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RecoveryPoint>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RecoveryPoint>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RestoreRequest>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RestoreRequest>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ValidateOperationRequest>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ValidateOperationRequest>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<FeatureSupportRequest>("featureType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<FeatureSupportRequest>("featureType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProtectionIntent>("protectionIntentItemType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProtectionIntent>("protectionIntentItemType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<BackupEngineBase>("backupEngineType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<BackupEngineBase>("backupEngineType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<BackupRequest>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<BackupRequest>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ILRRequest>("objectType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ILRRequest>("objectType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProtectableContainer>("protectableContainerType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProtectableContainer>("protectableContainerType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ProtectionContainer>("containerType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<ProtectionContainer>("containerType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<WorkloadItem>("workloadItemType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<WorkloadItem>("workloadItemType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<WorkloadProtectableItem>("protectableItemType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<WorkloadProtectableItem>("protectableItemType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
        /// <summary>
        /// Gets the operation status for a private endpoint connection.
        /// </summary>
        /// <param name='vaultName'>
        /// The name of the recovery services vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the recovery services vault is
        /// present.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The name of the private endpoint connection.
        /// </param>
        /// <param name='operationId'>
        /// Operation id
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<AzureOperationResponse<OperationStatus>> GetOperationStatusWithHttpMessagesAsync(string vaultName, string resourceGroupName, string privateEndpointConnectionName, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (vaultName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "vaultName");
            }
            if (resourceGroupName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "resourceGroupName");
            }
            if (SubscriptionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.SubscriptionId");
            }
            if (privateEndpointConnectionName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "privateEndpointConnectionName");
            }
            if (operationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "operationId");
            }
            string apiVersion = "2020-02-02";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("vaultName", vaultName);
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("privateEndpointConnectionName", privateEndpointConnectionName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetOperationStatus", tracingParameters);
            }
            // Construct URL
            var _baseUrl = BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateEndpointConnections/{privateEndpointConnectionName}/operationsStatus/{operationId}").ToString();
            _url = _url.Replace("{vaultName}", System.Uri.EscapeDataString(vaultName));
            _url = _url.Replace("{resourceGroupName}", System.Uri.EscapeDataString(resourceGroupName));
            _url = _url.Replace("{subscriptionId}", System.Uri.EscapeDataString(SubscriptionId));
            _url = _url.Replace("{privateEndpointConnectionName}", System.Uri.EscapeDataString(privateEndpointConnectionName));
            _url = _url.Replace("{operationId}", System.Uri.EscapeDataString(operationId));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += (_url.Contains("?") ? "&" : "?") + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (GenerateClientRequestId != null && GenerateClientRequestId.Value)
            {
                _httpRequest.Headers.TryAddWithoutValidation("x-ms-client-request-id", System.Guid.NewGuid().ToString());
            }
            if (AcceptLanguage != null)
            {
                if (_httpRequest.Headers.Contains("accept-language"))
                {
                    _httpRequest.Headers.Remove("accept-language");
                }
                _httpRequest.Headers.TryAddWithoutValidation("accept-language", AcceptLanguage);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    ErrorResponse _errorBody =  SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new AzureOperationResponse<OperationStatus>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_httpResponse.Headers.Contains("x-ms-request-id"))
            {
                _result.RequestId = _httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
            }
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<OperationStatus>(_responseContent, DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
