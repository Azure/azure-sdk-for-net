// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RecoveryServicesBackup;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmRecoveryServicesBackupModelFactory
    {
        /// <summary> Initializes a new instance of BackupResourceConfigResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceConfigResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupResourceConfigResourceData"/> instance for mocking. </returns>
        public static BackupResourceConfigResourceData BackupResourceConfigResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceConfig properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceConfigResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of PreValidateEnableBackupResponse. </summary>
        /// <param name="status"> Validation Status. </param>
        /// <param name="errorCode"> Response error code. </param>
        /// <param name="errorMessage"> Response error message. </param>
        /// <param name="recommendation"> Recommended action for user. </param>
        /// <param name="containerName">
        /// Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;rgname;vmname. This is required
        /// for portal
        /// </param>
        /// <param name="protectedItemName"> Specifies the product specific ds name. E.g. vm;iaasvmcontainer;rgname;vmname. This is required for portal. </param>
        /// <returns> A new <see cref="Models.PreValidateEnableBackupResponse"/> instance for mocking. </returns>
        public static PreValidateEnableBackupResponse PreValidateEnableBackupResponse(ValidationStatus? status = null, string errorCode = null, string errorMessage = null, string recommendation = null, string containerName = null, string protectedItemName = null)
        {
            return new PreValidateEnableBackupResponse(status, errorCode, errorMessage, recommendation, containerName, protectedItemName);
        }

        /// <summary> Initializes a new instance of BackupStatusResponse. </summary>
        /// <param name="protectionStatus"> Specifies whether the container is registered or not. </param>
        /// <param name="vaultId"> Specifies the arm resource id of the vault. </param>
        /// <param name="fabricName"> Specifies the fabric name - Azure or AD. </param>
        /// <param name="containerName"> Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;csname;vmname. </param>
        /// <param name="protectedItemName"> Specifies the product specific ds name. E.g. vm;iaasvmcontainer;csname;vmname. </param>
        /// <param name="errorCode"> ErrorCode in case of intent failed. </param>
        /// <param name="errorMessage"> ErrorMessage in case of intent failed. </param>
        /// <param name="policyName"> Specifies the policy name which is used for protection. </param>
        /// <param name="registrationStatus"> Container registration status. </param>
        /// <returns> A new <see cref="Models.BackupStatusResponse"/> instance for mocking. </returns>
        public static BackupStatusResponse BackupStatusResponse(ProtectionStatus? protectionStatus = null, string vaultId = null, FabricName? fabricName = null, string containerName = null, string protectedItemName = null, string errorCode = null, string errorMessage = null, string policyName = null, string registrationStatus = null)
        {
            return new BackupStatusResponse(protectionStatus, vaultId, fabricName, containerName, protectedItemName, errorCode, errorMessage, policyName, registrationStatus);
        }

        /// <summary> Initializes a new instance of AzureVmResourceFeatureSupportResponse. </summary>
        /// <param name="supportStatus"> Support status of feature. </param>
        /// <returns> A new <see cref="Models.AzureVmResourceFeatureSupportResponse"/> instance for mocking. </returns>
        public static AzureVmResourceFeatureSupportResponse AzureVmResourceFeatureSupportResponse(SupportStatus? supportStatus = null)
        {
            return new AzureVmResourceFeatureSupportResponse(supportStatus);
        }

        /// <summary> Initializes a new instance of ProtectionIntentResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectionIntentResource properties
        /// Please note <see cref="ProtectionIntent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceProtectionIntent"/>, <see cref="AzureWorkloadAutoProtectionIntent"/>, <see cref="AzureWorkloadContainerAutoProtectionIntent"/>, <see cref="AzureWorkloadSQLAutoProtectionIntent"/> and <see cref="AzureRecoveryServiceVaultProtectionIntent"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectionIntentResourceData"/> instance for mocking. </returns>
        public static ProtectionIntentResourceData ProtectionIntentResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectionIntent properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectionIntentResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupManagementUsage. </summary>
        /// <param name="unit"> Unit of the usage. </param>
        /// <param name="quotaPeriod"> Quota period of usage. </param>
        /// <param name="nextResetOn"> Next reset time of usage. </param>
        /// <param name="currentValue"> Current value of usage. </param>
        /// <param name="limit"> Limit of usage. </param>
        /// <param name="name"> Name of usage. </param>
        /// <returns> A new <see cref="Models.BackupManagementUsage"/> instance for mocking. </returns>
        public static BackupManagementUsage BackupManagementUsage(UsagesUnit? unit = null, string quotaPeriod = null, DateTimeOffset? nextResetOn = null, long? currentValue = null, long? limit = null, NameInfo name = null)
        {
            return new BackupManagementUsage(unit, quotaPeriod, nextResetOn, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of NameInfo. </summary>
        /// <param name="value"> Value of usage. </param>
        /// <param name="localizedValue"> Localized value of usage. </param>
        /// <returns> A new <see cref="Models.NameInfo"/> instance for mocking. </returns>
        public static NameInfo NameInfo(string value = null, string localizedValue = null)
        {
            return new NameInfo(value, localizedValue);
        }

        /// <summary> Initializes a new instance of BackupResourceVaultConfigResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceVaultConfigResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupResourceVaultConfigResourceData"/> instance for mocking. </returns>
        public static BackupResourceVaultConfigResourceData BackupResourceVaultConfigResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceVaultConfig properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceVaultConfigResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupResourceEncryptionConfigExtendedResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceEncryptionConfigExtendedResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupResourceEncryptionConfigExtendedResourceData"/> instance for mocking. </returns>
        public static BackupResourceEncryptionConfigExtendedResourceData BackupResourceEncryptionConfigExtendedResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceEncryptionConfigExtended properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceEncryptionConfigExtendedResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceEncryptionConfigResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent"/> instance for mocking. </returns>
        public static BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceEncryptionConfig properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> PrivateEndpointConnectionResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.PrivateEndpointConnectionResourceData"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionResourceData PrivateEndpointConnectionResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RecoveryServicesBackupPrivateEndpointConnection properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PrivateEndpointConnectionResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of OperationStatus. </summary>
        /// <param name="id"> ID of the operation. </param>
        /// <param name="name"> Name of the operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="startOn"> Operation start time. Format: ISO-8601. </param>
        /// <param name="endOn"> Operation end time. Format: ISO-8601. </param>
        /// <param name="error"> Error information related to this operation. </param>
        /// <param name="properties">
        /// Additional information associated with this operation.
        /// Please note <see cref="OperationStatusExtendedInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="OperationStatusJobExtendedInfo"/>, <see cref="OperationStatusJobsExtendedInfo"/>, <see cref="OperationStatusProvisionILRExtendedInfo"/> and <see cref="OperationStatusValidateOperationExtendedInfo"/>.
        /// </param>
        /// <returns> A new <see cref="Models.OperationStatus"/> instance for mocking. </returns>
        public static OperationStatus OperationStatus(string id = null, string name = null, OperationStatusValue? status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, OperationStatusError error = null, OperationStatusExtendedInfo properties = null)
        {
            return new OperationStatus(id, name, status, startOn, endOn, error, properties);
        }

        /// <summary> Initializes a new instance of OperationStatusError. </summary>
        /// <param name="code"> Error code of the operation failure. </param>
        /// <param name="message"> Error message displayed if the operation failure. </param>
        /// <returns> A new <see cref="Models.OperationStatusError"/> instance for mocking. </returns>
        public static OperationStatusError OperationStatusError(string code = null, string message = null)
        {
            return new OperationStatusError(code, message);
        }

        /// <summary> Initializes a new instance of ProtectedItemResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectedItemResource properties
        /// Please note <see cref="ProtectedItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileshareProtectedItem"/>, <see cref="AzureIaasVmProtectedItem"/>, <see cref="AzureVmWorkloadProtectedItem"/>, <see cref="AzureVmWorkloadSAPAseDatabaseProtectedItem"/>, <see cref="AzureVmWorkloadSAPHanaDBInstanceProtectedItem"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseProtectedItem"/>, <see cref="AzureVmWorkloadSQLDatabaseProtectedItem"/>, <see cref="DpmProtectedItem"/>, <see cref="GenericProtectedItem"/>, <see cref="MabFileFolderProtectedItem"/>, <see cref="AzureIaaSClassicComputeVmProtectedItem"/>, <see cref="AzureIaaSComputeVmProtectedItem"/> and <see cref="AzureSqlProtectedItem"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectedItemResourceData"/> instance for mocking. </returns>
        public static ProtectedItemResourceData ProtectedItemResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectedItem properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectedItemResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectedItem. </summary>
        /// <param name="protectedItemType"> backup item type. </param>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <returns> A new <see cref="Models.ProtectedItem"/> instance for mocking. </returns>
        public static ProtectedItem ProtectedItem(string protectedItemType = null, BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new UnknownProtectedItem(protectedItemType, backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod);
        }

        /// <summary> Initializes a new instance of RecoveryPointResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// RecoveryPointResource properties
        /// Please note <see cref="RecoveryPoint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareRecoveryPoint"/>, <see cref="AzureWorkloadPointInTimeRecoveryPoint"/>, <see cref="AzureWorkloadRecoveryPoint"/>, <see cref="AzureWorkloadSAPHanaPointInTimeRecoveryPoint"/>, <see cref="AzureWorkloadSAPHanaRecoveryPoint"/>, <see cref="AzureWorkloadSQLPointInTimeRecoveryPoint"/>, <see cref="AzureWorkloadSQLRecoveryPoint"/>, <see cref="GenericRecoveryPoint"/> and <see cref="IaasVmRecoveryPoint"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.RecoveryPointResourceData"/> instance for mocking. </returns>
        public static RecoveryPointResourceData RecoveryPointResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RecoveryPoint properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new RecoveryPointResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of RestoreRequestResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// RestoreRequestResource properties
        /// Please note <see cref="RestoreRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareRestoreRequest"/>, <see cref="AzureWorkloadPointInTimeRestoreRequest"/>, <see cref="AzureWorkloadRestoreRequest"/>, <see cref="AzureWorkloadSAPHanaPointInTimeRestoreRequest"/>, <see cref="AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest"/>, <see cref="AzureWorkloadSAPHanaRestoreRequest"/>, <see cref="AzureWorkloadSAPHanaRestoreWithRehydrateRequest"/>, <see cref="AzureWorkloadSQLPointInTimeRestoreRequest"/>, <see cref="AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest"/>, <see cref="AzureWorkloadSQLRestoreRequest"/>, <see cref="AzureWorkloadSQLRestoreWithRehydrateRequest"/>, <see cref="IaasVmRestoreRequest"/> and <see cref="IaasVmRestoreWithRehydrationRequest"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.RestoreRequestResource"/> instance for mocking. </returns>
        public static RestoreRequestResource RestoreRequestResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RestoreRequest properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new RestoreRequestResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectionPolicyResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectionPolicyResource properties
        /// Please note <see cref="ProtectionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureIaasVmProtectionPolicy"/>, <see cref="AzureSqlProtectionPolicy"/>, <see cref="AzureFileShareProtectionPolicy"/>, <see cref="AzureVmWorkloadProtectionPolicy"/>, <see cref="GenericProtectionPolicy"/> and <see cref="MabProtectionPolicy"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectionPolicyResourceData"/> instance for mocking. </returns>
        public static ProtectionPolicyResourceData ProtectionPolicyResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectionPolicy properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectionPolicyResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of JobResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// JobResource properties
        /// Please note <see cref="Job"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureIaasVmJob"/>, <see cref="AzureIaasVmJobV2"/>, <see cref="AzureStorageJob"/>, <see cref="AzureWorkloadJob"/>, <see cref="DpmJob"/>, <see cref="MabJob"/> and <see cref="VaultJob"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.JobResourceData"/> instance for mocking. </returns>
        public static JobResourceData JobResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Job properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new JobResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of OperationResultInfoBaseResource. </summary>
        /// <param name="statusCode"> HTTP Status Code of the operation. </param>
        /// <param name="headers"> HTTP headers associated with this operation. </param>
        /// <param name="operation">
        /// OperationResultInfoBaseResource operation
        /// Please note <see cref="OperationResultInfoBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExportJobsOperationResultInfo"/> and <see cref="OperationResultInfo"/>.
        /// </param>
        /// <returns> A new <see cref="Models.OperationResultInfoBaseResource"/> instance for mocking. </returns>
        public static OperationResultInfoBaseResource OperationResultInfoBaseResource(HttpStatusCode? statusCode = null, IReadOnlyDictionary<string, IList<string>> headers = null, OperationResultInfoBase operation = null)
        {
            headers ??= new Dictionary<string, IList<string>>();

            return new OperationResultInfoBaseResource(statusCode, headers, operation);
        }

        /// <summary> Initializes a new instance of OperationWorkerResponse. </summary>
        /// <param name="statusCode"> HTTP Status Code of the operation. </param>
        /// <param name="headers"> HTTP headers associated with this operation. </param>
        /// <returns> A new <see cref="Models.OperationWorkerResponse"/> instance for mocking. </returns>
        public static OperationWorkerResponse OperationWorkerResponse(HttpStatusCode? statusCode = null, IReadOnlyDictionary<string, IList<string>> headers = null)
        {
            headers ??= new Dictionary<string, IList<string>>();

            return new OperationWorkerResponse(statusCode, headers);
        }

        /// <summary> Initializes a new instance of ValidateOperationsResponse. </summary>
        /// <param name="validateOperationResponseValidationResults"> Base class for validate operation response. </param>
        /// <returns> A new <see cref="Models.ValidateOperationsResponse"/> instance for mocking. </returns>
        public static ValidateOperationsResponse ValidateOperationsResponse(IEnumerable<ErrorDetail> validateOperationResponseValidationResults = null)
        {
            validateOperationResponseValidationResults ??= new List<ErrorDetail>();

            return new ValidateOperationsResponse(validateOperationResponseValidationResults != null ? new ValidateOperationResponse(validateOperationResponseValidationResults?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of ErrorDetail. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error Message related to the Code. </param>
        /// <param name="recommendations"> List of recommendation strings. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new ErrorDetail(code, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of BackupEngineBaseResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// BackupEngineBaseResource properties
        /// Please note <see cref="BackupEngineBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupServerEngine"/> and <see cref="DpmBackupEngine"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupEngineBaseResourceData"/> instance for mocking. </returns>
        public static BackupEngineBaseResourceData BackupEngineBaseResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupEngineBase properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupEngineBaseResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectableContainerResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectableContainerResource properties
        /// Please note <see cref="ProtectableContainer"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureStorageProtectableContainer"/> and <see cref="AzureVmAppContainerProtectableContainer"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.ProtectableContainerResource"/> instance for mocking. </returns>
        public static ProtectableContainerResource ProtectableContainerResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectableContainer properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectableContainerResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectionContainerResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectionContainerResource properties
        /// Please note <see cref="ProtectionContainer"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupServerContainer"/>, <see cref="AzureSqlContainer"/>, <see cref="AzureWorkloadContainer"/>, <see cref="DpmContainer"/>, <see cref="GenericContainer"/>, <see cref="IaasVmContainer"/>, <see cref="AzureIaaSClassicComputeVmContainer"/>, <see cref="AzureIaaSComputeVmContainer"/>, <see cref="AzureSqlAGWorkloadContainerProtectionContainer"/>, <see cref="AzureStorageContainer"/>, <see cref="AzureVmAppContainerProtectionContainer"/> and <see cref="MabContainer"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectionContainerResourceData"/> instance for mocking. </returns>
        public static ProtectionContainerResourceData ProtectionContainerResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectionContainer properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectionContainerResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of WorkloadItemResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// WorkloadItemResource properties
        /// Please note <see cref="WorkloadItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureVmWorkloadItem"/>, <see cref="AzureVmWorkloadSAPAseDatabaseWorkloadItem"/>, <see cref="AzureVmWorkloadSAPAseSystemWorkloadItem"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseWorkloadItem"/>, <see cref="AzureVmWorkloadSAPHanaSystemWorkloadItem"/>, <see cref="AzureVmWorkloadSQLDatabaseWorkloadItem"/> and <see cref="AzureVmWorkloadSQLInstanceWorkloadItem"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.WorkloadItemResource"/> instance for mocking. </returns>
        public static WorkloadItemResource WorkloadItemResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadItem properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkloadItemResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupRequestResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// BackupRequestResource properties
        /// Please note <see cref="BackupRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareBackupRequest"/>, <see cref="AzureWorkloadBackupRequest"/> and <see cref="IaasVmBackupRequest"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.BackupRequestResource"/> instance for mocking. </returns>
        public static BackupRequestResource BackupRequestResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupRequest properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupRequestResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ILRRequestResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ILRRequestResource properties
        /// Please note <see cref="ILRRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareProvisionILRRequest"/> and <see cref="IaasVmilrRegistrationRequest"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.ILRRequestResource"/> instance for mocking. </returns>
        public static ILRRequestResource ILRRequestResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ILRRequest properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ILRRequestResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of WorkloadProtectableItemResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// WorkloadProtectableItemResource properties
        /// Please note <see cref="WorkloadProtectableItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareProtectableItem"/>, <see cref="AzureVmWorkloadProtectableItem"/>, <see cref="IaasVmProtectableItem"/>, <see cref="AzureIaaSClassicComputeVmProtectableItem"/>, <see cref="AzureIaaSComputeVmProtectableItem"/>, <see cref="AzureVmWorkloadSAPAseSystemProtectableItem"/>, <see cref="AzureVmWorkloadSAPHanaDBInstance"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseProtectableItem"/>, <see cref="AzureVmWorkloadSAPHanaHSR"/>, <see cref="AzureVmWorkloadSAPHanaSystemProtectableItem"/>, <see cref="AzureVmWorkloadSQLAvailabilityGroupProtectableItem"/>, <see cref="AzureVmWorkloadSQLDatabaseProtectableItem"/> and <see cref="AzureVmWorkloadSQLInstanceProtectableItem"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.WorkloadProtectableItemResource"/> instance for mocking. </returns>
        public static WorkloadProtectableItemResource WorkloadProtectableItemResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadProtectableItem properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkloadProtectableItemResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of TokenInformation. </summary>
        /// <param name="token"> Token value. </param>
        /// <param name="expiryTimeInUtcTicks"> Expiry time of token. </param>
        /// <param name="securityPIN"> Security PIN. </param>
        /// <returns> A new <see cref="Models.TokenInformation"/> instance for mocking. </returns>
        public static TokenInformation TokenInformation(string token = null, long? expiryTimeInUtcTicks = null, string securityPIN = null)
        {
            return new TokenInformation(token, expiryTimeInUtcTicks, securityPIN);
        }

        /// <summary> Initializes a new instance of ResourceGuardProxyBaseResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> ResourceGuardProxyBaseResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ResourceGuardProxyBaseResourceData"/> instance for mocking. </returns>
        public static ResourceGuardProxyBaseResourceData ResourceGuardProxyBaseResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceGuardProxyBase properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ResourceGuardProxyBaseResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of UnlockDeleteResponse. </summary>
        /// <param name="unlockDeleteExpiryTime"> This is the time when unlock delete privileges will get expired. </param>
        /// <returns> A new <see cref="Models.UnlockDeleteResponse"/> instance for mocking. </returns>
        public static UnlockDeleteResponse UnlockDeleteResponse(string unlockDeleteExpiryTime = null)
        {
            return new UnlockDeleteResponse(unlockDeleteExpiryTime);
        }

        /// <summary> Initializes a new instance of AzureFileshareProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the fileshare represented by this backup item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="extendedInfo"> Additional information with this backup item. </param>
        /// <returns> A new <see cref="Models.AzureFileshareProtectedItem"/> instance for mocking. </returns>
        public static AzureFileshareProtectedItem AzureFileshareProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string protectionStatus = null, ProtectionState? protectionState = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, AzureFileshareProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureFileshareProtectedItem("AzureFileShareProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, kpisHealths, extendedInfo);
        }

        /// <summary> Initializes a new instance of ResourceHealthDetails. </summary>
        /// <param name="code"> Health Code. </param>
        /// <param name="title"> Health Title. </param>
        /// <param name="message"> Health Message. </param>
        /// <param name="recommendations"> Health Recommended Actions. </param>
        /// <returns> A new <see cref="Models.ResourceHealthDetails"/> instance for mocking. </returns>
        public static ResourceHealthDetails ResourceHealthDetails(int? code = null, string title = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new ResourceHealthDetails(code, title, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureFileshareProtectedItemExtendedInfo. </summary>
        /// <param name="oldestRecoveryPoint"> The oldest backup copy available for this item in the service. </param>
        /// <param name="recoveryPointCount"> Number of available backup copies associated with this backup item. </param>
        /// <param name="policyState"> Indicates consistency of policy object and policy applied to this backup item. </param>
        /// <param name="resourceState"> Indicates the state of this resource. Possible values are from enum ResourceState {Invalid, Active, SoftDeleted, Deleted}. </param>
        /// <param name="resourceStateSyncOn"> The resource state sync time for this backup item. </param>
        /// <returns> A new <see cref="Models.AzureFileshareProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static AzureFileshareProtectedItemExtendedInfo AzureFileshareProtectedItemExtendedInfo(DateTimeOffset? oldestRecoveryPoint = null, int? recoveryPointCount = null, string policyState = null, string resourceState = null, DateTimeOffset? resourceStateSyncOn = null)
        {
            return new AzureFileshareProtectedItemExtendedInfo(oldestRecoveryPoint, recoveryPointCount, policyState, resourceState, resourceStateSyncOn);
        }

        /// <summary> Initializes a new instance of AzureIaaSClassicComputeVmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine represented by this item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="healthStatus"> Health status of protected item. </param>
        /// <param name="healthDetails"> Health details on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectedItemDataId"> Data ID of the protected item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="extendedProperties"> Extended Properties for Azure IaasVM Backup. </param>
        /// <returns> A new <see cref="Models.AzureIaaSClassicComputeVmProtectedItem"/> instance for mocking. </returns>
        public static AzureIaaSClassicComputeVmProtectedItem AzureIaaSClassicComputeVmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string virtualMachineId = null, string protectionStatus = null, ProtectionState? protectionState = null, HealthStatus? healthStatus = null, IEnumerable<AzureIaasVmHealthDetails> healthDetails = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectedItemDataId = null, AzureIaasVmProtectedItemExtendedInfo extendedInfo = null, ExtendedProperties extendedProperties = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            healthDetails ??= new List<AzureIaasVmHealthDetails>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureIaaSClassicComputeVmProtectedItem("Microsoft.ClassicCompute/virtualMachines", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, virtualMachineId, protectionStatus, protectionState, healthStatus, healthDetails?.ToList(), kpisHealths, lastBackupStatus, lastBackupOn, protectedItemDataId, extendedInfo, extendedProperties);
        }

        /// <summary> Initializes a new instance of AzureIaasVmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine represented by this item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="healthStatus"> Health status of protected item. </param>
        /// <param name="healthDetails"> Health details on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectedItemDataId"> Data ID of the protected item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="extendedProperties"> Extended Properties for Azure IaasVM Backup. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmProtectedItem"/> instance for mocking. </returns>
        public static AzureIaasVmProtectedItem AzureIaasVmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string virtualMachineId = null, string protectionStatus = null, ProtectionState? protectionState = null, HealthStatus? healthStatus = null, IEnumerable<AzureIaasVmHealthDetails> healthDetails = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectedItemDataId = null, AzureIaasVmProtectedItemExtendedInfo extendedInfo = null, ExtendedProperties extendedProperties = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            healthDetails ??= new List<AzureIaasVmHealthDetails>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureIaasVmProtectedItem("AzureIaaSVMProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, virtualMachineId, protectionStatus, protectionState, healthStatus, healthDetails?.ToList(), kpisHealths, lastBackupStatus, lastBackupOn, protectedItemDataId, extendedInfo, extendedProperties);
        }

        /// <summary> Initializes a new instance of AzureIaasVmHealthDetails. </summary>
        /// <param name="code"> Health Code. </param>
        /// <param name="title"> Health Title. </param>
        /// <param name="message"> Health Message. </param>
        /// <param name="recommendations"> Health Recommended Actions. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmHealthDetails"/> instance for mocking. </returns>
        public static AzureIaasVmHealthDetails AzureIaasVmHealthDetails(int? code = null, string title = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new AzureIaasVmHealthDetails(code, title, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureIaaSComputeVmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine represented by this item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="healthStatus"> Health status of protected item. </param>
        /// <param name="healthDetails"> Health details on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectedItemDataId"> Data ID of the protected item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="extendedProperties"> Extended Properties for Azure IaasVM Backup. </param>
        /// <returns> A new <see cref="Models.AzureIaaSComputeVmProtectedItem"/> instance for mocking. </returns>
        public static AzureIaaSComputeVmProtectedItem AzureIaaSComputeVmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string virtualMachineId = null, string protectionStatus = null, ProtectionState? protectionState = null, HealthStatus? healthStatus = null, IEnumerable<AzureIaasVmHealthDetails> healthDetails = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectedItemDataId = null, AzureIaasVmProtectedItemExtendedInfo extendedInfo = null, ExtendedProperties extendedProperties = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            healthDetails ??= new List<AzureIaasVmHealthDetails>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureIaaSComputeVmProtectedItem("Microsoft.Compute/virtualMachines", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, virtualMachineId, protectionStatus, protectionState, healthStatus, healthDetails?.ToList(), kpisHealths, lastBackupStatus, lastBackupOn, protectedItemDataId, extendedInfo, extendedProperties);
        }

        /// <summary> Initializes a new instance of AzureIaasVmErrorInfo. </summary>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="errorTitle"> Title: Typically, the entity that the error pertains to. </param>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations for above error code. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmErrorInfo"/> instance for mocking. </returns>
        public static AzureIaasVmErrorInfo AzureIaasVmErrorInfo(int? errorCode = null, string errorTitle = null, string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new AzureIaasVmErrorInfo(errorCode, errorTitle, errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureSqlProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="protectedItemDataId"> Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services. </param>
        /// <param name="protectionState"> Backup state of the backed up item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <returns> A new <see cref="Models.AzureSqlProtectedItem"/> instance for mocking. </returns>
        public static AzureSqlProtectedItem AzureSqlProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string protectedItemDataId = null, ProtectedItemState? protectionState = null, AzureSqlProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new AzureSqlProtectedItem("Microsoft.Sql/servers/databases", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, protectedItemDataId, protectionState, extendedInfo);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadProtectedItem AzureVmWorkloadProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadProtectedItem("AzureVmWorkloadProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPAseDatabaseProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPAseDatabaseProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPAseDatabaseProtectedItem AzureVmWorkloadSAPAseDatabaseProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSAPAseDatabaseProtectedItem("AzureVmWorkloadSAPAseDatabase", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDatabaseProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDatabaseProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDatabaseProtectedItem AzureVmWorkloadSAPHanaDatabaseProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSAPHanaDatabaseProtectedItem("AzureVmWorkloadSAPHanaDatabase", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDBInstanceProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDBInstanceProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDBInstanceProtectedItem AzureVmWorkloadSAPHanaDBInstanceProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSAPHanaDBInstanceProtectedItem("AzureVmWorkloadSAPHanaDBInstance", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLDatabaseProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLDatabaseProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLDatabaseProtectedItem AzureVmWorkloadSQLDatabaseProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSQLDatabaseProtectedItem("AzureVmWorkloadSQLDatabase", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of DpmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the managed item. </param>
        /// <param name="backupEngineName"> Backup Management server protecting this backup item. </param>
        /// <param name="protectionState"> Protection state of the backup engine. </param>
        /// <param name="extendedInfo"> Extended info of the backup item. </param>
        /// <returns> A new <see cref="Models.DpmProtectedItem"/> instance for mocking. </returns>
        public static DpmProtectedItem DpmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string backupEngineName = null, ProtectedItemState? protectionState = null, DpmProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new DpmProtectedItem("DPMProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, backupEngineName, protectionState, extendedInfo);
        }

        /// <summary> Initializes a new instance of ExportJobsOperationResultInfo. </summary>
        /// <param name="blobUri"> URL of the blob into which the serialized string of list of jobs is exported. </param>
        /// <param name="blobSasKey"> SAS key to access the blob. It expires in 15 mins. </param>
        /// <param name="excelFileBlobUri"> URL of the blob into which the ExcelFile is uploaded. </param>
        /// <param name="excelFileBlobSasKey"> SAS key to access the blob. It expires in 15 mins. </param>
        /// <returns> A new <see cref="Models.ExportJobsOperationResultInfo"/> instance for mocking. </returns>
        public static ExportJobsOperationResultInfo ExportJobsOperationResultInfo(Uri blobUri = null, string blobSasKey = null, Uri excelFileBlobUri = null, string excelFileBlobSasKey = null)
        {
            return new ExportJobsOperationResultInfo("ExportJobsOperationResultInfo", blobUri, blobSasKey, excelFileBlobUri, excelFileBlobSasKey);
        }

        /// <summary> Initializes a new instance of GenericProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="policyState"> Indicates consistency of policy object and policy applied to this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="protectedItemId"> Data Plane Service ID of the protected item. </param>
        /// <param name="sourceAssociations"> Loosely coupled (type, value) associations (example - parent of a protected item). </param>
        /// <param name="fabricName"> Name of this backup item&apos;s fabric. </param>
        /// <returns> A new <see cref="Models.GenericProtectedItem"/> instance for mocking. </returns>
        public static GenericProtectedItem GenericProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string policyState = null, ProtectionState? protectionState = null, long? protectedItemId = null, IDictionary<string, string> sourceAssociations = null, string fabricName = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            sourceAssociations ??= new Dictionary<string, string>();

            return new GenericProtectedItem("GenericProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, policyState, protectionState, protectedItemId, sourceAssociations, fabricName);
        }

        /// <summary> Initializes a new instance of MabErrorInfo. </summary>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations. </param>
        /// <returns> A new <see cref="Models.MabErrorInfo"/> instance for mocking. </returns>
        public static MabErrorInfo MabErrorInfo(string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new MabErrorInfo(errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of MabFileFolderProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="softDeleteRetentionPeriod"> Soft delete retention period in days. </param>
        /// <param name="friendlyName"> Friendly name of this backup item. </param>
        /// <param name="computerName"> Name of the computer associated with this backup item. </param>
        /// <param name="lastBackupStatus"> Status of last backup operation. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectionState"> Protected, ProtectionStopped, IRPending or ProtectionError. </param>
        /// <param name="deferredDeleteSyncTimeInUTC"> Sync time for deferred deletion in UTC. </param>
        /// <param name="extendedInfo"> Additional information with this backup item. </param>
        /// <returns> A new <see cref="Models.MabFileFolderProtectedItem"/> instance for mocking. </returns>
        public static MabFileFolderProtectedItem MabFileFolderProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, int? softDeleteRetentionPeriod = null, string friendlyName = null, string computerName = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectionState = null, long? deferredDeleteSyncTimeInUTC = null, MabFileFolderProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new MabFileFolderProtectedItem("MabFileFolderProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, softDeleteRetentionPeriod, friendlyName, computerName, lastBackupStatus, lastBackupOn, protectionState, deferredDeleteSyncTimeInUTC, extendedInfo);
        }

        /// <summary> Initializes a new instance of OperationResultInfo. </summary>
        /// <param name="jobList"> List of jobs created by this operation. </param>
        /// <returns> A new <see cref="Models.OperationResultInfo"/> instance for mocking. </returns>
        public static OperationResultInfo OperationResultInfo(IEnumerable<string> jobList = null)
        {
            jobList ??= new List<string>();

            return new OperationResultInfo("OperationResultInfo", jobList?.ToList());
        }

        /// <summary> Initializes a new instance of PrepareDataMoveResponse. </summary>
        /// <param name="correlationId"> Co-relationId for move operation. </param>
        /// <param name="sourceVaultProperties"> Source Vault Properties. </param>
        /// <returns> A new <see cref="Models.PrepareDataMoveResponse"/> instance for mocking. </returns>
        public static PrepareDataMoveResponse PrepareDataMoveResponse(string correlationId = null, IReadOnlyDictionary<string, string> sourceVaultProperties = null)
        {
            sourceVaultProperties ??= new Dictionary<string, string>();

            return new PrepareDataMoveResponse("PrepareDataMoveResponse", correlationId, sourceVaultProperties);
        }

        /// <summary> Initializes a new instance of InquiryValidation. </summary>
        /// <param name="status"> Status for the Inquiry Validation. </param>
        /// <param name="errorDetail"> Error Detail in case the status is non-success. </param>
        /// <param name="additionalDetail"> Error Additional Detail in case the status is non-success. </param>
        /// <returns> A new <see cref="Models.InquiryValidation"/> instance for mocking. </returns>
        public static InquiryValidation InquiryValidation(string status = null, ErrorDetail errorDetail = null, string additionalDetail = null)
        {
            return new InquiryValidation(status, errorDetail, additionalDetail);
        }

        /// <summary> Initializes a new instance of ClientScriptForConnect. </summary>
        /// <param name="scriptContent"> File content of the client script for file / folder restore. </param>
        /// <param name="scriptExtension"> File extension of the client script for file / folder restore - .ps1 , .sh , etc. </param>
        /// <param name="osType"> OS type - Windows, Linux etc. for which this file / folder restore client script works. </param>
        /// <param name="uri"> URL of Executable from where to source the content. If this is not null then ScriptContent should not be used. </param>
        /// <param name="scriptNameSuffix">
        /// Mandatory suffix that should be added to the name of script that is given for download to user.
        /// If its null or empty then , ignore it.
        /// </param>
        /// <returns> A new <see cref="Models.ClientScriptForConnect"/> instance for mocking. </returns>
        public static ClientScriptForConnect ClientScriptForConnect(string scriptContent = null, string scriptExtension = null, string osType = null, Uri uri = null, string scriptNameSuffix = null)
        {
            return new ClientScriptForConnect(scriptContent, scriptExtension, osType, uri, scriptNameSuffix);
        }

        /// <summary> Initializes a new instance of OperationStatusJobExtendedInfo. </summary>
        /// <param name="jobId"> ID of the job created for this protected item. </param>
        /// <returns> A new <see cref="Models.OperationStatusJobExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusJobExtendedInfo OperationStatusJobExtendedInfo(string jobId = null)
        {
            return new OperationStatusJobExtendedInfo("OperationStatusJobExtendedInfo", jobId);
        }

        /// <summary> Initializes a new instance of OperationStatusJobsExtendedInfo. </summary>
        /// <param name="jobIds"> IDs of the jobs created for the protected item. </param>
        /// <param name="failedJobsError"> Stores all the failed jobs along with the corresponding error codes. </param>
        /// <returns> A new <see cref="Models.OperationStatusJobsExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusJobsExtendedInfo OperationStatusJobsExtendedInfo(IEnumerable<string> jobIds = null, IReadOnlyDictionary<string, string> failedJobsError = null)
        {
            jobIds ??= new List<string>();
            failedJobsError ??= new Dictionary<string, string>();

            return new OperationStatusJobsExtendedInfo("OperationStatusJobsExtendedInfo", jobIds?.ToList(), failedJobsError);
        }

        /// <summary> Initializes a new instance of OperationStatusProvisionILRExtendedInfo. </summary>
        /// <param name="recoveryTargetClientScripts"> Target details for file / folder restore. </param>
        /// <returns> A new <see cref="Models.OperationStatusProvisionILRExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusProvisionILRExtendedInfo OperationStatusProvisionILRExtendedInfo(IEnumerable<ClientScriptForConnect> recoveryTargetClientScripts = null)
        {
            recoveryTargetClientScripts ??= new List<ClientScriptForConnect>();

            return new OperationStatusProvisionILRExtendedInfo("OperationStatusProvisionILRExtendedInfo", recoveryTargetClientScripts != null ? new InstantItemRecoveryTarget(recoveryTargetClientScripts?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of OperationStatusValidateOperationExtendedInfo. </summary>
        /// <param name="validateOperationResponseValidationResults"> Gets the validation operation response. </param>
        /// <returns> A new <see cref="Models.OperationStatusValidateOperationExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusValidateOperationExtendedInfo OperationStatusValidateOperationExtendedInfo(IEnumerable<ErrorDetail> validateOperationResponseValidationResults = null)
        {
            validateOperationResponseValidationResults ??= new List<ErrorDetail>();

            return new OperationStatusValidateOperationExtendedInfo("OperationStatusValidateOperationExtendedInfo", validateOperationResponseValidationResults != null ? new ValidateOperationResponse(validateOperationResponseValidationResults?.ToList()) : null);
        }
    }
}
