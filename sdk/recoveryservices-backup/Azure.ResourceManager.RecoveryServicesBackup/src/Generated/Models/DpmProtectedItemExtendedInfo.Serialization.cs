// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class DpmProtectedItemExtendedInfo : IUtf8JsonSerializable, IJsonModel<DpmProtectedItemExtendedInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DpmProtectedItemExtendedInfo>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<DpmProtectedItemExtendedInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<DpmProtectedItemExtendedInfo>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<DpmProtectedItemExtendedInfo>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ProtectableObjectLoadPath))
            {
                writer.WritePropertyName("protectableObjectLoadPath"u8);
                writer.WriteStartObject();
                foreach (var item in ProtectableObjectLoadPath)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsProtected))
            {
                writer.WritePropertyName("protected"u8);
                writer.WriteBooleanValue(IsProtected.Value);
            }
            if (Optional.IsDefined(IsPresentOnCloud))
            {
                writer.WritePropertyName("isPresentOnCloud"u8);
                writer.WriteBooleanValue(IsPresentOnCloud.Value);
            }
            if (Optional.IsDefined(LastBackupStatus))
            {
                writer.WritePropertyName("lastBackupStatus"u8);
                writer.WriteStringValue(LastBackupStatus);
            }
            if (Optional.IsDefined(LastRefreshedOn))
            {
                writer.WritePropertyName("lastRefreshedAt"u8);
                writer.WriteStringValue(LastRefreshedOn.Value, "O");
            }
            if (Optional.IsDefined(OldestRecoverOn))
            {
                writer.WritePropertyName("oldestRecoveryPoint"u8);
                writer.WriteStringValue(OldestRecoverOn.Value, "O");
            }
            if (Optional.IsDefined(RecoveryPointCount))
            {
                writer.WritePropertyName("recoveryPointCount"u8);
                writer.WriteNumberValue(RecoveryPointCount.Value);
            }
            if (Optional.IsDefined(OnPremiseOldestRecoverOn))
            {
                writer.WritePropertyName("onPremiseOldestRecoveryPoint"u8);
                writer.WriteStringValue(OnPremiseOldestRecoverOn.Value, "O");
            }
            if (Optional.IsDefined(OnPremiseLatestRecoverOn))
            {
                writer.WritePropertyName("onPremiseLatestRecoveryPoint"u8);
                writer.WriteStringValue(OnPremiseLatestRecoverOn.Value, "O");
            }
            if (Optional.IsDefined(OnPremiseRecoveryPointCount))
            {
                writer.WritePropertyName("onPremiseRecoveryPointCount"u8);
                writer.WriteNumberValue(OnPremiseRecoveryPointCount.Value);
            }
            if (Optional.IsDefined(IsCollocated))
            {
                writer.WritePropertyName("isCollocated"u8);
                writer.WriteBooleanValue(IsCollocated.Value);
            }
            if (Optional.IsDefined(ProtectionGroupName))
            {
                writer.WritePropertyName("protectionGroupName"u8);
                writer.WriteStringValue(ProtectionGroupName);
            }
            if (Optional.IsDefined(DiskStorageUsedInBytes))
            {
                writer.WritePropertyName("diskStorageUsedInBytes"u8);
                writer.WriteStringValue(DiskStorageUsedInBytes);
            }
            if (Optional.IsDefined(TotalDiskStorageSizeInBytes))
            {
                writer.WritePropertyName("totalDiskStorageSizeInBytes"u8);
                writer.WriteStringValue(TotalDiskStorageSizeInBytes);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DpmProtectedItemExtendedInfo IJsonModel<DpmProtectedItemExtendedInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DpmProtectedItemExtendedInfo)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDpmProtectedItemExtendedInfo(document.RootElement, options);
        }

        internal static DpmProtectedItemExtendedInfo DeserializeDpmProtectedItemExtendedInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> protectableObjectLoadPath = default;
            Optional<bool> @protected = default;
            Optional<bool> isPresentOnCloud = default;
            Optional<string> lastBackupStatus = default;
            Optional<DateTimeOffset> lastRefreshedAt = default;
            Optional<DateTimeOffset> oldestRecoveryPoint = default;
            Optional<int> recoveryPointCount = default;
            Optional<DateTimeOffset> onPremiseOldestRecoveryPoint = default;
            Optional<DateTimeOffset> onPremiseLatestRecoveryPoint = default;
            Optional<int> onPremiseRecoveryPointCount = default;
            Optional<bool> isCollocated = default;
            Optional<string> protectionGroupName = default;
            Optional<string> diskStorageUsedInBytes = default;
            Optional<string> totalDiskStorageSizeInBytes = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protectableObjectLoadPath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    protectableObjectLoadPath = dictionary;
                    continue;
                }
                if (property.NameEquals("protected"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    @protected = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isPresentOnCloud"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPresentOnCloud = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastBackupStatus"u8))
                {
                    lastBackupStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastRefreshedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRefreshedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("oldestRecoveryPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oldestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recoveryPointCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoveryPointCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("onPremiseOldestRecoveryPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onPremiseOldestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("onPremiseLatestRecoveryPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onPremiseLatestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("onPremiseRecoveryPointCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onPremiseRecoveryPointCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isCollocated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCollocated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("protectionGroupName"u8))
                {
                    protectionGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskStorageUsedInBytes"u8))
                {
                    diskStorageUsedInBytes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalDiskStorageSizeInBytes"u8))
                {
                    totalDiskStorageSizeInBytes = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new DpmProtectedItemExtendedInfo(Optional.ToDictionary(protectableObjectLoadPath), Optional.ToNullable(@protected), Optional.ToNullable(isPresentOnCloud), lastBackupStatus.Value, Optional.ToNullable(lastRefreshedAt), Optional.ToNullable(oldestRecoveryPoint), Optional.ToNullable(recoveryPointCount), Optional.ToNullable(onPremiseOldestRecoveryPoint), Optional.ToNullable(onPremiseLatestRecoveryPoint), Optional.ToNullable(onPremiseRecoveryPointCount), Optional.ToNullable(isCollocated), protectionGroupName.Value, diskStorageUsedInBytes.Value, totalDiskStorageSizeInBytes.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DpmProtectedItemExtendedInfo>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DpmProtectedItemExtendedInfo)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        DpmProtectedItemExtendedInfo IPersistableModel<DpmProtectedItemExtendedInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(DpmProtectedItemExtendedInfo)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeDpmProtectedItemExtendedInfo(document.RootElement, options);
        }

        string IPersistableModel<DpmProtectedItemExtendedInfo>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
