// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class DpmProtectedItemExtendedInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsCollectionDefined(ProtectableObjectLoadPath))
            {
                writer.WritePropertyName("protectableObjectLoadPath"u8);
                writer.WriteStartObject();
                foreach (var item in ProtectableObjectLoadPath)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsDefined(IsProtected))
            {
                writer.WritePropertyName("protected"u8);
                writer.WriteBooleanValue(IsProtected.Value);
            }
            if (Core.Optional.IsDefined(IsPresentOnCloud))
            {
                writer.WritePropertyName("isPresentOnCloud"u8);
                writer.WriteBooleanValue(IsPresentOnCloud.Value);
            }
            if (Core.Optional.IsDefined(LastBackupStatus))
            {
                writer.WritePropertyName("lastBackupStatus"u8);
                writer.WriteStringValue(LastBackupStatus);
            }
            if (Core.Optional.IsDefined(LastRefreshedOn))
            {
                writer.WritePropertyName("lastRefreshedAt"u8);
                writer.WriteStringValue(LastRefreshedOn.Value, "O");
            }
            if (Core.Optional.IsDefined(OldestRecoverOn))
            {
                writer.WritePropertyName("oldestRecoveryPoint"u8);
                writer.WriteStringValue(OldestRecoverOn.Value, "O");
            }
            if (Core.Optional.IsDefined(RecoveryPointCount))
            {
                writer.WritePropertyName("recoveryPointCount"u8);
                writer.WriteNumberValue(RecoveryPointCount.Value);
            }
            if (Core.Optional.IsDefined(OnPremiseOldestRecoverOn))
            {
                writer.WritePropertyName("onPremiseOldestRecoveryPoint"u8);
                writer.WriteStringValue(OnPremiseOldestRecoverOn.Value, "O");
            }
            if (Core.Optional.IsDefined(OnPremiseLatestRecoverOn))
            {
                writer.WritePropertyName("onPremiseLatestRecoveryPoint"u8);
                writer.WriteStringValue(OnPremiseLatestRecoverOn.Value, "O");
            }
            if (Core.Optional.IsDefined(OnPremiseRecoveryPointCount))
            {
                writer.WritePropertyName("onPremiseRecoveryPointCount"u8);
                writer.WriteNumberValue(OnPremiseRecoveryPointCount.Value);
            }
            if (Core.Optional.IsDefined(IsCollocated))
            {
                writer.WritePropertyName("isCollocated"u8);
                writer.WriteBooleanValue(IsCollocated.Value);
            }
            if (Core.Optional.IsDefined(ProtectionGroupName))
            {
                writer.WritePropertyName("protectionGroupName"u8);
                writer.WriteStringValue(ProtectionGroupName);
            }
            if (Core.Optional.IsDefined(DiskStorageUsedInBytes))
            {
                writer.WritePropertyName("diskStorageUsedInBytes"u8);
                writer.WriteStringValue(DiskStorageUsedInBytes);
            }
            if (Core.Optional.IsDefined(TotalDiskStorageSizeInBytes))
            {
                writer.WritePropertyName("totalDiskStorageSizeInBytes"u8);
                writer.WriteStringValue(TotalDiskStorageSizeInBytes);
            }
            writer.WriteEndObject();
        }

        internal static DpmProtectedItemExtendedInfo DeserializeDpmProtectedItemExtendedInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<IDictionary<string, string>> protectableObjectLoadPath = default;
            Core.Optional<bool> @protected = default;
            Core.Optional<bool> isPresentOnCloud = default;
            Core.Optional<string> lastBackupStatus = default;
            Core.Optional<DateTimeOffset> lastRefreshedAt = default;
            Core.Optional<DateTimeOffset> oldestRecoveryPoint = default;
            Core.Optional<int> recoveryPointCount = default;
            Core.Optional<DateTimeOffset> onPremiseOldestRecoveryPoint = default;
            Core.Optional<DateTimeOffset> onPremiseLatestRecoveryPoint = default;
            Core.Optional<int> onPremiseRecoveryPointCount = default;
            Core.Optional<bool> isCollocated = default;
            Core.Optional<string> protectionGroupName = default;
            Core.Optional<string> diskStorageUsedInBytes = default;
            Core.Optional<string> totalDiskStorageSizeInBytes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protectableObjectLoadPath"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    protectableObjectLoadPath = dictionary;
                    continue;
                }
                if (property.NameEquals("protected"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    @protected = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isPresentOnCloud"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPresentOnCloud = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastBackupStatus"u8))
                {
                    lastBackupStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastRefreshedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRefreshedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("oldestRecoveryPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    oldestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recoveryPointCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoveryPointCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("onPremiseOldestRecoveryPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onPremiseOldestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("onPremiseLatestRecoveryPoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onPremiseLatestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("onPremiseRecoveryPointCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onPremiseRecoveryPointCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isCollocated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCollocated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("protectionGroupName"u8))
                {
                    protectionGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskStorageUsedInBytes"u8))
                {
                    diskStorageUsedInBytes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalDiskStorageSizeInBytes"u8))
                {
                    totalDiskStorageSizeInBytes = property.Value.GetString();
                    continue;
                }
            }
            return new DpmProtectedItemExtendedInfo(Core.Optional.ToDictionary(protectableObjectLoadPath), Core.Optional.ToNullable(@protected), Core.Optional.ToNullable(isPresentOnCloud), lastBackupStatus.Value, Core.Optional.ToNullable(lastRefreshedAt), Core.Optional.ToNullable(oldestRecoveryPoint), Core.Optional.ToNullable(recoveryPointCount), Core.Optional.ToNullable(onPremiseOldestRecoveryPoint), Core.Optional.ToNullable(onPremiseLatestRecoveryPoint), Core.Optional.ToNullable(onPremiseRecoveryPointCount), Core.Optional.ToNullable(isCollocated), protectionGroupName.Value, diskStorageUsedInBytes.Value, totalDiskStorageSizeInBytes.Value);
        }
    }
}
