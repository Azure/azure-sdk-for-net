// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class DpmProtectedItemExtendedInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ProtectableObjectLoadPath))
            {
                writer.WritePropertyName("protectableObjectLoadPath");
                writer.WriteStartObject();
                foreach (var item in ProtectableObjectLoadPath)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Protected))
            {
                writer.WritePropertyName("protected");
                writer.WriteBooleanValue(Protected.Value);
            }
            if (Optional.IsDefined(IsPresentOnCloud))
            {
                writer.WritePropertyName("isPresentOnCloud");
                writer.WriteBooleanValue(IsPresentOnCloud.Value);
            }
            if (Optional.IsDefined(LastBackupStatus))
            {
                writer.WritePropertyName("lastBackupStatus");
                writer.WriteStringValue(LastBackupStatus);
            }
            if (Optional.IsDefined(LastRefreshedOn))
            {
                writer.WritePropertyName("lastRefreshedAt");
                writer.WriteStringValue(LastRefreshedOn.Value, "O");
            }
            if (Optional.IsDefined(OldestRecoveryPoint))
            {
                writer.WritePropertyName("oldestRecoveryPoint");
                writer.WriteStringValue(OldestRecoveryPoint.Value, "O");
            }
            if (Optional.IsDefined(RecoveryPointCount))
            {
                writer.WritePropertyName("recoveryPointCount");
                writer.WriteNumberValue(RecoveryPointCount.Value);
            }
            if (Optional.IsDefined(OnPremiseOldestRecoveryPoint))
            {
                writer.WritePropertyName("onPremiseOldestRecoveryPoint");
                writer.WriteStringValue(OnPremiseOldestRecoveryPoint.Value, "O");
            }
            if (Optional.IsDefined(OnPremiseLatestRecoveryPoint))
            {
                writer.WritePropertyName("onPremiseLatestRecoveryPoint");
                writer.WriteStringValue(OnPremiseLatestRecoveryPoint.Value, "O");
            }
            if (Optional.IsDefined(OnPremiseRecoveryPointCount))
            {
                writer.WritePropertyName("onPremiseRecoveryPointCount");
                writer.WriteNumberValue(OnPremiseRecoveryPointCount.Value);
            }
            if (Optional.IsDefined(IsCollocated))
            {
                writer.WritePropertyName("isCollocated");
                writer.WriteBooleanValue(IsCollocated.Value);
            }
            if (Optional.IsDefined(ProtectionGroupName))
            {
                writer.WritePropertyName("protectionGroupName");
                writer.WriteStringValue(ProtectionGroupName);
            }
            if (Optional.IsDefined(DiskStorageUsedInBytes))
            {
                writer.WritePropertyName("diskStorageUsedInBytes");
                writer.WriteStringValue(DiskStorageUsedInBytes);
            }
            if (Optional.IsDefined(TotalDiskStorageSizeInBytes))
            {
                writer.WritePropertyName("totalDiskStorageSizeInBytes");
                writer.WriteStringValue(TotalDiskStorageSizeInBytes);
            }
            writer.WriteEndObject();
        }

        internal static DpmProtectedItemExtendedInfo DeserializeDpmProtectedItemExtendedInfo(JsonElement element)
        {
            Optional<IDictionary<string, string>> protectableObjectLoadPath = default;
            Optional<bool> @protected = default;
            Optional<bool> isPresentOnCloud = default;
            Optional<string> lastBackupStatus = default;
            Optional<DateTimeOffset> lastRefreshedAt = default;
            Optional<DateTimeOffset> oldestRecoveryPoint = default;
            Optional<int> recoveryPointCount = default;
            Optional<DateTimeOffset> onPremiseOldestRecoveryPoint = default;
            Optional<DateTimeOffset> onPremiseLatestRecoveryPoint = default;
            Optional<int> onPremiseRecoveryPointCount = default;
            Optional<bool> isCollocated = default;
            Optional<string> protectionGroupName = default;
            Optional<string> diskStorageUsedInBytes = default;
            Optional<string> totalDiskStorageSizeInBytes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protectableObjectLoadPath"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    protectableObjectLoadPath = dictionary;
                    continue;
                }
                if (property.NameEquals("protected"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @protected = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isPresentOnCloud"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isPresentOnCloud = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastBackupStatus"))
                {
                    lastBackupStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastRefreshedAt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastRefreshedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("oldestRecoveryPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    oldestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recoveryPointCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recoveryPointCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("onPremiseOldestRecoveryPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    onPremiseOldestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("onPremiseLatestRecoveryPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    onPremiseLatestRecoveryPoint = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("onPremiseRecoveryPointCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    onPremiseRecoveryPointCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isCollocated"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCollocated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("protectionGroupName"))
                {
                    protectionGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskStorageUsedInBytes"))
                {
                    diskStorageUsedInBytes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalDiskStorageSizeInBytes"))
                {
                    totalDiskStorageSizeInBytes = property.Value.GetString();
                    continue;
                }
            }
            return new DpmProtectedItemExtendedInfo(Optional.ToDictionary(protectableObjectLoadPath), Optional.ToNullable(@protected), Optional.ToNullable(isPresentOnCloud), lastBackupStatus.Value, Optional.ToNullable(lastRefreshedAt), Optional.ToNullable(oldestRecoveryPoint), Optional.ToNullable(recoveryPointCount), Optional.ToNullable(onPremiseOldestRecoveryPoint), Optional.ToNullable(onPremiseLatestRecoveryPoint), Optional.ToNullable(onPremiseRecoveryPointCount), Optional.ToNullable(isCollocated), protectionGroupName.Value, diskStorageUsedInBytes.Value, totalDiskStorageSizeInBytes.Value);
        }
    }
}
