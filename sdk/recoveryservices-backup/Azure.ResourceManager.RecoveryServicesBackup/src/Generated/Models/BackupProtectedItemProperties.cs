// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary>
    /// Base class for backup items.
    /// Serialized Name: ProtectedItem
    /// Please note <see cref="BackupProtectedItemProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="FileshareProtectedItem"/>, <see cref="AzureIaasVmProtectedItem"/>, <see cref="AzureVmWorkloadProtectedItem"/>, <see cref="AzureVmWorkloadSAPAseDatabaseProtectedItem"/>, <see cref="AzureVmWorkloadSAPHanaDBInstanceProtectedItem"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseProtectedItem"/>, <see cref="AzureVmWorkloadSQLDatabaseProtectedItem"/>, <see cref="DpmProtectedItem"/>, <see cref="GenericProtectedItem"/>, <see cref="MabFileFolderProtectedItem"/>, <see cref="AzureIaaSClassicComputeVmProtectedItem"/>, <see cref="AzureIaaSComputeVmProtectedItem"/> and <see cref="AzureSqlProtectedItem"/>.
    /// </summary>
    public abstract partial class BackupProtectedItemProperties
    {
        /// <summary> Initializes a new instance of BackupProtectedItemProperties. </summary>
        protected BackupProtectedItemProperties()
        {
            ResourceGuardOperationRequests = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of BackupProtectedItemProperties. </summary>
        /// <param name="protectedItemType">
        /// backup item type.
        /// Serialized Name: ProtectedItem.protectedItemType
        /// </param>
        /// <param name="backupManagementType">
        /// Type of backup management for the backed up item.
        /// Serialized Name: ProtectedItem.backupManagementType
        /// </param>
        /// <param name="workloadType">
        /// Type of workload this item represents.
        /// Serialized Name: ProtectedItem.workloadType
        /// </param>
        /// <param name="containerName">
        /// Unique name of container
        /// Serialized Name: ProtectedItem.containerName
        /// </param>
        /// <param name="sourceResourceId">
        /// ARM ID of the resource to be backed up.
        /// Serialized Name: ProtectedItem.sourceResourceId
        /// </param>
        /// <param name="policyId">
        /// ID of the backup policy with which this item is backed up.
        /// Serialized Name: ProtectedItem.policyId
        /// </param>
        /// <param name="lastRecoveryPoint">
        /// Timestamp when the last (latest) backup copy was created for this backup item.
        /// Serialized Name: ProtectedItem.lastRecoveryPoint
        /// </param>
        /// <param name="backupSetName">
        /// Name of the backup set the backup item belongs to
        /// Serialized Name: ProtectedItem.backupSetName
        /// </param>
        /// <param name="createMode">
        /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        /// Serialized Name: ProtectedItem.createMode
        /// </param>
        /// <param name="deferredDeleteTimeInUTC">
        /// Time for deferred deletion in UTC
        /// Serialized Name: ProtectedItem.deferredDeleteTimeInUTC
        /// </param>
        /// <param name="isScheduledForDeferredDelete">
        /// Flag to identify whether the DS is scheduled for deferred delete
        /// Serialized Name: ProtectedItem.isScheduledForDeferredDelete
        /// </param>
        /// <param name="deferredDeleteTimeRemaining">
        /// Time remaining before the DS marked for deferred delete is permanently deleted
        /// Serialized Name: ProtectedItem.deferredDeleteTimeRemaining
        /// </param>
        /// <param name="isDeferredDeleteScheduleUpcoming">
        /// Flag to identify whether the deferred deleted DS is to be purged soon
        /// Serialized Name: ProtectedItem.isDeferredDeleteScheduleUpcoming
        /// </param>
        /// <param name="isRehydrate">
        /// Flag to identify that deferred deleted DS is to be moved into Pause state
        /// Serialized Name: ProtectedItem.isRehydrate
        /// </param>
        /// <param name="resourceGuardOperationRequests">
        /// ResourceGuardOperationRequests on which LAC check will be performed
        /// Serialized Name: ProtectedItem.resourceGuardOperationRequests
        /// </param>
        /// <param name="isArchiveEnabled">
        /// Flag to identify whether datasource is protected in archive
        /// Serialized Name: ProtectedItem.isArchiveEnabled
        /// </param>
        /// <param name="policyName">
        /// Name of the policy used for protection
        /// Serialized Name: ProtectedItem.policyName
        /// </param>
        /// <param name="softDeleteRetentionPeriod">
        /// Soft delete retention period in days
        /// Serialized Name: ProtectedItem.softDeleteRetentionPeriod
        /// </param>
        internal BackupProtectedItemProperties(string protectedItemType, BackupManagementType? backupManagementType, DataSourceType? workloadType, string containerName, string sourceResourceId, string policyId, DateTimeOffset? lastRecoveryPoint, string backupSetName, CreateMode? createMode, DateTimeOffset? deferredDeleteTimeInUTC, bool? isScheduledForDeferredDelete, string deferredDeleteTimeRemaining, bool? isDeferredDeleteScheduleUpcoming, bool? isRehydrate, IList<string> resourceGuardOperationRequests, bool? isArchiveEnabled, string policyName, int? softDeleteRetentionPeriod)
        {
            ProtectedItemType = protectedItemType;
            BackupManagementType = backupManagementType;
            WorkloadType = workloadType;
            ContainerName = containerName;
            SourceResourceId = sourceResourceId;
            PolicyId = policyId;
            LastRecoveryPoint = lastRecoveryPoint;
            BackupSetName = backupSetName;
            CreateMode = createMode;
            DeferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            IsScheduledForDeferredDelete = isScheduledForDeferredDelete;
            DeferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            IsDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            IsRehydrate = isRehydrate;
            ResourceGuardOperationRequests = resourceGuardOperationRequests;
            IsArchiveEnabled = isArchiveEnabled;
            PolicyName = policyName;
            SoftDeleteRetentionPeriod = softDeleteRetentionPeriod;
        }

        /// <summary>
        /// backup item type.
        /// Serialized Name: ProtectedItem.protectedItemType
        /// </summary>
        internal string ProtectedItemType { get; set; }
        /// <summary>
        /// Type of backup management for the backed up item.
        /// Serialized Name: ProtectedItem.backupManagementType
        /// </summary>
        public BackupManagementType? BackupManagementType { get; }
        /// <summary>
        /// Type of workload this item represents.
        /// Serialized Name: ProtectedItem.workloadType
        /// </summary>
        public DataSourceType? WorkloadType { get; }
        /// <summary>
        /// Unique name of container
        /// Serialized Name: ProtectedItem.containerName
        /// </summary>
        public string ContainerName { get; set; }
        /// <summary>
        /// ARM ID of the resource to be backed up.
        /// Serialized Name: ProtectedItem.sourceResourceId
        /// </summary>
        public string SourceResourceId { get; set; }
        /// <summary>
        /// ID of the backup policy with which this item is backed up.
        /// Serialized Name: ProtectedItem.policyId
        /// </summary>
        public string PolicyId { get; set; }
        /// <summary>
        /// Timestamp when the last (latest) backup copy was created for this backup item.
        /// Serialized Name: ProtectedItem.lastRecoveryPoint
        /// </summary>
        public DateTimeOffset? LastRecoveryPoint { get; set; }
        /// <summary>
        /// Name of the backup set the backup item belongs to
        /// Serialized Name: ProtectedItem.backupSetName
        /// </summary>
        public string BackupSetName { get; set; }
        /// <summary>
        /// Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
        /// Serialized Name: ProtectedItem.createMode
        /// </summary>
        public CreateMode? CreateMode { get; set; }
        /// <summary>
        /// Time for deferred deletion in UTC
        /// Serialized Name: ProtectedItem.deferredDeleteTimeInUTC
        /// </summary>
        public DateTimeOffset? DeferredDeleteTimeInUTC { get; set; }
        /// <summary>
        /// Flag to identify whether the DS is scheduled for deferred delete
        /// Serialized Name: ProtectedItem.isScheduledForDeferredDelete
        /// </summary>
        public bool? IsScheduledForDeferredDelete { get; set; }
        /// <summary>
        /// Time remaining before the DS marked for deferred delete is permanently deleted
        /// Serialized Name: ProtectedItem.deferredDeleteTimeRemaining
        /// </summary>
        public string DeferredDeleteTimeRemaining { get; set; }
        /// <summary>
        /// Flag to identify whether the deferred deleted DS is to be purged soon
        /// Serialized Name: ProtectedItem.isDeferredDeleteScheduleUpcoming
        /// </summary>
        public bool? IsDeferredDeleteScheduleUpcoming { get; set; }
        /// <summary>
        /// Flag to identify that deferred deleted DS is to be moved into Pause state
        /// Serialized Name: ProtectedItem.isRehydrate
        /// </summary>
        public bool? IsRehydrate { get; set; }
        /// <summary>
        /// ResourceGuardOperationRequests on which LAC check will be performed
        /// Serialized Name: ProtectedItem.resourceGuardOperationRequests
        /// </summary>
        public IList<string> ResourceGuardOperationRequests { get; }
        /// <summary>
        /// Flag to identify whether datasource is protected in archive
        /// Serialized Name: ProtectedItem.isArchiveEnabled
        /// </summary>
        public bool? IsArchiveEnabled { get; set; }
        /// <summary>
        /// Name of the policy used for protection
        /// Serialized Name: ProtectedItem.policyName
        /// </summary>
        public string PolicyName { get; set; }
        /// <summary>
        /// Soft delete retention period in days
        /// Serialized Name: ProtectedItem.softDeleteRetentionPeriod
        /// </summary>
        public int? SoftDeleteRetentionPeriod { get; set; }
    }
}
