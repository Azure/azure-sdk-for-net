// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class BackupResourceConfigProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(StorageModelType))
            {
                writer.WritePropertyName("storageModelType"u8);
                writer.WriteStringValue(StorageModelType.Value.ToString());
            }
            if (Optional.IsDefined(StorageType))
            {
                writer.WritePropertyName("storageType"u8);
                writer.WriteStringValue(StorageType.Value.ToString());
            }
            if (Optional.IsDefined(StorageTypeState))
            {
                writer.WritePropertyName("storageTypeState"u8);
                writer.WriteStringValue(StorageTypeState.Value.ToString());
            }
            if (Optional.IsDefined(EnableCrossRegionRestore))
            {
                writer.WritePropertyName("crossRegionRestoreFlag"u8);
                writer.WriteBooleanValue(EnableCrossRegionRestore.Value);
            }
            if (Optional.IsDefined(DedupState))
            {
                writer.WritePropertyName("dedupState"u8);
                writer.WriteStringValue(DedupState.Value.ToString());
            }
            if (Optional.IsDefined(XcoolState))
            {
                writer.WritePropertyName("xcoolState"u8);
                writer.WriteStringValue(XcoolState.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static BackupResourceConfigProperties DeserializeBackupResourceConfigProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<BackupStorageType> storageModelType = default;
            Optional<BackupStorageType> storageType = default;
            Optional<BackupStorageTypeState> storageTypeState = default;
            Optional<bool> crossRegionRestoreFlag = default;
            Optional<VaultDedupState> dedupState = default;
            Optional<VaultXcoolState> xcoolState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("storageModelType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageModelType = new BackupStorageType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageType = new BackupStorageType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageTypeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageTypeState = new BackupStorageTypeState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("crossRegionRestoreFlag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    crossRegionRestoreFlag = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("dedupState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dedupState = new VaultDedupState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("xcoolState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    xcoolState = new VaultXcoolState(property.Value.GetString());
                    continue;
                }
            }
            return new BackupResourceConfigProperties(Optional.ToNullable(storageModelType), Optional.ToNullable(storageType), Optional.ToNullable(storageTypeState), Optional.ToNullable(crossRegionRestoreFlag), Optional.ToNullable(dedupState), Optional.ToNullable(xcoolState));
        }
    }
}
