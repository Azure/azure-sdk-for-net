// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    internal static partial class HttpStatusCodeExtensions
    {
        public static string ToSerialString(this HttpStatusCode value) => value switch
        {
            HttpStatusCode.Continue => "Continue",
            HttpStatusCode.SwitchingProtocols => "SwitchingProtocols",
            HttpStatusCode.OK => "OK",
            HttpStatusCode.Created => "Created",
            HttpStatusCode.Accepted => "Accepted",
            HttpStatusCode.NonAuthoritativeInformation => "NonAuthoritativeInformation",
            HttpStatusCode.NoContent => "NoContent",
            HttpStatusCode.ResetContent => "ResetContent",
            HttpStatusCode.PartialContent => "PartialContent",
            HttpStatusCode.MultipleChoices => "MultipleChoices",
            HttpStatusCode.Ambiguous => "Ambiguous",
            HttpStatusCode.MovedPermanently => "MovedPermanently",
            HttpStatusCode.Moved => "Moved",
            HttpStatusCode.Found => "Found",
            HttpStatusCode.Redirect => "Redirect",
            HttpStatusCode.SeeOther => "SeeOther",
            HttpStatusCode.RedirectMethod => "RedirectMethod",
            HttpStatusCode.NotModified => "NotModified",
            HttpStatusCode.UseProxy => "UseProxy",
            HttpStatusCode.Unused => "Unused",
            HttpStatusCode.TemporaryRedirect => "TemporaryRedirect",
            HttpStatusCode.RedirectKeepVerb => "RedirectKeepVerb",
            HttpStatusCode.BadRequest => "BadRequest",
            HttpStatusCode.Unauthorized => "Unauthorized",
            HttpStatusCode.PaymentRequired => "PaymentRequired",
            HttpStatusCode.Forbidden => "Forbidden",
            HttpStatusCode.NotFound => "NotFound",
            HttpStatusCode.MethodNotAllowed => "MethodNotAllowed",
            HttpStatusCode.NotAcceptable => "NotAcceptable",
            HttpStatusCode.ProxyAuthenticationRequired => "ProxyAuthenticationRequired",
            HttpStatusCode.RequestTimeout => "RequestTimeout",
            HttpStatusCode.Conflict => "Conflict",
            HttpStatusCode.Gone => "Gone",
            HttpStatusCode.LengthRequired => "LengthRequired",
            HttpStatusCode.PreconditionFailed => "PreconditionFailed",
            HttpStatusCode.RequestEntityTooLarge => "RequestEntityTooLarge",
            HttpStatusCode.RequestUriTooLong => "RequestUriTooLong",
            HttpStatusCode.UnsupportedMediaType => "UnsupportedMediaType",
            HttpStatusCode.RequestedRangeNotSatisfiable => "RequestedRangeNotSatisfiable",
            HttpStatusCode.ExpectationFailed => "ExpectationFailed",
            HttpStatusCode.UpgradeRequired => "UpgradeRequired",
            HttpStatusCode.InternalServerError => "InternalServerError",
            HttpStatusCode.NotImplemented => "NotImplemented",
            HttpStatusCode.BadGateway => "BadGateway",
            HttpStatusCode.ServiceUnavailable => "ServiceUnavailable",
            HttpStatusCode.GatewayTimeout => "GatewayTimeout",
            HttpStatusCode.HttpVersionNotSupported => "HttpVersionNotSupported",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown HttpStatusCode value.")
        };

        public static HttpStatusCode ToHttpStatusCode(this string value)
        {
            if (string.Equals(value, "Continue", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Continue;
            if (string.Equals(value, "SwitchingProtocols", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.SwitchingProtocols;
            if (string.Equals(value, "OK", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.OK;
            if (string.Equals(value, "Created", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Created;
            if (string.Equals(value, "Accepted", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Accepted;
            if (string.Equals(value, "NonAuthoritativeInformation", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.NonAuthoritativeInformation;
            if (string.Equals(value, "NoContent", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.NoContent;
            if (string.Equals(value, "ResetContent", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.ResetContent;
            if (string.Equals(value, "PartialContent", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.PartialContent;
            if (string.Equals(value, "MultipleChoices", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.MultipleChoices;
            if (string.Equals(value, "Ambiguous", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Ambiguous;
            if (string.Equals(value, "MovedPermanently", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.MovedPermanently;
            if (string.Equals(value, "Moved", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Moved;
            if (string.Equals(value, "Found", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Found;
            if (string.Equals(value, "Redirect", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Redirect;
            if (string.Equals(value, "SeeOther", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.SeeOther;
            if (string.Equals(value, "RedirectMethod", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.RedirectMethod;
            if (string.Equals(value, "NotModified", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.NotModified;
            if (string.Equals(value, "UseProxy", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.UseProxy;
            if (string.Equals(value, "Unused", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Unused;
            if (string.Equals(value, "TemporaryRedirect", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.TemporaryRedirect;
            if (string.Equals(value, "RedirectKeepVerb", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.RedirectKeepVerb;
            if (string.Equals(value, "BadRequest", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.BadRequest;
            if (string.Equals(value, "Unauthorized", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Unauthorized;
            if (string.Equals(value, "PaymentRequired", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.PaymentRequired;
            if (string.Equals(value, "Forbidden", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Forbidden;
            if (string.Equals(value, "NotFound", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.NotFound;
            if (string.Equals(value, "MethodNotAllowed", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.MethodNotAllowed;
            if (string.Equals(value, "NotAcceptable", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.NotAcceptable;
            if (string.Equals(value, "ProxyAuthenticationRequired", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.ProxyAuthenticationRequired;
            if (string.Equals(value, "RequestTimeout", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.RequestTimeout;
            if (string.Equals(value, "Conflict", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Conflict;
            if (string.Equals(value, "Gone", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.Gone;
            if (string.Equals(value, "LengthRequired", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.LengthRequired;
            if (string.Equals(value, "PreconditionFailed", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.PreconditionFailed;
            if (string.Equals(value, "RequestEntityTooLarge", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.RequestEntityTooLarge;
            if (string.Equals(value, "RequestUriTooLong", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.RequestUriTooLong;
            if (string.Equals(value, "UnsupportedMediaType", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.UnsupportedMediaType;
            if (string.Equals(value, "RequestedRangeNotSatisfiable", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.RequestedRangeNotSatisfiable;
            if (string.Equals(value, "ExpectationFailed", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.ExpectationFailed;
            if (string.Equals(value, "UpgradeRequired", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.UpgradeRequired;
            if (string.Equals(value, "InternalServerError", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.InternalServerError;
            if (string.Equals(value, "NotImplemented", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.NotImplemented;
            if (string.Equals(value, "BadGateway", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.BadGateway;
            if (string.Equals(value, "ServiceUnavailable", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.ServiceUnavailable;
            if (string.Equals(value, "GatewayTimeout", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.GatewayTimeout;
            if (string.Equals(value, "HttpVersionNotSupported", StringComparison.InvariantCultureIgnoreCase)) return HttpStatusCode.HttpVersionNotSupported;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown HttpStatusCode value.");
        }
    }
}
