// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary>
    /// Workload item type of the item for which intent is to be set
    /// Serialized Name: WorkloadItemType
    /// </summary>
    public readonly partial struct WorkloadItemType : IEquatable<WorkloadItemType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkloadItemType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkloadItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string SqlInstanceValue = "SQLInstance";
        private const string SqlDataBaseValue = "SQLDataBase";
        private const string SapHanaSystemValue = "SAPHanaSystem";
        private const string SapHanaDatabaseValue = "SAPHanaDatabase";
        private const string SapAseSystemValue = "SAPAseSystem";
        private const string SapAseDatabaseValue = "SAPAseDatabase";
        private const string SapHanaDBInstanceValue = "SAPHanaDBInstance";

        /// <summary>
        /// Invalid
        /// Serialized Name: WorkloadItemType.Invalid
        /// </summary>
        public static WorkloadItemType Invalid { get; } = new WorkloadItemType(InvalidValue);
        /// <summary>
        /// SQLInstance
        /// Serialized Name: WorkloadItemType.SQLInstance
        /// </summary>
        public static WorkloadItemType SqlInstance { get; } = new WorkloadItemType(SqlInstanceValue);
        /// <summary>
        /// SQLDataBase
        /// Serialized Name: WorkloadItemType.SQLDataBase
        /// </summary>
        public static WorkloadItemType SqlDataBase { get; } = new WorkloadItemType(SqlDataBaseValue);
        /// <summary>
        /// SAPHanaSystem
        /// Serialized Name: WorkloadItemType.SAPHanaSystem
        /// </summary>
        public static WorkloadItemType SapHanaSystem { get; } = new WorkloadItemType(SapHanaSystemValue);
        /// <summary>
        /// SAPHanaDatabase
        /// Serialized Name: WorkloadItemType.SAPHanaDatabase
        /// </summary>
        public static WorkloadItemType SapHanaDatabase { get; } = new WorkloadItemType(SapHanaDatabaseValue);
        /// <summary>
        /// SAPAseSystem
        /// Serialized Name: WorkloadItemType.SAPAseSystem
        /// </summary>
        public static WorkloadItemType SapAseSystem { get; } = new WorkloadItemType(SapAseSystemValue);
        /// <summary>
        /// SAPAseDatabase
        /// Serialized Name: WorkloadItemType.SAPAseDatabase
        /// </summary>
        public static WorkloadItemType SapAseDatabase { get; } = new WorkloadItemType(SapAseDatabaseValue);
        /// <summary>
        /// SAPHanaDBInstance
        /// Serialized Name: WorkloadItemType.SAPHanaDBInstance
        /// </summary>
        public static WorkloadItemType SapHanaDBInstance { get; } = new WorkloadItemType(SapHanaDBInstanceValue);
        /// <summary> Determines if two <see cref="WorkloadItemType"/> values are the same. </summary>
        public static bool operator ==(WorkloadItemType left, WorkloadItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkloadItemType"/> values are not the same. </summary>
        public static bool operator !=(WorkloadItemType left, WorkloadItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkloadItemType"/>. </summary>
        public static implicit operator WorkloadItemType(string value) => new WorkloadItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkloadItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkloadItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
