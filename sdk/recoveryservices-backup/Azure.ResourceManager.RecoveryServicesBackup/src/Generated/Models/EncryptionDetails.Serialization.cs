// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class EncryptionDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EncryptionEnabled))
            {
                writer.WritePropertyName("encryptionEnabled");
                writer.WriteBooleanValue(EncryptionEnabled.Value);
            }
            if (Optional.IsDefined(KekUri))
            {
                writer.WritePropertyName("kekUrl");
                writer.WriteStringValue(KekUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SecretKeyUri))
            {
                writer.WritePropertyName("secretKeyUrl");
                writer.WriteStringValue(SecretKeyUri.AbsoluteUri);
            }
            if (Optional.IsDefined(KekVaultId))
            {
                writer.WritePropertyName("kekVaultId");
                writer.WriteStringValue(KekVaultId);
            }
            if (Optional.IsDefined(SecretKeyVaultId))
            {
                writer.WritePropertyName("secretKeyVaultId");
                writer.WriteStringValue(SecretKeyVaultId);
            }
            writer.WriteEndObject();
        }

        internal static EncryptionDetails DeserializeEncryptionDetails(JsonElement element)
        {
            Optional<bool> encryptionEnabled = default;
            Optional<Uri> kekUrl = default;
            Optional<Uri> secretKeyUrl = default;
            Optional<string> kekVaultId = default;
            Optional<string> secretKeyVaultId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("encryptionEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    encryptionEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kekUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        kekUrl = null;
                        continue;
                    }
                    kekUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("secretKeyUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        secretKeyUrl = null;
                        continue;
                    }
                    secretKeyUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kekVaultId"))
                {
                    kekVaultId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("secretKeyVaultId"))
                {
                    secretKeyVaultId = property.Value.GetString();
                    continue;
                }
            }
            return new EncryptionDetails(Optional.ToNullable(encryptionEnabled), kekUrl.Value, secretKeyUrl.Value, kekVaultId.Value, secretKeyVaultId.Value);
        }
    }
}
