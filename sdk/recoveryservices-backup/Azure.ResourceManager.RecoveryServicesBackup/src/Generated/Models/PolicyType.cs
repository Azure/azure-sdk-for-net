// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary>
    /// Type of backup policy type
    /// Serialized Name: PolicyType
    /// </summary>
    public readonly partial struct PolicyType : IEquatable<PolicyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PolicyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string FullValue = "Full";
        private const string DifferentialValue = "Differential";
        private const string LogValue = "Log";
        private const string CopyOnlyFullValue = "CopyOnlyFull";
        private const string IncrementalValue = "Incremental";
        private const string SnapshotFullValue = "SnapshotFull";
        private const string SnapshotCopyOnlyFullValue = "SnapshotCopyOnlyFull";

        /// <summary>
        /// Invalid
        /// Serialized Name: PolicyType.Invalid
        /// </summary>
        public static PolicyType Invalid { get; } = new PolicyType(InvalidValue);
        /// <summary>
        /// Full
        /// Serialized Name: PolicyType.Full
        /// </summary>
        public static PolicyType Full { get; } = new PolicyType(FullValue);
        /// <summary>
        /// Differential
        /// Serialized Name: PolicyType.Differential
        /// </summary>
        public static PolicyType Differential { get; } = new PolicyType(DifferentialValue);
        /// <summary>
        /// Log
        /// Serialized Name: PolicyType.Log
        /// </summary>
        public static PolicyType Log { get; } = new PolicyType(LogValue);
        /// <summary>
        /// CopyOnlyFull
        /// Serialized Name: PolicyType.CopyOnlyFull
        /// </summary>
        public static PolicyType CopyOnlyFull { get; } = new PolicyType(CopyOnlyFullValue);
        /// <summary>
        /// Incremental
        /// Serialized Name: PolicyType.Incremental
        /// </summary>
        public static PolicyType Incremental { get; } = new PolicyType(IncrementalValue);
        /// <summary>
        /// SnapshotFull
        /// Serialized Name: PolicyType.SnapshotFull
        /// </summary>
        public static PolicyType SnapshotFull { get; } = new PolicyType(SnapshotFullValue);
        /// <summary>
        /// SnapshotCopyOnlyFull
        /// Serialized Name: PolicyType.SnapshotCopyOnlyFull
        /// </summary>
        public static PolicyType SnapshotCopyOnlyFull { get; } = new PolicyType(SnapshotCopyOnlyFullValue);
        /// <summary> Determines if two <see cref="PolicyType"/> values are the same. </summary>
        public static bool operator ==(PolicyType left, PolicyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PolicyType"/> values are not the same. </summary>
        public static bool operator !=(PolicyType left, PolicyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PolicyType"/>. </summary>
        public static implicit operator PolicyType(string value) => new PolicyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PolicyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PolicyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
