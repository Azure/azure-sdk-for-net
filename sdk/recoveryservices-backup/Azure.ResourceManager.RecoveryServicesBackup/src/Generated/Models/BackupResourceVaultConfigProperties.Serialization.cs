// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class BackupResourceVaultConfigProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(StorageModelType))
            {
                writer.WritePropertyName("storageModelType"u8);
                writer.WriteStringValue(StorageModelType.Value.ToString());
            }
            if (Core.Optional.IsDefined(StorageType))
            {
                writer.WritePropertyName("storageType"u8);
                writer.WriteStringValue(StorageType.Value.ToString());
            }
            if (Core.Optional.IsDefined(StorageTypeState))
            {
                writer.WritePropertyName("storageTypeState"u8);
                writer.WriteStringValue(StorageTypeState.Value.ToString());
            }
            if (Core.Optional.IsDefined(EnhancedSecurityState))
            {
                writer.WritePropertyName("enhancedSecurityState"u8);
                writer.WriteStringValue(EnhancedSecurityState.Value.ToString());
            }
            if (Core.Optional.IsDefined(SoftDeleteFeatureState))
            {
                writer.WritePropertyName("softDeleteFeatureState"u8);
                writer.WriteStringValue(SoftDeleteFeatureState.Value.ToString());
            }
            if (Core.Optional.IsCollectionDefined(ResourceGuardOperationRequests))
            {
                writer.WritePropertyName("resourceGuardOperationRequests"u8);
                writer.WriteStartArray();
                foreach (var item in ResourceGuardOperationRequests)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(IsSoftDeleteFeatureStateEditable))
            {
                writer.WritePropertyName("isSoftDeleteFeatureStateEditable"u8);
                writer.WriteBooleanValue(IsSoftDeleteFeatureStateEditable.Value);
            }
            writer.WriteEndObject();
        }

        internal static BackupResourceVaultConfigProperties DeserializeBackupResourceVaultConfigProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<BackupStorageType> storageModelType = default;
            Core.Optional<BackupStorageType> storageType = default;
            Core.Optional<BackupStorageTypeState> storageTypeState = default;
            Core.Optional<EnhancedSecurityState> enhancedSecurityState = default;
            Core.Optional<SoftDeleteFeatureState> softDeleteFeatureState = default;
            Core.Optional<IList<string>> resourceGuardOperationRequests = default;
            Core.Optional<bool> isSoftDeleteFeatureStateEditable = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("storageModelType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageModelType = new BackupStorageType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageType = new BackupStorageType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageTypeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageTypeState = new BackupStorageTypeState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enhancedSecurityState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enhancedSecurityState = new EnhancedSecurityState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("softDeleteFeatureState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    softDeleteFeatureState = new SoftDeleteFeatureState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceGuardOperationRequests"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    resourceGuardOperationRequests = array;
                    continue;
                }
                if (property.NameEquals("isSoftDeleteFeatureStateEditable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSoftDeleteFeatureStateEditable = property.Value.GetBoolean();
                    continue;
                }
            }
            return new BackupResourceVaultConfigProperties(Core.Optional.ToNullable(storageModelType), Core.Optional.ToNullable(storageType), Core.Optional.ToNullable(storageTypeState), Core.Optional.ToNullable(enhancedSecurityState), Core.Optional.ToNullable(softDeleteFeatureState), Core.Optional.ToList(resourceGuardOperationRequests), Core.Optional.ToNullable(isSoftDeleteFeatureStateEditable));
        }
    }
}
