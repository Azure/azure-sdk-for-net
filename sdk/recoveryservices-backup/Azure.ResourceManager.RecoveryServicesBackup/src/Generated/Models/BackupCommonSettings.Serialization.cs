// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class BackupCommonSettings : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(TimeZone))
            {
                writer.WritePropertyName("timeZone"u8);
                writer.WriteStringValue(TimeZone);
            }
            if (Core.Optional.IsDefined(IsSqlCompression))
            {
                writer.WritePropertyName("issqlcompression"u8);
                writer.WriteBooleanValue(IsSqlCompression.Value);
            }
            if (Core.Optional.IsDefined(IsCompression))
            {
                writer.WritePropertyName("isCompression"u8);
                writer.WriteBooleanValue(IsCompression.Value);
            }
            writer.WriteEndObject();
        }

        internal static BackupCommonSettings DeserializeBackupCommonSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> timeZone = default;
            Core.Optional<bool> isSqlCompression = default;
            Core.Optional<bool> isCompression = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeZone"u8))
                {
                    timeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("issqlcompression"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSqlCompression = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isCompression"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCompression = property.Value.GetBoolean();
                    continue;
                }
            }
            return new BackupCommonSettings(timeZone.Value, Core.Optional.ToNullable(isSqlCompression), Core.Optional.ToNullable(isCompression));
        }
    }
}
