// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Details needed if the VM was encrypted at the time of backup. </summary>
    public partial class VmEncryptionDetails
    {
        /// <summary> Initializes a new instance of <see cref="VmEncryptionDetails"/>. </summary>
        public VmEncryptionDetails()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VmEncryptionDetails"/>. </summary>
        /// <param name="isEncryptionEnabled"> Identifies whether this backup copy represents an encrypted VM at the time of backup. </param>
        /// <param name="kekUri"> Key Url. </param>
        /// <param name="secretKeyUri"> Secret Url. </param>
        /// <param name="kekVaultId"> ID of Key Vault where KEK is stored. </param>
        /// <param name="secretKeyVaultId"> ID of Key Vault where Secret is stored. </param>
        internal VmEncryptionDetails(bool? isEncryptionEnabled, Uri kekUri, Uri secretKeyUri, ResourceIdentifier kekVaultId, ResourceIdentifier secretKeyVaultId)
        {
            IsEncryptionEnabled = isEncryptionEnabled;
            KekUri = kekUri;
            SecretKeyUri = secretKeyUri;
            KekVaultId = kekVaultId;
            SecretKeyVaultId = secretKeyVaultId;
        }

        /// <summary> Identifies whether this backup copy represents an encrypted VM at the time of backup. </summary>
        public bool? IsEncryptionEnabled { get; set; }
        /// <summary> Key Url. </summary>
        public Uri KekUri { get; set; }
        /// <summary> Secret Url. </summary>
        public Uri SecretKeyUri { get; set; }
        /// <summary> ID of Key Vault where KEK is stored. </summary>
        public ResourceIdentifier KekVaultId { get; set; }
        /// <summary> ID of Key Vault where Secret is stored. </summary>
        public ResourceIdentifier SecretKeyVaultId { get; set; }
    }
}
