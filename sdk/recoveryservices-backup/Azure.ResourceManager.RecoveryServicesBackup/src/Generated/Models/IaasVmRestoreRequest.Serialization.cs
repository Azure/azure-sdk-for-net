// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class IaasVmRestoreRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RecoveryPointId))
            {
                writer.WritePropertyName("recoveryPointId");
                writer.WriteStringValue(RecoveryPointId);
            }
            if (Optional.IsDefined(RecoveryType))
            {
                writer.WritePropertyName("recoveryType");
                writer.WriteStringValue(RecoveryType.Value.ToString());
            }
            if (Optional.IsDefined(SourceResourceId))
            {
                writer.WritePropertyName("sourceResourceId");
                writer.WriteStringValue(SourceResourceId);
            }
            if (Optional.IsDefined(TargetVirtualMachineId))
            {
                writer.WritePropertyName("targetVirtualMachineId");
                writer.WriteStringValue(TargetVirtualMachineId);
            }
            if (Optional.IsDefined(TargetResourceGroupId))
            {
                writer.WritePropertyName("targetResourceGroupId");
                writer.WriteStringValue(TargetResourceGroupId);
            }
            if (Optional.IsDefined(StorageAccountId))
            {
                writer.WritePropertyName("storageAccountId");
                writer.WriteStringValue(StorageAccountId);
            }
            if (Optional.IsDefined(VirtualNetworkId))
            {
                writer.WritePropertyName("virtualNetworkId");
                writer.WriteStringValue(VirtualNetworkId);
            }
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId");
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(TargetDomainNameId))
            {
                writer.WritePropertyName("targetDomainNameId");
                writer.WriteStringValue(TargetDomainNameId);
            }
            if (Optional.IsDefined(Region))
            {
                writer.WritePropertyName("region");
                writer.WriteStringValue(Region);
            }
            if (Optional.IsDefined(AffinityGroup))
            {
                writer.WritePropertyName("affinityGroup");
                writer.WriteStringValue(AffinityGroup);
            }
            if (Optional.IsDefined(CreateNewCloudService))
            {
                writer.WritePropertyName("createNewCloudService");
                writer.WriteBooleanValue(CreateNewCloudService.Value);
            }
            if (Optional.IsDefined(OriginalStorageAccountOption))
            {
                writer.WritePropertyName("originalStorageAccountOption");
                writer.WriteBooleanValue(OriginalStorageAccountOption.Value);
            }
            if (Optional.IsDefined(EncryptionDetails))
            {
                writer.WritePropertyName("encryptionDetails");
                writer.WriteObjectValue(EncryptionDetails);
            }
            if (Optional.IsCollectionDefined(RestoreDiskLunList))
            {
                writer.WritePropertyName("restoreDiskLunList");
                writer.WriteStartArray();
                foreach (var item in RestoreDiskLunList)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RestoreWithManagedDisks))
            {
                writer.WritePropertyName("restoreWithManagedDisks");
                writer.WriteBooleanValue(RestoreWithManagedDisks.Value);
            }
            if (Optional.IsDefined(DiskEncryptionSetId))
            {
                writer.WritePropertyName("diskEncryptionSetId");
                writer.WriteStringValue(DiskEncryptionSetId);
            }
            if (Optional.IsCollectionDefined(Zones))
            {
                writer.WritePropertyName("zones");
                writer.WriteStartArray();
                foreach (var item in Zones)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(IdentityInfo))
            {
                writer.WritePropertyName("identityInfo");
                writer.WriteObjectValue(IdentityInfo);
            }
            if (Optional.IsDefined(IdentityBasedRestoreDetails))
            {
                writer.WritePropertyName("identityBasedRestoreDetails");
                writer.WriteObjectValue(IdentityBasedRestoreDetails);
            }
            writer.WritePropertyName("objectType");
            writer.WriteStringValue(ObjectType);
            writer.WriteEndObject();
        }

        internal static IaasVmRestoreRequest DeserializeIaasVmRestoreRequest(JsonElement element)
        {
            if (element.TryGetProperty("objectType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "IaasVMRestoreWithRehydrationRequest": return IaasVmRestoreWithRehydrationRequest.DeserializeIaasVmRestoreWithRehydrationRequest(element);
                }
            }
            Optional<string> recoveryPointId = default;
            Optional<RecoveryType> recoveryType = default;
            Optional<string> sourceResourceId = default;
            Optional<string> targetVirtualMachineId = default;
            Optional<string> targetResourceGroupId = default;
            Optional<string> storageAccountId = default;
            Optional<string> virtualNetworkId = default;
            Optional<string> subnetId = default;
            Optional<string> targetDomainNameId = default;
            Optional<string> region = default;
            Optional<string> affinityGroup = default;
            Optional<bool> createNewCloudService = default;
            Optional<bool> originalStorageAccountOption = default;
            Optional<EncryptionDetails> encryptionDetails = default;
            Optional<IList<int>> restoreDiskLunList = default;
            Optional<bool> restoreWithManagedDisks = default;
            Optional<string> diskEncryptionSetId = default;
            Optional<IList<string>> zones = default;
            Optional<IdentityInfo> identityInfo = default;
            Optional<IdentityBasedRestoreDetails> identityBasedRestoreDetails = default;
            string objectType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recoveryPointId"))
                {
                    recoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    recoveryType = new RecoveryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceResourceId"))
                {
                    sourceResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetVirtualMachineId"))
                {
                    targetVirtualMachineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceGroupId"))
                {
                    targetResourceGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccountId"))
                {
                    storageAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("virtualNetworkId"))
                {
                    virtualNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnetId"))
                {
                    subnetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetDomainNameId"))
                {
                    targetDomainNameId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("region"))
                {
                    region = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("affinityGroup"))
                {
                    affinityGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createNewCloudService"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createNewCloudService = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("originalStorageAccountOption"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    originalStorageAccountOption = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("encryptionDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    encryptionDetails = EncryptionDetails.DeserializeEncryptionDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("restoreDiskLunList"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    restoreDiskLunList = array;
                    continue;
                }
                if (property.NameEquals("restoreWithManagedDisks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    restoreWithManagedDisks = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("diskEncryptionSetId"))
                {
                    diskEncryptionSetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("zones"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    zones = array;
                    continue;
                }
                if (property.NameEquals("identityInfo"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identityInfo = IdentityInfo.DeserializeIdentityInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("identityBasedRestoreDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identityBasedRestoreDetails = IdentityBasedRestoreDetails.DeserializeIdentityBasedRestoreDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
            }
            return new IaasVmRestoreRequest(objectType, recoveryPointId.Value, Optional.ToNullable(recoveryType), sourceResourceId.Value, targetVirtualMachineId.Value, targetResourceGroupId.Value, storageAccountId.Value, virtualNetworkId.Value, subnetId.Value, targetDomainNameId.Value, region.Value, affinityGroup.Value, Optional.ToNullable(createNewCloudService), Optional.ToNullable(originalStorageAccountOption), encryptionDetails.Value, Optional.ToList(restoreDiskLunList), Optional.ToNullable(restoreWithManagedDisks), diskEncryptionSetId.Value, Optional.ToList(zones), identityInfo.Value, identityBasedRestoreDetails.Value);
        }
    }
}
