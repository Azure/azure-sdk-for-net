// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary>
    /// Type of workload this item represents.
    /// Serialized Name: DataSourceType
    /// </summary>
    public readonly partial struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataSourceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string VmValue = "VM";
        private const string FileFolderValue = "FileFolder";
        private const string AzureSqlDbValue = "AzureSqlDb";
        private const string SqlDBValue = "SQLDB";
        private const string ExchangeValue = "Exchange";
        private const string SharepointValue = "Sharepoint";
        private const string VMwareVmValue = "VMwareVM";
        private const string SystemStateValue = "SystemState";
        private const string ClientValue = "Client";
        private const string GenericDataSourceValue = "GenericDataSource";
        private const string SqlDataBaseValue = "SQLDataBase";
        private const string AzureFileShareValue = "AzureFileShare";
        private const string SAPHanaDatabaseValue = "SAPHanaDatabase";
        private const string SAPAseDatabaseValue = "SAPAseDatabase";
        private const string SAPHanaDBInstanceValue = "SAPHanaDBInstance";

        /// <summary>
        /// Invalid
        /// Serialized Name: DataSourceType.Invalid
        /// </summary>
        public static DataSourceType Invalid { get; } = new DataSourceType(InvalidValue);
        /// <summary>
        /// VM
        /// Serialized Name: DataSourceType.VM
        /// </summary>
        public static DataSourceType Vm { get; } = new DataSourceType(VmValue);
        /// <summary>
        /// FileFolder
        /// Serialized Name: DataSourceType.FileFolder
        /// </summary>
        public static DataSourceType FileFolder { get; } = new DataSourceType(FileFolderValue);
        /// <summary>
        /// AzureSqlDb
        /// Serialized Name: DataSourceType.AzureSqlDb
        /// </summary>
        public static DataSourceType AzureSqlDb { get; } = new DataSourceType(AzureSqlDbValue);
        /// <summary>
        /// SQLDB
        /// Serialized Name: DataSourceType.SQLDB
        /// </summary>
        public static DataSourceType SqlDB { get; } = new DataSourceType(SqlDBValue);
        /// <summary>
        /// Exchange
        /// Serialized Name: DataSourceType.Exchange
        /// </summary>
        public static DataSourceType Exchange { get; } = new DataSourceType(ExchangeValue);
        /// <summary>
        /// Sharepoint
        /// Serialized Name: DataSourceType.Sharepoint
        /// </summary>
        public static DataSourceType Sharepoint { get; } = new DataSourceType(SharepointValue);
        /// <summary>
        /// VMwareVM
        /// Serialized Name: DataSourceType.VMwareVM
        /// </summary>
        public static DataSourceType VMwareVm { get; } = new DataSourceType(VMwareVmValue);
        /// <summary>
        /// SystemState
        /// Serialized Name: DataSourceType.SystemState
        /// </summary>
        public static DataSourceType SystemState { get; } = new DataSourceType(SystemStateValue);
        /// <summary>
        /// Client
        /// Serialized Name: DataSourceType.Client
        /// </summary>
        public static DataSourceType Client { get; } = new DataSourceType(ClientValue);
        /// <summary>
        /// GenericDataSource
        /// Serialized Name: DataSourceType.GenericDataSource
        /// </summary>
        public static DataSourceType GenericDataSource { get; } = new DataSourceType(GenericDataSourceValue);
        /// <summary>
        /// SQLDataBase
        /// Serialized Name: DataSourceType.SQLDataBase
        /// </summary>
        public static DataSourceType SqlDataBase { get; } = new DataSourceType(SqlDataBaseValue);
        /// <summary>
        /// AzureFileShare
        /// Serialized Name: DataSourceType.AzureFileShare
        /// </summary>
        public static DataSourceType AzureFileShare { get; } = new DataSourceType(AzureFileShareValue);
        /// <summary>
        /// SAPHanaDatabase
        /// Serialized Name: DataSourceType.SAPHanaDatabase
        /// </summary>
        public static DataSourceType SAPHanaDatabase { get; } = new DataSourceType(SAPHanaDatabaseValue);
        /// <summary>
        /// SAPAseDatabase
        /// Serialized Name: DataSourceType.SAPAseDatabase
        /// </summary>
        public static DataSourceType SAPAseDatabase { get; } = new DataSourceType(SAPAseDatabaseValue);
        /// <summary>
        /// SAPHanaDBInstance
        /// Serialized Name: DataSourceType.SAPHanaDBInstance
        /// </summary>
        public static DataSourceType SAPHanaDBInstance { get; } = new DataSourceType(SAPHanaDBInstanceValue);
        /// <summary> Determines if two <see cref="DataSourceType"/> values are the same. </summary>
        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataSourceType"/> values are not the same. </summary>
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataSourceType"/>. </summary>
        public static implicit operator DataSourceType(string value) => new DataSourceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataSourceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
