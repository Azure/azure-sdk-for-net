// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class SqlDataDirectoryMapping : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MappingType))
            {
                writer.WritePropertyName("mappingType"u8);
                writer.WriteStringValue(MappingType.Value.ToString());
            }
            if (Optional.IsDefined(SourceLogicalName))
            {
                writer.WritePropertyName("sourceLogicalName"u8);
                writer.WriteStringValue(SourceLogicalName);
            }
            if (Optional.IsDefined(SourcePath))
            {
                writer.WritePropertyName("sourcePath"u8);
                writer.WriteStringValue(SourcePath);
            }
            if (Optional.IsDefined(TargetPath))
            {
                writer.WritePropertyName("targetPath"u8);
                writer.WriteStringValue(TargetPath);
            }
            writer.WriteEndObject();
        }

        internal static SqlDataDirectoryMapping DeserializeSqlDataDirectoryMapping(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<SqlDataDirectoryType> mappingType = default;
            Optional<string> sourceLogicalName = default;
            Optional<string> sourcePath = default;
            Optional<string> targetPath = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("mappingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mappingType = new SqlDataDirectoryType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceLogicalName"u8))
                {
                    sourceLogicalName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourcePath"u8))
                {
                    sourcePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetPath"u8))
                {
                    targetPath = property.Value.GetString();
                    continue;
                }
            }
            return new SqlDataDirectoryMapping(Optional.ToNullable(mappingType), sourceLogicalName.Value, sourcePath.Value, targetPath.Value);
        }
    }
}
