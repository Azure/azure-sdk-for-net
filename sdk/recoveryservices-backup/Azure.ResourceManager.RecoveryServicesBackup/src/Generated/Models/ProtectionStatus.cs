// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary>
    /// Specifies whether the container is registered or not
    /// Serialized Name: ProtectionStatus
    /// </summary>
    public readonly partial struct ProtectionStatus : IEquatable<ProtectionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProtectionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProtectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string NotProtectedValue = "NotProtected";
        private const string ProtectingValue = "Protecting";
        private const string ProtectedValue = "Protected";
        private const string ProtectionFailedValue = "ProtectionFailed";

        /// <summary>
        /// Invalid
        /// Serialized Name: ProtectionStatus.Invalid
        /// </summary>
        public static ProtectionStatus Invalid { get; } = new ProtectionStatus(InvalidValue);
        /// <summary>
        /// NotProtected
        /// Serialized Name: ProtectionStatus.NotProtected
        /// </summary>
        public static ProtectionStatus NotProtected { get; } = new ProtectionStatus(NotProtectedValue);
        /// <summary>
        /// Protecting
        /// Serialized Name: ProtectionStatus.Protecting
        /// </summary>
        public static ProtectionStatus Protecting { get; } = new ProtectionStatus(ProtectingValue);
        /// <summary>
        /// Protected
        /// Serialized Name: ProtectionStatus.Protected
        /// </summary>
        public static ProtectionStatus Protected { get; } = new ProtectionStatus(ProtectedValue);
        /// <summary>
        /// ProtectionFailed
        /// Serialized Name: ProtectionStatus.ProtectionFailed
        /// </summary>
        public static ProtectionStatus ProtectionFailed { get; } = new ProtectionStatus(ProtectionFailedValue);
        /// <summary> Determines if two <see cref="ProtectionStatus"/> values are the same. </summary>
        public static bool operator ==(ProtectionStatus left, ProtectionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProtectionStatus"/> values are not the same. </summary>
        public static bool operator !=(ProtectionStatus left, ProtectionStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProtectionStatus"/>. </summary>
        public static implicit operator ProtectionStatus(string value) => new ProtectionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProtectionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProtectionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
