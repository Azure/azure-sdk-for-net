// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Type of workload for the backup management. </summary>
    public readonly partial struct WorkloadType : IEquatable<WorkloadType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkloadType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string VmValue = "VM";
        private const string FileFolderValue = "FileFolder";
        private const string AzureSqlDbValue = "AzureSqlDb";
        private const string SqlDBValue = "SQLDB";
        private const string ExchangeValue = "Exchange";
        private const string SharepointValue = "Sharepoint";
        private const string VMwareVmValue = "VMwareVM";
        private const string SystemStateValue = "SystemState";
        private const string ClientValue = "Client";
        private const string GenericDataSourceValue = "GenericDataSource";
        private const string SQLDataBaseValue = "SQLDataBase";
        private const string AzureFileShareValue = "AzureFileShare";
        private const string SAPHanaDatabaseValue = "SAPHanaDatabase";
        private const string SAPAseDatabaseValue = "SAPAseDatabase";
        private const string SAPHanaDBInstanceValue = "SAPHanaDBInstance";

        /// <summary> Invalid. </summary>
        public static WorkloadType Invalid { get; } = new WorkloadType(InvalidValue);
        /// <summary> VM. </summary>
        public static WorkloadType Vm { get; } = new WorkloadType(VmValue);
        /// <summary> FileFolder. </summary>
        public static WorkloadType FileFolder { get; } = new WorkloadType(FileFolderValue);
        /// <summary> AzureSqlDb. </summary>
        public static WorkloadType AzureSqlDb { get; } = new WorkloadType(AzureSqlDbValue);
        /// <summary> SQLDB. </summary>
        public static WorkloadType SqlDB { get; } = new WorkloadType(SqlDBValue);
        /// <summary> Exchange. </summary>
        public static WorkloadType Exchange { get; } = new WorkloadType(ExchangeValue);
        /// <summary> Sharepoint. </summary>
        public static WorkloadType Sharepoint { get; } = new WorkloadType(SharepointValue);
        /// <summary> VMwareVM. </summary>
        public static WorkloadType VMwareVm { get; } = new WorkloadType(VMwareVmValue);
        /// <summary> SystemState. </summary>
        public static WorkloadType SystemState { get; } = new WorkloadType(SystemStateValue);
        /// <summary> Client. </summary>
        public static WorkloadType Client { get; } = new WorkloadType(ClientValue);
        /// <summary> GenericDataSource. </summary>
        public static WorkloadType GenericDataSource { get; } = new WorkloadType(GenericDataSourceValue);
        /// <summary> SQLDataBase. </summary>
        public static WorkloadType SQLDataBase { get; } = new WorkloadType(SQLDataBaseValue);
        /// <summary> AzureFileShare. </summary>
        public static WorkloadType AzureFileShare { get; } = new WorkloadType(AzureFileShareValue);
        /// <summary> SAPHanaDatabase. </summary>
        public static WorkloadType SAPHanaDatabase { get; } = new WorkloadType(SAPHanaDatabaseValue);
        /// <summary> SAPAseDatabase. </summary>
        public static WorkloadType SAPAseDatabase { get; } = new WorkloadType(SAPAseDatabaseValue);
        /// <summary> SAPHanaDBInstance. </summary>
        public static WorkloadType SAPHanaDBInstance { get; } = new WorkloadType(SAPHanaDBInstanceValue);
        /// <summary> Determines if two <see cref="WorkloadType"/> values are the same. </summary>
        public static bool operator ==(WorkloadType left, WorkloadType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkloadType"/> values are not the same. </summary>
        public static bool operator !=(WorkloadType left, WorkloadType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkloadType"/>. </summary>
        public static implicit operator WorkloadType(string value) => new WorkloadType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkloadType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkloadType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
