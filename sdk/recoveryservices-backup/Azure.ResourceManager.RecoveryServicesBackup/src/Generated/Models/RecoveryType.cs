// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Type of this recovery. </summary>
    public readonly partial struct RecoveryType : IEquatable<RecoveryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecoveryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecoveryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string OriginalLocationValue = "OriginalLocation";
        private const string AlternateLocationValue = "AlternateLocation";
        private const string RestoreDisksValue = "RestoreDisks";
        private const string OfflineValue = "Offline";

        /// <summary> Invalid. </summary>
        public static RecoveryType Invalid { get; } = new RecoveryType(InvalidValue);
        /// <summary> OriginalLocation. </summary>
        public static RecoveryType OriginalLocation { get; } = new RecoveryType(OriginalLocationValue);
        /// <summary> AlternateLocation. </summary>
        public static RecoveryType AlternateLocation { get; } = new RecoveryType(AlternateLocationValue);
        /// <summary> RestoreDisks. </summary>
        public static RecoveryType RestoreDisks { get; } = new RecoveryType(RestoreDisksValue);
        /// <summary> Offline. </summary>
        public static RecoveryType Offline { get; } = new RecoveryType(OfflineValue);
        /// <summary> Determines if two <see cref="RecoveryType"/> values are the same. </summary>
        public static bool operator ==(RecoveryType left, RecoveryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecoveryType"/> values are not the same. </summary>
        public static bool operator !=(RecoveryType left, RecoveryType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RecoveryType"/>. </summary>
        public static implicit operator RecoveryType(string value) => new RecoveryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecoveryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecoveryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
