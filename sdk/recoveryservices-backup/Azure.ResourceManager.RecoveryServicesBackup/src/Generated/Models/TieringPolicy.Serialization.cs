// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class TieringPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TieringMode))
            {
                writer.WritePropertyName("tieringMode");
                writer.WriteStringValue(TieringMode.Value.ToString());
            }
            if (Optional.IsDefined(DurationValue))
            {
                writer.WritePropertyName("duration");
                writer.WriteNumberValue(DurationValue.Value);
            }
            if (Optional.IsDefined(DurationType))
            {
                writer.WritePropertyName("durationType");
                writer.WriteStringValue(DurationType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static TieringPolicy DeserializeTieringPolicy(JsonElement element)
        {
            Optional<TieringMode> tieringMode = default;
            Optional<int> duration = default;
            Optional<RetentionDurationType> durationType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tieringMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tieringMode = new TieringMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("duration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    duration = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("durationType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    durationType = new RetentionDurationType(property.Value.GetString());
                    continue;
                }
            }
            return new TieringPolicy(Optional.ToNullable(tieringMode), Optional.ToNullable(duration), Optional.ToNullable(durationType));
        }
    }
}
