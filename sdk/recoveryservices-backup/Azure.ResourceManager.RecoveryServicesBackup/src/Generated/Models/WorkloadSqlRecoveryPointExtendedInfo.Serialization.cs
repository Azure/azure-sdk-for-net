// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class WorkloadSqlRecoveryPointExtendedInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(DataDirectoryInfoCapturedOn))
            {
                writer.WritePropertyName("dataDirectoryTimeInUTC"u8);
                writer.WriteStringValue(DataDirectoryInfoCapturedOn.Value, "O");
            }
            if (Core.Optional.IsCollectionDefined(DataDirectoryPaths))
            {
                writer.WritePropertyName("dataDirectoryPaths"u8);
                writer.WriteStartArray();
                foreach (var item in DataDirectoryPaths)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static WorkloadSqlRecoveryPointExtendedInfo DeserializeWorkloadSqlRecoveryPointExtendedInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<DateTimeOffset> dataDirectoryTimeInUTC = default;
            Core.Optional<IList<SqlDataDirectory>> dataDirectoryPaths = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dataDirectoryTimeInUTC"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataDirectoryTimeInUTC = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("dataDirectoryPaths"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SqlDataDirectory> array = new List<SqlDataDirectory>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlDataDirectory.DeserializeSqlDataDirectory(item));
                    }
                    dataDirectoryPaths = array;
                    continue;
                }
            }
            return new WorkloadSqlRecoveryPointExtendedInfo(Core.Optional.ToNullable(dataDirectoryTimeInUTC), Core.Optional.ToList(dataDirectoryPaths));
        }
    }
}
