// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    internal static partial class ProtectableContainerTypeExtensions
    {
        public static string ToSerialString(this ProtectableContainerType value) => value switch
        {
            ProtectableContainerType.Unknown => "Unknown",
            ProtectableContainerType.Invalid => "Invalid",
            ProtectableContainerType.IaasVmContainer => "IaasVMContainer",
            ProtectableContainerType.IaasVmServiceContainer => "IaasVMServiceContainer",
            ProtectableContainerType.DpmContainer => "DPMContainer",
            ProtectableContainerType.AzureBackupServerContainer => "AzureBackupServerContainer",
            ProtectableContainerType.MabContainer => "MABContainer",
            ProtectableContainerType.Cluster => "Cluster",
            ProtectableContainerType.AzureSqlContainer => "AzureSqlContainer",
            ProtectableContainerType.Windows => "Windows",
            ProtectableContainerType.VCenter => "VCenter",
            ProtectableContainerType.VmAppContainer => "VMAppContainer",
            ProtectableContainerType.SqlAGWorkLoadContainer => "SQLAGWorkLoadContainer",
            ProtectableContainerType.StorageContainer => "StorageContainer",
            ProtectableContainerType.GenericContainer => "GenericContainer",
            ProtectableContainerType.MicrosoftClassicComputeVirtualMachines => "Microsoft.ClassicCompute/virtualMachines",
            ProtectableContainerType.MicrosoftComputeVirtualMachines => "Microsoft.Compute/virtualMachines",
            ProtectableContainerType.AzureWorkloadContainer => "AzureWorkloadContainer",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ProtectableContainerType value.")
        };

        public static ProtectableContainerType ToProtectableContainerType(this string value)
        {
            if (string.Equals(value, "Unknown", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.Unknown;
            if (string.Equals(value, "Invalid", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.Invalid;
            if (string.Equals(value, "IaasVMContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.IaasVmContainer;
            if (string.Equals(value, "IaasVMServiceContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.IaasVmServiceContainer;
            if (string.Equals(value, "DPMContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.DpmContainer;
            if (string.Equals(value, "AzureBackupServerContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.AzureBackupServerContainer;
            if (string.Equals(value, "MABContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.MabContainer;
            if (string.Equals(value, "Cluster", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.Cluster;
            if (string.Equals(value, "AzureSqlContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.AzureSqlContainer;
            if (string.Equals(value, "Windows", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.Windows;
            if (string.Equals(value, "VCenter", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.VCenter;
            if (string.Equals(value, "VMAppContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.VmAppContainer;
            if (string.Equals(value, "SQLAGWorkLoadContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.SqlAGWorkLoadContainer;
            if (string.Equals(value, "StorageContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.StorageContainer;
            if (string.Equals(value, "GenericContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.GenericContainer;
            if (string.Equals(value, "Microsoft.ClassicCompute/virtualMachines", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.MicrosoftClassicComputeVirtualMachines;
            if (string.Equals(value, "Microsoft.Compute/virtualMachines", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.MicrosoftComputeVirtualMachines;
            if (string.Equals(value, "AzureWorkloadContainer", StringComparison.InvariantCultureIgnoreCase)) return ProtectableContainerType.AzureWorkloadContainer;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ProtectableContainerType value.");
        }
    }
}
