// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Backup resource vault config details. </summary>
    public partial class BackupResourceVaultConfigProperties
    {
        /// <summary> Initializes a new instance of <see cref="BackupResourceVaultConfigProperties"/>. </summary>
        public BackupResourceVaultConfigProperties()
        {
            ResourceGuardOperationRequests = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="BackupResourceVaultConfigProperties"/>. </summary>
        /// <param name="storageModelType"> Storage type. </param>
        /// <param name="storageType"> Storage type. </param>
        /// <param name="storageTypeState"> Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked. </param>
        /// <param name="enhancedSecurityState"> Enabled or Disabled. </param>
        /// <param name="softDeleteFeatureState"> Soft Delete feature state. </param>
        /// <param name="softDeleteRetentionPeriodInDays"> Soft delete retention period in days. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="isSoftDeleteFeatureStateEditable"> This flag is no longer in use. Please use 'softDeleteFeatureState' to set the soft delete state for the vault. </param>
        internal BackupResourceVaultConfigProperties(BackupStorageType? storageModelType, BackupStorageType? storageType, BackupStorageTypeState? storageTypeState, EnhancedSecurityState? enhancedSecurityState, SoftDeleteFeatureState? softDeleteFeatureState, int? softDeleteRetentionPeriodInDays, IList<string> resourceGuardOperationRequests, bool? isSoftDeleteFeatureStateEditable)
        {
            StorageModelType = storageModelType;
            StorageType = storageType;
            StorageTypeState = storageTypeState;
            EnhancedSecurityState = enhancedSecurityState;
            SoftDeleteFeatureState = softDeleteFeatureState;
            SoftDeleteRetentionPeriodInDays = softDeleteRetentionPeriodInDays;
            ResourceGuardOperationRequests = resourceGuardOperationRequests;
            IsSoftDeleteFeatureStateEditable = isSoftDeleteFeatureStateEditable;
        }

        /// <summary> Storage type. </summary>
        public BackupStorageType? StorageModelType { get; set; }
        /// <summary> Storage type. </summary>
        public BackupStorageType? StorageType { get; set; }
        /// <summary> Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked. </summary>
        public BackupStorageTypeState? StorageTypeState { get; set; }
        /// <summary> Enabled or Disabled. </summary>
        public EnhancedSecurityState? EnhancedSecurityState { get; set; }
        /// <summary> Soft Delete feature state. </summary>
        public SoftDeleteFeatureState? SoftDeleteFeatureState { get; set; }
        /// <summary> Soft delete retention period in days. </summary>
        public int? SoftDeleteRetentionPeriodInDays { get; set; }
        /// <summary> ResourceGuard Operation Requests. </summary>
        public IList<string> ResourceGuardOperationRequests { get; }
        /// <summary> This flag is no longer in use. Please use 'softDeleteFeatureState' to set the soft delete state for the vault. </summary>
        public bool? IsSoftDeleteFeatureStateEditable { get; set; }
    }
}
