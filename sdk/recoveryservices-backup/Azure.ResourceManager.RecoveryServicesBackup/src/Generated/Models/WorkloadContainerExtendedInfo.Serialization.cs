// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class WorkloadContainerExtendedInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(HostServerName))
            {
                writer.WritePropertyName("hostServerName"u8);
                writer.WriteStringValue(HostServerName);
            }
            if (Core.Optional.IsDefined(InquiryInfo))
            {
                writer.WritePropertyName("inquiryInfo"u8);
                writer.WriteObjectValue(InquiryInfo);
            }
            if (Core.Optional.IsCollectionDefined(NodesList))
            {
                writer.WritePropertyName("nodesList"u8);
                writer.WriteStartArray();
                foreach (var item in NodesList)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static WorkloadContainerExtendedInfo DeserializeWorkloadContainerExtendedInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> hostServerName = default;
            Core.Optional<WorkloadContainerInquiryInfo> inquiryInfo = default;
            Core.Optional<IList<DistributedNodesInfo>> nodesList = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostServerName"u8))
                {
                    hostServerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inquiryInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inquiryInfo = WorkloadContainerInquiryInfo.DeserializeWorkloadContainerInquiryInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("nodesList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DistributedNodesInfo> array = new List<DistributedNodesInfo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DistributedNodesInfo.DeserializeDistributedNodesInfo(item));
                    }
                    nodesList = array;
                    continue;
                }
            }
            return new WorkloadContainerExtendedInfo(hostServerName.Value, inquiryInfo.Value, Core.Optional.ToList(nodesList));
        }
    }
}
