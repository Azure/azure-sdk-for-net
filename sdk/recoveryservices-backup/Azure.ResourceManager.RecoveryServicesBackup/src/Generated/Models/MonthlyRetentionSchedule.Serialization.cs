// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class MonthlyRetentionSchedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(RetentionScheduleFormatType))
            {
                writer.WritePropertyName("retentionScheduleFormatType");
                writer.WriteStringValue(RetentionScheduleFormatType.Value.ToString());
            }
            if (Optional.IsDefined(RetentionScheduleDaily))
            {
                writer.WritePropertyName("retentionScheduleDaily");
                writer.WriteObjectValue(RetentionScheduleDaily);
            }
            if (Optional.IsDefined(RetentionScheduleWeekly))
            {
                writer.WritePropertyName("retentionScheduleWeekly");
                writer.WriteObjectValue(RetentionScheduleWeekly);
            }
            if (Optional.IsCollectionDefined(RetentionTimes))
            {
                writer.WritePropertyName("retentionTimes");
                writer.WriteStartArray();
                foreach (var item in RetentionTimes)
                {
                    writer.WriteStringValue(item, "O");
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RetentionDuration))
            {
                writer.WritePropertyName("retentionDuration");
                writer.WriteObjectValue(RetentionDuration);
            }
            writer.WriteEndObject();
        }

        internal static MonthlyRetentionSchedule DeserializeMonthlyRetentionSchedule(JsonElement element)
        {
            Optional<RetentionScheduleFormat> retentionScheduleFormatType = default;
            Optional<DailyRetentionFormat> retentionScheduleDaily = default;
            Optional<WeeklyRetentionFormat> retentionScheduleWeekly = default;
            Optional<IList<DateTimeOffset>> retentionTimes = default;
            Optional<RetentionDuration> retentionDuration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("retentionScheduleFormatType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retentionScheduleFormatType = new RetentionScheduleFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("retentionScheduleDaily"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retentionScheduleDaily = DailyRetentionFormat.DeserializeDailyRetentionFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("retentionScheduleWeekly"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retentionScheduleWeekly = WeeklyRetentionFormat.DeserializeWeeklyRetentionFormat(property.Value);
                    continue;
                }
                if (property.NameEquals("retentionTimes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DateTimeOffset> array = new List<DateTimeOffset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDateTimeOffset("O"));
                    }
                    retentionTimes = array;
                    continue;
                }
                if (property.NameEquals("retentionDuration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retentionDuration = RetentionDuration.DeserializeRetentionDuration(property.Value);
                    continue;
                }
            }
            return new MonthlyRetentionSchedule(Optional.ToNullable(retentionScheduleFormatType), retentionScheduleDaily.Value, retentionScheduleWeekly.Value, Optional.ToList(retentionTimes), retentionDuration.Value);
        }
    }
}
