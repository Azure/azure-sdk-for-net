// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class KeyAndSecretDetails : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(KekDetails))
            {
                writer.WritePropertyName("kekDetails"u8);
                writer.WriteObjectValue(KekDetails);
            }
            if (Optional.IsDefined(BekDetails))
            {
                writer.WritePropertyName("bekDetails"u8);
                writer.WriteObjectValue(BekDetails);
            }
            if (Optional.IsDefined(EncryptionMechanism))
            {
                writer.WritePropertyName("encryptionMechanism"u8);
                writer.WriteStringValue(EncryptionMechanism);
            }
            writer.WriteEndObject();
        }

        internal static KeyAndSecretDetails DeserializeKeyAndSecretDetails(JsonElement element)
        {
            Optional<KEKDetails> kekDetails = default;
            Optional<BEKDetails> bekDetails = default;
            Optional<string> encryptionMechanism = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kekDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    kekDetails = KEKDetails.DeserializeKEKDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("bekDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    bekDetails = BEKDetails.DeserializeBEKDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("encryptionMechanism"u8))
                {
                    encryptionMechanism = property.Value.GetString();
                    continue;
                }
            }
            return new KeyAndSecretDetails(kekDetails.Value, bekDetails.Value, encryptionMechanism.Value);
        }
    }
}
