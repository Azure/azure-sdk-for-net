// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary>
    /// Type of workload for the backup management
    /// Serialized Name: WorkloadType
    /// </summary>
    public readonly partial struct BackupWorkloadType : IEquatable<BackupWorkloadType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BackupWorkloadType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BackupWorkloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string VmValue = "VM";
        private const string FileFolderValue = "FileFolder";
        private const string AzureSqlDbValue = "AzureSqlDb";
        private const string SqlDBValue = "SQLDB";
        private const string ExchangeValue = "Exchange";
        private const string SharepointValue = "Sharepoint";
        private const string VMwareVmValue = "VMwareVM";
        private const string SystemStateValue = "SystemState";
        private const string ClientValue = "Client";
        private const string GenericDataSourceValue = "GenericDataSource";
        private const string SqlDataBaseValue = "SQLDataBase";
        private const string AzureFileShareValue = "AzureFileShare";
        private const string SapHanaDatabaseValue = "SAPHanaDatabase";
        private const string SapAseDatabaseValue = "SAPAseDatabase";
        private const string SapHanaDBInstanceValue = "SAPHanaDBInstance";

        /// <summary>
        /// Invalid
        /// Serialized Name: WorkloadType.Invalid
        /// </summary>
        public static BackupWorkloadType Invalid { get; } = new BackupWorkloadType(InvalidValue);
        /// <summary>
        /// VM
        /// Serialized Name: WorkloadType.VM
        /// </summary>
        public static BackupWorkloadType Vm { get; } = new BackupWorkloadType(VmValue);
        /// <summary>
        /// FileFolder
        /// Serialized Name: WorkloadType.FileFolder
        /// </summary>
        public static BackupWorkloadType FileFolder { get; } = new BackupWorkloadType(FileFolderValue);
        /// <summary>
        /// AzureSqlDb
        /// Serialized Name: WorkloadType.AzureSqlDb
        /// </summary>
        public static BackupWorkloadType AzureSqlDb { get; } = new BackupWorkloadType(AzureSqlDbValue);
        /// <summary>
        /// SQLDB
        /// Serialized Name: WorkloadType.SQLDB
        /// </summary>
        public static BackupWorkloadType SqlDB { get; } = new BackupWorkloadType(SqlDBValue);
        /// <summary>
        /// Exchange
        /// Serialized Name: WorkloadType.Exchange
        /// </summary>
        public static BackupWorkloadType Exchange { get; } = new BackupWorkloadType(ExchangeValue);
        /// <summary>
        /// Sharepoint
        /// Serialized Name: WorkloadType.Sharepoint
        /// </summary>
        public static BackupWorkloadType Sharepoint { get; } = new BackupWorkloadType(SharepointValue);
        /// <summary>
        /// VMwareVM
        /// Serialized Name: WorkloadType.VMwareVM
        /// </summary>
        public static BackupWorkloadType VMwareVm { get; } = new BackupWorkloadType(VMwareVmValue);
        /// <summary>
        /// SystemState
        /// Serialized Name: WorkloadType.SystemState
        /// </summary>
        public static BackupWorkloadType SystemState { get; } = new BackupWorkloadType(SystemStateValue);
        /// <summary>
        /// Client
        /// Serialized Name: WorkloadType.Client
        /// </summary>
        public static BackupWorkloadType Client { get; } = new BackupWorkloadType(ClientValue);
        /// <summary>
        /// GenericDataSource
        /// Serialized Name: WorkloadType.GenericDataSource
        /// </summary>
        public static BackupWorkloadType GenericDataSource { get; } = new BackupWorkloadType(GenericDataSourceValue);
        /// <summary>
        /// SQLDataBase
        /// Serialized Name: WorkloadType.SQLDataBase
        /// </summary>
        public static BackupWorkloadType SqlDataBase { get; } = new BackupWorkloadType(SqlDataBaseValue);
        /// <summary>
        /// AzureFileShare
        /// Serialized Name: WorkloadType.AzureFileShare
        /// </summary>
        public static BackupWorkloadType AzureFileShare { get; } = new BackupWorkloadType(AzureFileShareValue);
        /// <summary>
        /// SAPHanaDatabase
        /// Serialized Name: WorkloadType.SAPHanaDatabase
        /// </summary>
        public static BackupWorkloadType SapHanaDatabase { get; } = new BackupWorkloadType(SapHanaDatabaseValue);
        /// <summary>
        /// SAPAseDatabase
        /// Serialized Name: WorkloadType.SAPAseDatabase
        /// </summary>
        public static BackupWorkloadType SapAseDatabase { get; } = new BackupWorkloadType(SapAseDatabaseValue);
        /// <summary>
        /// SAPHanaDBInstance
        /// Serialized Name: WorkloadType.SAPHanaDBInstance
        /// </summary>
        public static BackupWorkloadType SapHanaDBInstance { get; } = new BackupWorkloadType(SapHanaDBInstanceValue);
        /// <summary> Determines if two <see cref="BackupWorkloadType"/> values are the same. </summary>
        public static bool operator ==(BackupWorkloadType left, BackupWorkloadType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BackupWorkloadType"/> values are not the same. </summary>
        public static bool operator !=(BackupWorkloadType left, BackupWorkloadType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="BackupWorkloadType"/>. </summary>
        public static implicit operator BackupWorkloadType(string value) => new BackupWorkloadType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BackupWorkloadType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BackupWorkloadType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
