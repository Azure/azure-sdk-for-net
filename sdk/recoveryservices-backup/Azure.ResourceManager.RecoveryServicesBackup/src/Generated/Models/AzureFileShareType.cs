// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> File Share type XSync or XSMB. </summary>
    public readonly partial struct AzureFileShareType : IEquatable<AzureFileShareType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureFileShareType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureFileShareType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string XsmbValue = "XSMB";
        private const string XSyncValue = "XSync";

        /// <summary> Invalid. </summary>
        public static AzureFileShareType Invalid { get; } = new AzureFileShareType(InvalidValue);
        /// <summary> XSMB. </summary>
        public static AzureFileShareType Xsmb { get; } = new AzureFileShareType(XsmbValue);
        /// <summary> XSync. </summary>
        public static AzureFileShareType XSync { get; } = new AzureFileShareType(XSyncValue);
        /// <summary> Determines if two <see cref="AzureFileShareType"/> values are the same. </summary>
        public static bool operator ==(AzureFileShareType left, AzureFileShareType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureFileShareType"/> values are not the same. </summary>
        public static bool operator !=(AzureFileShareType left, AzureFileShareType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AzureFileShareType"/>. </summary>
        public static implicit operator AzureFileShareType(string value) => new AzureFileShareType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureFileShareType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureFileShareType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
