// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    public partial class LongTermRetentionPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DailySchedule))
            {
                writer.WritePropertyName("dailySchedule");
                writer.WriteObjectValue(DailySchedule);
            }
            if (Optional.IsDefined(WeeklySchedule))
            {
                writer.WritePropertyName("weeklySchedule");
                writer.WriteObjectValue(WeeklySchedule);
            }
            if (Optional.IsDefined(MonthlySchedule))
            {
                writer.WritePropertyName("monthlySchedule");
                writer.WriteObjectValue(MonthlySchedule);
            }
            if (Optional.IsDefined(YearlySchedule))
            {
                writer.WritePropertyName("yearlySchedule");
                writer.WriteObjectValue(YearlySchedule);
            }
            writer.WritePropertyName("retentionPolicyType");
            writer.WriteStringValue(RetentionPolicyType);
            writer.WriteEndObject();
        }

        internal static LongTermRetentionPolicy DeserializeLongTermRetentionPolicy(JsonElement element)
        {
            Optional<DailyRetentionSchedule> dailySchedule = default;
            Optional<WeeklyRetentionSchedule> weeklySchedule = default;
            Optional<MonthlyRetentionSchedule> monthlySchedule = default;
            Optional<YearlyRetentionSchedule> yearlySchedule = default;
            string retentionPolicyType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dailySchedule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dailySchedule = DailyRetentionSchedule.DeserializeDailyRetentionSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("weeklySchedule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    weeklySchedule = WeeklyRetentionSchedule.DeserializeWeeklyRetentionSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("monthlySchedule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    monthlySchedule = MonthlyRetentionSchedule.DeserializeMonthlyRetentionSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("yearlySchedule"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    yearlySchedule = YearlyRetentionSchedule.DeserializeYearlyRetentionSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("retentionPolicyType"))
                {
                    retentionPolicyType = property.Value.GetString();
                    continue;
                }
            }
            return new LongTermRetentionPolicy(retentionPolicyType, dailySchedule.Value, weeklySchedule.Value, monthlySchedule.Value, yearlySchedule.Value);
        }
    }
}
