// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RecoveryServicesBackup;

namespace Azure.ResourceManager.RecoveryServicesBackup.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class RecoveryServicesBackupModelFactory
    {
        /// <summary> Initializes a new instance of BackupResourceConfigResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceConfigResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupResourceConfigResourceData"/> instance for mocking. </returns>
        public static BackupResourceConfigResourceData BackupResourceConfigResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceConfig properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceConfigResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupResourceConfig. </summary>
        /// <param name="storageModelType"> Storage type. </param>
        /// <param name="storageType"> Storage type. </param>
        /// <param name="storageTypeState"> Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked. </param>
        /// <param name="crossRegionRestoreFlag"> Opt in details of Cross Region Restore feature. </param>
        /// <param name="dedupState"> Vault Dedup state. </param>
        /// <param name="xcoolState"> Vault x-cool state. </param>
        /// <returns> A new <see cref="Models.BackupResourceConfig"/> instance for mocking. </returns>
        public static BackupResourceConfig BackupResourceConfig(StorageType? storageModelType = null, StorageType? storageType = null, StorageTypeState? storageTypeState = null, bool? crossRegionRestoreFlag = null, DedupState? dedupState = null, XcoolState? xcoolState = null)
        {
            return new BackupResourceConfig(storageModelType, storageType, storageTypeState, crossRegionRestoreFlag, dedupState, xcoolState);
        }

        /// <summary> Initializes a new instance of PreValidateEnableBackupResponse. </summary>
        /// <param name="status"> Validation Status. </param>
        /// <param name="errorCode"> Response error code. </param>
        /// <param name="errorMessage"> Response error message. </param>
        /// <param name="recommendation"> Recommended action for user. </param>
        /// <param name="containerName">
        /// Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;rgname;vmname. This is required
        /// for portal
        /// </param>
        /// <param name="protectedItemName"> Specifies the product specific ds name. E.g. vm;iaasvmcontainer;rgname;vmname. This is required for portal. </param>
        /// <returns> A new <see cref="Models.PreValidateEnableBackupResponse"/> instance for mocking. </returns>
        public static PreValidateEnableBackupResponse PreValidateEnableBackupResponse(ValidationStatus? status = null, string errorCode = null, string errorMessage = null, string recommendation = null, string containerName = null, string protectedItemName = null)
        {
            return new PreValidateEnableBackupResponse(status, errorCode, errorMessage, recommendation, containerName, protectedItemName);
        }

        /// <summary> Initializes a new instance of BackupStatusResponse. </summary>
        /// <param name="protectionStatus"> Specifies whether the container is registered or not. </param>
        /// <param name="vaultId"> Specifies the arm resource id of the vault. </param>
        /// <param name="fabricName"> Specifies the fabric name - Azure or AD. </param>
        /// <param name="containerName"> Specifies the product specific container name. E.g. iaasvmcontainer;iaasvmcontainer;csname;vmname. </param>
        /// <param name="protectedItemName"> Specifies the product specific ds name. E.g. vm;iaasvmcontainer;csname;vmname. </param>
        /// <param name="errorCode"> ErrorCode in case of intent failed. </param>
        /// <param name="errorMessage"> ErrorMessage in case of intent failed. </param>
        /// <param name="policyName"> Specifies the policy name which is used for protection. </param>
        /// <param name="registrationStatus"> Container registration status. </param>
        /// <returns> A new <see cref="Models.BackupStatusResponse"/> instance for mocking. </returns>
        public static BackupStatusResponse BackupStatusResponse(ProtectionStatus? protectionStatus = null, string vaultId = null, FabricName? fabricName = null, string containerName = null, string protectedItemName = null, string errorCode = null, string errorMessage = null, string policyName = null, string registrationStatus = null)
        {
            return new BackupStatusResponse(protectionStatus, vaultId, fabricName, containerName, protectedItemName, errorCode, errorMessage, policyName, registrationStatus);
        }

        /// <summary> Initializes a new instance of AzureVmResourceFeatureSupportResponse. </summary>
        /// <param name="supportStatus"> Support status of feature. </param>
        /// <returns> A new <see cref="Models.AzureVmResourceFeatureSupportResponse"/> instance for mocking. </returns>
        public static AzureVmResourceFeatureSupportResponse AzureVmResourceFeatureSupportResponse(SupportStatus? supportStatus = null)
        {
            return new AzureVmResourceFeatureSupportResponse(supportStatus);
        }

        /// <summary> Initializes a new instance of ProtectionIntentResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectionIntentResource properties
        /// Please note <see cref="ProtectionIntent"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceProtectionIntent"/>, <see cref="AzureWorkloadAutoProtectionIntent"/>, <see cref="AzureWorkloadContainerAutoProtectionIntent"/>, <see cref="AzureWorkloadSQLAutoProtectionIntent"/> and <see cref="AzureRecoveryServiceVaultProtectionIntent"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectionIntentResourceData"/> instance for mocking. </returns>
        public static ProtectionIntentResourceData ProtectionIntentResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectionIntent properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectionIntentResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectionIntent. </summary>
        /// <param name="protectionIntentItemType"> backup protectionIntent type. </param>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="itemId"> ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <returns> A new <see cref="Models.ProtectionIntent"/> instance for mocking. </returns>
        public static ProtectionIntent ProtectionIntent(string protectionIntentItemType = "Unknown", BackupManagementType? backupManagementType = null, string sourceResourceId = null, string itemId = null, string policyId = null, ProtectionStatus? protectionState = null)
        {
            return new UnknownProtectionIntent(protectionIntentItemType, backupManagementType, sourceResourceId, itemId, policyId, protectionState);
        }

        /// <summary> Initializes a new instance of BackupManagementUsage. </summary>
        /// <param name="unit"> Unit of the usage. </param>
        /// <param name="quotaPeriod"> Quota period of usage. </param>
        /// <param name="nextResetOn"> Next reset time of usage. </param>
        /// <param name="currentValue"> Current value of usage. </param>
        /// <param name="limit"> Limit of usage. </param>
        /// <param name="name"> Name of usage. </param>
        /// <returns> A new <see cref="Models.BackupManagementUsage"/> instance for mocking. </returns>
        public static BackupManagementUsage BackupManagementUsage(UsagesUnit? unit = null, string quotaPeriod = null, DateTimeOffset? nextResetOn = null, long? currentValue = null, long? limit = null, NameInfo name = null)
        {
            return new BackupManagementUsage(unit, quotaPeriod, nextResetOn, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of NameInfo. </summary>
        /// <param name="value"> Value of usage. </param>
        /// <param name="localizedValue"> Localized value of usage. </param>
        /// <returns> A new <see cref="Models.NameInfo"/> instance for mocking. </returns>
        public static NameInfo NameInfo(string value = null, string localizedValue = null)
        {
            return new NameInfo(value, localizedValue);
        }

        /// <summary> Initializes a new instance of BackupResourceVaultConfigResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceVaultConfigResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupResourceVaultConfigResourceData"/> instance for mocking. </returns>
        public static BackupResourceVaultConfigResourceData BackupResourceVaultConfigResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceVaultConfig properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceVaultConfigResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupResourceVaultConfig. </summary>
        /// <param name="storageModelType"> Storage type. </param>
        /// <param name="storageType"> Storage type. </param>
        /// <param name="storageTypeState"> Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked. </param>
        /// <param name="enhancedSecurityState"> Enabled or Disabled. </param>
        /// <param name="softDeleteFeatureState"> Soft Delete feature state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="isSoftDeleteFeatureStateEditable"> Is soft delete feature state editable. </param>
        /// <returns> A new <see cref="Models.BackupResourceVaultConfig"/> instance for mocking. </returns>
        public static BackupResourceVaultConfig BackupResourceVaultConfig(StorageType? storageModelType = null, StorageType? storageType = null, StorageTypeState? storageTypeState = null, EnhancedSecurityState? enhancedSecurityState = null, SoftDeleteFeatureState? softDeleteFeatureState = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isSoftDeleteFeatureStateEditable = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new BackupResourceVaultConfig(storageModelType, storageType, storageTypeState, enhancedSecurityState, softDeleteFeatureState, resourceGuardOperationRequests?.ToList(), isSoftDeleteFeatureStateEditable);
        }

        /// <summary> Initializes a new instance of BackupResourceEncryptionConfigExtendedResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceEncryptionConfigExtendedResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupResourceEncryptionConfigExtendedResourceData"/> instance for mocking. </returns>
        public static BackupResourceEncryptionConfigExtendedResourceData BackupResourceEncryptionConfigExtendedResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceEncryptionConfigExtended properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceEncryptionConfigExtendedResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupResourceEncryptionConfigExtended. </summary>
        /// <param name="encryptionAtRestType"> Encryption At Rest Type. </param>
        /// <param name="keyUri"> Key Vault Key URI. </param>
        /// <param name="subscriptionId"> Key Vault Subscription Id. </param>
        /// <param name="lastUpdateStatus"></param>
        /// <param name="infrastructureEncryptionState"></param>
        /// <param name="userAssignedIdentity"> User Assigned Identity Id. </param>
        /// <param name="useSystemAssignedIdentity"> bool to indicate whether to use system Assigned Identity or not. </param>
        /// <returns> A new <see cref="Models.BackupResourceEncryptionConfigExtended"/> instance for mocking. </returns>
        public static BackupResourceEncryptionConfigExtended BackupResourceEncryptionConfigExtended(EncryptionAtRestType? encryptionAtRestType = null, Uri keyUri = null, string subscriptionId = null, LastUpdateStatus? lastUpdateStatus = null, InfrastructureEncryptionState? infrastructureEncryptionState = null, string userAssignedIdentity = null, bool? useSystemAssignedIdentity = null)
        {
            return new BackupResourceEncryptionConfigExtended(encryptionAtRestType, keyUri, subscriptionId, lastUpdateStatus, infrastructureEncryptionState, userAssignedIdentity, useSystemAssignedIdentity);
        }

        /// <summary> Initializes a new instance of BackupResourceEncryptionConfig. </summary>
        /// <param name="encryptionAtRestType"> Encryption At Rest Type. </param>
        /// <param name="keyUri"> Key Vault Key URI. </param>
        /// <param name="subscriptionId"> Key Vault Subscription Id. </param>
        /// <param name="lastUpdateStatus"></param>
        /// <param name="infrastructureEncryptionState"></param>
        /// <returns> A new <see cref="Models.BackupResourceEncryptionConfig"/> instance for mocking. </returns>
        public static BackupResourceEncryptionConfig BackupResourceEncryptionConfig(EncryptionAtRestType? encryptionAtRestType = null, Uri keyUri = null, string subscriptionId = null, LastUpdateStatus? lastUpdateStatus = null, InfrastructureEncryptionState? infrastructureEncryptionState = null)
        {
            return new BackupResourceEncryptionConfig(encryptionAtRestType, keyUri, subscriptionId, lastUpdateStatus, infrastructureEncryptionState);
        }

        /// <summary> Initializes a new instance of BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupResourceEncryptionConfigResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent"/> instance for mocking. </returns>
        public static BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupResourceEncryptionConfig properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupResourceEncryptionConfigExtendedResourceCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> PrivateEndpointConnectionResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.PrivateEndpointConnectionResourceData"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionResourceData PrivateEndpointConnectionResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RecoveryServicesBackupPrivateEndpointConnection properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PrivateEndpointConnectionResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of RecoveryServicesBackupPrivateEndpointConnection. </summary>
        /// <param name="provisioningState"> Gets or sets provisioning state of the private endpoint connection. </param>
        /// <param name="privateEndpointId"> Gets or sets private endpoint associated with the private endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> Gets or sets private link service connection state. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesBackupPrivateEndpointConnection"/> instance for mocking. </returns>
        public static RecoveryServicesBackupPrivateEndpointConnection RecoveryServicesBackupPrivateEndpointConnection(ProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, RecoveryServicesBackupPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null)
        {
            return new RecoveryServicesBackupPrivateEndpointConnection(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.WritableSubResource(privateEndpointId) : null, privateLinkServiceConnectionState);
        }

        /// <summary> Initializes a new instance of RecoveryServicesBackupPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Gets or sets the status. </param>
        /// <param name="description"> Gets or sets description. </param>
        /// <param name="actionRequired"> Gets or sets actions required. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesBackupPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static RecoveryServicesBackupPrivateLinkServiceConnectionState RecoveryServicesBackupPrivateLinkServiceConnectionState(PrivateEndpointConnectionStatus? status = null, string description = null, string actionRequired = null)
        {
            return new RecoveryServicesBackupPrivateLinkServiceConnectionState(status, description, actionRequired);
        }

        /// <summary> Initializes a new instance of OperationStatus. </summary>
        /// <param name="id"> ID of the operation. </param>
        /// <param name="name"> Name of the operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="startOn"> Operation start time. Format: ISO-8601. </param>
        /// <param name="endOn"> Operation end time. Format: ISO-8601. </param>
        /// <param name="error"> Error information related to this operation. </param>
        /// <param name="properties">
        /// Additional information associated with this operation.
        /// Please note <see cref="OperationStatusExtendedInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="OperationStatusJobExtendedInfo"/>, <see cref="OperationStatusJobsExtendedInfo"/>, <see cref="OperationStatusProvisionILRExtendedInfo"/> and <see cref="OperationStatusValidateOperationExtendedInfo"/>.
        /// </param>
        /// <returns> A new <see cref="Models.OperationStatus"/> instance for mocking. </returns>
        public static OperationStatus OperationStatus(string id = null, string name = null, OperationStatusValue? status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, OperationStatusError error = null, OperationStatusExtendedInfo properties = null)
        {
            return new OperationStatus(id, name, status, startOn, endOn, error, properties);
        }

        /// <summary> Initializes a new instance of OperationStatusError. </summary>
        /// <param name="code"> Error code of the operation failure. </param>
        /// <param name="message"> Error message displayed if the operation failure. </param>
        /// <returns> A new <see cref="Models.OperationStatusError"/> instance for mocking. </returns>
        public static OperationStatusError OperationStatusError(string code = null, string message = null)
        {
            return new OperationStatusError(code, message);
        }

        /// <summary> Initializes a new instance of OperationStatusExtendedInfo. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.OperationStatusExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusExtendedInfo OperationStatusExtendedInfo(string objectType = null)
        {
            return new UnknownOperationStatusExtendedInfo(objectType);
        }

        /// <summary> Initializes a new instance of VaultStorageConfigOperationResultResponse. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.VaultStorageConfigOperationResultResponse"/> instance for mocking. </returns>
        public static VaultStorageConfigOperationResultResponse VaultStorageConfigOperationResultResponse(string objectType = null)
        {
            return new UnknownVaultStorageConfigOperationResultResponse(objectType);
        }

        /// <summary> Initializes a new instance of ProtectedItemResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectedItemResource properties
        /// Please note <see cref="ProtectedItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileshareProtectedItem"/>, <see cref="AzureIaasVmProtectedItem"/>, <see cref="AzureVmWorkloadProtectedItem"/>, <see cref="AzureVmWorkloadSAPAseDatabaseProtectedItem"/>, <see cref="AzureVmWorkloadSAPHanaDBInstanceProtectedItem"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseProtectedItem"/>, <see cref="AzureVmWorkloadSQLDatabaseProtectedItem"/>, <see cref="DpmProtectedItem"/>, <see cref="GenericProtectedItem"/>, <see cref="MabFileFolderProtectedItem"/>, <see cref="AzureIaaSClassicComputeVmProtectedItem"/>, <see cref="AzureIaaSComputeVmProtectedItem"/> and <see cref="AzureSqlProtectedItem"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectedItemResourceData"/> instance for mocking. </returns>
        public static ProtectedItemResourceData ProtectedItemResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectedItem properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectedItemResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectedItem. </summary>
        /// <param name="protectedItemType"> backup item type. </param>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <returns> A new <see cref="Models.ProtectedItem"/> instance for mocking. </returns>
        public static ProtectedItem ProtectedItem(string protectedItemType = null, BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new UnknownProtectedItem(protectedItemType, backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName);
        }

        /// <summary> Initializes a new instance of RecoveryPointResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// RecoveryPointResource properties
        /// Please note <see cref="RecoveryPoint"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareRecoveryPoint"/>, <see cref="AzureWorkloadPointInTimeRecoveryPoint"/>, <see cref="AzureWorkloadRecoveryPoint"/>, <see cref="AzureWorkloadSAPHanaPointInTimeRecoveryPoint"/>, <see cref="AzureWorkloadSAPHanaRecoveryPoint"/>, <see cref="AzureWorkloadSQLPointInTimeRecoveryPoint"/>, <see cref="AzureWorkloadSQLRecoveryPoint"/>, <see cref="GenericRecoveryPoint"/> and <see cref="IaasVmRecoveryPoint"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.RecoveryPointResourceData"/> instance for mocking. </returns>
        public static RecoveryPointResourceData RecoveryPointResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RecoveryPoint properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new RecoveryPointResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of RecoveryPoint. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.RecoveryPoint"/> instance for mocking. </returns>
        public static RecoveryPoint RecoveryPoint(string objectType = null)
        {
            return new UnknownRecoveryPoint(objectType);
        }

        /// <summary> Initializes a new instance of RestoreRequestResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// RestoreRequestResource properties
        /// Please note <see cref="RestoreRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareRestoreRequest"/>, <see cref="AzureWorkloadPointInTimeRestoreRequest"/>, <see cref="AzureWorkloadRestoreRequest"/>, <see cref="AzureWorkloadSAPHanaPointInTimeRestoreRequest"/>, <see cref="AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest"/>, <see cref="AzureWorkloadSAPHanaRestoreRequest"/>, <see cref="AzureWorkloadSAPHanaRestoreWithRehydrateRequest"/>, <see cref="AzureWorkloadSQLPointInTimeRestoreRequest"/>, <see cref="AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest"/>, <see cref="AzureWorkloadSQLRestoreRequest"/>, <see cref="AzureWorkloadSQLRestoreWithRehydrateRequest"/>, <see cref="IaasVmRestoreRequest"/> and <see cref="IaasVmRestoreWithRehydrationRequest"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.RestoreRequestResource"/> instance for mocking. </returns>
        public static RestoreRequestResource RestoreRequestResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RestoreRequest properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new RestoreRequestResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of RestoreRequest. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.RestoreRequest"/> instance for mocking. </returns>
        public static RestoreRequest RestoreRequest(string objectType = null)
        {
            return new UnknownRestoreRequest(objectType);
        }

        /// <summary> Initializes a new instance of ProtectionPolicyResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectionPolicyResource properties
        /// Please note <see cref="ProtectionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureIaasVmProtectionPolicy"/>, <see cref="AzureSqlProtectionPolicy"/>, <see cref="AzureFileShareProtectionPolicy"/>, <see cref="AzureVmWorkloadProtectionPolicy"/>, <see cref="GenericProtectionPolicy"/> and <see cref="MabProtectionPolicy"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectionPolicyResourceData"/> instance for mocking. </returns>
        public static ProtectionPolicyResourceData ProtectionPolicyResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectionPolicy properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectionPolicyResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="backupManagementType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <returns> A new <see cref="Models.ProtectionPolicy"/> instance for mocking. </returns>
        public static ProtectionPolicy ProtectionPolicy(int? protectedItemsCount = null, string backupManagementType = null, IEnumerable<string> resourceGuardOperationRequests = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new UnknownProtectionPolicy(protectedItemsCount, backupManagementType, resourceGuardOperationRequests?.ToList());
        }

        /// <summary> Initializes a new instance of JobResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// JobResource properties
        /// Please note <see cref="Job"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureIaasVmJob"/>, <see cref="AzureIaasVmJobV2"/>, <see cref="AzureStorageJob"/>, <see cref="AzureWorkloadJob"/>, <see cref="DpmJob"/>, <see cref="MabJob"/> and <see cref="VaultJob"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.JobResourceData"/> instance for mocking. </returns>
        public static JobResourceData JobResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Job properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new JobResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of Job. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="jobType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.Job"/> instance for mocking. </returns>
        public static Job Job(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, string jobType = null)
        {
            return new UnknownJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, jobType);
        }

        /// <summary> Initializes a new instance of OperationResultInfoBaseResource. </summary>
        /// <param name="statusCode"> HTTP Status Code of the operation. </param>
        /// <param name="headers"> HTTP headers associated with this operation. </param>
        /// <param name="operation">
        /// OperationResultInfoBaseResource operation
        /// Please note <see cref="OperationResultInfoBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ExportJobsOperationResultInfo"/> and <see cref="OperationResultInfo"/>.
        /// </param>
        /// <returns> A new <see cref="Models.OperationResultInfoBaseResource"/> instance for mocking. </returns>
        public static OperationResultInfoBaseResource OperationResultInfoBaseResource(HttpStatusCode? statusCode = null, IReadOnlyDictionary<string, IList<string>> headers = null, OperationResultInfoBase operation = null)
        {
            headers ??= new Dictionary<string, IList<string>>();

            return new OperationResultInfoBaseResource(statusCode, headers, operation);
        }

        /// <summary> Initializes a new instance of OperationResultInfoBase. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.OperationResultInfoBase"/> instance for mocking. </returns>
        public static OperationResultInfoBase OperationResultInfoBase(string objectType = null)
        {
            return new UnknownOperationResultInfoBase(objectType);
        }

        /// <summary> Initializes a new instance of OperationWorkerResponse. </summary>
        /// <param name="statusCode"> HTTP Status Code of the operation. </param>
        /// <param name="headers"> HTTP headers associated with this operation. </param>
        /// <returns> A new <see cref="Models.OperationWorkerResponse"/> instance for mocking. </returns>
        public static OperationWorkerResponse OperationWorkerResponse(HttpStatusCode? statusCode = null, IReadOnlyDictionary<string, IList<string>> headers = null)
        {
            headers ??= new Dictionary<string, IList<string>>();

            return new OperationWorkerResponse(statusCode, headers);
        }

        /// <summary> Initializes a new instance of ValidateOperationsResponse. </summary>
        /// <param name="validateOperationResponseValidationResults"> Base class for validate operation response. </param>
        /// <returns> A new <see cref="Models.ValidateOperationsResponse"/> instance for mocking. </returns>
        public static ValidateOperationsResponse ValidateOperationsResponse(IEnumerable<ErrorDetail> validateOperationResponseValidationResults = null)
        {
            validateOperationResponseValidationResults ??= new List<ErrorDetail>();

            return new ValidateOperationsResponse(validateOperationResponseValidationResults != null ? new ValidateOperationResponse(validateOperationResponseValidationResults?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of ErrorDetail. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error Message related to the Code. </param>
        /// <param name="recommendations"> List of recommendation strings. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new ErrorDetail(code, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of BackupEngineBaseResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// BackupEngineBaseResource properties
        /// Please note <see cref="BackupEngineBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupServerEngine"/> and <see cref="DpmBackupEngine"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.BackupEngineBaseResourceData"/> instance for mocking. </returns>
        public static BackupEngineBaseResourceData BackupEngineBaseResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupEngineBase properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupEngineBaseResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupEngineBase. </summary>
        /// <param name="friendlyName"> Friendly name of the backup engine. </param>
        /// <param name="backupManagementType"> Type of backup management for the backup engine. </param>
        /// <param name="registrationStatus"> Registration status of the backup engine with the Recovery Services Vault. </param>
        /// <param name="backupEngineState"> Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}. </param>
        /// <param name="healthStatus"> Backup status of the backup engine. </param>
        /// <param name="backupEngineType"> Type of the backup engine. </param>
        /// <param name="canReRegister"> Flag indicating if the backup engine be registered, once already registered. </param>
        /// <param name="backupEngineId"> ID of the backup engine. </param>
        /// <param name="dpmVersion"> Backup engine version. </param>
        /// <param name="azureBackupAgentVersion"> Backup agent version. </param>
        /// <param name="isAzureBackupAgentUpgradeAvailable"> To check if backup agent upgrade available. </param>
        /// <param name="isDpmUpgradeAvailable"> To check if backup engine upgrade available. </param>
        /// <param name="extendedInfo"> Extended info of the backupengine. </param>
        /// <returns> A new <see cref="Models.BackupEngineBase"/> instance for mocking. </returns>
        public static BackupEngineBase BackupEngineBase(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string backupEngineState = null, string healthStatus = null, string backupEngineType = "Unknown", bool? canReRegister = null, string backupEngineId = null, string dpmVersion = null, string azureBackupAgentVersion = null, bool? isAzureBackupAgentUpgradeAvailable = null, bool? isDpmUpgradeAvailable = null, BackupEngineExtendedInfo extendedInfo = null)
        {
            return new UnknownBackupEngineBase(friendlyName, backupManagementType, registrationStatus, backupEngineState, healthStatus, backupEngineType, canReRegister, backupEngineId, dpmVersion, azureBackupAgentVersion, isAzureBackupAgentUpgradeAvailable, isDpmUpgradeAvailable, extendedInfo);
        }

        /// <summary> Initializes a new instance of BackupEngineExtendedInfo. </summary>
        /// <param name="databaseName"> Database name of backup engine. </param>
        /// <param name="protectedItemsCount"> Number of protected items in the backup engine. </param>
        /// <param name="protectedServersCount"> Number of protected servers in the backup engine. </param>
        /// <param name="diskCount"> Number of disks in the backup engine. </param>
        /// <param name="usedDiskSpace"> Disk space used in the backup engine. </param>
        /// <param name="availableDiskSpace"> Disk space currently available in the backup engine. </param>
        /// <param name="refreshedOn"> Last refresh time in the backup engine. </param>
        /// <param name="azureProtectedInstances"> Protected instances in the backup engine. </param>
        /// <returns> A new <see cref="Models.BackupEngineExtendedInfo"/> instance for mocking. </returns>
        public static BackupEngineExtendedInfo BackupEngineExtendedInfo(string databaseName = null, int? protectedItemsCount = null, int? protectedServersCount = null, int? diskCount = null, double? usedDiskSpace = null, double? availableDiskSpace = null, DateTimeOffset? refreshedOn = null, int? azureProtectedInstances = null)
        {
            return new BackupEngineExtendedInfo(databaseName, protectedItemsCount, protectedServersCount, diskCount, usedDiskSpace, availableDiskSpace, refreshedOn, azureProtectedInstances);
        }

        /// <summary> Initializes a new instance of ProtectableContainerResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectableContainerResource properties
        /// Please note <see cref="ProtectableContainer"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureStorageProtectableContainer"/> and <see cref="AzureVmAppContainerProtectableContainer"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.ProtectableContainerResource"/> instance for mocking. </returns>
        public static ProtectableContainerResource ProtectableContainerResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectableContainer properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectableContainerResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectableContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="protectableContainerType">
        /// Type of the container. The value of this property for
        /// 1. Compute Azure VM is Microsoft.Compute/virtualMachines
        /// 2. Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines
        /// </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="containerId"> Fabric Id of the container such as ARM Id. </param>
        /// <returns> A new <see cref="Models.ProtectableContainer"/> instance for mocking. </returns>
        public static ProtectableContainer ProtectableContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string protectableContainerType = "Unknown", string healthStatus = null, string containerId = null)
        {
            return new UnknownProtectableContainer(friendlyName, backupManagementType, protectableContainerType, healthStatus, containerId);
        }

        /// <summary> Initializes a new instance of ProtectionContainerResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ProtectionContainerResource properties
        /// Please note <see cref="ProtectionContainer"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupServerContainer"/>, <see cref="AzureSqlContainer"/>, <see cref="AzureWorkloadContainer"/>, <see cref="DpmContainer"/>, <see cref="GenericContainer"/>, <see cref="IaasVmContainer"/>, <see cref="AzureIaaSClassicComputeVmContainer"/>, <see cref="AzureIaaSComputeVmContainer"/>, <see cref="AzureSqlAGWorkloadContainerProtectionContainer"/>, <see cref="AzureStorageContainer"/>, <see cref="AzureVmAppContainerProtectionContainer"/> and <see cref="MabContainer"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ProtectionContainerResourceData"/> instance for mocking. </returns>
        public static ProtectionContainerResourceData ProtectionContainerResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProtectionContainer properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ProtectionContainerResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ProtectionContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="containerType">
        /// Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
        /// Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
        /// Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
        /// Backup is VMAppContainer
        /// </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <returns> A new <see cref="Models.ProtectionContainer"/> instance for mocking. </returns>
        public static ProtectionContainer ProtectionContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string containerType = "Unknown", string protectableObjectType = null)
        {
            return new UnknownProtectionContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, containerType, protectableObjectType);
        }

        /// <summary> Initializes a new instance of WorkloadItemResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// WorkloadItemResource properties
        /// Please note <see cref="WorkloadItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureVmWorkloadItem"/>, <see cref="AzureVmWorkloadSAPAseDatabaseWorkloadItem"/>, <see cref="AzureVmWorkloadSAPAseSystemWorkloadItem"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseWorkloadItem"/>, <see cref="AzureVmWorkloadSAPHanaSystemWorkloadItem"/>, <see cref="AzureVmWorkloadSQLDatabaseWorkloadItem"/> and <see cref="AzureVmWorkloadSQLInstanceWorkloadItem"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.WorkloadItemResource"/> instance for mocking. </returns>
        public static WorkloadItemResource WorkloadItemResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadItem properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkloadItemResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of WorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="workloadItemType"> Type of the backup item. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <returns> A new <see cref="Models.WorkloadItem"/> instance for mocking. </returns>
        public static WorkloadItem WorkloadItem(string backupManagementType = null, string workloadType = null, string workloadItemType = null, string friendlyName = null, ProtectionStatus? protectionState = null)
        {
            return new UnknownWorkloadItem(backupManagementType, workloadType, workloadItemType, friendlyName, protectionState);
        }

        /// <summary> Initializes a new instance of BackupRequestResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// BackupRequestResource properties
        /// Please note <see cref="BackupRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareBackupRequest"/>, <see cref="AzureWorkloadBackupRequest"/> and <see cref="IaasVmBackupRequest"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.BackupRequestResource"/> instance for mocking. </returns>
        public static BackupRequestResource BackupRequestResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, BackupRequest properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new BackupRequestResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of BackupRequest. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.BackupRequest"/> instance for mocking. </returns>
        public static BackupRequest BackupRequest(string objectType = null)
        {
            return new UnknownBackupRequest(objectType);
        }

        /// <summary> Initializes a new instance of ILRRequestResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// ILRRequestResource properties
        /// Please note <see cref="ILRRequest"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareProvisionILRRequest"/> and <see cref="IaasVmilrRegistrationRequest"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.ILRRequestResource"/> instance for mocking. </returns>
        public static ILRRequestResource ILRRequestResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ILRRequest properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ILRRequestResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ILRRequest. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.ILRRequest"/> instance for mocking. </returns>
        public static ILRRequest ILRRequest(string objectType = null)
        {
            return new UnknownILRRequest(objectType);
        }

        /// <summary> Initializes a new instance of WorkloadProtectableItemResource. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// WorkloadProtectableItemResource properties
        /// Please note <see cref="WorkloadProtectableItem"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureFileShareProtectableItem"/>, <see cref="AzureVmWorkloadProtectableItem"/>, <see cref="IaasVmProtectableItem"/>, <see cref="AzureIaaSClassicComputeVmProtectableItem"/>, <see cref="AzureIaaSComputeVmProtectableItem"/>, <see cref="AzureVmWorkloadSAPAseSystemProtectableItem"/>, <see cref="AzureVmWorkloadSAPHanaDBInstance"/>, <see cref="AzureVmWorkloadSAPHanaDatabaseProtectableItem"/>, <see cref="AzureVmWorkloadSAPHanaHSR"/>, <see cref="AzureVmWorkloadSAPHanaSystemProtectableItem"/>, <see cref="AzureVmWorkloadSQLAvailabilityGroupProtectableItem"/>, <see cref="AzureVmWorkloadSQLDatabaseProtectableItem"/> and <see cref="AzureVmWorkloadSQLInstanceProtectableItem"/>.
        /// </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.WorkloadProtectableItemResource"/> instance for mocking. </returns>
        public static WorkloadProtectableItemResource WorkloadProtectableItemResource(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadProtectableItem properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkloadProtectableItemResource(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of WorkloadProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="protectableItemType"> Type of the backup item. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <returns> A new <see cref="Models.WorkloadProtectableItem"/> instance for mocking. </returns>
        public static WorkloadProtectableItem WorkloadProtectableItem(string backupManagementType = null, string workloadType = null, string protectableItemType = null, string friendlyName = null, ProtectionStatus? protectionState = null)
        {
            return new UnknownWorkloadProtectableItem(backupManagementType, workloadType, protectableItemType, friendlyName, protectionState);
        }

        /// <summary> Initializes a new instance of TokenInformation. </summary>
        /// <param name="token"> Token value. </param>
        /// <param name="expiryTimeInUtcTicks"> Expiry time of token. </param>
        /// <param name="securityPIN"> Security PIN. </param>
        /// <returns> A new <see cref="Models.TokenInformation"/> instance for mocking. </returns>
        public static TokenInformation TokenInformation(string token = null, long? expiryTimeInUtcTicks = null, string securityPIN = null)
        {
            return new TokenInformation(token, expiryTimeInUtcTicks, securityPIN);
        }

        /// <summary> Initializes a new instance of ResourceGuardProxyBaseResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> ResourceGuardProxyBaseResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServicesBackup.ResourceGuardProxyBaseResourceData"/> instance for mocking. </returns>
        public static ResourceGuardProxyBaseResourceData ResourceGuardProxyBaseResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceGuardProxyBase properties = null, ETag? eTag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ResourceGuardProxyBaseResourceData(id, name, resourceType, systemData, tags, location, properties, eTag);
        }

        /// <summary> Initializes a new instance of ResourceGuardProxyBase. </summary>
        /// <param name="resourceGuardResourceId"></param>
        /// <param name="resourceGuardOperationDetails"></param>
        /// <param name="lastUpdatedTime"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.ResourceGuardProxyBase"/> instance for mocking. </returns>
        public static ResourceGuardProxyBase ResourceGuardProxyBase(string resourceGuardResourceId = null, IEnumerable<ResourceGuardOperationDetail> resourceGuardOperationDetails = null, string lastUpdatedTime = null, string description = null)
        {
            resourceGuardOperationDetails ??= new List<ResourceGuardOperationDetail>();

            return new ResourceGuardProxyBase(resourceGuardResourceId, resourceGuardOperationDetails?.ToList(), lastUpdatedTime, description);
        }

        /// <summary> Initializes a new instance of ResourceGuardOperationDetail. </summary>
        /// <param name="vaultCriticalOperation"></param>
        /// <param name="defaultResourceRequest"></param>
        /// <returns> A new <see cref="Models.ResourceGuardOperationDetail"/> instance for mocking. </returns>
        public static ResourceGuardOperationDetail ResourceGuardOperationDetail(string vaultCriticalOperation = null, string defaultResourceRequest = null)
        {
            return new ResourceGuardOperationDetail(vaultCriticalOperation, defaultResourceRequest);
        }

        /// <summary> Initializes a new instance of UnlockDeleteResponse. </summary>
        /// <param name="unlockDeleteExpiryTime"> This is the time when unlock delete privileges will get expired. </param>
        /// <returns> A new <see cref="Models.UnlockDeleteResponse"/> instance for mocking. </returns>
        public static UnlockDeleteResponse UnlockDeleteResponse(string unlockDeleteExpiryTime = null)
        {
            return new UnlockDeleteResponse(unlockDeleteExpiryTime);
        }

        /// <summary> Initializes a new instance of AzureFileshareProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the fileshare represented by this backup item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="extendedInfo"> Additional information with this backup item. </param>
        /// <returns> A new <see cref="Models.AzureFileshareProtectedItem"/> instance for mocking. </returns>
        public static AzureFileshareProtectedItem AzureFileshareProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string protectionStatus = null, ProtectionState? protectionState = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, AzureFileshareProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureFileshareProtectedItem("AzureFileShareProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, kpisHealths, extendedInfo);
        }

        /// <summary> Initializes a new instance of KPIResourceHealthDetails. </summary>
        /// <param name="resourceHealthStatus"> Resource Health Status. </param>
        /// <param name="resourceHealthDetails"> Resource Health Status. </param>
        /// <returns> A new <see cref="Models.KPIResourceHealthDetails"/> instance for mocking. </returns>
        public static KPIResourceHealthDetails KPIResourceHealthDetails(ResourceHealthStatus? resourceHealthStatus = null, IEnumerable<ResourceHealthDetails> resourceHealthDetails = null)
        {
            resourceHealthDetails ??= new List<ResourceHealthDetails>();

            return new KPIResourceHealthDetails(resourceHealthStatus, resourceHealthDetails?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceHealthDetails. </summary>
        /// <param name="code"> Health Code. </param>
        /// <param name="title"> Health Title. </param>
        /// <param name="message"> Health Message. </param>
        /// <param name="recommendations"> Health Recommended Actions. </param>
        /// <returns> A new <see cref="Models.ResourceHealthDetails"/> instance for mocking. </returns>
        public static ResourceHealthDetails ResourceHealthDetails(int? code = null, string title = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new ResourceHealthDetails(code, title, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureFileshareProtectedItemExtendedInfo. </summary>
        /// <param name="oldestRecoveryPoint"> The oldest backup copy available for this item in the service. </param>
        /// <param name="recoveryPointCount"> Number of available backup copies associated with this backup item. </param>
        /// <param name="policyState"> Indicates consistency of policy object and policy applied to this backup item. </param>
        /// <param name="resourceState"> Indicates the state of this resource. Possible values are from enum ResourceState {Invalid, Active, SoftDeleted, Deleted}. </param>
        /// <param name="resourceStateSyncOn"> The resource state sync time for this backup item. </param>
        /// <returns> A new <see cref="Models.AzureFileshareProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static AzureFileshareProtectedItemExtendedInfo AzureFileshareProtectedItemExtendedInfo(DateTimeOffset? oldestRecoveryPoint = null, int? recoveryPointCount = null, string policyState = null, string resourceState = null, DateTimeOffset? resourceStateSyncOn = null)
        {
            return new AzureFileshareProtectedItemExtendedInfo(oldestRecoveryPoint, recoveryPointCount, policyState, resourceState, resourceStateSyncOn);
        }

        /// <summary> Initializes a new instance of AzureFileShareRecoveryPoint. </summary>
        /// <param name="recoveryPointType"> Type of the backup copy. Specifies whether it is a crash consistent backup or app consistent. </param>
        /// <param name="recoveryPointOn"> Time at which this backup copy was created. </param>
        /// <param name="fileShareSnapshotUri"> Contains Url to the snapshot of fileshare, if applicable. </param>
        /// <param name="recoveryPointSizeInGB"> Contains recovery point size. </param>
        /// <returns> A new <see cref="Models.AzureFileShareRecoveryPoint"/> instance for mocking. </returns>
        public static AzureFileShareRecoveryPoint AzureFileShareRecoveryPoint(string recoveryPointType = null, DateTimeOffset? recoveryPointOn = null, Uri fileShareSnapshotUri = null, int? recoveryPointSizeInGB = null)
        {
            return new AzureFileShareRecoveryPoint("AzureFileShareRecoveryPoint", recoveryPointType, recoveryPointOn, fileShareSnapshotUri, recoveryPointSizeInGB);
        }

        /// <summary> Initializes a new instance of AzureFileShareRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Source storage account ARM Id. </param>
        /// <param name="copyOptions"> Options to resolve copy conflicts. </param>
        /// <param name="restoreRequestType"> Restore Type (FullShareRestore or ItemLevelRestore). </param>
        /// <param name="restoreFileSpecs"> List of Source Files/Folders(which need to recover) and TargetFolderPath details. </param>
        /// <param name="targetDetails"> Target File Share Details. </param>
        /// <returns> A new <see cref="Models.AzureFileShareRestoreRequest"/> instance for mocking. </returns>
        public static AzureFileShareRestoreRequest AzureFileShareRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, CopyOption? copyOptions = null, RestoreRequestType? restoreRequestType = null, IEnumerable<RestoreFileSpecs> restoreFileSpecs = null, TargetAFSRestoreInfo targetDetails = null)
        {
            restoreFileSpecs ??= new List<RestoreFileSpecs>();

            return new AzureFileShareRestoreRequest("AzureFileShareRestoreRequest", recoveryType, sourceResourceId, copyOptions, restoreRequestType, restoreFileSpecs?.ToList(), targetDetails);
        }

        /// <summary> Initializes a new instance of RestoreFileSpecs. </summary>
        /// <param name="path"> Source File/Folder path. </param>
        /// <param name="fileSpecType"> Indicates what the Path variable stands for. </param>
        /// <param name="targetFolderPath"> Destination folder path in target FileShare. </param>
        /// <returns> A new <see cref="Models.RestoreFileSpecs"/> instance for mocking. </returns>
        public static RestoreFileSpecs RestoreFileSpecs(string path = null, string fileSpecType = null, string targetFolderPath = null)
        {
            return new RestoreFileSpecs(path, fileSpecType, targetFolderPath);
        }

        /// <summary> Initializes a new instance of TargetAFSRestoreInfo. </summary>
        /// <param name="name"> File share name. </param>
        /// <param name="targetResourceId"> Target file share resource ARM ID. </param>
        /// <returns> A new <see cref="Models.TargetAFSRestoreInfo"/> instance for mocking. </returns>
        public static TargetAFSRestoreInfo TargetAFSRestoreInfo(string name = null, string targetResourceId = null)
        {
            return new TargetAFSRestoreInfo(name, targetResourceId);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="workLoadType"> Type of workload for the backup management. </param>
        /// <param name="settings"> Common settings for the backup management. </param>
        /// <param name="subProtectionPolicy"> List of sub-protection policies which includes schedule and retention. </param>
        /// <param name="makePolicyConsistent"> Fix the policy inconsistency. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadProtectionPolicy"/> instance for mocking. </returns>
        public static AzureVmWorkloadProtectionPolicy AzureVmWorkloadProtectionPolicy(int? protectedItemsCount = null, IEnumerable<string> resourceGuardOperationRequests = null, WorkloadType? workLoadType = null, Settings settings = null, IEnumerable<SubProtectionPolicy> subProtectionPolicy = null, bool? makePolicyConsistent = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            subProtectionPolicy ??= new List<SubProtectionPolicy>();

            return new AzureVmWorkloadProtectionPolicy(protectedItemsCount, "AzureWorkload", resourceGuardOperationRequests?.ToList(), workLoadType, settings, subProtectionPolicy?.ToList(), makePolicyConsistent);
        }

        /// <summary> Initializes a new instance of Settings. </summary>
        /// <param name="timeZone"> TimeZone optional input as string. For example: TimeZone = &quot;Pacific Standard Time&quot;. </param>
        /// <param name="isSqlCompression"> SQL compression flag. </param>
        /// <param name="isCompression">
        /// Workload compression flag. This has been added so that &apos;isSqlCompression&apos;
        /// will be deprecated once clients upgrade to consider this flag.
        /// </param>
        /// <returns> A new <see cref="Models.Settings"/> instance for mocking. </returns>
        public static Settings Settings(string timeZone = null, bool? isSqlCompression = null, bool? isCompression = null)
        {
            return new Settings(timeZone, isSqlCompression, isCompression);
        }

        /// <summary> Initializes a new instance of SubProtectionPolicy. </summary>
        /// <param name="policyType"> Type of backup policy type. </param>
        /// <param name="schedulePolicy">
        /// Backup schedule specified as part of backup policy.
        /// Please note <see cref="SchedulePolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LogSchedulePolicy"/>, <see cref="LongTermSchedulePolicy"/>, <see cref="SimpleSchedulePolicy"/> and <see cref="SimpleSchedulePolicyV2"/>.
        /// </param>
        /// <param name="retentionPolicy">
        /// Retention policy with the details on backup copy retention ranges.
        /// Please note <see cref="RetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LongTermRetentionPolicy"/> and <see cref="SimpleRetentionPolicy"/>.
        /// </param>
        /// <param name="tieringPolicy">
        /// Tiering policy to automatically move RPs to another tier.
        /// Key is Target Tier, defined in RecoveryPointTierType enum.
        /// Tiering policy specifies the criteria to move RP to the target tier.
        /// </param>
        /// <returns> A new <see cref="Models.SubProtectionPolicy"/> instance for mocking. </returns>
        public static SubProtectionPolicy SubProtectionPolicy(PolicyType? policyType = null, SchedulePolicy schedulePolicy = null, RetentionPolicy retentionPolicy = null, IDictionary<string, TieringPolicy> tieringPolicy = null)
        {
            tieringPolicy ??= new Dictionary<string, TieringPolicy>();

            return new SubProtectionPolicy(policyType, schedulePolicy, retentionPolicy, tieringPolicy);
        }

        /// <summary> Initializes a new instance of SchedulePolicy. </summary>
        /// <param name="schedulePolicyType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.SchedulePolicy"/> instance for mocking. </returns>
        public static SchedulePolicy SchedulePolicy(string schedulePolicyType = null)
        {
            return new UnknownSchedulePolicy(schedulePolicyType);
        }

        /// <summary> Initializes a new instance of RetentionPolicy. </summary>
        /// <param name="retentionPolicyType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.RetentionPolicy"/> instance for mocking. </returns>
        public static RetentionPolicy RetentionPolicy(string retentionPolicyType = null)
        {
            return new UnknownRetentionPolicy(retentionPolicyType);
        }

        /// <summary> Initializes a new instance of TieringPolicy. </summary>
        /// <param name="tieringMode">
        /// Tiering Mode to control automatic tiering of recovery points. Supported values are:
        /// 1. TierRecommended: Tier all recovery points recommended to be tiered
        /// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
        /// 3. DoNotTier: Do not tier any recovery points
        /// </param>
        /// <param name="durationValue">
        /// Number of days/weeks/months/years to retain backups in current tier before tiering.
        /// Used only if TieringMode is set to TierAfter
        /// </param>
        /// <param name="durationType">
        /// Retention duration type: days/weeks/months/years
        /// Used only if TieringMode is set to TierAfter
        /// </param>
        /// <returns> A new <see cref="Models.TieringPolicy"/> instance for mocking. </returns>
        public static TieringPolicy TieringPolicy(TieringMode? tieringMode = null, int? durationValue = null, RetentionDurationType? durationType = null)
        {
            return new TieringPolicy(tieringMode, durationValue, durationType);
        }

        /// <summary> Initializes a new instance of AzureFileShareProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="workLoadType"> Type of workload for the backup management. </param>
        /// <param name="schedulePolicy">
        /// Backup schedule specified as part of backup policy.
        /// Please note <see cref="SchedulePolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LogSchedulePolicy"/>, <see cref="LongTermSchedulePolicy"/>, <see cref="SimpleSchedulePolicy"/> and <see cref="SimpleSchedulePolicyV2"/>.
        /// </param>
        /// <param name="retentionPolicy">
        /// Retention policy with the details on backup copy retention ranges.
        /// Please note <see cref="RetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LongTermRetentionPolicy"/> and <see cref="SimpleRetentionPolicy"/>.
        /// </param>
        /// <param name="timeZone"> TimeZone optional input as string. For example: TimeZone = &quot;Pacific Standard Time&quot;. </param>
        /// <returns> A new <see cref="Models.AzureFileShareProtectionPolicy"/> instance for mocking. </returns>
        public static AzureFileShareProtectionPolicy AzureFileShareProtectionPolicy(int? protectedItemsCount = null, IEnumerable<string> resourceGuardOperationRequests = null, WorkloadType? workLoadType = null, SchedulePolicy schedulePolicy = null, RetentionPolicy retentionPolicy = null, string timeZone = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new AzureFileShareProtectionPolicy(protectedItemsCount, "AzureStorage", resourceGuardOperationRequests?.ToList(), workLoadType, schedulePolicy, retentionPolicy, timeZone);
        }

        /// <summary> Initializes a new instance of AzureIaaSClassicComputeVmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine represented by this item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="healthStatus"> Health status of protected item. </param>
        /// <param name="healthDetails"> Health details on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectedItemDataId"> Data ID of the protected item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="extendedProperties"> Extended Properties for Azure IaasVM Backup. </param>
        /// <returns> A new <see cref="Models.AzureIaaSClassicComputeVmProtectedItem"/> instance for mocking. </returns>
        public static AzureIaaSClassicComputeVmProtectedItem AzureIaaSClassicComputeVmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string virtualMachineId = null, string protectionStatus = null, ProtectionState? protectionState = null, HealthStatus? healthStatus = null, IEnumerable<AzureIaasVmHealthDetails> healthDetails = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectedItemDataId = null, AzureIaasVmProtectedItemExtendedInfo extendedInfo = null, ExtendedProperties extendedProperties = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            healthDetails ??= new List<AzureIaasVmHealthDetails>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureIaaSClassicComputeVmProtectedItem("Microsoft.ClassicCompute/virtualMachines", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, virtualMachineId, protectionStatus, protectionState, healthStatus, healthDetails?.ToList(), kpisHealths, lastBackupStatus, lastBackupOn, protectedItemDataId, extendedInfo, extendedProperties);
        }

        /// <summary> Initializes a new instance of AzureIaasVmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine represented by this item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="healthStatus"> Health status of protected item. </param>
        /// <param name="healthDetails"> Health details on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectedItemDataId"> Data ID of the protected item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="extendedProperties"> Extended Properties for Azure IaasVM Backup. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmProtectedItem"/> instance for mocking. </returns>
        public static AzureIaasVmProtectedItem AzureIaasVmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string virtualMachineId = null, string protectionStatus = null, ProtectionState? protectionState = null, HealthStatus? healthStatus = null, IEnumerable<AzureIaasVmHealthDetails> healthDetails = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectedItemDataId = null, AzureIaasVmProtectedItemExtendedInfo extendedInfo = null, ExtendedProperties extendedProperties = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            healthDetails ??= new List<AzureIaasVmHealthDetails>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureIaasVmProtectedItem("AzureIaaSVMProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, virtualMachineId, protectionStatus, protectionState, healthStatus, healthDetails?.ToList(), kpisHealths, lastBackupStatus, lastBackupOn, protectedItemDataId, extendedInfo, extendedProperties);
        }

        /// <summary> Initializes a new instance of AzureIaasVmHealthDetails. </summary>
        /// <param name="code"> Health Code. </param>
        /// <param name="title"> Health Title. </param>
        /// <param name="message"> Health Message. </param>
        /// <param name="recommendations"> Health Recommended Actions. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmHealthDetails"/> instance for mocking. </returns>
        public static AzureIaasVmHealthDetails AzureIaasVmHealthDetails(int? code = null, string title = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new AzureIaasVmHealthDetails(code, title, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureIaasVmProtectedItemExtendedInfo. </summary>
        /// <param name="oldestRecoveryPoint"> The oldest backup copy available for this backup item across all tiers. </param>
        /// <param name="oldestRecoveryPointInVault"> The oldest backup copy available for this backup item in vault tier. </param>
        /// <param name="oldestRecoveryPointInArchive"> The oldest backup copy available for this backup item in archive tier. </param>
        /// <param name="newestRecoveryPointInArchive"> The latest backup copy available for this backup item in archive tier. </param>
        /// <param name="recoveryPointCount"> Number of backup copies available for this backup item. </param>
        /// <param name="policyInconsistent"> Specifies if backup policy associated with the backup item is inconsistent. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static AzureIaasVmProtectedItemExtendedInfo AzureIaasVmProtectedItemExtendedInfo(DateTimeOffset? oldestRecoveryPoint = null, DateTimeOffset? oldestRecoveryPointInVault = null, DateTimeOffset? oldestRecoveryPointInArchive = null, DateTimeOffset? newestRecoveryPointInArchive = null, int? recoveryPointCount = null, bool? policyInconsistent = null)
        {
            return new AzureIaasVmProtectedItemExtendedInfo(oldestRecoveryPoint, oldestRecoveryPointInVault, oldestRecoveryPointInArchive, newestRecoveryPointInArchive, recoveryPointCount, policyInconsistent);
        }

        /// <summary> Initializes a new instance of ExtendedProperties. </summary>
        /// <param name="diskExclusionProperties"> Extended Properties for Disk Exclusion. </param>
        /// <param name="linuxVmApplicationName"> Linux VM name. </param>
        /// <returns> A new <see cref="Models.ExtendedProperties"/> instance for mocking. </returns>
        public static ExtendedProperties ExtendedProperties(DiskExclusionProperties diskExclusionProperties = null, string linuxVmApplicationName = null)
        {
            return new ExtendedProperties(diskExclusionProperties, linuxVmApplicationName);
        }

        /// <summary> Initializes a new instance of DiskExclusionProperties. </summary>
        /// <param name="diskLunList"> List of Disks&apos; Logical Unit Numbers (LUN) to be used for VM Protection. </param>
        /// <param name="isInclusionList"> Flag to indicate whether DiskLunList is to be included/ excluded from backup. </param>
        /// <returns> A new <see cref="Models.DiskExclusionProperties"/> instance for mocking. </returns>
        public static DiskExclusionProperties DiskExclusionProperties(IEnumerable<int> diskLunList = null, bool? isInclusionList = null)
        {
            diskLunList ??= new List<int>();

            return new DiskExclusionProperties(diskLunList?.ToList(), isInclusionList);
        }

        /// <summary> Initializes a new instance of AzureIaaSComputeVmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine represented by this item. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="healthStatus"> Health status of protected item. </param>
        /// <param name="healthDetails"> Health details on this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectedItemDataId"> Data ID of the protected item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="extendedProperties"> Extended Properties for Azure IaasVM Backup. </param>
        /// <returns> A new <see cref="Models.AzureIaaSComputeVmProtectedItem"/> instance for mocking. </returns>
        public static AzureIaaSComputeVmProtectedItem AzureIaaSComputeVmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string virtualMachineId = null, string protectionStatus = null, ProtectionState? protectionState = null, HealthStatus? healthStatus = null, IEnumerable<AzureIaasVmHealthDetails> healthDetails = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectedItemDataId = null, AzureIaasVmProtectedItemExtendedInfo extendedInfo = null, ExtendedProperties extendedProperties = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            healthDetails ??= new List<AzureIaasVmHealthDetails>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureIaaSComputeVmProtectedItem("Microsoft.Compute/virtualMachines", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, virtualMachineId, protectionStatus, protectionState, healthStatus, healthDetails?.ToList(), kpisHealths, lastBackupStatus, lastBackupOn, protectedItemDataId, extendedInfo, extendedProperties);
        }

        /// <summary> Initializes a new instance of AzureIaasVmErrorInfo. </summary>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="errorTitle"> Title: Typically, the entity that the error pertains to. </param>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations for above error code. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmErrorInfo"/> instance for mocking. </returns>
        public static AzureIaasVmErrorInfo AzureIaasVmErrorInfo(int? errorCode = null, string errorTitle = null, string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new AzureIaasVmErrorInfo(errorCode, errorTitle, errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureIaasVmJob. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="duration"> Time elapsed during the execution of this job. </param>
        /// <param name="actionsInfo"> Gets or sets the state/actions applicable on this job like cancel/retry. </param>
        /// <param name="errorDetails"> Error details on execution of this job. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the backup item is a Classic or an Azure Resource Manager VM. </param>
        /// <param name="extendedInfo"> Additional information for this job. </param>
        /// <param name="containerName"> Container name of the entity on which the current job is executing. </param>
        /// <param name="isUserTriggered"> Indicated that whether the job is adhoc(true) or scheduled(false). </param>
        /// <returns> A new <see cref="Models.AzureIaasVmJob"/> instance for mocking. </returns>
        public static AzureIaasVmJob AzureIaasVmJob(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, TimeSpan? duration = null, IEnumerable<JobSupportedAction> actionsInfo = null, IEnumerable<AzureIaasVmErrorInfo> errorDetails = null, string virtualMachineVersion = null, AzureIaasVmJobExtendedInfo extendedInfo = null, string containerName = null, bool? isUserTriggered = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<AzureIaasVmErrorInfo>();

            return new AzureIaasVmJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "AzureIaaSVMJob", duration, actionsInfo?.ToList(), errorDetails?.ToList(), virtualMachineVersion, extendedInfo, containerName, isUserTriggered);
        }

        /// <summary> Initializes a new instance of AzureIaasVmJobExtendedInfo. </summary>
        /// <param name="tasksList"> List of tasks associated with this job. </param>
        /// <param name="propertyBag"> Job properties. </param>
        /// <param name="internalPropertyBag"> Job internal properties. </param>
        /// <param name="progressPercentage"> Indicates progress of the job. Null if it has not started or completed. </param>
        /// <param name="estimatedRemainingDurationValue"> Time remaining for execution of this job. </param>
        /// <param name="dynamicErrorMessage"> Non localized error message on job execution. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmJobExtendedInfo"/> instance for mocking. </returns>
        public static AzureIaasVmJobExtendedInfo AzureIaasVmJobExtendedInfo(IEnumerable<AzureIaasVmJobTaskDetails> tasksList = null, IDictionary<string, string> propertyBag = null, IDictionary<string, string> internalPropertyBag = null, double? progressPercentage = null, string estimatedRemainingDurationValue = null, string dynamicErrorMessage = null)
        {
            tasksList ??= new List<AzureIaasVmJobTaskDetails>();
            propertyBag ??= new Dictionary<string, string>();
            internalPropertyBag ??= new Dictionary<string, string>();

            return new AzureIaasVmJobExtendedInfo(tasksList?.ToList(), propertyBag, internalPropertyBag, progressPercentage, estimatedRemainingDurationValue, dynamicErrorMessage);
        }

        /// <summary> Initializes a new instance of AzureIaasVmJobTaskDetails. </summary>
        /// <param name="taskId"> The task display name. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="instanceId"> The instanceId. </param>
        /// <param name="duration"> Time elapsed for task. </param>
        /// <param name="status"> The status. </param>
        /// <param name="progressPercentage"> Progress of the task. </param>
        /// <param name="taskExecutionDetails">
        /// Details about execution of the task.
        /// eg: number of bytes transferred etc
        /// </param>
        /// <returns> A new <see cref="Models.AzureIaasVmJobTaskDetails"/> instance for mocking. </returns>
        public static AzureIaasVmJobTaskDetails AzureIaasVmJobTaskDetails(string taskId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string instanceId = null, TimeSpan? duration = null, string status = null, double? progressPercentage = null, string taskExecutionDetails = null)
        {
            return new AzureIaasVmJobTaskDetails(taskId, startOn, endOn, instanceId, duration, status, progressPercentage, taskExecutionDetails);
        }

        /// <summary> Initializes a new instance of AzureIaasVmJobV2. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="actionsInfo"> Gets or sets the state/actions applicable on this job like cancel/retry. </param>
        /// <param name="containerName"> Container name of the entity on which the current job is executing. </param>
        /// <param name="duration"> Time elapsed during the execution of this job. </param>
        /// <param name="errorDetails"> Error details on execution of this job. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the backup item is a Classic or an Azure Resource Manager VM. </param>
        /// <param name="extendedInfo"> Additional information for this job. </param>
        /// <returns> A new <see cref="Models.AzureIaasVmJobV2"/> instance for mocking. </returns>
        public static AzureIaasVmJobV2 AzureIaasVmJobV2(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, IEnumerable<JobSupportedAction> actionsInfo = null, string containerName = null, TimeSpan? duration = null, IEnumerable<AzureIaasVmErrorInfo> errorDetails = null, string virtualMachineVersion = null, AzureIaasVmJobExtendedInfo extendedInfo = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<AzureIaasVmErrorInfo>();

            return new AzureIaasVmJobV2(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "AzureIaaSVMJobV2", actionsInfo?.ToList(), containerName, duration, errorDetails?.ToList(), virtualMachineVersion, extendedInfo);
        }

        /// <summary> Initializes a new instance of AzureIaasVmProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="instantRPDetails"></param>
        /// <param name="schedulePolicy">
        /// Backup schedule specified as part of backup policy.
        /// Please note <see cref="SchedulePolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LogSchedulePolicy"/>, <see cref="LongTermSchedulePolicy"/>, <see cref="SimpleSchedulePolicy"/> and <see cref="SimpleSchedulePolicyV2"/>.
        /// </param>
        /// <param name="retentionPolicy">
        /// Retention policy with the details on backup copy retention ranges.
        /// Please note <see cref="RetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LongTermRetentionPolicy"/> and <see cref="SimpleRetentionPolicy"/>.
        /// </param>
        /// <param name="tieringPolicy">
        /// Tiering policy to automatically move RPs to another tier
        /// Key is Target Tier, defined in RecoveryPointTierType enum.
        /// Tiering policy specifies the criteria to move RP to the target tier.
        /// </param>
        /// <param name="instantRpRetentionRangeInDays"> Instant RP retention policy range in days. </param>
        /// <param name="timeZone"> TimeZone optional input as string. For example: TimeZone = &quot;Pacific Standard Time&quot;. </param>
        /// <param name="policyType"></param>
        /// <returns> A new <see cref="Models.AzureIaasVmProtectionPolicy"/> instance for mocking. </returns>
        public static AzureIaasVmProtectionPolicy AzureIaasVmProtectionPolicy(int? protectedItemsCount = null, IEnumerable<string> resourceGuardOperationRequests = null, InstantRPAdditionalDetails instantRPDetails = null, SchedulePolicy schedulePolicy = null, RetentionPolicy retentionPolicy = null, IDictionary<string, TieringPolicy> tieringPolicy = null, int? instantRpRetentionRangeInDays = null, string timeZone = null, IaasVmPolicyType? policyType = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            tieringPolicy ??= new Dictionary<string, TieringPolicy>();

            return new AzureIaasVmProtectionPolicy(protectedItemsCount, "AzureIaasVM", resourceGuardOperationRequests?.ToList(), instantRPDetails, schedulePolicy, retentionPolicy, tieringPolicy, instantRpRetentionRangeInDays, timeZone, policyType);
        }

        /// <summary> Initializes a new instance of InstantRPAdditionalDetails. </summary>
        /// <param name="azureBackupRGNamePrefix"></param>
        /// <param name="azureBackupRGNameSuffix"></param>
        /// <returns> A new <see cref="Models.InstantRPAdditionalDetails"/> instance for mocking. </returns>
        public static InstantRPAdditionalDetails InstantRPAdditionalDetails(string azureBackupRGNamePrefix = null, string azureBackupRGNameSuffix = null)
        {
            return new InstantRPAdditionalDetails(azureBackupRGNamePrefix, azureBackupRGNameSuffix);
        }

        /// <summary> Initializes a new instance of AzureSqlProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="protectedItemDataId"> Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services. </param>
        /// <param name="protectionState"> Backup state of the backed up item. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <returns> A new <see cref="Models.AzureSqlProtectedItem"/> instance for mocking. </returns>
        public static AzureSqlProtectedItem AzureSqlProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string protectedItemDataId = null, ProtectedItemState? protectionState = null, AzureSqlProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new AzureSqlProtectedItem("Microsoft.Sql/servers/databases", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, protectedItemDataId, protectionState, extendedInfo);
        }

        /// <summary> Initializes a new instance of AzureSqlProtectedItemExtendedInfo. </summary>
        /// <param name="oldestRecoveryPoint"> The oldest backup copy available for this item in the service. </param>
        /// <param name="recoveryPointCount"> Number of available backup copies associated with this backup item. </param>
        /// <param name="policyState"> State of the backup policy associated with this backup item. </param>
        /// <returns> A new <see cref="Models.AzureSqlProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static AzureSqlProtectedItemExtendedInfo AzureSqlProtectedItemExtendedInfo(DateTimeOffset? oldestRecoveryPoint = null, int? recoveryPointCount = null, string policyState = null)
        {
            return new AzureSqlProtectedItemExtendedInfo(oldestRecoveryPoint, recoveryPointCount, policyState);
        }

        /// <summary> Initializes a new instance of AzureStorageErrorInfo. </summary>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations for above error code. </param>
        /// <returns> A new <see cref="Models.AzureStorageErrorInfo"/> instance for mocking. </returns>
        public static AzureStorageErrorInfo AzureStorageErrorInfo(int? errorCode = null, string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new AzureStorageErrorInfo(errorCode, errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureSqlProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="retentionPolicy">
        /// Retention policy details.
        /// Please note <see cref="RetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LongTermRetentionPolicy"/> and <see cref="SimpleRetentionPolicy"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AzureSqlProtectionPolicy"/> instance for mocking. </returns>
        public static AzureSqlProtectionPolicy AzureSqlProtectionPolicy(int? protectedItemsCount = null, IEnumerable<string> resourceGuardOperationRequests = null, RetentionPolicy retentionPolicy = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new AzureSqlProtectionPolicy(protectedItemsCount, "AzureSql", resourceGuardOperationRequests?.ToList(), retentionPolicy);
        }

        /// <summary> Initializes a new instance of AzureStorageJob. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="duration"> Time elapsed during the execution of this job. </param>
        /// <param name="actionsInfo"> Gets or sets the state/actions applicable on this job like cancel/retry. </param>
        /// <param name="errorDetails"> Error details on execution of this job. </param>
        /// <param name="storageAccountName"> Specifies friendly name of the storage account. </param>
        /// <param name="storageAccountVersion"> Specifies whether the Storage account is a Classic or an Azure Resource Manager Storage account. </param>
        /// <param name="extendedInfo"> Additional information about the job. </param>
        /// <param name="isUserTriggered"> Indicated that whether the job is adhoc(true) or scheduled(false). </param>
        /// <returns> A new <see cref="Models.AzureStorageJob"/> instance for mocking. </returns>
        public static AzureStorageJob AzureStorageJob(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, TimeSpan? duration = null, IEnumerable<JobSupportedAction> actionsInfo = null, IEnumerable<AzureStorageErrorInfo> errorDetails = null, string storageAccountName = null, string storageAccountVersion = null, AzureStorageJobExtendedInfo extendedInfo = null, bool? isUserTriggered = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<AzureStorageErrorInfo>();

            return new AzureStorageJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "AzureStorageJob", duration, actionsInfo?.ToList(), errorDetails?.ToList(), storageAccountName, storageAccountVersion, extendedInfo, isUserTriggered);
        }

        /// <summary> Initializes a new instance of AzureStorageJobExtendedInfo. </summary>
        /// <param name="tasksList"> List of tasks for this job. </param>
        /// <param name="propertyBag"> Job properties. </param>
        /// <param name="dynamicErrorMessage"> Non localized error message on job execution. </param>
        /// <returns> A new <see cref="Models.AzureStorageJobExtendedInfo"/> instance for mocking. </returns>
        public static AzureStorageJobExtendedInfo AzureStorageJobExtendedInfo(IEnumerable<AzureStorageJobTaskDetails> tasksList = null, IDictionary<string, string> propertyBag = null, string dynamicErrorMessage = null)
        {
            tasksList ??= new List<AzureStorageJobTaskDetails>();
            propertyBag ??= new Dictionary<string, string>();

            return new AzureStorageJobExtendedInfo(tasksList?.ToList(), propertyBag, dynamicErrorMessage);
        }

        /// <summary> Initializes a new instance of AzureStorageJobTaskDetails. </summary>
        /// <param name="taskId"> The task display name. </param>
        /// <param name="status"> The status. </param>
        /// <returns> A new <see cref="Models.AzureStorageJobTaskDetails"/> instance for mocking. </returns>
        public static AzureStorageJobTaskDetails AzureStorageJobTaskDetails(string taskId = null, string status = null)
        {
            return new AzureStorageJobTaskDetails(taskId, status);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadProtectedItem AzureVmWorkloadProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadProtectedItem("AzureVmWorkloadProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadProtectedItemExtendedInfo. </summary>
        /// <param name="oldestRecoveryPoint"> The oldest backup copy available for this backup item across all tiers. </param>
        /// <param name="oldestRecoveryPointInVault"> The oldest backup copy available for this backup item in vault tier. </param>
        /// <param name="oldestRecoveryPointInArchive"> The oldest backup copy available for this backup item in archive tier. </param>
        /// <param name="newestRecoveryPointInArchive"> The latest backup copy available for this backup item in archive tier. </param>
        /// <param name="recoveryPointCount"> Number of backup copies available for this backup item. </param>
        /// <param name="policyState"> Indicates consistency of policy object and policy applied to this backup item. </param>
        /// <param name="recoveryModel"> Indicates consistency of policy object and policy applied to this backup item. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static AzureVmWorkloadProtectedItemExtendedInfo AzureVmWorkloadProtectedItemExtendedInfo(DateTimeOffset? oldestRecoveryPoint = null, DateTimeOffset? oldestRecoveryPointInVault = null, DateTimeOffset? oldestRecoveryPointInArchive = null, DateTimeOffset? newestRecoveryPointInArchive = null, int? recoveryPointCount = null, string policyState = null, string recoveryModel = null)
        {
            return new AzureVmWorkloadProtectedItemExtendedInfo(oldestRecoveryPoint, oldestRecoveryPointInVault, oldestRecoveryPointInArchive, newestRecoveryPointInArchive, recoveryPointCount, policyState, recoveryModel);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPAseDatabaseProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPAseDatabaseProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPAseDatabaseProtectedItem AzureVmWorkloadSAPAseDatabaseProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSAPAseDatabaseProtectedItem("AzureVmWorkloadSAPAseDatabase", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDatabaseProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDatabaseProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDatabaseProtectedItem AzureVmWorkloadSAPHanaDatabaseProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSAPHanaDatabaseProtectedItem("AzureVmWorkloadSAPHanaDatabase", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDBInstanceProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDBInstanceProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDBInstanceProtectedItem AzureVmWorkloadSAPHanaDBInstanceProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSAPHanaDBInstanceProtectedItem("AzureVmWorkloadSAPHanaDBInstance", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLDatabaseProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the DB represented by this backup item. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="parentName"> Parent name of the DB such as Instance or Availability Group. </param>
        /// <param name="parentType"> Parent type of protected item, example: for a DB, standalone server or distributed. </param>
        /// <param name="protectionStatus"> Backup status of this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="lastBackupStatus"> Last backup operation status. Possible values: Healthy, Unhealthy. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="lastBackupErrorDetail"> Error details in last backup. </param>
        /// <param name="protectedItemDataSourceId"> Data ID of the protected item. </param>
        /// <param name="protectedItemHealthStatus"> Health status of the backup item, evaluated based on last heartbeat received. </param>
        /// <param name="extendedInfo"> Additional information for this backup item. </param>
        /// <param name="kpisHealths"> Health details of different KPIs. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLDatabaseProtectedItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLDatabaseProtectedItem AzureVmWorkloadSQLDatabaseProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string serverName = null, string parentName = null, string parentType = null, string protectionStatus = null, ProtectionState? protectionState = null, LastBackupStatus? lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, ErrorDetail lastBackupErrorDetail = null, string protectedItemDataSourceId = null, ProtectedItemHealthStatus? protectedItemHealthStatus = null, AzureVmWorkloadProtectedItemExtendedInfo extendedInfo = null, IDictionary<string, KPIResourceHealthDetails> kpisHealths = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            kpisHealths ??= new Dictionary<string, KPIResourceHealthDetails>();

            return new AzureVmWorkloadSQLDatabaseProtectedItem("AzureVmWorkloadSQLDatabase", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, serverName, parentName, parentType, protectionStatus, protectionState, lastBackupStatus, lastBackupOn, lastBackupErrorDetail, protectedItemDataSourceId, protectedItemHealthStatus, extendedInfo, kpisHealths);
        }

        /// <summary> Initializes a new instance of AzureWorkloadErrorInfo. </summary>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="errorTitle"> Title: Typically, the entity that the error pertains to. </param>
        /// <param name="recommendations"> List of localized recommendations for above error code. </param>
        /// <param name="additionalDetails"> Additional details for above error code. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadErrorInfo"/> instance for mocking. </returns>
        public static AzureWorkloadErrorInfo AzureWorkloadErrorInfo(int? errorCode = null, string errorString = null, string errorTitle = null, IEnumerable<string> recommendations = null, string additionalDetails = null)
        {
            recommendations ??= new List<string>();

            return new AzureWorkloadErrorInfo(errorCode, errorString, errorTitle, recommendations?.ToList(), additionalDetails);
        }

        /// <summary> Initializes a new instance of AzureWorkloadJob. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="workloadType"> Workload type of the job. </param>
        /// <param name="duration"> Time elapsed during the execution of this job. </param>
        /// <param name="actionsInfo"> Gets or sets the state/actions applicable on this job like cancel/retry. </param>
        /// <param name="errorDetails"> Error details on execution of this job. </param>
        /// <param name="extendedInfo"> Additional information about the job. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadJob"/> instance for mocking. </returns>
        public static AzureWorkloadJob AzureWorkloadJob(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, string workloadType = null, TimeSpan? duration = null, IEnumerable<JobSupportedAction> actionsInfo = null, IEnumerable<AzureWorkloadErrorInfo> errorDetails = null, AzureWorkloadJobExtendedInfo extendedInfo = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<AzureWorkloadErrorInfo>();

            return new AzureWorkloadJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "AzureWorkloadJob", workloadType, duration, actionsInfo?.ToList(), errorDetails?.ToList(), extendedInfo);
        }

        /// <summary> Initializes a new instance of AzureWorkloadJobExtendedInfo. </summary>
        /// <param name="tasksList"> List of tasks for this job. </param>
        /// <param name="propertyBag"> Job properties. </param>
        /// <param name="dynamicErrorMessage"> Non localized error message on job execution. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadJobExtendedInfo"/> instance for mocking. </returns>
        public static AzureWorkloadJobExtendedInfo AzureWorkloadJobExtendedInfo(IEnumerable<AzureWorkloadJobTaskDetails> tasksList = null, IDictionary<string, string> propertyBag = null, string dynamicErrorMessage = null)
        {
            tasksList ??= new List<AzureWorkloadJobTaskDetails>();
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadJobExtendedInfo(tasksList?.ToList(), propertyBag, dynamicErrorMessage);
        }

        /// <summary> Initializes a new instance of AzureWorkloadJobTaskDetails. </summary>
        /// <param name="taskId"> The task display name. </param>
        /// <param name="status"> The status. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadJobTaskDetails"/> instance for mocking. </returns>
        public static AzureWorkloadJobTaskDetails AzureWorkloadJobTaskDetails(string taskId = null, string status = null)
        {
            return new AzureWorkloadJobTaskDetails(taskId, status);
        }

        /// <summary> Initializes a new instance of AzureWorkloadPointInTimeRecoveryPoint. </summary>
        /// <param name="recoveryPointTimeInUTC"> UTC time at which recovery point was created. </param>
        /// <param name="restorePointType"> Type of restore point. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <param name="timeRanges"> List of log ranges. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadPointInTimeRecoveryPoint"/> instance for mocking. </returns>
        public static AzureWorkloadPointInTimeRecoveryPoint AzureWorkloadPointInTimeRecoveryPoint(DateTimeOffset? recoveryPointTimeInUTC = null, RestorePointType? restorePointType = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null, IEnumerable<PointInTimeRange> timeRanges = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();
            timeRanges ??= new List<PointInTimeRange>();

            return new AzureWorkloadPointInTimeRecoveryPoint("AzureWorkloadPointInTimeRecoveryPoint", recoveryPointTimeInUTC, restorePointType, recoveryPointTierDetails?.ToList(), recoveryPointMoveReadinessInfo, timeRanges?.ToList());
        }

        /// <summary> Initializes a new instance of PointInTimeRange. </summary>
        /// <param name="startOn"> Start time of the time range for log recovery. </param>
        /// <param name="endOn"> End time of the time range for log recovery. </param>
        /// <returns> A new <see cref="Models.PointInTimeRange"/> instance for mocking. </returns>
        public static PointInTimeRange PointInTimeRange(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null)
        {
            return new PointInTimeRange(startOn, endOn);
        }

        /// <summary> Initializes a new instance of AzureWorkloadRecoveryPoint. </summary>
        /// <param name="recoveryPointTimeInUTC"> UTC time at which recovery point was created. </param>
        /// <param name="restorePointType"> Type of restore point. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadRecoveryPoint"/> instance for mocking. </returns>
        public static AzureWorkloadRecoveryPoint AzureWorkloadRecoveryPoint(DateTimeOffset? recoveryPointTimeInUTC = null, RestorePointType? restorePointType = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();

            return new AzureWorkloadRecoveryPoint("AzureWorkloadRecoveryPoint", recoveryPointTimeInUTC, restorePointType, recoveryPointTierDetails?.ToList(), recoveryPointMoveReadinessInfo);
        }

        /// <summary> Initializes a new instance of RecoveryPointTierInformationV2. </summary>
        /// <param name="tierType"> Recovery point tier type. </param>
        /// <param name="status"> Recovery point tier status. </param>
        /// <param name="extendedInfo"> Recovery point tier status. </param>
        /// <returns> A new <see cref="Models.RecoveryPointTierInformationV2"/> instance for mocking. </returns>
        public static RecoveryPointTierInformationV2 RecoveryPointTierInformationV2(RecoveryPointTierType? tierType = null, RecoveryPointTierStatus? status = null, IDictionary<string, string> extendedInfo = null)
        {
            extendedInfo ??= new Dictionary<string, string>();

            return new RecoveryPointTierInformationV2(tierType, status, extendedInfo);
        }

        /// <summary> Initializes a new instance of RecoveryPointTierInformation. </summary>
        /// <param name="tierType"> Recovery point tier type. </param>
        /// <param name="status"> Recovery point tier status. </param>
        /// <param name="extendedInfo"> Recovery point tier status. </param>
        /// <returns> A new <see cref="Models.RecoveryPointTierInformation"/> instance for mocking. </returns>
        public static RecoveryPointTierInformation RecoveryPointTierInformation(RecoveryPointTierType? tierType = null, RecoveryPointTierStatus? status = null, IDictionary<string, string> extendedInfo = null)
        {
            extendedInfo ??= new Dictionary<string, string>();

            return new RecoveryPointTierInformation(tierType, status, extendedInfo);
        }

        /// <summary> Initializes a new instance of RecoveryPointMoveReadinessInfo. </summary>
        /// <param name="isReadyForMove"></param>
        /// <param name="additionalInfo"></param>
        /// <returns> A new <see cref="Models.RecoveryPointMoveReadinessInfo"/> instance for mocking. </returns>
        public static RecoveryPointMoveReadinessInfo RecoveryPointMoveReadinessInfo(bool? isReadyForMove = null, string additionalInfo = null)
        {
            return new RecoveryPointMoveReadinessInfo(isReadyForMove, additionalInfo);
        }

        /// <summary> Initializes a new instance of AzureWorkloadPointInTimeRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="pointInTime"> PointInTime value. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadPointInTimeRestoreRequest"/> instance for mocking. </returns>
        public static AzureWorkloadPointInTimeRestoreRequest AzureWorkloadPointInTimeRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, DateTimeOffset? pointInTime = null)
        {
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadPointInTimeRestoreRequest("AzureWorkloadPointInTimeRestoreRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, pointInTime);
        }

        /// <summary> Initializes a new instance of AzureWorkloadRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <returns> A new <see cref="Models.AzureWorkloadRestoreRequest"/> instance for mocking. </returns>
        public static AzureWorkloadRestoreRequest AzureWorkloadRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null)
        {
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadRestoreRequest("AzureWorkloadRestoreRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId);
        }

        /// <summary> Initializes a new instance of TargetRestoreInfo. </summary>
        /// <param name="overwriteOption"> Can Overwrite if Target DataBase already exists. </param>
        /// <param name="containerId"> Resource Id name of the container in which Target DataBase resides. </param>
        /// <param name="databaseName"> Database name InstanceName/DataBaseName for SQL or System/DbName for SAP Hana. </param>
        /// <param name="targetDirectoryForFileRestore"> Target directory location for restore as files. </param>
        /// <returns> A new <see cref="Models.TargetRestoreInfo"/> instance for mocking. </returns>
        public static TargetRestoreInfo TargetRestoreInfo(OverwriteOption? overwriteOption = null, string containerId = null, string databaseName = null, string targetDirectoryForFileRestore = null)
        {
            return new TargetRestoreInfo(overwriteOption, containerId, databaseName, targetDirectoryForFileRestore);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSAPHanaPointInTimeRecoveryPoint. </summary>
        /// <param name="recoveryPointTimeInUTC"> UTC time at which recovery point was created. </param>
        /// <param name="restorePointType"> Type of restore point. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <param name="timeRanges"> List of log ranges. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSAPHanaPointInTimeRecoveryPoint"/> instance for mocking. </returns>
        public static AzureWorkloadSAPHanaPointInTimeRecoveryPoint AzureWorkloadSAPHanaPointInTimeRecoveryPoint(DateTimeOffset? recoveryPointTimeInUTC = null, RestorePointType? restorePointType = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null, IEnumerable<PointInTimeRange> timeRanges = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();
            timeRanges ??= new List<PointInTimeRange>();

            return new AzureWorkloadSAPHanaPointInTimeRecoveryPoint("AzureWorkloadSAPHanaPointInTimeRecoveryPoint", recoveryPointTimeInUTC, restorePointType, recoveryPointTierDetails?.ToList(), recoveryPointMoveReadinessInfo, timeRanges?.ToList());
        }

        /// <summary> Initializes a new instance of AzureWorkloadSAPHanaPointInTimeRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="pointInTime"> PointInTime value. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSAPHanaPointInTimeRestoreRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSAPHanaPointInTimeRestoreRequest AzureWorkloadSAPHanaPointInTimeRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, DateTimeOffset? pointInTime = null)
        {
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadSAPHanaPointInTimeRestoreRequest("AzureWorkloadSAPHanaPointInTimeRestoreRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, pointInTime);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSAPHanaRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSAPHanaRestoreRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSAPHanaRestoreRequest AzureWorkloadSAPHanaRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null)
        {
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadSAPHanaRestoreRequest("AzureWorkloadSAPHanaRestoreRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSAPHanaRecoveryPoint. </summary>
        /// <param name="recoveryPointTimeInUTC"> UTC time at which recovery point was created. </param>
        /// <param name="restorePointType"> Type of restore point. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSAPHanaRecoveryPoint"/> instance for mocking. </returns>
        public static AzureWorkloadSAPHanaRecoveryPoint AzureWorkloadSAPHanaRecoveryPoint(DateTimeOffset? recoveryPointTimeInUTC = null, RestorePointType? restorePointType = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();

            return new AzureWorkloadSAPHanaRecoveryPoint("AzureWorkloadSAPHanaRecoveryPoint", recoveryPointTimeInUTC, restorePointType, recoveryPointTierDetails?.ToList(), recoveryPointMoveReadinessInfo);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLPointInTimeRecoveryPoint. </summary>
        /// <param name="recoveryPointTimeInUTC"> UTC time at which recovery point was created. </param>
        /// <param name="restorePointType"> Type of restore point. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <param name="extendedInfo">
        /// Extended Info that provides data directory details. Will be populated in two cases:
        /// When a specific recovery point is accessed using GetRecoveryPoint
        /// Or when ListRecoveryPoints is called for Log RP only with ExtendedInfo query filter
        /// </param>
        /// <param name="timeRanges"> List of log ranges. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLPointInTimeRecoveryPoint"/> instance for mocking. </returns>
        public static AzureWorkloadSQLPointInTimeRecoveryPoint AzureWorkloadSQLPointInTimeRecoveryPoint(DateTimeOffset? recoveryPointTimeInUTC = null, RestorePointType? restorePointType = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null, AzureWorkloadSQLRecoveryPointExtendedInfo extendedInfo = null, IEnumerable<PointInTimeRange> timeRanges = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();
            timeRanges ??= new List<PointInTimeRange>();

            return new AzureWorkloadSQLPointInTimeRecoveryPoint("AzureWorkloadSQLPointInTimeRecoveryPoint", recoveryPointTimeInUTC, restorePointType, recoveryPointTierDetails?.ToList(), recoveryPointMoveReadinessInfo, extendedInfo, timeRanges?.ToList());
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLRecoveryPoint. </summary>
        /// <param name="recoveryPointTimeInUTC"> UTC time at which recovery point was created. </param>
        /// <param name="restorePointType"> Type of restore point. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <param name="extendedInfo">
        /// Extended Info that provides data directory details. Will be populated in two cases:
        /// When a specific recovery point is accessed using GetRecoveryPoint
        /// Or when ListRecoveryPoints is called for Log RP only with ExtendedInfo query filter
        /// </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLRecoveryPoint"/> instance for mocking. </returns>
        public static AzureWorkloadSQLRecoveryPoint AzureWorkloadSQLRecoveryPoint(DateTimeOffset? recoveryPointTimeInUTC = null, RestorePointType? restorePointType = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null, AzureWorkloadSQLRecoveryPointExtendedInfo extendedInfo = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();

            return new AzureWorkloadSQLRecoveryPoint("AzureWorkloadSQLRecoveryPoint", recoveryPointTimeInUTC, restorePointType, recoveryPointTierDetails?.ToList(), recoveryPointMoveReadinessInfo, extendedInfo);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLRecoveryPointExtendedInfo. </summary>
        /// <param name="dataDirectoryTimeInUTC"> UTC time at which data directory info was captured. </param>
        /// <param name="dataDirectoryPaths"> List of data directory paths during restore operation. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLRecoveryPointExtendedInfo"/> instance for mocking. </returns>
        public static AzureWorkloadSQLRecoveryPointExtendedInfo AzureWorkloadSQLRecoveryPointExtendedInfo(DateTimeOffset? dataDirectoryTimeInUTC = null, IEnumerable<SQLDataDirectory> dataDirectoryPaths = null)
        {
            dataDirectoryPaths ??= new List<SQLDataDirectory>();

            return new AzureWorkloadSQLRecoveryPointExtendedInfo(dataDirectoryTimeInUTC, dataDirectoryPaths?.ToList());
        }

        /// <summary> Initializes a new instance of SQLDataDirectory. </summary>
        /// <param name="directoryType"> Type of data directory mapping. </param>
        /// <param name="path"> File path. </param>
        /// <param name="logicalName"> Logical name of the file. </param>
        /// <returns> A new <see cref="Models.SQLDataDirectory"/> instance for mocking. </returns>
        public static SQLDataDirectory SQLDataDirectory(SQLDataDirectoryType? directoryType = null, string path = null, string logicalName = null)
        {
            return new SQLDataDirectory(directoryType, path, logicalName);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLPointInTimeRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="shouldUseAlternateTargetLocation"> Default option set to true. If this is set to false, alternate data directory must be provided. </param>
        /// <param name="isNonRecoverable"> SQL specific property where user can chose to set no-recovery when restore operation is tried. </param>
        /// <param name="alternateDirectoryPaths"> Data directory details. </param>
        /// <param name="pointInTime"> PointInTime value. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLPointInTimeRestoreRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSQLPointInTimeRestoreRequest AzureWorkloadSQLPointInTimeRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, bool? shouldUseAlternateTargetLocation = null, bool? isNonRecoverable = null, IEnumerable<SQLDataDirectoryMapping> alternateDirectoryPaths = null, DateTimeOffset? pointInTime = null)
        {
            propertyBag ??= new Dictionary<string, string>();
            alternateDirectoryPaths ??= new List<SQLDataDirectoryMapping>();

            return new AzureWorkloadSQLPointInTimeRestoreRequest("AzureWorkloadSQLPointInTimeRestoreRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, shouldUseAlternateTargetLocation, isNonRecoverable, alternateDirectoryPaths?.ToList(), pointInTime);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLRestoreRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="shouldUseAlternateTargetLocation"> Default option set to true. If this is set to false, alternate data directory must be provided. </param>
        /// <param name="isNonRecoverable"> SQL specific property where user can chose to set no-recovery when restore operation is tried. </param>
        /// <param name="alternateDirectoryPaths"> Data directory details. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLRestoreRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSQLRestoreRequest AzureWorkloadSQLRestoreRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, bool? shouldUseAlternateTargetLocation = null, bool? isNonRecoverable = null, IEnumerable<SQLDataDirectoryMapping> alternateDirectoryPaths = null)
        {
            propertyBag ??= new Dictionary<string, string>();
            alternateDirectoryPaths ??= new List<SQLDataDirectoryMapping>();

            return new AzureWorkloadSQLRestoreRequest("AzureWorkloadSQLRestoreRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, shouldUseAlternateTargetLocation, isNonRecoverable, alternateDirectoryPaths?.ToList());
        }

        /// <summary> Initializes a new instance of SQLDataDirectoryMapping. </summary>
        /// <param name="mappingType"> Type of data directory mapping. </param>
        /// <param name="sourceLogicalName"> Restore source logical name path. </param>
        /// <param name="sourcePath"> Restore source path. </param>
        /// <param name="targetPath"> Target path. </param>
        /// <returns> A new <see cref="Models.SQLDataDirectoryMapping"/> instance for mocking. </returns>
        public static SQLDataDirectoryMapping SQLDataDirectoryMapping(SQLDataDirectoryType? mappingType = null, string sourceLogicalName = null, string sourcePath = null, string targetPath = null)
        {
            return new SQLDataDirectoryMapping(mappingType, sourceLogicalName, sourcePath, targetPath);
        }

        /// <summary> Initializes a new instance of BEKDetails. </summary>
        /// <param name="secretUri"> Secret is BEK. </param>
        /// <param name="secretVaultId"> ID of the Key Vault where this Secret is stored. </param>
        /// <param name="secretData"> BEK data. </param>
        /// <returns> A new <see cref="Models.BEKDetails"/> instance for mocking. </returns>
        public static BEKDetails BEKDetails(Uri secretUri = null, string secretVaultId = null, string secretData = null)
        {
            return new BEKDetails(secretUri, secretVaultId, secretData);
        }

        /// <summary> Initializes a new instance of DiskInformation. </summary>
        /// <param name="lun"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.DiskInformation"/> instance for mocking. </returns>
        public static DiskInformation DiskInformation(int? lun = null, string name = null)
        {
            return new DiskInformation(lun, name);
        }

        /// <summary> Initializes a new instance of Day. </summary>
        /// <param name="date"> Date of the month. </param>
        /// <param name="isLast"> Whether Date is last date of month. </param>
        /// <returns> A new <see cref="Models.Day"/> instance for mocking. </returns>
        public static Day Day(int? date = null, bool? isLast = null)
        {
            return new Day(date, isLast);
        }

        /// <summary> Initializes a new instance of DailyRetentionSchedule. </summary>
        /// <param name="retentionTimes"> Retention times of retention policy. </param>
        /// <param name="retentionDuration"> Retention duration of retention Policy. </param>
        /// <returns> A new <see cref="Models.DailyRetentionSchedule"/> instance for mocking. </returns>
        public static DailyRetentionSchedule DailyRetentionSchedule(IEnumerable<DateTimeOffset> retentionTimes = null, RetentionDuration retentionDuration = null)
        {
            retentionTimes ??= new List<DateTimeOffset>();

            return new DailyRetentionSchedule(retentionTimes?.ToList(), retentionDuration);
        }

        /// <summary> Initializes a new instance of RetentionDuration. </summary>
        /// <param name="count">
        /// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
        /// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
        /// </param>
        /// <param name="durationType"> Retention duration type of retention policy. </param>
        /// <returns> A new <see cref="Models.RetentionDuration"/> instance for mocking. </returns>
        public static RetentionDuration RetentionDuration(int? count = null, RetentionDurationType? durationType = null)
        {
            return new RetentionDuration(count, durationType);
        }

        /// <summary> Initializes a new instance of DpmErrorInfo. </summary>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations for above error code. </param>
        /// <returns> A new <see cref="Models.DpmErrorInfo"/> instance for mocking. </returns>
        public static DpmErrorInfo DpmErrorInfo(string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new DpmErrorInfo(errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of DpmJob. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="duration"> Time elapsed for job. </param>
        /// <param name="dpmServerName"> DPM server name managing the backup item or backup job. </param>
        /// <param name="containerName"> Name of cluster/server protecting current backup item, if any. </param>
        /// <param name="containerType"> Type of container. </param>
        /// <param name="workloadType"> Type of backup item. </param>
        /// <param name="actionsInfo"> The state/actions applicable on this job like cancel/retry. </param>
        /// <param name="errorDetails"> The errors. </param>
        /// <param name="extendedInfo"> Additional information for this job. </param>
        /// <returns> A new <see cref="Models.DpmJob"/> instance for mocking. </returns>
        public static DpmJob DpmJob(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, TimeSpan? duration = null, string dpmServerName = null, string containerName = null, string containerType = null, string workloadType = null, IEnumerable<JobSupportedAction> actionsInfo = null, IEnumerable<DpmErrorInfo> errorDetails = null, DpmJobExtendedInfo extendedInfo = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<DpmErrorInfo>();

            return new DpmJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "DpmJob", duration, dpmServerName, containerName, containerType, workloadType, actionsInfo?.ToList(), errorDetails?.ToList(), extendedInfo);
        }

        /// <summary> Initializes a new instance of DpmJobExtendedInfo. </summary>
        /// <param name="tasksList"> List of tasks associated with this job. </param>
        /// <param name="propertyBag"> The job properties. </param>
        /// <param name="dynamicErrorMessage"> Non localized error message on job execution. </param>
        /// <returns> A new <see cref="Models.DpmJobExtendedInfo"/> instance for mocking. </returns>
        public static DpmJobExtendedInfo DpmJobExtendedInfo(IEnumerable<DpmJobTaskDetails> tasksList = null, IDictionary<string, string> propertyBag = null, string dynamicErrorMessage = null)
        {
            tasksList ??= new List<DpmJobTaskDetails>();
            propertyBag ??= new Dictionary<string, string>();

            return new DpmJobExtendedInfo(tasksList?.ToList(), propertyBag, dynamicErrorMessage);
        }

        /// <summary> Initializes a new instance of DpmJobTaskDetails. </summary>
        /// <param name="taskId"> The task display name. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="duration"> Time elapsed for task. </param>
        /// <param name="status"> The status. </param>
        /// <returns> A new <see cref="Models.DpmJobTaskDetails"/> instance for mocking. </returns>
        public static DpmJobTaskDetails DpmJobTaskDetails(string taskId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, TimeSpan? duration = null, string status = null)
        {
            return new DpmJobTaskDetails(taskId, startOn, endOn, duration, status);
        }

        /// <summary> Initializes a new instance of DpmProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the managed item. </param>
        /// <param name="backupEngineName"> Backup Management server protecting this backup item. </param>
        /// <param name="protectionState"> Protection state of the backup engine. </param>
        /// <param name="extendedInfo"> Extended info of the backup item. </param>
        /// <returns> A new <see cref="Models.DpmProtectedItem"/> instance for mocking. </returns>
        public static DpmProtectedItem DpmProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string backupEngineName = null, ProtectedItemState? protectionState = null, DpmProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new DpmProtectedItem("DPMProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, backupEngineName, protectionState, extendedInfo);
        }

        /// <summary> Initializes a new instance of DpmProtectedItemExtendedInfo. </summary>
        /// <param name="protectableObjectLoadPath"> Attribute to provide information on various DBs. </param>
        /// <param name="protected"> To check if backup item is disk protected. </param>
        /// <param name="isPresentOnCloud"> To check if backup item is cloud protected. </param>
        /// <param name="lastBackupStatus"> Last backup status information on backup item. </param>
        /// <param name="lastRefreshedOn"> Last refresh time on backup item. </param>
        /// <param name="oldestRecoveryPoint"> Oldest cloud recovery point time. </param>
        /// <param name="recoveryPointCount"> cloud recovery point count. </param>
        /// <param name="onPremiseOldestRecoveryPoint"> Oldest disk recovery point time. </param>
        /// <param name="onPremiseLatestRecoveryPoint"> latest disk recovery point time. </param>
        /// <param name="onPremiseRecoveryPointCount"> disk recovery point count. </param>
        /// <param name="isCollocated"> To check if backup item is collocated. </param>
        /// <param name="protectionGroupName"> Protection group name of the backup item. </param>
        /// <param name="diskStorageUsedInBytes"> Used Disk storage in bytes. </param>
        /// <param name="totalDiskStorageSizeInBytes"> total Disk storage in bytes. </param>
        /// <returns> A new <see cref="Models.DpmProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static DpmProtectedItemExtendedInfo DpmProtectedItemExtendedInfo(IDictionary<string, string> protectableObjectLoadPath = null, bool? @protected = null, bool? isPresentOnCloud = null, string lastBackupStatus = null, DateTimeOffset? lastRefreshedOn = null, DateTimeOffset? oldestRecoveryPoint = null, int? recoveryPointCount = null, DateTimeOffset? onPremiseOldestRecoveryPoint = null, DateTimeOffset? onPremiseLatestRecoveryPoint = null, int? onPremiseRecoveryPointCount = null, bool? isCollocated = null, string protectionGroupName = null, string diskStorageUsedInBytes = null, string totalDiskStorageSizeInBytes = null)
        {
            protectableObjectLoadPath ??= new Dictionary<string, string>();

            return new DpmProtectedItemExtendedInfo(protectableObjectLoadPath, @protected, isPresentOnCloud, lastBackupStatus, lastRefreshedOn, oldestRecoveryPoint, recoveryPointCount, onPremiseOldestRecoveryPoint, onPremiseLatestRecoveryPoint, onPremiseRecoveryPointCount, isCollocated, protectionGroupName, diskStorageUsedInBytes, totalDiskStorageSizeInBytes);
        }

        /// <summary> Initializes a new instance of EncryptionDetails. </summary>
        /// <param name="encryptionEnabled"> Identifies whether this backup copy represents an encrypted VM at the time of backup. </param>
        /// <param name="kekUri"> Key Url. </param>
        /// <param name="secretKeyUri"> Secret Url. </param>
        /// <param name="kekVaultId"> ID of Key Vault where KEK is stored. </param>
        /// <param name="secretKeyVaultId"> ID of Key Vault where Secret is stored. </param>
        /// <returns> A new <see cref="Models.EncryptionDetails"/> instance for mocking. </returns>
        public static EncryptionDetails EncryptionDetails(bool? encryptionEnabled = null, Uri kekUri = null, Uri secretKeyUri = null, string kekVaultId = null, string secretKeyVaultId = null)
        {
            return new EncryptionDetails(encryptionEnabled, kekUri, secretKeyUri, kekVaultId, secretKeyVaultId);
        }

        /// <summary> Initializes a new instance of ExportJobsOperationResultInfo. </summary>
        /// <param name="blobUri"> URL of the blob into which the serialized string of list of jobs is exported. </param>
        /// <param name="blobSasKey"> SAS key to access the blob. It expires in 15 mins. </param>
        /// <param name="excelFileBlobUri"> URL of the blob into which the ExcelFile is uploaded. </param>
        /// <param name="excelFileBlobSasKey"> SAS key to access the blob. It expires in 15 mins. </param>
        /// <returns> A new <see cref="Models.ExportJobsOperationResultInfo"/> instance for mocking. </returns>
        public static ExportJobsOperationResultInfo ExportJobsOperationResultInfo(Uri blobUri = null, string blobSasKey = null, Uri excelFileBlobUri = null, string excelFileBlobSasKey = null)
        {
            return new ExportJobsOperationResultInfo("ExportJobsOperationResultInfo", blobUri, blobSasKey, excelFileBlobUri, excelFileBlobSasKey);
        }

        /// <summary> Initializes a new instance of GenericProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="subProtectionPolicy"> List of sub-protection policies which includes schedule and retention. </param>
        /// <param name="timeZone"> TimeZone optional input as string. For example: TimeZone = &quot;Pacific Standard Time&quot;. </param>
        /// <param name="fabricName"> Name of this policy&apos;s fabric. </param>
        /// <returns> A new <see cref="Models.GenericProtectionPolicy"/> instance for mocking. </returns>
        public static GenericProtectionPolicy GenericProtectionPolicy(int? protectedItemsCount = null, IEnumerable<string> resourceGuardOperationRequests = null, IEnumerable<SubProtectionPolicy> subProtectionPolicy = null, string timeZone = null, string fabricName = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            subProtectionPolicy ??= new List<SubProtectionPolicy>();

            return new GenericProtectionPolicy(protectedItemsCount, "GenericProtectionPolicy", resourceGuardOperationRequests?.ToList(), subProtectionPolicy?.ToList(), timeZone, fabricName);
        }

        /// <summary> Initializes a new instance of HourlySchedule. </summary>
        /// <param name="interval">
        /// Interval at which backup needs to be triggered. For hourly the value
        ///  can be 4/6/8/12
        /// </param>
        /// <param name="scheduleWindowStartOn"> To specify start time of the backup window. </param>
        /// <param name="scheduleWindowDuration"> To specify duration of the backup window. </param>
        /// <returns> A new <see cref="Models.HourlySchedule"/> instance for mocking. </returns>
        public static HourlySchedule HourlySchedule(int? interval = null, DateTimeOffset? scheduleWindowStartOn = null, int? scheduleWindowDuration = null)
        {
            return new HourlySchedule(interval, scheduleWindowStartOn, scheduleWindowDuration);
        }

        /// <summary> Initializes a new instance of WeeklySchedule. </summary>
        /// <param name="scheduleRunDays"></param>
        /// <param name="scheduleRunTimes"> List of times of day this schedule has to be run. </param>
        /// <returns> A new <see cref="Models.WeeklySchedule"/> instance for mocking. </returns>
        public static WeeklySchedule WeeklySchedule(IEnumerable<DayOfWeek> scheduleRunDays = null, IEnumerable<DateTimeOffset> scheduleRunTimes = null)
        {
            scheduleRunDays ??= new List<DayOfWeek>();
            scheduleRunTimes ??= new List<DateTimeOffset>();

            return new WeeklySchedule(scheduleRunDays?.ToList(), scheduleRunTimes?.ToList());
        }

        /// <summary> Initializes a new instance of IdentityBasedRestoreDetails. </summary>
        /// <param name="objectType"> Gets the class type. </param>
        /// <param name="targetStorageAccountId"> Fully qualified ARM ID of the target storage account. </param>
        /// <returns> A new <see cref="Models.IdentityBasedRestoreDetails"/> instance for mocking. </returns>
        public static IdentityBasedRestoreDetails IdentityBasedRestoreDetails(string objectType = null, string targetStorageAccountId = null)
        {
            return new IdentityBasedRestoreDetails(objectType, targetStorageAccountId);
        }

        /// <summary> Initializes a new instance of IdentityInfo. </summary>
        /// <param name="isSystemAssignedIdentity"> To differentiate if the managed identity is system assigned or user assigned. </param>
        /// <param name="managedIdentityResourceId">
        /// Managed Identity Resource Id
        /// Optional: Might not be required in the case of system assigned managed identity
        /// </param>
        /// <returns> A new <see cref="Models.IdentityInfo"/> instance for mocking. </returns>
        public static IdentityInfo IdentityInfo(bool? isSystemAssignedIdentity = null, string managedIdentityResourceId = null)
        {
            return new IdentityInfo(isSystemAssignedIdentity, managedIdentityResourceId);
        }

        /// <summary> Initializes a new instance of GenericProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="policyState"> Indicates consistency of policy object and policy applied to this backup item. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="protectedItemId"> Data Plane Service ID of the protected item. </param>
        /// <param name="sourceAssociations"> Loosely coupled (type, value) associations (example - parent of a protected item). </param>
        /// <param name="fabricName"> Name of this backup item&apos;s fabric. </param>
        /// <returns> A new <see cref="Models.GenericProtectedItem"/> instance for mocking. </returns>
        public static GenericProtectedItem GenericProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string policyState = null, ProtectionState? protectionState = null, long? protectedItemId = null, IDictionary<string, string> sourceAssociations = null, string fabricName = null)
        {
            resourceGuardOperationRequests ??= new List<string>();
            sourceAssociations ??= new Dictionary<string, string>();

            return new GenericProtectedItem("GenericProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, policyState, protectionState, protectedItemId, sourceAssociations, fabricName);
        }

        /// <summary> Initializes a new instance of GenericRecoveryPoint. </summary>
        /// <param name="friendlyName"> Friendly name of the backup copy. </param>
        /// <param name="recoveryPointType"> Type of the backup copy. </param>
        /// <param name="recoveryPointOn"> Time at which this backup copy was created. </param>
        /// <param name="recoveryPointAdditionalInfo"> Additional information associated with this backup copy. </param>
        /// <returns> A new <see cref="Models.GenericRecoveryPoint"/> instance for mocking. </returns>
        public static GenericRecoveryPoint GenericRecoveryPoint(string friendlyName = null, string recoveryPointType = null, DateTimeOffset? recoveryPointOn = null, string recoveryPointAdditionalInfo = null)
        {
            return new GenericRecoveryPoint("GenericRecoveryPoint", friendlyName, recoveryPointType, recoveryPointOn, recoveryPointAdditionalInfo);
        }

        /// <summary> Initializes a new instance of IaasVmRecoveryPoint. </summary>
        /// <param name="recoveryPointType"> Type of the backup copy. </param>
        /// <param name="recoveryPointOn"> Time at which this backup copy was created. </param>
        /// <param name="recoveryPointAdditionalInfo"> Additional information associated with this backup copy. </param>
        /// <param name="sourceVmStorageType"> Storage type of the VM whose backup copy is created. </param>
        /// <param name="isSourceVmEncrypted"> Identifies whether the VM was encrypted when the backup copy is created. </param>
        /// <param name="keyAndSecret"> Required details for recovering an encrypted VM. Applicable only when IsSourceVMEncrypted is true. </param>
        /// <param name="isInstantIlrSessionActive"> Is the session to recover items from this backup copy still active. </param>
        /// <param name="recoveryPointTierDetails"> Recovery point tier information. </param>
        /// <param name="isManagedVirtualMachine"> Whether VM is with Managed Disks. </param>
        /// <param name="virtualMachineSize"> Virtual Machine Size. </param>
        /// <param name="originalStorageAccountOption"> Original Storage Account Option. </param>
        /// <param name="osType"> OS type. </param>
        /// <param name="recoveryPointDiskConfiguration"> Disk configuration. </param>
        /// <param name="zones"> Identifies the zone of the VM at the time of backup. Applicable only for zone-pinned Vms. </param>
        /// <param name="recoveryPointMoveReadinessInfo"> Eligibility of RP to be moved to another tier. </param>
        /// <returns> A new <see cref="Models.IaasVmRecoveryPoint"/> instance for mocking. </returns>
        public static IaasVmRecoveryPoint IaasVmRecoveryPoint(string recoveryPointType = null, DateTimeOffset? recoveryPointOn = null, string recoveryPointAdditionalInfo = null, string sourceVmStorageType = null, bool? isSourceVmEncrypted = null, KeyAndSecretDetails keyAndSecret = null, bool? isInstantIlrSessionActive = null, IEnumerable<RecoveryPointTierInformationV2> recoveryPointTierDetails = null, bool? isManagedVirtualMachine = null, string virtualMachineSize = null, bool? originalStorageAccountOption = null, string osType = null, RecoveryPointDiskConfiguration recoveryPointDiskConfiguration = null, IEnumerable<string> zones = null, IDictionary<string, RecoveryPointMoveReadinessInfo> recoveryPointMoveReadinessInfo = null)
        {
            recoveryPointTierDetails ??= new List<RecoveryPointTierInformationV2>();
            zones ??= new List<string>();
            recoveryPointMoveReadinessInfo ??= new Dictionary<string, RecoveryPointMoveReadinessInfo>();

            return new IaasVmRecoveryPoint("IaasVMRecoveryPoint", recoveryPointType, recoveryPointOn, recoveryPointAdditionalInfo, sourceVmStorageType, isSourceVmEncrypted, keyAndSecret, isInstantIlrSessionActive, recoveryPointTierDetails?.ToList(), isManagedVirtualMachine, virtualMachineSize, originalStorageAccountOption, osType, recoveryPointDiskConfiguration, zones?.ToList(), recoveryPointMoveReadinessInfo);
        }

        /// <summary> Initializes a new instance of KeyAndSecretDetails. </summary>
        /// <param name="kekDetails"> KEK is encryption key for BEK. </param>
        /// <param name="bekDetails"> BEK is bitlocker encryption key. </param>
        /// <param name="encryptionMechanism"> Encryption mechanism: None/ SinglePass/ DoublePass. </param>
        /// <returns> A new <see cref="Models.KeyAndSecretDetails"/> instance for mocking. </returns>
        public static KeyAndSecretDetails KeyAndSecretDetails(KEKDetails kekDetails = null, BEKDetails bekDetails = null, string encryptionMechanism = null)
        {
            return new KeyAndSecretDetails(kekDetails, bekDetails, encryptionMechanism);
        }

        /// <summary> Initializes a new instance of KEKDetails. </summary>
        /// <param name="keyUri"> Key is KEK. </param>
        /// <param name="keyVaultId"> Key Vault ID where this Key is stored. </param>
        /// <param name="keyBackupData"> KEK data. </param>
        /// <returns> A new <see cref="Models.KEKDetails"/> instance for mocking. </returns>
        public static KEKDetails KEKDetails(Uri keyUri = null, string keyVaultId = null, string keyBackupData = null)
        {
            return new KEKDetails(keyUri, keyVaultId, keyBackupData);
        }

        /// <summary> Initializes a new instance of RecoveryPointDiskConfiguration. </summary>
        /// <param name="numberOfDisksIncludedInBackup"> Number of disks included in backup. </param>
        /// <param name="numberOfDisksAttachedToVm"> Number of disks attached to the VM. </param>
        /// <param name="includedDiskList"> Information of disks included in backup. </param>
        /// <param name="excludedDiskList"> Information of disks excluded from backup. </param>
        /// <returns> A new <see cref="Models.RecoveryPointDiskConfiguration"/> instance for mocking. </returns>
        public static RecoveryPointDiskConfiguration RecoveryPointDiskConfiguration(int? numberOfDisksIncludedInBackup = null, int? numberOfDisksAttachedToVm = null, IEnumerable<DiskInformation> includedDiskList = null, IEnumerable<DiskInformation> excludedDiskList = null)
        {
            includedDiskList ??= new List<DiskInformation>();
            excludedDiskList ??= new List<DiskInformation>();

            return new RecoveryPointDiskConfiguration(numberOfDisksIncludedInBackup, numberOfDisksAttachedToVm, includedDiskList?.ToList(), excludedDiskList?.ToList());
        }

        /// <summary> Initializes a new instance of IaasVmRestoreRequest. </summary>
        /// <param name="recoveryPointId"> ID of the backup copy to be recovered. </param>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM which is being recovered. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the VM that will be created.
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="targetResourceGroupId">
        /// This is the ARM Id of the resource group that you want to create for this Virtual machine and other artifacts.
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}
        /// </param>
        /// <param name="storageAccountId"> Fully qualified ARM ID of the storage account to which the VM has to be restored. </param>
        /// <param name="virtualNetworkId">
        /// This is the virtual network Id of the vnet that will be attached to the virtual machine.
        /// User will be validated for join action permissions in the linked access.
        /// </param>
        /// <param name="subnetId">
        /// Subnet ID, is the subnet ID associated with the to be restored VM. For Classic VMs it would be
        /// {VnetID}/Subnet/{SubnetName} and, for the Azure Resource Manager VMs it would be ARM resource ID used to represent
        /// the subnet.
        /// </param>
        /// <param name="targetDomainNameId">
        /// Fully qualified ARM ID of the domain name to be associated to the VM being restored. This applies only to Classic
        /// Virtual Machines.
        /// </param>
        /// <param name="region"> Region in which the virtual machine is restored. </param>
        /// <param name="affinityGroup"> Affinity group associated to VM to be restored. Used only for Classic Compute Virtual Machines. </param>
        /// <param name="createNewCloudService">
        /// Should a new cloud service be created while restoring the VM. If this is false, VM will be restored to the same
        /// cloud service as it was at the time of backup.
        /// </param>
        /// <param name="originalStorageAccountOption"> Original Storage Account Option. </param>
        /// <param name="encryptionDetails"> Details needed if the VM was encrypted at the time of backup. </param>
        /// <param name="restoreDiskLunList"> List of Disk LUNs for partial restore. </param>
        /// <param name="restoreWithManagedDisks"> Flag to denote of an Unmanaged disk VM should be restored with Managed disks. </param>
        /// <param name="diskEncryptionSetId"> DiskEncryptionSet&apos;s ID - needed if the VM needs to be encrypted at rest during restore with customer managed key. </param>
        /// <param name="zones"> Target zone where the VM and its disks should be restored. </param>
        /// <param name="identityInfo"> Managed Identity information required to access customer storage account. </param>
        /// <param name="identityBasedRestoreDetails"> IaaS VM workload specific restore details for restores using managed identity. </param>
        /// <returns> A new <see cref="Models.IaasVmRestoreRequest"/> instance for mocking. </returns>
        public static IaasVmRestoreRequest IaasVmRestoreRequest(string recoveryPointId = null, RecoveryType? recoveryType = null, string sourceResourceId = null, string targetVirtualMachineId = null, string targetResourceGroupId = null, string storageAccountId = null, string virtualNetworkId = null, string subnetId = null, string targetDomainNameId = null, string region = null, string affinityGroup = null, bool? createNewCloudService = null, bool? originalStorageAccountOption = null, EncryptionDetails encryptionDetails = null, IEnumerable<int> restoreDiskLunList = null, bool? restoreWithManagedDisks = null, string diskEncryptionSetId = null, IEnumerable<string> zones = null, IdentityInfo identityInfo = null, IdentityBasedRestoreDetails identityBasedRestoreDetails = null)
        {
            restoreDiskLunList ??= new List<int>();
            zones ??= new List<string>();

            return new IaasVmRestoreRequest("IaasVMRestoreRequest", recoveryPointId, recoveryType, sourceResourceId, targetVirtualMachineId, targetResourceGroupId, storageAccountId, virtualNetworkId, subnetId, targetDomainNameId, region, affinityGroup, createNewCloudService, originalStorageAccountOption, encryptionDetails, restoreDiskLunList?.ToList(), restoreWithManagedDisks, diskEncryptionSetId, zones?.ToList(), identityInfo, identityBasedRestoreDetails);
        }

        /// <summary> Initializes a new instance of LogSchedulePolicy. </summary>
        /// <param name="scheduleFrequencyInMins"> Frequency of the log schedule operation of this policy in minutes. </param>
        /// <returns> A new <see cref="Models.LogSchedulePolicy"/> instance for mocking. </returns>
        public static LogSchedulePolicy LogSchedulePolicy(int? scheduleFrequencyInMins = null)
        {
            return new LogSchedulePolicy("LogSchedulePolicy", scheduleFrequencyInMins);
        }

        /// <summary> Initializes a new instance of LongTermRetentionPolicy. </summary>
        /// <param name="dailySchedule"> Daily retention schedule of the protection policy. </param>
        /// <param name="weeklySchedule"> Weekly retention schedule of the protection policy. </param>
        /// <param name="monthlySchedule"> Monthly retention schedule of the protection policy. </param>
        /// <param name="yearlySchedule"> Yearly retention schedule of the protection policy. </param>
        /// <returns> A new <see cref="Models.LongTermRetentionPolicy"/> instance for mocking. </returns>
        public static LongTermRetentionPolicy LongTermRetentionPolicy(DailyRetentionSchedule dailySchedule = null, WeeklyRetentionSchedule weeklySchedule = null, MonthlyRetentionSchedule monthlySchedule = null, YearlyRetentionSchedule yearlySchedule = null)
        {
            return new LongTermRetentionPolicy("LongTermRetentionPolicy", dailySchedule, weeklySchedule, monthlySchedule, yearlySchedule);
        }

        /// <summary> Initializes a new instance of WeeklyRetentionSchedule. </summary>
        /// <param name="daysOfTheWeek"> List of days of week for weekly retention policy. </param>
        /// <param name="retentionTimes"> Retention times of retention policy. </param>
        /// <param name="retentionDuration"> Retention duration of retention Policy. </param>
        /// <returns> A new <see cref="Models.WeeklyRetentionSchedule"/> instance for mocking. </returns>
        public static WeeklyRetentionSchedule WeeklyRetentionSchedule(IEnumerable<DayOfWeek> daysOfTheWeek = null, IEnumerable<DateTimeOffset> retentionTimes = null, RetentionDuration retentionDuration = null)
        {
            daysOfTheWeek ??= new List<DayOfWeek>();
            retentionTimes ??= new List<DateTimeOffset>();

            return new WeeklyRetentionSchedule(daysOfTheWeek?.ToList(), retentionTimes?.ToList(), retentionDuration);
        }

        /// <summary> Initializes a new instance of MonthlyRetentionSchedule. </summary>
        /// <param name="retentionScheduleFormatType"> Retention schedule format type for monthly retention policy. </param>
        /// <param name="retentionScheduleDailyDaysOfTheMonth"> Daily retention format for monthly retention policy. </param>
        /// <param name="retentionScheduleWeekly"> Weekly retention format for monthly retention policy. </param>
        /// <param name="retentionTimes"> Retention times of retention policy. </param>
        /// <param name="retentionDuration"> Retention duration of retention Policy. </param>
        /// <returns> A new <see cref="Models.MonthlyRetentionSchedule"/> instance for mocking. </returns>
        public static MonthlyRetentionSchedule MonthlyRetentionSchedule(RetentionScheduleFormat? retentionScheduleFormatType = null, IEnumerable<Day> retentionScheduleDailyDaysOfTheMonth = null, WeeklyRetentionFormat retentionScheduleWeekly = null, IEnumerable<DateTimeOffset> retentionTimes = null, RetentionDuration retentionDuration = null)
        {
            retentionScheduleDailyDaysOfTheMonth ??= new List<Day>();
            retentionTimes ??= new List<DateTimeOffset>();

            return new MonthlyRetentionSchedule(retentionScheduleFormatType, retentionScheduleDailyDaysOfTheMonth != null ? new DailyRetentionFormat(retentionScheduleDailyDaysOfTheMonth?.ToList()) : null, retentionScheduleWeekly, retentionTimes?.ToList(), retentionDuration);
        }

        /// <summary> Initializes a new instance of WeeklyRetentionFormat. </summary>
        /// <param name="daysOfTheWeek"> List of days of the week. </param>
        /// <param name="weeksOfTheMonth"> List of weeks of month. </param>
        /// <returns> A new <see cref="Models.WeeklyRetentionFormat"/> instance for mocking. </returns>
        public static WeeklyRetentionFormat WeeklyRetentionFormat(IEnumerable<DayOfWeek> daysOfTheWeek = null, IEnumerable<WeekOfMonth> weeksOfTheMonth = null)
        {
            daysOfTheWeek ??= new List<DayOfWeek>();
            weeksOfTheMonth ??= new List<WeekOfMonth>();

            return new WeeklyRetentionFormat(daysOfTheWeek?.ToList(), weeksOfTheMonth?.ToList());
        }

        /// <summary> Initializes a new instance of YearlyRetentionSchedule. </summary>
        /// <param name="retentionScheduleFormatType"> Retention schedule format for yearly retention policy. </param>
        /// <param name="monthsOfYear"> List of months of year of yearly retention policy. </param>
        /// <param name="retentionScheduleDailyDaysOfTheMonth"> Daily retention format for yearly retention policy. </param>
        /// <param name="retentionScheduleWeekly"> Weekly retention format for yearly retention policy. </param>
        /// <param name="retentionTimes"> Retention times of retention policy. </param>
        /// <param name="retentionDuration"> Retention duration of retention Policy. </param>
        /// <returns> A new <see cref="Models.YearlyRetentionSchedule"/> instance for mocking. </returns>
        public static YearlyRetentionSchedule YearlyRetentionSchedule(RetentionScheduleFormat? retentionScheduleFormatType = null, IEnumerable<MonthOfYear> monthsOfYear = null, IEnumerable<Day> retentionScheduleDailyDaysOfTheMonth = null, WeeklyRetentionFormat retentionScheduleWeekly = null, IEnumerable<DateTimeOffset> retentionTimes = null, RetentionDuration retentionDuration = null)
        {
            monthsOfYear ??= new List<MonthOfYear>();
            retentionScheduleDailyDaysOfTheMonth ??= new List<Day>();
            retentionTimes ??= new List<DateTimeOffset>();

            return new YearlyRetentionSchedule(retentionScheduleFormatType, monthsOfYear?.ToList(), retentionScheduleDailyDaysOfTheMonth != null ? new DailyRetentionFormat(retentionScheduleDailyDaysOfTheMonth?.ToList()) : null, retentionScheduleWeekly, retentionTimes?.ToList(), retentionDuration);
        }

        /// <summary> Initializes a new instance of LongTermSchedulePolicy. </summary>
        /// <returns> A new <see cref="Models.LongTermSchedulePolicy"/> instance for mocking. </returns>
        public static LongTermSchedulePolicy LongTermSchedulePolicy()
        {
            return new LongTermSchedulePolicy("LongTermSchedulePolicy");
        }

        /// <summary> Initializes a new instance of MabErrorInfo. </summary>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations. </param>
        /// <returns> A new <see cref="Models.MabErrorInfo"/> instance for mocking. </returns>
        public static MabErrorInfo MabErrorInfo(string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new MabErrorInfo(errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of MabFileFolderProtectedItem. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="workloadType"> Type of workload this item represents. </param>
        /// <param name="containerName"> Unique name of container. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="lastRecoveryPoint"> Timestamp when the last (latest) backup copy was created for this backup item. </param>
        /// <param name="backupSetName"> Name of the backup set the backup item belongs to. </param>
        /// <param name="createMode"> Create mode to indicate recovery of existing soft deleted data source or creation of new data source. </param>
        /// <param name="deferredDeleteTimeInUTC"> Time for deferred deletion in UTC. </param>
        /// <param name="isScheduledForDeferredDelete"> Flag to identify whether the DS is scheduled for deferred delete. </param>
        /// <param name="deferredDeleteTimeRemaining"> Time remaining before the DS marked for deferred delete is permanently deleted. </param>
        /// <param name="isDeferredDeleteScheduleUpcoming"> Flag to identify whether the deferred deleted DS is to be purged soon. </param>
        /// <param name="isRehydrate"> Flag to identify that deferred deleted DS is to be moved into Pause state. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuardOperationRequests on which LAC check will be performed. </param>
        /// <param name="isArchiveEnabled"> Flag to identify whether datasource is protected in archive. </param>
        /// <param name="policyName"> Name of the policy used for protection. </param>
        /// <param name="friendlyName"> Friendly name of this backup item. </param>
        /// <param name="computerName"> Name of the computer associated with this backup item. </param>
        /// <param name="lastBackupStatus"> Status of last backup operation. </param>
        /// <param name="lastBackupOn"> Timestamp of the last backup operation on this backup item. </param>
        /// <param name="protectionState"> Protected, ProtectionStopped, IRPending or ProtectionError. </param>
        /// <param name="deferredDeleteSyncTimeInUTC"> Sync time for deferred deletion in UTC. </param>
        /// <param name="extendedInfo"> Additional information with this backup item. </param>
        /// <returns> A new <see cref="Models.MabFileFolderProtectedItem"/> instance for mocking. </returns>
        public static MabFileFolderProtectedItem MabFileFolderProtectedItem(BackupManagementType? backupManagementType = null, DataSourceType? workloadType = null, string containerName = null, string sourceResourceId = null, string policyId = null, DateTimeOffset? lastRecoveryPoint = null, string backupSetName = null, CreateMode? createMode = null, DateTimeOffset? deferredDeleteTimeInUTC = null, bool? isScheduledForDeferredDelete = null, string deferredDeleteTimeRemaining = null, bool? isDeferredDeleteScheduleUpcoming = null, bool? isRehydrate = null, IEnumerable<string> resourceGuardOperationRequests = null, bool? isArchiveEnabled = null, string policyName = null, string friendlyName = null, string computerName = null, string lastBackupStatus = null, DateTimeOffset? lastBackupOn = null, string protectionState = null, long? deferredDeleteSyncTimeInUTC = null, MabFileFolderProtectedItemExtendedInfo extendedInfo = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new MabFileFolderProtectedItem("MabFileFolderProtectedItem", backupManagementType, workloadType, containerName, sourceResourceId, policyId, lastRecoveryPoint, backupSetName, createMode, deferredDeleteTimeInUTC, isScheduledForDeferredDelete, deferredDeleteTimeRemaining, isDeferredDeleteScheduleUpcoming, isRehydrate, resourceGuardOperationRequests?.ToList(), isArchiveEnabled, policyName, friendlyName, computerName, lastBackupStatus, lastBackupOn, protectionState, deferredDeleteSyncTimeInUTC, extendedInfo);
        }

        /// <summary> Initializes a new instance of MabFileFolderProtectedItemExtendedInfo. </summary>
        /// <param name="lastRefreshedOn"> Last time when the agent data synced to service. </param>
        /// <param name="oldestRecoveryPoint"> The oldest backup copy available. </param>
        /// <param name="recoveryPointCount"> Number of backup copies associated with the backup item. </param>
        /// <returns> A new <see cref="Models.MabFileFolderProtectedItemExtendedInfo"/> instance for mocking. </returns>
        public static MabFileFolderProtectedItemExtendedInfo MabFileFolderProtectedItemExtendedInfo(DateTimeOffset? lastRefreshedOn = null, DateTimeOffset? oldestRecoveryPoint = null, int? recoveryPointCount = null)
        {
            return new MabFileFolderProtectedItemExtendedInfo(lastRefreshedOn, oldestRecoveryPoint, recoveryPointCount);
        }

        /// <summary> Initializes a new instance of MabJob. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="duration"> Time taken by job to run. </param>
        /// <param name="actionsInfo"> The state/actions applicable on jobs like cancel/retry. </param>
        /// <param name="mabServerName"> Name of server protecting the DS. </param>
        /// <param name="mabServerType"> Server type of MAB container. </param>
        /// <param name="workloadType"> Workload type of backup item. </param>
        /// <param name="errorDetails"> The errors. </param>
        /// <param name="extendedInfo"> Additional information on the job. </param>
        /// <returns> A new <see cref="Models.MabJob"/> instance for mocking. </returns>
        public static MabJob MabJob(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, TimeSpan? duration = null, IEnumerable<JobSupportedAction> actionsInfo = null, string mabServerName = null, MabServerType? mabServerType = null, WorkloadType? workloadType = null, IEnumerable<MabErrorInfo> errorDetails = null, MabJobExtendedInfo extendedInfo = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<MabErrorInfo>();

            return new MabJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "MabJob", duration, actionsInfo?.ToList(), mabServerName, mabServerType, workloadType, errorDetails?.ToList(), extendedInfo);
        }

        /// <summary> Initializes a new instance of MabJobExtendedInfo. </summary>
        /// <param name="tasksList"> List of tasks for this job. </param>
        /// <param name="propertyBag"> The job properties. </param>
        /// <param name="dynamicErrorMessage"> Non localized error message specific to this job. </param>
        /// <returns> A new <see cref="Models.MabJobExtendedInfo"/> instance for mocking. </returns>
        public static MabJobExtendedInfo MabJobExtendedInfo(IEnumerable<MabJobTaskDetails> tasksList = null, IDictionary<string, string> propertyBag = null, string dynamicErrorMessage = null)
        {
            tasksList ??= new List<MabJobTaskDetails>();
            propertyBag ??= new Dictionary<string, string>();

            return new MabJobExtendedInfo(tasksList?.ToList(), propertyBag, dynamicErrorMessage);
        }

        /// <summary> Initializes a new instance of MabJobTaskDetails. </summary>
        /// <param name="taskId"> The task display name. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="duration"> Time elapsed for task. </param>
        /// <param name="status"> The status. </param>
        /// <returns> A new <see cref="Models.MabJobTaskDetails"/> instance for mocking. </returns>
        public static MabJobTaskDetails MabJobTaskDetails(string taskId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, TimeSpan? duration = null, string status = null)
        {
            return new MabJobTaskDetails(taskId, startOn, endOn, duration, status);
        }

        /// <summary> Initializes a new instance of MabProtectionPolicy. </summary>
        /// <param name="protectedItemsCount"> Number of items associated with this policy. </param>
        /// <param name="resourceGuardOperationRequests"> ResourceGuard Operation Requests. </param>
        /// <param name="schedulePolicy">
        /// Backup schedule of backup policy.
        /// Please note <see cref="SchedulePolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LogSchedulePolicy"/>, <see cref="LongTermSchedulePolicy"/>, <see cref="SimpleSchedulePolicy"/> and <see cref="SimpleSchedulePolicyV2"/>.
        /// </param>
        /// <param name="retentionPolicy">
        /// Retention policy details.
        /// Please note <see cref="RetentionPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LongTermRetentionPolicy"/> and <see cref="SimpleRetentionPolicy"/>.
        /// </param>
        /// <returns> A new <see cref="Models.MabProtectionPolicy"/> instance for mocking. </returns>
        public static MabProtectionPolicy MabProtectionPolicy(int? protectedItemsCount = null, IEnumerable<string> resourceGuardOperationRequests = null, SchedulePolicy schedulePolicy = null, RetentionPolicy retentionPolicy = null)
        {
            resourceGuardOperationRequests ??= new List<string>();

            return new MabProtectionPolicy(protectedItemsCount, "MAB", resourceGuardOperationRequests?.ToList(), schedulePolicy, retentionPolicy);
        }

        /// <summary> Initializes a new instance of OperationResultInfo. </summary>
        /// <param name="jobList"> List of jobs created by this operation. </param>
        /// <returns> A new <see cref="Models.OperationResultInfo"/> instance for mocking. </returns>
        public static OperationResultInfo OperationResultInfo(IEnumerable<string> jobList = null)
        {
            jobList ??= new List<string>();

            return new OperationResultInfo("OperationResultInfo", jobList?.ToList());
        }

        /// <summary> Initializes a new instance of PrepareDataMoveResponse. </summary>
        /// <param name="correlationId"> Co-relationId for move operation. </param>
        /// <param name="sourceVaultProperties"> Source Vault Properties. </param>
        /// <returns> A new <see cref="Models.PrepareDataMoveResponse"/> instance for mocking. </returns>
        public static PrepareDataMoveResponse PrepareDataMoveResponse(string correlationId = null, IReadOnlyDictionary<string, string> sourceVaultProperties = null)
        {
            sourceVaultProperties ??= new Dictionary<string, string>();

            return new PrepareDataMoveResponse("PrepareDataMoveResponse", correlationId, sourceVaultProperties);
        }

        /// <summary> Initializes a new instance of SimpleRetentionPolicy. </summary>
        /// <param name="retentionDuration"> Retention duration of the protection policy. </param>
        /// <returns> A new <see cref="Models.SimpleRetentionPolicy"/> instance for mocking. </returns>
        public static SimpleRetentionPolicy SimpleRetentionPolicy(RetentionDuration retentionDuration = null)
        {
            return new SimpleRetentionPolicy("SimpleRetentionPolicy", retentionDuration);
        }

        /// <summary> Initializes a new instance of SimpleSchedulePolicy. </summary>
        /// <param name="scheduleRunFrequency"> Frequency of the schedule operation of this policy. </param>
        /// <param name="scheduleRunDays"> List of days of week this schedule has to be run. </param>
        /// <param name="scheduleRunTimes"> List of times of day this schedule has to be run. </param>
        /// <param name="hourlySchedule"> Hourly Schedule of this Policy. </param>
        /// <param name="scheduleWeeklyFrequency"> At every number weeks this schedule has to be run. </param>
        /// <returns> A new <see cref="Models.SimpleSchedulePolicy"/> instance for mocking. </returns>
        public static SimpleSchedulePolicy SimpleSchedulePolicy(ScheduleRunType? scheduleRunFrequency = null, IEnumerable<DayOfWeek> scheduleRunDays = null, IEnumerable<DateTimeOffset> scheduleRunTimes = null, HourlySchedule hourlySchedule = null, int? scheduleWeeklyFrequency = null)
        {
            scheduleRunDays ??= new List<DayOfWeek>();
            scheduleRunTimes ??= new List<DateTimeOffset>();

            return new SimpleSchedulePolicy("SimpleSchedulePolicy", scheduleRunFrequency, scheduleRunDays?.ToList(), scheduleRunTimes?.ToList(), hourlySchedule, scheduleWeeklyFrequency);
        }

        /// <summary> Initializes a new instance of SimpleSchedulePolicyV2. </summary>
        /// <param name="scheduleRunFrequency"> Frequency of the schedule operation of this policy. </param>
        /// <param name="hourlySchedule"> hourly schedule of this policy. </param>
        /// <param name="scheduleRunTimes"> Daily schedule of this policy. </param>
        /// <param name="weeklySchedule"> Weekly schedule of this policy. </param>
        /// <returns> A new <see cref="Models.SimpleSchedulePolicyV2"/> instance for mocking. </returns>
        public static SimpleSchedulePolicyV2 SimpleSchedulePolicyV2(ScheduleRunType? scheduleRunFrequency = null, HourlySchedule hourlySchedule = null, IEnumerable<DateTimeOffset> scheduleRunTimes = null, WeeklySchedule weeklySchedule = null)
        {
            scheduleRunTimes ??= new List<DateTimeOffset>();

            return new SimpleSchedulePolicyV2("SimpleSchedulePolicyV2", scheduleRunFrequency, hourlySchedule, scheduleRunTimes != null ? new DailySchedule(scheduleRunTimes?.ToList()) : null, weeklySchedule);
        }

        /// <summary> Initializes a new instance of VaultJob. </summary>
        /// <param name="entityFriendlyName"> Friendly name of the entity on which the current job is executing. </param>
        /// <param name="backupManagementType"> Backup management type to execute the current job. </param>
        /// <param name="operation"> The operation name. </param>
        /// <param name="status"> Job status. </param>
        /// <param name="startOn"> The start time. </param>
        /// <param name="endOn"> The end time. </param>
        /// <param name="activityId"> ActivityId of job. </param>
        /// <param name="duration"> Time elapsed during the execution of this job. </param>
        /// <param name="actionsInfo"> Gets or sets the state/actions applicable on this job like cancel/retry. </param>
        /// <param name="errorDetails"> Error details on execution of this job. </param>
        /// <param name="extendedInfoPropertyBag"> Additional information about the job. </param>
        /// <returns> A new <see cref="Models.VaultJob"/> instance for mocking. </returns>
        public static VaultJob VaultJob(string entityFriendlyName = null, BackupManagementType? backupManagementType = null, string operation = null, string status = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string activityId = null, TimeSpan? duration = null, IEnumerable<JobSupportedAction> actionsInfo = null, IEnumerable<VaultJobErrorInfo> errorDetails = null, IDictionary<string, string> extendedInfoPropertyBag = null)
        {
            actionsInfo ??= new List<JobSupportedAction>();
            errorDetails ??= new List<VaultJobErrorInfo>();
            extendedInfoPropertyBag ??= new Dictionary<string, string>();

            return new VaultJob(entityFriendlyName, backupManagementType, operation, status, startOn, endOn, activityId, "VaultJob", duration, actionsInfo?.ToList(), errorDetails?.ToList(), extendedInfoPropertyBag != null ? new VaultJobExtendedInfo(extendedInfoPropertyBag) : null);
        }

        /// <summary> Initializes a new instance of VaultJobErrorInfo. </summary>
        /// <param name="errorCode"> Error code. </param>
        /// <param name="errorString"> Localized error string. </param>
        /// <param name="recommendations"> List of localized recommendations for above error code. </param>
        /// <returns> A new <see cref="Models.VaultJobErrorInfo"/> instance for mocking. </returns>
        public static VaultJobErrorInfo VaultJobErrorInfo(int? errorCode = null, string errorString = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new VaultJobErrorInfo(errorCode, errorString, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of AzureBackupServerContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="canReRegister"> Specifies whether the container is re-registrable. </param>
        /// <param name="containerId"> ID of container. </param>
        /// <param name="protectedItemCount"> Number of protected items in the BackupEngine. </param>
        /// <param name="dpmAgentVersion"> Backup engine Agent version. </param>
        /// <param name="dpmServers"> List of BackupEngines protecting the container. </param>
        /// <param name="upgradeAvailable"> To check if upgrade available. </param>
        /// <param name="protectionStatus"> Protection status of the container. </param>
        /// <param name="extendedInfoLastRefreshedOn"> Extended Info of the container. </param>
        /// <returns> A new <see cref="Models.AzureBackupServerContainer"/> instance for mocking. </returns>
        public static AzureBackupServerContainer AzureBackupServerContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, bool? canReRegister = null, string containerId = null, long? protectedItemCount = null, string dpmAgentVersion = null, IEnumerable<string> dpmServers = null, bool? upgradeAvailable = null, string protectionStatus = null, DateTimeOffset? extendedInfoLastRefreshedOn = null)
        {
            dpmServers ??= new List<string>();

            return new AzureBackupServerContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.AzureBackupServerContainer, protectableObjectType, canReRegister, containerId, protectedItemCount, dpmAgentVersion, dpmServers?.ToList(), upgradeAvailable, protectionStatus, extendedInfoLastRefreshedOn != null ? new DpmContainerExtendedInfo(extendedInfoLastRefreshedOn) : null);
        }

        /// <summary> Initializes a new instance of DpmContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="canReRegister"> Specifies whether the container is re-registrable. </param>
        /// <param name="containerId"> ID of container. </param>
        /// <param name="protectedItemCount"> Number of protected items in the BackupEngine. </param>
        /// <param name="dpmAgentVersion"> Backup engine Agent version. </param>
        /// <param name="dpmServers"> List of BackupEngines protecting the container. </param>
        /// <param name="upgradeAvailable"> To check if upgrade available. </param>
        /// <param name="protectionStatus"> Protection status of the container. </param>
        /// <param name="extendedInfoLastRefreshedOn"> Extended Info of the container. </param>
        /// <returns> A new <see cref="Models.DpmContainer"/> instance for mocking. </returns>
        public static DpmContainer DpmContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, bool? canReRegister = null, string containerId = null, long? protectedItemCount = null, string dpmAgentVersion = null, IEnumerable<string> dpmServers = null, bool? upgradeAvailable = null, string protectionStatus = null, DateTimeOffset? extendedInfoLastRefreshedOn = null)
        {
            dpmServers ??= new List<string>();

            return new DpmContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.DpmContainer, protectableObjectType, canReRegister, containerId, protectedItemCount, dpmAgentVersion, dpmServers?.ToList(), upgradeAvailable, protectionStatus, extendedInfoLastRefreshedOn != null ? new DpmContainerExtendedInfo(extendedInfoLastRefreshedOn) : null);
        }

        /// <summary> Initializes a new instance of AzureBackupServerEngine. </summary>
        /// <param name="friendlyName"> Friendly name of the backup engine. </param>
        /// <param name="backupManagementType"> Type of backup management for the backup engine. </param>
        /// <param name="registrationStatus"> Registration status of the backup engine with the Recovery Services Vault. </param>
        /// <param name="backupEngineState"> Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}. </param>
        /// <param name="healthStatus"> Backup status of the backup engine. </param>
        /// <param name="canReRegister"> Flag indicating if the backup engine be registered, once already registered. </param>
        /// <param name="backupEngineId"> ID of the backup engine. </param>
        /// <param name="dpmVersion"> Backup engine version. </param>
        /// <param name="azureBackupAgentVersion"> Backup agent version. </param>
        /// <param name="isAzureBackupAgentUpgradeAvailable"> To check if backup agent upgrade available. </param>
        /// <param name="isDpmUpgradeAvailable"> To check if backup engine upgrade available. </param>
        /// <param name="extendedInfo"> Extended info of the backupengine. </param>
        /// <returns> A new <see cref="Models.AzureBackupServerEngine"/> instance for mocking. </returns>
        public static AzureBackupServerEngine AzureBackupServerEngine(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string backupEngineState = null, string healthStatus = null, bool? canReRegister = null, string backupEngineId = null, string dpmVersion = null, string azureBackupAgentVersion = null, bool? isAzureBackupAgentUpgradeAvailable = null, bool? isDpmUpgradeAvailable = null, BackupEngineExtendedInfo extendedInfo = null)
        {
            return new AzureBackupServerEngine(friendlyName, backupManagementType, registrationStatus, backupEngineState, healthStatus, BackupEngineType.AzureBackupServerEngine, canReRegister, backupEngineId, dpmVersion, azureBackupAgentVersion, isAzureBackupAgentUpgradeAvailable, isDpmUpgradeAvailable, extendedInfo);
        }

        /// <summary> Initializes a new instance of AzureFileShareBackupRequest. </summary>
        /// <param name="recoveryPointExpiryTimeInUTC"> Backup copy will expire after the time specified (UTC). </param>
        /// <returns> A new <see cref="Models.AzureFileShareBackupRequest"/> instance for mocking. </returns>
        public static AzureFileShareBackupRequest AzureFileShareBackupRequest(DateTimeOffset? recoveryPointExpiryTimeInUTC = null)
        {
            return new AzureFileShareBackupRequest("AzureFileShareBackupRequest", recoveryPointExpiryTimeInUTC);
        }

        /// <summary> Initializes a new instance of AzureFileShareProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentContainerFabricId"> Full Fabric ID of container to which this protectable item belongs. For example, ARM ID. </param>
        /// <param name="parentContainerFriendlyName"> Friendly name of container to which this protectable item belongs. </param>
        /// <param name="azureFileShareType"> File Share type XSync or XSMB. </param>
        /// <returns> A new <see cref="Models.AzureFileShareProtectableItem"/> instance for mocking. </returns>
        public static AzureFileShareProtectableItem AzureFileShareProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentContainerFabricId = null, string parentContainerFriendlyName = null, AzureFileShareType? azureFileShareType = null)
        {
            return new AzureFileShareProtectableItem(backupManagementType, workloadType, "AzureFileShare", friendlyName, protectionState, parentContainerFabricId, parentContainerFriendlyName, azureFileShareType);
        }

        /// <summary> Initializes a new instance of AzureFileShareProvisionILRRequest. </summary>
        /// <param name="recoveryPointId"> Recovery point ID. </param>
        /// <param name="sourceResourceId"> Source Storage account ARM Id. </param>
        /// <returns> A new <see cref="Models.AzureFileShareProvisionILRRequest"/> instance for mocking. </returns>
        public static AzureFileShareProvisionILRRequest AzureFileShareProvisionILRRequest(string recoveryPointId = null, string sourceResourceId = null)
        {
            return new AzureFileShareProvisionILRRequest("AzureFileShareProvisionILRRequest", recoveryPointId, sourceResourceId);
        }

        /// <summary> Initializes a new instance of AzureIaaSClassicComputeVmContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the container represents a Classic or an Azure Resource Manager VM. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <returns> A new <see cref="Models.AzureIaaSClassicComputeVmContainer"/> instance for mocking. </returns>
        public static AzureIaaSClassicComputeVmContainer AzureIaaSClassicComputeVmContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string virtualMachineId = null, string virtualMachineVersion = null, string resourceGroup = null)
        {
            return new AzureIaaSClassicComputeVmContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.MicrosoftClassicComputeVirtualMachines, protectableObjectType, virtualMachineId, virtualMachineVersion, resourceGroup);
        }

        /// <summary> Initializes a new instance of IaasVmContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the container represents a Classic or an Azure Resource Manager VM. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <returns> A new <see cref="Models.IaasVmContainer"/> instance for mocking. </returns>
        public static IaasVmContainer IaasVmContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string virtualMachineId = null, string virtualMachineVersion = null, string resourceGroup = null)
        {
            return new IaasVmContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.IaasVmContainer, protectableObjectType, virtualMachineId, virtualMachineVersion, resourceGroup);
        }

        /// <summary> Initializes a new instance of AzureIaaSClassicComputeVmProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the container represents a Classic or an Azure Resource Manager VM. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <returns> A new <see cref="Models.AzureIaaSClassicComputeVmProtectableItem"/> instance for mocking. </returns>
        public static AzureIaaSClassicComputeVmProtectableItem AzureIaaSClassicComputeVmProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string virtualMachineId = null, string virtualMachineVersion = null, string resourceGroup = null)
        {
            return new AzureIaaSClassicComputeVmProtectableItem(backupManagementType, workloadType, "Microsoft.ClassicCompute/virtualMachines", friendlyName, protectionState, virtualMachineId, virtualMachineVersion, resourceGroup);
        }

        /// <summary> Initializes a new instance of IaasVmProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the container represents a Classic or an Azure Resource Manager VM. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <returns> A new <see cref="Models.IaasVmProtectableItem"/> instance for mocking. </returns>
        public static IaasVmProtectableItem IaasVmProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string virtualMachineId = null, string virtualMachineVersion = null, string resourceGroup = null)
        {
            return new IaasVmProtectableItem(backupManagementType, workloadType, "IaaSVMProtectableItem", friendlyName, protectionState, virtualMachineId, virtualMachineVersion, resourceGroup);
        }

        /// <summary> Initializes a new instance of AzureIaaSComputeVmContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM url of the virtual machine represented by this Azure IaaS VM container. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the container represents a Classic or an Azure Resource Manager VM. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <returns> A new <see cref="Models.AzureIaaSComputeVmContainer"/> instance for mocking. </returns>
        public static AzureIaaSComputeVmContainer AzureIaaSComputeVmContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string virtualMachineId = null, string virtualMachineVersion = null, string resourceGroup = null)
        {
            return new AzureIaaSComputeVmContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.MicrosoftComputeVirtualMachines, protectableObjectType, virtualMachineId, virtualMachineVersion, resourceGroup);
        }

        /// <summary> Initializes a new instance of AzureIaaSComputeVmProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine. </param>
        /// <param name="virtualMachineVersion"> Specifies whether the container represents a Classic or an Azure Resource Manager VM. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <returns> A new <see cref="Models.AzureIaaSComputeVmProtectableItem"/> instance for mocking. </returns>
        public static AzureIaaSComputeVmProtectableItem AzureIaaSComputeVmProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string virtualMachineId = null, string virtualMachineVersion = null, string resourceGroup = null)
        {
            return new AzureIaaSComputeVmProtectableItem(backupManagementType, workloadType, "Microsoft.Compute/virtualMachines", friendlyName, protectionState, virtualMachineId, virtualMachineVersion, resourceGroup);
        }

        /// <summary> Initializes a new instance of AzureSqlAGWorkloadContainerProtectionContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="sourceResourceId"> ARM ID of the virtual machine represented by this Azure Workload Container. </param>
        /// <param name="lastUpdatedOn"> Time stamp when this container was updated. </param>
        /// <param name="extendedInfo"> Additional details of a workload container. </param>
        /// <param name="workloadType"> Workload type for which registration was sent. </param>
        /// <param name="operationType"> Re-Do Operation. </param>
        /// <returns> A new <see cref="Models.AzureSqlAGWorkloadContainerProtectionContainer"/> instance for mocking. </returns>
        public static AzureSqlAGWorkloadContainerProtectionContainer AzureSqlAGWorkloadContainerProtectionContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string sourceResourceId = null, DateTimeOffset? lastUpdatedOn = null, AzureWorkloadContainerExtendedInfo extendedInfo = null, WorkloadType? workloadType = null, OperationType? operationType = null)
        {
            return new AzureSqlAGWorkloadContainerProtectionContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.SqlAGWorkLoadContainer, protectableObjectType, sourceResourceId, lastUpdatedOn, extendedInfo, workloadType, operationType);
        }

        /// <summary> Initializes a new instance of AzureWorkloadContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="sourceResourceId"> ARM ID of the virtual machine represented by this Azure Workload Container. </param>
        /// <param name="lastUpdatedOn"> Time stamp when this container was updated. </param>
        /// <param name="extendedInfo"> Additional details of a workload container. </param>
        /// <param name="workloadType"> Workload type for which registration was sent. </param>
        /// <param name="operationType"> Re-Do Operation. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadContainer"/> instance for mocking. </returns>
        public static AzureWorkloadContainer AzureWorkloadContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string sourceResourceId = null, DateTimeOffset? lastUpdatedOn = null, AzureWorkloadContainerExtendedInfo extendedInfo = null, WorkloadType? workloadType = null, OperationType? operationType = null)
        {
            return new AzureWorkloadContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.AzureWorkloadContainer, protectableObjectType, sourceResourceId, lastUpdatedOn, extendedInfo, workloadType, operationType);
        }

        /// <summary> Initializes a new instance of AzureWorkloadContainerExtendedInfo. </summary>
        /// <param name="hostServerName"> Host Os Name in case of Stand Alone and Cluster Name in case of distributed container. </param>
        /// <param name="inquiryInfo"> Inquiry Status for the container. </param>
        /// <param name="nodesList"> List of the nodes in case of distributed container. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadContainerExtendedInfo"/> instance for mocking. </returns>
        public static AzureWorkloadContainerExtendedInfo AzureWorkloadContainerExtendedInfo(string hostServerName = null, InquiryInfo inquiryInfo = null, IEnumerable<DistributedNodesInfo> nodesList = null)
        {
            nodesList ??= new List<DistributedNodesInfo>();

            return new AzureWorkloadContainerExtendedInfo(hostServerName, inquiryInfo, nodesList?.ToList());
        }

        /// <summary> Initializes a new instance of InquiryInfo. </summary>
        /// <param name="status">
        /// Inquiry Status for this container such as
        /// InProgress | Failed | Succeeded
        /// </param>
        /// <param name="errorDetail"> Error Details if the Status is non-success. </param>
        /// <param name="inquiryDetails">
        /// Inquiry Details which will have workload specific details.
        /// For e.g. - For SQL and oracle this will contain different details.
        /// </param>
        /// <returns> A new <see cref="Models.InquiryInfo"/> instance for mocking. </returns>
        public static InquiryInfo InquiryInfo(string status = null, ErrorDetail errorDetail = null, IEnumerable<WorkloadInquiryDetails> inquiryDetails = null)
        {
            inquiryDetails ??= new List<WorkloadInquiryDetails>();

            return new InquiryInfo(status, errorDetail, inquiryDetails?.ToList());
        }

        /// <summary> Initializes a new instance of WorkloadInquiryDetails. </summary>
        /// <param name="workloadInquiryDetailsType"> Type of the Workload such as SQL, Oracle etc. </param>
        /// <param name="itemCount"> Contains the protectable item Count inside this Container. </param>
        /// <param name="inquiryValidation"> Inquiry validation such as permissions and other backup validations. </param>
        /// <returns> A new <see cref="Models.WorkloadInquiryDetails"/> instance for mocking. </returns>
        public static WorkloadInquiryDetails WorkloadInquiryDetails(string workloadInquiryDetailsType = null, long? itemCount = null, InquiryValidation inquiryValidation = null)
        {
            return new WorkloadInquiryDetails(workloadInquiryDetailsType, itemCount, inquiryValidation);
        }

        /// <summary> Initializes a new instance of InquiryValidation. </summary>
        /// <param name="status"> Status for the Inquiry Validation. </param>
        /// <param name="errorDetail"> Error Detail in case the status is non-success. </param>
        /// <param name="additionalDetail"> Error Additional Detail in case the status is non-success. </param>
        /// <returns> A new <see cref="Models.InquiryValidation"/> instance for mocking. </returns>
        public static InquiryValidation InquiryValidation(string status = null, ErrorDetail errorDetail = null, string additionalDetail = null)
        {
            return new InquiryValidation(status, errorDetail, additionalDetail);
        }

        /// <summary> Initializes a new instance of DistributedNodesInfo. </summary>
        /// <param name="nodeName"> Name of the node under a distributed container. </param>
        /// <param name="status">
        /// Status of this Node.
        /// Failed | Succeeded
        /// </param>
        /// <param name="errorDetail"> Error Details if the Status is non-success. </param>
        /// <returns> A new <see cref="Models.DistributedNodesInfo"/> instance for mocking. </returns>
        public static DistributedNodesInfo DistributedNodesInfo(string nodeName = null, string status = null, ErrorDetail errorDetail = null)
        {
            return new DistributedNodesInfo(nodeName, status, errorDetail);
        }

        /// <summary> Initializes a new instance of AzureSqlContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <returns> A new <see cref="Models.AzureSqlContainer"/> instance for mocking. </returns>
        public static AzureSqlContainer AzureSqlContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null)
        {
            return new AzureSqlContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.AzureSqlContainer, protectableObjectType);
        }

        /// <summary> Initializes a new instance of AzureStorageContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM url. </param>
        /// <param name="storageAccountVersion"> Storage account version. </param>
        /// <param name="resourceGroup"> Resource group name of Recovery Services Vault. </param>
        /// <param name="protectedItemCount"> Number of items backed up in this container. </param>
        /// <param name="acquireStorageAccountLock"> Whether storage account lock is to be acquired for this container or not. </param>
        /// <returns> A new <see cref="Models.AzureStorageContainer"/> instance for mocking. </returns>
        public static AzureStorageContainer AzureStorageContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string sourceResourceId = null, string storageAccountVersion = null, string resourceGroup = null, long? protectedItemCount = null, AcquireStorageAccountLock? acquireStorageAccountLock = null)
        {
            return new AzureStorageContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.StorageContainer, protectableObjectType, sourceResourceId, storageAccountVersion, resourceGroup, protectedItemCount, acquireStorageAccountLock);
        }

        /// <summary> Initializes a new instance of AzureStorageProtectableContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="containerId"> Fabric Id of the container such as ARM Id. </param>
        /// <returns> A new <see cref="Models.AzureStorageProtectableContainer"/> instance for mocking. </returns>
        public static AzureStorageProtectableContainer AzureStorageProtectableContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string healthStatus = null, string containerId = null)
        {
            return new AzureStorageProtectableContainer(friendlyName, backupManagementType, ProtectableContainerType.StorageContainer, healthStatus, containerId);
        }

        /// <summary> Initializes a new instance of AzureVmAppContainerProtectableContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="containerId"> Fabric Id of the container such as ARM Id. </param>
        /// <returns> A new <see cref="Models.AzureVmAppContainerProtectableContainer"/> instance for mocking. </returns>
        public static AzureVmAppContainerProtectableContainer AzureVmAppContainerProtectableContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string healthStatus = null, string containerId = null)
        {
            return new AzureVmAppContainerProtectableContainer(friendlyName, backupManagementType, ProtectableContainerType.VmAppContainer, healthStatus, containerId);
        }

        /// <summary> Initializes a new instance of AzureVmAppContainerProtectionContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="sourceResourceId"> ARM ID of the virtual machine represented by this Azure Workload Container. </param>
        /// <param name="lastUpdatedOn"> Time stamp when this container was updated. </param>
        /// <param name="extendedInfo"> Additional details of a workload container. </param>
        /// <param name="workloadType"> Workload type for which registration was sent. </param>
        /// <param name="operationType"> Re-Do Operation. </param>
        /// <returns> A new <see cref="Models.AzureVmAppContainerProtectionContainer"/> instance for mocking. </returns>
        public static AzureVmAppContainerProtectionContainer AzureVmAppContainerProtectionContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string sourceResourceId = null, DateTimeOffset? lastUpdatedOn = null, AzureWorkloadContainerExtendedInfo extendedInfo = null, WorkloadType? workloadType = null, OperationType? operationType = null)
        {
            return new AzureVmAppContainerProtectionContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.VmAppContainer, protectableObjectType, sourceResourceId, lastUpdatedOn, extendedInfo, workloadType, operationType);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadItem AzureVmWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null)
        {
            return new AzureVmWorkloadItem(backupManagementType, workloadType, "AzureVmWorkloadItem", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadProtectableItem AzureVmWorkloadProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadProtectableItem(backupManagementType, workloadType, "AzureVmWorkloadProtectableItem", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of PreBackupValidation. </summary>
        /// <param name="status"> Status of protectable item, i.e. InProgress,Succeeded,Failed. </param>
        /// <param name="code"> Error code of protectable item. </param>
        /// <param name="message"> Message corresponding to the error code for the protectable item. </param>
        /// <returns> A new <see cref="Models.PreBackupValidation"/> instance for mocking. </returns>
        public static PreBackupValidation PreBackupValidation(InquiryStatus? status = null, string code = null, string message = null)
        {
            return new PreBackupValidation(status, code, message);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPAseDatabaseWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPAseDatabaseWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPAseDatabaseWorkloadItem AzureVmWorkloadSAPAseDatabaseWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null)
        {
            return new AzureVmWorkloadSAPAseDatabaseWorkloadItem(backupManagementType, workloadType, "SAPAseDatabase", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPAseSystemProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPAseSystemProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPAseSystemProtectableItem AzureVmWorkloadSAPAseSystemProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSAPAseSystemProtectableItem(backupManagementType, workloadType, "SAPAseSystem", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPAseSystemWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPAseSystemWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPAseSystemWorkloadItem AzureVmWorkloadSAPAseSystemWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null)
        {
            return new AzureVmWorkloadSAPAseSystemWorkloadItem(backupManagementType, workloadType, "SAPAseSystem", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDatabaseProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDatabaseProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDatabaseProtectableItem AzureVmWorkloadSAPHanaDatabaseProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSAPHanaDatabaseProtectableItem(backupManagementType, workloadType, "SAPHanaDatabase", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDatabaseWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDatabaseWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDatabaseWorkloadItem AzureVmWorkloadSAPHanaDatabaseWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null)
        {
            return new AzureVmWorkloadSAPHanaDatabaseWorkloadItem(backupManagementType, workloadType, "SAPHanaDatabase", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaSystemProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaSystemProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaSystemProtectableItem AzureVmWorkloadSAPHanaSystemProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSAPHanaSystemProtectableItem(backupManagementType, workloadType, "SAPHanaSystem", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaDBInstance. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaDBInstance"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaDBInstance AzureVmWorkloadSAPHanaDBInstance(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSAPHanaDBInstance(backupManagementType, workloadType, "SAPHanaDBInstance", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaHSR. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaHSR"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaHSR AzureVmWorkloadSAPHanaHSR(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSAPHanaHSR(backupManagementType, workloadType, "SAPHanaHSR", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSAPHanaSystemWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSAPHanaSystemWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSAPHanaSystemWorkloadItem AzureVmWorkloadSAPHanaSystemWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null)
        {
            return new AzureVmWorkloadSAPHanaSystemWorkloadItem(backupManagementType, workloadType, "SAPHanaSystem", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLAvailabilityGroupProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLAvailabilityGroupProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLAvailabilityGroupProtectableItem AzureVmWorkloadSQLAvailabilityGroupProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSQLAvailabilityGroupProtectableItem(backupManagementType, workloadType, "SQLAvailabilityGroupContainer", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLDatabaseProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLDatabaseProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLDatabaseProtectableItem AzureVmWorkloadSQLDatabaseProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSQLDatabaseProtectableItem(backupManagementType, workloadType, "SQLDataBase", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLDatabaseWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLDatabaseWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLDatabaseWorkloadItem AzureVmWorkloadSQLDatabaseWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null)
        {
            return new AzureVmWorkloadSQLDatabaseWorkloadItem(backupManagementType, workloadType, "SQLDataBase", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLInstanceProtectableItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="parentUniqueName">
        /// Parent Unique Name is added to provide the service formatted URI Name of the Parent
        /// Only Applicable for data bases where the parent would be either Instance or a SQL AG.
        /// </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if protectable item is auto-protectable. </param>
        /// <param name="isAutoProtected"> Indicates if protectable item is auto-protected. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subprotectableitemcount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="prebackupvalidation"> Pre-backup validation for protectable objects. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLInstanceProtectableItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLInstanceProtectableItem AzureVmWorkloadSQLInstanceProtectableItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string parentUniqueName = null, string serverName = null, bool? isAutoProtectable = null, bool? isAutoProtected = null, int? subinquireditemcount = null, int? subprotectableitemcount = null, PreBackupValidation prebackupvalidation = null)
        {
            return new AzureVmWorkloadSQLInstanceProtectableItem(backupManagementType, workloadType, "SQLInstance", friendlyName, protectionState, parentName, parentUniqueName, serverName, isAutoProtectable, isAutoProtected, subinquireditemcount, subprotectableitemcount, prebackupvalidation);
        }

        /// <summary> Initializes a new instance of AzureVmWorkloadSQLInstanceWorkloadItem. </summary>
        /// <param name="backupManagementType"> Type of backup management to backup an item. </param>
        /// <param name="workloadType"> Type of workload for the backup management. </param>
        /// <param name="friendlyName"> Friendly name of the backup item. </param>
        /// <param name="protectionState"> State of the back up item. </param>
        /// <param name="parentName"> Name for instance or AG. </param>
        /// <param name="serverName"> Host/Cluster Name for instance or AG. </param>
        /// <param name="isAutoProtectable"> Indicates if workload item is auto-protectable. </param>
        /// <param name="subinquireditemcount"> For instance or AG, indicates number of DB&apos;s present. </param>
        /// <param name="subWorkloadItemCount"> For instance or AG, indicates number of DB&apos;s to be protected. </param>
        /// <param name="dataDirectoryPaths"> Data Directory Paths for default directories. </param>
        /// <returns> A new <see cref="Models.AzureVmWorkloadSQLInstanceWorkloadItem"/> instance for mocking. </returns>
        public static AzureVmWorkloadSQLInstanceWorkloadItem AzureVmWorkloadSQLInstanceWorkloadItem(string backupManagementType = null, string workloadType = null, string friendlyName = null, ProtectionStatus? protectionState = null, string parentName = null, string serverName = null, bool? isAutoProtectable = null, int? subinquireditemcount = null, int? subWorkloadItemCount = null, IEnumerable<SQLDataDirectory> dataDirectoryPaths = null)
        {
            dataDirectoryPaths ??= new List<SQLDataDirectory>();

            return new AzureVmWorkloadSQLInstanceWorkloadItem(backupManagementType, workloadType, "SQLInstance", friendlyName, protectionState, parentName, serverName, isAutoProtectable, subinquireditemcount, subWorkloadItemCount, dataDirectoryPaths?.ToList());
        }

        /// <summary> Initializes a new instance of AzureWorkloadBackupRequest. </summary>
        /// <param name="backupType"> Type of backup, viz. Full, Differential, Log or CopyOnlyFull. </param>
        /// <param name="enableCompression"> Bool for Compression setting. </param>
        /// <param name="recoveryPointExpiryTimeInUTC"> Backup copy will expire after the time specified (UTC). </param>
        /// <returns> A new <see cref="Models.AzureWorkloadBackupRequest"/> instance for mocking. </returns>
        public static AzureWorkloadBackupRequest AzureWorkloadBackupRequest(BackupType? backupType = null, bool? enableCompression = null, DateTimeOffset? recoveryPointExpiryTimeInUTC = null)
        {
            return new AzureWorkloadBackupRequest("AzureWorkloadBackupRequest", backupType, enableCompression, recoveryPointExpiryTimeInUTC);
        }

        /// <summary> Initializes a new instance of AzureRecoveryServiceVaultProtectionIntent. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="itemId"> ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <returns> A new <see cref="Models.AzureRecoveryServiceVaultProtectionIntent"/> instance for mocking. </returns>
        public static AzureRecoveryServiceVaultProtectionIntent AzureRecoveryServiceVaultProtectionIntent(BackupManagementType? backupManagementType = null, string sourceResourceId = null, string itemId = null, string policyId = null, ProtectionStatus? protectionState = null)
        {
            return new AzureRecoveryServiceVaultProtectionIntent(ProtectionIntentItemType.RecoveryServiceVaultItem, backupManagementType, sourceResourceId, itemId, policyId, protectionState);
        }

        /// <summary> Initializes a new instance of AzureResourceProtectionIntent. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="itemId"> ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="friendlyName"> Friendly name of the VM represented by this backup item. </param>
        /// <returns> A new <see cref="Models.AzureResourceProtectionIntent"/> instance for mocking. </returns>
        public static AzureResourceProtectionIntent AzureResourceProtectionIntent(BackupManagementType? backupManagementType = null, string sourceResourceId = null, string itemId = null, string policyId = null, ProtectionStatus? protectionState = null, string friendlyName = null)
        {
            return new AzureResourceProtectionIntent(ProtectionIntentItemType.AzureResourceItem, backupManagementType, sourceResourceId, itemId, policyId, protectionState, friendlyName);
        }

        /// <summary> Initializes a new instance of AzureWorkloadContainerAutoProtectionIntent. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="itemId"> ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadContainerAutoProtectionIntent"/> instance for mocking. </returns>
        public static AzureWorkloadContainerAutoProtectionIntent AzureWorkloadContainerAutoProtectionIntent(BackupManagementType? backupManagementType = null, string sourceResourceId = null, string itemId = null, string policyId = null, ProtectionStatus? protectionState = null)
        {
            return new AzureWorkloadContainerAutoProtectionIntent(ProtectionIntentItemType.AzureWorkloadContainerAutoProtectionIntent, backupManagementType, sourceResourceId, itemId, policyId, protectionState);
        }

        /// <summary> Initializes a new instance of AzureWorkloadAutoProtectionIntent. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="itemId"> ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadAutoProtectionIntent"/> instance for mocking. </returns>
        public static AzureWorkloadAutoProtectionIntent AzureWorkloadAutoProtectionIntent(BackupManagementType? backupManagementType = null, string sourceResourceId = null, string itemId = null, string policyId = null, ProtectionStatus? protectionState = null)
        {
            return new AzureWorkloadAutoProtectionIntent(ProtectionIntentItemType.AzureWorkloadAutoProtectionIntent, backupManagementType, sourceResourceId, itemId, policyId, protectionState);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLAutoProtectionIntent. </summary>
        /// <param name="backupManagementType"> Type of backup management for the backed up item. </param>
        /// <param name="sourceResourceId"> ARM ID of the resource to be backed up. </param>
        /// <param name="itemId"> ID of the item which is getting protected, In case of Azure Vm , it is ProtectedItemId. </param>
        /// <param name="policyId"> ID of the backup policy with which this item is backed up. </param>
        /// <param name="protectionState"> Backup state of this backup item. </param>
        /// <param name="workloadItemType"> Workload item type of the item for which intent is to be set. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLAutoProtectionIntent"/> instance for mocking. </returns>
        public static AzureWorkloadSQLAutoProtectionIntent AzureWorkloadSQLAutoProtectionIntent(BackupManagementType? backupManagementType = null, string sourceResourceId = null, string itemId = null, string policyId = null, ProtectionStatus? protectionState = null, WorkloadItemType? workloadItemType = null)
        {
            return new AzureWorkloadSQLAutoProtectionIntent(ProtectionIntentItemType.AzureWorkloadSQLAutoProtectionIntent, backupManagementType, sourceResourceId, itemId, policyId, protectionState, workloadItemType);
        }

        /// <summary> Initializes a new instance of ClientScriptForConnect. </summary>
        /// <param name="scriptContent"> File content of the client script for file / folder restore. </param>
        /// <param name="scriptExtension"> File extension of the client script for file / folder restore - .ps1 , .sh , etc. </param>
        /// <param name="osType"> OS type - Windows, Linux etc. for which this file / folder restore client script works. </param>
        /// <param name="uri"> URL of Executable from where to source the content. If this is not null then ScriptContent should not be used. </param>
        /// <param name="scriptNameSuffix">
        /// Mandatory suffix that should be added to the name of script that is given for download to user.
        /// If its null or empty then , ignore it.
        /// </param>
        /// <returns> A new <see cref="Models.ClientScriptForConnect"/> instance for mocking. </returns>
        public static ClientScriptForConnect ClientScriptForConnect(string scriptContent = null, string scriptExtension = null, string osType = null, Uri uri = null, string scriptNameSuffix = null)
        {
            return new ClientScriptForConnect(scriptContent, scriptExtension, osType, uri, scriptNameSuffix);
        }

        /// <summary> Initializes a new instance of ContainerIdentityInfo. </summary>
        /// <param name="uniqueName"> Unique name of the container. </param>
        /// <param name="aadTenantId"> Protection container identity - AAD Tenant. </param>
        /// <param name="servicePrincipalClientId"> Protection container identity - AAD Service Principal. </param>
        /// <param name="audience"> Protection container identity - Audience. </param>
        /// <returns> A new <see cref="Models.ContainerIdentityInfo"/> instance for mocking. </returns>
        public static ContainerIdentityInfo ContainerIdentityInfo(string uniqueName = null, string aadTenantId = null, string servicePrincipalClientId = null, string audience = null)
        {
            return new ContainerIdentityInfo(uniqueName, aadTenantId, servicePrincipalClientId, audience);
        }

        /// <summary> Initializes a new instance of DpmBackupEngine. </summary>
        /// <param name="friendlyName"> Friendly name of the backup engine. </param>
        /// <param name="backupManagementType"> Type of backup management for the backup engine. </param>
        /// <param name="registrationStatus"> Registration status of the backup engine with the Recovery Services Vault. </param>
        /// <param name="backupEngineState"> Status of the backup engine with the Recovery Services Vault. = {Active/Deleting/DeleteFailed}. </param>
        /// <param name="healthStatus"> Backup status of the backup engine. </param>
        /// <param name="canReRegister"> Flag indicating if the backup engine be registered, once already registered. </param>
        /// <param name="backupEngineId"> ID of the backup engine. </param>
        /// <param name="dpmVersion"> Backup engine version. </param>
        /// <param name="azureBackupAgentVersion"> Backup agent version. </param>
        /// <param name="isAzureBackupAgentUpgradeAvailable"> To check if backup agent upgrade available. </param>
        /// <param name="isDpmUpgradeAvailable"> To check if backup engine upgrade available. </param>
        /// <param name="extendedInfo"> Extended info of the backupengine. </param>
        /// <returns> A new <see cref="Models.DpmBackupEngine"/> instance for mocking. </returns>
        public static DpmBackupEngine DpmBackupEngine(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string backupEngineState = null, string healthStatus = null, bool? canReRegister = null, string backupEngineId = null, string dpmVersion = null, string azureBackupAgentVersion = null, bool? isAzureBackupAgentUpgradeAvailable = null, bool? isDpmUpgradeAvailable = null, BackupEngineExtendedInfo extendedInfo = null)
        {
            return new DpmBackupEngine(friendlyName, backupManagementType, registrationStatus, backupEngineState, healthStatus, BackupEngineType.DpmBackupEngine, canReRegister, backupEngineId, dpmVersion, azureBackupAgentVersion, isAzureBackupAgentUpgradeAvailable, isDpmUpgradeAvailable, extendedInfo);
        }

        /// <summary> Initializes a new instance of GenericContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="fabricName"> Name of the container&apos;s fabric. </param>
        /// <param name="extendedInformation"> Extended information (not returned in List container API calls). </param>
        /// <returns> A new <see cref="Models.GenericContainer"/> instance for mocking. </returns>
        public static GenericContainer GenericContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, string fabricName = null, GenericContainerExtendedInfo extendedInformation = null)
        {
            return new GenericContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.GenericContainer, protectableObjectType, fabricName, extendedInformation);
        }

        /// <summary> Initializes a new instance of GenericContainerExtendedInfo. </summary>
        /// <param name="rawCertData"> Public key of container cert. </param>
        /// <param name="containerIdentityInfo"> Container identity information. </param>
        /// <param name="serviceEndpoints"> Azure Backup Service Endpoints for the container. </param>
        /// <returns> A new <see cref="Models.GenericContainerExtendedInfo"/> instance for mocking. </returns>
        public static GenericContainerExtendedInfo GenericContainerExtendedInfo(string rawCertData = null, ContainerIdentityInfo containerIdentityInfo = null, IDictionary<string, string> serviceEndpoints = null)
        {
            serviceEndpoints ??= new Dictionary<string, string>();

            return new GenericContainerExtendedInfo(rawCertData, containerIdentityInfo, serviceEndpoints);
        }

        /// <summary> Initializes a new instance of IaasVmBackupRequest. </summary>
        /// <param name="recoveryPointExpiryTimeInUTC"> Backup copy will expire after the time specified (UTC). </param>
        /// <returns> A new <see cref="Models.IaasVmBackupRequest"/> instance for mocking. </returns>
        public static IaasVmBackupRequest IaasVmBackupRequest(DateTimeOffset? recoveryPointExpiryTimeInUTC = null)
        {
            return new IaasVmBackupRequest("IaasVMBackupRequest", recoveryPointExpiryTimeInUTC);
        }

        /// <summary> Initializes a new instance of IaasVmilrRegistrationRequest. </summary>
        /// <param name="recoveryPointId"> ID of the IaaS VM backup copy from where the files/folders have to be restored. </param>
        /// <param name="virtualMachineId"> Fully qualified ARM ID of the virtual machine whose the files / folders have to be restored. </param>
        /// <param name="initiatorName"> iSCSI initiator name. </param>
        /// <param name="renewExistingRegistration"> Whether to renew existing registration with the iSCSI server. </param>
        /// <returns> A new <see cref="Models.IaasVmilrRegistrationRequest"/> instance for mocking. </returns>
        public static IaasVmilrRegistrationRequest IaasVmilrRegistrationRequest(string recoveryPointId = null, string virtualMachineId = null, string initiatorName = null, bool? renewExistingRegistration = null)
        {
            return new IaasVmilrRegistrationRequest("IaasVMILRRegistrationRequest", recoveryPointId, virtualMachineId, initiatorName, renewExistingRegistration);
        }

        /// <summary> Initializes a new instance of MabContainer. </summary>
        /// <param name="friendlyName"> Friendly name of the container. </param>
        /// <param name="backupManagementType"> Type of backup management for the container. </param>
        /// <param name="registrationStatus"> Status of registration of the container with the Recovery Services Vault. </param>
        /// <param name="healthStatus"> Status of health of the container. </param>
        /// <param name="protectableObjectType"> Type of the protectable object associated with this container. </param>
        /// <param name="canReRegister"> Can the container be registered one more time. </param>
        /// <param name="containerId"> ContainerID represents the container. </param>
        /// <param name="protectedItemCount"> Number of items backed up in this container. </param>
        /// <param name="agentVersion"> Agent version of this container. </param>
        /// <param name="extendedInfo"> Additional information for this container. </param>
        /// <param name="mabContainerHealthDetails"> Health details on this mab container. </param>
        /// <param name="containerHealthState"> Health state of mab container. </param>
        /// <returns> A new <see cref="Models.MabContainer"/> instance for mocking. </returns>
        public static MabContainer MabContainer(string friendlyName = null, BackupManagementType? backupManagementType = null, string registrationStatus = null, string healthStatus = null, string protectableObjectType = null, bool? canReRegister = null, long? containerId = null, long? protectedItemCount = null, string agentVersion = null, MabContainerExtendedInfo extendedInfo = null, IEnumerable<MabContainerHealthDetails> mabContainerHealthDetails = null, string containerHealthState = null)
        {
            mabContainerHealthDetails ??= new List<MabContainerHealthDetails>();

            return new MabContainer(friendlyName, backupManagementType, registrationStatus, healthStatus, ProtectableContainerType.Windows, protectableObjectType, canReRegister, containerId, protectedItemCount, agentVersion, extendedInfo, mabContainerHealthDetails?.ToList(), containerHealthState);
        }

        /// <summary> Initializes a new instance of MabContainerExtendedInfo. </summary>
        /// <param name="lastRefreshedOn"> Time stamp when this container was refreshed. </param>
        /// <param name="backupItemType"> Type of backup items associated with this container. </param>
        /// <param name="backupItems"> List of backup items associated with this container. </param>
        /// <param name="policyName"> Backup policy associated with this container. </param>
        /// <param name="lastBackupStatus"> Latest backup status of this container. </param>
        /// <returns> A new <see cref="Models.MabContainerExtendedInfo"/> instance for mocking. </returns>
        public static MabContainerExtendedInfo MabContainerExtendedInfo(DateTimeOffset? lastRefreshedOn = null, BackupItemType? backupItemType = null, IEnumerable<string> backupItems = null, string policyName = null, string lastBackupStatus = null)
        {
            backupItems ??= new List<string>();

            return new MabContainerExtendedInfo(lastRefreshedOn, backupItemType, backupItems?.ToList(), policyName, lastBackupStatus);
        }

        /// <summary> Initializes a new instance of MabContainerHealthDetails. </summary>
        /// <param name="code"> Health Code. </param>
        /// <param name="title"> Health Title. </param>
        /// <param name="message"> Health Message. </param>
        /// <param name="recommendations"> Health Recommended Actions. </param>
        /// <returns> A new <see cref="Models.MabContainerHealthDetails"/> instance for mocking. </returns>
        public static MabContainerHealthDetails MabContainerHealthDetails(int? code = null, string title = null, string message = null, IEnumerable<string> recommendations = null)
        {
            recommendations ??= new List<string>();

            return new MabContainerHealthDetails(code, title, message, recommendations?.ToList());
        }

        /// <summary> Initializes a new instance of OperationStatusJobExtendedInfo. </summary>
        /// <param name="jobId"> ID of the job created for this protected item. </param>
        /// <returns> A new <see cref="Models.OperationStatusJobExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusJobExtendedInfo OperationStatusJobExtendedInfo(string jobId = null)
        {
            return new OperationStatusJobExtendedInfo("OperationStatusJobExtendedInfo", jobId);
        }

        /// <summary> Initializes a new instance of OperationStatusJobsExtendedInfo. </summary>
        /// <param name="jobIds"> IDs of the jobs created for the protected item. </param>
        /// <param name="failedJobsError"> Stores all the failed jobs along with the corresponding error codes. </param>
        /// <returns> A new <see cref="Models.OperationStatusJobsExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusJobsExtendedInfo OperationStatusJobsExtendedInfo(IEnumerable<string> jobIds = null, IReadOnlyDictionary<string, string> failedJobsError = null)
        {
            jobIds ??= new List<string>();
            failedJobsError ??= new Dictionary<string, string>();

            return new OperationStatusJobsExtendedInfo("OperationStatusJobsExtendedInfo", jobIds?.ToList(), failedJobsError);
        }

        /// <summary> Initializes a new instance of OperationStatusProvisionILRExtendedInfo. </summary>
        /// <param name="recoveryTargetClientScripts"> Target details for file / folder restore. </param>
        /// <returns> A new <see cref="Models.OperationStatusProvisionILRExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusProvisionILRExtendedInfo OperationStatusProvisionILRExtendedInfo(IEnumerable<ClientScriptForConnect> recoveryTargetClientScripts = null)
        {
            recoveryTargetClientScripts ??= new List<ClientScriptForConnect>();

            return new OperationStatusProvisionILRExtendedInfo("OperationStatusProvisionILRExtendedInfo", recoveryTargetClientScripts != null ? new InstantItemRecoveryTarget(recoveryTargetClientScripts?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of OperationStatusValidateOperationExtendedInfo. </summary>
        /// <param name="validateOperationResponseValidationResults"> Gets the validation operation response. </param>
        /// <returns> A new <see cref="Models.OperationStatusValidateOperationExtendedInfo"/> instance for mocking. </returns>
        public static OperationStatusValidateOperationExtendedInfo OperationStatusValidateOperationExtendedInfo(IEnumerable<ErrorDetail> validateOperationResponseValidationResults = null)
        {
            validateOperationResponseValidationResults ??= new List<ErrorDetail>();

            return new OperationStatusValidateOperationExtendedInfo("OperationStatusValidateOperationExtendedInfo", validateOperationResponseValidationResults != null ? new ValidateOperationResponse(validateOperationResponseValidationResults?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="pointInTime"> PointInTime value. </param>
        /// <param name="recoveryPointRehydrationInfo"> RP Rehydration Info. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, DateTimeOffset? pointInTime = null, RecoveryPointRehydrationInfo recoveryPointRehydrationInfo = null)
        {
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest("AzureWorkloadSAPHanaPointInTimeRestoreWithRehydrateRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, pointInTime, recoveryPointRehydrationInfo);
        }

        /// <summary> Initializes a new instance of RecoveryPointRehydrationInfo. </summary>
        /// <param name="rehydrationRetentionDuration">
        /// How long the rehydrated RP should be kept
        /// Should be ISO8601 Duration format e.g. &quot;P7D&quot;
        /// </param>
        /// <param name="rehydrationPriority"> Rehydration Priority. </param>
        /// <returns> A new <see cref="Models.RecoveryPointRehydrationInfo"/> instance for mocking. </returns>
        public static RecoveryPointRehydrationInfo RecoveryPointRehydrationInfo(TimeSpan? rehydrationRetentionDuration = null, RehydrationPriority? rehydrationPriority = null)
        {
            return new RecoveryPointRehydrationInfo(rehydrationRetentionDuration, rehydrationPriority);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSAPHanaRestoreWithRehydrateRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="recoveryPointRehydrationInfo"> RP Rehydration Info. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSAPHanaRestoreWithRehydrateRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSAPHanaRestoreWithRehydrateRequest AzureWorkloadSAPHanaRestoreWithRehydrateRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, RecoveryPointRehydrationInfo recoveryPointRehydrationInfo = null)
        {
            propertyBag ??= new Dictionary<string, string>();

            return new AzureWorkloadSAPHanaRestoreWithRehydrateRequest("AzureWorkloadSAPHanaRestoreWithRehydrateRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, recoveryPointRehydrationInfo);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="shouldUseAlternateTargetLocation"> Default option set to true. If this is set to false, alternate data directory must be provided. </param>
        /// <param name="isNonRecoverable"> SQL specific property where user can chose to set no-recovery when restore operation is tried. </param>
        /// <param name="alternateDirectoryPaths"> Data directory details. </param>
        /// <param name="pointInTime"> PointInTime value. </param>
        /// <param name="recoveryPointRehydrationInfo"> RP Rehydration Info. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, bool? shouldUseAlternateTargetLocation = null, bool? isNonRecoverable = null, IEnumerable<SQLDataDirectoryMapping> alternateDirectoryPaths = null, DateTimeOffset? pointInTime = null, RecoveryPointRehydrationInfo recoveryPointRehydrationInfo = null)
        {
            propertyBag ??= new Dictionary<string, string>();
            alternateDirectoryPaths ??= new List<SQLDataDirectoryMapping>();

            return new AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest("AzureWorkloadSQLPointInTimeRestoreWithRehydrateRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, shouldUseAlternateTargetLocation, isNonRecoverable, alternateDirectoryPaths?.ToList(), pointInTime, recoveryPointRehydrationInfo);
        }

        /// <summary> Initializes a new instance of AzureWorkloadSQLRestoreWithRehydrateRequest. </summary>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM on which workload that was running is being recovered. </param>
        /// <param name="propertyBag"> Workload specific property bag. </param>
        /// <param name="targetInfo"> Details of target database. </param>
        /// <param name="recoveryMode"> Defines whether the current recovery mode is file restore or database restore. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the target VM
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="shouldUseAlternateTargetLocation"> Default option set to true. If this is set to false, alternate data directory must be provided. </param>
        /// <param name="isNonRecoverable"> SQL specific property where user can chose to set no-recovery when restore operation is tried. </param>
        /// <param name="alternateDirectoryPaths"> Data directory details. </param>
        /// <param name="recoveryPointRehydrationInfo"> RP Rehydration Info. </param>
        /// <returns> A new <see cref="Models.AzureWorkloadSQLRestoreWithRehydrateRequest"/> instance for mocking. </returns>
        public static AzureWorkloadSQLRestoreWithRehydrateRequest AzureWorkloadSQLRestoreWithRehydrateRequest(RecoveryType? recoveryType = null, string sourceResourceId = null, IDictionary<string, string> propertyBag = null, TargetRestoreInfo targetInfo = null, RecoveryMode? recoveryMode = null, string targetVirtualMachineId = null, bool? shouldUseAlternateTargetLocation = null, bool? isNonRecoverable = null, IEnumerable<SQLDataDirectoryMapping> alternateDirectoryPaths = null, RecoveryPointRehydrationInfo recoveryPointRehydrationInfo = null)
        {
            propertyBag ??= new Dictionary<string, string>();
            alternateDirectoryPaths ??= new List<SQLDataDirectoryMapping>();

            return new AzureWorkloadSQLRestoreWithRehydrateRequest("AzureWorkloadSQLRestoreWithRehydrateRequest", recoveryType, sourceResourceId, propertyBag, targetInfo, recoveryMode, targetVirtualMachineId, shouldUseAlternateTargetLocation, isNonRecoverable, alternateDirectoryPaths?.ToList(), recoveryPointRehydrationInfo);
        }

        /// <summary> Initializes a new instance of IaasVmRestoreWithRehydrationRequest. </summary>
        /// <param name="recoveryPointId"> ID of the backup copy to be recovered. </param>
        /// <param name="recoveryType"> Type of this recovery. </param>
        /// <param name="sourceResourceId"> Fully qualified ARM ID of the VM which is being recovered. </param>
        /// <param name="targetVirtualMachineId">
        /// This is the complete ARM Id of the VM that will be created.
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}/provider/Microsoft.Compute/virtualmachines/{vm}
        /// </param>
        /// <param name="targetResourceGroupId">
        /// This is the ARM Id of the resource group that you want to create for this Virtual machine and other artifacts.
        /// For e.g. /subscriptions/{subId}/resourcegroups/{rg}
        /// </param>
        /// <param name="storageAccountId"> Fully qualified ARM ID of the storage account to which the VM has to be restored. </param>
        /// <param name="virtualNetworkId">
        /// This is the virtual network Id of the vnet that will be attached to the virtual machine.
        /// User will be validated for join action permissions in the linked access.
        /// </param>
        /// <param name="subnetId">
        /// Subnet ID, is the subnet ID associated with the to be restored VM. For Classic VMs it would be
        /// {VnetID}/Subnet/{SubnetName} and, for the Azure Resource Manager VMs it would be ARM resource ID used to represent
        /// the subnet.
        /// </param>
        /// <param name="targetDomainNameId">
        /// Fully qualified ARM ID of the domain name to be associated to the VM being restored. This applies only to Classic
        /// Virtual Machines.
        /// </param>
        /// <param name="region"> Region in which the virtual machine is restored. </param>
        /// <param name="affinityGroup"> Affinity group associated to VM to be restored. Used only for Classic Compute Virtual Machines. </param>
        /// <param name="createNewCloudService">
        /// Should a new cloud service be created while restoring the VM. If this is false, VM will be restored to the same
        /// cloud service as it was at the time of backup.
        /// </param>
        /// <param name="originalStorageAccountOption"> Original Storage Account Option. </param>
        /// <param name="encryptionDetails"> Details needed if the VM was encrypted at the time of backup. </param>
        /// <param name="restoreDiskLunList"> List of Disk LUNs for partial restore. </param>
        /// <param name="restoreWithManagedDisks"> Flag to denote of an Unmanaged disk VM should be restored with Managed disks. </param>
        /// <param name="diskEncryptionSetId"> DiskEncryptionSet&apos;s ID - needed if the VM needs to be encrypted at rest during restore with customer managed key. </param>
        /// <param name="zones"> Target zone where the VM and its disks should be restored. </param>
        /// <param name="identityInfo"> Managed Identity information required to access customer storage account. </param>
        /// <param name="identityBasedRestoreDetails"> IaaS VM workload specific restore details for restores using managed identity. </param>
        /// <param name="recoveryPointRehydrationInfo"> RP Rehydration Info. </param>
        /// <returns> A new <see cref="Models.IaasVmRestoreWithRehydrationRequest"/> instance for mocking. </returns>
        public static IaasVmRestoreWithRehydrationRequest IaasVmRestoreWithRehydrationRequest(string recoveryPointId = null, RecoveryType? recoveryType = null, string sourceResourceId = null, string targetVirtualMachineId = null, string targetResourceGroupId = null, string storageAccountId = null, string virtualNetworkId = null, string subnetId = null, string targetDomainNameId = null, string region = null, string affinityGroup = null, bool? createNewCloudService = null, bool? originalStorageAccountOption = null, EncryptionDetails encryptionDetails = null, IEnumerable<int> restoreDiskLunList = null, bool? restoreWithManagedDisks = null, string diskEncryptionSetId = null, IEnumerable<string> zones = null, IdentityInfo identityInfo = null, IdentityBasedRestoreDetails identityBasedRestoreDetails = null, RecoveryPointRehydrationInfo recoveryPointRehydrationInfo = null)
        {
            restoreDiskLunList ??= new List<int>();
            zones ??= new List<string>();

            return new IaasVmRestoreWithRehydrationRequest("IaasVMRestoreWithRehydrationRequest", recoveryPointId, recoveryType, sourceResourceId, targetVirtualMachineId, targetResourceGroupId, storageAccountId, virtualNetworkId, subnetId, targetDomainNameId, region, affinityGroup, createNewCloudService, originalStorageAccountOption, encryptionDetails, restoreDiskLunList?.ToList(), restoreWithManagedDisks, diskEncryptionSetId, zones?.ToList(), identityInfo, identityBasedRestoreDetails, recoveryPointRehydrationInfo);
        }
    }
}
