// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Orbital.Models;

namespace Azure.ResourceManager.Orbital
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _spacecraftClientDiagnostics;
        private SpacecraftsRestOperations _spacecraftRestClient;
        private ClientDiagnostics _contactProfileClientDiagnostics;
        private ContactProfilesRestOperations _contactProfileRestClient;
        private ClientDiagnostics _operationsResultsClientDiagnostics;
        private OperationsResultsRestOperations _operationsResultsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SpacecraftClientDiagnostics => _spacecraftClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Orbital", SpacecraftResource.ResourceType.Namespace, Diagnostics);
        private SpacecraftsRestOperations SpacecraftRestClient => _spacecraftRestClient ??= new SpacecraftsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SpacecraftResource.ResourceType));
        private ClientDiagnostics ContactProfileClientDiagnostics => _contactProfileClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Orbital", ContactProfileResource.ResourceType.Namespace, Diagnostics);
        private ContactProfilesRestOperations ContactProfileRestClient => _contactProfileRestClient ??= new ContactProfilesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ContactProfileResource.ResourceType));
        private ClientDiagnostics OperationsResultsClientDiagnostics => _operationsResultsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Orbital", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OperationsResultsRestOperations OperationsResultsRestClient => _operationsResultsRestClient ??= new OperationsResultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of AvailableGroundStationResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of AvailableGroundStationResources and their operations over a AvailableGroundStationResource. </returns>
        public virtual AvailableGroundStationCollection GetAvailableGroundStations()
        {
            return GetCachedClient(Client => new AvailableGroundStationCollection(Client, Id));
        }

        /// <summary>
        /// Returns list of spacecrafts by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts
        /// Operation Id: Spacecrafts_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SpacecraftResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SpacecraftResource> GetSpacecraftsAsync(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SpacecraftResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SpacecraftClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSpacecrafts");
                scope.Start();
                try
                {
                    var response = await SpacecraftRestClient.ListBySubscriptionAsync(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SpacecraftResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SpacecraftClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSpacecrafts");
                scope.Start();
                try
                {
                    var response = await SpacecraftRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of spacecrafts by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts
        /// Operation Id: Spacecrafts_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SpacecraftResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SpacecraftResource> GetSpacecrafts(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<SpacecraftResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SpacecraftClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSpacecrafts");
                scope.Start();
                try
                {
                    var response = SpacecraftRestClient.ListBySubscription(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SpacecraftResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SpacecraftClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSpacecrafts");
                scope.Start();
                try
                {
                    var response = SpacecraftRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of contact profiles by Subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles
        /// Operation Id: ContactProfiles_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContactProfileResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContactProfileResource> GetContactProfilesAsync(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ContactProfileResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContactProfileClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContactProfiles");
                scope.Start();
                try
                {
                    var response = await ContactProfileRestClient.ListBySubscriptionAsync(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContactProfileResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContactProfileClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContactProfiles");
                scope.Start();
                try
                {
                    var response = await ContactProfileRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of contact profiles by Subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles
        /// Operation Id: ContactProfiles_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContactProfileResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContactProfileResource> GetContactProfiles(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<ContactProfileResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContactProfileClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContactProfiles");
                scope.Start();
                try
                {
                    var response = ContactProfileRestClient.ListBySubscription(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContactProfileResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContactProfileClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContactProfiles");
                scope.Start();
                try
                {
                    var response = ContactProfileRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns operation results.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/locations/{location}/operationResults/{operationId}
        /// Operation Id: OperationsResults_Get
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="operationId"> The ID of an ongoing async operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<OperationResult>> GetOperationsResultAsync(WaitUntil waitUntil, AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationsResultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationsResult");
            scope.Start();
            try
            {
                var response = await OperationsResultsRestClient.GetAsync(Id.SubscriptionId, location, operationId, cancellationToken).ConfigureAwait(false);
                var operation = new OrbitalArmOperation<OperationResult>(new OperationResultOperationSource(), OperationsResultsClientDiagnostics, Pipeline, OperationsResultsRestClient.CreateGetRequest(Id.SubscriptionId, location, operationId).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns operation results.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/locations/{location}/operationResults/{operationId}
        /// Operation Id: OperationsResults_Get
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="operationId"> The ID of an ongoing async operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<OperationResult> GetOperationsResult(WaitUntil waitUntil, AzureLocation location, string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = OperationsResultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOperationsResult");
            scope.Start();
            try
            {
                var response = OperationsResultsRestClient.Get(Id.SubscriptionId, location, operationId, cancellationToken);
                var operation = new OrbitalArmOperation<OperationResult>(new OperationResultOperationSource(), OperationsResultsClientDiagnostics, Pipeline, OperationsResultsRestClient.CreateGetRequest(Id.SubscriptionId, location, operationId).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
