// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Orbital
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _orbitalSpacecraftSpacecraftsClientDiagnostics;
        private SpacecraftsRestOperations _orbitalSpacecraftSpacecraftsRestClient;
        private ClientDiagnostics _orbitalContactProfileContactProfilesClientDiagnostics;
        private ContactProfilesRestOperations _orbitalContactProfileContactProfilesRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics OrbitalSpacecraftSpacecraftsClientDiagnostics => _orbitalSpacecraftSpacecraftsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Orbital", OrbitalSpacecraftResource.ResourceType.Namespace, Diagnostics);
        private SpacecraftsRestOperations OrbitalSpacecraftSpacecraftsRestClient => _orbitalSpacecraftSpacecraftsRestClient ??= new SpacecraftsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(OrbitalSpacecraftResource.ResourceType));
        private ClientDiagnostics OrbitalContactProfileContactProfilesClientDiagnostics => _orbitalContactProfileContactProfilesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Orbital", OrbitalContactProfileResource.ResourceType.Namespace, Diagnostics);
        private ContactProfilesRestOperations OrbitalContactProfileContactProfilesRestClient => _orbitalContactProfileContactProfilesRestClient ??= new ContactProfilesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(OrbitalContactProfileResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of AvailableGroundStationResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of AvailableGroundStationResources and their operations over a AvailableGroundStationResource. </returns>
        public virtual AvailableGroundStationCollection GetAvailableGroundStations()
        {
            return GetCachedClient(Client => new AvailableGroundStationCollection(Client, Id));
        }

        /// <summary>
        /// Returns list of spacecrafts by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts
        /// Operation Id: Spacecrafts_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OrbitalSpacecraftResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OrbitalSpacecraftResource> GetOrbitalSpacecraftsAsync(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<OrbitalSpacecraftResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OrbitalSpacecraftSpacecraftsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalSpacecrafts");
                scope.Start();
                try
                {
                    var response = await OrbitalSpacecraftSpacecraftsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalSpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrbitalSpacecraftResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OrbitalSpacecraftSpacecraftsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalSpacecrafts");
                scope.Start();
                try
                {
                    var response = await OrbitalSpacecraftSpacecraftsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalSpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of spacecrafts by subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts
        /// Operation Id: Spacecrafts_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OrbitalSpacecraftResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OrbitalSpacecraftResource> GetOrbitalSpacecrafts(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<OrbitalSpacecraftResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OrbitalSpacecraftSpacecraftsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalSpacecrafts");
                scope.Start();
                try
                {
                    var response = OrbitalSpacecraftSpacecraftsRestClient.ListBySubscription(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalSpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrbitalSpacecraftResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OrbitalSpacecraftSpacecraftsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalSpacecrafts");
                scope.Start();
                try
                {
                    var response = OrbitalSpacecraftSpacecraftsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalSpacecraftResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of contact profiles by Subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles
        /// Operation Id: ContactProfiles_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OrbitalContactProfileResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OrbitalContactProfileResource> GetOrbitalContactProfilesAsync(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<OrbitalContactProfileResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OrbitalContactProfileContactProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalContactProfiles");
                scope.Start();
                try
                {
                    var response = await OrbitalContactProfileContactProfilesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OrbitalContactProfileResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OrbitalContactProfileContactProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalContactProfiles");
                scope.Start();
                try
                {
                    var response = await OrbitalContactProfileContactProfilesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of contact profiles by Subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles
        /// Operation Id: ContactProfiles_ListBySubscription
        /// </summary>
        /// <param name="skiptoken"> An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OrbitalContactProfileResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OrbitalContactProfileResource> GetOrbitalContactProfiles(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<OrbitalContactProfileResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OrbitalContactProfileContactProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalContactProfiles");
                scope.Start();
                try
                {
                    var response = OrbitalContactProfileContactProfilesRestClient.ListBySubscription(Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OrbitalContactProfileResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OrbitalContactProfileContactProfilesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetOrbitalContactProfiles");
                scope.Start();
                try
                {
                    var response = OrbitalContactProfileContactProfilesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new OrbitalContactProfileResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
