// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Orbital.Models
{
    public partial class OrbitalContactProfileLinkChannel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("centerFrequencyMHz");
            writer.WriteNumberValue(CenterFrequencyMHz);
            writer.WritePropertyName("bandwidthMHz");
            writer.WriteNumberValue(BandwidthMHz);
            writer.WritePropertyName("endPoint");
            writer.WriteObjectValue(EndPoint);
            if (Optional.IsDefined(ModulationConfiguration))
            {
                writer.WritePropertyName("modulationConfiguration");
                writer.WriteStringValue(ModulationConfiguration);
            }
            if (Optional.IsDefined(DemodulationConfiguration))
            {
                writer.WritePropertyName("demodulationConfiguration");
                writer.WriteStringValue(DemodulationConfiguration);
            }
            if (Optional.IsDefined(EncodingConfiguration))
            {
                writer.WritePropertyName("encodingConfiguration");
                writer.WriteStringValue(EncodingConfiguration);
            }
            if (Optional.IsDefined(DecodingConfiguration))
            {
                writer.WritePropertyName("decodingConfiguration");
                writer.WriteStringValue(DecodingConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static OrbitalContactProfileLinkChannel DeserializeOrbitalContactProfileLinkChannel(JsonElement element)
        {
            string name = default;
            float centerFrequencyMHz = default;
            float bandwidthMHz = default;
            OrbitalContactEndpoint endPoint = default;
            Optional<string> modulationConfiguration = default;
            Optional<string> demodulationConfiguration = default;
            Optional<string> encodingConfiguration = default;
            Optional<string> decodingConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("centerFrequencyMHz"))
                {
                    centerFrequencyMHz = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("bandwidthMHz"))
                {
                    bandwidthMHz = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("endPoint"))
                {
                    endPoint = OrbitalContactEndpoint.DeserializeOrbitalContactEndpoint(property.Value);
                    continue;
                }
                if (property.NameEquals("modulationConfiguration"))
                {
                    modulationConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("demodulationConfiguration"))
                {
                    demodulationConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encodingConfiguration"))
                {
                    encodingConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("decodingConfiguration"))
                {
                    decodingConfiguration = property.Value.GetString();
                    continue;
                }
            }
            return new OrbitalContactProfileLinkChannel(name, centerFrequencyMHz, bandwidthMHz, endPoint, modulationConfiguration.Value, demodulationConfiguration.Value, encodingConfiguration.Value, decodingConfiguration.Value);
        }
    }
}
