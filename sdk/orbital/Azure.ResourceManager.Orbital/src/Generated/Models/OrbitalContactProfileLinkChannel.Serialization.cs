// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Orbital.Models
{
    public partial class OrbitalContactProfileLinkChannel : IUtf8JsonSerializable, IModelJsonSerializable<OrbitalContactProfileLinkChannel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<OrbitalContactProfileLinkChannel>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<OrbitalContactProfileLinkChannel>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<OrbitalContactProfileLinkChannel>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("centerFrequencyMHz"u8);
            writer.WriteNumberValue(CenterFrequencyMHz);
            writer.WritePropertyName("bandwidthMHz"u8);
            writer.WriteNumberValue(BandwidthMHz);
            writer.WritePropertyName("endPoint"u8);
            if (EndPoint is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<OrbitalContactEndpoint>)EndPoint).Serialize(writer, options);
            }
            if (Optional.IsDefined(ModulationConfiguration))
            {
                writer.WritePropertyName("modulationConfiguration"u8);
                writer.WriteStringValue(ModulationConfiguration);
            }
            if (Optional.IsDefined(DemodulationConfiguration))
            {
                writer.WritePropertyName("demodulationConfiguration"u8);
                writer.WriteStringValue(DemodulationConfiguration);
            }
            if (Optional.IsDefined(EncodingConfiguration))
            {
                writer.WritePropertyName("encodingConfiguration"u8);
                writer.WriteStringValue(EncodingConfiguration);
            }
            if (Optional.IsDefined(DecodingConfiguration))
            {
                writer.WritePropertyName("decodingConfiguration"u8);
                writer.WriteStringValue(DecodingConfiguration);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static OrbitalContactProfileLinkChannel DeserializeOrbitalContactProfileLinkChannel(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            float centerFrequencyMHz = default;
            float bandwidthMHz = default;
            OrbitalContactEndpoint endPoint = default;
            Optional<string> modulationConfiguration = default;
            Optional<string> demodulationConfiguration = default;
            Optional<string> encodingConfiguration = default;
            Optional<string> decodingConfiguration = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("centerFrequencyMHz"u8))
                {
                    centerFrequencyMHz = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("bandwidthMHz"u8))
                {
                    bandwidthMHz = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("endPoint"u8))
                {
                    endPoint = OrbitalContactEndpoint.DeserializeOrbitalContactEndpoint(property.Value);
                    continue;
                }
                if (property.NameEquals("modulationConfiguration"u8))
                {
                    modulationConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("demodulationConfiguration"u8))
                {
                    demodulationConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encodingConfiguration"u8))
                {
                    encodingConfiguration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("decodingConfiguration"u8))
                {
                    decodingConfiguration = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new OrbitalContactProfileLinkChannel(name, centerFrequencyMHz, bandwidthMHz, endPoint, modulationConfiguration.Value, demodulationConfiguration.Value, encodingConfiguration.Value, decodingConfiguration.Value, serializedAdditionalRawData);
        }

        OrbitalContactProfileLinkChannel IModelJsonSerializable<OrbitalContactProfileLinkChannel>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<OrbitalContactProfileLinkChannel>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeOrbitalContactProfileLinkChannel(doc.RootElement, options);
        }

        BinaryData IModelSerializable<OrbitalContactProfileLinkChannel>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<OrbitalContactProfileLinkChannel>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        OrbitalContactProfileLinkChannel IModelSerializable<OrbitalContactProfileLinkChannel>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<OrbitalContactProfileLinkChannel>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeOrbitalContactProfileLinkChannel(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="OrbitalContactProfileLinkChannel"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="OrbitalContactProfileLinkChannel"/> to convert. </param>
        public static implicit operator RequestContent(OrbitalContactProfileLinkChannel model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="OrbitalContactProfileLinkChannel"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator OrbitalContactProfileLinkChannel(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeOrbitalContactProfileLinkChannel(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
