// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Orbital.Models
{
    public partial class OrbitalContactProfileLink : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("polarization"u8);
            writer.WriteStringValue(Polarization.ToString());
            writer.WritePropertyName("direction"u8);
            writer.WriteStringValue(Direction.ToString());
            if (Optional.IsDefined(GainOverTemperature))
            {
                writer.WritePropertyName("gainOverTemperature"u8);
                writer.WriteNumberValue(GainOverTemperature.Value);
            }
            if (Optional.IsDefined(EirpdBW))
            {
                writer.WritePropertyName("eirpdBW"u8);
                writer.WriteNumberValue(EirpdBW.Value);
            }
            writer.WritePropertyName("channels"u8);
            writer.WriteStartArray();
            foreach (var item in Channels)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static OrbitalContactProfileLink DeserializeOrbitalContactProfileLink(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            OrbitalLinkPolarization polarization = default;
            OrbitalLinkDirection direction = default;
            Optional<float> gainOverTemperature = default;
            Optional<float> eirpdBW = default;
            IList<OrbitalContactProfileLinkChannel> channels = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("polarization"u8))
                {
                    polarization = new OrbitalLinkPolarization(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("direction"u8))
                {
                    direction = new OrbitalLinkDirection(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("gainOverTemperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gainOverTemperature = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("eirpdBW"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eirpdBW = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("channels"u8))
                {
                    List<OrbitalContactProfileLinkChannel> array = new List<OrbitalContactProfileLinkChannel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OrbitalContactProfileLinkChannel.DeserializeOrbitalContactProfileLinkChannel(item));
                    }
                    channels = array;
                    continue;
                }
            }
            return new OrbitalContactProfileLink(name, polarization, direction, Optional.ToNullable(gainOverTemperature), Optional.ToNullable(eirpdBW), channels);
        }
    }
}
