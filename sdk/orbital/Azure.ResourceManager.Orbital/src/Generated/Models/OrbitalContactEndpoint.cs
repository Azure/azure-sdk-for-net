// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using Azure.Core;

namespace Azure.ResourceManager.Orbital.Models
{
    /// <summary> Customer End point to store/retrieve data during a contact. </summary>
    public partial class OrbitalContactEndpoint
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="OrbitalContactEndpoint"/>. </summary>
        /// <param name="ipAddress"> IP Address. </param>
        /// <param name="endPointName"> Name of an end point. </param>
        /// <param name="port"> TCP port to listen on to receive data. </param>
        /// <param name="protocol"> Protocol either UDP or TCP. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ipAddress"/>, <paramref name="endPointName"/> or <paramref name="port"/> is null. </exception>
        public OrbitalContactEndpoint(IPAddress ipAddress, string endPointName, string port, OrbitalContactProtocol protocol)
        {
            Argument.AssertNotNull(ipAddress, nameof(ipAddress));
            Argument.AssertNotNull(endPointName, nameof(endPointName));
            Argument.AssertNotNull(port, nameof(port));

            IPAddress = ipAddress;
            EndPointName = endPointName;
            Port = port;
            Protocol = protocol;
        }

        /// <summary> Initializes a new instance of <see cref="OrbitalContactEndpoint"/>. </summary>
        /// <param name="ipAddress"> IP Address. </param>
        /// <param name="endPointName"> Name of an end point. </param>
        /// <param name="port"> TCP port to listen on to receive data. </param>
        /// <param name="protocol"> Protocol either UDP or TCP. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal OrbitalContactEndpoint(IPAddress ipAddress, string endPointName, string port, OrbitalContactProtocol protocol, Dictionary<string, BinaryData> rawData)
        {
            IPAddress = ipAddress;
            EndPointName = endPointName;
            Port = port;
            Protocol = protocol;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="OrbitalContactEndpoint"/> for deserialization. </summary>
        internal OrbitalContactEndpoint()
        {
        }

        /// <summary> IP Address. </summary>
        public IPAddress IPAddress { get; set; }
        /// <summary> Name of an end point. </summary>
        public string EndPointName { get; set; }
        /// <summary> TCP port to listen on to receive data. </summary>
        public string Port { get; set; }
        /// <summary> Protocol either UDP or TCP. </summary>
        public OrbitalContactProtocol Protocol { get; set; }
    }
}
