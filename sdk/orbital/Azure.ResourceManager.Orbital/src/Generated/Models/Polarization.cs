// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Orbital.Models
{
    /// <summary> Polarization. e.g. (RHCP, LHCP). </summary>
    public readonly partial struct Polarization : IEquatable<Polarization>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Polarization"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Polarization(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RhcpValue = "RHCP";
        private const string LhcpValue = "LHCP";
        private const string LinearVerticalValue = "linearVertical";
        private const string LinearHorizontalValue = "linearHorizontal";

        /// <summary> RHCP. </summary>
        public static Polarization Rhcp { get; } = new Polarization(RhcpValue);
        /// <summary> LHCP. </summary>
        public static Polarization Lhcp { get; } = new Polarization(LhcpValue);
        /// <summary> linearVertical. </summary>
        public static Polarization LinearVertical { get; } = new Polarization(LinearVerticalValue);
        /// <summary> linearHorizontal. </summary>
        public static Polarization LinearHorizontal { get; } = new Polarization(LinearHorizontalValue);
        /// <summary> Determines if two <see cref="Polarization"/> values are the same. </summary>
        public static bool operator ==(Polarization left, Polarization right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Polarization"/> values are not the same. </summary>
        public static bool operator !=(Polarization left, Polarization right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Polarization"/>. </summary>
        public static implicit operator Polarization(string value) => new Polarization(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Polarization other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Polarization other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
