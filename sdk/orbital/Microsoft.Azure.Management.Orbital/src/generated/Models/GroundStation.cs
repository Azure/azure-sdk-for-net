// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace AzureOrbital.Models
{
    /// <summary> Ground Station contains one or more antennas. </summary>
    public partial class GroundStation
    {
        /// <summary> Initializes a new instance of GroundStation. </summary>
        internal GroundStation()
        {
        }

        /// <summary> Initializes a new instance of GroundStation. </summary>
        /// <param name="name"> Name of the ground station. </param>
        /// <param name="location"> Azure region. </param>
        /// <param name="city"> city of ground station. </param>
        /// <param name="providerName"> Ground station provider name. </param>
        /// <param name="longitudeDegrees"> Longitude of the ground station in decimal degrees. </param>
        /// <param name="latitudeDegrees"> Latitude of the ground station in decimal degrees. </param>
        /// <param name="altitudeMeters"> Altitude of the ground station. </param>
        internal GroundStation(string name, string location, string city, string providerName, float? longitudeDegrees, float? latitudeDegrees, float? altitudeMeters)
        {
            Name = name;
            Location = location;
            City = city;
            ProviderName = providerName;
            LongitudeDegrees = longitudeDegrees;
            LatitudeDegrees = latitudeDegrees;
            AltitudeMeters = altitudeMeters;
        }

        /// <summary> Name of the ground station. </summary>
        public string Name { get; }
        /// <summary> Azure region. </summary>
        public string Location { get; }
        /// <summary> city of ground station. </summary>
        public string City { get; }
        /// <summary> Ground station provider name. </summary>
        public string ProviderName { get; }
        /// <summary> Longitude of the ground station in decimal degrees. </summary>
        public float? LongitudeDegrees { get; }
        /// <summary> Latitude of the ground station in decimal degrees. </summary>
        public float? LatitudeDegrees { get; }
        /// <summary> Altitude of the ground station. </summary>
        public float? AltitudeMeters { get; }
    }
}
