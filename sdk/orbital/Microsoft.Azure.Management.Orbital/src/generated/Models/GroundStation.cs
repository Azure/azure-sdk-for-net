// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Orbital.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Ground Station contains one or more antennas.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class GroundStation : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GroundStation class.
        /// </summary>
        public GroundStation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GroundStation class.
        /// </summary>
        /// <param name="capabilities">ground station capabilities</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="systemData">Metadata pertaining to creation and last
        /// modification of the resource.</param>
        /// <param name="city">city of ground station.</param>
        /// <param name="providerName">Ground station provider name.</param>
        /// <param name="longitudeDegrees">Longitude of the ground station in
        /// decimal degrees.</param>
        /// <param name="latitudeDegrees">Latitude of the ground station in
        /// decimal degrees.</param>
        /// <param name="altitudeMeters">Altitude of the ground station</param>
        /// <param name="globalCommunicationsInfo">Describes the partner's
        /// global communications configuration for the site.</param>
        public GroundStation(IList<string> capabilities, string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), ResourceSystemData systemData = default(ResourceSystemData), string city = default(string), string providerName = default(string), double? longitudeDegrees = default(double?), double? latitudeDegrees = default(double?), double? altitudeMeters = default(double?), GroundStationsPropertiesGlobalCommunicationsInfo globalCommunicationsInfo = default(GroundStationsPropertiesGlobalCommunicationsInfo))
            : base(id, name, type, location, tags, systemData)
        {
            City = city;
            Capabilities = capabilities;
            ProviderName = providerName;
            LongitudeDegrees = longitudeDegrees;
            LatitudeDegrees = latitudeDegrees;
            AltitudeMeters = altitudeMeters;
            GlobalCommunicationsInfo = globalCommunicationsInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets city of ground station.
        /// </summary>
        [JsonProperty(PropertyName = "properties.city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets ground station capabilities
        /// </summary>
        [JsonProperty(PropertyName = "properties.capabilities")]
        public IList<string> Capabilities { get; set; }

        /// <summary>
        /// Gets or sets ground station provider name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.providerName")]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or sets longitude of the ground station in decimal degrees.
        /// </summary>
        [JsonProperty(PropertyName = "properties.longitudeDegrees")]
        public double? LongitudeDegrees { get; set; }

        /// <summary>
        /// Gets or sets latitude of the ground station in decimal degrees.
        /// </summary>
        [JsonProperty(PropertyName = "properties.latitudeDegrees")]
        public double? LatitudeDegrees { get; set; }

        /// <summary>
        /// Gets or sets altitude of the ground station
        /// </summary>
        [JsonProperty(PropertyName = "properties.altitudeMeters")]
        public double? AltitudeMeters { get; set; }

        /// <summary>
        /// Gets or sets describes the partner's global communications
        /// configuration for the site.
        /// </summary>
        [JsonProperty(PropertyName = "properties.globalCommunicationsInfo")]
        public GroundStationsPropertiesGlobalCommunicationsInfo GlobalCommunicationsInfo { get; set; }

    }
}
