// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace AzureOrbital.Models
{
    public partial class GroundStation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location");
                writer.WriteStringValue(Location);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(City))
            {
                writer.WritePropertyName("city");
                writer.WriteStringValue(City);
            }
            if (Optional.IsCollectionDefined(Capabilities))
            {
                writer.WritePropertyName("capabilities");
                writer.WriteStartArray();
                foreach (var item in Capabilities)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ProviderName))
            {
                writer.WritePropertyName("providerName");
                writer.WriteStringValue(ProviderName);
            }
            if (Optional.IsDefined(LongitudeDegrees))
            {
                writer.WritePropertyName("longitudeDegrees");
                writer.WriteNumberValue(LongitudeDegrees.Value);
            }
            if (Optional.IsDefined(LatitudeDegrees))
            {
                writer.WritePropertyName("latitudeDegrees");
                writer.WriteNumberValue(LatitudeDegrees.Value);
            }
            if (Optional.IsDefined(AltitudeMeters))
            {
                writer.WritePropertyName("altitudeMeters");
                writer.WriteNumberValue(AltitudeMeters.Value);
            }
            if (Optional.IsDefined(GlobalCommunicationsInfo))
            {
                writer.WritePropertyName("globalCommunicationsInfo");
                writer.WriteObjectValue(GlobalCommunicationsInfo);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static GroundStation DeserializeGroundStation(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> location = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            Optional<ResourceSystemData> systemData = default;
            Optional<string> city = default;
            Optional<IList<Capability>> capabilities = default;
            Optional<string> providerName = default;
            Optional<float> longitudeDegrees = default;
            Optional<float> latitudeDegrees = default;
            Optional<float> altitudeMeters = default;
            Optional<GroundStationsPropertiesGlobalCommunicationsInfo> globalCommunicationsInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = ResourceSystemData.DeserializeResourceSystemData(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("city"))
                        {
                            city = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("capabilities"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<Capability> array = new List<Capability>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new Capability(item.GetString()));
                            }
                            capabilities = array;
                            continue;
                        }
                        if (property0.NameEquals("providerName"))
                        {
                            providerName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("longitudeDegrees"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            longitudeDegrees = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("latitudeDegrees"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            latitudeDegrees = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("altitudeMeters"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            altitudeMeters = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("globalCommunicationsInfo"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            globalCommunicationsInfo = GroundStationsPropertiesGlobalCommunicationsInfo.DeserializeGroundStationsPropertiesGlobalCommunicationsInfo(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new GroundStation(id.Value, name.Value, type.Value, location.Value, Optional.ToDictionary(tags), systemData.Value, city.Value, Optional.ToList(capabilities), providerName.Value, Optional.ToNullable(longitudeDegrees), Optional.ToNullable(latitudeDegrees), Optional.ToNullable(altitudeMeters), globalCommunicationsInfo.Value);
        }
    }
}
