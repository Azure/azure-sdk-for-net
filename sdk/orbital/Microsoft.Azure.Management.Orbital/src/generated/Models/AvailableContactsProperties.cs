// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Orbital.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of Contact resource.
    /// </summary>
    public partial class AvailableContactsProperties : ContactInstanceProperties
    {
        /// <summary>
        /// Initializes a new instance of the AvailableContactsProperties
        /// class.
        /// </summary>
        public AvailableContactsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AvailableContactsProperties
        /// class.
        /// </summary>
        /// <param name="maximumElevationDegrees">Maximum elevation of the
        /// antenna during the contact in decimal degrees.</param>
        /// <param name="txStartTime">Time at which antenna transmit will be
        /// enabled.</param>
        /// <param name="txEndTime">Time at which antenna transmit will be
        /// disabled.</param>
        /// <param name="rxStartTime">Earliest time to receive a
        /// signal.</param>
        /// <param name="rxEndTime">Time to lost receiving a signal.</param>
        /// <param name="startAzimuthDegrees">Azimuth of the antenna at the
        /// start of the contact in decimal degrees.</param>
        /// <param name="endAzimuthDegrees">Azimuth of the antenna at the end
        /// of the contact in decimal degrees.</param>
        /// <param name="startElevationDegrees">Spacecraft elevation above the
        /// horizon at contact start.</param>
        /// <param name="endElevationDegrees">Spacecraft elevation above the
        /// horizon at contact end.</param>
        public AvailableContactsProperties(double? maximumElevationDegrees = default(double?), System.DateTime? txStartTime = default(System.DateTime?), System.DateTime? txEndTime = default(System.DateTime?), System.DateTime? rxStartTime = default(System.DateTime?), System.DateTime? rxEndTime = default(System.DateTime?), double? startAzimuthDegrees = default(double?), double? endAzimuthDegrees = default(double?), double? startElevationDegrees = default(double?), double? endElevationDegrees = default(double?))
            : base(maximumElevationDegrees, txStartTime, txEndTime, rxStartTime, rxEndTime, startAzimuthDegrees, endAzimuthDegrees, startElevationDegrees, endElevationDegrees)
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

    }
}
