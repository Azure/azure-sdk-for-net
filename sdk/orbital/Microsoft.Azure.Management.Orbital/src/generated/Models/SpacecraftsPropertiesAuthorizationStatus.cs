// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureOrbital.Models
{
    /// <summary> Authorization status of spacecraft. </summary>
    public readonly partial struct SpacecraftsPropertiesAuthorizationStatus : IEquatable<SpacecraftsPropertiesAuthorizationStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SpacecraftsPropertiesAuthorizationStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SpacecraftsPropertiesAuthorizationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllowedValue = "Allowed";
        private const string PendingValue = "Pending";
        private const string DeniedValue = "Denied";

        /// <summary> Allowed. </summary>
        public static SpacecraftsPropertiesAuthorizationStatus Allowed { get; } = new SpacecraftsPropertiesAuthorizationStatus(AllowedValue);
        /// <summary> Pending. </summary>
        public static SpacecraftsPropertiesAuthorizationStatus Pending { get; } = new SpacecraftsPropertiesAuthorizationStatus(PendingValue);
        /// <summary> Denied. </summary>
        public static SpacecraftsPropertiesAuthorizationStatus Denied { get; } = new SpacecraftsPropertiesAuthorizationStatus(DeniedValue);
        /// <summary> Determines if two <see cref="SpacecraftsPropertiesAuthorizationStatus"/> values are the same. </summary>
        public static bool operator ==(SpacecraftsPropertiesAuthorizationStatus left, SpacecraftsPropertiesAuthorizationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SpacecraftsPropertiesAuthorizationStatus"/> values are not the same. </summary>
        public static bool operator !=(SpacecraftsPropertiesAuthorizationStatus left, SpacecraftsPropertiesAuthorizationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SpacecraftsPropertiesAuthorizationStatus"/>. </summary>
        public static implicit operator SpacecraftsPropertiesAuthorizationStatus(string value) => new SpacecraftsPropertiesAuthorizationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SpacecraftsPropertiesAuthorizationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SpacecraftsPropertiesAuthorizationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
