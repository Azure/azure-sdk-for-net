// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureOrbital.Models
{
    /// <summary> Status of a contact. </summary>
    public readonly partial struct ContactPropertiesStatus : IEquatable<ContactPropertiesStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ContactPropertiesStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContactPropertiesStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ScheduledValue = "scheduled";
        private const string CancelledValue = "cancelled";
        private const string SucceededValue = "succeeded";
        private const string FailedValue = "failed";
        private const string ProviderCancelledValue = "providerCancelled";

        /// <summary> scheduled. </summary>
        public static ContactPropertiesStatus Scheduled { get; } = new ContactPropertiesStatus(ScheduledValue);
        /// <summary> cancelled. </summary>
        public static ContactPropertiesStatus Cancelled { get; } = new ContactPropertiesStatus(CancelledValue);
        /// <summary> succeeded. </summary>
        public static ContactPropertiesStatus Succeeded { get; } = new ContactPropertiesStatus(SucceededValue);
        /// <summary> failed. </summary>
        public static ContactPropertiesStatus Failed { get; } = new ContactPropertiesStatus(FailedValue);
        /// <summary> providerCancelled. </summary>
        public static ContactPropertiesStatus ProviderCancelled { get; } = new ContactPropertiesStatus(ProviderCancelledValue);
        /// <summary> Determines if two <see cref="ContactPropertiesStatus"/> values are the same. </summary>
        public static bool operator ==(ContactPropertiesStatus left, ContactPropertiesStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContactPropertiesStatus"/> values are not the same. </summary>
        public static bool operator !=(ContactPropertiesStatus left, ContactPropertiesStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContactPropertiesStatus"/>. </summary>
        public static implicit operator ContactPropertiesStatus(string value) => new ContactPropertiesStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContactPropertiesStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContactPropertiesStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
