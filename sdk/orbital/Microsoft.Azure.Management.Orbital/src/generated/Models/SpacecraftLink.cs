// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Orbital.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Spacecraft Link
    /// </summary>
    public partial class SpacecraftLink
    {
        /// <summary>
        /// Initializes a new instance of the SpacecraftLink class.
        /// </summary>
        public SpacecraftLink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SpacecraftLink class.
        /// </summary>
        /// <param name="centerFrequencyMHz">Center Frequency in MHz</param>
        /// <param name="bandwidthMHz">Bandwidth in MHz</param>
        /// <param name="direction">Direction (uplink or downlink). Possible
        /// values include: 'uplink', 'downlink'</param>
        /// <param name="polarization">polarization. eg (RHCP, LHCP). Possible
        /// values include: 'RHCP', 'LHCP', 'dualRhcpLhcp', 'linearVertical',
        /// 'linearHorizontal'</param>
        public SpacecraftLink(double centerFrequencyMHz, double bandwidthMHz, string direction, string polarization)
        {
            CenterFrequencyMHz = centerFrequencyMHz;
            BandwidthMHz = bandwidthMHz;
            Direction = direction;
            Polarization = polarization;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets center Frequency in MHz
        /// </summary>
        [JsonProperty(PropertyName = "centerFrequencyMHz")]
        public double CenterFrequencyMHz { get; set; }

        /// <summary>
        /// Gets or sets bandwidth in MHz
        /// </summary>
        [JsonProperty(PropertyName = "bandwidthMHz")]
        public double BandwidthMHz { get; set; }

        /// <summary>
        /// Gets or sets direction (uplink or downlink). Possible values
        /// include: 'uplink', 'downlink'
        /// </summary>
        [JsonProperty(PropertyName = "direction")]
        public string Direction { get; set; }

        /// <summary>
        /// Gets or sets polarization. eg (RHCP, LHCP). Possible values
        /// include: 'RHCP', 'LHCP', 'dualRhcpLhcp', 'linearVertical',
        /// 'linearHorizontal'
        /// </summary>
        [JsonProperty(PropertyName = "polarization")]
        public string Polarization { get; set; }

    }
}
