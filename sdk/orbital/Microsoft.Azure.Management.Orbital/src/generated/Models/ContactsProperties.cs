// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Orbital.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of the Contact Resource.
    /// </summary>
    public partial class ContactsProperties
    {
        /// <summary>
        /// Initializes a new instance of the ContactsProperties class.
        /// </summary>
        public ContactsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContactsProperties class.
        /// </summary>
        /// <param name="reservationStartTime">Reservation start time of a
        /// contact.</param>
        /// <param name="reservationEndTime">Reservation end time of a
        /// contact.</param>
        /// <param name="groundStationName">Azure Ground Station name.</param>
        /// <param name="contactProfile">The reference to the contact profile
        /// resource.</param>
        /// <param name="status">Status of a contact. Possible values include:
        /// 'scheduled', 'cancelled', 'succeeded', 'failed',
        /// 'providerCancelled'</param>
        /// <param name="rxStartTime">Receive start time of a contact.</param>
        /// <param name="rxEndTime">Receive end time of a contact.</param>
        /// <param name="txStartTime">Transmit start time of a contact.</param>
        /// <param name="txEndTime">Transmit end time of a contact.</param>
        /// <param name="errorMessage">Any error message while scheduling a
        /// contact.</param>
        /// <param name="maximumElevationDegrees">Maximum elevation of the
        /// antenna during the contact in decimal degrees.</param>
        /// <param name="startAzimuthDegrees">Azimuth of the antenna at the
        /// start of the contact in decimal degrees.</param>
        /// <param name="endAzimuthDegrees">Azimuth of the antenna at the end
        /// of the contact in decimal degrees.</param>
        /// <param name="startElevationDegrees">Spacecraft elevation above the
        /// horizon at contact start.</param>
        /// <param name="endElevationDegrees">Spacecraft elevation above the
        /// horizon at contact end.</param>
        public ContactsProperties(System.DateTime reservationStartTime, System.DateTime reservationEndTime, string groundStationName, ContactsPropertiesContactProfile contactProfile, Status? status = default(Status?), System.DateTime? rxStartTime = default(System.DateTime?), System.DateTime? rxEndTime = default(System.DateTime?), System.DateTime? txStartTime = default(System.DateTime?), System.DateTime? txEndTime = default(System.DateTime?), string errorMessage = default(string), double? maximumElevationDegrees = default(double?), double? startAzimuthDegrees = default(double?), double? endAzimuthDegrees = default(double?), double? startElevationDegrees = default(double?), double? endElevationDegrees = default(double?))
        {
            Status = status;
            ReservationStartTime = reservationStartTime;
            ReservationEndTime = reservationEndTime;
            RxStartTime = rxStartTime;
            RxEndTime = rxEndTime;
            TxStartTime = txStartTime;
            TxEndTime = txEndTime;
            ErrorMessage = errorMessage;
            MaximumElevationDegrees = maximumElevationDegrees;
            StartAzimuthDegrees = startAzimuthDegrees;
            EndAzimuthDegrees = endAzimuthDegrees;
            GroundStationName = groundStationName;
            StartElevationDegrees = startElevationDegrees;
            EndElevationDegrees = endElevationDegrees;
            ContactProfile = contactProfile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets status of a contact. Possible values include: 'scheduled',
        /// 'cancelled', 'succeeded', 'failed', 'providerCancelled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public Status? Status { get; private set; }

        /// <summary>
        /// Gets or sets reservation start time of a contact.
        /// </summary>
        [JsonProperty(PropertyName = "reservationStartTime")]
        public System.DateTime ReservationStartTime { get; set; }

        /// <summary>
        /// Gets or sets reservation end time of a contact.
        /// </summary>
        [JsonProperty(PropertyName = "reservationEndTime")]
        public System.DateTime ReservationEndTime { get; set; }

        /// <summary>
        /// Gets receive start time of a contact.
        /// </summary>
        [JsonProperty(PropertyName = "rxStartTime")]
        public System.DateTime? RxStartTime { get; private set; }

        /// <summary>
        /// Gets receive end time of a contact.
        /// </summary>
        [JsonProperty(PropertyName = "rxEndTime")]
        public System.DateTime? RxEndTime { get; private set; }

        /// <summary>
        /// Gets transmit start time of a contact.
        /// </summary>
        [JsonProperty(PropertyName = "txStartTime")]
        public System.DateTime? TxStartTime { get; private set; }

        /// <summary>
        /// Gets transmit end time of a contact.
        /// </summary>
        [JsonProperty(PropertyName = "txEndTime")]
        public System.DateTime? TxEndTime { get; private set; }

        /// <summary>
        /// Gets any error message while scheduling a contact.
        /// </summary>
        [JsonProperty(PropertyName = "errorMessage")]
        public string ErrorMessage { get; private set; }

        /// <summary>
        /// Gets maximum elevation of the antenna during the contact in decimal
        /// degrees.
        /// </summary>
        [JsonProperty(PropertyName = "maximumElevationDegrees")]
        public double? MaximumElevationDegrees { get; private set; }

        /// <summary>
        /// Gets azimuth of the antenna at the start of the contact in decimal
        /// degrees.
        /// </summary>
        [JsonProperty(PropertyName = "startAzimuthDegrees")]
        public double? StartAzimuthDegrees { get; private set; }

        /// <summary>
        /// Gets azimuth of the antenna at the end of the contact in decimal
        /// degrees.
        /// </summary>
        [JsonProperty(PropertyName = "endAzimuthDegrees")]
        public double? EndAzimuthDegrees { get; private set; }

        /// <summary>
        /// Gets or sets azure Ground Station name.
        /// </summary>
        [JsonProperty(PropertyName = "groundStationName")]
        public string GroundStationName { get; set; }

        /// <summary>
        /// Gets spacecraft elevation above the horizon at contact start.
        /// </summary>
        [JsonProperty(PropertyName = "startElevationDegrees")]
        public double? StartElevationDegrees { get; private set; }

        /// <summary>
        /// Gets spacecraft elevation above the horizon at contact end.
        /// </summary>
        [JsonProperty(PropertyName = "endElevationDegrees")]
        public double? EndElevationDegrees { get; private set; }

        /// <summary>
        /// Gets or sets the reference to the contact profile resource.
        /// </summary>
        [JsonProperty(PropertyName = "contactProfile")]
        public ContactsPropertiesContactProfile ContactProfile { get; set; }

    }
}
