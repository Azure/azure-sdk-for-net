// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureOrbital.Models
{
    /// <summary> polarization. eg (RHCP, LHCP). </summary>
    public readonly partial struct SpacecraftLinkPolarization : IEquatable<SpacecraftLinkPolarization>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SpacecraftLinkPolarization"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SpacecraftLinkPolarization(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RhcpValue = "RHCP";
        private const string LhcpValue = "LHCP";
        private const string DualRhcpLhcpValue = "dualRhcpLhcp";
        private const string LinearVerticalValue = "linearVertical";
        private const string LinearHorizontalValue = "linearHorizontal";

        /// <summary> RHCP. </summary>
        public static SpacecraftLinkPolarization Rhcp { get; } = new SpacecraftLinkPolarization(RhcpValue);
        /// <summary> LHCP. </summary>
        public static SpacecraftLinkPolarization Lhcp { get; } = new SpacecraftLinkPolarization(LhcpValue);
        /// <summary> dualRhcpLhcp. </summary>
        public static SpacecraftLinkPolarization DualRhcpLhcp { get; } = new SpacecraftLinkPolarization(DualRhcpLhcpValue);
        /// <summary> linearVertical. </summary>
        public static SpacecraftLinkPolarization LinearVertical { get; } = new SpacecraftLinkPolarization(LinearVerticalValue);
        /// <summary> linearHorizontal. </summary>
        public static SpacecraftLinkPolarization LinearHorizontal { get; } = new SpacecraftLinkPolarization(LinearHorizontalValue);
        /// <summary> Determines if two <see cref="SpacecraftLinkPolarization"/> values are the same. </summary>
        public static bool operator ==(SpacecraftLinkPolarization left, SpacecraftLinkPolarization right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SpacecraftLinkPolarization"/> values are not the same. </summary>
        public static bool operator !=(SpacecraftLinkPolarization left, SpacecraftLinkPolarization right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SpacecraftLinkPolarization"/>. </summary>
        public static implicit operator SpacecraftLinkPolarization(string value) => new SpacecraftLinkPolarization(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SpacecraftLinkPolarization other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SpacecraftLinkPolarization other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
