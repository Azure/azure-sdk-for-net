// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace AzureOrbital.Models
{
    public partial class Spacecraft : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location");
                writer.WriteStringValue(Location);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(NoradId))
            {
                writer.WritePropertyName("noradId");
                writer.WriteStringValue(NoradId);
            }
            if (Optional.IsDefined(TitleLine))
            {
                writer.WritePropertyName("titleLine");
                writer.WriteStringValue(TitleLine);
            }
            if (Optional.IsDefined(TleLine1))
            {
                writer.WritePropertyName("tleLine1");
                writer.WriteStringValue(TleLine1);
            }
            if (Optional.IsDefined(TleLine2))
            {
                writer.WritePropertyName("tleLine2");
                writer.WriteStringValue(TleLine2);
            }
            if (Optional.IsCollectionDefined(Links))
            {
                writer.WritePropertyName("links");
                writer.WriteStartArray();
                foreach (var item in Links)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static Spacecraft DeserializeSpacecraft(JsonElement element)
        {
            Optional<string> etag = default;
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> location = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            Optional<string> noradId = default;
            Optional<SpacecraftsPropertiesAuthorizationStatus> authorizationStatus = default;
            Optional<string> authorizationStatusExtended = default;
            Optional<string> titleLine = default;
            Optional<string> tleLine1 = default;
            Optional<string> tleLine2 = default;
            Optional<IList<SpacecraftLink>> links = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("noradId"))
                        {
                            noradId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authorizationStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            authorizationStatus = new SpacecraftsPropertiesAuthorizationStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("authorizationStatusExtended"))
                        {
                            authorizationStatusExtended = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("titleLine"))
                        {
                            titleLine = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("tleLine1"))
                        {
                            tleLine1 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("tleLine2"))
                        {
                            tleLine2 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("links"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<SpacecraftLink> array = new List<SpacecraftLink>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SpacecraftLink.DeserializeSpacecraftLink(item));
                            }
                            links = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new Spacecraft(id.Value, name.Value, type.Value, location.Value, Optional.ToDictionary(tags), etag.Value, noradId.Value, Optional.ToNullable(authorizationStatus), authorizationStatusExtended.Value, titleLine.Value, tleLine1.Value, tleLine2.Value, Optional.ToList(links));
        }
    }
}
