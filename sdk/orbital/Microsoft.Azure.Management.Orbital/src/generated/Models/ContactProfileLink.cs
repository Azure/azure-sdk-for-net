// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AzureOrbital.Models
{
    /// <summary> The ContactProfileLink. </summary>
    public partial class ContactProfileLink
    {
        /// <summary> Initializes a new instance of ContactProfileLink. </summary>
        /// <param name="polarization"> polarization. eg (RHCP, LHCP). </param>
        /// <param name="direction"> Direction (uplink or downlink). </param>
        /// <param name="channels"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="channels"/> is null. </exception>
        public ContactProfileLink(ContactProfileLinkPolarization polarization, ContactProfileLinkDirection direction, IEnumerable<ContactProfileLinkChannel> channels)
        {
            if (channels == null)
            {
                throw new ArgumentNullException(nameof(channels));
            }

            Polarization = polarization;
            Direction = direction;
            Channels = channels.ToList();
        }

        /// <summary> Initializes a new instance of ContactProfileLink. </summary>
        /// <param name="polarization"> polarization. eg (RHCP, LHCP). </param>
        /// <param name="direction"> Direction (uplink or downlink). </param>
        /// <param name="gainOverTemperature"> Gain To Noise Temperature in db/K. </param>
        /// <param name="eirpdBW"> Effective Isotropic Radiated Power (EIRP) in dBW. </param>
        /// <param name="channels"></param>
        internal ContactProfileLink(ContactProfileLinkPolarization polarization, ContactProfileLinkDirection direction, float? gainOverTemperature, float? eirpdBW, IList<ContactProfileLinkChannel> channels)
        {
            Polarization = polarization;
            Direction = direction;
            GainOverTemperature = gainOverTemperature;
            EirpdBW = eirpdBW;
            Channels = channels;
        }

        /// <summary> polarization. eg (RHCP, LHCP). </summary>
        public ContactProfileLinkPolarization Polarization { get; set; }
        /// <summary> Direction (uplink or downlink). </summary>
        public ContactProfileLinkDirection Direction { get; set; }
        /// <summary> Gain To Noise Temperature in db/K. </summary>
        public float? GainOverTemperature { get; set; }
        /// <summary> Effective Isotropic Radiated Power (EIRP) in dBW. </summary>
        public float? EirpdBW { get; set; }
        public IList<ContactProfileLinkChannel> Channels { get; }
    }
}
