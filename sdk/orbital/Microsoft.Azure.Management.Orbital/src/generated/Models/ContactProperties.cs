// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace AzureOrbital.Models
{
    /// <summary> Properties of the Contact Resource. </summary>
    public partial class ContactProperties
    {
        /// <summary> Initializes a new instance of ContactProperties. </summary>
        /// <param name="reservationStartTime"> Reservation start time of a contact. </param>
        /// <param name="reservationEndTime"> Reservation end time of a contact. </param>
        /// <param name="groundStationName"> Azure Ground Station name. </param>
        /// <param name="contactProfile"> The reference to the contact profile resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groundStationName"/> or <paramref name="contactProfile"/> is null. </exception>
        public ContactProperties(DateTimeOffset reservationStartTime, DateTimeOffset reservationEndTime, string groundStationName, ContactPropertiesContactProfile contactProfile)
        {
            if (groundStationName == null)
            {
                throw new ArgumentNullException(nameof(groundStationName));
            }
            if (contactProfile == null)
            {
                throw new ArgumentNullException(nameof(contactProfile));
            }

            ReservationStartTime = reservationStartTime;
            ReservationEndTime = reservationEndTime;
            GroundStationName = groundStationName;
            ContactProfile = contactProfile;
        }

        /// <summary> Initializes a new instance of ContactProperties. </summary>
        /// <param name="status"> Status of a contact. </param>
        /// <param name="reservationStartTime"> Reservation start time of a contact. </param>
        /// <param name="reservationEndTime"> Reservation end time of a contact. </param>
        /// <param name="rxStartTime"> Receive start time of a contact. </param>
        /// <param name="rxEndTime"> Receive end time of a contact. </param>
        /// <param name="txStartTime"> Transmit start time of a contact. </param>
        /// <param name="txEndTime"> Transmit end time of a contact. </param>
        /// <param name="errorMessage"> Any error message while scheduling a contact. </param>
        /// <param name="maximumElevationDegrees"> Maximum elevation of the antenna during the contact in decimal degrees. </param>
        /// <param name="startAzimuthDegrees"> Azimuth of the antenna at the start of the contact in decimal degrees. </param>
        /// <param name="endAzimuthDegrees"> Azimuth of the antenna at the end of the contact in decimal degrees. </param>
        /// <param name="groundStationName"> Azure Ground Station name. </param>
        /// <param name="startElevationDegrees"> Spacecraft elevation above the horizon at contact start. </param>
        /// <param name="endElevationDegrees"> Spacecraft elevation above the horizon at contact end. </param>
        /// <param name="contactProfile"> The reference to the contact profile resource. </param>
        internal ContactProperties(ContactPropertiesStatus? status, DateTimeOffset reservationStartTime, DateTimeOffset reservationEndTime, DateTimeOffset? rxStartTime, DateTimeOffset? rxEndTime, DateTimeOffset? txStartTime, DateTimeOffset? txEndTime, string errorMessage, float? maximumElevationDegrees, float? startAzimuthDegrees, float? endAzimuthDegrees, string groundStationName, float? startElevationDegrees, float? endElevationDegrees, ContactPropertiesContactProfile contactProfile)
        {
            Status = status;
            ReservationStartTime = reservationStartTime;
            ReservationEndTime = reservationEndTime;
            RxStartTime = rxStartTime;
            RxEndTime = rxEndTime;
            TxStartTime = txStartTime;
            TxEndTime = txEndTime;
            ErrorMessage = errorMessage;
            MaximumElevationDegrees = maximumElevationDegrees;
            StartAzimuthDegrees = startAzimuthDegrees;
            EndAzimuthDegrees = endAzimuthDegrees;
            GroundStationName = groundStationName;
            StartElevationDegrees = startElevationDegrees;
            EndElevationDegrees = endElevationDegrees;
            ContactProfile = contactProfile;
        }

        /// <summary> Status of a contact. </summary>
        public ContactPropertiesStatus? Status { get; }
        /// <summary> Reservation start time of a contact. </summary>
        public DateTimeOffset ReservationStartTime { get; set; }
        /// <summary> Reservation end time of a contact. </summary>
        public DateTimeOffset ReservationEndTime { get; set; }
        /// <summary> Receive start time of a contact. </summary>
        public DateTimeOffset? RxStartTime { get; }
        /// <summary> Receive end time of a contact. </summary>
        public DateTimeOffset? RxEndTime { get; }
        /// <summary> Transmit start time of a contact. </summary>
        public DateTimeOffset? TxStartTime { get; }
        /// <summary> Transmit end time of a contact. </summary>
        public DateTimeOffset? TxEndTime { get; }
        /// <summary> Any error message while scheduling a contact. </summary>
        public string ErrorMessage { get; }
        /// <summary> Maximum elevation of the antenna during the contact in decimal degrees. </summary>
        public float? MaximumElevationDegrees { get; }
        /// <summary> Azimuth of the antenna at the start of the contact in decimal degrees. </summary>
        public float? StartAzimuthDegrees { get; }
        /// <summary> Azimuth of the antenna at the end of the contact in decimal degrees. </summary>
        public float? EndAzimuthDegrees { get; }
        /// <summary> Azure Ground Station name. </summary>
        public string GroundStationName { get; set; }
        /// <summary> Spacecraft elevation above the horizon at contact start. </summary>
        public float? StartElevationDegrees { get; }
        /// <summary> Spacecraft elevation above the horizon at contact end. </summary>
        public float? EndElevationDegrees { get; }
        /// <summary> The reference to the contact profile resource. </summary>
        public ContactPropertiesContactProfile ContactProfile { get; set; }
    }
}
