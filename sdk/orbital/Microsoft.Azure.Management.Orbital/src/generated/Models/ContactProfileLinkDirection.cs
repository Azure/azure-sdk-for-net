// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace AzureOrbital.Models
{
    /// <summary> Direction (uplink or downlink). </summary>
    public readonly partial struct ContactProfileLinkDirection : IEquatable<ContactProfileLinkDirection>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContactProfileLinkDirection"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContactProfileLinkDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UplinkValue = "uplink";
        private const string DownlinkValue = "downlink";

        /// <summary> uplink. </summary>
        public static ContactProfileLinkDirection Uplink { get; } = new ContactProfileLinkDirection(UplinkValue);
        /// <summary> downlink. </summary>
        public static ContactProfileLinkDirection Downlink { get; } = new ContactProfileLinkDirection(DownlinkValue);
        /// <summary> Determines if two <see cref="ContactProfileLinkDirection"/> values are the same. </summary>
        public static bool operator ==(ContactProfileLinkDirection left, ContactProfileLinkDirection right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContactProfileLinkDirection"/> values are not the same. </summary>
        public static bool operator !=(ContactProfileLinkDirection left, ContactProfileLinkDirection right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContactProfileLinkDirection"/>. </summary>
        public static implicit operator ContactProfileLinkDirection(string value) => new ContactProfileLinkDirection(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContactProfileLinkDirection other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContactProfileLinkDirection other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
