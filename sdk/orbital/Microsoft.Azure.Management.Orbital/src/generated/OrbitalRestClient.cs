// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using AzureOrbital.Models;

namespace AzureOrbital
{
    internal partial class OrbitalRestClient
    {
        private string subscriptionId;
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of OrbitalRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> Azure Subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="apiVersion"/> is null. </exception>
        public OrbitalRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-09-01-preview")
        {
            this.subscriptionId = subscriptionId ?? throw new ArgumentNullException(nameof(subscriptionId));
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListOperationsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Orbital/operations", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all of the available Orbital Rest API operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<OperationListResult>> ListOperationsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOperationsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OperationListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OperationListResult.DeserializeOperationListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists all of the available Orbital Rest API operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<OperationListResult> ListOperations(CancellationToken cancellationToken = default)
        {
            using var message = CreateListOperationsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OperationListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OperationListResult.DeserializeOperationListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListGroundStationsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Orbital/groundStations", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Return list of ground stations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<GroundStationListResult>> ListGroundStationsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListGroundStationsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroundStationListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GroundStationListResult.DeserializeGroundStationListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Return list of ground stations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<GroundStationListResult> ListGroundStations(CancellationToken cancellationToken = default)
        {
            using var message = CreateListGroundStationsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GroundStationListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GroundStationListResult.DeserializeGroundStationListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSpacecraftsBySubscriptionRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Return list of spacecrafts. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<SpacecraftListResult>> ListSpacecraftsBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListSpacecraftsBySubscriptionRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SpacecraftListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SpacecraftListResult.DeserializeSpacecraftListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Return list of spacecrafts. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<SpacecraftListResult> ListSpacecraftsBySubscription(CancellationToken cancellationToken = default)
        {
            using var message = CreateListSpacecraftsBySubscriptionRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SpacecraftListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SpacecraftListResult.DeserializeSpacecraftListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSpacecraftsByResourceGroupRequest(string resourceGroupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Return list of spacecrafts. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public async Task<Response<SpacecraftListResult>> ListSpacecraftsByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var message = CreateListSpacecraftsByResourceGroupRequest(resourceGroupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SpacecraftListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SpacecraftListResult.DeserializeSpacecraftListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Return list of spacecrafts. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public Response<SpacecraftListResult> ListSpacecraftsByResourceGroup(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var message = CreateListSpacecraftsByResourceGroupRequest(resourceGroupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SpacecraftListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SpacecraftListResult.DeserializeSpacecraftListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSpacecraftRequest(string resourceGroupName, string spacecraftName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the specified spacecraft in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public async Task<Response<Spacecraft>> GetSpacecraftAsync(string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateGetSpacecraftRequest(resourceGroupName, spacecraftName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Spacecraft value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Spacecraft.DeserializeSpacecraft(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the specified spacecraft in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public Response<Spacecraft> GetSpacecraft(string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateGetSpacecraftRequest(resourceGroupName, spacecraftName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Spacecraft value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Spacecraft.DeserializeSpacecraft(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateSpacecraftRequest(string resourceGroupName, string spacecraftName, string location, IDictionary<string, string> tags, string noradId, string titleLine, string tleLine1, string tleLine2, IEnumerable<SpacecraftLink> links)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            Spacecraft spacecraft = new Spacecraft()
            {
                Location = location,
                NoradId = noradId,
                TitleLine = titleLine,
                TleLine1 = tleLine1,
                TleLine2 = tleLine2
            };
            if (tags != null)
            {
                foreach (var value in tags)
                {
                    spacecraft.Tags.Add(value);
                }
            }
            if (links != null)
            {
                foreach (var value in links)
                {
                    spacecraft.Links.Add(value);
                }
            }
            var model = spacecraft;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates a spacecraft resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="noradId"> NORAD ID of the spacecraft. </param>
        /// <param name="titleLine"> Title line of Two Line Element (TLE). </param>
        /// <param name="tleLine1"> Line 1 of Two Line Element (TLE). </param>
        /// <param name="tleLine2"> Line 2 of Two Line Element (TLE). </param>
        /// <param name="links"> The SpacecraftsPropertiesLinks to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public async Task<Response> CreateOrUpdateSpacecraftAsync(string resourceGroupName, string spacecraftName, string location = null, IDictionary<string, string> tags = null, string noradId = null, string titleLine = null, string tleLine1 = null, string tleLine2 = null, IEnumerable<SpacecraftLink> links = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateCreateOrUpdateSpacecraftRequest(resourceGroupName, spacecraftName, location, tags, noradId, titleLine, tleLine1, tleLine2, links);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates a spacecraft resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="noradId"> NORAD ID of the spacecraft. </param>
        /// <param name="titleLine"> Title line of Two Line Element (TLE). </param>
        /// <param name="tleLine1"> Line 1 of Two Line Element (TLE). </param>
        /// <param name="tleLine2"> Line 2 of Two Line Element (TLE). </param>
        /// <param name="links"> The SpacecraftsPropertiesLinks to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public Response CreateOrUpdateSpacecraft(string resourceGroupName, string spacecraftName, string location = null, IDictionary<string, string> tags = null, string noradId = null, string titleLine = null, string tleLine1 = null, string tleLine2 = null, IEnumerable<SpacecraftLink> links = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateCreateOrUpdateSpacecraftRequest(resourceGroupName, spacecraftName, location, tags, noradId, titleLine, tleLine1, tleLine2, links);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteSpacecraftRequest(string resourceGroupName, string spacecraftName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a specified spacecraft resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public async Task<Response> DeleteSpacecraftAsync(string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateDeleteSpacecraftRequest(resourceGroupName, spacecraftName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a specified spacecraft resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public Response DeleteSpacecraft(string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateDeleteSpacecraftRequest(resourceGroupName, spacecraftName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateTagsSpacecraftRequest(string resourceGroupName, string spacecraftName, TagsObject parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the specified spacecraft tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="parameters"> Parameters supplied to update spacecraft tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response<Spacecraft>> UpdateTagsSpacecraftAsync(string resourceGroupName, string spacecraftName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateTagsSpacecraftRequest(resourceGroupName, spacecraftName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Spacecraft value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Spacecraft.DeserializeSpacecraft(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the specified spacecraft tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="parameters"> Parameters supplied to update spacecraft tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response<Spacecraft> UpdateTagsSpacecraft(string resourceGroupName, string spacecraftName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateTagsSpacecraftRequest(resourceGroupName, spacecraftName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Spacecraft value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Spacecraft.DeserializeSpacecraft(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListContactsBySpacecraftNameRequest(string resourceGroupName, string spacecraftName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendPath("/contacts", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns list of contacts by spacecraftName. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public async Task<Response<ContactListResult>> ListContactsBySpacecraftNameAsync(string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateListContactsBySpacecraftNameRequest(resourceGroupName, spacecraftName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ContactListResult.DeserializeContactListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns list of contacts by spacecraftName. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="spacecraftName"/> is null. </exception>
        public Response<ContactListResult> ListContactsBySpacecraftName(string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }

            using var message = CreateListContactsBySpacecraftNameRequest(resourceGroupName, spacecraftName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ContactListResult.DeserializeContactListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetContactRequest(string resourceGroupName, string spacecraftName, string contactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendPath("/contacts/", false);
            uri.AppendPath(contactName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the specified contact in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactName"> Contact Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, or <paramref name="contactName"/> is null. </exception>
        public async Task<Response<Contact>> GetContactAsync(string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactName == null)
            {
                throw new ArgumentNullException(nameof(contactName));
            }

            using var message = CreateGetContactRequest(resourceGroupName, spacecraftName, contactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Contact value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Contact.DeserializeContact(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the specified contact in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactName"> Contact Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, or <paramref name="contactName"/> is null. </exception>
        public Response<Contact> GetContact(string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactName == null)
            {
                throw new ArgumentNullException(nameof(contactName));
            }

            using var message = CreateGetContactRequest(resourceGroupName, spacecraftName, contactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Contact value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Contact.DeserializeContact(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateContactRequest(string resourceGroupName, string spacecraftName, string contactName, Contact parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendPath("/contacts/", false);
            uri.AppendPath(contactName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a contact. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactName"> Contact Name. </param>
        /// <param name="parameters"> The parameters to provide for the created contact. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, <paramref name="contactName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response> CreateContactAsync(string resourceGroupName, string spacecraftName, string contactName, Contact parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactName == null)
            {
                throw new ArgumentNullException(nameof(contactName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateContactRequest(resourceGroupName, spacecraftName, contactName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a contact. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactName"> Contact Name. </param>
        /// <param name="parameters"> The parameters to provide for the created contact. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, <paramref name="contactName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response CreateContact(string resourceGroupName, string spacecraftName, string contactName, Contact parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactName == null)
            {
                throw new ArgumentNullException(nameof(contactName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateCreateContactRequest(resourceGroupName, spacecraftName, contactName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteContactRequest(string resourceGroupName, string spacecraftName, string contactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendPath("/contacts/", false);
            uri.AppendPath(contactName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a specified contact. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactName"> Contact Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, or <paramref name="contactName"/> is null. </exception>
        public async Task<Response> DeleteContactAsync(string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactName == null)
            {
                throw new ArgumentNullException(nameof(contactName));
            }

            using var message = CreateDeleteContactRequest(resourceGroupName, spacecraftName, contactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a specified contact. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactName"> Contact Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, or <paramref name="contactName"/> is null. </exception>
        public Response DeleteContact(string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactName == null)
            {
                throw new ArgumentNullException(nameof(contactName));
            }

            using var message = CreateDeleteContactRequest(resourceGroupName, spacecraftName, contactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListAvailableContactsRequest(string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, DateTimeOffset startTime, DateTimeOffset endTime)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/spacecrafts/", false);
            uri.AppendPath(spacecraftName, true);
            uri.AppendPath("/listAvailableContacts", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var model = new ContactParameters(contactProfile, groundStationName, startTime, endTime);
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Return list of available contacts. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactProfile"> The reference to the contact profile resource. </param>
        /// <param name="groundStationName"> Name of Azure Ground Station. </param>
        /// <param name="startTime"> Start time of a contact. </param>
        /// <param name="endTime"> End time of a contact. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, <paramref name="contactProfile"/>, or <paramref name="groundStationName"/> is null. </exception>
        public async Task<Response> ListAvailableContactsAsync(string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, DateTimeOffset startTime, DateTimeOffset endTime, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactProfile == null)
            {
                throw new ArgumentNullException(nameof(contactProfile));
            }
            if (groundStationName == null)
            {
                throw new ArgumentNullException(nameof(groundStationName));
            }

            using var message = CreateListAvailableContactsRequest(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Return list of available contacts. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="spacecraftName"> Spacecraft ID. </param>
        /// <param name="contactProfile"> The reference to the contact profile resource. </param>
        /// <param name="groundStationName"> Name of Azure Ground Station. </param>
        /// <param name="startTime"> Start time of a contact. </param>
        /// <param name="endTime"> End time of a contact. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="spacecraftName"/>, <paramref name="contactProfile"/>, or <paramref name="groundStationName"/> is null. </exception>
        public Response ListAvailableContacts(string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, DateTimeOffset startTime, DateTimeOffset endTime, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (spacecraftName == null)
            {
                throw new ArgumentNullException(nameof(spacecraftName));
            }
            if (contactProfile == null)
            {
                throw new ArgumentNullException(nameof(contactProfile));
            }
            if (groundStationName == null)
            {
                throw new ArgumentNullException(nameof(groundStationName));
            }

            using var message = CreateListAvailableContactsRequest(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetContactProfileRequest(string resourceGroupName, string contactProfileName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/contactProfiles/", false);
            uri.AppendPath(contactProfileName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the specified contact Profile in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="contactProfileName"/> is null. </exception>
        public async Task<Response<ContactProfile>> GetContactProfileAsync(string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }

            using var message = CreateGetContactProfileRequest(resourceGroupName, contactProfileName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfile value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ContactProfile.DeserializeContactProfile(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the specified contact Profile in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="contactProfileName"/> is null. </exception>
        public Response<ContactProfile> GetContactProfile(string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }

            using var message = CreateGetContactProfileRequest(resourceGroupName, contactProfileName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfile value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ContactProfile.DeserializeContactProfile(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateContactProfileRequest(string resourceGroupName, string contactProfileName, string location, IDictionary<string, string> tags, string minimumViableContactDuration, float? minimumElevationDegrees, ContactProfilesPropertiesAutoTrackingConfiguration? autoTrackingConfiguration, IEnumerable<ContactProfileLink> links)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/contactProfiles/", false);
            uri.AppendPath(contactProfileName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            ContactProfile contactProfile = new ContactProfile()
            {
                Location = location,
                MinimumViableContactDuration = minimumViableContactDuration,
                MinimumElevationDegrees = minimumElevationDegrees,
                AutoTrackingConfiguration = autoTrackingConfiguration
            };
            if (tags != null)
            {
                foreach (var value in tags)
                {
                    contactProfile.Tags.Add(value);
                }
            }
            if (links != null)
            {
                foreach (var value in links)
                {
                    contactProfile.Links.Add(value);
                }
            }
            var model = contactProfile;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates a contact profile. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="minimumViableContactDuration"> Minimum viable contact duration in ISO 8601 format. </param>
        /// <param name="minimumElevationDegrees"> Minimum viable elevation for the contact in decimal degrees. </param>
        /// <param name="autoTrackingConfiguration"> Auto track configuration. </param>
        /// <param name="links"> The ContactProfilesPropertiesLinks to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="contactProfileName"/> is null. </exception>
        public async Task<Response> CreateOrUpdateContactProfileAsync(string resourceGroupName, string contactProfileName, string location = null, IDictionary<string, string> tags = null, string minimumViableContactDuration = null, float? minimumElevationDegrees = null, ContactProfilesPropertiesAutoTrackingConfiguration? autoTrackingConfiguration = null, IEnumerable<ContactProfileLink> links = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }

            using var message = CreateCreateOrUpdateContactProfileRequest(resourceGroupName, contactProfileName, location, tags, minimumViableContactDuration, minimumElevationDegrees, autoTrackingConfiguration, links);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates a contact profile. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="minimumViableContactDuration"> Minimum viable contact duration in ISO 8601 format. </param>
        /// <param name="minimumElevationDegrees"> Minimum viable elevation for the contact in decimal degrees. </param>
        /// <param name="autoTrackingConfiguration"> Auto track configuration. </param>
        /// <param name="links"> The ContactProfilesPropertiesLinks to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="contactProfileName"/> is null. </exception>
        public Response CreateOrUpdateContactProfile(string resourceGroupName, string contactProfileName, string location = null, IDictionary<string, string> tags = null, string minimumViableContactDuration = null, float? minimumElevationDegrees = null, ContactProfilesPropertiesAutoTrackingConfiguration? autoTrackingConfiguration = null, IEnumerable<ContactProfileLink> links = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }

            using var message = CreateCreateOrUpdateContactProfileRequest(resourceGroupName, contactProfileName, location, tags, minimumViableContactDuration, minimumElevationDegrees, autoTrackingConfiguration, links);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteContactProfileRequest(string resourceGroupName, string contactProfileName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/contactProfiles/", false);
            uri.AppendPath(contactProfileName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a specified contact profile resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="contactProfileName"/> is null. </exception>
        public async Task<Response> DeleteContactProfileAsync(string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }

            using var message = CreateDeleteContactProfileRequest(resourceGroupName, contactProfileName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a specified contact profile resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="contactProfileName"/> is null. </exception>
        public Response DeleteContactProfile(string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }

            using var message = CreateDeleteContactProfileRequest(resourceGroupName, contactProfileName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateTagsContactProfileRequest(string resourceGroupName, string contactProfileName, TagsObject parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/contactProfiles/", false);
            uri.AppendPath(contactProfileName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the specified contact profile tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="parameters"> Parameters supplied to update contact profile tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="contactProfileName"/>, or <paramref name="parameters"/> is null. </exception>
        public async Task<Response<ContactProfile>> UpdateTagsContactProfileAsync(string resourceGroupName, string contactProfileName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateTagsContactProfileRequest(resourceGroupName, contactProfileName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfile value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ContactProfile.DeserializeContactProfile(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the specified contact profile tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="contactProfileName"> Contact Profile Name. </param>
        /// <param name="parameters"> Parameters supplied to update contact profile tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="contactProfileName"/>, or <paramref name="parameters"/> is null. </exception>
        public Response<ContactProfile> UpdateTagsContactProfile(string resourceGroupName, string contactProfileName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (contactProfileName == null)
            {
                throw new ArgumentNullException(nameof(contactProfileName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateTagsContactProfileRequest(resourceGroupName, contactProfileName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfile value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ContactProfile.DeserializeContactProfile(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListContactProfilesBySubscriptionRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.Orbital/contactProfiles", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns list of contact profiles. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ContactProfileListResult>> ListContactProfilesBySubscriptionAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListContactProfilesBySubscriptionRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfileListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ContactProfileListResult.DeserializeContactProfileListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns list of contact profiles. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ContactProfileListResult> ListContactProfilesBySubscription(CancellationToken cancellationToken = default)
        {
            using var message = CreateListContactProfilesBySubscriptionRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfileListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ContactProfileListResult.DeserializeContactProfileListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListContactProfilesByResourceGroupRequest(string resourceGroupName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Orbital/contactProfiles", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns list of contact profiles. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public async Task<Response<ContactProfileListResult>> ListContactProfilesByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var message = CreateListContactProfilesByResourceGroupRequest(resourceGroupName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfileListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ContactProfileListResult.DeserializeContactProfileListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns list of contact profiles. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public Response<ContactProfileListResult> ListContactProfilesByResourceGroup(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var message = CreateListContactProfilesByResourceGroupRequest(resourceGroupName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ContactProfileListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ContactProfileListResult.DeserializeContactProfileListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
