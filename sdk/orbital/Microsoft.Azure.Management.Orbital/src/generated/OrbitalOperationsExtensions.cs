// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Orbital
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OrbitalOperations.
    /// </summary>
    public static partial class OrbitalOperationsExtensions
    {
            /// <summary>
            /// Lists all of the available Orbital Rest API operations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<Operation> ListOperations(this IOrbitalOperations operations)
            {
                return operations.ListOperationsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the available Orbital Rest API operations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Operation>> ListOperationsAsync(this IOrbitalOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return list of spacecrafts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SpacecraftListResult ListSpacecraftsBySubscription(this IOrbitalOperations operations)
            {
                return operations.ListSpacecraftsBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return list of spacecrafts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SpacecraftListResult> ListSpacecraftsBySubscriptionAsync(this IOrbitalOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSpacecraftsBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return list of spacecrafts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static SpacecraftListResult ListSpacecraftsByResourceGroup(this IOrbitalOperations operations, string resourceGroupName)
            {
                return operations.ListSpacecraftsByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return list of spacecrafts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SpacecraftListResult> ListSpacecraftsByResourceGroupAsync(this IOrbitalOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSpacecraftsByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified spacecraft in a specified resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            public static Spacecraft GetSpacecraft(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName)
            {
                return operations.GetSpacecraftAsync(resourceGroupName, spacecraftName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified spacecraft in a specified resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Spacecraft> GetSpacecraftAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSpacecraftWithHttpMessagesAsync(resourceGroupName, spacecraftName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a spacecraft resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='noradId'>
            /// NORAD ID of the spacecraft.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='titleLine'>
            /// Title line of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine1'>
            /// Line 1 of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine2'>
            /// Line 2 of Two Line Element (TLE).
            /// </param>
            /// <param name='links'>
            /// Links of the Spacecraft
            /// </param>
            public static Spacecraft CreateOrUpdateSpacecraft(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string noradId, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string titleLine = default(string), string tleLine1 = default(string), string tleLine2 = default(string), IList<SpacecraftLink> links = default(IList<SpacecraftLink>))
            {
                return operations.CreateOrUpdateSpacecraftAsync(resourceGroupName, spacecraftName, noradId, location, tags, titleLine, tleLine1, tleLine2, links).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a spacecraft resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='noradId'>
            /// NORAD ID of the spacecraft.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='titleLine'>
            /// Title line of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine1'>
            /// Line 1 of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine2'>
            /// Line 2 of Two Line Element (TLE).
            /// </param>
            /// <param name='links'>
            /// Links of the Spacecraft
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Spacecraft> CreateOrUpdateSpacecraftAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string noradId, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string titleLine = default(string), string tleLine1 = default(string), string tleLine2 = default(string), IList<SpacecraftLink> links = default(IList<SpacecraftLink>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSpacecraftWithHttpMessagesAsync(resourceGroupName, spacecraftName, noradId, location, tags, titleLine, tleLine1, tleLine2, links, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified spacecraft resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            public static void DeleteSpacecraft(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName)
            {
                operations.DeleteSpacecraftAsync(resourceGroupName, spacecraftName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified spacecraft resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSpacecraftAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSpacecraftWithHttpMessagesAsync(resourceGroupName, spacecraftName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the specified spacecraft tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static Spacecraft UpdateTagsSpacecraft(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateTagsSpacecraftAsync(resourceGroupName, spacecraftName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified spacecraft tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Spacecraft> UpdateTagsSpacecraftAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTagsSpacecraftWithHttpMessagesAsync(resourceGroupName, spacecraftName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of contacts by spacecraftName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            public static ContactListResult ListContactsBySpacecraftName(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName)
            {
                return operations.ListContactsBySpacecraftNameAsync(resourceGroupName, spacecraftName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of contacts by spacecraftName
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactListResult> ListContactsBySpacecraftNameAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContactsBySpacecraftNameWithHttpMessagesAsync(resourceGroupName, spacecraftName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified contact in a specified resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            public static Contact GetContact(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName)
            {
                return operations.GetContactAsync(resourceGroupName, spacecraftName, contactName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified contact in a specified resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contact> GetContactAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContactWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a contact.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static Contact CreateContact(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, ContactsProperties properties = default(ContactsProperties))
            {
                return operations.CreateContactAsync(resourceGroupName, spacecraftName, contactName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a contact.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contact> CreateContactAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, ContactsProperties properties = default(ContactsProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateContactWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            public static void DeleteContact(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName)
            {
                operations.DeleteContactAsync(resourceGroupName, spacecraftName, contactName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteContactAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteContactWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return list of available contacts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactProfile'>
            /// The reference to the contact profile resource.
            /// </param>
            /// <param name='groundStationName'>
            /// Name of Azure Ground Station.
            /// </param>
            /// <param name='startTime'>
            /// Start time of a contact.
            /// </param>
            /// <param name='endTime'>
            /// End time of a contact.
            /// </param>
            public static AvailableContactsListResult ListAvailableContacts(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, System.DateTime startTime, System.DateTime endTime)
            {
                return operations.ListAvailableContactsAsync(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return list of available contacts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactProfile'>
            /// The reference to the contact profile resource.
            /// </param>
            /// <param name='groundStationName'>
            /// Name of Azure Ground Station.
            /// </param>
            /// <param name='startTime'>
            /// Start time of a contact.
            /// </param>
            /// <param name='endTime'>
            /// End time of a contact.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AvailableContactsListResult> ListAvailableContactsAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, System.DateTime startTime, System.DateTime endTime, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAvailableContactsWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified contact Profile in a specified resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            public static ContactProfile GetContactProfile(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName)
            {
                return operations.GetContactProfileAsync(resourceGroupName, contactProfileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified contact Profile in a specified resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactProfile> GetContactProfileAsync(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContactProfileWithHttpMessagesAsync(resourceGroupName, contactProfileName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a contact profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='links'>
            /// Links of the Contact Profile
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='minimumViableContactDuration'>
            /// Minimum viable contact duration in ISO 8601 format.
            /// </param>
            /// <param name='minimumElevationDegrees'>
            /// Minimum viable elevation for the contact in decimal degrees.
            /// </param>
            /// <param name='autoTrackingConfiguration'>
            /// Auto track configuration. Possible values include: 'disabled', 'xBand',
            /// 'sBand'
            /// </param>
            public static ContactProfile CreateOrUpdateContactProfile(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, IList<ContactProfileLink> links, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string minimumViableContactDuration = default(string), double? minimumElevationDegrees = default(double?), AutoTrackingConfiguration? autoTrackingConfiguration = default(AutoTrackingConfiguration?))
            {
                return operations.CreateOrUpdateContactProfileAsync(resourceGroupName, contactProfileName, links, location, tags, minimumViableContactDuration, minimumElevationDegrees, autoTrackingConfiguration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a contact profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='links'>
            /// Links of the Contact Profile
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='minimumViableContactDuration'>
            /// Minimum viable contact duration in ISO 8601 format.
            /// </param>
            /// <param name='minimumElevationDegrees'>
            /// Minimum viable elevation for the contact in decimal degrees.
            /// </param>
            /// <param name='autoTrackingConfiguration'>
            /// Auto track configuration. Possible values include: 'disabled', 'xBand',
            /// 'sBand'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactProfile> CreateOrUpdateContactProfileAsync(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, IList<ContactProfileLink> links, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string minimumViableContactDuration = default(string), double? minimumElevationDegrees = default(double?), AutoTrackingConfiguration? autoTrackingConfiguration = default(AutoTrackingConfiguration?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateContactProfileWithHttpMessagesAsync(resourceGroupName, contactProfileName, links, location, tags, minimumViableContactDuration, minimumElevationDegrees, autoTrackingConfiguration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified contact profile resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            public static void DeleteContactProfile(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName)
            {
                operations.DeleteContactProfileAsync(resourceGroupName, contactProfileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified contact profile resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteContactProfileAsync(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteContactProfileWithHttpMessagesAsync(resourceGroupName, contactProfileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the specified contact profile tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static ContactProfile UpdateTagsContactProfile(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateTagsContactProfileAsync(resourceGroupName, contactProfileName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified contact profile tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactProfile> UpdateTagsContactProfileAsync(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTagsContactProfileWithHttpMessagesAsync(resourceGroupName, contactProfileName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of contact profiles
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ContactProfileListResult ListContactProfilesBySubscription(this IOrbitalOperations operations)
            {
                return operations.ListContactProfilesBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of contact profiles
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactProfileListResult> ListContactProfilesBySubscriptionAsync(this IOrbitalOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContactProfilesBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of contact profiles
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static ContactProfileListResult ListContactProfilesByResourceGroup(this IOrbitalOperations operations, string resourceGroupName)
            {
                return operations.ListContactProfilesByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of contact profiles
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactProfileListResult> ListContactProfilesByResourceGroupAsync(this IOrbitalOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContactProfilesByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a spacecraft resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='noradId'>
            /// NORAD ID of the spacecraft.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='titleLine'>
            /// Title line of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine1'>
            /// Line 1 of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine2'>
            /// Line 2 of Two Line Element (TLE).
            /// </param>
            /// <param name='links'>
            /// Links of the Spacecraft
            /// </param>
            public static Spacecraft BeginCreateOrUpdateSpacecraft(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string noradId, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string titleLine = default(string), string tleLine1 = default(string), string tleLine2 = default(string), IList<SpacecraftLink> links = default(IList<SpacecraftLink>))
            {
                return operations.BeginCreateOrUpdateSpacecraftAsync(resourceGroupName, spacecraftName, noradId, location, tags, titleLine, tleLine1, tleLine2, links).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a spacecraft resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='noradId'>
            /// NORAD ID of the spacecraft.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='titleLine'>
            /// Title line of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine1'>
            /// Line 1 of Two Line Element (TLE).
            /// </param>
            /// <param name='tleLine2'>
            /// Line 2 of Two Line Element (TLE).
            /// </param>
            /// <param name='links'>
            /// Links of the Spacecraft
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Spacecraft> BeginCreateOrUpdateSpacecraftAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string noradId, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string titleLine = default(string), string tleLine1 = default(string), string tleLine2 = default(string), IList<SpacecraftLink> links = default(IList<SpacecraftLink>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSpacecraftWithHttpMessagesAsync(resourceGroupName, spacecraftName, noradId, location, tags, titleLine, tleLine1, tleLine2, links, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified spacecraft resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            public static void BeginDeleteSpacecraft(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName)
            {
                operations.BeginDeleteSpacecraftAsync(resourceGroupName, spacecraftName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified spacecraft resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteSpacecraftAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteSpacecraftWithHttpMessagesAsync(resourceGroupName, spacecraftName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a contact.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='properties'>
            /// </param>
            public static Contact BeginCreateContact(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, ContactsProperties properties = default(ContactsProperties))
            {
                return operations.BeginCreateContactAsync(resourceGroupName, spacecraftName, contactName, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a contact.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contact> BeginCreateContactAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, ContactsProperties properties = default(ContactsProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateContactWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactName, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            public static void BeginDeleteContact(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName)
            {
                operations.BeginDeleteContactAsync(resourceGroupName, spacecraftName, contactName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactName'>
            /// Contact Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteContactAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, string contactName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteContactWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return list of available contacts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactProfile'>
            /// The reference to the contact profile resource.
            /// </param>
            /// <param name='groundStationName'>
            /// Name of Azure Ground Station.
            /// </param>
            /// <param name='startTime'>
            /// Start time of a contact.
            /// </param>
            /// <param name='endTime'>
            /// End time of a contact.
            /// </param>
            public static AvailableContactsListResult BeginListAvailableContacts(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, System.DateTime startTime, System.DateTime endTime)
            {
                return operations.BeginListAvailableContactsAsync(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return list of available contacts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='spacecraftName'>
            /// Spacecraft ID
            /// </param>
            /// <param name='contactProfile'>
            /// The reference to the contact profile resource.
            /// </param>
            /// <param name='groundStationName'>
            /// Name of Azure Ground Station.
            /// </param>
            /// <param name='startTime'>
            /// Start time of a contact.
            /// </param>
            /// <param name='endTime'>
            /// End time of a contact.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AvailableContactsListResult> BeginListAvailableContactsAsync(this IOrbitalOperations operations, string resourceGroupName, string spacecraftName, ContactParametersContactProfile contactProfile, string groundStationName, System.DateTime startTime, System.DateTime endTime, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListAvailableContactsWithHttpMessagesAsync(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a contact profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='links'>
            /// Links of the Contact Profile
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='minimumViableContactDuration'>
            /// Minimum viable contact duration in ISO 8601 format.
            /// </param>
            /// <param name='minimumElevationDegrees'>
            /// Minimum viable elevation for the contact in decimal degrees.
            /// </param>
            /// <param name='autoTrackingConfiguration'>
            /// Auto track configuration. Possible values include: 'disabled', 'xBand',
            /// 'sBand'
            /// </param>
            public static ContactProfile BeginCreateOrUpdateContactProfile(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, IList<ContactProfileLink> links, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string minimumViableContactDuration = default(string), double? minimumElevationDegrees = default(double?), AutoTrackingConfiguration? autoTrackingConfiguration = default(AutoTrackingConfiguration?))
            {
                return operations.BeginCreateOrUpdateContactProfileAsync(resourceGroupName, contactProfileName, links, location, tags, minimumViableContactDuration, minimumElevationDegrees, autoTrackingConfiguration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a contact profile
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='links'>
            /// Links of the Contact Profile
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='minimumViableContactDuration'>
            /// Minimum viable contact duration in ISO 8601 format.
            /// </param>
            /// <param name='minimumElevationDegrees'>
            /// Minimum viable elevation for the contact in decimal degrees.
            /// </param>
            /// <param name='autoTrackingConfiguration'>
            /// Auto track configuration. Possible values include: 'disabled', 'xBand',
            /// 'sBand'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactProfile> BeginCreateOrUpdateContactProfileAsync(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, IList<ContactProfileLink> links, string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string minimumViableContactDuration = default(string), double? minimumElevationDegrees = default(double?), AutoTrackingConfiguration? autoTrackingConfiguration = default(AutoTrackingConfiguration?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateContactProfileWithHttpMessagesAsync(resourceGroupName, contactProfileName, links, location, tags, minimumViableContactDuration, minimumElevationDegrees, autoTrackingConfiguration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specified contact profile resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            public static void BeginDeleteContactProfile(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName)
            {
                operations.BeginDeleteContactProfileAsync(resourceGroupName, contactProfileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specified contact profile resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='contactProfileName'>
            /// Contact Profile Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteContactProfileAsync(this IOrbitalOperations operations, string resourceGroupName, string contactProfileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteContactProfileWithHttpMessagesAsync(resourceGroupName, contactProfileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
