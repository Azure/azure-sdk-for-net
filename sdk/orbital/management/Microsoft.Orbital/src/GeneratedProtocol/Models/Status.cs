// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Orbital.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for Status.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Status
    {
        [EnumMember(Value = "scheduled")]
        Scheduled,
        [EnumMember(Value = "cancelled")]
        Cancelled,
        [EnumMember(Value = "succeeded")]
        Succeeded,
        [EnumMember(Value = "failed")]
        Failed,
        [EnumMember(Value = "providerCancelled")]
        ProviderCancelled
    }
    internal static class StatusEnumExtension
    {
        internal static string ToSerializedValue(this Status? value)
        {
            return value == null ? null : ((Status)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this Status value)
        {
            switch( value )
            {
                case Status.Scheduled:
                    return "scheduled";
                case Status.Cancelled:
                    return "cancelled";
                case Status.Succeeded:
                    return "succeeded";
                case Status.Failed:
                    return "failed";
                case Status.ProviderCancelled:
                    return "providerCancelled";
            }
            return null;
        }

        internal static Status? ParseStatus(this string value)
        {
            switch( value )
            {
                case "scheduled":
                    return Status.Scheduled;
                case "cancelled":
                    return Status.Cancelled;
                case "succeeded":
                    return Status.Succeeded;
                case "failed":
                    return Status.Failed;
                case "providerCancelled":
                    return Status.ProviderCancelled;
            }
            return null;
        }
    }
}
