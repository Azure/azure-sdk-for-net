// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ServiceNetworking.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ServiceNetworking.Samples
{
    public partial class Sample_TrafficControllerFrontendResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetFrontend()
        {
            // Generated from example definition: 2025-01-01/FrontendGet.json
            // this example is just showing the usage of "Frontend_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TrafficControllerFrontendResource created on azure
            // for more information of creating TrafficControllerFrontendResource, please refer to the document of TrafficControllerFrontendResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string trafficControllerName = "tc1";
            string frontendName = "fe1";
            ResourceIdentifier trafficControllerFrontendResourceId = TrafficControllerFrontendResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, trafficControllerName, frontendName);
            TrafficControllerFrontendResource trafficControllerFrontend = client.GetTrafficControllerFrontendResource(trafficControllerFrontendResourceId);

            // invoke the operation
            TrafficControllerFrontendResource result = await trafficControllerFrontend.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficControllerFrontendData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteFrontend()
        {
            // Generated from example definition: 2025-01-01/FrontendDelete.json
            // this example is just showing the usage of "Frontend_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TrafficControllerFrontendResource created on azure
            // for more information of creating TrafficControllerFrontendResource, please refer to the document of TrafficControllerFrontendResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string trafficControllerName = "tc1";
            string frontendName = "fe1";
            ResourceIdentifier trafficControllerFrontendResourceId = TrafficControllerFrontendResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, trafficControllerName, frontendName);
            TrafficControllerFrontendResource trafficControllerFrontend = client.GetTrafficControllerFrontendResource(trafficControllerFrontendResourceId);

            // invoke the operation
            await trafficControllerFrontend.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateFrontend()
        {
            // Generated from example definition: 2025-01-01/FrontendPatch.json
            // this example is just showing the usage of "Frontend_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this TrafficControllerFrontendResource created on azure
            // for more information of creating TrafficControllerFrontendResource, please refer to the document of TrafficControllerFrontendResource
            string subscriptionId = "subid";
            string resourceGroupName = "rg1";
            string trafficControllerName = "tc1";
            string frontendName = "fe1";
            ResourceIdentifier trafficControllerFrontendResourceId = TrafficControllerFrontendResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, trafficControllerName, frontendName);
            TrafficControllerFrontendResource trafficControllerFrontend = client.GetTrafficControllerFrontendResource(trafficControllerFrontendResourceId);

            // invoke the operation
            TrafficControllerFrontendPatch patch = new TrafficControllerFrontendPatch();
            TrafficControllerFrontendResource result = await trafficControllerFrontend.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            TrafficControllerFrontendData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
