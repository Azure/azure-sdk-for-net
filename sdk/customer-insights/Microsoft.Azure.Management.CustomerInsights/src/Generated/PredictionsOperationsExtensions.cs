// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PredictionsOperations.
    /// </summary>
    public static partial class PredictionsOperationsExtensions
    {
            /// <summary>
            /// Creates a Prediction or updates an existing Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create/update Prediction operation.
            /// </param>
            public static PredictionResourceFormat CreateOrUpdate(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, PredictionResourceFormat parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, hubName, predictionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Prediction or updates an existing Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create/update Prediction operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionResourceFormat> CreateOrUpdateAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, PredictionResourceFormat parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            public static PredictionResourceFormat Get(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName)
            {
                return operations.GetAsync(resourceGroupName, hubName, predictionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionResourceFormat> GetAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            public static void Delete(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName)
            {
                operations.DeleteAsync(resourceGroupName, hubName, predictionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets training results.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            public static PredictionTrainingResults GetTrainingResults(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName)
            {
                return operations.GetTrainingResultsAsync(resourceGroupName, hubName, predictionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets training results.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionTrainingResults> GetTrainingResultsAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrainingResultsWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets model status of the prediction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            public static PredictionModelStatus GetModelStatus(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName)
            {
                return operations.GetModelStatusAsync(resourceGroupName, hubName, predictionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets model status of the prediction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionModelStatus> GetModelStatusAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelStatusWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the model status of prediction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create/update prediction model status operation.
            /// </param>
            public static void ModelStatus(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, PredictionModelStatus parameters)
            {
                operations.ModelStatusAsync(resourceGroupName, hubName, predictionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the model status of prediction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create/update prediction model status operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ModelStatusAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, PredictionModelStatus parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ModelStatusWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the predictions in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            public static IPage<PredictionResourceFormat> ListByHub(this IPredictionsOperations operations, string resourceGroupName, string hubName)
            {
                return operations.ListByHubAsync(resourceGroupName, hubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the predictions in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PredictionResourceFormat>> ListByHubAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubWithHttpMessagesAsync(resourceGroupName, hubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Prediction or updates an existing Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create/update Prediction operation.
            /// </param>
            public static PredictionResourceFormat BeginCreateOrUpdate(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, PredictionResourceFormat parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, hubName, predictionName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Prediction or updates an existing Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create/update Prediction operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PredictionResourceFormat> BeginCreateOrUpdateAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, PredictionResourceFormat parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            public static void BeginDelete(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, hubName, predictionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Prediction in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='predictionName'>
            /// The name of the Prediction.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IPredictionsOperations operations, string resourceGroupName, string hubName, string predictionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, hubName, predictionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the predictions in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PredictionResourceFormat> ListByHubNext(this IPredictionsOperations operations, string nextPageLink)
            {
                return operations.ListByHubNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the predictions in the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PredictionResourceFormat>> ListByHubNextAsync(this IPredictionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
