// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The prediction resource format.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PredictionResourceFormat : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the PredictionResourceFormat class.
        /// </summary>
        public PredictionResourceFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PredictionResourceFormat class.
        /// </summary>
        /// <param name="negativeOutcomeExpression">Negative outcome
        /// expression.</param>
        /// <param name="positiveOutcomeExpression">Positive outcome
        /// expression.</param>
        /// <param name="primaryProfileType">Primary profile type.</param>
        /// <param name="scopeExpression">Scope expression.</param>
        /// <param name="autoAnalyze">Whether do auto analyze.</param>
        /// <param name="mappings">Definition of the link mapping of
        /// prediction.</param>
        /// <param name="scoreLabel">Score label.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="description">Description of the prediction.</param>
        /// <param name="displayName">Display name of the prediction.</param>
        /// <param name="involvedInteractionTypes">Interaction types involved
        /// in the prediction.</param>
        /// <param name="involvedKpiTypes">KPI types involved in the
        /// prediction.</param>
        /// <param name="involvedRelationships">Relationships involved in the
        /// prediction.</param>
        /// <param name="provisioningState">Provisioning state. Possible values
        /// include: 'Provisioning', 'Succeeded', 'Expiring', 'Deleting',
        /// 'HumanIntervention', 'Failed'</param>
        /// <param name="predictionName">Name of the prediction.</param>
        /// <param name="tenantId">The hub name.</param>
        /// <param name="grades">The prediction grades.</param>
        /// <param name="systemGeneratedEntities">System generated
        /// entities.</param>
        public PredictionResourceFormat(string negativeOutcomeExpression, string positiveOutcomeExpression, string primaryProfileType, string scopeExpression, bool autoAnalyze, PredictionMappings mappings, string scoreLabel, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> description = default(IDictionary<string, string>), IDictionary<string, string> displayName = default(IDictionary<string, string>), IList<string> involvedInteractionTypes = default(IList<string>), IList<string> involvedKpiTypes = default(IList<string>), IList<string> involvedRelationships = default(IList<string>), string provisioningState = default(string), string predictionName = default(string), string tenantId = default(string), IList<PredictionGradesItem> grades = default(IList<PredictionGradesItem>), PredictionSystemGeneratedEntities systemGeneratedEntities = default(PredictionSystemGeneratedEntities))
            : base(id, name, type)
        {
            Description = description;
            DisplayName = displayName;
            InvolvedInteractionTypes = involvedInteractionTypes;
            InvolvedKpiTypes = involvedKpiTypes;
            InvolvedRelationships = involvedRelationships;
            NegativeOutcomeExpression = negativeOutcomeExpression;
            PositiveOutcomeExpression = positiveOutcomeExpression;
            PrimaryProfileType = primaryProfileType;
            ProvisioningState = provisioningState;
            PredictionName = predictionName;
            ScopeExpression = scopeExpression;
            TenantId = tenantId;
            AutoAnalyze = autoAnalyze;
            Mappings = mappings;
            ScoreLabel = scoreLabel;
            Grades = grades;
            SystemGeneratedEntities = systemGeneratedEntities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description of the prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets display name of the prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public IDictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or sets interaction types involved in the prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.involvedInteractionTypes")]
        public IList<string> InvolvedInteractionTypes { get; set; }

        /// <summary>
        /// Gets or sets KPI types involved in the prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.involvedKpiTypes")]
        public IList<string> InvolvedKpiTypes { get; set; }

        /// <summary>
        /// Gets or sets relationships involved in the prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.involvedRelationships")]
        public IList<string> InvolvedRelationships { get; set; }

        /// <summary>
        /// Gets or sets negative outcome expression.
        /// </summary>
        [JsonProperty(PropertyName = "properties.negativeOutcomeExpression")]
        public string NegativeOutcomeExpression { get; set; }

        /// <summary>
        /// Gets or sets positive outcome expression.
        /// </summary>
        [JsonProperty(PropertyName = "properties.positiveOutcomeExpression")]
        public string PositiveOutcomeExpression { get; set; }

        /// <summary>
        /// Gets or sets primary profile type.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryProfileType")]
        public string PrimaryProfileType { get; set; }

        /// <summary>
        /// Gets provisioning state. Possible values include: 'Provisioning',
        /// 'Succeeded', 'Expiring', 'Deleting', 'HumanIntervention', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets name of the prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.predictionName")]
        public string PredictionName { get; set; }

        /// <summary>
        /// Gets or sets scope expression.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scopeExpression")]
        public string ScopeExpression { get; set; }

        /// <summary>
        /// Gets the hub name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets or sets whether do auto analyze.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoAnalyze")]
        public bool AutoAnalyze { get; set; }

        /// <summary>
        /// Gets or sets definition of the link mapping of prediction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mappings")]
        public PredictionMappings Mappings { get; set; }

        /// <summary>
        /// Gets or sets score label.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scoreLabel")]
        public string ScoreLabel { get; set; }

        /// <summary>
        /// Gets or sets the prediction grades.
        /// </summary>
        [JsonProperty(PropertyName = "properties.grades")]
        public IList<PredictionGradesItem> Grades { get; set; }

        /// <summary>
        /// Gets system generated entities.
        /// </summary>
        [JsonProperty(PropertyName = "properties.systemGeneratedEntities")]
        public PredictionSystemGeneratedEntities SystemGeneratedEntities { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NegativeOutcomeExpression == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NegativeOutcomeExpression");
            }
            if (PositiveOutcomeExpression == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PositiveOutcomeExpression");
            }
            if (PrimaryProfileType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrimaryProfileType");
            }
            if (ScopeExpression == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScopeExpression");
            }
            if (Mappings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Mappings");
            }
            if (ScoreLabel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScoreLabel");
            }
            if (Mappings != null)
            {
                Mappings.Validate();
            }
        }
    }
}
