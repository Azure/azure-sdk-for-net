// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Definition of the link mapping of prediction.
    /// </summary>
    public partial class PredictionMappings
    {
        /// <summary>
        /// Initializes a new instance of the PredictionMappings class.
        /// </summary>
        public PredictionMappings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PredictionMappings class.
        /// </summary>
        /// <param name="score">The score of the link mapping.</param>
        /// <param name="grade">The grade of the link mapping.</param>
        /// <param name="reason">The reason of the link mapping.</param>
        public PredictionMappings(string score, string grade, string reason)
        {
            Score = score;
            Grade = grade;
            Reason = reason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the score of the link mapping.
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public string Score { get; set; }

        /// <summary>
        /// Gets or sets the grade of the link mapping.
        /// </summary>
        [JsonProperty(PropertyName = "grade")]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or sets the reason of the link mapping.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Score == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Score");
            }
            if (Grade == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Grade");
            }
            if (Reason == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Reason");
            }
        }
    }
}
