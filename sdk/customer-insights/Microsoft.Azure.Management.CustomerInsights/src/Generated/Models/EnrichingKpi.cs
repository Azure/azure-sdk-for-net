// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Azure;
    using Management;
    using CustomerInsights;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The enriching KPI definition.
    /// </summary>
    public partial class EnrichingKpi : KpiDefinition
    {
        /// <summary>
        /// Initializes a new instance of the EnrichingKpi class.
        /// </summary>
        public EnrichingKpi() { }

        /// <summary>
        /// Initializes a new instance of the EnrichingKpi class.
        /// </summary>
        /// <param name="entityType">The mapping entity type. Possible values
        /// include: 'None', 'Profile', 'Interaction', 'Relationship'</param>
        /// <param name="entityTypeName">The mapping entity name.</param>
        /// <param name="calculationWindow">The calculation window. Possible
        /// values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'</param>
        /// <param name="function">The computation function for the KPI.
        /// Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last',
        /// 'Count', 'None', 'CountDistinct'</param>
        /// <param name="expression">The computation expression for the
        /// KPI.</param>
        /// <param name="tenantId">The hub name.</param>
        /// <param name="kpiName">The KPI name.</param>
        /// <param name="displayName">Localized display name for the
        /// KPI.</param>
        /// <param name="description">Localized description for the
        /// KPI.</param>
        /// <param name="calculationWindowFieldName">Name of calculation window
        /// field.</param>
        /// <param name="unit">The unit of measurement for the KPI.</param>
        /// <param name="filter">The filter expression for the KPI.</param>
        /// <param name="groupBy">the group by properties for the KPI.</param>
        /// <param name="groupByMetadata">The KPI GroupByMetadata.</param>
        /// <param name="participantProfilesMetadata">The participant
        /// profiles.</param>
        /// <param name="provisioningState">Provisioning state. Possible values
        /// include: 'Provisioning', 'Succeeded', 'Expiring', 'Deleting',
        /// 'HumanIntervention', 'Failed'</param>
        /// <param name="thresHolds">The KPI thresholds.</param>
        /// <param name="aliases">The aliases.</param>
        /// <param name="extracts">The KPI extracts.</param>
        public EnrichingKpi(EntityTypes entityType, string entityTypeName, CalculationWindowTypes calculationWindow, KpiFunctions function, string expression, string tenantId = default(string), string kpiName = default(string), IDictionary<string, string> displayName = default(IDictionary<string, string>), IDictionary<string, string> description = default(IDictionary<string, string>), string calculationWindowFieldName = default(string), string unit = default(string), string filter = default(string), IList<string> groupBy = default(IList<string>), IList<KpiGroupByMetadata> groupByMetadata = default(IList<KpiGroupByMetadata>), IList<KpiParticipantProfilesMetadata> participantProfilesMetadata = default(IList<KpiParticipantProfilesMetadata>), string provisioningState = default(string), KpiThresholds thresHolds = default(KpiThresholds), IList<KpiAlias> aliases = default(IList<KpiAlias>), IList<KpiExtract> extracts = default(IList<KpiExtract>))
            : base(entityType, entityTypeName, calculationWindow, function, expression, tenantId, kpiName, displayName, description, calculationWindowFieldName, unit, filter, groupBy, groupByMetadata, participantProfilesMetadata, provisioningState, thresHolds, aliases, extracts)
        {
        }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}

