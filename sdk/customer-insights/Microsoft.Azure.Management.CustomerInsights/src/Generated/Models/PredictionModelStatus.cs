// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The prediction model status.
    /// </summary>
    public partial class PredictionModelStatus
    {
        /// <summary>
        /// Initializes a new instance of the PredictionModelStatus class.
        /// </summary>
        public PredictionModelStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PredictionModelStatus class.
        /// </summary>
        /// <param name="status">Prediction model life cycle.  When prediction
        /// is in PendingModelConfirmation status, it is allowed to update the
        /// status to PendingFeaturing or Active through API. Possible values
        /// include: 'New', 'Provisioning', 'ProvisioningFailed',
        /// 'PendingDiscovering', 'Discovering', 'PendingFeaturing',
        /// 'Featuring', 'FeaturingFailed', 'PendingTraining', 'Training',
        /// 'TrainingFailed', 'Evaluating', 'EvaluatingFailed',
        /// 'PendingModelConfirmation', 'Active', 'Deleted',
        /// 'HumanIntervention', 'Failed'</param>
        /// <param name="tenantId">The hub name.</param>
        /// <param name="predictionName">The prediction name.</param>
        /// <param name="predictionGuidId">The prediction GUID ID.</param>
        /// <param name="message">The model status message.</param>
        /// <param name="trainingSetCount">Count of the training set.</param>
        /// <param name="testSetCount">Count of the test set.</param>
        /// <param name="validationSetCount">Count of the validation
        /// set.</param>
        /// <param name="trainingAccuracy">The training accuracy.</param>
        /// <param name="signalsUsed">The signals used.</param>
        /// <param name="modelVersion">Version of the model.</param>
        public PredictionModelStatus(string status, string tenantId = default(string), string predictionName = default(string), string predictionGuidId = default(string), string message = default(string), int? trainingSetCount = default(int?), int? testSetCount = default(int?), int? validationSetCount = default(int?), int? trainingAccuracy = default(int?), int? signalsUsed = default(int?), string modelVersion = default(string))
        {
            TenantId = tenantId;
            PredictionName = predictionName;
            PredictionGuidId = predictionGuidId;
            Status = status;
            Message = message;
            TrainingSetCount = trainingSetCount;
            TestSetCount = testSetCount;
            ValidationSetCount = validationSetCount;
            TrainingAccuracy = trainingAccuracy;
            SignalsUsed = signalsUsed;
            ModelVersion = modelVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the hub name.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets the prediction name.
        /// </summary>
        [JsonProperty(PropertyName = "predictionName")]
        public string PredictionName { get; private set; }

        /// <summary>
        /// Gets the prediction GUID ID.
        /// </summary>
        [JsonProperty(PropertyName = "predictionGuidId")]
        public string PredictionGuidId { get; private set; }

        /// <summary>
        /// Gets or sets prediction model life cycle.  When prediction is in
        /// PendingModelConfirmation status, it is allowed to update the status
        /// to PendingFeaturing or Active through API. Possible values include:
        /// 'New', 'Provisioning', 'ProvisioningFailed', 'PendingDiscovering',
        /// 'Discovering', 'PendingFeaturing', 'Featuring', 'FeaturingFailed',
        /// 'PendingTraining', 'Training', 'TrainingFailed', 'Evaluating',
        /// 'EvaluatingFailed', 'PendingModelConfirmation', 'Active',
        /// 'Deleted', 'HumanIntervention', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets the model status message.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; private set; }

        /// <summary>
        /// Gets count of the training set.
        /// </summary>
        [JsonProperty(PropertyName = "trainingSetCount")]
        public int? TrainingSetCount { get; private set; }

        /// <summary>
        /// Gets count of the test set.
        /// </summary>
        [JsonProperty(PropertyName = "testSetCount")]
        public int? TestSetCount { get; private set; }

        /// <summary>
        /// Gets count of the validation set.
        /// </summary>
        [JsonProperty(PropertyName = "validationSetCount")]
        public int? ValidationSetCount { get; private set; }

        /// <summary>
        /// Gets the training accuracy.
        /// </summary>
        [JsonProperty(PropertyName = "trainingAccuracy")]
        public int? TrainingAccuracy { get; private set; }

        /// <summary>
        /// Gets the signals used.
        /// </summary>
        [JsonProperty(PropertyName = "signalsUsed")]
        public int? SignalsUsed { get; private set; }

        /// <summary>
        /// Gets version of the model.
        /// </summary>
        [JsonProperty(PropertyName = "modelVersion")]
        public string ModelVersion { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
        }
    }
}
