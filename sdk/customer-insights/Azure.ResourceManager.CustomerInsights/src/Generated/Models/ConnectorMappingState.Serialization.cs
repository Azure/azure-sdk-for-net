// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    internal static partial class ConnectorMappingStateExtensions
    {
        public static string ToSerialString(this ConnectorMappingState value) => value switch
        {
            ConnectorMappingState.Creating => "Creating",
            ConnectorMappingState.Created => "Created",
            ConnectorMappingState.Failed => "Failed",
            ConnectorMappingState.Ready => "Ready",
            ConnectorMappingState.Running => "Running",
            ConnectorMappingState.Stopped => "Stopped",
            ConnectorMappingState.Expiring => "Expiring",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ConnectorMappingState value.")
        };

        public static ConnectorMappingState ToConnectorMappingState(this string value)
        {
            if (string.Equals(value, "Creating", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Creating;
            if (string.Equals(value, "Created", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Created;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Failed;
            if (string.Equals(value, "Ready", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Ready;
            if (string.Equals(value, "Running", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Running;
            if (string.Equals(value, "Stopped", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Stopped;
            if (string.Equals(value, "Expiring", StringComparison.InvariantCultureIgnoreCase)) return ConnectorMappingState.Expiring;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ConnectorMappingState value.");
        }
    }
}
