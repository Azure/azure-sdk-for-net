// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CustomerInsights.Models
{
    public partial class ConnectorMappingStructure : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("propertyName");
            writer.WriteStringValue(PropertyName);
            writer.WritePropertyName("columnName");
            writer.WriteStringValue(ColumnName);
            if (Optional.IsDefined(CustomFormatSpecifier))
            {
                writer.WritePropertyName("customFormatSpecifier");
                writer.WriteStringValue(CustomFormatSpecifier);
            }
            if (Optional.IsDefined(IsEncrypted))
            {
                writer.WritePropertyName("isEncrypted");
                writer.WriteBooleanValue(IsEncrypted.Value);
            }
            writer.WriteEndObject();
        }

        internal static ConnectorMappingStructure DeserializeConnectorMappingStructure(JsonElement element)
        {
            string propertyName = default;
            string columnName = default;
            Optional<string> customFormatSpecifier = default;
            Optional<bool> isEncrypted = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("propertyName"))
                {
                    propertyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("columnName"))
                {
                    columnName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customFormatSpecifier"))
                {
                    customFormatSpecifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEncrypted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isEncrypted = property.Value.GetBoolean();
                    continue;
                }
            }
            return new ConnectorMappingStructure(propertyName, columnName, customFormatSpecifier.Value, Optional.ToNullable(isEncrypted));
        }
    }
}
